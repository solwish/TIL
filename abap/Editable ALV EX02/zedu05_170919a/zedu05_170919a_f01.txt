*&---------------------------------------------------------------------*
*&  Include           ZEDU05_170919A_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_data_stan .

  CLEAR : gt_data, gt_data[].

  SELECT a~matnr b~maktx a~pstat a~mtart a~matkl
         c~werks d~name1 a~meins
    INTO CORRESPONDING FIELDS OF TABLE gt_data
    FROM mara AS a
    INNER JOIN makt AS b
    ON a~matnr EQ b~matnr
    AND b~spras EQ 'EN'
    INNER JOIN marc AS c
    ON a~matnr EQ c~matnr
    INNER JOIN t001w AS d
    ON c~werks EQ d~werks
    WHERE a~matnr IN s_matnr.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_FCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0021   text
*      -->P_0022   text
*      -->P_0023   text
*      -->P_0024   text
*      -->P_0025   text
*----------------------------------------------------------------------*
FORM set_fcat  USING    p_key
                        p_fieldname
                        p_coltext
                        p_ref_table
                        p_ref_field.

  gs_fcat-key       = p_key.
  gs_fcat-fieldname = p_fieldname.
  gs_fcat-coltext   = p_coltext.
  gs_fcat-ref_table = p_ref_table.
  gs_fcat-ref_field = p_ref_field.

  IF p_cbo IS NOT INITIAL.

    CLEAR gs_fcat-ref_table.
    gs_fcat-ref_table = 'ZTEDU05_02'.
    gs_fcat-edit      = 'X'.

    IF   p_fieldname EQ 'MAKTX'
      OR p_fieldname EQ 'MATNR'
      OR p_fieldname EQ 'WERKS'.

      CLEAR gs_fcat-edit.
    ENDIF.

  ENDIF.

*  IF gv_change_mode NE 'X'.
*    CLEAR gs_fcat-edit.
*  ENDIF.

  APPEND gs_fcat TO gt_fcat.
  CLEAR gs_fcat.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MAKE_CONTAINER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM make_container .

  CREATE OBJECT go_container
    EXPORTING
      side      = go_container->dock_at_left
      extension = 2000.

  CREATE OBJECT go_grid
    EXPORTING
      i_parent = go_container.

  CALL METHOD go_grid->set_table_for_first_display
    EXPORTING
      is_variant      = gs_variant
      i_save          = 'X'
      is_layout       = gs_layout
    CHANGING
      it_outtab       = gt_data[]
      it_fieldcatalog = gt_fcat
*     it_sort         =
    .

  CALL METHOD go_grid->set_ready_for_input
    EXPORTING
      i_ready_for_input = gv_change_mode.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  REFRESH_TABLE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM refresh_table .

  CLEAR gs_stable.

  gs_stable-row = 'X'.
  gs_stable-col = 'X'.

  CALL METHOD go_grid->refresh_table_display
    EXPORTING
      is_stable      = gs_stable
      i_soft_refresh = space.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SAVE_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM save_data .


  CALL METHOD go_grid->check_changed_data.

  IF gt_data[] IS NOT INITIAL.

    CASE 'X'.
      WHEN p_stan.
        CLEAR : gt_data_sd, gt_data_sd[], gs_row, gt_row.

        CALL METHOD go_grid->get_selected_rows
          IMPORTING
            et_index_rows = gt_row.

        IF gt_row IS INITIAL.
          MESSAGE s000 WITH 'Please Select row' DISPLAY LIKE 'E'.
          EXIT.
        ENDIF.

        LOOP AT gt_row INTO gs_row.
          READ TABLE gt_data INDEX gs_row-index.

          IF sy-subrc EQ 0.
            MOVE-CORRESPONDING gt_data TO gt_data_sd.

            APPEND gt_data_sd.
            CLEAR  gt_data_sd.
          ENDIF.
        ENDLOOP.

        MODIFY ztedu05_02 FROM TABLE gt_data_sd.

      WHEN p_cbo.
        MODIFY ztedu05_02 FROM TABLE gt_data.

      WHEN OTHERS.
    ENDCASE.

    IF sy-subrc EQ 0.
      COMMIT WORK AND WAIT.
      MESSAGE s000 WITH 'Save Success'.

      IF p_cbo EQ 'X'.
        PERFORM get_data_cbo.
      ENDIF.

    ELSE.
      ROLLBACK WORK.
      MESSAGE s000 WITH 'Save fail' DISPLAY LIKE 'E'.

    ENDIF.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DELETE_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM delete_data .

  CLEAR : gt_data_sd, gt_data_sd[], gs_row, gt_row.

  CASE 'X'.

    WHEN p_cbo.
      CALL METHOD go_grid->get_selected_rows
        IMPORTING
          et_index_rows = gt_row.

      IF gt_row IS INITIAL.
        MESSAGE s000 WITH 'Please Select row' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      LOOP AT gt_row INTO gs_row.
        READ TABLE gt_data INDEX gs_row-index.

        IF sy-subrc EQ 0.
          MOVE-CORRESPONDING gt_data TO gt_data_sd.

          APPEND gt_data_sd.
          CLEAR  gt_data_sd.
        ENDIF.
      ENDLOOP.

    WHEN OTHERS.
      MESSAGE s000 WITH 'You cant delete standard table data' DISPLAY LIKE 'E'.
      EXIT.

  ENDCASE.

  IF gt_data_sd[] IS NOT INITIAL.
    DELETE ztedu05_02 FROM TABLE gt_data_sd.

    IF sy-subrc EQ 0.
      COMMIT WORK AND WAIT.
      MESSAGE s000 WITH 'Delete Success'.
      PERFORM get_data_cbo.
    ELSE.
      ROLLBACK WORK.
      MESSAGE s000 WITH 'Delete fail' DISPLAY LIKE 'E'.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_CBO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_data_cbo .

  CLEAR : gt_data, gt_data[].

  SELECT matnr maktx pstat mtart matkl
         werks name1 meins
  INTO CORRESPONDING FIELDS OF TABLE gt_data
  FROM ztedu05_02
  WHERE matnr IN s_matnr.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  KEEP_SELECT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM keep_select .

  IF gt_row IS NOT INITIAL.

    CALL METHOD go_grid->set_selected_rows
      EXPORTING
        it_index_rows            = gt_row
        is_keep_other_selections = 'X'.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHANGE_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM change_data .

  CASE 'X'.

    WHEN p_cbo.
      IF gv_change_mode EQ 0.
        gv_change_mode = 1.
      ELSE.
        gv_change_mode = 0.
      ENDIF.

      CALL METHOD go_grid->set_ready_for_input
        EXPORTING
          i_ready_for_input = gv_change_mode.

    WHEN p_stan.
      MESSAGE s000 WITH 'You dont have permission' DISPLAY LIKE 'E'.
      EXIT.
    WHEN OTHERS.
  ENDCASE.

ENDFORM.

----------------------------------------------------------------------------------
Extracted by Direct Download Enterprise version 1.3.1 - E.G.Mellodew. 1998-2005 UK. Sap Release 750
