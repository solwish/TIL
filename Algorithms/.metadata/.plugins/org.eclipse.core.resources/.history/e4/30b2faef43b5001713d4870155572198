package swExpert;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class ZSM {
	int x, y;

	public ZSM(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class LunchTime {
	static int answer = Integer.MAX_VALUE;
	static int[] match;
	static int M = 0;
	static int S = 0;
	static ZSM man[], stair[];
	static int[][] map;

	static void update() {
		int total_min_time = 0;
		
		for(int stair_index = 0; stair_index<2; stair_index++) {
			int 
		}
		
	}

	static void dfs(int man_index) {
		if (man_index == M) {
			update();
			return;
		}

		for (int stair_index = 0; stair_index < 2; stair_index++) {
			match[man_index] = stair_index;
			dfs(man_index + 1);
		}
	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		int N;

		for (int t_case = 1; t_case <= T; t_case++) {
			N = Integer.parseInt(br.readLine());
			 A = new int[N][N];
			// Queue<Integer> man = new LinkedList<Integer>();
			// Queue<Integer> stair = new LinkedList<Integer>();
			StringTokenizer s;
			M = S = 0;
			man
			
			for (int i = 0; i < N; i++) {
				s = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++) {
					A[i][j] = Integer.parseInt(s.nextToken());
					if (A[i][j] == 1) {
						man[]
						M++;
					} else if (A[i][j] >= 2) {
						
					}
				}
			}
			answer = Integer.MAX_VALUE;
			match = new int[M];

			dfs(0);
			System.out.println("#" + t_case + " " + answer);
		}
	}

}
