package swExpert;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

class ZSM {
	int x, y;

	public ZSM(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

public class LunchTime {
	static int MAXM = 10;
	static int MAXT = 10 * 2 + 10 * 10;
	static int answer = Integer.MAX_VALUE;
	static int[] match;
	static int M = 0;
	static int S = 0;
	static ZSM man[], stair[];
	static int[][] map;

	static int abs(int x) {
		if (x >= 0)
			return x;
		return -x;
	}

	static int dist(int man_index, int stair_index) {
		int dx = abs(man[man_index].x - stair[stair_index].x);
		int dy = abs(man[man_index].y - stair[stair_index].y);
		return dx + dy;
	}

	static void update() {
		int total_min_time = 0;

		for (int stair_index = 0; stair_index < 2; stair_index++) {
			ZSM now_stair = stair[stair_index];
			int arrival_time[] = new int[MAXM * 2];
			int current_stair[] = new int[MAXT];
			for (int i = 0; i < MAXT; i++)
				current_stair[i] = 0;
			for (int i = 0; i < MAXM; i++)
				arrival_time[i] = 0;
			for (int man_index = 0; man_index < M; man_index++) {
				if (match[man_index] == stair_index)
					arrival_time[dist(man_index, stair_index) + 1]++;
			}

			int now_min_time = 0;
			for (int time = 1; time <= 20; time++) {
				while (arrival_time[time] > 0) {
					arrival_time[time]--;
					int remain_time = map[now_stair.x][now_stair.y];

					for (int walk_time = time; walk_time < MAXT; walk_time++) {
						if (current_stair[walk_time] < 3) {
							current_stair[walk_time]++;
							remain_time--;

							if (remain_time == 0) {
								now_min_time = max(now_min_time, walk_time + 1);
								break;
							}
						}
					}
				}
			}
		}

	}

	static void dfs(int man_index) {
		if (man_index == M) {
			update();
			return;
		}

		for (int stair_index = 0; stair_index < 2; stair_index++) {
			match[man_index] = stair_index;
			dfs(man_index + 1);
		}
	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		int N;

		for (int t_case = 1; t_case <= T; t_case++) {
			N = Integer.parseInt(br.readLine());
			map = new int[N][N];
			StringTokenizer s;
			M = S = 0;
			man = new ZSM[N * N];
			stair = new ZSM[2];

			for (int i = 0; i < N; i++) {
				s = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++) {
					map[i][j] = Integer.parseInt(s.nextToken());
					if (map[i][j] == 1) {
						man[M++] = new ZSM(i, j);
					} else if (map[i][j] >= 2) {
						stair[M++] = new ZSM(i, j);
					}
				}
			}
			answer = Integer.MAX_VALUE;
			match = new int[M];

			dfs(0);
			System.out.println("#" + t_case + " " + answer);
		}
	}

}
