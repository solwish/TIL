package swExpert;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Trail {
	static int[] xAxis = { 0, -1, 0, 1 };
	static int[] yAxis = { -1, 0, 1, 0 };

	public static void main(String[] args) {
//		Scanner sc = new Scanner(System.in);
//		int T = sc.nextInt();
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		
		for (int test_case = 1; test_case <= T; test_case++) {
			StringTokenizer s;
			int max = -1;
			s = new StringTokenizer(br.readLine());
			int N = Integer.parseInt(s.nextToken());
			int K = Integer.parseInt(s.nextToken());
			int top = 0;
			Queue<Integer> Q = new LinkedList<Integer>();

			int[][] A = new int[N][N];

			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					A[i][j] = sc.nextInt();
					if (top < A[i][j])
						top = A[i][j];
				}
			}
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (top == A[i][j]) {
						Q.offer(i);
						Q.offer(j);
					}
				}
			}

			while (!Q.isEmpty()) {
				int startX = Q.poll();
				int startY = Q.poll();

				for (int i = 0; i < N; i++) {
					for (int j = 0; j < N; j++) {
						for (int k = 0; k <= K; k++) {
							int[][] d = new int[N][N];
							int[][] B = new int[N][N];
							for (int q = 0; q < N; q++) {
								for (int w = 0; w < N; w++) {
									B[q][w] = A[q][w];
								}
							}
							B[i][j] = A[i][j] - k;
							d[startX][startY] = 1;
							max = dfs(top, max, N, B, startX, startY, d);
						}
					}
				}
			}
			System.out.println("#" + test_case + " " + max);
		}
	}

	private static int dfs(int top, int max, int N, int[][] B, int i, int j, int[][] d) {
		for (int z = 0; z < 4; z++) {
			int nx = i + xAxis[z];
			int ny = j + yAxis[z];
			int[][] Nd = new int[N][N];

			for (int q = 0; q < N; q++) {
				for (int w = 0; w < N; w++)
					Nd[q][w] = d[q][w];
			}

			if (isPossible(nx, ny, N) && Nd[nx][ny] == 0 && B[nx][ny] < B[i][j]) {
				Nd[nx][ny] = Nd[i][j] + 1;
				if (max < Nd[nx][ny]) {
					max = Nd[nx][ny];

				}
				max = dfs(top, max, N, B, nx, ny, Nd);
			}
		}
		return max;
	}

	static boolean isPossible(int x, int y, int N) {
		if (x >= 0 && x < N && y >= 0 && y < N)
			return true;
		return false;
	}
}
