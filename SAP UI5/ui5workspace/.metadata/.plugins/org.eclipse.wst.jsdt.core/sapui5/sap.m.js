
// ---- sap.m --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.toString = function() { return ""; };
/**
 * Returns invalid date value of UI5.
 * 
 * @deprecated Since 1.12 UI5 returns null for invalid date
 * @returns {null}
 * @public
 * @since 1.10
 * 
 * @memberof sap.m
 */
sap.m.prototype.getInvalidDate = function() { return null; };

/**
 * Finds default locale settings once and returns always the same.
 * We should not need to create new instance to get same locale settings
 * This method keep the locale instance in the scope and returns the same after first run
 * 
 * @return {Object} sap.ui.core.Locale instane
 * @public
 * @since 1.10
 * 
 * @memberof sap.m
 */
sap.m.prototype.getLocale = function() { return null; };

/**
 * Finds default locale data once and returns always the same.
 * 
 * @return {Object} sap.ui.core.LocaleData instance
 * @public
 * @since 1.10
 * 
 * @memberof sap.m
 */
sap.m.prototype.getLocaleData = function() { return null; };

/**
 * Checks if the given parameter is a valid JsDate Object.
 * 
 * @param {any} value Any variable to test.
 * @return {boolean}
 * @public
 * @since 1.10
 * 
 * @memberof sap.m
 */
sap.m.prototype.isDate = function(value) { return false; };


// ---- sap.m.ActionListItem --------------------------------------------------------------------------

/**
 * Constructor for a new ActionListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * 
 * @param {string} [sId] Id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>sap.m.ActionListItem</code> can be used like a <code>button</code> to fire actions when pressed.
 * <b>Note:</b> The inherited <code>selected</code> property of the <code>sap.m.ListItemBase</code> is not supported.
 * @extends sap.m.ListItemBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ActionListItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ActionListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ActionListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.ActionListItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ActionListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Determines item specific mode
 * 
 * ActionListItems are not selectable because they are command controls (like Button or Link) so triggering the associated command, rather than selection is
 * appropriate to happen upon user action on these items. By overwriting isSelectable (inherited from ListItemBase) we exclude the item from processing
 * specific to selectable list-items.
 * 
 * @protected
 * @overwrite
 * 
 */
sap.m.ActionListItem.prototype.getMode = function() {  };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Defines the text that appears in the control.
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.ActionListItem.prototype.getText = function() { return ""; };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Defines the text that appears in the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.ActionListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ActionListItem.prototype.setText = function(sText) { return new sap.m.ActionListItem(); };


// ---- sap.m.ActionSelect --------------------------------------------------------------------------

/**
 * Constructor for a new ActionSelect.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Associations
 * <ul>
 * <li>{@link #getButtons buttons} : (sap.ui.core.ID | sap.m.Button)[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Select#constructor sap.m.Select}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The ActionSelect control provides a list of predefined items that allows end users to choose options and additionally trigger some actions.
 * @extends sap.m.Select
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ActionSelect = function(sId,mSettings) {};
/**
 * Adds some button into the association {@link #getButtons buttons}.
 * 
 * @param {sap.ui.core.ID | sap.m.Button} vButton the buttons to add; if empty, nothing is inserted
 * @returns {sap.m.ActionSelect} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ActionSelect.prototype.addButton = function(vButton) { return new sap.m.ActionSelect(); };

/**
 * Creates a new subclass of class sap.m.ActionSelect with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Select.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ActionSelect.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getButtons buttons}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.ActionSelect.prototype.getButtons = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.ActionSelect.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ActionSelect.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Remove all buttons from the ActionSelect.
 * 
 * @returns {string[]} An array with the ids of the removed elements (might be empty).
 * @public
 * 
 */
sap.m.ActionSelect.prototype.removeAllButtons = function() { return new Array(); };

/**
 * Button to be removed from the ActionSelect content.
 * 
 * @param {int | string | sap.m.Button} vButton The button to remove or its index or id.
 * @returns {string} The id of the removed button or null.
 * @public
 * 
 */
sap.m.ActionSelect.prototype.removeButton = function(vButton) { return ""; };


// ---- sap.m.ActionSheet --------------------------------------------------------------------------

/**
 * Constructor for a new ActionSheet.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType (default: Bottom)</li>
 * <li>{@link #getShowCancelButton showCancelButton} : boolean (default: true)</li>
 * <li>{@link #getCancelButtonText cancelButtonText} : string</li>
 * <li>{@link #getTitle title} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.m.Button[] (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:cancelButtonTap cancelButtonTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:cancelButtonPress cancelButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The action sheet holds a list of options from which the user can select to complete an action.
 * <h3>Overview</h3>
 * The options of the action sheet are represented as {@link sap.m.Button buttons} with icons.
 * Elements in the action sheet are left-aligned. Actions should be arranged in order of importance, from top to bottom.
 * <h3>Guidelines</h3>
 * <ul>
 * <li>Always display text or text and icons for the actions. Do not use icons only.</li>
 * <li>Always provide a Cancel button on mobile phones.</li>
 * <li>Avoid scrolling on action sheets.</li>
 * </ul>
 * <h3>Responsive Behavior</h3>
 * On mobile phones the action sheet is displayed in a {@link sap.m.Dialog dialog}.
 * 
 * On tablets and desktop the action sheet is displayed in a {@link sap.m.Popover popover}.
 * 
 * When an action is triggered, the action sheet closes and you can display a confirmation as a {@link sap.m.MessageToast message toast}.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.9.1
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ActionSheet = function(sId,mSettings) {};
/**
 * This event will be fired after the ActionSheet is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ActionSheet.prototype.afterClose = function(oControlEvent) {  };

/**
 * This event will be fired after the ActionSheet is opened.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ActionSheet.prototype.afterOpen = function(oControlEvent) {  };

/**
 * This event will be fired before the ActionSheet is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ActionSheet.prototype.beforeClose = function(oControlEvent) {  };

/**
 * This event will be fired before the ActionSheet is opened.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ActionSheet.prototype.beforeOpen = function(oControlEvent) {  };

/**
 * This event is fired when the cancelButton is clicked. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by clicking outside.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ActionSheet.prototype.cancelButtonPress = function(oControlEvent) {  };

/**
 * This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside.
 * @event
 * 
 * @deprecated Since version 1.20.0.
 * This event is deprecated, use the cancelButtonPress event instead.
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ActionSheet.prototype.cancelButtonTap = function(oControlEvent) {  };

/**
 * Adds some button to the aggregation {@link #getButtons buttons}.
 * @param {sap.m.Button}
 *            oButton the button to add; if empty, nothing is inserted
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.addButton = function(oButton) { return new sap.m.ActionSheet(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterClose afterClose} event of this <code>sap.m.ActionSheet</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.
 * 
 * This event will be fired after the ActionSheet is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself
 * 
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachAfterClose = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterOpen afterOpen} event of this <code>sap.m.ActionSheet</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.
 * 
 * This event will be fired after the ActionSheet is opened.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself
 * 
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeClose beforeClose} event of this <code>sap.m.ActionSheet</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.
 * 
 * This event will be fired before the ActionSheet is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself
 * 
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.ActionSheet</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.
 * 
 * This event will be fired before the ActionSheet is opened.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself
 * 
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:cancelButtonPress cancelButtonPress} event of this <code>sap.m.ActionSheet</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.
 * 
 * This event is fired when the cancelButton is clicked. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by clicking outside.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself
 * 
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ActionSheet.prototype.attachCancelButtonPress = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:cancelButtonTap cancelButtonTap} event of this <code>sap.m.ActionSheet</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.
 * 
 * This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself
 * 
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 * @deprecated Since version 1.20.0.
 * This event is deprecated, use the cancelButtonPress event instead.
 * 
 */
sap.m.ActionSheet.prototype.attachCancelButtonTap = function(oData,fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Calling this method will make the ActionSheet disappear from the screen.
 * 
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ActionSheet.prototype.close = function() { return null; };

/**
 * Destroys all the buttons in the aggregation {@link #getButtons buttons}.
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.destroyButtons = function() { return new sap.m.ActionSheet(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterClose afterClose} event of this <code>sap.m.ActionSheet</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachAfterClose = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterOpen afterOpen} event of this <code>sap.m.ActionSheet</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeClose beforeClose} event of this <code>sap.m.ActionSheet</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.ActionSheet</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:cancelButtonPress cancelButtonPress} event of this <code>sap.m.ActionSheet</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachCancelButtonPress = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:cancelButtonTap cancelButtonTap} event of this <code>sap.m.ActionSheet</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.20.0.
 * This event is deprecated, use the cancelButtonPress event instead.
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.detachCancelButtonTap = function(fnFunction,oListener) { return new sap.m.ActionSheet(); };

/**
 * Creates a new subclass of class sap.m.ActionSheet with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ActionSheet.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterClose afterClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireAfterClose = function(mParameters) { return new sap.m.ActionSheet(); };

/**
 * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireAfterOpen = function(mParameters) { return new sap.m.ActionSheet(); };

/**
 * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireBeforeClose = function(mParameters) { return new sap.m.ActionSheet(); };

/**
 * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireBeforeOpen = function(mParameters) { return new sap.m.ActionSheet(); };

/**
 * Fires event {@link #event:cancelButtonPress cancelButtonPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.fireCancelButtonPress = function(mParameters) { return new sap.m.ActionSheet(); };

/**
 * Fires event {@link #event:cancelButtonTap cancelButtonTap} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 * @deprecated Since version 1.20.0.
 * This event is deprecated, use the cancelButtonPress event instead.
 * 
 */
sap.m.ActionSheet.prototype.fireCancelButtonTap = function(mParameters) { return new sap.m.ActionSheet(); };

/**
 * Gets content of aggregation {@link #getButtons buttons}.
 * 
 * These buttons are added to the content area in ActionSheet control. When button is tapped, the ActionSheet is closed before the tap event listener is called.
 * 
 * @returns {sap.m.Button[]}
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getButtons = function() { return new Array(); };

/**
 * Gets current value of property {@link #getCancelButtonText cancelButtonText}.
 * 
 * This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.
 * 
 * @returns {string} Value of property <code>cancelButtonText</code>
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getCancelButtonText = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.ActionSheet.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ActionSheet.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPlacement placement}.
 * 
 * The ActionSheet behaves as an sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferedLeft, sap.m.PlacementType.HorizontalPreferedRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferedTop, sap.m.PlacementType.VerticalPreferedBottom. The default value is sap.m.PlacementType.Bottom.
 * 
 * Default value is <code>Bottom</code>.
 * @returns {sap.m.PlacementType} Value of property <code>placement</code>
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getPlacement = function() { return new sap.m.PlacementType(); };

/**
 * Gets the ID of the hidden label
 * @returns {string} Id of hidden text
 * @protected
 * 
 */
sap.m.ActionSheet.prototype.getPopupHiddenLabelId = function() { return ""; };

/**
 * Gets current value of property {@link #getShowCancelButton showCancelButton}.
 * 
 * If this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showCancelButton</code>
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getShowCancelButton = function() { return false; };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Title will be shown in the header area in iPhone and every Android devices. This property will be ignored in tablets and desktop browser.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.getTitle = function() { return ""; };

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation {@link #getButtons buttons}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Button}
 *           oButton The button whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.indexOfButton = function(oButton) { return 0; };

/**
 * Inserts a button into the aggregation {@link #getButtons buttons}.
 * 
 * @param {sap.m.Button}
 *            oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the button should be inserted at; for
 *              a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the button is inserted at
 *              the last position
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.insertButton = function(oButton,iIndex) { return new sap.m.ActionSheet(); };

/**
 * The method checks if the ActionSheet is open. It returns true when the ActionSheet is currently open (this includes opening and closing animations), otherwise it returns false.
 * 
 * @type boolean
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ActionSheet.prototype.isOpen = function() { return false; };

/**
 * Calling this method will make the ActionSheet visible on the screen.
 * 
 * @param {object} oControl
 *         The ActionSheet behaves as an sap.m.Popover in iPad and the control parameter is the object to which the popover will be placed. It can be not only a UI5 control, but also an existing dom reference. The side of the placement depends on the placement property set in the popover. In other platforms, ActionSheet behaves as a standard dialog and this parameter is ignored because dialog is aligned to the screen.
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ActionSheet.prototype.openBy = function(oControl) { return null; };

/**
 * Removes all the controls from the aggregation {@link #getButtons buttons}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Button[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.removeAllButtons = function() { return new Array(); };

/**
 * Removes a button from the aggregation {@link #getButtons buttons}.
 * 
 * @param {int | string | sap.m.Button} vButton The button to remove or its index or id
 * @returns {sap.m.Button} The removed button or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.removeButton = function(vButton) { return new sap.m.Button(); };

/**
 * Sets a new value for property {@link #getCancelButtonText cancelButtonText}.
 * 
 * This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sCancelButtonText New value for property <code>cancelButtonText</code>
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.setCancelButtonText = function(sCancelButtonText) { return new sap.m.ActionSheet(); };

/**
 * Sets a new value for property {@link #getPlacement placement}.
 * 
 * The ActionSheet behaves as an sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferedLeft, sap.m.PlacementType.HorizontalPreferedRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferedTop, sap.m.PlacementType.VerticalPreferedBottom. The default value is sap.m.PlacementType.Bottom.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Bottom</code>.
 * @param {sap.m.PlacementType} sPlacement New value for property <code>placement</code>
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.setPlacement = function(sPlacement) { return new sap.m.ActionSheet(); };

/**
 * Sets a new value for property {@link #getShowCancelButton showCancelButton}.
 * 
 * If this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowCancelButton New value for property <code>showCancelButton</code>
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.setShowCancelButton = function(bShowCancelButton) { return new sap.m.ActionSheet(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Title will be shown in the header area in iPhone and every Android devices. This property will be ignored in tablets and desktop browser.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.ActionSheet} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ActionSheet.prototype.setTitle = function(sTitle) { return new sap.m.ActionSheet(); };


// ---- sap.m.App --------------------------------------------------------------------------

/**
 * Constructor for a new App.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHomeIcon homeIcon} : any</li>
 * <li>{@link #getBackgroundColor backgroundColor} : string</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:orientationChange orientationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.NavContainer#constructor sap.m.NavContainer}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * App is the root element of a UI5 mobile application. It inherits from NavContainer and thus provides its navigation capabilities.
 * It also adds certain header tags to the HTML page which are considered useful for mobile apps.
 * @extends sap.m.NavContainer
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.App = function(sId,mSettings) {};
/**
 * Fired when the orientation (portrait/landscape) of the device is changed.
 * @event
 * 
 * @deprecated Since version 1.20.0.
 * use sap.ui.Device.orientation.attachHandler(...)
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.landscape Whether the device is in landscape orientation.
 * @public
 * 
 */
sap.m.App.prototype.orientationChange = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:orientationChange orientationChange} event of this <code>sap.m.App</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.App</code> itself.
 * 
 * Fired when the orientation (portrait/landscape) of the device is changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.App</code> itself
 * 
 * @returns {sap.m.App} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 * @deprecated Since version 1.20.0.
 * use sap.ui.Device.orientation.attachHandler(...)
 * 
 */
sap.m.App.prototype.attachOrientationChange = function(oData,fnFunction,oListener) { return new sap.m.App(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:orientationChange orientationChange} event of this <code>sap.m.App</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.App} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.20.0.
 * use sap.ui.Device.orientation.attachHandler(...)
 * 
 * @public
 * 
 */
sap.m.App.prototype.detachOrientationChange = function(fnFunction,oListener) { return new sap.m.App(); };

/**
 * Creates a new subclass of class sap.m.App with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.NavContainer.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.App.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:orientationChange orientationChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.landscape] Whether the device is in landscape orientation.
 * 
 * @returns {sap.m.App} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 * @deprecated Since version 1.20.0.
 * use sap.ui.Device.orientation.attachHandler(...)
 * 
 */
sap.m.App.prototype.fireOrientationChange = function(mParameters) { return new sap.m.App(); };

/**
 * Gets current value of property {@link #getBackgroundColor backgroundColor}.
 * 
 * Background color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required.
 * Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
 * 
 * @returns {string} Value of property <code>backgroundColor</code>
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.App.prototype.getBackgroundColor = function() { return ""; };

/**
 * Gets current value of property {@link #getBackgroundImage backgroundImage}.
 * 
 * Background image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required.
 * This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>backgroundImage</code>
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.App.prototype.getBackgroundImage = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getBackgroundOpacity backgroundOpacity}.
 * 
 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
 * This can be used to make the application content better readable by making the background image partly transparent.
 * 
 * Default value is <code>1</code>.
 * @returns {float} Value of property <code>backgroundOpacity</code>
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.App.prototype.getBackgroundOpacity = function() { return 0.0; };

/**
 * Gets current value of property {@link #getBackgroundRepeat backgroundRepeat}.
 * 
 * Whether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>backgroundRepeat</code>
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.App.prototype.getBackgroundRepeat = function() { return false; };

/**
 * Gets current value of property {@link #getHomeIcon homeIcon}.
 * 
 * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * 
 * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
 * 
 * This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.
 * 
 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.
 * 
 * One example is:
 * 
 * app.setHomeIcon({
 * 'phone':'phone-icon.png',
 * 'phone@2':'phone-retina.png',
 * 'tablet':'tablet-icon.png',
 * 'tablet@2':'tablet-retina.png',
 * 'icon':'desktop.ico'
 * });
 * 
 * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
 * 
 * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".
 * 
 * @returns {any} Value of property <code>homeIcon</code>
 * 
 * @public
 * 
 */
sap.m.App.prototype.getHomeIcon = function() { return null; };

/**
 * Returns a metadata object for class sap.m.App.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.App.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
 * 
 * Background color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required.
 * Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sBackgroundColor New value for property <code>backgroundColor</code>
 * @returns {sap.m.App} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.App.prototype.setBackgroundColor = function(sBackgroundColor) { return new sap.m.App(); };

/**
 * Sets a new value for property {@link #getBackgroundImage backgroundImage}.
 * 
 * Background image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required.
 * This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sBackgroundImage New value for property <code>backgroundImage</code>
 * @returns {sap.m.App} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.App.prototype.setBackgroundImage = function(sBackgroundImage) { return new sap.m.App(); };

/**
 * Sets a new value for property {@link #getBackgroundOpacity backgroundOpacity}.
 * 
 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
 * This can be used to make the application content better readable by making the background image partly transparent.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>1</code>.
 * @param {float} fBackgroundOpacity New value for property <code>backgroundOpacity</code>
 * @returns {sap.m.App} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.App.prototype.setBackgroundOpacity = function(fBackgroundOpacity) { return new sap.m.App(); };

/**
 * Sets a new value for property {@link #getBackgroundRepeat backgroundRepeat}.
 * 
 * Whether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bBackgroundRepeat New value for property <code>backgroundRepeat</code>
 * @returns {sap.m.App} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.App.prototype.setBackgroundRepeat = function(bBackgroundRepeat) { return new sap.m.App(); };

/**
 * Sets a new value for property {@link #getHomeIcon homeIcon}.
 * 
 * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * 
 * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
 * 
 * This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.
 * 
 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.
 * 
 * One example is:
 * 
 * app.setHomeIcon({
 * 'phone':'phone-icon.png',
 * 'phone@2':'phone-retina.png',
 * 'tablet':'tablet-icon.png',
 * 'tablet@2':'tablet-retina.png',
 * 'icon':'desktop.ico'
 * });
 * 
 * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
 * 
 * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oHomeIcon New value for property <code>homeIcon</code>
 * @returns {sap.m.App} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.App.prototype.setHomeIcon = function(oHomeIcon) { return new sap.m.App(); };


// ---- sap.m.BackgroundDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.BackgroundDesign.toString = function() { return ""; };

// ---- sap.m.BackgroundHelper --------------------------------------------------------------------------

/**
 * Adds CSS classes and styles to the given RenderManager, depending on the given configuration for background color and background image.
 * To be called by control renderers supporting the global themable background image within their root tag, before they call writeClasses() and writeStyles().
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager
 * @param {String} [sBgColor] a configured custom background color for the control, if any
 * @param {sap.ui.core.URI} [sBgImgUrl] the configured custom background image for the control, if any
 * 
 * @protected
 * 
 * @memberof sap.m.BackgroundHelper
 */
sap.m.BackgroundHelper.prototype.addBackgroundColorStyles = function(rm,sBgColor,sBgImgUrl) {  };

/**
 * Renders an HTML tag into the given RenderManager which carries the background image which is either configured and given or coming from the current theme.
 * Should be called right after the opening root tag has been completed, so this is the first child element inside the control.
 * 
 * @param rm the RenderManager
 * @param {sap.ui.core.Control} oControl the control within which the tag will be rendered; its ID will be used to generate the element ID
 * @param {String|String[]}  vCssClass a css class or an array of css classes to add to the element
 * @param {sap.ui.core.URI}  [sBgImgUrl] the image of a configured background image; if this is not given, the theme background will be used and also the other settings are ignored.
 * @param {boolean} [bRepeat] whether the background image should be repeated/tiled (or stretched)
 * @param {float}   [fOpacity] the background image opacity, if any
 * 
 * @protected
 * 
 * @memberof sap.m.BackgroundHelper
 */
sap.m.BackgroundHelper.prototype.renderBackgroundImageTag = function(rm,oControl,vCssClass,sBgImgUrl,bRepeat,fOpacity) {  };


// ---- sap.m.Bar --------------------------------------------------------------------------

/**
 * Constructor for a new Bar.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnableFlexBox enableFlexBox} : boolean (default: false)</li>
 * <li>{@link #getTranslucent translucent} : boolean (default: false)</li>
 * <li>{@link #getDesign design} : sap.m.BarDesign (default: Auto)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContentLeft contentLeft} : sap.ui.core.Control[]</li>
 * <li>{@link #getContentMiddle contentMiddle} : sap.ui.core.Control[]</li>
 * <li>{@link #getContentRight contentRight} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The Bar control can be used as a header, sub-header and a footer in a page.
 * It has the capability to center a content like a title, while having other controls on the left and right side.
 * @extends sap.ui.core.Control
 * @implements sap.m.IBar
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Bar = function(sId,mSettings) {};
/**
 * Sets classes and tag according to the context of the page. Possible contexts are header, footer and sub-header.
 * @returns {sap.m.IBar} this for chaining
 * @protected
 * 
 */
sap.m.Bar.prototype.applyTagAndContextClassFor = undefined

/**
 * Gets the available Bar contexts.
 * 
 * @returns {Object} with all available contexts
 * @protected
 * 
 */
sap.m.Bar.prototype.getContext = undefined

/**
 * Gets the HTML tag of the root element.
 * @returns {sap.m.IBarHTMLTag} The HTML-tag
 * @protected
 * 
 */
sap.m.Bar.prototype.getHTMLTag = undefined

/**
 * Determines whether the Bar is sensitive to the container context.
 * 
 * Implementation of the IBar interface.
 * @returns {boolean} isContextSensitive
 * @protected
 * 
 */
sap.m.Bar.prototype.isContextSensitive = undefined

/**
 * Sets the HTML tag of the root element.
 * @param {sap.m.IBarHTMLTag} sTag The HTML tag of the root element
 * @returns {sap.m.IBar} this for chaining
 * @protected
 * 
 */
sap.m.Bar.prototype.setHTMLTag = undefined

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.Bar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.Bar(); };

/**
 * Adds some contentLeft to the aggregation {@link #getContentLeft contentLeft}.
 * @param {sap.ui.core.Control}
 *            oContentLeft the contentLeft to add; if empty, nothing is inserted
 * @returns {sap.m.Bar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.addContentLeft = function(oContentLeft) { return new sap.m.Bar(); };

/**
 * Adds some contentMiddle to the aggregation {@link #getContentMiddle contentMiddle}.
 * @param {sap.ui.core.Control}
 *            oContentMiddle the contentMiddle to add; if empty, nothing is inserted
 * @returns {sap.m.Bar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.addContentMiddle = function(oContentMiddle) { return new sap.m.Bar(); };

/**
 * Adds some contentRight to the aggregation {@link #getContentRight contentRight}.
 * @param {sap.ui.core.Control}
 *            oContentRight the contentRight to add; if empty, nothing is inserted
 * @returns {sap.m.Bar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.addContentRight = function(oContentRight) { return new sap.m.Bar(); };

/**
 * Destroys all the contentLeft in the aggregation {@link #getContentLeft contentLeft}.
 * @returns {sap.m.Bar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.destroyContentLeft = function() { return new sap.m.Bar(); };

/**
 * Destroys all the contentMiddle in the aggregation {@link #getContentMiddle contentMiddle}.
 * @returns {sap.m.Bar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.destroyContentMiddle = function() { return new sap.m.Bar(); };

/**
 * Destroys all the contentRight in the aggregation {@link #getContentRight contentRight}.
 * @returns {sap.m.Bar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.destroyContentRight = function() { return new sap.m.Bar(); };

/**
 * Creates a new subclass of class sap.m.Bar with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Bar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getContentLeft contentLeft}.
 * 
 * Represents the left content area, usually containing a button or an app icon. If it is overlapped by the right content, its content will disappear and the text will show an ellipsis.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.getContentLeft = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getContentMiddle contentMiddle}.
 * 
 * Represents the middle content area. Controls such as label, segmented buttons or select can be placed here. The content is centrally positioned if there is enough space. If the right or left content overlaps the middle content, the middle content will be centered in the space between the left and the right content.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.getContentMiddle = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getContentRight contentRight}.
 * 
 * Represents the right content area. Controls such as action buttons or search field can be placed here.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.getContentRight = function() { return new Array(); };

/**
 * Gets current value of property {@link #getDesign design}.
 * 
 * Determines the design of the bar. If set to auto, it becomes dependent on the place where the bar is placed.
 * 
 * Default value is <code>Auto</code>.
 * @returns {sap.m.BarDesign} Value of property <code>design</code>
 * @since 1.22
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.getDesign = function() { return new sap.m.BarDesign(); };

/**
 * Gets current value of property {@link #getEnableFlexBox enableFlexBox}.
 * 
 * If this flag is set to true, contentMiddle will be rendered as a HBox and layoutData can be used to allocate available space.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableFlexBox</code>
 * 
 * @deprecated Since version 1.16.
 * This property is no longer supported, instead, contentMiddle will always occupy 100% width when no contentLeft and contentRight are being set.
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.getEnableFlexBox = function() { return false; };

/**
 * Returns a metadata object for class sap.m.Bar.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Bar.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getTranslucent translucent}.
 * 
 * Indicates whether the Bar is partially translucent.
 * It is only applied for touch devices.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>translucent</code>
 * @since 1.12
 * @deprecated Since version 1.18.6.
 * This property has no effect since release 1.18.6 and should not be used. Translucent bar may overlay an input and make it difficult to edit.
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.getTranslucent = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContentLeft contentLeft}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContentLeft The contentLeft whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.indexOfContentLeft = function(oContentLeft) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContentMiddle contentMiddle}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContentMiddle The contentMiddle whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.indexOfContentMiddle = function(oContentMiddle) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContentRight contentRight}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContentRight The contentRight whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.indexOfContentRight = function(oContentRight) { return 0; };

/**
 * Inserts a contentLeft into the aggregation {@link #getContentLeft contentLeft}.
 * 
 * @param {sap.ui.core.Control}
 *            oContentLeft the contentLeft to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the contentLeft should be inserted at; for
 *              a negative value of <code>iIndex</code>, the contentLeft is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the contentLeft is inserted at
 *              the last position
 * @returns {sap.m.Bar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.insertContentLeft = function(oContentLeft,iIndex) { return new sap.m.Bar(); };

/**
 * Inserts a contentMiddle into the aggregation {@link #getContentMiddle contentMiddle}.
 * 
 * @param {sap.ui.core.Control}
 *            oContentMiddle the contentMiddle to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the contentMiddle should be inserted at; for
 *              a negative value of <code>iIndex</code>, the contentMiddle is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the contentMiddle is inserted at
 *              the last position
 * @returns {sap.m.Bar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.insertContentMiddle = function(oContentMiddle,iIndex) { return new sap.m.Bar(); };

/**
 * Inserts a contentRight into the aggregation {@link #getContentRight contentRight}.
 * 
 * @param {sap.ui.core.Control}
 *            oContentRight the contentRight to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the contentRight should be inserted at; for
 *              a negative value of <code>iIndex</code>, the contentRight is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the contentRight is inserted at
 *              the last position
 * @returns {sap.m.Bar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.insertContentRight = function(oContentRight,iIndex) { return new sap.m.Bar(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getContentLeft contentLeft}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.removeAllContentLeft = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getContentMiddle contentMiddle}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.removeAllContentMiddle = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getContentRight contentRight}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.removeAllContentRight = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Removes a contentLeft from the aggregation {@link #getContentLeft contentLeft}.
 * 
 * @param {int | string | sap.ui.core.Control} vContentLeft The contentLeft to remove or its index or id
 * @returns {sap.ui.core.Control} The removed contentLeft or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.removeContentLeft = function(vContentLeft) { return new sap.ui.core.Control(); };

/**
 * Removes a contentMiddle from the aggregation {@link #getContentMiddle contentMiddle}.
 * 
 * @param {int | string | sap.ui.core.Control} vContentMiddle The contentMiddle to remove or its index or id
 * @returns {sap.ui.core.Control} The removed contentMiddle or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.removeContentMiddle = function(vContentMiddle) { return new sap.ui.core.Control(); };

/**
 * Removes a contentRight from the aggregation {@link #getContentRight contentRight}.
 * 
 * @param {int | string | sap.ui.core.Control} vContentRight The contentRight to remove or its index or id
 * @returns {sap.ui.core.Control} The removed contentRight or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.removeContentRight = function(vContentRight) { return new sap.ui.core.Control(); };

/**
 * Sets a new value for property {@link #getDesign design}.
 * 
 * Determines the design of the bar. If set to auto, it becomes dependent on the place where the bar is placed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Auto</code>.
 * @param {sap.m.BarDesign} sDesign New value for property <code>design</code>
 * @returns {sap.m.Bar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.setDesign = function(sDesign) { return new sap.m.Bar(); };

/**
 * Sets a new value for property {@link #getEnableFlexBox enableFlexBox}.
 * 
 * If this flag is set to true, contentMiddle will be rendered as a HBox and layoutData can be used to allocate available space.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableFlexBox New value for property <code>enableFlexBox</code>
 * @returns {sap.m.Bar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.16.
 * This property is no longer supported, instead, contentMiddle will always occupy 100% width when no contentLeft and contentRight are being set.
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.setEnableFlexBox = function(bEnableFlexBox) { return new sap.m.Bar(); };

/**
 * Sets a new value for property {@link #getTranslucent translucent}.
 * 
 * Indicates whether the Bar is partially translucent.
 * It is only applied for touch devices.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bTranslucent New value for property <code>translucent</code>
 * @returns {sap.m.Bar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.12
 * @deprecated Since version 1.18.6.
 * This property has no effect since release 1.18.6 and should not be used. Translucent bar may overlay an input and make it difficult to edit.
 * 
 * @public
 * 
 */
sap.m.Bar.prototype.setTranslucent = function(bTranslucent) { return new sap.m.Bar(); };


// ---- sap.m.BarDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.BarDesign.toString = function() { return ""; };

// ---- sap.m.Breadcrumbs --------------------------------------------------------------------------

/**
 * Constructor for a new Breadcrumbs
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getCurrentLocationText currentLocationText} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLinks links} : sap.m.Link[] (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Enables users to navigate between items by providing a list of links to previous steps in the user's
 * navigation path. The last three steps can be accessed as links directly The remaining links prior to them
 * are available in a drop-down menu.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.34
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 * 
 */
sap.m.Breadcrumbs = function(sId,mSettings) {};
/**
 * Adds some link to the aggregation {@link #getLinks links}.
 * @param {sap.m.Link}
 *            oLink the link to add; if empty, nothing is inserted
 * @returns {sap.m.Breadcrumbs} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.Breadcrumbs.prototype.addLink = function(oLink) { return new sap.m.Breadcrumbs(); };

/**
 * Destroys all the links in the aggregation {@link #getLinks links}.
 * @returns {sap.m.Breadcrumbs} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.Breadcrumbs.prototype.destroyLinks = function() { return new sap.m.Breadcrumbs(); };

/**
 * Creates a new subclass of class sap.m.Breadcrumbs with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Breadcrumbs.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getCurrentLocationText currentLocationText}.
 * 
 * Determines the text of current/last element in the Breadcrumbs path.
 * 
 * @returns {string} Value of property <code>currentLocationText</code>
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.Breadcrumbs.prototype.getCurrentLocationText = function() { return ""; };

/**
 * Gets content of aggregation {@link #getLinks links}.
 * 
 * A list of all the active link elements in the Breadcrumbs control.
 * <b>Note:</b> Enabling the property <code>wrapping</code> of the link will not work
 * since it's incompatible with the concept of the control.
 * The other properties will work, but their effect may be undesirable.
 * 
 * @returns {sap.m.Link[]}
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.Breadcrumbs.prototype.getLinks = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.Breadcrumbs.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Breadcrumbs.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.m.Link</code> in the aggregation {@link #getLinks links}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Link}
 *           oLink The link whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.Breadcrumbs.prototype.indexOfLink = function(oLink) { return 0; };

/**
 * Inserts a link into the aggregation {@link #getLinks links}.
 * 
 * @param {sap.m.Link}
 *            oLink the link to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the link should be inserted at; for
 *              a negative value of <code>iIndex</code>, the link is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the link is inserted at
 *              the last position
 * @returns {sap.m.Breadcrumbs} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.Breadcrumbs.prototype.insertLink = function(oLink,iIndex) { return new sap.m.Breadcrumbs(); };

/**
 * Removes all the controls from the aggregation {@link #getLinks links}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Link[]} An array of the removed elements (might be empty)
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.Breadcrumbs.prototype.removeAllLinks = function() { return new Array(); };

/**
 * Removes a link from the aggregation {@link #getLinks links}.
 * 
 * @param {int | string | sap.m.Link} vLink The link to remove or its index or id
 * @returns {sap.m.Link} The removed link or <code>null</code>
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.Breadcrumbs.prototype.removeLink = function(vLink) { return new sap.m.Link(); };

/**
 * Sets a new value for property {@link #getCurrentLocationText currentLocationText}.
 * 
 * Determines the text of current/last element in the Breadcrumbs path.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sCurrentLocationText New value for property <code>currentLocationText</code>
 * @returns {sap.m.Breadcrumbs} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.Breadcrumbs.prototype.setCurrentLocationText = function(sCurrentLocationText) { return new sap.m.Breadcrumbs(); };


// ---- sap.m.BusyDialog --------------------------------------------------------------------------

/**
 * Constructor for a new BusyDialog.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getTitle title} : string (default: )</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI (default: )</li>
 * <li>{@link #getCustomIconRotationSpeed customIconRotationSpeed} : int (default: 1000)</li>
 * <li>{@link #getCustomIconDensityAware customIconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getCustomIconWidth customIconWidth} : sap.ui.core.CSSSize (default: 44px)</li>
 * <li>{@link #getCustomIconHeight customIconHeight} : sap.ui.core.CSSSize (default: 44px)</li>
 * <li>{@link #getCancelButtonText cancelButtonText} : string (default: )</li>
 * <li>{@link #getShowCancelButton showCancelButton} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given.
 * @param {object} [mSettings] Initial settings for the new control.
 * 
 * @class
 * BusyDialog is used to indicate that the system is busy and the user has to wait.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.BusyDialog = function(sId,mSettings) {};
/**
 * Fires when the busy dialog is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.cancelPressed Indicates if the close events are triggered by a user, pressing a cancel button or because the operation was terminated.
 * This parameter is set to true if the close event is fired by user interaction.
 * @public
 * 
 */
sap.m.BusyDialog.prototype.close = function(oControlEvent) {  };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.BusyDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.BusyDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:close close} event of this <code>sap.m.BusyDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.BusyDialog</code> itself.
 * 
 * Fires when the busy dialog is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.BusyDialog</code> itself
 * 
 * @returns {sap.m.BusyDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.BusyDialog.prototype.attachClose = function(oData,fnFunction,oListener) { return new sap.m.BusyDialog(); };

/**
 * Closes the BusyDialog.
 * 
 * @type sap.m.BusyDialog
 * @public
 * 
 */
sap.m.BusyDialog.prototype.close = function() { return new sap.m.BusyDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:close close} event of this <code>sap.m.BusyDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.BusyDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.detachClose = function(fnFunction,oListener) { return new sap.m.BusyDialog(); };

/**
 * Creates a new subclass of class sap.m.BusyDialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.BusyDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:close close} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.cancelPressed] Indicates if the close events are triggered by a user, pressing a cancel button or because the operation was terminated.
 * This parameter is set to true if the close event is fired by user interaction.
 * 
 * @returns {sap.m.BusyDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.BusyDialog.prototype.fireClose = function(mParameters) { return new sap.m.BusyDialog(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getCancelButtonText cancelButtonText}.
 * 
 * The text of the cancel button. The default text is "Cancel" (translated to the respective language).
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>cancelButtonText</code>
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCancelButtonText = function() { return ""; };

/**
 * Gets current value of property {@link #getCustomIcon customIcon}.
 * 
 * Icon, used from the BusyIndicator. This icon is invisible in iOS platform and it is density aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screens.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.URI} Value of property <code>customIcon</code>
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getCustomIconDensityAware customIconDensityAware}.
 * 
 * If this is set to <code>false</code>, the source image will be loaded directly without attempting to fetch the density perfect image for high density devices.
 * By default, this is set to <code>true</code> but then one or more requests are sent trying to get the density perfect version of the image.
 * 
 * If bandwidth is the key for the application, set this value to <code>false</code>.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>customIconDensityAware</code>
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIconDensityAware = function() { return false; };

/**
 * Gets current value of property {@link #getCustomIconHeight customIconHeight}.
 * 
 * Height of the provided icon with default value "44px".
 * 
 * Default value is <code>44px</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>customIconHeight</code>
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIconHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getCustomIconRotationSpeed customIconRotationSpeed}.
 * 
 * Defines the rotation speed of the given image. If GIF file is used, the speed has to be set to 0. The value is in milliseconds.
 * 
 * Default value is <code>1000</code>.
 * @returns {int} Value of property <code>customIconRotationSpeed</code>
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIconRotationSpeed = function() { return 0; };

/**
 * Gets current value of property {@link #getCustomIconWidth customIconWidth}.
 * 
 * Width of the provided icon with default value "44px".
 * 
 * Default value is <code>44px</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>customIconWidth</code>
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getCustomIconWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.BusyDialog.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.BusyDialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowCancelButton showCancelButton}.
 * 
 * Indicates if the cancel button will be rendered inside the busy dialog. The default value is set to <code>false</code>.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showCancelButton</code>
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getShowCancelButton = function() { return false; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Optional text displayed inside the dialog.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Sets the title of the BusyDialog. The default value is an empty string.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.getTitle = function() { return ""; };

/**
 * Opens the BusyDialog.
 * 
 * @type sap.m.BusyDialog
 * @public
 * 
 */
sap.m.BusyDialog.prototype.open = function() { return new sap.m.BusyDialog(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getCancelButtonText cancelButtonText}.
 * 
 * The text of the cancel button. The default text is "Cancel" (translated to the respective language).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sCancelButtonText New value for property <code>cancelButtonText</code>
 * @returns {sap.m.BusyDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCancelButtonText = function(sCancelButtonText) { return new sap.m.BusyDialog(); };

/**
 * Sets a new value for property {@link #getCustomIcon customIcon}.
 * 
 * Icon, used from the BusyIndicator. This icon is invisible in iOS platform and it is density aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screens.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.URI} sCustomIcon New value for property <code>customIcon</code>
 * @returns {sap.m.BusyDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIcon = function(sCustomIcon) { return new sap.m.BusyDialog(); };

/**
 * Sets a new value for property {@link #getCustomIconDensityAware customIconDensityAware}.
 * 
 * If this is set to <code>false</code>, the source image will be loaded directly without attempting to fetch the density perfect image for high density devices.
 * By default, this is set to <code>true</code> but then one or more requests are sent trying to get the density perfect version of the image.
 * 
 * If bandwidth is the key for the application, set this value to <code>false</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bCustomIconDensityAware New value for property <code>customIconDensityAware</code>
 * @returns {sap.m.BusyDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIconDensityAware = function(bCustomIconDensityAware) { return new sap.m.BusyDialog(); };

/**
 * Sets a new value for property {@link #getCustomIconHeight customIconHeight}.
 * 
 * Height of the provided icon with default value "44px".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>44px</code>.
 * @param {sap.ui.core.CSSSize} sCustomIconHeight New value for property <code>customIconHeight</code>
 * @returns {sap.m.BusyDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIconHeight = function(sCustomIconHeight) { return new sap.m.BusyDialog(); };

/**
 * Sets a new value for property {@link #getCustomIconRotationSpeed customIconRotationSpeed}.
 * 
 * Defines the rotation speed of the given image. If GIF file is used, the speed has to be set to 0. The value is in milliseconds.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>1000</code>.
 * @param {int} iCustomIconRotationSpeed New value for property <code>customIconRotationSpeed</code>
 * @returns {sap.m.BusyDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIconRotationSpeed = function(iCustomIconRotationSpeed) { return new sap.m.BusyDialog(); };

/**
 * Sets a new value for property {@link #getCustomIconWidth customIconWidth}.
 * 
 * Width of the provided icon with default value "44px".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>44px</code>.
 * @param {sap.ui.core.CSSSize} sCustomIconWidth New value for property <code>customIconWidth</code>
 * @returns {sap.m.BusyDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setCustomIconWidth = function(sCustomIconWidth) { return new sap.m.BusyDialog(); };

/**
 * Sets a new value for property {@link #getShowCancelButton showCancelButton}.
 * 
 * Indicates if the cancel button will be rendered inside the busy dialog. The default value is set to <code>false</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowCancelButton New value for property <code>showCancelButton</code>
 * @returns {sap.m.BusyDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setShowCancelButton = function(bShowCancelButton) { return new sap.m.BusyDialog(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Optional text displayed inside the dialog.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.BusyDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setText = function(sText) { return new sap.m.BusyDialog(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Sets the title of the BusyDialog. The default value is an empty string.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.BusyDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyDialog.prototype.setTitle = function(sTitle) { return new sap.m.BusyDialog(); };


// ---- sap.m.BusyIndicator --------------------------------------------------------------------------

/**
 * Constructor for a new BusyIndicator.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI (default: )</li>
 * <li>{@link #getCustomIconRotationSpeed customIconRotationSpeed} : int (default: 1000)</li>
 * <li>{@link #getCustomIconDensityAware customIconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getCustomIconWidth customIconWidth} : sap.ui.core.CSSSize (default: 44px)</li>
 * <li>{@link #getCustomIconHeight customIconHeight} : sap.ui.core.CSSSize (default: 44px)</li>
 * <li>{@link #getSize size} : sap.ui.core.CSSSize (default: 1rem)</li>
 * <li>{@link #getDesign design} : string (default: auto)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Control to indicate that the system is busy with some task and the user has to wait.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.BusyIndicator = function(sId,mSettings) {};
/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.BusyIndicator} Reference to <code>this</code> in order to allow method chaining
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.BusyIndicator(); };

/**
 * Creates a new subclass of class sap.m.BusyIndicator with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.BusyIndicator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getCustomIcon customIcon}.
 * 
 * Icon URL if an icon is used as the busy indicator.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.URI} Value of property <code>customIcon</code>
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getCustomIconDensityAware customIconDensityAware}.
 * 
 * If this is set to false, the src image will be loaded directly without attempting
 * to fetch the density perfect image for high density device.
 * By default, this is set to true but then one or more requests are sent to the server,
 * trying to get the density perfect version of the specified image.
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>customIconDensityAware</code>
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIconDensityAware = function() { return false; };

/**
 * Gets current value of property {@link #getCustomIconHeight customIconHeight}.
 * 
 * Height of the provided icon. By default 44px are used.
 * 
 * Default value is <code>44px</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>customIconHeight</code>
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIconHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getCustomIconRotationSpeed customIconRotationSpeed}.
 * 
 * Defines the rotation speed of the given image.
 * If a .gif is used, the speed has to be set to 0.
 * The unit is in ms.
 * <b>Note:</b> Values are considered valid when greater than or equal to 0.
 * If invalid value is provided the speed defaults to 0.
 * 
 * Default value is <code>1000</code>.
 * @returns {int} Value of property <code>customIconRotationSpeed</code>
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIconRotationSpeed = function() { return 0; };

/**
 * Gets current value of property {@link #getCustomIconWidth customIconWidth}.
 * 
 * Width of the provided icon. By default 44px are used.
 * 
 * Default value is <code>44px</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>customIconWidth</code>
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getCustomIconWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getDesign design}.
 * 
 * Setting this property will not have any effect on the appearance of the BusyIndicator
 * in versions greater than or equal to 1.32.1
 * 
 * Default value is <code>auto</code>.
 * @returns {string} Value of property <code>design</code>
 * 
 * @deprecated Since version 1.32.1
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getDesign = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.BusyIndicator.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.BusyIndicator.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSize size}.
 * 
 * Defines the size of the busy indicator.
 * The animation consists of three circles, each of which will be this size.
 * Therefore the total width of the control amounts to three times the given size.
 * 
 * Default value is <code>1rem</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>size</code>
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Defines text to be displayed below the busy indicator.
 * It can be used to inform the user of the current operation.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Options for the text direction are RTL and LTR.
 * Alternatively, the control can inherit the text direction from its parent container.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getCustomIcon customIcon}.
 * 
 * Icon URL if an icon is used as the busy indicator.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.URI} sCustomIcon New value for property <code>customIcon</code>
 * @returns {sap.m.BusyIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIcon = function(sCustomIcon) { return new sap.m.BusyIndicator(); };

/**
 * Sets a new value for property {@link #getCustomIconDensityAware customIconDensityAware}.
 * 
 * If this is set to false, the src image will be loaded directly without attempting
 * to fetch the density perfect image for high density device.
 * By default, this is set to true but then one or more requests are sent to the server,
 * trying to get the density perfect version of the specified image.
 * If bandwidth is the key for the application, set this value to false.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bCustomIconDensityAware New value for property <code>customIconDensityAware</code>
 * @returns {sap.m.BusyIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIconDensityAware = function(bCustomIconDensityAware) { return new sap.m.BusyIndicator(); };

/**
 * Sets a new value for property {@link #getCustomIconHeight customIconHeight}.
 * 
 * Height of the provided icon. By default 44px are used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>44px</code>.
 * @param {sap.ui.core.CSSSize} sCustomIconHeight New value for property <code>customIconHeight</code>
 * @returns {sap.m.BusyIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIconHeight = function(sCustomIconHeight) { return new sap.m.BusyIndicator(); };

/**
 * Sets a new value for property {@link #getCustomIconRotationSpeed customIconRotationSpeed}.
 * 
 * Defines the rotation speed of the given image.
 * If a .gif is used, the speed has to be set to 0.
 * The unit is in ms.
 * <b>Note:</b> Values are considered valid when greater than or equal to 0.
 * If invalid value is provided the speed defaults to 0.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>1000</code>.
 * @param {int} iCustomIconRotationSpeed New value for property <code>customIconRotationSpeed</code>
 * @returns {sap.m.BusyIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIconRotationSpeed = function(iCustomIconRotationSpeed) { return new sap.m.BusyIndicator(); };

/**
 * Sets a new value for property {@link #getCustomIconWidth customIconWidth}.
 * 
 * Width of the provided icon. By default 44px are used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>44px</code>.
 * @param {sap.ui.core.CSSSize} sCustomIconWidth New value for property <code>customIconWidth</code>
 * @returns {sap.m.BusyIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setCustomIconWidth = function(sCustomIconWidth) { return new sap.m.BusyIndicator(); };

/**
 * Sets a new value for property {@link #getDesign design}.
 * 
 * Setting this property will not have any effect on the appearance of the BusyIndicator
 * in versions greater than or equal to 1.32.1
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>auto</code>.
 * @param {string} sDesign New value for property <code>design</code>
 * @returns {sap.m.BusyIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.32.1
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setDesign = function(sDesign) { return new sap.m.BusyIndicator(); };

/**
 * Sets a new value for property {@link #getSize size}.
 * 
 * Defines the size of the busy indicator.
 * The animation consists of three circles, each of which will be this size.
 * Therefore the total width of the control amounts to three times the given size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>1rem</code>.
 * @param {sap.ui.core.CSSSize} sSize New value for property <code>size</code>
 * @returns {sap.m.BusyIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setSize = function(sSize) { return new sap.m.BusyIndicator(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Defines text to be displayed below the busy indicator.
 * It can be used to inform the user of the current operation.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.BusyIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setText = function(sText) { return new sap.m.BusyIndicator(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Options for the text direction are RTL and LTR.
 * Alternatively, the control can inherit the text direction from its parent container.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.BusyIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.BusyIndicator.prototype.setTextDirection = function(sTextDirection) { return new sap.m.BusyIndicator(); };


// ---- sap.m.Button --------------------------------------------------------------------------

/**
 * Constructor for a new Button.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getType type} : sap.m.ButtonType (default: Default)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconFirst iconFirst} : boolean (default: true)</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Enables users to trigger actions. For the button UI, you can define some text or an icon, or both.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @mixes sap.ui.core.ContextMenuSupport
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Button = function(sId,mSettings) {};
/**
 * Event is fired when the user clicks on the control.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Button.prototype.press = function(oControlEvent) {  };

/**
 * Event is fired when the user taps the control.
 * @event
 * 
 * @deprecated Since version 1.20.0.
 * This event is deprecated, use the press event instead.
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Button.prototype.tap = function(oControlEvent) {  };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Button.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.Button(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Button.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.Button(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.Button</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Button</code> itself.
 * 
 * Event is fired when the user clicks on the control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Button</code> itself
 * 
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Button(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:tap tap} event of this <code>sap.m.Button</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Button</code> itself.
 * 
 * Event is fired when the user taps the control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Button</code> itself
 * 
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 * @deprecated Since version 1.20.0.
 * This event is deprecated, use the press event instead.
 * 
 */
sap.m.Button.prototype.attachTap = function(oData,fnFunction,oListener) { return new sap.m.Button(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.Button</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Button.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Button(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:tap tap} event of this <code>sap.m.Button</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.20.0.
 * This event is deprecated, use the press event instead.
 * 
 * @public
 * 
 */
sap.m.Button.prototype.detachTap = function(fnFunction,oListener) { return new sap.m.Button(); };

/**
 * Creates a new subclass of class sap.m.Button with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Button.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Button.prototype.firePress = function(mParameters) { return new sap.m.Button(); };

/**
 * Fires event {@link #event:tap tap} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 * @deprecated Since version 1.20.0.
 * This event is deprecated, use the press event instead.
 * 
 */
sap.m.Button.prototype.fireTap = function(mParameters) { return new sap.m.Button(); };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.Button.prototype.getAccessibilityInfo = function() {  };

/**
 * Gets current value of property {@link #getActiveIcon activeIcon}.
 * 
 * The source property of an alternative icon for the active (depressed) state of the button.
 * Both active and default icon properties should be defined and have the same type: image or icon font.
 * If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>activeIcon</code>
 * 
 * @public
 * 
 */
sap.m.Button.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.Button.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.Button.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.Button.prototype.getEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Icon to be displayed as graphical element within the button. This can be an image or an icon from the icon font.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.Button.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconDensityAware</code>
 * 
 * @public
 * 
 */
sap.m.Button.prototype.getIconDensityAware = function() { return false; };

/**
 * Gets current value of property {@link #getIconFirst iconFirst}.
 * 
 * If set to true (default), the display sequence is 1. icon 2. control text
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconFirst</code>
 * 
 * @public
 * 
 */
sap.m.Button.prototype.getIconFirst = function() { return false; };

/**
 * Returns a metadata object for class sap.m.Button.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Button.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Defines to which DOM reference the Popup should be docked
 * 
 * @protected
 * @return {DomNode} the DOM reference that Popup should dock to
 * 
 */
sap.m.Button.prototype.getPopupAnchorDomRef = function() { return null; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Button text
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.Button.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.Button.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * Type of a button (e.g. Default, Accept, Reject, Back, etc.)
 * 
 * Default value is <code>Default</code>.
 * @returns {sap.m.ButtonType} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.Button.prototype.getType = function() { return new sap.m.ButtonType(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the button.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.Button.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Button.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Button.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Button.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Button.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getActiveIcon activeIcon}.
 * 
 * The source property of an alternative icon for the active (depressed) state of the button.
 * Both active and default icon properties should be defined and have the same type: image or icon font.
 * If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sActiveIcon New value for property <code>activeIcon</code>
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Button.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.Button(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Button.prototype.setEnabled = function(bEnabled) { return new sap.m.Button(); };

/**
 * Property setter for the icon
 * 
 * @param {sap.ui.core.URI} sIcon - new value of the Icon property
 * @return {sap.m.Button} this to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setIcon = function(sIcon) { return new sap.m.Button(); };

/**
 * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware New value for property <code>iconDensityAware</code>
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Button.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.Button(); };

/**
 * Sets a new value for property {@link #getIconFirst iconFirst}.
 * 
 * If set to true (default), the display sequence is 1. icon 2. control text
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconFirst New value for property <code>iconFirst</code>
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Button.prototype.setIconFirst = function(bIconFirst) { return new sap.m.Button(); };

/**
 * Property setter for the text
 * 
 * @param {string} sText - new value of the Text attribute
 * @return {sap.m.Button} this to allow method chaining
 * @public
 * 
 */
sap.m.Button.prototype.setText = function(sText) { return new sap.m.Button(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.Button.prototype.setTextDirection = function(sTextDirection) { return new sap.m.Button(); };

/**
 * Sets a new value for property {@link #getType type}.
 * 
 * Type of a button (e.g. Default, Accept, Reject, Back, etc.)
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Default</code>.
 * @param {sap.m.ButtonType} sType New value for property <code>type</code>
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Button.prototype.setType = function(sType) { return new sap.m.Button(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width of the button.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.Button} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Button.prototype.setWidth = function(sWidth) { return new sap.m.Button(); };


// ---- sap.m.ButtonType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ButtonType.toString = function() { return ""; };

// ---- sap.m.Carousel --------------------------------------------------------------------------

/**
 * Constructor for a new Carousel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getLoop loop} : boolean (default: false)</li>
 * <li>{@link #getShowPageIndicator showPageIndicator} : boolean (default: true)</li>
 * <li>{@link #getPageIndicatorPlacement pageIndicatorPlacement} : sap.m.PlacementType (default: Bottom)</li>
 * <li>{@link #getShowBusyIndicator showBusyIndicator} : boolean (default: true)</li>
 * <li>{@link #getBusyIndicatorSize busyIndicatorSize} : sap.ui.core.CSSSize (default: 6em)</li>
 * <li>{@link #getArrowsPlacement arrowsPlacement} : sap.m.CarouselArrowsPlacement (default: Content)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPages pages} : sap.ui.core.Control[] (default)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getActivePage activePage} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:loadPage loadPage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:unloadPage unloadPage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:pageChanged pageChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The Carousel control can be used to navigate through a list of sap.m controls just like flipping through the pages of a book by swiping right or left. <br>
 * An indicator shows the current position within the control list. If the pages are less than 9, the page indicator is represented with bullets. If the pages are 9 or more, the page indicator is numeric.<br>
 * When displayed in a desktop browser, a left- and right-arrow button is displayed on the carousel's sides, which can be used to navigate through the carousel.
 * 
 * Note: When displayed in Internet Explorer 9, page changes are not animated.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Carousel = function(sId,mSettings) {};
/**
 * Carousel requires a new page to be loaded. This event may be used to fill the content of that page
 * @event
 * 
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.pageId Id of the page which will be loaded
 * @public
 * 
 */
sap.m.Carousel.prototype.loadPage = function(oControlEvent) {  };

/**
 * This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.oldActivePageId Id of the page which was active before the page change.
 * @param {string} oControlEvent.getParameters.newActivePageId Id of the page which is active after the page change.
 * @public
 * 
 */
sap.m.Carousel.prototype.pageChanged = function(oControlEvent) {  };

/**
 * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page.
 * @event
 * 
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.pageId Id of the page which will be unloaded
 * @public
 * 
 */
sap.m.Carousel.prototype.unloadPage = function(oControlEvent) {  };

/**
 * Adds some page to the aggregation {@link #getPages pages}.
 * @param {sap.ui.core.Control}
 *            oPage the page to add; if empty, nothing is inserted
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.addPage = function(oPage) { return new sap.m.Carousel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:loadPage loadPage} event of this <code>sap.m.Carousel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Carousel</code> itself.
 * 
 * Carousel requires a new page to be loaded. This event may be used to fill the content of that page
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code> itself
 * 
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 */
sap.m.Carousel.prototype.attachLoadPage = function(oData,fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:pageChanged pageChanged} event of this <code>sap.m.Carousel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Carousel</code> itself.
 * 
 * This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code> itself
 * 
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Carousel.prototype.attachPageChanged = function(oData,fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:unloadPage unloadPage} event of this <code>sap.m.Carousel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Carousel</code> itself.
 * 
 * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code> itself
 * 
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 */
sap.m.Carousel.prototype.attachUnloadPage = function(oData,fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * Destroys all the pages in the aggregation {@link #getPages pages}.
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.destroyPages = function() { return new sap.m.Carousel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:loadPage loadPage} event of this <code>sap.m.Carousel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.detachLoadPage = function(fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:pageChanged pageChanged} event of this <code>sap.m.Carousel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.detachPageChanged = function(fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:unloadPage unloadPage} event of this <code>sap.m.Carousel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.detachUnloadPage = function(fnFunction,oListener) { return new sap.m.Carousel(); };

/**
 * Creates a new subclass of class sap.m.Carousel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Carousel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:loadPage loadPage} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.pageId] Id of the page which will be loaded
 * 
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 */
sap.m.Carousel.prototype.fireLoadPage = function(mParameters) { return new sap.m.Carousel(); };

/**
 * Fires event {@link #event:pageChanged pageChanged} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.oldActivePageId] Id of the page which was active before the page change.
 * @param {string} [mParameters.newActivePageId] Id of the page which is active after the page change.
 * 
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Carousel.prototype.firePageChanged = function(mParameters) { return new sap.m.Carousel(); };

/**
 * Fires event {@link #event:unloadPage unloadPage} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.pageId] Id of the page which will be unloaded
 * 
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded
 * 
 */
sap.m.Carousel.prototype.fireUnloadPage = function(mParameters) { return new sap.m.Carousel(); };

/**
 * ID of the element which is the current target of the association {@link #getActivePage activePage}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.getActivePage = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getArrowsPlacement arrowsPlacement}.
 * 
 * Defines where the carousel's arrows are placed. Default is <code>sap.m.CarouselArrowsPlacement.Content</code> used to
 * place the arrows on the sides of the carousel. Alternatively <code>sap.m.CarouselArrowsPlacement.PageIndicator</code> can
 * be used to place the arrows on the sides of the page indicator.
 * 
 * Default value is <code>Content</code>.
 * @returns {sap.m.CarouselArrowsPlacement} Value of property <code>arrowsPlacement</code>
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.getArrowsPlacement = function() { return new sap.m.CarouselArrowsPlacement(); };

/**
 * Gets current value of property {@link #getBusyIndicatorSize busyIndicatorSize}.
 * 
 * Size of the busy indicators which can be displayed in the carousel.
 * 
 * Default value is <code>6em</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>busyIndicatorSize</code>
 * 
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator is not necessary any longer.
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.getBusyIndicatorSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * The height of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getLoop loop}.
 * 
 * Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>loop</code>
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.getLoop = function() { return false; };

/**
 * Returns a metadata object for class sap.m.Carousel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Carousel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPageIndicatorPlacement pageIndicatorPlacement}.
 * 
 * Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.
 * 
 * Default value is <code>Bottom</code>.
 * @returns {sap.m.PlacementType} Value of property <code>pageIndicatorPlacement</code>
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.getPageIndicatorPlacement = function() { return new sap.m.PlacementType(); };

/**
 * Gets content of aggregation {@link #getPages pages}.
 * 
 * The content which the carousel displays.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.getPages = function() { return new Array(); };

/**
 * Gets current value of property {@link #getShowBusyIndicator showBusyIndicator}.
 * 
 * Show or hide busy indicator in the carousel when loading pages after swipe.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showBusyIndicator</code>
 * 
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator is not necessary any longer.
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.getShowBusyIndicator = function() { return false; };

/**
 * Gets current value of property {@link #getShowPageIndicator showPageIndicator}.
 * 
 * Show or hide carousel's page indicator.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showPageIndicator</code>
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.getShowPageIndicator = function() { return false; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * The width of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getPages pages}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oPage The page whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.indexOfPage = function(oPage) { return 0; };

/**
 * Inserts a page into the aggregation {@link #getPages pages}.
 * 
 * @param {sap.ui.core.Control}
 *            oPage the page to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the page should be inserted at; for
 *              a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the page is inserted at
 *              the last position
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.insertPage = function(oPage,iIndex) { return new sap.m.Carousel(); };

/**
 * Call this method to display the next page (corresponds to a swipe right). Returns 'this' for method chaining.
 * 
 * @type sap.m.Carousel
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Carousel.prototype.next = function() { return new sap.m.Carousel(); };

/**
 * Call this method to display the previous page (corresponds to a swipe left). Returns 'this' for method chaining.
 * 
 * @type sap.m.Carousel
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Carousel.prototype.previous = function() { return new sap.m.Carousel(); };

/**
 * Removes all the controls from the aggregation {@link #getPages pages}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.removeAllPages = function() { return new Array(); };

/**
 * Removes a page from the aggregation {@link #getPages pages}.
 * 
 * @param {int | string | sap.ui.core.Control} vPage The page to remove or its index or id
 * @returns {sap.ui.core.Control} The removed page or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.removePage = function(vPage) { return new sap.ui.core.Control(); };

/**
 * Sets the associated {@link #getActivePage activePage}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oActivePage ID of an element which becomes the new target of this activePage association; alternatively, an element instance may be given
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.setActivePage = function(oActivePage) { return new sap.m.Carousel(); };

/**
 * Sets a new value for property {@link #getArrowsPlacement arrowsPlacement}.
 * 
 * Defines where the carousel's arrows are placed. Default is <code>sap.m.CarouselArrowsPlacement.Content</code> used to
 * place the arrows on the sides of the carousel. Alternatively <code>sap.m.CarouselArrowsPlacement.PageIndicator</code> can
 * be used to place the arrows on the sides of the page indicator.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Content</code>.
 * @param {sap.m.CarouselArrowsPlacement} sArrowsPlacement New value for property <code>arrowsPlacement</code>
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.setArrowsPlacement = function(sArrowsPlacement) { return new sap.m.Carousel(); };

/**
 * Sets a new value for property {@link #getBusyIndicatorSize busyIndicatorSize}.
 * 
 * Size of the busy indicators which can be displayed in the carousel.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>6em</code>.
 * @param {sap.ui.core.CSSSize} sBusyIndicatorSize New value for property <code>busyIndicatorSize</code>
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator is not necessary any longer.
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.setBusyIndicatorSize = function(sBusyIndicatorSize) { return new sap.m.Carousel(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * The height of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.setHeight = function(sHeight) { return new sap.m.Carousel(); };

/**
 * Sets a new value for property {@link #getLoop loop}.
 * 
 * Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bLoop New value for property <code>loop</code>
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.setLoop = function(bLoop) { return new sap.m.Carousel(); };

/**
 * Sets a new value for property {@link #getPageIndicatorPlacement pageIndicatorPlacement}.
 * 
 * Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Bottom</code>.
 * @param {sap.m.PlacementType} sPageIndicatorPlacement New value for property <code>pageIndicatorPlacement</code>
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.setPageIndicatorPlacement = function(sPageIndicatorPlacement) { return new sap.m.Carousel(); };

/**
 * Sets a new value for property {@link #getShowBusyIndicator showBusyIndicator}.
 * 
 * Show or hide busy indicator in the carousel when loading pages after swipe.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowBusyIndicator New value for property <code>showBusyIndicator</code>
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.18.7.
 * Since 1.18.7 pages are no longer loaded or unloaded. Therefore busy indicator is not necessary any longer.
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.setShowBusyIndicator = function(bShowBusyIndicator) { return new sap.m.Carousel(); };

/**
 * Sets a new value for property {@link #getShowPageIndicator showPageIndicator}.
 * 
 * Show or hide carousel's page indicator.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowPageIndicator New value for property <code>showPageIndicator</code>
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.setShowPageIndicator = function(bShowPageIndicator) { return new sap.m.Carousel(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * The width of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.Carousel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Carousel.prototype.setWidth = function(sWidth) { return new sap.m.Carousel(); };


// ---- sap.m.CarouselArrowsPlacement --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.CarouselArrowsPlacement.toString = function() { return ""; };

// ---- sap.m.CheckBox --------------------------------------------------------------------------

/**
 * Constructor for a new CheckBox.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: Begin)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getActiveHandling activeHandling} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: None)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] The ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] The Initial settings for the new control
 * 
 * @class
 * The CheckBox control allows the user to select one or multiple items from a list. To select each item the user has to select the square box in front of it.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.CheckBox = function(sId,mSettings) {};
/**
 * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.selected Checks whether the CheckBox is marked or not .
 * @public
 * 
 */
sap.m.CheckBox.prototype.select = function(oControlEvent) {  };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.CheckBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.CheckBox(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.CheckBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.CheckBox(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:select select} event of this <code>sap.m.CheckBox</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.CheckBox</code> itself.
 * 
 * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.CheckBox</code> itself
 * 
 * @returns {sap.m.CheckBox} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.CheckBox.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.CheckBox(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:select select} event of this <code>sap.m.CheckBox</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.CheckBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.CheckBox(); };

/**
 * Creates a new subclass of class sap.m.CheckBox with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.CheckBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:select select} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.selected] Checks whether the CheckBox is marked or not .
 * 
 * @returns {sap.m.CheckBox} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.CheckBox.prototype.fireSelect = function(mParameters) { return new sap.m.CheckBox(); };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.CheckBox.prototype.getAccessibilityInfo = function() {  };

/**
 * Gets current value of property {@link #getActiveHandling activeHandling}.
 * 
 * Flag to switch on activeHandling, when it is switched off, there will be no visual changes on active state. Default value is 'true'
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>activeHandling</code>
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.getActiveHandling = function() { return false; };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEditable editable}.
 * 
 * Specifies whether the user shall be allowed to edit the state of the checkbox
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>editable</code>
 * @since 1.25
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.getEditable = function() { return false; };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Disables the Checkbox. Disabled controls are not interactive and are rendered differently according to the theme.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.getEnabled = function() { return false; };

/**
 * Returns a metadata object for class sap.m.CheckBox.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.CheckBox.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.
 * 
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.getName = function() { return ""; };

/**
 * Gets current value of property {@link #getSelected selected}.
 * 
 * Stores the state of the checkbox whether it is selected or not.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>selected</code>
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.getSelected = function() { return false; };

/**
 * Returns the CheckBox`s tab index.
 * 
 * @return {int} iTabIndex for Checkbox
 * @since 1.22
 * @protected
 * 
 */
sap.m.CheckBox.prototype.getTabIndex = function() { return 0; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Defines the text displayed next to the checkbox
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextAlign textAlign}.
 * 
 * Aligns the text of the checkbox. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * Default value is <code>Begin</code>.
 * @returns {sap.ui.core.TextAlign} Value of property <code>textAlign</code>
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getValueState valueState}.
 * 
 * Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning' and 'Success'.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>valueState</code>
 * @since 1.38
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.getValueState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Width of the checkbox`s label
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getActiveHandling activeHandling}.
 * 
 * Flag to switch on activeHandling, when it is switched off, there will be no visual changes on active state. Default value is 'true'
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bActiveHandling New value for property <code>activeHandling</code>
 * @returns {sap.m.CheckBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.setActiveHandling = function(bActiveHandling) { return new sap.m.CheckBox(); };

/**
 * Sets a new value for property {@link #getEditable editable}.
 * 
 * Specifies whether the user shall be allowed to edit the state of the checkbox
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEditable New value for property <code>editable</code>
 * @returns {sap.m.CheckBox} Reference to <code>this</code> in order to allow method chaining
 * @since 1.25
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.setEditable = function(bEditable) { return new sap.m.CheckBox(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Disables the Checkbox. Disabled controls are not interactive and are rendered differently according to the theme.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.CheckBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.setEnabled = function(bEnabled) { return new sap.m.CheckBox(); };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.m.CheckBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.setName = function(sName) { return new sap.m.CheckBox(); };

/**
 * Sets the tab index of the control
 * 
 * @param {int} iTabIndex The tab index should be greater than or equal -1
 * @return {sap.m.CheckBox}
 * @since 1.16
 * @protected
 * 
 */
sap.m.CheckBox.prototype.setTabIndex = function(iTabIndex) { return new sap.m.CheckBox(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Defines the text displayed next to the checkbox
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.CheckBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.setText = function(sText) { return new sap.m.CheckBox(); };

/**
 * Sets a new value for property {@link #getTextAlign textAlign}.
 * 
 * Aligns the text of the checkbox. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Begin</code>.
 * @param {sap.ui.core.TextAlign} sTextAlign New value for property <code>textAlign</code>
 * @returns {sap.m.CheckBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.setTextAlign = function(sTextAlign) { return new sap.m.CheckBox(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.CheckBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.setTextDirection = function(sTextDirection) { return new sap.m.CheckBox(); };

/**
 * Sets a new value for property {@link #getValueState valueState}.
 * 
 * Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning' and 'Success'.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.core.ValueState} sValueState New value for property <code>valueState</code>
 * @returns {sap.m.CheckBox} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.setValueState = function(sValueState) { return new sap.m.CheckBox(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Width of the checkbox`s label
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.CheckBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CheckBox.prototype.setWidth = function(sWidth) { return new sap.m.CheckBox(); };


// ---- sap.m.Column --------------------------------------------------------------------------

/**
 * Constructor for a new Column.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHAlign hAlign} : sap.ui.core.TextAlign (default: Begin)</li>
 * <li>{@link #getVAlign vAlign} : sap.ui.core.VerticalAlign (default: Inherit)</li>
 * <li>{@link #getStyleClass styleClass} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMinScreenWidth minScreenWidth} : string</li>
 * <li>{@link #getDemandPopin demandPopin} : boolean (default: false)</li>
 * <li>{@link #getPopinHAlign popinHAlign} : sap.ui.core.TextAlign (default: Begin)</li>
 * <li>{@link #getPopinDisplay popinDisplay} : sap.m.PopinDisplay (default: Block)</li>
 * <li>{@link #getMergeDuplicates mergeDuplicates} : boolean (default: false)</li>
 * <li>{@link #getMergeFunctionName mergeFunctionName} : string (default: getText)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getHeader header} : sap.ui.core.Control (default)</li>
 * <li>{@link #getFooter footer} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The <code>sap.m.Column</code> allows to define column specific properties that will be applied when rendering the <code>sap.m.Table</code>.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Column = function(sId,mSettings) {};
/**
 * Apply text alignment of the Column to Text/Label/Link...
 * 
 * TODO: This is so ugly to check content functions
 * instead we should document how to use our controls
 * to inherit text-alignment and we should add a new
 * sap.ui.core.TextAlign type called "Inherit"
 * 
 * @param {sap.ui.core.Control} oControl List control
 * @param {String} [sAlign] TextAlign enumeration
 * @return {sap.ui.core.Control} oControl
 * @protected
 * 
 */
sap.m.Column.prototype.applyAlignTo = function(oControl,sAlign) { return new sap.ui.core.Control(); };

/**
 * Clears the last value of the column if mergeDuplicates property is true
 * 
 * @returns {sap.m.Column}
 * @since 1.20.4
 * @protected
 * 
 */
sap.m.Column.prototype.clearLastValue = function() { return new sap.m.Column(); };

/**
 * Destroys the footer in the aggregation {@link #getFooter footer}.
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Column.prototype.destroyFooter = function() { return new sap.m.Column(); };

/**
 * Destroys the header in the aggregation {@link #getHeader header}.
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Column.prototype.destroyHeader = function() { return new sap.m.Column(); };

/**
 * Creates a new subclass of class sap.m.Column with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Column.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns CSS alignment according to column hAlign setting or given parameter
 * for Begin/End values checks the locale settings
 * 
 * @param {String} [sAlign] TextAlign enumeration
 * @return {String} left|center|right
 * @protected
 * 
 */
sap.m.Column.prototype.getCssAlign = function(sAlign) { return null; };

/**
 * Gets current value of property {@link #getDemandPopin demandPopin}.
 * 
 * According to your minScreenWidth settings, the column can be hidden in different screen sizes.
 * Setting this property to true, shows this column as pop-in instead of hiding it.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>demandPopin</code>
 * 
 * @public
 * 
 */
sap.m.Column.prototype.getDemandPopin = function() { return false; };

/**
 * Gets content of aggregation {@link #getFooter footer}.
 * 
 * Control to be displayed in the column footer.
 * 
 * @returns {sap.ui.core.Control}
 * 
 * @public
 * 
 */
sap.m.Column.prototype.getFooter = function() { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getHAlign hAlign}.
 * 
 * Horizontal alignment of the column content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * NOTE: Control with a "textAlign" property inherits the horizontal alignment.
 * 
 * Default value is <code>Begin</code>.
 * @returns {sap.ui.core.TextAlign} Value of property <code>hAlign</code>
 * 
 * @public
 * 
 */
sap.m.Column.prototype.getHAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Gets content of aggregation {@link #getHeader header}.
 * 
 * Control to be displayed in the column header.
 * 
 * @returns {sap.ui.core.Control}
 * 
 * @public
 * 
 */
sap.m.Column.prototype.getHeader = function() { return new sap.ui.core.Control(); };

/**
 * Gets the initial order of the column
 * 
 * @returns {int} initial order of the column
 * @protected
 * 
 */
sap.m.Column.prototype.getInitialOrder = function() { return 0; };

/**
 * Gets the last value of the column
 * 
 * @since 1.16
 * @protected
 * 
 */
sap.m.Column.prototype.getLastValue = function() {  };

/**
 * Gets current value of property {@link #getMergeDuplicates mergeDuplicates}.
 * 
 * Set "true" to merge repeating cells(duplicates) into one cell block.
 * Please see "mergeFunctionName" property to customize this property.
 * Note: This feature must not be used together with two-way binding. This property is ignored if a column is shown in the pop-in.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>mergeDuplicates</code>
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Column.prototype.getMergeDuplicates = function() { return false; };

/**
 * Gets current value of property {@link #getMergeFunctionName mergeFunctionName}.
 * 
 * Defines the value getter(serialization) function if "mergeDuplicates" property is set "true"
 * Control itself uses this function to compare values of two repeating cells.
 * Default value "getText" is suitable for Label and Text control.
 * e.g. For "Icon" control "getSrc" can be used.
 * Note: You can pass one string parameter to given function after "#" sign. e.g. "data#myparameter"
 * 
 * Default value is <code>getText</code>.
 * @returns {string} Value of property <code>mergeFunctionName</code>
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Column.prototype.getMergeFunctionName = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.Column.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Column.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMinScreenWidth minScreenWidth}.
 * 
 * By default column is always shown. If you set this property, control checks the minimum width of the screen to show or hide this column.
 * As you can give specific CSS sizes(e.g: "480px" or "40em"), you can also use sap.m.ScreenSize enumeration(e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....).
 * 
 * sap.m.Column.MediaQuery1->Range1 = 199
 * 
 * This property can be used for responsive design. e.g: "40em"(or "640px" or "Tablet") setting shows this column in iPad(and Desktop) but hides in iPhone.
 * Please also see "demandPopin" property
 * 
 * @returns {string} Value of property <code>minScreenWidth</code>
 * 
 * @public
 * 
 */
sap.m.Column.prototype.getMinScreenWidth = function() { return ""; };

/**
 * Gets the order of the column
 * 
 * @returns {int} nOrder order of the column
 * @protected
 * 
 */
sap.m.Column.prototype.getOrder = function() { return 0; };

/**
 * Gets current value of property {@link #getPopinDisplay popinDisplay}.
 * 
 * Defines enumerated display options for the pop-in.
 * 
 * Default value is <code>Block</code>.
 * @returns {sap.m.PopinDisplay} Value of property <code>popinDisplay</code>
 * @since 1.13.2
 * 
 * @public
 * 
 */
sap.m.Column.prototype.getPopinDisplay = function() { return new sap.m.PopinDisplay(); };

/**
 * Gets current value of property {@link #getPopinHAlign popinHAlign}.
 * 
 * Horizontal alignment of the pop-in content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * NOTE: Controls with a text align do not inherit the horizontal alignment.
 * 
 * Default value is <code>Begin</code>.
 * @returns {sap.ui.core.TextAlign} Value of property <code>popinHAlign</code>
 * 
 * @deprecated Since version 1.14.
 * Use popinDisplay property instead.
 * 
 * @public
 * 
 */
sap.m.Column.prototype.getPopinHAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Gets current value of property {@link #getStyleClass styleClass}.
 * 
 * CSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.
 * 
 * @returns {string} Value of property <code>styleClass</code>
 * 
 * @public
 * 
 */
sap.m.Column.prototype.getStyleClass = function() { return ""; };

/**
 * Gets current value of property {@link #getVAlign vAlign}.
 * 
 * Vertical alignment of the cells in a column. Possible values are "Inherit", "Top", "Middle", "Bottom"
 * This property does not affect the vertical alignment of header and footer.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.VerticalAlign} Value of property <code>vAlign</code>
 * 
 * @public
 * 
 */
sap.m.Column.prototype.getVAlign = function() { return new sap.ui.core.VerticalAlign(); };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Specifies whether or not the column is visible. Invisible columns are not rendered.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.m.Column.prototype.getVisible = function() { return false; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the column. If you leave it empty then this column covers the remaining space.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.Column.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Determines whether the column will be hidden via media queries or not
 * 
 * @protected
 * 
 */
sap.m.Column.prototype.isHidden = function() {  };

/**
 * Determines whether the column will be shown as pop-in or not
 * 
 * @protected
 * 
 */
sap.m.Column.prototype.isPopin = function() {  };

/**
 * Gets called from the Table when the all items are removed
 * 
 * @since 1.16
 * @protected
 * 
 */
sap.m.Column.prototype.onItemsRemoved = function() {  };

/**
 * Sets a new value for property {@link #getDemandPopin demandPopin}.
 * 
 * According to your minScreenWidth settings, the column can be hidden in different screen sizes.
 * Setting this property to true, shows this column as pop-in instead of hiding it.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bDemandPopin New value for property <code>demandPopin</code>
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Column.prototype.setDemandPopin = function(bDemandPopin) { return new sap.m.Column(); };

/**
 * Display or hide the column from given table
 * This does not set the visibility property of the column
 * 
 * @param {Object} oTableDomRef Table DOM reference
 * @param {boolean} [bDisplay] whether visible or not
 * @protected
 * 
 */
sap.m.Column.prototype.setDisplay = function(oTableDomRef,bDisplay) {  };

/**
 * Display or hide the column from given table via checking media query changes
 * 
 * @param {Object} oTableDomRef Table DOM reference
 * @protected
 * 
 */
sap.m.Column.prototype.setDisplayViaMedia = function(oTableDomRef) {  };

/**
 * Sets the aggregated {@link #getFooter footer}.
 * @param {sap.ui.core.Control} oFooter The footer to set
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Column.prototype.setFooter = function(oFooter) { return new sap.m.Column(); };

/**
 * Sets a new value for property {@link #getHAlign hAlign}.
 * 
 * Horizontal alignment of the column content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * NOTE: Control with a "textAlign" property inherits the horizontal alignment.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Begin</code>.
 * @param {sap.ui.core.TextAlign} sHAlign New value for property <code>hAlign</code>
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Column.prototype.setHAlign = function(sHAlign) { return new sap.m.Column(); };

/**
 * Sets the aggregated {@link #getHeader header}.
 * @param {sap.ui.core.Control} oHeader The header to set
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Column.prototype.setHeader = function(oHeader) { return new sap.m.Column(); };

/**
 * Sets the visible column index
 * Negative index values can be used to clear
 * 
 * @param {int} nIndex index of the visible column
 * @protected
 * 
 */
sap.m.Column.prototype.setIndex = function(nIndex) {  };

/**
 * Sets the initial order of the column
 * 
 * @param {int} nOrder initial order of the column
 * @protected
 * 
 */
sap.m.Column.prototype.setInitialOrder = function(nOrder) {  };

/**
 * Sets the last value of the column if mergeDuplicates property is true
 * 
 * @param {any} value Any Value
 * @returns {sap.m.Column}
 * @since 1.16
 * @protected
 * 
 */
sap.m.Column.prototype.setLastValue = function(value) { return new sap.m.Column(); };

/**
 * Sets a new value for property {@link #getMergeDuplicates mergeDuplicates}.
 * 
 * Set "true" to merge repeating cells(duplicates) into one cell block.
 * Please see "mergeFunctionName" property to customize this property.
 * Note: This feature must not be used together with two-way binding. This property is ignored if a column is shown in the pop-in.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bMergeDuplicates New value for property <code>mergeDuplicates</code>
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Column.prototype.setMergeDuplicates = function(bMergeDuplicates) { return new sap.m.Column(); };

/**
 * Sets a new value for property {@link #getMergeFunctionName mergeFunctionName}.
 * 
 * Defines the value getter(serialization) function if "mergeDuplicates" property is set "true"
 * Control itself uses this function to compare values of two repeating cells.
 * Default value "getText" is suitable for Label and Text control.
 * e.g. For "Icon" control "getSrc" can be used.
 * Note: You can pass one string parameter to given function after "#" sign. e.g. "data#myparameter"
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>getText</code>.
 * @param {string} sMergeFunctionName New value for property <code>mergeFunctionName</code>
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Column.prototype.setMergeFunctionName = function(sMergeFunctionName) { return new sap.m.Column(); };

/**
 * Sets a new value for property {@link #getMinScreenWidth minScreenWidth}.
 * 
 * By default column is always shown. If you set this property, control checks the minimum width of the screen to show or hide this column.
 * As you can give specific CSS sizes(e.g: "480px" or "40em"), you can also use sap.m.ScreenSize enumeration(e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....).
 * 
 * sap.m.Column.MediaQuery1->Range1 = 199
 * 
 * This property can be used for responsive design. e.g: "40em"(or "640px" or "Tablet") setting shows this column in iPad(and Desktop) but hides in iPhone.
 * Please also see "demandPopin" property
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sMinScreenWidth New value for property <code>minScreenWidth</code>
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Column.prototype.setMinScreenWidth = function(sMinScreenWidth) { return new sap.m.Column(); };

/**
 * Sets the order of the column
 * Does not do the visual effect
 * Table should be invalidate to re-render
 * 
 * @param {int} nOrder order of the column
 * @protected
 * 
 */
sap.m.Column.prototype.setOrder = function(nOrder) {  };

/**
 * Sets a new value for property {@link #getPopinDisplay popinDisplay}.
 * 
 * Defines enumerated display options for the pop-in.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Block</code>.
 * @param {sap.m.PopinDisplay} sPopinDisplay New value for property <code>popinDisplay</code>
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * @since 1.13.2
 * 
 * @public
 * 
 */
sap.m.Column.prototype.setPopinDisplay = function(sPopinDisplay) { return new sap.m.Column(); };

/**
 * Sets a new value for property {@link #getPopinHAlign popinHAlign}.
 * 
 * Horizontal alignment of the pop-in content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * NOTE: Controls with a text align do not inherit the horizontal alignment.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Begin</code>.
 * @param {sap.ui.core.TextAlign} sPopinHAlign New value for property <code>popinHAlign</code>
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.14.
 * Use popinDisplay property instead.
 * 
 * @public
 * 
 */
sap.m.Column.prototype.setPopinHAlign = function(sPopinHAlign) { return new sap.m.Column(); };

/**
 * Sets a new value for property {@link #getStyleClass styleClass}.
 * 
 * CSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sStyleClass New value for property <code>styleClass</code>
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Column.prototype.setStyleClass = function(sStyleClass) { return new sap.m.Column(); };

/**
 * Sets a new value for property {@link #getVAlign vAlign}.
 * 
 * Vertical alignment of the cells in a column. Possible values are "Inherit", "Top", "Middle", "Bottom"
 * This property does not affect the vertical alignment of header and footer.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.VerticalAlign} sVAlign New value for property <code>vAlign</code>
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Column.prototype.setVAlign = function(sVAlign) { return new sap.m.Column(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Specifies whether or not the column is visible. Invisible columns are not rendered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Column.prototype.setVisible = function(bVisible) { return new sap.m.Column(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width of the column. If you leave it empty then this column covers the remaining space.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.Column} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Column.prototype.setWidth = function(sWidth) { return new sap.m.Column(); };


// ---- sap.m.ColumnListItem --------------------------------------------------------------------------

/**
 * Constructor for a new ColumnListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVAlign vAlign} : sap.ui.core.VerticalAlign (default: Inherit)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCells cells} : sap.ui.core.Control[] (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * 
 * @param {string} [sId] Id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <code>sap.m.ColumnListItem</code> can be used with the <code>cells</code> aggregation to create rows for the <code>sap.m.Table</code> control.
 * The <code>columns</code> aggregation of the <code>sap.m.Table</code> should match with the cells aggregation.
 * 
 * <b>Note:</b> This control should only be used within the <code>sap.m.Table</code> control.
 * The inherited <code>counter</code> property of <code>sap.m.ListItemBase</code> is not supported.
 * 
 * @extends sap.m.ListItemBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ColumnListItem = function(sId,mSettings) {};
/**
 * Returns pop-in DOMRef as a jQuery Object
 * 
 * @protected
 * @since 1.26
 * 
 */
sap.m.ColumnListItem.prototype.$Popin = function() {  };

/**
 * Adds some cell to the aggregation {@link #getCells cells}.
 * @param {sap.ui.core.Control}
 *            oCell the cell to add; if empty, nothing is inserted
 * @returns {sap.m.ColumnListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.addCell = function(oCell) { return new sap.m.ColumnListItem(); };

/**
 * Binds aggregation {@link #getCells cells} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.ColumnListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.bindCells = function(oBindingInfo) { return new sap.m.ColumnListItem(); };

/**
 * Destroys all the cells in the aggregation {@link #getCells cells}.
 * @returns {sap.m.ColumnListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.destroyCells = function() { return new sap.m.ColumnListItem(); };

/**
 * Creates a new subclass of class sap.m.ColumnListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ColumnListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getCells cells}.
 * 
 * Every <code>control</code> inside the <code>cells</code> aggregation defines one cell of the row.
 * <b>Note:</b> The order of the <code>cells</code> aggregation must match the order of the <code>columns</code> aggregation of <code>sap.m.Table</code>.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.getCells = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.ColumnListItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ColumnListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the pop-in element.
 * 
 * @protected
 * @since 1.30.9
 * 
 */
sap.m.ColumnListItem.prototype.getPopin = function() {  };

/**
 * Returns the tabbable DOM elements as a jQuery collection
 * When popin is available this separated dom should also be included
 * 
 * @returns {jQuery} jQuery object
 * @protected
 * @since 1.26
 * 
 */
sap.m.ColumnListItem.prototype.getTabbables = function() { return null; };

/**
 * Gets current value of property {@link #getVAlign vAlign}.
 * 
 * Sets the vertical alignment of all the cells within the table row (including selection and navigation).
 * <b>Note:</b> <code>vAlign</code> property of <code>sap.m.Column</code> overrides the property for cell vertical alignment if both are set.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.VerticalAlign} Value of property <code>vAlign</code>
 * @since 1.20
 * 
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.getVAlign = function() { return new sap.ui.core.VerticalAlign(); };

/**
 * Determines whether control has pop-in or not.
 * @protected
 * 
 */
sap.m.ColumnListItem.prototype.hasPopin = function() {  };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getCells cells}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oCell The cell whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.indexOfCell = function(oCell) { return 0; };

/**
 * Inserts a cell into the aggregation {@link #getCells cells}.
 * 
 * @param {sap.ui.core.Control}
 *            oCell the cell to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the cell should be inserted at; for
 *              a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the cell is inserted at
 *              the last position
 * @returns {sap.m.ColumnListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.insertCell = function(oCell,iIndex) { return new sap.m.ColumnListItem(); };

/**
 * Removes all the controls from the aggregation {@link #getCells cells}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.removeAllCells = function() { return new Array(); };

/**
 * Removes a cell from the aggregation {@link #getCells cells}.
 * 
 * @param {int | string | sap.ui.core.Control} vCell The cell to remove or its index or id
 * @returns {sap.ui.core.Control} The removed cell or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.removeCell = function(vCell) { return new sap.ui.core.Control(); };

/**
 * Pemove pop-in from DOM
 * @protected
 * 
 */
sap.m.ColumnListItem.prototype.removePopin = function() {  };

/**
 * Sets a new value for property {@link #getVAlign vAlign}.
 * 
 * Sets the vertical alignment of all the cells within the table row (including selection and navigation).
 * <b>Note:</b> <code>vAlign</code> property of <code>sap.m.Column</code> overrides the property for cell vertical alignment if both are set.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.VerticalAlign} sVAlign New value for property <code>vAlign</code>
 * @returns {sap.m.ColumnListItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.20
 * 
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.setVAlign = function(sVAlign) { return new sap.m.ColumnListItem(); };

/**
 * Unbinds aggregation {@link #getCells cells} from model data.
 * @returns {sap.m.ColumnListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ColumnListItem.prototype.unbindCells = function() { return new sap.m.ColumnListItem(); };


// ---- sap.m.ComboBox --------------------------------------------------------------------------

/**
 * Constructor for a new ComboBox.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelectedKey selectedKey} : string (default: )</li>
 * <li>{@link #getSelectedItemId selectedItemId} : string (default: )</li>
 * <li>{@link #getShowSecondaryValues showSecondaryValues} : boolean (default: false)</li>
 * <li>{@link #getFilterSecondaryValues filterSecondaryValues} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedItem selectedItem} : (sap.ui.core.ID | sap.ui.core.Item)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:selectionChange selectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ComboBoxBase#constructor sap.m.ComboBoxBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A drop-down list for selecting and filtering values.
 * <h3>Overview</h3>
 * The control represents a drop-down menu with a list of the available options and a text input field to narrow down the options.
 * <h3>Structure</h3>
 * The combo-box consists of the following elements:
 * <ul>
 * <li> Input field - displays the selected option or a custom user entry. Users can type to narrow down the list or enter their own value.</li>
 * <li> Drop-down arrow - expands\collapses the option list.</li>
 * <li> Option list - the list of available options.</li>
 * </ul>
 * By setting the <code>showSecondaryValues</code> property, the combo box can display an additional value for each option (if there is one). Filtering is done only on the first option.
 * <h3>Usage</h3>
 * <h4>When to use:</h4>
 * <ul>
 * <li>You need to select only one item in a long list of options (between 13 and 200) or your custom user input.</li>
 * </ul>
 * <h4>When not to use:</h4>
 * <ul>
 * <li>You need to select between only two options. Use a {@link sap.m.Switch switch} control instead.</li>
 * <li>You need to select between 12 options. Use a {@link sap.m.Select select} control instead.</li>
 * <li>You need to select between more than 200 options. Use a {@link sap.m.Input input} control with value help instead.</li>
 * </ul>
 * <h3>Responsive Behavior</h3>
 * <ul>
 * <li>The width of the option list adapts to its content. The minimum width is the input field plus the drop-down arrow.</li>
 * <li>There is no horizontal scrolling in the option list. Entries in the list that are too long will be truncated.</li>
 * <li>On phone devices the combo box option list opens a dialog.</li>
 * </ul>
 * @version 1.48.4
 * 
 * @constructor
 * @extends sap.m.ComboBoxBase
 * @public
 * @since 1.22
 * @ui5-metamodel This control will also be described in the UI5 (legacy) design time meta model.
 * 
 */
sap.m.ComboBox = function(sId,mSettings) {};
/**
 * This event is fired when the value in the text input field is changed in combination with one of
 * the following actions:
 * 
 * <ul>
 * 	<li>The focus leaves the text input field</li>
 * 	<li>The <i>Enter</i> key is pressed</li>
 * </ul>
 * 
 * In addition, this event is also fired when an item in the list is selected.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new <code>value</code> of the <code>control</code>
 * @param {boolean} oControlEvent.getParameters.itemPressed Indicates whether the change event was caused by selecting an item in the list
 * @public
 * 
 */
sap.m.ComboBox.prototype.change = function(oControlEvent) {  };

/**
 * This event is fired when the user types something that matches with an item in the list;
 * it is also fired when the user presses on a list item, or when navigating via keyboard.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem The selected item.
 * @public
 * 
 */
sap.m.ComboBox.prototype.selectionChange = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.m.ComboBox</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ComboBox</code> itself.
 * 
 * This event is fired when the value in the text input field is changed in combination with one of
 * the following actions:
 * 
 * <ul>
 * 	<li>The focus leaves the text input field</li>
 * 	<li>The <i>Enter</i> key is pressed</li>
 * </ul>
 * 
 * In addition, this event is also fired when an item in the list is selected.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ComboBox</code> itself
 * 
 * @returns {sap.m.ComboBox} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ComboBox.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.ComboBox(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:selectionChange selectionChange} event of this <code>sap.m.ComboBox</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ComboBox</code> itself.
 * 
 * This event is fired when the user types something that matches with an item in the list;
 * it is also fired when the user presses on a list item, or when navigating via keyboard.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ComboBox</code> itself
 * 
 * @returns {sap.m.ComboBox} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ComboBox.prototype.attachSelectionChange = function(oData,fnFunction,oListener) { return new sap.m.ComboBox(); };

/**
 * Creates a picker popup container where the selection should take place.
 * 
 * To be overwritten by subclasses.
 * 
 * @param {string} sPickerType
 * @returns {sap.m.Popover | sap.m.Dialog} The picker popup to be used.
 * @protected
 * 
 */
sap.m.ComboBox.prototype.createPicker = function(sPickerType) { return new sap.m.Popover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.m.ComboBox</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ComboBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ComboBox.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.ComboBox(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:selectionChange selectionChange} event of this <code>sap.m.ComboBox</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ComboBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ComboBox.prototype.detachSelectionChange = function(fnFunction,oListener) { return new sap.m.ComboBox(); };

/**
 * Creates a new subclass of class sap.m.ComboBox with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ComboBoxBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ComboBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:change change} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.value] The new <code>value</code> of the <code>control</code>
 * @param {boolean} [mParameters.itemPressed] Indicates whether the change event was caused by selecting an item in the list
 * 
 * @returns {sap.m.ComboBox} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ComboBox.prototype.fireChange = function(mParameters) { return new sap.m.ComboBox(); };

/**
 * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Item} [mParameters.selectedItem] The selected item.
 * 
 * @returns {sap.m.ComboBox} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ComboBox.prototype.fireSelectionChange = function(mParameters) { return new sap.m.ComboBox(); };

/**
 * Gets the default selected item from the aggregation named <code>items</code>.
 * 
 * @returns {null}
 * @protected
 * 
 */
sap.m.ComboBox.prototype.getDefaultSelectedItem = function() { return null; };

/**
 * Gets current value of property {@link #getFilterSecondaryValues filterSecondaryValues}.
 * 
 * Indicates whether the filter should check in both the <code>text</code> and the <code>additionalText</code> property of the
 * {@link sap.ui.core.ListItem} for the suggestion.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>filterSecondaryValues</code>
 * @since 1.46
 * 
 * @public
 * 
 */
sap.m.ComboBox.prototype.getFilterSecondaryValues = function() { return false; };

/**
 * Gets aggregation <code>items</code>.
 * 
 * <b>Note</b>: This is the default aggregation.
 * @return {sap.ui.core.Item[]}
 * @public
 * 
 */
sap.m.ComboBox.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.ComboBox.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ComboBox.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets the selected item object from the aggregation named <code>items</code>.
 * 
 * @returns {sap.ui.core.Item | null} The current target of the <code>selectedItem</code> association,
 * or <code>null</code>.
 * @public
 * 
 */
sap.m.ComboBox.prototype.getSelectedItem = function() { return new sap.ui.core.Item(); };

/**
 * Gets current value of property {@link #getSelectedItemId selectedItemId}.
 * 
 * ID of the selected item.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>selectedItemId</code>
 * 
 * @public
 * 
 */
sap.m.ComboBox.prototype.getSelectedItemId = function() { return ""; };

/**
 * Gets current value of property {@link #getSelectedKey selectedKey}.
 * 
 * Key of the selected item.
 * 
 * <b>Note:</b> If duplicate keys exist, the first item matching the key is used.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>selectedKey</code>
 * 
 * @public
 * 
 */
sap.m.ComboBox.prototype.getSelectedKey = function() { return ""; };

/**
 * Gets current value of property {@link #getShowSecondaryValues showSecondaryValues}.
 * 
 * Indicates whether the text values of the <code>additionalText</code> property of a
 * {@link sap.ui.core.ListItem} are shown.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showSecondaryValues</code>
 * @since 1.32.3
 * 
 * @public
 * 
 */
sap.m.ComboBox.prototype.getShowSecondaryValues = function() { return false; };

/**
 * This event handler is called before the picker popup is opened.
 * 
 * @protected
 * 
 */
sap.m.ComboBox.prototype.onBeforeOpen = function() {  };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * 
 * @param {int | string | sap.ui.core.Item} vItem The item to be removed or its index or ID.
 * @returns {sap.ui.core.Item} The removed item or <code>null</code>.
 * @public
 * 
 */
sap.m.ComboBox.prototype.removeItem = function(vItem) { return new sap.ui.core.Item(); };

/**
 * Sets the start and end positions of the current text selection.
 * 
 * @param {int} iSelectionStart The index of the first selected character.
 * @param {int} iSelectionEnd The index of the character after the last selected character.
 * @protected
 * @since 1.22.1
 * 
 */
sap.m.ComboBox.prototype.selectText = function(iSelectionStart,iSelectionEnd) {  };

/**
 * Sets a new value for property {@link #getFilterSecondaryValues filterSecondaryValues}.
 * 
 * Indicates whether the filter should check in both the <code>text</code> and the <code>additionalText</code> property of the
 * {@link sap.ui.core.ListItem} for the suggestion.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bFilterSecondaryValues New value for property <code>filterSecondaryValues</code>
 * @returns {sap.m.ComboBox} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46
 * 
 * @public
 * 
 */
sap.m.ComboBox.prototype.setFilterSecondaryValues = function(bFilterSecondaryValues) { return new sap.m.ComboBox(); };

/**
 * Sets the <code>selectedItem</code> association.
 * 
 * Default value is <code>null</code>.
 * 
 * @param {string | sap.ui.core.Item | null} vItem New value for the <code>selectedItem</code> association.
 * If an ID of a <code>sap.ui.core.Item</code> is given, the item with this ID becomes the
 * <code>selectedItem</code> association.
 * Alternatively, a <code>sap.ui.core.Item</code> instance may be given or <code>null</code> to clear
 * the selection.
 * 
 * @returns {sap.m.ComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.ComboBox.prototype.setSelectedItem = function(vItem) { return new sap.m.ComboBox(); };

/**
 * Sets the <code>selectedItemId</code> property.
 * 
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * 
 * @param {string | undefined} vItem New value for property <code>selectedItemId</code>.
 * If the provided <code>vItem</code> is an empty string <code>""</code> or <code>undefined</code>,
 * the selection is cleared.
 * If the ID has no corresponding aggregated item, the selected item is not changed.
 * 
 * @returns {sap.m.ComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.ComboBox.prototype.setSelectedItemId = function(vItem) { return new sap.m.ComboBox(); };

/**
 * Sets the <code>selectedKey</code> property.
 * 
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * 
 * @param {string} sKey New value for property <code>selectedKey</code>.
 * If the provided <code>sKey</code> is an empty string <code>""</code> or <code>undefined</code>,
 * the selection is cleared.
 * If duplicate keys exist, the first item matching the key is selected.
 * 
 * @returns {sap.m.ComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.ComboBox.prototype.setSelectedKey = function(sKey) { return new sap.m.ComboBox(); };

/**
 * Sets a new value for property {@link #getShowSecondaryValues showSecondaryValues}.
 * 
 * Indicates whether the text values of the <code>additionalText</code> property of a
 * {@link sap.ui.core.ListItem} are shown.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowSecondaryValues New value for property <code>showSecondaryValues</code>
 * @returns {sap.m.ComboBox} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.3
 * 
 * @public
 * 
 */
sap.m.ComboBox.prototype.setShowSecondaryValues = function(bShowSecondaryValues) { return new sap.m.ComboBox(); };

/**
 * Synchronizes the <code>selectedItem</code> association and the <code>selectedItemId</code> property.
 * 
 * @protected
 * 
 */
sap.m.ComboBox.prototype.synchronizeSelection = function() {  };


// ---- sap.m.ComboBoxBase --------------------------------------------------------------------------

/**
 * Constructor for a new <code>sap.m.ComboBoxBase</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Item[] (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:loadItems loadItems} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ComboBoxTextField#constructor sap.m.ComboBoxTextField}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given.
 * @param {object} [mSettings] Initial settings for the new control.
 * 
 * @class
 * An abstract class for combo boxes.
 * @extends sap.m.ComboBoxTextField
 * @abstract
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.22.0
 * @ui5-metamodel This control will also be described in the UI5 (legacy) design time meta model.
 * 
 */
sap.m.ComboBoxBase = function(sId,mSettings) {};
/**
 * This event is fired when the end user clicks the combo box button to open the dropdown list and
 * the data used to display items is not already loaded.
 * Alternatively, it is fired after the user moves the cursor to the combo box text
 * field and perform an action that requires data to be loaded. For example,
 * pressing F4 to open the dropdown list or typing something in the text field fires the event.
 * 
 * <b>Note:</b> Use this feature in performance critical scenarios only.
 * Loading the data lazily (on demand) to defer initialization has several implications for the
 * end user experience. For example, the busy indicator has to be shown while the items are being
 * loaded and assistive technology software also has to announce the state changes
 * (which may be confusing for some screen reader users).
 * 
 * <b>Note</b>: Currently the <code>sap.m.MultiComboBox</code> does not support this event.
 * @event
 * @since 1.38
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.loadItems = function(oControlEvent) {  };

/**
 * Adds an item to the aggregation named <code>items</code>.
 * 
 * @param {sap.ui.core.Item} oItem The item to be added; if empty, nothing is added.
 * @returns {sap.m.ComboBoxBase} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.addItem = function(oItem) { return new sap.m.ComboBoxBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:loadItems loadItems} event of this <code>sap.m.ComboBoxBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ComboBoxBase</code> itself.
 * 
 * This event is fired when the end user clicks the combo box button to open the dropdown list and
 * the data used to display items is not already loaded.
 * Alternatively, it is fired after the user moves the cursor to the combo box text
 * field and perform an action that requires data to be loaded. For example,
 * pressing F4 to open the dropdown list or typing something in the text field fires the event.
 * 
 * <b>Note:</b> Use this feature in performance critical scenarios only.
 * Loading the data lazily (on demand) to defer initialization has several implications for the
 * end user experience. For example, the busy indicator has to be shown while the items are being
 * loaded and assistive technology software also has to announce the state changes
 * (which may be confusing for some screen reader users).
 * 
 * <b>Note</b>: Currently the <code>sap.m.MultiComboBox</code> does not support this event.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ComboBoxBase</code> itself
 * 
 * @returns {sap.m.ComboBoxBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.38
 * 
 */
sap.m.ComboBoxBase.prototype.attachLoadItems = function(oData,fnFunction,oListener) { return new sap.m.ComboBoxBase(); };

/**
 * Binds aggregation {@link #getItems items} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.ComboBoxBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.bindItems = function(oBindingInfo) { return new sap.m.ComboBoxBase(); };

/**
 * Clears the selection.
 * To be overwritten by subclasses.
 * 
 * @protected
 * 
 */
sap.m.ComboBoxBase.prototype.clearSelection = function() {  };

/**
 * Closes the control's picker popup.
 * 
 * @returns {sap.m.ComboBoxBase} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.close = function() { return new sap.m.ComboBoxBase(); };

/**
 * Creates a picker popup container where the selection should take place.
 * To be overwritten by subclasses.
 * 
 * @param {string} sPickerType
 * @returns {sap.m.Popover | sap.m.Dialog} The picker popup to be used.
 * @protected
 * 
 */
sap.m.ComboBoxBase.prototype.createPicker = function(sPickerType) { return new sap.m.Popover(); };

/**
 * Creates an instance of <code>sap.m.Bar</code>.
 * 
 * @returns {sap.m.Bar} Picker's header
 * @protected
 * @since 1.42
 * 
 */
sap.m.ComboBoxBase.prototype.createPickerHeader = function() { return new sap.m.Bar(); };

/**
 * Destroys all the items in the aggregation named <code>items</code>.
 * 
 * @returns {sap.m.ComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.destroyItems = function() { return new sap.m.ComboBox(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:loadItems loadItems} event of this <code>sap.m.ComboBoxBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ComboBoxBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * 
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.detachLoadItems = function(fnFunction,oListener) { return new sap.m.ComboBoxBase(); };

/**
 * Creates a new subclass of class sap.m.ComboBoxBase with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ComboBoxTextField.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ComboBoxBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:loadItems loadItems} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ComboBoxBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.38
 * 
 */
sap.m.ComboBoxBase.prototype.fireLoadItems = function(mParameters) { return new sap.m.ComboBoxBase(); };

/**
 * Gets the enabled items from the aggregation named <code>items</code>.
 * 
 * @param {sap.ui.core.Item[]} [aItems=getItems()] Items to filter.
 * @return {sap.ui.core.Item[]} An array containing the enabled items.
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.getEnabledItems = function(aItems) { return new Array(); };

/**
 * Gets the first item from the aggregation named <code>items</code>.
 * 
 * @returns {sap.ui.core.Item} The first item, or null if there are no items.
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.getFirstItem = function() { return new sap.ui.core.Item(); };

/**
 * Gets the item from the aggregation named <code>items</code> at the given 0-based index.
 * 
 * @param {int} iIndex Index of the item to return.
 * @returns {sap.ui.core.Item} Item at the given index, or null if none.
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.getItemAt = function(iIndex) { return new sap.ui.core.Item(); };

/**
 * Gets the item with the given key from the aggregation named <code>items</code>.
 * 
 * <b>Note:</b> If duplicate keys exist, the first item matching the key is returned.
 * 
 * @param {string} sKey An item key that specifies the item to retrieve.
 * @returns {sap.ui.core.Item}
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.getItemByKey = function(sKey) { return new sap.ui.core.Item(); };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * Defines the items contained within this control.
 * 
 * @returns {sap.ui.core.Item[]}
 * 
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.getItems = function() { return new Array(); };

/**
 * Gets the last item from the aggregation named <code>items</code>.
 * 
 * @returns {sap.ui.core.Item} The last item, or null if there are no items.
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.getLastItem = function() { return new sap.ui.core.Item(); };

/**
 * Gets the <code>list</code>.
 * 
 * @returns {sap.m.SelectList} The list instance object or <code>null</code>.
 * @protected
 * 
 */
sap.m.ComboBoxBase.prototype.getList = function() { return new sap.m.SelectList(); };

/**
 * Returns a metadata object for class sap.m.ComboBoxBase.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ComboBoxBase.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets the control's picker popup.
 * 
 * @returns {sap.m.Dialog | sap.m.Popover | null} The picker instance, creating it if necessary by calling
 * the <code>createPicker()</code> method.
 * @protected
 * 
 */
sap.m.ComboBoxBase.prototype.getPicker = function() { return new sap.m.Dialog(); };

/**
 * Gets the ID of the hidden label
 * @returns {string} Id of hidden text
 * @protected
 * 
 */
sap.m.ComboBoxBase.prototype.getPickerInvisibleTextId = function() { return ""; };

/**
 * Gets the control's input from the picker.
 * 
 * @returns {sap.m.ComboBoxTextField | sap.m.Input | null} Picker's input for filtering the list
 * @protected
 * @since 1.42
 * 
 */
sap.m.ComboBoxBase.prototype.getPickerTextField = function() { return new sap.m.ComboBoxTextField(); };

/**
 * Gets the property <code>_sPickerType</code>
 * 
 * @returns {string}
 * @protected
 * 
 */
sap.m.ComboBoxBase.prototype.getPickerType = function() { return ""; };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts an item into the aggregation named <code>items</code>.
 * 
 * @param {sap.ui.core.Item} oItem The item to be inserted; if empty, nothing is inserted.
 * @param {int} iIndex The <code>0</code>-based index the item should be inserted at; for
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *             greater than the current size of the aggregation, the item is inserted at the last position.
 * @returns {sap.m.ComboBoxBase} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.insertItem = function(oItem,iIndex) { return new sap.m.ComboBoxBase(); };

/**
 * Indicates whether the control's picker popup is open.
 * 
 * @returns {boolean} Determines whether the control's picker popup is currently open
 * (this includes opening and closing animations).
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.isOpen = function() { return false; };

/**
 * Opens the control's picker popup.
 * 
 * @returns {sap.m.ComboBoxBase} <code>this</code> to allow method chaining.
 * @protected
 * 
 */
sap.m.ComboBoxBase.prototype.open = function() { return new sap.m.ComboBoxBase(); };

/**
 * Removes all the controls in the aggregation named <code>items</code>.
 * Additionally unregisters them from the hosting UIArea and clears the selection.
 * 
 * @returns {sap.ui.core.Item[]} An array of the removed items (might be empty).
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * 
 * @param {int | string | sap.ui.core.Item} vItem The item to remove or its index or ID.
 * @returns {sap.ui.core.Item} The removed item or null.
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.removeItem = function(vItem) { return new sap.ui.core.Item(); };

/**
 * Sets the property <code>_sPickerType</code>.
 * 
 * @param {string} sPickerType
 * @protected
 * 
 */
sap.m.ComboBoxBase.prototype.setPickerType = function(sPickerType) {  };

/**
 * Unbinds aggregation {@link #getItems items} from model data.
 * @returns {sap.m.ComboBoxBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ComboBoxBase.prototype.unbindItems = function() { return new sap.m.ComboBoxBase(); };


// ---- sap.m.ComboBoxTextField --------------------------------------------------------------------------

/**
 * Constructor for a new <code>sap.m.ComboBoxTextField</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getShowButton showButton} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given.
 * @param {object} [mSettings] Initial settings for the new control.
 * 
 * @class
 * The <code>sap.m.ComboBoxTextField</code>.
 * @extends sap.m.InputBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.34
 * @ui5-metamodel This control will also be described in the UI5 (legacy) design time meta model.
 * 
 */
sap.m.ComboBoxTextField = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ComboBoxTextField with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ComboBoxTextField.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getMaxWidth maxWidth}.
 * 
 * Sets the maximum width of the text field.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>maxWidth</code>
 * 
 * @public
 * 
 */
sap.m.ComboBoxTextField.prototype.getMaxWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.ComboBoxTextField.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ComboBoxTextField.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowButton showButton}.
 * 
 * Indicates whether the dropdown downward-facing arrow button is shown.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showButton</code>
 * @since 1.38
 * 
 * @public
 * 
 */
sap.m.ComboBoxTextField.prototype.getShowButton = function() { return false; };

/**
 * Gets the <code>value</code>.
 * 
 * Default value is an empty string.
 * 
 * @returns {string} The value of property <code>value</code>
 * @public
 * 
 */
sap.m.ComboBoxTextField.prototype.getValue = function() { return ""; };

/**
 * Sets a new value for property {@link #getMaxWidth maxWidth}.
 * 
 * Sets the maximum width of the text field.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sMaxWidth New value for property <code>maxWidth</code>
 * @returns {sap.m.ComboBoxTextField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ComboBoxTextField.prototype.setMaxWidth = function(sMaxWidth) { return new sap.m.ComboBoxTextField(); };

/**
 * Sets a new value for property {@link #getShowButton showButton}.
 * 
 * Indicates whether the dropdown downward-facing arrow button is shown.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowButton New value for property <code>showButton</code>
 * @returns {sap.m.ComboBoxTextField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * 
 * @public
 * 
 */
sap.m.ComboBoxTextField.prototype.setShowButton = function(bShowButton) { return new sap.m.ComboBoxTextField(); };


// ---- sap.m.CustomListItem --------------------------------------------------------------------------

/**
 * Constructor for a new CustomListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[] (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * This control with a content aggregation can be used to customize standard list items that we don't provide. List mode and ListItem type are applied to CustomListItems as well.
 * <b>Note:</b> Even though the content aggregation allows any control, complex responsive layout controls (e.g. <code>Table, Form</code>) should not be aggregated as content.
 * 
 * @extends sap.m.ListItemBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.CustomListItem = function(sId,mSettings) {};
/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.CustomListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CustomListItem.prototype.addContent = function(oContent) { return new sap.m.CustomListItem(); };

/**
 * Binds aggregation {@link #getContent content} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.CustomListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CustomListItem.prototype.bindContent = function(oBindingInfo) { return new sap.m.CustomListItem(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.CustomListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CustomListItem.prototype.destroyContent = function() { return new sap.m.CustomListItem(); };

/**
 * Creates a new subclass of class sap.m.CustomListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.CustomListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * The content of this list item
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.CustomListItem.prototype.getContent = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.CustomListItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.CustomListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.CustomListItem.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.CustomListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CustomListItem.prototype.insertContent = function(oContent,iIndex) { return new sap.m.CustomListItem(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.CustomListItem.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.CustomListItem.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Unbinds aggregation {@link #getContent content} from model data.
 * @returns {sap.m.CustomListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CustomListItem.prototype.unbindContent = function() { return new sap.m.CustomListItem(); };


// ---- sap.m.CustomTile --------------------------------------------------------------------------

/**
 * Constructor for a new CustomTile.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Tile#constructor sap.m.Tile}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Use the CustomTile control to display application specific content in the Tile control.
 * The tile width is 8.5em and height is 10em.
 * @extends sap.m.Tile
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.CustomTile = function(sId,mSettings) {};
/**
 * Destroys the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.CustomTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CustomTile.prototype.destroyContent = function() { return new sap.m.CustomTile(); };

/**
 * Creates a new subclass of class sap.m.CustomTile with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Tile.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.CustomTile.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * Defines the content of the CustomTile.
 * 
 * @returns {sap.ui.core.Control}
 * 
 * @public
 * 
 */
sap.m.CustomTile.prototype.getContent = function() { return new sap.ui.core.Control(); };

/**
 * Returns a metadata object for class sap.m.CustomTile.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.CustomTile.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sets the aggregated {@link #getContent content}.
 * @param {sap.ui.core.Control} oContent The content to set
 * @returns {sap.m.CustomTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CustomTile.prototype.setContent = function(oContent) { return new sap.m.CustomTile(); };


// ---- sap.m.CustomTreeItem --------------------------------------------------------------------------

/**
 * Constructor for a new CustomTreeItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[] (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.TreeItemBase#constructor sap.m.TreeItemBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class The <code>CustomTreeItem</code> control with a content aggregation is used to customize the tree items within the <code>Tree</code>
 *        control.<br><b>Note:</b> Even though the content aggregation can be used for any control, complex responsive layout controls, such as
 *        <code>Table, Form</code> etc, should not be aggregated as content.
 * @extends sap.m.TreeItemBase
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.48.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.CustomTreeItem = function(sId,mSettings) {};
/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.CustomTreeItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CustomTreeItem.prototype.addContent = function(oContent) { return new sap.m.CustomTreeItem(); };

/**
 * Binds aggregation {@link #getContent content} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.CustomTreeItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CustomTreeItem.prototype.bindContent = function(oBindingInfo) { return new sap.m.CustomTreeItem(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.CustomTreeItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CustomTreeItem.prototype.destroyContent = function() { return new sap.m.CustomTreeItem(); };

/**
 * Creates a new subclass of class sap.m.CustomTreeItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.TreeItemBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.CustomTreeItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * The content of this tree item.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.CustomTreeItem.prototype.getContent = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.CustomTreeItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.CustomTreeItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.CustomTreeItem.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.CustomTreeItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CustomTreeItem.prototype.insertContent = function(oContent,iIndex) { return new sap.m.CustomTreeItem(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.CustomTreeItem.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.CustomTreeItem.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Unbinds aggregation {@link #getContent content} from model data.
 * @returns {sap.m.CustomTreeItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.CustomTreeItem.prototype.unbindContent = function() { return new sap.m.CustomTreeItem(); };


// ---- sap.m.DatePicker --------------------------------------------------------------------------

/**
 * Constructor for a new <code>DatePicker</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDisplayFormat displayFormat} : string</li>
 * <li>{@link #getValueFormat valueFormat} : string</li>
 * <li>{@link #getDateValue dateValue} : object</li>
 * <li>{@link #getDisplayFormatType displayFormatType} : string (default: )</li>
 * <li>{@link #getSecondaryCalendarType secondaryCalendarType} : sap.ui.core.CalendarType</li>
 * <li>{@link #getMinDate minDate} : object</li>
 * <li>{@link #getMaxDate maxDate} : object</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSpecialDates specialDates} : sap.ui.core.Element[]</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLegend legend} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 * 
 * @param {string} [sId] Id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Enables the users to select a localized date.
 * 
 * <h3>Overview</h3>
 * 
 * The <code>DatePicker</code> lets the users select a localized date using touch,
 * mouse, or keyboard input. It consists of two parts: the date input field and the
 * date picker.
 * 
 * <b>Note:</b> The {@link sap.ui.unified.Calendar} is used internally only if the
 * <code>DatePicker</code> is opened (not used for the initial rendering). If the
 * <code>sap.ui.unified</code> library is not loaded before the
 * <code>DatePicker</code> is opened, it will be loaded upon opening. This could
 * lead to a waiting time when the <code>DatePicker</code> is opened for the
 * first time. To prevent this, apps using the <code>DatePicker</code> should also
 * load the <code>sap.ui.unified</code> library.
 * 
 * <h3>Usage</h3>
 * 
 * The user can enter a date by:
 * <ul><li>Using the calendar that opens in a popup</li>
 * <li>Typing it in directly in the input field (not available for mobile devices)</li></ul>
 * 
 * On app level, there are two options to provide a date for the
 * <code>DatePicker</code> - as a string to the <code>value</code> property or as
 * a JavaScript Date object to the <code>dateValue</code> property (only one of
 * these properties should be used at a time):
 * 
 * <ul><li>Use the <code>value</code> property if you want to bind the
 * <code>DatePicker</code> to a model using the <code>sap.ui.model.type.Date</code></li>
 * <li>Use the <code>value</code> property if the date is provided as a string from
 * the backend or inside the app (for example, as ABAP type DATS field)</li>
 * <li>Use the <code>dateValue</code> property if the date is already provided as a
 * JavaScript Date object or you want to work with a JavaScript Date object</li></ul>
 * 
 * <h3>Formatting</h3>
 * 
 * All formatting and parsing of dates from and to strings is done using the
 * {@link sap.ui.core.format.DateFormat}. If a date is entered by typing it into
 * the input field, it must fit to the used date format and locale.
 * 
 * Supported format options are pattern-based on Unicode LDML Date Format notation.
 * See {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
 * 
 * For example, if the <code>valueFormat</code> is "yyyy-MM-dd",
 * the <code>displayFormat</code> is "MMM d, y", and the used locale is English, a
 * valid value string is "2015-07-30", which leads to an output of "Jul 30, 2015".
 * 
 * If no placeholder is set to the <code>DatePicker</code>, the used
 * <code>displayFormat</code> is displayed as a placeholder. If another placeholder
 * is needed, it must be set.
 * 
 * <b>Note:</b> If the string does NOT match the <code>displayFormat</code>
 * (from user input) or the <code>valueFormat</code> (on app level), the
 * {@link sap.ui.core.format.DateFormat} makes an attempt to parse it based on the
 * locale settings. For more information, see the respective documentation in the
 * API Reference.
 * 
 * <h3>Responsive behavior</h3>
 * 
 * The <code>DatePicker</code> is smaller in compact mode and provides a
 * touch-friendly size in cozy mode.
 * 
 * On mobile devices, one tap on the input field opens the <code>DatePicker</code>
 * in full screen. To close the window, the user can select a date (which triggers
 * the close event), or select Cancel.
 * 
 * @extends sap.m.InputBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.22.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.DatePicker = function(sId,mSettings) {};
/**
 * This event gets fired when the input operation has finished and the value has changed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new value of the <code>sap.m.DatePicker</code> as specified by <code>valueFormat</code>.
 * @param {boolean} oControlEvent.getParameters.valid Indicator for a valid date.
 * @public
 * 
 */
sap.m.DatePicker.prototype.change = function(oControlEvent) {  };

/**
 * Fired when navigating in <code>Calendar</code> popup.
 * @event
 * @since 1.46.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.unified.DateRange} oControlEvent.getParameters.dateRange Date range containing the start and end date displayed in the <code>Calendar</code> popup.
 * @public
 * 
 */
sap.m.DatePicker.prototype.navigate = function(oControlEvent) {  };

/**
 * Adds some <code>specialDate</code> to the aggregation <code>specialDates</code>.
 * 
 * @since 1.38.5
 * @param {sap.ui.unified.DateTypeRange} oSpecialDate the specialDate to add; if empty, nothing is added
 * @return {sap.m.DatePicker} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.DatePicker.prototype.addSpecialDate = function(oSpecialDate) { return new sap.m.DatePicker(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:navigate navigate} event of this <code>sap.m.DatePicker</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.DatePicker</code> itself.
 * 
 * Fired when navigating in <code>Calendar</code> popup.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.DatePicker</code> itself
 * 
 * @returns {sap.m.DatePicker} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.46.0
 * 
 */
sap.m.DatePicker.prototype.attachNavigate = function(oData,fnFunction,oListener) { return new sap.m.DatePicker(); };

/**
 * Destroys all the specialDates in the aggregation {@link #getSpecialDates specialDates}.
 * @returns {sap.m.DatePicker} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.5
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.destroySpecialDates = function() { return new sap.m.DatePicker(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:navigate navigate} event of this <code>sap.m.DatePicker</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.DatePicker} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.detachNavigate = function(fnFunction,oListener) { return new sap.m.DatePicker(); };

/**
 * Creates a new subclass of class sap.m.DatePicker with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.DatePicker.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The new value of the <code>sap.m.DatePicker</code>.</li>
 * <li>'valid' of type <code>boolean</code> Indicator for a valid date.</li>
 * </ul>
 * 
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.DatePicker} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.DatePicker.prototype.fireChange = function(mArguments) { return new sap.m.DatePicker(); };

/**
 * Fires event {@link #event:navigate navigate} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.unified.DateRange} [mParameters.dateRange] Date range containing the start and end date displayed in the <code>Calendar</code> popup.
 * 
 * @returns {sap.m.DatePicker} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.46.0
 * 
 */
sap.m.DatePicker.prototype.fireNavigate = function(mParameters) { return new sap.m.DatePicker(); };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.DatePicker.prototype.getAccessibilityInfo = function() {  };

/**
 * Gets current value of property {@link #getDateValue dateValue}.
 * 
 * The date as JavaScript Date object. This is independent from any formatter.
 * 
 * <b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.
 * 
 * @returns {object} Value of property <code>dateValue</code>
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.getDateValue = function() { return new Object(); };

/**
 * Gets current value of property {@link #getDisplayFormat displayFormat}.
 * 
 * The date is displayed in the input field using this format. By default, the medium format of the used locale is used.
 * 
 * Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
 * <b>Note:</b> If you use data binding on the <code>value</code> property with type <code>sap.ui.model.type.Date</code> this property will be ignored.
 * The format defined in the binding will be used.
 * 
 * @returns {string} Value of property <code>displayFormat</code>
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.getDisplayFormat = function() { return ""; };

/**
 * Gets current value of property {@link #getDisplayFormatType displayFormatType}.
 * 
 * Displays date in this given type in input field. Default value is taken from locale settings.
 * Accepted are values of <code>sap.ui.core.CalendarType</code> or an empty string. If no type is set, the default type of the
 * configuration is used.
 * <b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>displayFormatType</code>
 * @since 1.28.6
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.getDisplayFormatType = function() { return ""; };

/**
 * ID of the element which is the current target of the association {@link #getLegend legend}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.38.5
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.getLegend = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getMaxDate maxDate}.
 * 
 * Maximum date that can be shown and selected in the <code>DatePicker</code>. This must be a JavaScript date object.
 * 
 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
 * the <code>maxDate</code> and the <code>minDate</code> are switched before rendering.
 * 
 * @returns {object} Value of property <code>maxDate</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.getMaxDate = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.m.DatePicker.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.DatePicker.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMinDate minDate}.
 * 
 * Minimum date that can be shown and selected in the <code>DatePicker</code>. This must be a JavaScript date object.
 * 
 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
 * the <code>maxDate</code> and the <code>minDate</code> are switched before rendering.
 * 
 * @returns {object} Value of property <code>minDate</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.getMinDate = function() { return new Object(); };

/**
 * Gets current value of property {@link #getSecondaryCalendarType secondaryCalendarType}.
 * 
 * If set, the days in the calendar popup are also displayed in this calendar type
 * If not set, the dates are only displayed in the primary calendar type
 * 
 * @returns {sap.ui.core.CalendarType} Value of property <code>secondaryCalendarType</code>
 * @since 1.34.1
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.getSecondaryCalendarType = function() { return new sap.ui.core.CalendarType(); };

/**
 * Gets content of aggregation {@link #getSpecialDates specialDates}.
 * 
 * Date Range with type to visualize special days in the Calendar.
 * If one day is assigned to more than one Type, only the first one will be used.
 * 
 * To set a single date (instead of a range), set only the startDate property of the sap.ui.unified.DateRange class.
 * 
 * <b>Note:</b> Since 1.48 you could set a non-working day via the sap.ui.unified.CalendarDayType.NonWorking
 * enum type just as any other special date type using sap.ui.unified.DateRangeType.
 * 
 * @returns {sap.ui.core.Element[]}
 * @since 1.38.5
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.getSpecialDates = function() { return new Array(); };

/**
 * Getter for property <code>value</code>.
 * 
 * Returns a date as a string in the format defined in property <code>valueFormat</code>.
 * 
 * <b>Note:</b> The value is always expected and updated in Gregorian calendar format. (If data binding is used the format of the binding is used.)
 * 
 * If this property is used, the <code>dateValue</code> property should not be changed from the caller.
 * 
 * @returns {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.m.DatePicker.prototype.getValue = function() { return ""; };

/**
 * Gets current value of property {@link #getValueFormat valueFormat}.
 * 
 * The date string expected and returned in the <code>value</code> property uses this format. By default the short format of the used locale is used.
 * 
 * 
 * Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
 * 
 * For example, if the date string represents an ABAP DATS type, the format should be "yyyyMMdd".
 * 
 * <b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored.
 * The format defined in the binding will be used.
 * 
 * @returns {string} Value of property <code>valueFormat</code>
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.getValueFormat = function() { return ""; };

/**
 * Checks for the provided <code>sap.ui.core.Element</code> in the aggregation {@link #getSpecialDates specialDates}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Element}
 *           oSpecialDate The specialDate whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.38.5
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.indexOfSpecialDate = function(oSpecialDate) { return 0; };

/**
 * Inserts a <code>specialDate</code> to the aggregation <code>specialDates</code>.
 * 
 * @since 1.38.5
 * @param {sap.ui.unified.DateTypeRange} oSpecialDate the specialDate to insert; if empty, nothing is inserted
 * @param {int} iIndex the 0-based index the <code>specialDate</code> should be inserted at;
 *              for a negative value of <code>iIndex</code>, the <code>specialDate</code> is inserted at position 0;
 *              for a value greater than the current size of the aggregation, the <code>specialDate</code> is inserted at the last position
 * @return {sap.m.DatePicker} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.DatePicker.prototype.insertSpecialDate = function(oSpecialDate,iIndex) { return new sap.m.DatePicker(); };

/**
 * Removes all the controls from the aggregation {@link #getSpecialDates specialDates}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Element[]} An array of the removed elements (might be empty)
 * @since 1.38.5
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.removeAllSpecialDates = function() { return new Array(); };

/**
 * Removes a <code>specialDate</code> from the aggregation <code>specialDates</code>.
 * 
 * @since 1.38.5
 * @param {sap.ui.unified.DateTypeRange} oSpecialDate The <code>specialDate</code> to remove or its index or id
 * @return {sap.ui.unified.DateTypeRange} The removed <code>specialDate</code> or null
 * @public
 * 
 */
sap.m.DatePicker.prototype.removeSpecialDate = function(oSpecialDate) { return new sap.ui.unified.DateTypeRange(); };

/**
 * Sets a new value for property {@link #getDateValue dateValue}.
 * 
 * The date as JavaScript Date object. This is independent from any formatter.
 * 
 * <b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oDateValue New value for property <code>dateValue</code>
 * @returns {sap.m.DatePicker} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.setDateValue = function(oDateValue) { return new sap.m.DatePicker(); };

/**
 * Sets a new value for property {@link #getDisplayFormat displayFormat}.
 * 
 * The date is displayed in the input field using this format. By default, the medium format of the used locale is used.
 * 
 * Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
 * <b>Note:</b> If you use data binding on the <code>value</code> property with type <code>sap.ui.model.type.Date</code> this property will be ignored.
 * The format defined in the binding will be used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sDisplayFormat New value for property <code>displayFormat</code>
 * @returns {sap.m.DatePicker} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.setDisplayFormat = function(sDisplayFormat) { return new sap.m.DatePicker(); };

/**
 * Sets a new value for property {@link #getDisplayFormatType displayFormatType}.
 * 
 * Displays date in this given type in input field. Default value is taken from locale settings.
 * Accepted are values of <code>sap.ui.core.CalendarType</code> or an empty string. If no type is set, the default type of the
 * configuration is used.
 * <b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sDisplayFormatType New value for property <code>displayFormatType</code>
 * @returns {sap.m.DatePicker} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.6
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.setDisplayFormatType = function(sDisplayFormatType) { return new sap.m.DatePicker(); };

/**
 * Sets the associated legend.
 * 
 * @since 1.38.5
 * @param {sap.ui.core.ID | sap.ui.unified.CalendarLegend} oLegend ID of an element which becomes the new target of this <code>legend</code> association;
 *                                                         alternatively, an element instance may be given
 * @return {sap.m.DatePicker} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.DatePicker.prototype.setLegend = function(oLegend) { return new sap.m.DatePicker(); };

/**
 * Sets a new value for property {@link #getMaxDate maxDate}.
 * 
 * Maximum date that can be shown and selected in the <code>DatePicker</code>. This must be a JavaScript date object.
 * 
 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
 * the <code>maxDate</code> and the <code>minDate</code> are switched before rendering.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oMaxDate New value for property <code>maxDate</code>
 * @returns {sap.m.DatePicker} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.setMaxDate = function(oMaxDate) { return new sap.m.DatePicker(); };

/**
 * Sets a new value for property {@link #getMinDate minDate}.
 * 
 * Minimum date that can be shown and selected in the <code>DatePicker</code>. This must be a JavaScript date object.
 * 
 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
 * the <code>maxDate</code> and the <code>minDate</code> are switched before rendering.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oMinDate New value for property <code>minDate</code>
 * @returns {sap.m.DatePicker} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.setMinDate = function(oMinDate) { return new sap.m.DatePicker(); };

/**
 * Sets a new value for property {@link #getSecondaryCalendarType secondaryCalendarType}.
 * 
 * If set, the days in the calendar popup are also displayed in this calendar type
 * If not set, the dates are only displayed in the primary calendar type
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CalendarType} sSecondaryCalendarType New value for property <code>secondaryCalendarType</code>
 * @returns {sap.m.DatePicker} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34.1
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.setSecondaryCalendarType = function(sSecondaryCalendarType) { return new sap.m.DatePicker(); };

/**
 * Setter for property <code>value</code>.
 * 
 * Expects a date as a string in the format defined in property <code>valueFormat</code>.
 * 
 * <b>Note:</b> The value is always expected and updated in Gregorian calendar format. (If data binding is used the format of the binding is used.)
 * 
 * If this property is used, the <code>dateValue</code> property should not be changed from the caller.
 * 
 * If Data binding using a <code>sap.ui.model.type.Date</code> is used, please set the <code>formatOption</code> <code>stricktParsing</code> to <code>true</code>.
 * This prevents unwanted automatic corrections of wrong input.
 * 
 * @param {string} sValue The new value of the input.
 * @return {sap.m.DatePicker} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DatePicker.prototype.setValue = function(sValue) { return new sap.m.DatePicker(); };

/**
 * Sets a new value for property {@link #getValueFormat valueFormat}.
 * 
 * The date string expected and returned in the <code>value</code> property uses this format. By default the short format of the used locale is used.
 * 
 * 
 * Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
 * 
 * For example, if the date string represents an ABAP DATS type, the format should be "yyyyMMdd".
 * 
 * <b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored.
 * The format defined in the binding will be used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sValueFormat New value for property <code>valueFormat</code>
 * @returns {sap.m.DatePicker} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DatePicker.prototype.setValueFormat = function(sValueFormat) { return new sap.m.DatePicker(); };

/**
 * Defines the width of the DatePicker. Default value is 100%
 * 
 * @param {string} sWidth  new value for <code>width</code>
 * @returns {sap.m.DatePicker} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DatePicker.prototype.setWidth = function(sWidth) { return new sap.m.DatePicker(); };


// ---- sap.m.DateRangeSelection --------------------------------------------------------------------------

/**
 * Constructor for a new <code>DateRangeSelection</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDelimiter delimiter} : string (default: -)</li>
 * <li>{@link #getSecondDateValue secondDateValue} : object</li>
 * <li>{@link #getFrom from} : object</li>
 * <li>{@link #getTo to} : object</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.DatePicker#constructor sap.m.DatePicker}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A single-field input control that enables the users to enter a localized date range.
 * 
 * <h3>Overview</h3>
 * 
 * The <code>DateRangeSelection</code> enables the users to enter a localized
 * date range using touch, mouse, keyboard input, or by selecting a date range in
 * the calendar. They can also navigate directly from one month or year to another.
 * 
 * <b>Note:</b> The {@link sap.ui.unified.Calendar} is used internally only if the
 * <code>DateRangeSelection</code> is opened (not used for the initial rendering).
 * If the <code>sap.ui.unified</code> library is not loaded before the
 * <code>DateRangeSelection</code> is opened, it will be loaded upon opening.
 * This could lead to a waiting time when the <code>DateRangeSelection</code> is
 * opened for the first time. To prevent this, apps using the
 * <code>DateRangeSelection</code> should also load the <code>sap.ui.unified</code>
 * library.
 * 
 * <h3>Usage</h3>
 * 
 * <i>When to use?</i>
 * 
 * If you need a time range and know that your user is a power user who has to
 * input lots of data. If the keyboard is the primary device used for navigating
 * the app, use two input fields. This allows the user to quickly jump from field
 * to field. By selecting a date in one of the fields, the other field should
 * recognize the information and jump to the same selection.
 * 
 * <i>When not to use?</i>
 * 
 * If the user's primary goal is not to select ranges or if you just want to enter
 * a date and a time. For such cases, use the {@link sap.m.DatePicker} or
 * {@link sap.m.TimePicker}.
 * 
 * The user can enter a date by:
 * <ul><li>Using the calendar that opens in a popup</li>
 * <li>Typing it in directly in the input field (not available for mobile devices)</li></ul>
 * 
 * On app level, there are two options to provide a date for the
 * <code>DateRangeSelection</code> - date range as a string to the
 * <code>value</code> property or JavaScript Date objects to the
 * <code>dateValue</code> and <code>secondDateValue</code> properties (only one of
 * these options should be used at a time):
 * 
 * <ul><li>Use the <code>value</code> property if the date range is already provided as
 * a formatted string</li>
 * <li>Use the <code>dateValue</code> and <code>secondDateValue</code> properties
 * if the date range is already provided as JavaScript Date objects or you want to
 * work with JavaScript Date objects</li></ul>
 * 
 * <h3>Formatting</h3>
 * 
 * All formatting and parsing of dates from and to strings is done using the
 * {@link sap.ui.core.format.DateFormat}. If a date is entered by typing it into
 * the input field, it must fit to the used date format and locale.
 * 
 * Supported format options are pattern-based on Unicode LDML Date Format notation.
 * See {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
 * 
 * For example, if the <code>displayFormat</code> is "MMM d, y", delimiter is "-",
 * and the used locale is English, a valid value string is "Jul 29, 2015 - Jul 31,
 * 2015" and it is displayed in the same way in the input field.
 * 
 * If no placeholder is set to the <code>DateRangeSelection</code>, the used
 * <code>displayFormat</code> is displayed as a placeholder. If another placeholder
 * is needed, it must be set.
 * 
 * <b>Note:</b> If the string does NOT match the <code>displayFormat</code>
 * (from user input) or the <code>valueFormat</code> (on app level), the
 * {@link sap.ui.core.format.DateFormat} makes an attempt to parse it based on the
 * locale settings. For more information, see the respective documentation in the
 * API Reference.
 * 
 * <h3>Responsive behavior</h3>
 * 
 * The <code>DateRangeSelection</code> is fully responsive. It is smaller in
 * compact mode and provides a touch-friendly size in cozy mode.
 * 
 * @extends sap.m.DatePicker
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.22.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.DateRangeSelection = function(sId,mSettings) {};
/**
 * On change of date range event.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new value of the <code>sap.m.DateRangeSelection</code>.
 * @param {boolean} oControlEvent.getParameters.valid Indicator for a valid date.
 * @param {object} oControlEvent.getParameters.from Current start date after change.
 * @param {object} oControlEvent.getParameters.to Current end date after change.
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.change = function(oControlEvent) {  };

/**
 * Creates a new subclass of class sap.m.DateRangeSelection with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.DatePicker.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.DateRangeSelection.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The new value of the <code>sap.m.DateRangeSelection</code>.</li>
 * <li>'valid' of type <code>boolean</code> Indicator for a valid date.</li>
 * <li>'from' of type <code>object</code> Current start date after change.</li>
 * <li>'to' of type <code>object</code> Current end date after change.</li>
 * </ul>
 * 
 * @param {Map} [mArguments] The arguments to pass along with the event.
 * @return {sap.m.DateRangeSelection} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.DateRangeSelection.prototype.fireChange = function(mArguments) { return new sap.m.DateRangeSelection(); };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.DateRangeSelection.prototype.getAccessibilityInfo = function() {  };

/**
 * Getter for property <code>dateValue</code>.
 * 
 * The start date of the range as JavaScript Date object. This is independent from any formatter.
 * 
 * <b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.
 * 
 * @returns {object} the value of property <code>dateValue</code>
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.getDateValue = function() { return new Object(); };

/**
 * Gets current value of property {@link #getDelimiter delimiter}.
 * 
 * Delimiter between start and end date. Default value is "-".
 * If no delimiter is given, the one defined for the used locale is used.
 * 
 * Default value is <code>-</code>.
 * @returns {string} Value of property <code>delimiter</code>
 * 
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.getDelimiter = function() { return ""; };

/**
 * Gets current value of property {@link #getFrom from}.
 * 
 * Start date of the range.
 * 
 * @returns {object} Value of property <code>from</code>
 * 
 * @deprecated Since version 1.22.0
 * Use <code>dateValue</code> instead.
 * 
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.getFrom = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.m.DateRangeSelection.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.DateRangeSelection.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSecondDateValue secondDateValue}.
 * 
 * The end date of the range as JavaScript Date object. This is independent from any formatter.
 * 
 * <b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.
 * 
 * @returns {object} Value of property <code>secondDateValue</code>
 * 
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.getSecondDateValue = function() { return new Object(); };

/**
 * Gets current value of property {@link #getTo to}.
 * 
 * End date of the range.
 * 
 * @returns {object} Value of property <code>to</code>
 * 
 * @deprecated Since version 1.22.0
 * Use <code>secondDateValue</code> instead.
 * 
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.getTo = function() { return new Object(); };

/**
 * Getter for property <code>value</code>.
 * 
 * Returns a date as a string in the format defined in property <code>displayFormat</code>.
 * 
 * <b>Note:</b> As the value string always used the <code>displayFormat</code>, it is both locale-dependent and calendar-type-dependent.
 * 
 * If this property is used, the <code>dateValue</code> property should not be changed from the caller.
 * 
 * @returns {string} the value of property <code>value</code>
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.getValue = function() { return ""; };

/**
 * Getter for property <code>valueFormat</code>.
 * 
 * <b>Note:</b> Property <code>valueFormat</code> is not supported in the <code>sap.m.DateRangeSelection</code> control.
 * 
 * @return {string} the value of property valueFormat
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.getValueFormat = function() { return ""; };

/**
 * This file defines behavior for the control
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.init = function() {  };

/**
 * Setter for property <code>dateValue</code>.
 * 
 * The start date of the range as JavaScript Date object. This is independent from any formatter.
 * 
 * <b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.
 * 
 * @param {object} oDateValue New value for property <code>dateValue</code>
 * @return {sap.m.DateRangeSelection} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.setDateValue = function(oDateValue) { return new sap.m.DateRangeSelection(); };

/**
 * Sets a new value for property {@link #getDelimiter delimiter}.
 * 
 * Delimiter between start and end date. Default value is "-".
 * If no delimiter is given, the one defined for the used locale is used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>-</code>.
 * @param {string} sDelimiter New value for property <code>delimiter</code>
 * @returns {sap.m.DateRangeSelection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.setDelimiter = function(sDelimiter) { return new sap.m.DateRangeSelection(); };

/**
 * Sets a new value for property {@link #getFrom from}.
 * 
 * Start date of the range.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oFrom New value for property <code>from</code>
 * @returns {sap.m.DateRangeSelection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.22.0
 * Use <code>dateValue</code> instead.
 * 
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.setFrom = function(oFrom) { return new sap.m.DateRangeSelection(); };

/**
 * Sets a new value for property {@link #getSecondDateValue secondDateValue}.
 * 
 * The end date of the range as JavaScript Date object. This is independent from any formatter.
 * 
 * <b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oSecondDateValue New value for property <code>secondDateValue</code>
 * @returns {sap.m.DateRangeSelection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.setSecondDateValue = function(oSecondDateValue) { return new sap.m.DateRangeSelection(); };

/**
 * Sets a new value for property {@link #getTo to}.
 * 
 * End date of the range.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oTo New value for property <code>to</code>
 * @returns {sap.m.DateRangeSelection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.22.0
 * Use <code>secondDateValue</code> instead.
 * 
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.setTo = function(oTo) { return new sap.m.DateRangeSelection(); };

/**
 * Setter for property <code>value</code>.
 * 
 * Expects a date as a string in the format defined in property <code>displayFormat</code>.
 * 
 * <b>Note:</b> As the value string always used the <code>displayFormat</code>, it is both locale-dependent and calendar-type-dependent.
 * 
 * If this property is used, the <code>dateValue</code> property should not be changed from the caller.
 * 
 * @param {string} sValue The new value of the input.
 * @return {sap.m.DateRangeSelection} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.setValue = function(sValue) { return new sap.m.DateRangeSelection(); };

/**
 * Setter for property <code>valueFormat</code>.
 * 
 * <b>Note:</b> Property <code>valueFormat</code> is not supported in the <code>sap.m.DateRangeSelection</code> control.
 * 
 * @param {string} sValueFormat New value for property valueFormat
 * @return {sap.m.DateRangeSelection} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.m.DateRangeSelection.prototype.setValueFormat = function(sValueFormat) { return new sap.m.DateRangeSelection(); };


// ---- sap.m.DateTimeInput --------------------------------------------------------------------------

/**
 * Constructor for a new DateTimeInput.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getValueStateText valueStateText} : string</li>
 * <li>{@link #getShowValueStateMessage showValueStateMessage} : boolean (default: true)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: Initial)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getType type} : sap.m.DateTimeInputType (default: Date)</li>
 * <li>{@link #getDisplayFormat displayFormat} : string</li>
 * <li>{@link #getValueFormat valueFormat} : string</li>
 * <li>{@link #getDateValue dateValue} : object</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Allows end users to interact with date and/or time and select from a date and/or time pad.
 * 
 * <b>Note:</b> This control should not be used any longer, instead please use the dedicated <code>sap.m.DatePicker</code>, <code>sap.m.TimePicker</code> or <code>sap.m.DateTimePicker</code> control.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.9.1
 * @deprecated Since version 1.32.8. Instead, use the dedicated <code>sap.m.DatePicker</code>, <code>sap.m.TimePicker</code> or <code>sap.m.DateTimePicker</code> controls.
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.DateTimeInput = function(sId,mSettings) {};
/**
 * This event gets fired when the selection has finished and the value has changed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The string value of the control in given valueFormat (or locale format).
 * @param {object} oControlEvent.getParameters.dateValue The value of control as JavaScript Date Object or null if value is empty.
 * @param {boolean} oControlEvent.getParameters.valid if set, the entered value is a valid date.
 * If not set the entered value cannot be converted to a date.
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.change = function(oControlEvent) {  };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.DateTimeInput(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.m.DateTimeInput</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.DateTimeInput</code> itself.
 * 
 * This event gets fired when the selection has finished and the value has changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.DateTimeInput</code> itself
 * 
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.DateTimeInput(); };

/**
 * Binds property {@link #getValue value} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.bindValue = function(oBindingInfo) { return new sap.m.DateTimeInput(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.m.DateTimeInput</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.DateTimeInput(); };

/**
 * Creates a new subclass of class sap.m.DateTimeInput with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.DateTimeInput.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:change change} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.value] The string value of the control in given valueFormat (or locale format).
 * @param {object} [mParameters.dateValue] The value of control as JavaScript Date Object or null if value is empty.
 * @param {boolean} [mParameters.valid] if set, the entered value is a valid date.
 * If not set the entered value cannot be converted to a date.
 * 
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.DateTimeInput.prototype.fireChange = function(mParameters) { return new sap.m.DateTimeInput(); };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.DateTimeInput.prototype.getAccessibilityInfo = function() {  };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getDateValue dateValue}.
 * 
 * This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.
 * 
 * @returns {object} Value of property <code>dateValue</code>
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getDateValue = function() { return new Object(); };

/**
 * Gets current value of property {@link #getDisplayFormat displayFormat}.
 * 
 * Displays date value in this given format in text field. Default value is taken from locale settings.
 * If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property or the latter wins.
 * If the user's browser supports native picker then this property is overwritten by browser with locale settings.
 * 
 * @returns {string} Value of property <code>displayFormat</code>
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getDisplayFormat = function() { return ""; };

/**
 * Gets current value of property {@link #getEditable editable}.
 * 
 * Defines whether the control can be modified by the user or not.
 * <b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text from it.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>editable</code>
 * @since 1.12.0
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getEditable = function() { return false; };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Indicates whether the user can interact with the control or not.
 * <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getEnabled = function() { return false; };

/**
 * Returns a metadata object for class sap.m.DateTimeInput.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.DateTimeInput.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * Defines the name of the control for the purposes of form submission.
 * 
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getName = function() { return ""; };

/**
 * Gets current value of property {@link #getPlaceholder placeholder}.
 * 
 * Defines a short hint intended to aid the user with data entry when the control has no value.
 * 
 * @returns {string} Value of property <code>placeholder</code>
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getPlaceholder = function() { return ""; };

/**
 * Gets current value of property {@link #getShowValueStateMessage showValueStateMessage}.
 * 
 * Indicates whether the value state message should be shown or not.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showValueStateMessage</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getShowValueStateMessage = function() { return false; };

/**
 * Gets current value of property {@link #getTextAlign textAlign}.
 * 
 * Defines the horizontal alignment of the text that is shown inside the input field.
 * 
 * Default value is <code>Initial</code>.
 * @returns {sap.ui.core.TextAlign} Value of property <code>textAlign</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Defines the text directionality of the input field, e.g. <code>RTL</code>, <code>LTR</code>
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * Type of DateTimeInput (e.g. Date, Time, DateTime)
 * 
 * Default value is <code>Date</code>.
 * @returns {sap.m.DateTimeInputType} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getType = function() { return new sap.m.DateTimeInputType(); };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * Defines the value of the control.
 * 
 * The new value must be in the format set by <code>valueFormat</code>.
 * 
 * The "Now" literal can also be assigned as a parameter to show the current date and/or time.
 * 
 * @returns {string} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getValue = function() { return ""; };

/**
 * Gets current value of property {@link #getValueFormat valueFormat}.
 * 
 * Given value property should match with valueFormat to parse date. Default value is taken from locale settings.
 * You can only set and get value in this format.
 * If you use data-binding on value property with type sap.ui.model.type.Date you can ignore this property or the latter wins.
 * 
 * @returns {string} Value of property <code>valueFormat</code>
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getValueFormat = function() { return ""; };

/**
 * Gets current value of property {@link #getValueState valueState}.
 * 
 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>valueState</code>
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getValueState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getValueStateText valueStateText}.
 * 
 * Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.
 * 
 * @returns {string} Value of property <code>valueStateText</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getValueStateText = function() { return ""; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the control.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getDateValue dateValue}.
 * 
 * This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oDateValue New value for property <code>dateValue</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setDateValue = function(oDateValue) { return new sap.m.DateTimeInput(); };

/**
 * Sets a new value for property {@link #getDisplayFormat displayFormat}.
 * 
 * Displays date value in this given format in text field. Default value is taken from locale settings.
 * If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property or the latter wins.
 * If the user's browser supports native picker then this property is overwritten by browser with locale settings.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sDisplayFormat New value for property <code>displayFormat</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setDisplayFormat = function(sDisplayFormat) { return new sap.m.DateTimeInput(); };

/**
 * Sets a new value for property {@link #getEditable editable}.
 * 
 * Defines whether the control can be modified by the user or not.
 * <b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text from it.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEditable New value for property <code>editable</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * @since 1.12.0
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setEditable = function(bEditable) { return new sap.m.DateTimeInput(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Indicates whether the user can interact with the control or not.
 * <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setEnabled = function(bEnabled) { return new sap.m.DateTimeInput(); };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * Defines the name of the control for the purposes of form submission.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setName = function(sName) { return new sap.m.DateTimeInput(); };

/**
 * Sets a new value for property {@link #getPlaceholder placeholder}.
 * 
 * Defines a short hint intended to aid the user with data entry when the control has no value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sPlaceholder New value for property <code>placeholder</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setPlaceholder = function(sPlaceholder) { return new sap.m.DateTimeInput(); };

/**
 * Sets a new value for property {@link #getShowValueStateMessage showValueStateMessage}.
 * 
 * Indicates whether the value state message should be shown or not.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowValueStateMessage New value for property <code>showValueStateMessage</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setShowValueStateMessage = function(bShowValueStateMessage) { return new sap.m.DateTimeInput(); };

/**
 * Sets a new value for property {@link #getTextAlign textAlign}.
 * 
 * Defines the horizontal alignment of the text that is shown inside the input field.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Initial</code>.
 * @param {sap.ui.core.TextAlign} sTextAlign New value for property <code>textAlign</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setTextAlign = function(sTextAlign) { return new sap.m.DateTimeInput(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Defines the text directionality of the input field, e.g. <code>RTL</code>, <code>LTR</code>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setTextDirection = function(sTextDirection) { return new sap.m.DateTimeInput(); };

/**
 * Sets a new value for property {@link #getType type}.
 * 
 * Type of DateTimeInput (e.g. Date, Time, DateTime)
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Date</code>.
 * @param {sap.m.DateTimeInputType} sType New value for property <code>type</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setType = function(sType) { return new sap.m.DateTimeInput(); };

/**
 * Sets a new value for property {@link #getValue value}.
 * 
 * Defines the value of the control.
 * 
 * The new value must be in the format set by <code>valueFormat</code>.
 * 
 * The "Now" literal can also be assigned as a parameter to show the current date and/or time.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sValue New value for property <code>value</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setValue = function(sValue) { return new sap.m.DateTimeInput(); };

/**
 * Sets a new value for property {@link #getValueFormat valueFormat}.
 * 
 * Given value property should match with valueFormat to parse date. Default value is taken from locale settings.
 * You can only set and get value in this format.
 * If you use data-binding on value property with type sap.ui.model.type.Date you can ignore this property or the latter wins.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sValueFormat New value for property <code>valueFormat</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setValueFormat = function(sValueFormat) { return new sap.m.DateTimeInput(); };

/**
 * Sets a new value for property {@link #getValueState valueState}.
 * 
 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.core.ValueState} sValueState New value for property <code>valueState</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setValueState = function(sValueState) { return new sap.m.DateTimeInput(); };

/**
 * Sets a new value for property {@link #getValueStateText valueStateText}.
 * 
 * Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sValueStateText New value for property <code>valueStateText</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setValueStateText = function(sValueStateText) { return new sap.m.DateTimeInput(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width of the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.setWidth = function(sWidth) { return new sap.m.DateTimeInput(); };

/**
 * Unbinds property {@link #getValue value} from model data.
 * @returns {sap.m.DateTimeInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DateTimeInput.prototype.unbindValue = function() { return new sap.m.DateTimeInput(); };


// ---- sap.m.DateTimeInputType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.DateTimeInputType.toString = function() { return ""; };

// ---- sap.m.DateTimePicker --------------------------------------------------------------------------

/**
 * Constructor for a new <code>DateTimePicker</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.DatePicker#constructor sap.m.DatePicker}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Enables the users to select date and time values in a combined input.
 * 
 * <h3>Overview</h3>
 * 
 * The <code>DateTimePicker</code> control consists of two parts: the input field and the
 * date/time picker.
 * 
 * <b>Note:</b> The {@link sap.ui.unified.Calendar} is used internally only if the
 * <code>DateTimePicker</code> is opened (not used for the initial rendering). If
 * the <code>sap.ui.unified</code> library is not loaded before the
 * <code>DateTimePicker</code> is opened, it will be loaded upon opening. This
 * could lead to a waiting time when the <code>DateTimePicker</code> is opened for
 * the first time. To prevent this, apps using the <code>DateTimePicker</code>
 * should also load the <code>sap.ui.unified</code> library.
 * 
 * <h3>Usage</h3>
 * 
 * Use this control if you need a combined date and time input control.
 * 
 * Don't use it if you want to use either a date or a time value. In this case,
 * use the {@link sap.m.DatePicker} or the {@link sap.m.TimePicker} controls
 * instead.
 * 
 * The user can enter a date by:
 * <ul> <li>Using the calendar or a time selector that opens in a popup</li>
 * <li>Typing it in directly in the input field</li></ul>
 * 
 * On app level, there are two options to provide a date for the
 * <code>DateTimePicker</code> - as a string to the <code>value</code> property
 * or as a JavaScript Date object to the <code>dateValue</code> property (only one
 * of these properties should be used at a time):
 * 
 * <ul><li>Use the <code>value</code> property if you want to bind the
 * <code>DateTimePicker</code> to a model using the
 * <code>sap.ui.model.type.DateTime</code></li>
 * <li>Use the <code>value</code> property if the date is provided as a string from
 * the backend or inside the app (for example, as ABAP type DATS field)</li>
 * <li>Use the <code>dateValue</code> property if the date is already provided as a
 * JavaScript Date object or you want to work with a JavaScript Date object</li></ul>
 * 
 * <h3>Formatting</h3>
 * 
 * All formatting and parsing of dates from and to strings is done using the
 * {@link sap.ui.core.format.DateFormat}. If a date is entered by typing it into
 * the input field, it must fit to the used date format and locale.
 * 
 * Supported format options are pattern-based on Unicode LDML Date Format notation.
 * See {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
 * 
 * For example, if the <code>valueFormat</code> is "yyyy-MM-dd-HH-mm-ss", the
 * <code>displayFormat</code> is "MMM d, y, HH:mm:ss", and the used locale is
 * English, a valid value string is "2015-07-30-10-30-15", which leads to an output
 * of "Jul 30, 2015, 10:30:15".
 * 
 * If no placeholder is set to the <code>DateTimePicker</code>, the used
 * <code>displayFormat</code> is displayed as a placeholder. If another placeholder
 * is needed, it must be set.
 * 
 * <b>Note:</b> If the string does NOT match the <code>displayFormat</code>
 * (from user input) or the <code>valueFormat</code> (on app level), the
 * {@link sap.ui.core.format.DateFormat} makes an attempt to parse it based on the
 * locale settings. For more information, see the respective documentation in the
 * API Reference.
 * 
 * <h3>Responsive behavior</h3>
 * 
 * The <code>DateTimePicker</code> is responsive and fully adapts to all devices.
 * For larger screens, such as tablet or desktop, it opens as a popover. For
 * mobile devices, it opens in full screen.
 * 
 * @extends sap.m.DatePicker
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.38.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.DateTimePicker = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.DateTimePicker with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.DatePicker.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.DateTimePicker.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.DateTimePicker.prototype.getAccessibilityInfo = function() {  };

/**
 * Returns a metadata object for class sap.m.DateTimePicker.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.DateTimePicker.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.DeviationIndicator --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.DeviationIndicator.toString = function() { return ""; };

// ---- sap.m.Dialog --------------------------------------------------------------------------

/**
 * Constructor for a new Dialog.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getType type} : sap.m.DialogType (default: Standard)</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getStretchOnPhone stretchOnPhone} : boolean (default: false)</li>
 * <li>{@link #getStretch stretch} : boolean (default: false)</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHorizontalScrolling horizontalScrolling} : boolean (default: true)</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : boolean (default: true)</li>
 * <li>{@link #getResizable resizable} : boolean (default: false)</li>
 * <li>{@link #getDraggable draggable} : boolean (default: false)</li>
 * <li>{@link #getEscapeHandler escapeHandler} : any</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[] (default)</li>
 * <li>{@link #getSubHeader subHeader} : sap.m.IBar</li>
 * <li>{@link #getCustomHeader customHeader} : sap.m.IBar</li>
 * <li>{@link #getBeginButton beginButton} : sap.m.Button</li>
 * <li>{@link #getEndButton endButton} : sap.m.Button</li>
 * <li>{@link #getButtons buttons} : sap.m.Button[]</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLeftButton leftButton} : (sap.ui.core.ID | sap.m.Button)</li>
 * <li>{@link #getRightButton rightButton} : (sap.ui.core.ID | sap.m.Button)</li>
 * <li>{@link #getInitialFocus initialFocus} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A popup that interrupts the current processing and prompts the user for an action or an input, in a modal mode.
 * <h3>Overview</h3>
 * The Dialog control is used to prompt the user for an action or a confirmation. It interrupts the current app processing as it is the only focused UI element and the main screen is dimmed/blocked.
 * The content of the dialog is fully customizable.
 * <h3>Structure</h3>
 * A dialog consists of a title, optional subtitle, content area and a footer for action buttons.
 * The dialog is usually displayed at the center of the screen. Its size and position can be changed by the user.
 * To enable this, you need to set the properties <code>resizable</code> and <code>draggable</code> accordingly.
 * 
 * There are other specialized types of dialogs:
 * <ul>
 * <li>{@link sap.m.P13nDialog Personalization dialog} - used for personalizing sorting, filtering and grouping in tables</li>
 * <li>{@link sap.m.SelectDialog Select dialog} - used to select one or more items from a comprehensive list</li>
 * <li>{@link sap.m.TableSelectDialog Table select dialog} - used to  make a selection from a comprehensive table containing multiple attributes or values</li>
 * <li>{@link sap.ui.comp.valuehelpdialog.ValueHelpDialog Value help dialog} - used to help the user find and select single and multiple values</li>
 * <li>{@link sap.m.ViewSettingsDialog View settings dialog}  - used to sort, filter, or group data within a (master) list or a table</li>
 * <li>{@link sap.m.BusyDialog Busy dialog} - used to block the screen and inform the user about an ongoing operation</li>
 * </ul>
 * <h3>Usage</h3>
 * <h4>When to use:</h4>
 * <ul>
 * <li>You want to display a system message.</li>
 * <li>You want to interrupt the user’s action.</li>
 * <li>You want to show a message with a short and a long description.</li>
 * </ul>
 * <h4>When not to use:</h4>
 * <ul>
 * <li>You just want to confirm a successful action.</li>
 * </ul>
 * <h3>Responsive Behavior</h3>
 * <ul>
 * <li>If the <code>stretch</code> property is set to true, the dialog displays on full screen.</li>
 * <li>If the <code>contentWidth</code> and/or <code>contentHeight</code> properties are set, the dialog will try to fill those sizes.</li>
 * <li>If there is no specific sizing, the dialog will try to adjust its size to its content.</li>
 * </ul>
 * <h4>Smartphones</h4>
 * If the dialog has one or two actions they will cover the entire footer. If there are more actions, they will overflow.
 * <h4>Tablets</h4>
 * The action buttons in the toolbar are <b>right-aligned</b>. Use <b>cozy</b> mode on tablet devices.
 * <h4>Desktop</h4>
 * The action buttons in the toolbar are <b>right-aligned</b>. Use <b>compact</b> mode on desktop.
 * @extends sap.ui.core.Control
 * 
 * @implements sap.ui.core.PopupInterface
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Dialog = function(sId,mSettings) {};
/**
 * This event will be fired after the dialog is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Button} oControlEvent.getParameters.origin This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
 * @public
 * 
 */
sap.m.Dialog.prototype.afterClose = function(oControlEvent) {  };

/**
 * This event will be fired after the dialog is opened.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Dialog.prototype.afterOpen = function(oControlEvent) {  };

/**
 * This event will be fired before the dialog is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Button} oControlEvent.getParameters.origin This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
 * @public
 * 
 */
sap.m.Dialog.prototype.beforeClose = function(oControlEvent) {  };

/**
 * This event will be fired before the dialog is opened.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Dialog.prototype.beforeOpen = function(oControlEvent) {  };

/**
 * Returns the custom header instance when the customHeader aggregation is set. Otherwise it returns the internal managed
 * header instance. This method can be called within composite controls which use sap.m.Dialog inside.
 * 
 * @protected
 * 
 */
sap.m.Dialog.prototype._getAnyHeader = function() {  };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.Dialog(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.Dialog(); };

/**
 * Adds some button to the aggregation {@link #getButtons buttons}.
 * @param {sap.m.Button}
 *            oButton the button to add; if empty, nothing is inserted
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.addButton = function(oButton) { return new sap.m.Dialog(); };

/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.addContent = function(oContent) { return new sap.m.Dialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterClose afterClose} event of this <code>sap.m.Dialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Dialog</code> itself.
 * 
 * This event will be fired after the dialog is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code> itself
 * 
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.attachAfterClose = function(oData,fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterOpen afterOpen} event of this <code>sap.m.Dialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Dialog</code> itself.
 * 
 * This event will be fired after the dialog is opened.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code> itself
 * 
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeClose beforeClose} event of this <code>sap.m.Dialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Dialog</code> itself.
 * 
 * This event will be fired before the dialog is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code> itself
 * 
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.Dialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Dialog</code> itself.
 * 
 * This event will be fired before the dialog is opened.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code> itself
 * 
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Dialog.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Close the dialog.
 * 
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Dialog.prototype.close = function() {  };

/**
 * Destroys the beginButton in the aggregation {@link #getBeginButton beginButton}.
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.destroyBeginButton = function() { return new sap.m.Dialog(); };

/**
 * Destroys all the buttons in the aggregation {@link #getButtons buttons}.
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.destroyButtons = function() { return new sap.m.Dialog(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.destroyContent = function() { return new sap.m.Dialog(); };

/**
 * Destroys the customHeader in the aggregation {@link #getCustomHeader customHeader}.
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.destroyCustomHeader = function() { return new sap.m.Dialog(); };

/**
 * Destroys the endButton in the aggregation {@link #getEndButton endButton}.
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.destroyEndButton = function() { return new sap.m.Dialog(); };

/**
 * Destroys the subHeader in the aggregation {@link #getSubHeader subHeader}.
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.12.2
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.destroySubHeader = function() { return new sap.m.Dialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterClose afterClose} event of this <code>sap.m.Dialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.detachAfterClose = function(fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterOpen afterOpen} event of this <code>sap.m.Dialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeClose beforeClose} event of this <code>sap.m.Dialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.Dialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.Dialog(); };

/**
 * Creates a new subclass of class sap.m.Dialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Dialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterClose afterClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.Button} [mParameters.origin] This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
 * 
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Dialog.prototype.fireAfterClose = function(mParameters) { return new sap.m.Dialog(); };

/**
 * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Dialog.prototype.fireAfterOpen = function(mParameters) { return new sap.m.Dialog(); };

/**
 * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.Button} [mParameters.origin] This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
 * 
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Dialog.prototype.fireBeforeClose = function(mParameters) { return new sap.m.Dialog(); };

/**
 * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Dialog.prototype.fireBeforeOpen = function(mParameters) { return new sap.m.Dialog(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getBeginButton beginButton}.
 * 
 * The button which is rendered to the left side (right side in RTL mode) of the endButton in the footer area inside the dialog. From UI5 version 1.21.1, there's a new aggregation "buttons" created with which more than 2 buttons can be added to the footer area of dialog. If the new "buttons" aggregation is set, any change made to this aggregation has no effect anymore. When runs on the phone, this button (and the endButton together when set) is (are) rendered at the center of the footer area. When runs on the other platforms, this button (and the endButton together when set) is (are) rendered at the right side (left side in RTL mode) of the footer area.
 * 
 * @returns {sap.m.Button}
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getBeginButton = function() { return new sap.m.Button(); };

/**
 * Gets content of aggregation {@link #getButtons buttons}.
 * 
 * Buttons can be added to the footer area of dialog through this aggregation. When this aggregation is set, any change to beginButton and endButton has no effect anymore. Buttons which are inside this aggregation are aligned at the right side (left side in RTL mode) of the footer instead of in the middle of the footer.
 * 
 * @returns {sap.m.Button[]}
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getButtons = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * The content inside the dialog.<br/><b>Note:</b> When the content of the <code>Dialog</code> is comprised of controls that use <code>position: absolute</code>, such as <code>SplitContainer</code>, the dialog has to have either <code>stretch: true</code> or <code>contentHeight</code> set.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getContentHeight contentHeight}.
 * 
 * Preferred height of content in Dialog. If the preferred height is bigger than the available space on screen, it will be overwritten by the maximum available height on screen in order to make sure that dialog isn't cut off.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>contentHeight</code>
 * @since 1.12.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getContentWidth contentWidth}.
 * 
 * Preferred width of content in Dialog. This property affects the width of dialog on phone in landscape mode, tablet or desktop, because the dialog has a fixed width on phone in portrait mode. If the preferred width is less than the minimum width of dilaog or more than the available width of the screen, it will be overwritten by the min or max value. The current mininum value of dialog width on tablet is 400px.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>contentWidth</code>
 * @since 1.12.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets content of aggregation {@link #getCustomHeader customHeader}.
 * 
 * CustomHeader is only supported in some themes. When it's set, the icon, title and showHeader are properties ignored. Only the customHeader is shown as the header of the dialog.
 * 
 * @returns {sap.m.IBar}
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getCustomHeader = function() { return new sap.m.IBar(); };

/**
 * Gets current value of property {@link #getDraggable draggable}.
 * 
 * Indicates whether the dialog is draggable. If this property is set to true, the dialog will be draggable by it's header. This property has a default value false. The Dialog can be draggable only in desktop mode.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>draggable</code>
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getDraggable = function() { return false; };

/**
 * Gets content of aggregation {@link #getEndButton endButton}.
 * 
 * The button which is rendered to the right side (left side in RTL mode) of the beginButton in the footer area inside the dialog. From UI5 version 1.21.1, there's a new aggregation "buttons" created with which more than 2 buttons can be added to the footer area of dialog. If the new "buttons" aggregation is set, any change made to this aggregation has no effect anymore. When runs on the phone, this button (and the beginButton together when set) is (are) rendered at the center of the footer area. When runs on the other platforms, this button (and the beginButton together when set) is (are) rendered at the right side (left side in RTL mode) of the footer area.
 * 
 * @returns {sap.m.Button}
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getEndButton = function() { return new sap.m.Button(); };

/**
 * Gets current value of property {@link #getEscapeHandler escapeHandler}.
 * 
 * This property expects a function with one parameter of type <code>Promise</code>. In the function you should call either <code>resolve()</code> or <code>reject()</code> on the <code>Promise</code> object.<br/>
 * The function allows you to define custom behaviour which will be executed when the ESCAPE key is pressed. By default when the ESCAPE key is pressed the Dialog is immediately closed.
 * 
 * @returns {any} Value of property <code>escapeHandler</code>
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getEscapeHandler = function() { return null; };

/**
 * Gets current value of property {@link #getHorizontalScrolling horizontalScrolling}.
 * 
 * Indicates if user can scroll horizontally inside dialog when the content is bigger than the content area.
 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, sap.m.ScrollContainer or sap.m.SplitContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>horizontalScrolling</code>
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getHorizontalScrolling = function() { return false; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Icon displayed in the dialog's header. This icon is invisible on the iOS platform and it's density aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * ID of the element which is the current target of the association {@link #getInitialFocus initialFocus}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getInitialFocus = function() { return new sap.ui.core.ID(); };

/**
 * ID of the element which is the current target of the association {@link #getLeftButton leftButton}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @deprecated Since version 1.15.1.
 * 
 * LeftButton has been deprecated since 1.15.1. Please use the beginButton instead which is more RTL friendly.
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getLeftButton = function() { return new sap.ui.core.ID(); };

/**
 * Returns a metadata object for class sap.m.Dialog.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Dialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getResizable resizable}.
 * 
 * Indicates whether the dialog is resizable. the dialog is resizable. If this property is set to true, the dialog will have a resize handler in it's bottom right corner. This property has a default value false. The Dialog can be resizable only in desktop mode.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>resizable</code>
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getResizable = function() { return false; };

/**
 * ID of the element which is the current target of the association {@link #getRightButton rightButton}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @deprecated Since version 1.15.1.
 * 
 * RightButton has been deprecated since 1.15.1. Please use the endButton instead which is more RTL friendly.
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getRightButton = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getShowHeader showHeader}.
 * 
 * Determines whether the header is shown inside the dialog. If this property is set to true, the text and icon property are ignored. This property has a default value true.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showHeader</code>
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getShowHeader = function() { return false; };

/**
 * Gets current value of property {@link #getState state}.
 * 
 * The state affects the icon and the title color. If other than "None" is set, a predefined icon will be added to the dialog. Setting icon property will overwrite the predefined icon. The default value is "None" which doesn't add any icon to the Dialog control. This property is by now only supported by blue crystal theme.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>state</code>
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getStretch stretch}.
 * 
 * Determines  if the dialog will be stretched to full screen. This property is only applicable to standard dialog and message type dialog ignores this property.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>stretch</code>
 * @since 1.13.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getStretch = function() { return false; };

/**
 * Gets current value of property {@link #getStretchOnPhone stretchOnPhone}.
 * 
 * Determines whether the dialog will displayed on full screen on a phone.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>stretchOnPhone</code>
 * @since 1.11.2
 * @deprecated Since version 1.13.1.
 * Please use the new stretch property instead. This enables a stretched dialog even on tablet and desktop. If you want to achieve the same effect as stretchOnPhone, please set the stretch with jQuery.device.is.phone, then dialog is only stretched when runs on phone.
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getStretchOnPhone = function() { return false; };

/**
 * Gets content of aggregation {@link #getSubHeader subHeader}.
 * 
 * When subHeader is assigned to Dialog, it's rendered directly after the main header in Dialog. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.
 * 
 * @returns {sap.m.IBar}
 * @since 1.12.2
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getSubHeader = function() { return new sap.m.IBar(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Title text appears in the dialog header.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * The type of the dialog. In some themes, the type "message" will limit the dialog's width within 480px on tablet and desktop.
 * 
 * Default value is <code>Standard</code>.
 * @returns {sap.m.DialogType} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getType = function() { return new sap.m.DialogType(); };

/**
 * Gets current value of property {@link #getVerticalScrolling verticalScrolling}.
 * 
 * Indicates if user can scroll vertically inside dialog when the content is bigger than the content area.
 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, sap.m.ScrollContainer or sap.m.SplitContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>verticalScrolling</code>
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.getVerticalScrolling = function() { return false; };

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation {@link #getButtons buttons}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Button}
 *           oButton The button whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.indexOfButton = function(oButton) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a button into the aggregation {@link #getButtons buttons}.
 * 
 * @param {sap.m.Button}
 *            oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the button should be inserted at; for
 *              a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the button is inserted at
 *              the last position
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.insertButton = function(oButton,iIndex) { return new sap.m.Dialog(); };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Dialog(); };

/**
 * The method checks if the Dialog is open. It returns true when the Dialog is currently open (this includes opening and closing animations), otherwise it returns false.
 * 
 * @returns boolean
 * @public
 * @since 1.9.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Dialog.prototype.isOpen = function() {  };

/**
 * Open the dialog.
 * 
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Dialog.prototype.open = function() {  };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getButtons buttons}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Button[]} An array of the removed elements (might be empty)
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.removeAllButtons = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Removes a button from the aggregation {@link #getButtons buttons}.
 * 
 * @param {int | string | sap.m.Button} vButton The button to remove or its index or id
 * @returns {sap.m.Button} The removed button or <code>null</code>
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.removeButton = function(vButton) { return new sap.m.Button(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Sets the aggregated {@link #getBeginButton beginButton}.
 * @param {sap.m.Button} oBeginButton The beginButton to set
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setBeginButton = function(oBeginButton) { return new sap.m.Dialog(); };

/**
 * Sets a new value for property {@link #getContentHeight contentHeight}.
 * 
 * Preferred height of content in Dialog. If the preferred height is bigger than the available space on screen, it will be overwritten by the maximum available height on screen in order to make sure that dialog isn't cut off.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sContentHeight New value for property <code>contentHeight</code>
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.12.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setContentHeight = function(sContentHeight) { return new sap.m.Dialog(); };

/**
 * Sets a new value for property {@link #getContentWidth contentWidth}.
 * 
 * Preferred width of content in Dialog. This property affects the width of dialog on phone in landscape mode, tablet or desktop, because the dialog has a fixed width on phone in portrait mode. If the preferred width is less than the minimum width of dilaog or more than the available width of the screen, it will be overwritten by the min or max value. The current mininum value of dialog width on tablet is 400px.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sContentWidth New value for property <code>contentWidth</code>
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.12.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setContentWidth = function(sContentWidth) { return new sap.m.Dialog(); };

/**
 * Sets the aggregated {@link #getCustomHeader customHeader}.
 * @param {sap.m.IBar} oCustomHeader The customHeader to set
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setCustomHeader = function(oCustomHeader) { return new sap.m.Dialog(); };

/**
 * Sets a new value for property {@link #getDraggable draggable}.
 * 
 * Indicates whether the dialog is draggable. If this property is set to true, the dialog will be draggable by it's header. This property has a default value false. The Dialog can be draggable only in desktop mode.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bDraggable New value for property <code>draggable</code>
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setDraggable = function(bDraggable) { return new sap.m.Dialog(); };

/**
 * Sets the aggregated {@link #getEndButton endButton}.
 * @param {sap.m.Button} oEndButton The endButton to set
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setEndButton = function(oEndButton) { return new sap.m.Dialog(); };

/**
 * Sets a new value for property {@link #getEscapeHandler escapeHandler}.
 * 
 * This property expects a function with one parameter of type <code>Promise</code>. In the function you should call either <code>resolve()</code> or <code>reject()</code> on the <code>Promise</code> object.<br/>
 * The function allows you to define custom behaviour which will be executed when the ESCAPE key is pressed. By default when the ESCAPE key is pressed the Dialog is immediately closed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oEscapeHandler New value for property <code>escapeHandler</code>
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setEscapeHandler = function(oEscapeHandler) { return new sap.m.Dialog(); };

/**
 * Sets a new value for property {@link #getHorizontalScrolling horizontalScrolling}.
 * 
 * Indicates if user can scroll horizontally inside dialog when the content is bigger than the content area.
 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, sap.m.ScrollContainer or sap.m.SplitContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bHorizontalScrolling New value for property <code>horizontalScrolling</code>
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setHorizontalScrolling = function(bHorizontalScrolling) { return new sap.m.Dialog(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Icon displayed in the dialog's header. This icon is invisible on the iOS platform and it's density aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setIcon = function(sIcon) { return new sap.m.Dialog(); };

/**
 * Sets the associated {@link #getInitialFocus initialFocus}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oInitialFocus ID of an element which becomes the new target of this initialFocus association; alternatively, an element instance may be given
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setInitialFocus = function(oInitialFocus) { return new sap.m.Dialog(); };

/**
 * Sets the associated {@link #getLeftButton leftButton}.
 * @param {sap.ui.core.ID | sap.m.Button} oLeftButton ID of an element which becomes the new target of this leftButton association; alternatively, an element instance may be given
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.15.1.
 * 
 * LeftButton has been deprecated since 1.15.1. Please use the beginButton instead which is more RTL friendly.
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setLeftButton = function(oLeftButton) { return new sap.m.Dialog(); };

/**
 * Sets a new value for property {@link #getResizable resizable}.
 * 
 * Indicates whether the dialog is resizable. the dialog is resizable. If this property is set to true, the dialog will have a resize handler in it's bottom right corner. This property has a default value false. The Dialog can be resizable only in desktop mode.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bResizable New value for property <code>resizable</code>
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setResizable = function(bResizable) { return new sap.m.Dialog(); };

/**
 * Sets the associated {@link #getRightButton rightButton}.
 * @param {sap.ui.core.ID | sap.m.Button} oRightButton ID of an element which becomes the new target of this rightButton association; alternatively, an element instance may be given
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.15.1.
 * 
 * RightButton has been deprecated since 1.15.1. Please use the endButton instead which is more RTL friendly.
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setRightButton = function(oRightButton) { return new sap.m.Dialog(); };

/**
 * Sets a new value for property {@link #getShowHeader showHeader}.
 * 
 * Determines whether the header is shown inside the dialog. If this property is set to true, the text and icon property are ignored. This property has a default value true.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowHeader New value for property <code>showHeader</code>
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setShowHeader = function(bShowHeader) { return new sap.m.Dialog(); };

/**
 * Sets a new value for property {@link #getState state}.
 * 
 * The state affects the icon and the title color. If other than "None" is set, a predefined icon will be added to the dialog. Setting icon property will overwrite the predefined icon. The default value is "None" which doesn't add any icon to the Dialog control. This property is by now only supported by blue crystal theme.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.core.ValueState} sState New value for property <code>state</code>
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setState = function(sState) { return new sap.m.Dialog(); };

/**
 * Sets a new value for property {@link #getStretch stretch}.
 * 
 * Determines  if the dialog will be stretched to full screen. This property is only applicable to standard dialog and message type dialog ignores this property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bStretch New value for property <code>stretch</code>
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.13.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setStretch = function(bStretch) { return new sap.m.Dialog(); };

/**
 * Sets a new value for property {@link #getStretchOnPhone stretchOnPhone}.
 * 
 * Determines whether the dialog will displayed on full screen on a phone.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bStretchOnPhone New value for property <code>stretchOnPhone</code>
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.2
 * @deprecated Since version 1.13.1.
 * Please use the new stretch property instead. This enables a stretched dialog even on tablet and desktop. If you want to achieve the same effect as stretchOnPhone, please set the stretch with jQuery.device.is.phone, then dialog is only stretched when runs on phone.
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setStretchOnPhone = function(bStretchOnPhone) { return new sap.m.Dialog(); };

/**
 * Sets the aggregated {@link #getSubHeader subHeader}.
 * @param {sap.m.IBar} oSubHeader The subHeader to set
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.12.2
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setSubHeader = function(oSubHeader) { return new sap.m.Dialog(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Title text appears in the dialog header.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setTitle = function(sTitle) { return new sap.m.Dialog(); };

/**
 * Sets a new value for property {@link #getType type}.
 * 
 * The type of the dialog. In some themes, the type "message" will limit the dialog's width within 480px on tablet and desktop.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Standard</code>.
 * @param {sap.m.DialogType} sType New value for property <code>type</code>
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setType = function(sType) { return new sap.m.Dialog(); };

/**
 * Sets a new value for property {@link #getVerticalScrolling verticalScrolling}.
 * 
 * Indicates if user can scroll vertically inside dialog when the content is bigger than the content area.
 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, sap.m.ScrollContainer or sap.m.SplitContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVerticalScrolling New value for property <code>verticalScrolling</code>
 * @returns {sap.m.Dialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Dialog.prototype.setVerticalScrolling = function(bVerticalScrolling) { return new sap.m.Dialog(); };


// ---- sap.m.DialogType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.DialogType.toString = function() { return ""; };

// ---- sap.m.DisplayListItem --------------------------------------------------------------------------

/**
 * Constructor for a new DisplayListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getValueTextDirection valueTextDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * 
 * @param {string} [sId] Id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <code>sap.m.DisplayListItem</code> can be used to represent a label and a value.
 * @extends sap.m.ListItemBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.DisplayListItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.DisplayListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.DisplayListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getLabel label}.
 * 
 * Defines the label of the list item.
 * 
 * @returns {string} Value of property <code>label</code>
 * 
 * @public
 * 
 */
sap.m.DisplayListItem.prototype.getLabel = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.DisplayListItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.DisplayListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * Defines the value of the list item.
 * 
 * @returns {string} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.m.DisplayListItem.prototype.getValue = function() { return ""; };

/**
 * Gets current value of property {@link #getValueTextDirection valueTextDirection}.
 * 
 * Defines the <code>value</code> text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>valueTextDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.DisplayListItem.prototype.getValueTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Sets a new value for property {@link #getLabel label}.
 * 
 * Defines the label of the list item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sLabel New value for property <code>label</code>
 * @returns {sap.m.DisplayListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DisplayListItem.prototype.setLabel = function(sLabel) { return new sap.m.DisplayListItem(); };

/**
 * Sets a new value for property {@link #getValue value}.
 * 
 * Defines the value of the list item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sValue New value for property <code>value</code>
 * @returns {sap.m.DisplayListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DisplayListItem.prototype.setValue = function(sValue) { return new sap.m.DisplayListItem(); };

/**
 * Sets a new value for property {@link #getValueTextDirection valueTextDirection}.
 * 
 * Defines the <code>value</code> text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sValueTextDirection New value for property <code>valueTextDirection</code>
 * @returns {sap.m.DisplayListItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.DisplayListItem.prototype.setValueTextDirection = function(sValueTextDirection) { return new sap.m.DisplayListItem(); };


// ---- sap.m.DraftIndicator --------------------------------------------------------------------------

/**
 * Constructor for a new DraftIndicator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getState state} : sap.m.DraftIndicatorState (default: Clear)</li>
 * <li>{@link #getMinDisplayTime minDisplayTime} : int (default: 1500)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * 
 * @class
 * A draft indicator is {@link sap.m.Label}.
 * 
 * @extends sap.ui.core.Control
 * @abstract
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.32.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.DraftIndicator = function(sId) {};
/**
 * Clears the indicator state
 * 
 * @public
 * 
 */
sap.m.DraftIndicator.prototype.clearDraftState = function() {  };

/**
 * Creates a new subclass of class sap.m.DraftIndicator with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.DraftIndicator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.DraftIndicator.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.DraftIndicator.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMinDisplayTime minDisplayTime}.
 * 
 * Minimum time in milliseconds for showing the draft indicator
 * 
 * Default value is <code>1500</code>.
 * @returns {int} Value of property <code>minDisplayTime</code>
 * 
 * @public
 * 
 */
sap.m.DraftIndicator.prototype.getMinDisplayTime = function() { return 0; };

/**
 * Gets current value of property {@link #getState state}.
 * 
 * State of the indicator. Could be "Saving", "Saved" and "Clear".
 * 
 * Default value is <code>Clear</code>.
 * @returns {sap.m.DraftIndicatorState} Value of property <code>state</code>
 * 
 * @public
 * 
 */
sap.m.DraftIndicator.prototype.getState = function() { return new sap.m.DraftIndicatorState(); };

/**
 * Sets a new value for property {@link #getMinDisplayTime minDisplayTime}.
 * 
 * Minimum time in milliseconds for showing the draft indicator
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>1500</code>.
 * @param {int} iMinDisplayTime New value for property <code>minDisplayTime</code>
 * @returns {sap.m.DraftIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.DraftIndicator.prototype.setMinDisplayTime = function(iMinDisplayTime) { return new sap.m.DraftIndicator(); };

/**
 * Sets the indicator in "Saved" state
 * 
 * @public
 * 
 */
sap.m.DraftIndicator.prototype.showDraftSaved = function() {  };

/**
 * Sets the indicator in "Saving..." state
 * 
 * @public
 * 
 */
sap.m.DraftIndicator.prototype.showDraftSaving = function() {  };


// ---- sap.m.DraftIndicatorState --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.DraftIndicatorState.toString = function() { return ""; };

// ---- sap.m.FacetFilter --------------------------------------------------------------------------

/**
 * Constructor for a new <code>FacetFilter</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowPersonalization showPersonalization} : boolean (default: false)</li>
 * <li>{@link #getType type} : sap.m.FacetFilterType (default: Simple)</li>
 * <li>{@link #getLiveSearch liveSearch} : boolean (default: true)</li>
 * <li>{@link #getShowSummaryBar showSummaryBar} : boolean (default: false)</li>
 * <li>{@link #getShowReset showReset} : boolean (default: true)</li>
 * <li>{@link #getShowPopoverOKButton showPopoverOKButton} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLists lists} : sap.m.FacetFilterList[] (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:reset reset} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Provides filtering functionality with multiple parameters.
 * 
 * <h3>Overview</h3>
 * 
 * The <code>FacetFilter</code> control is used to provide filtering functionality
 * with multiple parameters and supports the users in finding the information they
 * need from potentially very large data sets.
 * 
 * Your app can have dependencies between facets where selection of filter items in
 * one facet list limits the list of valid filters in another facet list.
 * 
 * The <code>FacetFilter</code> uses {@link sap.m.FacetFilterList FacetFilterList} and
 * {@link sap.m.FacetFilterItem FacetFilterItem} to model facets and their associated
 * filters.
 * 
 * <b>Note: </b>{@link sap.m.FacetFilterList FacetFilterList} is a subclass of
 * {@link sap.m.List} and supports growing enablement feature via the property
 * <code>growing</code>. When you use this feature, be aware that it only works with
 * one-way data binding.
 * Having growing feature enabled when the <code>items</code> aggregation is bound to
 * a model with two-way data binding, may lead to unexpected and/or inconsistent
 * behavior across browsers, such as unexpected closing of the list.
 * 
 * <h3>Usage</h3>
 * 
 * Use the <code>FacetFilter</code> if your app displays a large list of
 * items that can be grouped by multiple parameters, for example products by category
 * and supplier. With the <code>FacetFilter</code>, you allow the users
 * to dynamically filter the list so it only displays products from the categories and
 * suppliers they want to see.
 * 
 * While the {@link sap.m.FacetFilterList} popup is opened (when the user selects a button
 * corresponding to the list's name), any other activities leading to focus change will
 * close it. For example, when the popup is opened and the app developer loads a
 * {@link sap.m.BusyDialog} or any other dialog that obtains the focus, the popup will
 * be closed.
 * 
 * <h3>Responsive behavior</h3>
 * 
 * The <code>FacetFilter</code> supports the following two types, which
 * can be configured using the control's <code>type</code> property:
 * 
 * <ul><li>Simple type (default) - only available for desktop and tablet screen sizes.
 * The active facets are displayed as individually selectable buttons on the toolbar.</li>
 * <li>Light type - automatically enabled on smart phone sized devices, but also
 * available for desktop and tablets. The active facets and selected filter items are
 * displayed in the summary bar. When the user selects the summary bar, a navigable
 * dialog list of all facets is displayed. When the user selects a facet, the dialog
 * scrolls to show the list of filters that are available for the selected facet.</li></ul>
 * 
 * <h3>Additional Information</h3>
 * 
 * For more information, go to <b>Developer Guide</b> section in the Demo Kit and navigate to
 * <b>More&nbsp;About&nbsp;Controls</b>&nbsp;>&nbsp;<b>sap.m</b>&nbsp;>&nbsp;<b>Facet&nbsp;Filter</b>
 * 
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IShrinkable
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilter = function(sId,mSettings) {};
/**
 * Fired when the user confirms filter selection.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.FacetFilter.prototype.confirm = function(oControlEvent) {  };

/**
 * Fired when the Reset button is pressed to inform that all FacetFilterLists need to be reset.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.FacetFilter.prototype.reset = function(oControlEvent) {  };

/**
 * Adds some list to the aggregation {@link #getLists lists}.
 * @param {sap.m.FacetFilterList}
 *            oList the list to add; if empty, nothing is inserted
 * @returns {sap.m.FacetFilter} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.addList = function(oList) { return new sap.m.FacetFilter(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:confirm confirm} event of this <code>sap.m.FacetFilter</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.FacetFilter</code> itself.
 * 
 * Fired when the user confirms filter selection.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilter</code> itself
 * 
 * @returns {sap.m.FacetFilter} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.attachConfirm = function(oData,fnFunction,oListener) { return new sap.m.FacetFilter(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:reset reset} event of this <code>sap.m.FacetFilter</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.FacetFilter</code> itself.
 * 
 * Fired when the Reset button is pressed to inform that all FacetFilterLists need to be reset.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilter</code> itself
 * 
 * @returns {sap.m.FacetFilter} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilter.prototype.attachReset = function(oData,fnFunction,oListener) { return new sap.m.FacetFilter(); };

/**
 * Destroys all the lists in the aggregation {@link #getLists lists}.
 * @returns {sap.m.FacetFilter} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.destroyLists = function() { return new sap.m.FacetFilter(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:confirm confirm} event of this <code>sap.m.FacetFilter</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.FacetFilter} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.detachConfirm = function(fnFunction,oListener) { return new sap.m.FacetFilter(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:reset reset} event of this <code>sap.m.FacetFilter</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.FacetFilter} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.detachReset = function(fnFunction,oListener) { return new sap.m.FacetFilter(); };

/**
 * Creates a new subclass of class sap.m.FacetFilter with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FacetFilter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:confirm confirm} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.FacetFilter} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.FacetFilter.prototype.fireConfirm = function(mParameters) { return new sap.m.FacetFilter(); };

/**
 * Fires event {@link #event:reset reset} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.FacetFilter} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.FacetFilter.prototype.fireReset = function(mParameters) { return new sap.m.FacetFilter(); };

/**
 * Gets current value of property {@link #getLiveSearch liveSearch}.
 * 
 * Enables/disables live search in the search field of all <code>sap.m.FacetFilterList</code> instances.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>liveSearch</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getLiveSearch = function() { return false; };

/**
 * Returns a metadata object for class sap.m.FacetFilter.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.FacetFilter.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowPersonalization showPersonalization}.
 * 
 * If set to <code>true</code> and the FacetFilter type is <code>Simple</code>, then the Add Facet icon will be displayed and each facet button will also have a Facet Remove icon displayed beside it, allowing the user to deactivate the facet.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showPersonalization</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getShowPersonalization = function() { return false; };

/**
 * Gets current value of property {@link #getShowPopoverOKButton showPopoverOKButton}.
 * 
 * If set to <code>true</code>, an OK button is displayed for every FacetFilterList popover. This button allows the user to close the popover from within the popover instead of having to click outside of it.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showPopoverOKButton</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getShowPopoverOKButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowReset showReset}.
 * 
 * Shows/hides the FacetFilter Reset button.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showReset</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getShowReset = function() { return false; };

/**
 * Gets current value of property {@link #getShowSummaryBar showSummaryBar}.
 * 
 * Shows the summary bar instead of the FacetFilter buttons bar when set to <code>true</code>.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showSummaryBar</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getShowSummaryBar = function() { return false; };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * Defines the default appearance of the FacetFilter on the device. Possible values are <code>Simple</code> (default) and <code>Light</code>.
 * 
 * Default value is <code>Simple</code>.
 * @returns {sap.m.FacetFilterType} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.getType = function() { return new sap.m.FacetFilterType(); };

/**
 * Checks for the provided <code>sap.m.FacetFilterList</code> in the aggregation {@link #getLists lists}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.FacetFilterList}
 *           oList The list whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.indexOfList = function(oList) { return 0; };

/**
 * Inserts a list into the aggregation {@link #getLists lists}.
 * 
 * @param {sap.m.FacetFilterList}
 *            oList the list to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the list should be inserted at; for
 *              a negative value of <code>iIndex</code>, the list is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the list is inserted at
 *              the last position
 * @returns {sap.m.FacetFilter} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.insertList = function(oList,iIndex) { return new sap.m.FacetFilter(); };

/**
 * Opens the FacetFilter dialog.
 * 
 * @returns {sap.m.FacetFilter} this pointer for chaining
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilter.prototype.openFilterDialog = function() { return new sap.m.FacetFilter(); };

/**
 * Removes all the controls from the aggregation {@link #getLists lists}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.FacetFilterList[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.removeAllLists = function() { return new Array(); };

/**
 * Sets a new value for property {@link #getShowPersonalization showPersonalization}.
 * 
 * If set to <code>true</code> and the FacetFilter type is <code>Simple</code>, then the Add Facet icon will be displayed and each facet button will also have a Facet Remove icon displayed beside it, allowing the user to deactivate the facet.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowPersonalization New value for property <code>showPersonalization</code>
 * @returns {sap.m.FacetFilter} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setShowPersonalization = function(bShowPersonalization) { return new sap.m.FacetFilter(); };

/**
 * Sets a new value for property {@link #getShowPopoverOKButton showPopoverOKButton}.
 * 
 * If set to <code>true</code>, an OK button is displayed for every FacetFilterList popover. This button allows the user to close the popover from within the popover instead of having to click outside of it.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowPopoverOKButton New value for property <code>showPopoverOKButton</code>
 * @returns {sap.m.FacetFilter} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilter.prototype.setShowPopoverOKButton = function(bShowPopoverOKButton) { return new sap.m.FacetFilter(); };


// ---- sap.m.FacetFilterItem --------------------------------------------------------------------------

/**
 * Constructor for a new <code>FacetFilterItem</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getCount count} : int</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Represents a value for the {@link sap.m.FacetfilterList} control.
 * @extends sap.m.ListItemBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilterItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.FacetFilterItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FacetFilterItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getCount count}.
 * 
 * Defines the number of objects that match this item in the target data set.
 * 
 * @returns {int} Value of property <code>count</code>
 * 
 * @deprecated Since version 1.18.11. Use setCounter instead.
 * 
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.getCount = function() { return 0; };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * Can be used as input for subsequent actions.
 * 
 * @returns {string} Value of property <code>key</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.FacetFilterItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.FacetFilterItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Determines the text to be displayed for the item.
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.getText = function() { return ""; };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * Can be used as input for subsequent actions.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.m.FacetFilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.setKey = function(sKey) { return new sap.m.FacetFilterItem(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Determines the text to be displayed for the item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.FacetFilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilterItem.prototype.setText = function(sText) { return new sap.m.FacetFilterItem(); };


// ---- sap.m.FacetFilterList --------------------------------------------------------------------------

/**
 * Constructor for a new <code>FacetFilterList</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getWordWrap wordWrap} : boolean (default: false)</li>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: true)</li>
 * <li>{@link #getActive active} : boolean (default: true)</li>
 * <li>{@link #getEnableCaseInsensitiveSearch enableCaseInsensitiveSearch} : boolean (default: false)</li>
 * <li>{@link #getAllCount allCount} : int</li>
 * <li>{@link #getSequence sequence} : int (default: -1)</li>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getShowRemoveFacetIcon showRemoveFacetIcon} : boolean (default: true)</li>
 * <li>{@link #getRetainListSequence retainListSequence} : boolean (default: false)</li>
 * <li>{@link #getDataType dataType} : sap.m.FacetFilterListDataType (default: String)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:listOpen listOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:listClose listClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.List#constructor sap.m.List}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Represents a list of values for the {@link sap.m.FacetFilter} control.
 * 
 * <b>Note: </b><code>FacetFilterList</code> is a subclass of {@link sap.m.List} and supports
 * growing enablement feature via the property <code>growing</code>. When you use this feature,
 * be aware that it only works with one-way data binding.
 * Having growing feature enabled when the <code>items</code> aggregation is bound to
 * a model with two-way data binding, may lead to unexpected and/or inconsistent
 * behavior across browsers, such as unexpected closing of the list.
 * 
 * While the <code>FacetFilterList</code> popup is opened (when the user selects a button
 * corresponding to the list's name), any other activities leading to focus change will
 * close it. For example, when the popup is opened and the app developer loads a
 * {@link sap.m.BusyDialog} or any other dialog that obtains the focus, the popup will
 * be closed.
 * 
 * @extends sap.m.List
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilterList = function(sId,mSettings) {};
/**
 * Triggered after the list of items is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.FacetFilterItem[]} oControlEvent.getParameters.selectedItems Array of selected items. Items returned are only copies and therefore can only be used to read properties, not set them.
 * @param {boolean} oControlEvent.getParameters.allSelected <code>True</code> if the select All checkbox is selected. This will be <code>false</code> if all items are actually selected (every FacetFilterItem.selected == true). In that case selectedItems will contain all selected items.
 * @param {object} oControlEvent.getParameters.selectedKeys Associative array containing the keys of selected FacetFilterItems. Unlike the selectedItems parameter, this contains only the keys for all selected items, not the items themselves. Being an associative array, each object property is the FacetFilterItem key value and the value of the property is the FacetFilterItem text.
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.listClose = function(oControlEvent) {  };

/**
 * Fired before the filter list is opened.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.listOpen = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:listClose listClose} event of this <code>sap.m.FacetFilterList</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.FacetFilterList</code> itself.
 * 
 * Triggered after the list of items is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilterList</code> itself
 * 
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.attachListClose = function(oData,fnFunction,oListener) { return new sap.m.FacetFilterList(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:listOpen listOpen} event of this <code>sap.m.FacetFilterList</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.FacetFilterList</code> itself.
 * 
 * Fired before the filter list is opened.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilterList</code> itself
 * 
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.attachListOpen = function(oData,fnFunction,oListener) { return new sap.m.FacetFilterList(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:listClose listClose} event of this <code>sap.m.FacetFilterList</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.detachListClose = function(fnFunction,oListener) { return new sap.m.FacetFilterList(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:listOpen listOpen} event of this <code>sap.m.FacetFilterList</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.detachListOpen = function(fnFunction,oListener) { return new sap.m.FacetFilterList(); };

/**
 * Creates a new subclass of class sap.m.FacetFilterList with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.List.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FacetFilterList.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:listClose listClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.FacetFilterItem[]} [mParameters.selectedItems] Array of selected items. Items returned are only copies and therefore can only be used to read properties, not set them.
 * @param {boolean} [mParameters.allSelected] <code>True</code> if the select All checkbox is selected. This will be <code>false</code> if all items are actually selected (every FacetFilterItem.selected == true). In that case selectedItems will contain all selected items.
 * @param {object} [mParameters.selectedKeys] Associative array containing the keys of selected FacetFilterItems. Unlike the selectedItems parameter, this contains only the keys for all selected items, not the items themselves. Being an associative array, each object property is the FacetFilterItem key value and the value of the property is the FacetFilterItem text.
 * 
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.FacetFilterList.prototype.fireListClose = function(mParameters) { return new sap.m.FacetFilterList(); };

/**
 * Fires event {@link #event:listOpen listOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.FacetFilterList.prototype.fireListOpen = function(mParameters) { return new sap.m.FacetFilterList(); };

/**
 * Gets current value of property {@link #getActive active}.
 * 
 * Indicates that the list is displayed as a button when the FacetFilter type is set to <code>Simple</code>.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>active</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getActive = function() { return false; };

/**
 * Gets current value of property {@link #getAllCount allCount}.
 * 
 * Determines the number of objects that match this item in the target data set when all filter items are selected.
 * 
 * @returns {int} Value of property <code>allCount</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getAllCount = function() { return 0; };

/**
 * Gets current value of property {@link #getDataType dataType}.
 * 
 * FacetFilterList data type. Only String data type will provide search function.
 * 
 * Default value is <code>String</code>.
 * @returns {sap.m.FacetFilterListDataType} Value of property <code>dataType</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getDataType = function() { return new sap.m.FacetFilterListDataType(); };

/**
 * Gets current value of property {@link #getEnableCaseInsensitiveSearch enableCaseInsensitiveSearch}.
 * 
 * If set to <code>true</code>, enables case-insensitive search for OData.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableCaseInsensitiveSearch</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getEnableCaseInsensitiveSearch = function() { return false; };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * Unique identifier for this filter list.
 * 
 * @returns {string} Value of property <code>key</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.FacetFilterList.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.FacetFilterList.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMultiSelect multiSelect}.
 * 
 * Specifies whether multiple or single selection is used.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>multiSelect</code>
 * 
 * @deprecated Since version 1.20.0.
 * This property is no longer supported. Use the setMode method instead. FacetFilterList overrides the setMode method to restrict the possible modes to MultiSelect and SingleSelectMaster. All other modes are ignored and will not be set.
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getMultiSelect = function() { return false; };

/**
 * Gets current value of property {@link #getRetainListSequence retainListSequence}.
 * 
 * Retains the list sequence if it is inactive and made active again.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>retainListSequence</code>
 * @since 1.22.1
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getRetainListSequence = function() { return false; };

/**
 * Returns the keys of the selected elements as an associative array.
 * An empty object is returned if no items are selected.
 * 
 * @returns {object} Object with the selected keys
 * @public
 * @since 1.20.3
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilterList.prototype.getSelectedKeys = function() { return new Object(); };

/**
 * Gets current value of property {@link #getSequence sequence}.
 * 
 * Sequence that determines the order in which FacetFilterList is shown on the FacetFilter. Lists are rendered by ascending order of sequence.
 * 
 * Default value is <code>-1</code>.
 * @returns {int} Value of property <code>sequence</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getSequence = function() { return 0; };

/**
 * Gets current value of property {@link #getShowRemoveFacetIcon showRemoveFacetIcon}.
 * 
 * Specifies whether remove icon for facet is visible or hidden.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showRemoveFacetIcon</code>
 * @since 1.20.4
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getShowRemoveFacetIcon = function() { return false; };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Defines the title of the facet. The facet title is displayed on the facet button when the FacetFilter type is set to <code>Simple</code>. It is also displayed as a list item in the facet page of the dialog.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getWordWrap wordWrap}.
 * 
 * If set to <code>true</code>, the item text wraps when it is too long.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>wordWrap</code>
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.getWordWrap = function() { return false; };

/**
 * Removes the specified key from the selected keys cache and deselects the item.
 * 
 * @param {string} sKey
 *         The key of the selected item to be removed from the cache. If <code>null</code> then the text parameter will be used as the key.
 * @param {string} sText
 *         The text of the selected item to be removed from the cache. If the key parameter is <code>null</code> then text will be used as the key.
 * @type void
 * @public
 * @since 1.20.4
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilterList.prototype.removeSelectedKey = function(sKey,sText) { return null; };

/**
 * Removes all selected keys from the selected keys cache and deselects all items.
 * 
 * @type void
 * @public
 * @since 1.20.4
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilterList.prototype.removeSelectedKeys = function() { return null; };

/**
 * Sets a new value for property {@link #getActive active}.
 * 
 * Indicates that the list is displayed as a button when the FacetFilter type is set to <code>Simple</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bActive New value for property <code>active</code>
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setActive = function(bActive) { return new sap.m.FacetFilterList(); };

/**
 * Sets a new value for property {@link #getAllCount allCount}.
 * 
 * Determines the number of objects that match this item in the target data set when all filter items are selected.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iAllCount New value for property <code>allCount</code>
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setAllCount = function(iAllCount) { return new sap.m.FacetFilterList(); };

/**
 * Sets a new value for property {@link #getDataType dataType}.
 * 
 * FacetFilterList data type. Only String data type will provide search function.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>String</code>.
 * @param {sap.m.FacetFilterListDataType} sDataType New value for property <code>dataType</code>
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setDataType = function(sDataType) { return new sap.m.FacetFilterList(); };

/**
 * Sets a new value for property {@link #getEnableCaseInsensitiveSearch enableCaseInsensitiveSearch}.
 * 
 * If set to <code>true</code>, enables case-insensitive search for OData.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableCaseInsensitiveSearch New value for property <code>enableCaseInsensitiveSearch</code>
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setEnableCaseInsensitiveSearch = function(bEnableCaseInsensitiveSearch) { return new sap.m.FacetFilterList(); };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * Unique identifier for this filter list.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setKey = function(sKey) { return new sap.m.FacetFilterList(); };

/**
 * Overrides to allow only MultiSelect and SingleSelectMaster list modes.
 * If an invalid mode is given then the mode will not be changed.
 * @param {sap.m.ListMode} mode The list mode
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setMode = function(mode) {  };

/**
 * Sets a new value for property {@link #getRetainListSequence retainListSequence}.
 * 
 * Retains the list sequence if it is inactive and made active again.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bRetainListSequence New value for property <code>retainListSequence</code>
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22.1
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setRetainListSequence = function(bRetainListSequence) { return new sap.m.FacetFilterList(); };

/**
 * Used to pre-select FacetFilterItems, such as when restoring FacetFilterList selections from a variant.
 * Keys are cached separately from the actual FacetFilterItems so that they remain even when the physical items are removed by filtering or sorting.
 * If aKeys is <code>undefined</code>, <code>null</code>, or {} (empty object) then all keys are deleted.
 * After this method completes, only those items with matching keys will be selected. All other items in the list will be deselected.
 * 
 * @param {object} oAKeys
 *         Associative array indicating which FacetFilterItems should be selected in the list. Each property must be set to the value of a FacetFilterItem.key property. Each property value should be set to the FacetFilterItem.text property value. The text value is used to display the FacetFilterItem text when the FacetFilterList button or FacetFilter summary bar is displayed. If no property value is set then the property key is used for the text.
 * @type void
 * @public
 * @since 1.20.3
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FacetFilterList.prototype.setSelectedKeys = function(oAKeys) { return null; };

/**
 * Sets a new value for property {@link #getSequence sequence}.
 * 
 * Sequence that determines the order in which FacetFilterList is shown on the FacetFilter. Lists are rendered by ascending order of sequence.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>-1</code>.
 * @param {int} iSequence New value for property <code>sequence</code>
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setSequence = function(iSequence) { return new sap.m.FacetFilterList(); };

/**
 * Sets a new value for property {@link #getShowRemoveFacetIcon showRemoveFacetIcon}.
 * 
 * Specifies whether remove icon for facet is visible or hidden.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowRemoveFacetIcon New value for property <code>showRemoveFacetIcon</code>
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.20.4
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setShowRemoveFacetIcon = function(bShowRemoveFacetIcon) { return new sap.m.FacetFilterList(); };

/**
 * Sets a new value for property {@link #getWordWrap wordWrap}.
 * 
 * If set to <code>true</code>, the item text wraps when it is too long.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bWordWrap New value for property <code>wordWrap</code>
 * @returns {sap.m.FacetFilterList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FacetFilterList.prototype.setWordWrap = function(bWordWrap) { return new sap.m.FacetFilterList(); };


// ---- sap.m.FacetFilterListDataType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FacetFilterListDataType.toString = function() { return ""; };

// ---- sap.m.FacetFilterType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FacetFilterType.toString = function() { return ""; };

// ---- sap.m.FeedContent --------------------------------------------------------------------------

/**
 * Constructor for a new sap.m.FeedContent control.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSize size} : sap.m.Size (default: Auto)</li>
 * <li>{@link #getContentText contentText} : string</li>
 * <li>{@link #getSubheader subheader} : string</li>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getValueColor valueColor} : sap.m.ValueColor</li>
 * <li>{@link #getTruncateValueTo truncateValueTo} : int (default: 4)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class Displays a tile containing the text of the feed, a subheader, and a numeric value.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * @since 1.34
 * 
 * @public
 * @ui5-metamodel This control will also be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FeedContent = function(sId,mSettings) {};
/**
 * The event is triggered when the feed content is pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.FeedContent.prototype.press = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.FeedContent</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.FeedContent</code> itself.
 * 
 * The event is triggered when the feed content is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FeedContent</code> itself
 * 
 * @returns {sap.m.FeedContent} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.FeedContent.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.FeedContent(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.FeedContent</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.FeedContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedContent.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.FeedContent(); };

/**
 * Creates a new subclass of class sap.m.FeedContent with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FeedContent.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.FeedContent} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.FeedContent.prototype.firePress = function(mParameters) { return new sap.m.FeedContent(); };

/**
 * Gets current value of property {@link #getContentText contentText}.
 * 
 * The content text.
 * 
 * @returns {string} Value of property <code>contentText</code>
 * 
 * @public
 * 
 */
sap.m.FeedContent.prototype.getContentText = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.FeedContent.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.FeedContent.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSize size}.
 * 
 * Updates the size of the chart. If not set then the default size is applied based on the device tile.
 * 
 * Default value is <code>Auto</code>.
 * @returns {sap.m.Size} Value of property <code>size</code>
 * 
 * @deprecated Since version 1.38.0. The FeedContent control has now a fixed size, depending on the used media (desktop, tablet or phone).
 * 
 * @public
 * 
 */
sap.m.FeedContent.prototype.getSize = function() { return new sap.m.Size(); };

/**
 * Gets current value of property {@link #getSubheader subheader}.
 * 
 * The subheader.
 * 
 * @returns {string} Value of property <code>subheader</code>
 * 
 * @public
 * 
 */
sap.m.FeedContent.prototype.getSubheader = function() { return ""; };

/**
 * Gets current value of property {@link #getTruncateValueTo truncateValueTo}.
 * 
 * The number of characters to display for the value property.
 * 
 * Default value is <code>4</code>.
 * @returns {int} Value of property <code>truncateValueTo</code>
 * 
 * @public
 * 
 */
sap.m.FeedContent.prototype.getTruncateValueTo = function() { return 0; };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * The actual value.
 * 
 * @returns {string} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.m.FeedContent.prototype.getValue = function() { return ""; };

/**
 * Gets current value of property {@link #getValueColor valueColor}.
 * 
 * The semantic color of the value.
 * 
 * @returns {sap.m.ValueColor} Value of property <code>valueColor</code>
 * 
 * @public
 * 
 */
sap.m.FeedContent.prototype.getValueColor = function() { return new sap.m.ValueColor(); };

/**
 * Sets a new value for property {@link #getSize size}.
 * 
 * Updates the size of the chart. If not set then the default size is applied based on the device tile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Auto</code>.
 * @param {sap.m.Size} sSize New value for property <code>size</code>
 * @returns {sap.m.FeedContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.38.0. The FeedContent control has now a fixed size, depending on the used media (desktop, tablet or phone).
 * 
 * @public
 * 
 */
sap.m.FeedContent.prototype.setSize = function(sSize) { return new sap.m.FeedContent(); };

/**
 * Sets a new value for property {@link #getSubheader subheader}.
 * 
 * The subheader.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSubheader New value for property <code>subheader</code>
 * @returns {sap.m.FeedContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedContent.prototype.setSubheader = function(sSubheader) { return new sap.m.FeedContent(); };

/**
 * Sets a new value for property {@link #getTruncateValueTo truncateValueTo}.
 * 
 * The number of characters to display for the value property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>4</code>.
 * @param {int} iTruncateValueTo New value for property <code>truncateValueTo</code>
 * @returns {sap.m.FeedContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedContent.prototype.setTruncateValueTo = function(iTruncateValueTo) { return new sap.m.FeedContent(); };

/**
 * Sets a new value for property {@link #getValue value}.
 * 
 * The actual value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sValue New value for property <code>value</code>
 * @returns {sap.m.FeedContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedContent.prototype.setValue = function(sValue) { return new sap.m.FeedContent(); };

/**
 * Sets a new value for property {@link #getValueColor valueColor}.
 * 
 * The semantic color of the value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.m.ValueColor} sValueColor New value for property <code>valueColor</code>
 * @returns {sap.m.FeedContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedContent.prototype.setValueColor = function(sValueColor) { return new sap.m.FeedContent(); };


// ---- sap.m.FeedInput --------------------------------------------------------------------------

/**
 * Constructor for a new FeedInput.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getPlaceholder placeholder} : string (default: Post something here)</li>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getShowIcon showIcon} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getButtonTooltip buttonTooltip} : sap.ui.core.TooltipBase (default: Submit)</li>
 * <li>{@link #getAriaLabelForPicture ariaLabelForPicture} : string</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:post post} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The Feed Input allows the user to enter text for a new feed entry and then post it.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.22
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FeedInput = function(sId,mSettings) {};
/**
 * The Post event is triggered when the user has entered a value and pressed the post button. After firing this event, the value is reset.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The value of the feed input before reseting it.
 * @public
 * 
 */
sap.m.FeedInput.prototype.post = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:post post} event of this <code>sap.m.FeedInput</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.FeedInput</code> itself.
 * 
 * The Post event is triggered when the user has entered a value and pressed the post button. After firing this event, the value is reset.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FeedInput</code> itself
 * 
 * @returns {sap.m.FeedInput} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.FeedInput.prototype.attachPost = function(oData,fnFunction,oListener) { return new sap.m.FeedInput(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:post post} event of this <code>sap.m.FeedInput</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.FeedInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.detachPost = function(fnFunction,oListener) { return new sap.m.FeedInput(); };

/**
 * Creates a new subclass of class sap.m.FeedInput with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FeedInput.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:post post} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.value] The value of the feed input before reseting it.
 * 
 * @returns {sap.m.FeedInput} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.FeedInput.prototype.firePost = function(mParameters) { return new sap.m.FeedInput(); };

/**
 * Gets current value of property {@link #getAriaLabelForPicture ariaLabelForPicture}.
 * 
 * Text for Picture which will be read by screenreader.
 * If a new ariaLabelForPicture is set, any previously set ariaLabelForPicture is deactivated.
 * 
 * @returns {string} Value of property <code>ariaLabelForPicture</code>
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.getAriaLabelForPicture = function() { return ""; };

/**
 * Gets current value of property {@link #getButtonTooltip buttonTooltip}.
 * 
 * Sets a new tooltip for Submit button. The tooltip can either be a simple string (which in most cases will be rendered as the title attribute of this element)
 * or an instance of sap.ui.core.TooltipBase.
 * If a new tooltip is set, any previously set tooltip is deactivated.
 * The default value is set language dependent.
 * 
 * Default value is <code>Submit</code>.
 * @returns {sap.ui.core.TooltipBase} Value of property <code>buttonTooltip</code>
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.getButtonTooltip = function() { return new sap.ui.core.TooltipBase(); };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Set this flag to "false" to disable both text input and post button.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.getEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Icon to be displayed as a graphical element within the feed input. This can be an image or an icon from the icon font.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
 * 
 * Some mobile devices support higher resolution images while others do not. Therefore, you should provide image resources for all relevant densities.
 * If the property is set to "true", one or more requests are sent to the server to try and get the perfect density version of an image. If an image of a certain density is not available, the image control falls back to the default image, which should be provided.
 * 
 * If you do not have higher resolution images, you should set the property to "false" to avoid unnecessary round-trips.
 * 
 * Please be aware that this property is relevant only for images and not for icons.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconDensityAware</code>
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.getIconDensityAware = function() { return false; };

/**
 * Gets current value of property {@link #getMaxLength maxLength}.
 * 
 * The maximum length (the maximum number of characters) for the feed input's value. By default this is not limited.
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>maxLength</code>
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.getMaxLength = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.FeedInput.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.FeedInput.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPlaceholder placeholder}.
 * 
 * The placeholder text shown in the input area as long as the user has not entered any text value.
 * 
 * Default value is <code>Post something here</code>.
 * @returns {string} Value of property <code>placeholder</code>
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.getPlaceholder = function() { return ""; };

/**
 * Gets current value of property {@link #getShowIcon showIcon}.
 * 
 * If set to "true" (default), icons will be displayed. In case no icon is provided the standard placeholder will be displayed. if set to "false" icons are hidden
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showIcon</code>
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.getShowIcon = function() { return false; };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * The text value of the feed input. As long as the user has not entered any text the post button is disabled
 * 
 * @returns {string} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.getValue = function() { return ""; };

/**
 * Sets a new value for property {@link #getAriaLabelForPicture ariaLabelForPicture}.
 * 
 * Text for Picture which will be read by screenreader.
 * If a new ariaLabelForPicture is set, any previously set ariaLabelForPicture is deactivated.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sAriaLabelForPicture New value for property <code>ariaLabelForPicture</code>
 * @returns {sap.m.FeedInput} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.setAriaLabelForPicture = function(sAriaLabelForPicture) { return new sap.m.FeedInput(); };

/**
 * Sets a new value for property {@link #getButtonTooltip buttonTooltip}.
 * 
 * Sets a new tooltip for Submit button. The tooltip can either be a simple string (which in most cases will be rendered as the title attribute of this element)
 * or an instance of sap.ui.core.TooltipBase.
 * If a new tooltip is set, any previously set tooltip is deactivated.
 * The default value is set language dependent.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Submit</code>.
 * @param {sap.ui.core.TooltipBase} sButtonTooltip New value for property <code>buttonTooltip</code>
 * @returns {sap.m.FeedInput} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.setButtonTooltip = function(sButtonTooltip) { return new sap.m.FeedInput(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Set this flag to "false" to disable both text input and post button.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.FeedInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.setEnabled = function(bEnabled) { return new sap.m.FeedInput(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Icon to be displayed as a graphical element within the feed input. This can be an image or an icon from the icon font.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.FeedInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.setIcon = function(sIcon) { return new sap.m.FeedInput(); };

/**
 * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
 * 
 * Some mobile devices support higher resolution images while others do not. Therefore, you should provide image resources for all relevant densities.
 * If the property is set to "true", one or more requests are sent to the server to try and get the perfect density version of an image. If an image of a certain density is not available, the image control falls back to the default image, which should be provided.
 * 
 * If you do not have higher resolution images, you should set the property to "false" to avoid unnecessary round-trips.
 * 
 * Please be aware that this property is relevant only for images and not for icons.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware New value for property <code>iconDensityAware</code>
 * @returns {sap.m.FeedInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.FeedInput(); };

/**
 * Sets a new value for property {@link #getMaxLength maxLength}.
 * 
 * The maximum length (the maximum number of characters) for the feed input's value. By default this is not limited.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {int} iMaxLength New value for property <code>maxLength</code>
 * @returns {sap.m.FeedInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.setMaxLength = function(iMaxLength) { return new sap.m.FeedInput(); };

/**
 * Sets a new value for property {@link #getPlaceholder placeholder}.
 * 
 * The placeholder text shown in the input area as long as the user has not entered any text value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Post something here</code>.
 * @param {string} sPlaceholder New value for property <code>placeholder</code>
 * @returns {sap.m.FeedInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.setPlaceholder = function(sPlaceholder) { return new sap.m.FeedInput(); };

/**
 * Sets a new value for property {@link #getShowIcon showIcon}.
 * 
 * If set to "true" (default), icons will be displayed. In case no icon is provided the standard placeholder will be displayed. if set to "false" icons are hidden
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowIcon New value for property <code>showIcon</code>
 * @returns {sap.m.FeedInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.setShowIcon = function(bShowIcon) { return new sap.m.FeedInput(); };

/**
 * Sets a new value for property {@link #getValue value}.
 * 
 * The text value of the feed input. As long as the user has not entered any text the post button is disabled
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sValue New value for property <code>value</code>
 * @returns {sap.m.FeedInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedInput.prototype.setValue = function(sValue) { return new sap.m.FeedInput(); };


// ---- sap.m.FeedListItem --------------------------------------------------------------------------

/**
 * Constructor for a new FeedListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getSender sender} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getTimestamp timestamp} : string</li>
 * <li>{@link #getSenderActive senderActive} : boolean (default: true)</li>
 * <li>{@link #getIconActive iconActive} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getShowIcon showIcon} : boolean (default: true)</li>
 * <li>{@link #getConvertLinksToAnchorTags convertLinksToAnchorTags} : sap.m.LinkConversion (default: None)</li>
 * <li>{@link #getConvertedLinksDefaultTarget convertedLinksDefaultTarget} : string (default: _blank)</li>
 * <li>{@link #getMaxCharacters maxCharacters} : int</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:senderPress senderPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:iconPress iconPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The control provides a set of properties for text, sender information, time stamp.
 * Beginning with release 1.23 the new feature expand / collapse was introduced, which uses the property maxCharacters.
 * Beginning with release 1.44, sap.m.FormattedText was introduced which allows html formatted text to be displayed
 * @extends sap.m.ListItemBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FeedListItem = function(sId,mSettings) {};
/**
 * Event is fired when the icon is pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.domRef Dom reference of the feed item's icon to be used for positioning.
 * @param {function} oControlEvent.getParameters.getDomRef Function to retrieve the DOM reference for the <code>iconPress</code> event.
 * The function returns the DOM element of the icon or null
 * @public
 * 
 */
sap.m.FeedListItem.prototype.iconPress = function(oControlEvent) {  };

/**
 * Event is fired when name of the sender is pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.domRef Dom reference of the feed item's sender string to be used for positioning.
 * @param {function} oControlEvent.getParameters.getDomRef Function to retrieve the DOM reference for the <code>senderPress</code> event.
 * The function returns the DOM element of the sender link or null
 * @public
 * 
 */
sap.m.FeedListItem.prototype.senderPress = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:iconPress iconPress} event of this <code>sap.m.FeedListItem</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.FeedListItem</code> itself.
 * 
 * Event is fired when the icon is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code> itself
 * 
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.attachIconPress = function(oData,fnFunction,oListener) { return new sap.m.FeedListItem(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:senderPress senderPress} event of this <code>sap.m.FeedListItem</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.FeedListItem</code> itself.
 * 
 * Event is fired when name of the sender is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code> itself
 * 
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.FeedListItem.prototype.attachSenderPress = function(oData,fnFunction,oListener) { return new sap.m.FeedListItem(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:iconPress iconPress} event of this <code>sap.m.FeedListItem</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.detachIconPress = function(fnFunction,oListener) { return new sap.m.FeedListItem(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:senderPress senderPress} event of this <code>sap.m.FeedListItem</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.detachSenderPress = function(fnFunction,oListener) { return new sap.m.FeedListItem(); };

/**
 * Creates a new subclass of class sap.m.FeedListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FeedListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:iconPress iconPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.domRef] Dom reference of the feed item's icon to be used for positioning.
 * @param {function} [mParameters.getDomRef] Function to retrieve the DOM reference for the <code>iconPress</code> event.
 * The function returns the DOM element of the icon or null
 * 
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.FeedListItem.prototype.fireIconPress = function(mParameters) { return new sap.m.FeedListItem(); };

/**
 * Fires event {@link #event:senderPress senderPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.domRef] Dom reference of the feed item's sender string to be used for positioning.
 * @param {function} [mParameters.getDomRef] Function to retrieve the DOM reference for the <code>senderPress</code> event.
 * The function returns the DOM element of the sender link or null
 * 
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.FeedListItem.prototype.fireSenderPress = function(mParameters) { return new sap.m.FeedListItem(); };

/**
 * Gets current value of property {@link #getActiveIcon activeIcon}.
 * 
 * Icon displayed when the list item is active.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>activeIcon</code>
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getConvertedLinksDefaultTarget convertedLinksDefaultTarget}.
 * 
 * Determines the target attribute of the generated HTML anchor tags. Note: Applicable only if ConvertLinksToAnchorTags property is used with a value other than sap.m.LinkConversion.None. Options are the standard values for the target attribute of the HTML anchor tag: _self, _top, _blank, _parent, _search.
 * 
 * Default value is <code>_blank</code>.
 * @returns {string} Value of property <code>convertedLinksDefaultTarget</code>
 * @since 1.46.1
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getConvertedLinksDefaultTarget = function() { return ""; };

/**
 * Gets current value of property {@link #getConvertLinksToAnchorTags convertLinksToAnchorTags}.
 * 
 * Determines whether strings that appear to be links will be converted to HTML anchor tags, and what are the criteria for recognizing them.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.m.LinkConversion} Value of property <code>convertLinksToAnchorTags</code>
 * @since 1.46.1
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getConvertLinksToAnchorTags = function() { return new sap.m.LinkConversion(); };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font. If no icon is provided, a default person-placeholder icon is displayed.
 * Icon is only shown if showIcon = true.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIconActive iconActive}.
 * 
 * If true, icon is a link, which will fire 'iconPress' events. If false, icon is normal image
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconActive</code>
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getIconActive = function() { return false; };

/**
 * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconDensityAware</code>
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getIconDensityAware = function() { return false; };

/**
 * Gets current value of property {@link #getInfo info}.
 * 
 * The Info text.
 * 
 * @returns {string} Value of property <code>info</code>
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getInfo = function() { return ""; };

/**
 * Gets current value of property {@link #getMaxCharacters maxCharacters}.
 * 
 * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters on desktops as limits. Based on these values, the text of the FeedListItem is collapsed once text reaches these limits. In this case, only the specified number of characters is displayed. By clicking on the text link More, the entire text can be displayed. The text link Less collapses the text. The application is able to set the value to its needs.
 * 
 * @returns {int} Value of property <code>maxCharacters</code>
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getMaxCharacters = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.FeedListItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.FeedListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSender sender}.
 * 
 * Sender of the chunk
 * 
 * @returns {string} Value of property <code>sender</code>
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getSender = function() { return ""; };

/**
 * Gets current value of property {@link #getSenderActive senderActive}.
 * 
 * If true, sender string is a link, which will fire 'senderPress' events. If false, sender is normal text.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>senderActive</code>
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getSenderActive = function() { return false; };

/**
 * Gets current value of property {@link #getShowIcon showIcon}.
 * 
 * If set to "true" (default), icons will be displayed, if set to false icons are hidden
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showIcon</code>
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getShowIcon = function() { return false; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * The FeedListItem text. It supports html formatted tags as described in the documentation of sap.m.FormattedText
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTimestamp timestamp}.
 * 
 * This chunks timestamp
 * 
 * @returns {string} Value of property <code>timestamp</code>
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.getTimestamp = function() { return ""; };

/**
 * Sets a new value for property {@link #getActiveIcon activeIcon}.
 * 
 * Icon displayed when the list item is active.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sActiveIcon New value for property <code>activeIcon</code>
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.FeedListItem(); };

/**
 * Sets a new value for property {@link #getConvertedLinksDefaultTarget convertedLinksDefaultTarget}.
 * 
 * Determines the target attribute of the generated HTML anchor tags. Note: Applicable only if ConvertLinksToAnchorTags property is used with a value other than sap.m.LinkConversion.None. Options are the standard values for the target attribute of the HTML anchor tag: _self, _top, _blank, _parent, _search.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>_blank</code>.
 * @param {string} sConvertedLinksDefaultTarget New value for property <code>convertedLinksDefaultTarget</code>
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46.1
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setConvertedLinksDefaultTarget = function(sConvertedLinksDefaultTarget) { return new sap.m.FeedListItem(); };

/**
 * Sets a new value for property {@link #getConvertLinksToAnchorTags convertLinksToAnchorTags}.
 * 
 * Determines whether strings that appear to be links will be converted to HTML anchor tags, and what are the criteria for recognizing them.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.m.LinkConversion} sConvertLinksToAnchorTags New value for property <code>convertLinksToAnchorTags</code>
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46.1
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setConvertLinksToAnchorTags = function(sConvertLinksToAnchorTags) { return new sap.m.FeedListItem(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font. If no icon is provided, a default person-placeholder icon is displayed.
 * Icon is only shown if showIcon = true.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setIcon = function(sIcon) { return new sap.m.FeedListItem(); };

/**
 * Sets a new value for property {@link #getIconActive iconActive}.
 * 
 * If true, icon is a link, which will fire 'iconPress' events. If false, icon is normal image
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconActive New value for property <code>iconActive</code>
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setIconActive = function(bIconActive) { return new sap.m.FeedListItem(); };

/**
 * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware New value for property <code>iconDensityAware</code>
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.FeedListItem(); };

/**
 * Sets a new value for property {@link #getInfo info}.
 * 
 * The Info text.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sInfo New value for property <code>info</code>
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setInfo = function(sInfo) { return new sap.m.FeedListItem(); };

/**
 * Sets a new value for property {@link #getMaxCharacters maxCharacters}.
 * 
 * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters on desktops as limits. Based on these values, the text of the FeedListItem is collapsed once text reaches these limits. In this case, only the specified number of characters is displayed. By clicking on the text link More, the entire text can be displayed. The text link Less collapses the text. The application is able to set the value to its needs.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iMaxCharacters New value for property <code>maxCharacters</code>
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setMaxCharacters = function(iMaxCharacters) { return new sap.m.FeedListItem(); };

/**
 * Sets a new value for property {@link #getSender sender}.
 * 
 * Sender of the chunk
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSender New value for property <code>sender</code>
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setSender = function(sSender) { return new sap.m.FeedListItem(); };

/**
 * Sets a new value for property {@link #getSenderActive senderActive}.
 * 
 * If true, sender string is a link, which will fire 'senderPress' events. If false, sender is normal text.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bSenderActive New value for property <code>senderActive</code>
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setSenderActive = function(bSenderActive) { return new sap.m.FeedListItem(); };

/**
 * Sets a new value for property {@link #getShowIcon showIcon}.
 * 
 * If set to "true" (default), icons will be displayed, if set to false icons are hidden
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowIcon New value for property <code>showIcon</code>
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setShowIcon = function(bShowIcon) { return new sap.m.FeedListItem(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * The FeedListItem text. It supports html formatted tags as described in the documentation of sap.m.FormattedText
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setText = function(sText) { return new sap.m.FeedListItem(); };

/**
 * Sets a new value for property {@link #getTimestamp timestamp}.
 * 
 * This chunks timestamp
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTimestamp New value for property <code>timestamp</code>
 * @returns {sap.m.FeedListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FeedListItem.prototype.setTimestamp = function(sTimestamp) { return new sap.m.FeedListItem(); };

/**
 * Redefinition of sap.m.ListItemBase.setType: type = "sap.m.ListType.Navigation" behaves like type = "sap.m.ListType.Active" for a FeedListItem
 * 
 * @public
 * @param {sap.m.ListType} type new value for property type
 * @returns {sap.m.FeedListItem} this allows method chaining
 * 
 */
sap.m.FeedListItem.prototype.setType = function(type) { return new sap.m.FeedListItem(); };

/**
 * Redefinition of sap.m.ListItemBase.setUnread: Unread is not supported for FeedListItem
 * @public
 * @param {boolean} value new value for property unread is ignored
 * @returns {sap.m.FeedListItem} this allows method chaining
 * 
 */
sap.m.FeedListItem.prototype.setUnread = function(value) { return new sap.m.FeedListItem(); };


// ---- sap.m.FlexAlignContent --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexAlignContent.toString = function() { return ""; };

// ---- sap.m.FlexAlignItems --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexAlignItems.toString = function() { return ""; };

// ---- sap.m.FlexAlignSelf --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexAlignSelf.toString = function() { return ""; };

// ---- sap.m.FlexBox --------------------------------------------------------------------------

/**
 * Constructor for a new <code>sap.m.FlexBox</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getDisplayInline displayInline} : boolean (default: false)</li>
 * <li>{@link #getDirection direction} : sap.m.FlexDirection (default: Row)</li>
 * <li>{@link #getFitContainer fitContainer} : boolean (default: false)</li>
 * <li>{@link #getRenderType renderType} : sap.m.FlexRendertype (default: Div)</li>
 * <li>{@link #getJustifyContent justifyContent} : sap.m.FlexJustifyContent (default: Start)</li>
 * <li>{@link #getAlignItems alignItems} : sap.m.FlexAlignItems (default: Stretch)</li>
 * <li>{@link #getWrap wrap} : sap.m.FlexWrap (default: NoWrap)</li>
 * <li>{@link #getAlignContent alignContent} : sap.m.FlexAlignContent (default: Stretch)</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: Transparent)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Control[] (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The <code>sap.m.FlexBox</code> control builds the container for a flexible box layout.<br>
 * <br>
 * <b>Note:</b> Be sure to check the <code>renderType</code> setting to avoid issues due to browser inconsistencies.
 * 
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FlexBox = function(sId,mSettings) {};
/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.ui.core.Control}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.FlexBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.addItem = function(oItem) { return new sap.m.FlexBox(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.FlexBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.destroyItems = function() { return new sap.m.FlexBox(); };

/**
 * Creates a new subclass of class sap.m.FlexBox with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FlexBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.FlexBox.prototype.getAccessibilityInfo = function() {  };

/**
 * Gets current value of property {@link #getAlignContent alignContent}.
 * 
 * Determines the layout behavior of container lines when there's extra space along the cross-axis. This property has no effect in Internet Explorer 10.
 * 
 * Default value is <code>Stretch</code>.
 * @returns {sap.m.FlexAlignContent} Value of property <code>alignContent</code>
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.getAlignContent = function() { return new sap.m.FlexAlignContent(); };

/**
 * Gets current value of property {@link #getAlignItems alignItems}.
 * 
 * Determines the layout behavior of items along the cross-axis. "Baseline" is not supported in Internet Explorer 10.
 * 
 * Default value is <code>Stretch</code>.
 * @returns {sap.m.FlexAlignItems} Value of property <code>alignItems</code>
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.getAlignItems = function() { return new sap.m.FlexAlignItems(); };

/**
 * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Defines the background style of the <code>sap.m.FlexBox</code>.
 * 
 * Default value is <code>Transparent</code>.
 * @returns {sap.m.BackgroundDesign} Value of property <code>backgroundDesign</code>
 * @since 1.38.5
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * Gets current value of property {@link #getDirection direction}.
 * 
 * Determines the direction of the layout of child elements.
 * 
 * Default value is <code>Row</code>.
 * @returns {sap.m.FlexDirection} Value of property <code>direction</code>
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.getDirection = function() { return new sap.m.FlexDirection(); };

/**
 * Gets current value of property {@link #getDisplayInline displayInline}.
 * 
 * Determines whether the <code>sap.m.FlexBox</code> is in block or inline mode.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>displayInline</code>
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.getDisplayInline = function() { return false; };

/**
 * Gets current value of property {@link #getFitContainer fitContainer}.
 * 
 * Determines whether the <code>sap.m.FlexBox</code> will be sized to completely fill its container. If the <code>sap.m.FlexBox</code> is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>fitContainer</code>
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.getFitContainer = function() { return false; };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * The height of the <code>sap.m.FlexBox</code>. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * @since 1.9.1
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * Flex items within the flexible box layout
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.getItems = function() { return new Array(); };

/**
 * Gets current value of property {@link #getJustifyContent justifyContent}.
 * 
 * Determines the layout behavior along the main axis.
 * 
 * Default value is <code>Start</code>.
 * @returns {sap.m.FlexJustifyContent} Value of property <code>justifyContent</code>
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.getJustifyContent = function() { return new sap.m.FlexJustifyContent(); };

/**
 * Returns a metadata object for class sap.m.FlexBox.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.FlexBox.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getRenderType renderType}.
 * 
 * Determines whether the layout is rendered as a series of divs or as an unordered list (ul).<br>
 * <br>
 * We recommend to use <code>Bare</code> in most cases to avoid layout issues due to browser inconsistencies.
 * 
 * Default value is <code>Div</code>.
 * @returns {sap.m.FlexRendertype} Value of property <code>renderType</code>
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.getRenderType = function() { return new sap.m.FlexRendertype(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * The width of the <code>sap.m.FlexBox</code>. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * @since 1.9.1
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getWrap wrap}.
 * 
 * Determines the wrapping behavior of the flex container. This property has no effect in older browsers, e.g. Android Native 4.3 and below.
 * 
 * Default value is <code>NoWrap</code>.
 * @returns {sap.m.FlexWrap} Value of property <code>wrap</code>
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.getWrap = function() { return new sap.m.FlexWrap(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.ui.core.Control}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.FlexBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.insertItem = function(oItem,iIndex) { return new sap.m.FlexBox(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.ui.core.Control} vItem The item to remove or its index or id
 * @returns {sap.ui.core.Control} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.removeItem = function(vItem) { return new sap.ui.core.Control(); };

/**
 * Sets a new value for property {@link #getAlignContent alignContent}.
 * 
 * Determines the layout behavior of container lines when there's extra space along the cross-axis. This property has no effect in Internet Explorer 10.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Stretch</code>.
 * @param {sap.m.FlexAlignContent} sAlignContent New value for property <code>alignContent</code>
 * @returns {sap.m.FlexBox} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.setAlignContent = function(sAlignContent) { return new sap.m.FlexBox(); };

/**
 * Sets a new value for property {@link #getAlignItems alignItems}.
 * 
 * Determines the layout behavior of items along the cross-axis. "Baseline" is not supported in Internet Explorer 10.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Stretch</code>.
 * @param {sap.m.FlexAlignItems} sAlignItems New value for property <code>alignItems</code>
 * @returns {sap.m.FlexBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.setAlignItems = function(sAlignItems) { return new sap.m.FlexBox(); };

/**
 * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Defines the background style of the <code>sap.m.FlexBox</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Transparent</code>.
 * @param {sap.m.BackgroundDesign} sBackgroundDesign New value for property <code>backgroundDesign</code>
 * @returns {sap.m.FlexBox} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.5
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.FlexBox(); };

/**
 * Sets a new value for property {@link #getDirection direction}.
 * 
 * Determines the direction of the layout of child elements.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Row</code>.
 * @param {sap.m.FlexDirection} sDirection New value for property <code>direction</code>
 * @returns {sap.m.FlexBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.setDirection = function(sDirection) { return new sap.m.FlexBox(); };

/**
 * Sets a new value for property {@link #getDisplayInline displayInline}.
 * 
 * Determines whether the <code>sap.m.FlexBox</code> is in block or inline mode.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bDisplayInline New value for property <code>displayInline</code>
 * @returns {sap.m.FlexBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.setDisplayInline = function(bDisplayInline) { return new sap.m.FlexBox(); };

/**
 * Sets a new value for property {@link #getFitContainer fitContainer}.
 * 
 * Determines whether the <code>sap.m.FlexBox</code> will be sized to completely fill its container. If the <code>sap.m.FlexBox</code> is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bFitContainer New value for property <code>fitContainer</code>
 * @returns {sap.m.FlexBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.setFitContainer = function(bFitContainer) { return new sap.m.FlexBox(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * The height of the <code>sap.m.FlexBox</code>. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.m.FlexBox} Reference to <code>this</code> in order to allow method chaining
 * @since 1.9.1
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.setHeight = function(sHeight) { return new sap.m.FlexBox(); };

/**
 * Sets a new value for property {@link #getJustifyContent justifyContent}.
 * 
 * Determines the layout behavior along the main axis.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Start</code>.
 * @param {sap.m.FlexJustifyContent} sJustifyContent New value for property <code>justifyContent</code>
 * @returns {sap.m.FlexBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.setJustifyContent = function(sJustifyContent) { return new sap.m.FlexBox(); };

/**
 * Sets a new value for property {@link #getRenderType renderType}.
 * 
 * Determines whether the layout is rendered as a series of divs or as an unordered list (ul).<br>
 * <br>
 * We recommend to use <code>Bare</code> in most cases to avoid layout issues due to browser inconsistencies.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Div</code>.
 * @param {sap.m.FlexRendertype} sRenderType New value for property <code>renderType</code>
 * @returns {sap.m.FlexBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.setRenderType = function(sRenderType) { return new sap.m.FlexBox(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * The width of the <code>sap.m.FlexBox</code>. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.FlexBox} Reference to <code>this</code> in order to allow method chaining
 * @since 1.9.1
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.setWidth = function(sWidth) { return new sap.m.FlexBox(); };

/**
 * Sets a new value for property {@link #getWrap wrap}.
 * 
 * Determines the wrapping behavior of the flex container. This property has no effect in older browsers, e.g. Android Native 4.3 and below.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>NoWrap</code>.
 * @param {sap.m.FlexWrap} sWrap New value for property <code>wrap</code>
 * @returns {sap.m.FlexBox} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.FlexBox.prototype.setWrap = function(sWrap) { return new sap.m.FlexBox(); };


// ---- sap.m.FlexDirection --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexDirection.toString = function() { return ""; };

// ---- sap.m.FlexItemData --------------------------------------------------------------------------

/**
 * Constructor for a new <code>sap.m.FlexItemData</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAlignSelf alignSelf} : sap.m.FlexAlignSelf (default: Auto)</li>
 * <li>{@link #getOrder order} : int (default: 0)</li>
 * <li>{@link #getGrowFactor growFactor} : float (default: 0)</li>
 * <li>{@link #getShrinkFactor shrinkFactor} : float (default: 1)</li>
 * <li>{@link #getBaseSize baseSize} : sap.ui.core.CSSSize (default: auto)</li>
 * <li>{@link #getMinHeight minHeight} : sap.ui.core.CSSSize (default: auto)</li>
 * <li>{@link #getMaxHeight maxHeight} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getMinWidth minWidth} : sap.ui.core.CSSSize (default: auto)</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getStyleClass styleClass} : string (default: )</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: Transparent)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new element, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new element
 * 
 * @class
 * Holds layout data for a FlexBox|HBox|VBox
 * @extends sap.ui.core.LayoutData
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FlexItemData = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.FlexItemData with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FlexItemData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getAlignSelf alignSelf}.
 * 
 * Determines cross-axis alignment of individual element (not currently supported in Internet Explorer)
 * 
 * Default value is <code>Auto</code>.
 * @returns {sap.m.FlexAlignSelf} Value of property <code>alignSelf</code>
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getAlignSelf = function() { return new sap.m.FlexAlignSelf(); };

/**
 * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Defines the background style of the flex item.
 * 
 * Default value is <code>Transparent</code>.
 * @returns {sap.m.BackgroundDesign} Value of property <code>backgroundDesign</code>
 * @since 1.38.5
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * Gets current value of property {@link #getBaseSize baseSize}.
 * 
 * The base size is the initial main size of the item for the flex algorithm. If set to "auto", this will be the computed size of the item.
 * 
 * Default value is <code>auto</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>baseSize</code>
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getBaseSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getGrowFactor growFactor}.
 * 
 * Determines the flexibility of the flex item when allocatable space is remaining.
 * 
 * Default value is <code>0</code>.
 * @returns {float} Value of property <code>growFactor</code>
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getGrowFactor = function() { return 0.0; };

/**
 * Gets current value of property {@link #getMaxHeight maxHeight}.
 * 
 * The maximum height of the flex item.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>maxHeight</code>
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getMaxHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getMaxWidth maxWidth}.
 * 
 * The maximum height of the flex item.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>maxWidth</code>
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getMaxWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.FlexItemData.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.FlexItemData.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMinHeight minHeight}.
 * 
 * The minimum height of the flex item.
 * 
 * Default value is <code>auto</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>minHeight</code>
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getMinHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getMinWidth minWidth}.
 * 
 * The minimum height of the flex item.
 * 
 * Default value is <code>auto</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>minWidth</code>
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getMinWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getOrder order}.
 * 
 * Determines the display order of flex items independent of their source code order.
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>order</code>
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getOrder = function() { return 0; };

/**
 * Gets current value of property {@link #getShrinkFactor shrinkFactor}.
 * 
 * The shrink factor determines how much the flex item will shrink relative to the rest of the flex items in the flex container when negative free space is distributed.
 * 
 * Default value is <code>1</code>.
 * @returns {float} Value of property <code>shrinkFactor</code>
 * @since 1.24.0
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getShrinkFactor = function() { return 0.0; };

/**
 * Gets current value of property {@link #getStyleClass styleClass}.
 * 
 * The style class will be applied to the flex item and can be used for CSS selectors
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>styleClass</code>
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.getStyleClass = function() { return ""; };

/**
 * Sets a new value for property {@link #getAlignSelf alignSelf}.
 * 
 * Determines cross-axis alignment of individual element (not currently supported in Internet Explorer)
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Auto</code>.
 * @param {sap.m.FlexAlignSelf} sAlignSelf New value for property <code>alignSelf</code>
 * @returns {sap.m.FlexItemData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setAlignSelf = function(sAlignSelf) { return new sap.m.FlexItemData(); };

/**
 * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Defines the background style of the flex item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Transparent</code>.
 * @param {sap.m.BackgroundDesign} sBackgroundDesign New value for property <code>backgroundDesign</code>
 * @returns {sap.m.FlexItemData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.5
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.FlexItemData(); };

/**
 * Sets a new value for property {@link #getBaseSize baseSize}.
 * 
 * The base size is the initial main size of the item for the flex algorithm. If set to "auto", this will be the computed size of the item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.core.CSSSize} sBaseSize New value for property <code>baseSize</code>
 * @returns {sap.m.FlexItemData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setBaseSize = function(sBaseSize) { return new sap.m.FlexItemData(); };

/**
 * Sets a new value for property {@link #getGrowFactor growFactor}.
 * 
 * Determines the flexibility of the flex item when allocatable space is remaining.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {float} fGrowFactor New value for property <code>growFactor</code>
 * @returns {sap.m.FlexItemData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setGrowFactor = function(fGrowFactor) { return new sap.m.FlexItemData(); };

/**
 * Sets a new value for property {@link #getMaxHeight maxHeight}.
 * 
 * The maximum height of the flex item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sMaxHeight New value for property <code>maxHeight</code>
 * @returns {sap.m.FlexItemData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setMaxHeight = function(sMaxHeight) { return new sap.m.FlexItemData(); };

/**
 * Sets a new value for property {@link #getMaxWidth maxWidth}.
 * 
 * The maximum height of the flex item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sMaxWidth New value for property <code>maxWidth</code>
 * @returns {sap.m.FlexItemData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setMaxWidth = function(sMaxWidth) { return new sap.m.FlexItemData(); };

/**
 * Sets a new value for property {@link #getMinHeight minHeight}.
 * 
 * The minimum height of the flex item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.core.CSSSize} sMinHeight New value for property <code>minHeight</code>
 * @returns {sap.m.FlexItemData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setMinHeight = function(sMinHeight) { return new sap.m.FlexItemData(); };

/**
 * Sets a new value for property {@link #getMinWidth minWidth}.
 * 
 * The minimum height of the flex item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.core.CSSSize} sMinWidth New value for property <code>minWidth</code>
 * @returns {sap.m.FlexItemData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setMinWidth = function(sMinWidth) { return new sap.m.FlexItemData(); };

/**
 * Sets a new value for property {@link #getOrder order}.
 * 
 * Determines the display order of flex items independent of their source code order.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {int} iOrder New value for property <code>order</code>
 * @returns {sap.m.FlexItemData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setOrder = function(iOrder) { return new sap.m.FlexItemData(); };

/**
 * Sets a new value for property {@link #getShrinkFactor shrinkFactor}.
 * 
 * The shrink factor determines how much the flex item will shrink relative to the rest of the flex items in the flex container when negative free space is distributed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>1</code>.
 * @param {float} fShrinkFactor New value for property <code>shrinkFactor</code>
 * @returns {sap.m.FlexItemData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24.0
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setShrinkFactor = function(fShrinkFactor) { return new sap.m.FlexItemData(); };

/**
 * Sets a new value for property {@link #getStyleClass styleClass}.
 * 
 * The style class will be applied to the flex item and can be used for CSS selectors
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sStyleClass New value for property <code>styleClass</code>
 * @returns {sap.m.FlexItemData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FlexItemData.prototype.setStyleClass = function(sStyleClass) { return new sap.m.FlexItemData(); };


// ---- sap.m.FlexJustifyContent --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexJustifyContent.toString = function() { return ""; };

// ---- sap.m.FlexRendertype --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexRendertype.toString = function() { return ""; };

// ---- sap.m.FlexWrap --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FlexWrap.toString = function() { return ""; };

// ---- sap.m.FormattedText --------------------------------------------------------------------------

/**
 * Constructor for a new FormattedText.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHtmlText htmlText} : string (default: )</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getConvertLinksToAnchorTags convertLinksToAnchorTags} : sap.m.LinkConversion (default: None)</li>
 * <li>{@link #getConvertedLinksDefaultTarget convertedLinksDefaultTarget} : string (default: _blank)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The FormattedText control allows the usage of a limited set of tags for inline display of formatted text in HTML format.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.38.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.FormattedText = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.FormattedText with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.FormattedText.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getConvertedLinksDefaultTarget convertedLinksDefaultTarget}.
 * 
 * Determines the <code>target</code> attribute of the generated HTML anchor tags.
 * 
 * <b>Note:</b> Applicable only if <code>ConvertLinksToAnchorTags</code> property is used with a value other than <code>sap.m.LinkConversion.None</code>.
 * Options are the standard values for the <code>target</code> attribute of the HTML anchor tag:
 * <code>_self</code>, <code>_top</code>, <code>_blank</code>, <code>_parent</code>, <code>_search</code>.
 * 
 * Default value is <code>_blank</code>.
 * @returns {string} Value of property <code>convertedLinksDefaultTarget</code>
 * @since 1.45.5
 * 
 * @public
 * 
 */
sap.m.FormattedText.prototype.getConvertedLinksDefaultTarget = function() { return ""; };

/**
 * Gets current value of property {@link #getConvertLinksToAnchorTags convertLinksToAnchorTags}.
 * 
 * Determines whether strings that appear to be links will be converted to HTML anchor tags,
 * and what are the criteria for recognizing them.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.m.LinkConversion} Value of property <code>convertLinksToAnchorTags</code>
 * @since 1.45.5
 * 
 * @public
 * 
 */
sap.m.FormattedText.prototype.getConvertLinksToAnchorTags = function() { return new sap.m.LinkConversion(); };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * Optional height of the control in CSS units.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.m.FormattedText.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getHtmlText htmlText}.
 * 
 * Text in HTML format.
 * The following tags are supported:
 * <ul>
 * 	<li><code>a</code></li>
 * 	<li><code>abbr</code></li>
 * 	<li><code>blockquote</code></li>
 * 	<li><code>br</code></li>
 * 	<li><code>cite</code></li>
 * 	<li><code>code</code></li>
 * 	<li><code>em</code></li>
 * 	<li><code>h1</code></li>
 * 	<li><code>h2</code></li>
 * 	<li><code>h3</code></li>
 * 	<li><code>h4</code></li>
 * 	<li><code>h5</code></li>
 * 	<li><code>h6</code></li>
 * 	<li><code>p</code></li>
 * 	<li><code>pre</code></li>
 * 	<li><code>strong</code></li>
 * 	<li><code>span</code></li>
 * 	<li><code>u</code></li>
 * 	<li><code>dl</code></li>
 * 	<li><code>dt</code></li>
 * 	<li><code>dl</code></li>
 * 	<li><code>ul</code></li>
 * 	<li><code>ol</code></li>
 * 	<li><code>li</code></li>
 * </ul>
 * <p><code>class, style,</code> and <code>target</code> attributes are allowed.
 * If <code>target</code> is not set, links open in a new window by default.
 * <p>Only safe <code>href</code> attributes can be used. See {@link jQuery.sap.validateUrl}.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>htmlText</code>
 * 
 * @public
 * 
 */
sap.m.FormattedText.prototype.getHtmlText = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.FormattedText.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.FormattedText.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Optional width of the control in CSS units.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.FormattedText.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Sets a new value for property {@link #getConvertedLinksDefaultTarget convertedLinksDefaultTarget}.
 * 
 * Determines the <code>target</code> attribute of the generated HTML anchor tags.
 * 
 * <b>Note:</b> Applicable only if <code>ConvertLinksToAnchorTags</code> property is used with a value other than <code>sap.m.LinkConversion.None</code>.
 * Options are the standard values for the <code>target</code> attribute of the HTML anchor tag:
 * <code>_self</code>, <code>_top</code>, <code>_blank</code>, <code>_parent</code>, <code>_search</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>_blank</code>.
 * @param {string} sConvertedLinksDefaultTarget New value for property <code>convertedLinksDefaultTarget</code>
 * @returns {sap.m.FormattedText} Reference to <code>this</code> in order to allow method chaining
 * @since 1.45.5
 * 
 * @public
 * 
 */
sap.m.FormattedText.prototype.setConvertedLinksDefaultTarget = function(sConvertedLinksDefaultTarget) { return new sap.m.FormattedText(); };

/**
 * Sets a new value for property {@link #getConvertLinksToAnchorTags convertLinksToAnchorTags}.
 * 
 * Determines whether strings that appear to be links will be converted to HTML anchor tags,
 * and what are the criteria for recognizing them.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.m.LinkConversion} sConvertLinksToAnchorTags New value for property <code>convertLinksToAnchorTags</code>
 * @returns {sap.m.FormattedText} Reference to <code>this</code> in order to allow method chaining
 * @since 1.45.5
 * 
 * @public
 * 
 */
sap.m.FormattedText.prototype.setConvertLinksToAnchorTags = function(sConvertLinksToAnchorTags) { return new sap.m.FormattedText(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * Optional height of the control in CSS units.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.m.FormattedText} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FormattedText.prototype.setHeight = function(sHeight) { return new sap.m.FormattedText(); };

/**
 * Defines the HTML text to be displayed.
 * @param {string} sText HTML text as a string
 * @return {sap.m.FormattedText} this for chaining
 * @public
 * 
 */
sap.m.FormattedText.prototype.setHtmlText = function(sText) { return new sap.m.FormattedText(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Optional width of the control in CSS units.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.FormattedText} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.FormattedText.prototype.setWidth = function(sWidth) { return new sap.m.FormattedText(); };


// ---- sap.m.FrameType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.FrameType.toString = function() { return ""; };

// ---- sap.m.GenericTile --------------------------------------------------------------------------

/**
 * Constructor for a new sap.m.GenericTile control.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMode mode} : sap.m.GenericTileMode (default: ContentMode)</li>
 * <li>{@link #getHeader header} : string</li>
 * <li>{@link #getSubheader subheader} : string</li>
 * <li>{@link #getFailedText failedText} : string</li>
 * <li>{@link #getSize size} : sap.m.Size (default: Auto)</li>
 * <li>{@link #getFrameType frameType} : sap.m.FrameType (default: OneByOne)</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getHeaderImage headerImage} : sap.ui.core.URI</li>
 * <li>{@link #getState state} : sap.m.LoadState (default: Loaded)</li>
 * <li>{@link #getImageDescription imageDescription} : string</li>
 * <li>{@link #getScope scope} : sap.m.GenericTileScope (default: Display)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTileContent tileContent} : sap.m.TileContent[] (default)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class Displays header, subheader, and a customizable main area in a tile format. Since 1.44, also an in-line format which contains only header and subheader is supported.
 * 
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * @since 1.34
 * 
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.GenericTile = function(sId,mSettings) {};
/**
 * The event is fired when the user chooses the tile.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.GenericTileScope} oControlEvent.getParameters.scope The current scope the GenericTile was in when the event occurred.
 * @param {string} oControlEvent.getParameters.action The action that was pressed on the tile. In the Actions scope, the available actions are Press and Remove.
 * In Display scope, the parameter value is only Press.
 * @param {any} oControlEvent.getParameters.domRef The Element's DOM Element. Points to GenericTile instance DOM Element in Display scope.
 * In Actions scope the domRef points to the DOM Element of the remove button (if pressed) or the more icon.
 * @public
 * 
 */
sap.m.GenericTile.prototype.press = function(oControlEvent) {  };

/**
 * Adds some tileContent to the aggregation {@link #getTileContent tileContent}.
 * @param {sap.m.TileContent}
 *            oTileContent the tileContent to add; if empty, nothing is inserted
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.addTileContent = function(oTileContent) { return new sap.m.GenericTile(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.GenericTile</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.GenericTile</code> itself.
 * 
 * The event is fired when the user chooses the tile.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.GenericTile</code> itself
 * 
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.GenericTile.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.GenericTile(); };

/**
 * Binds aggregation {@link #getTileContent tileContent} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.bindTileContent = function(oBindingInfo) { return new sap.m.GenericTile(); };

/**
 * Destroys the icon in the aggregation {@link #getIcon icon}.
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.36.0. This aggregation is deprecated, use sap.m.TileContent control to display an icon instead.
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.destroyIcon = function() { return new sap.m.GenericTile(); };

/**
 * Destroys all the tileContent in the aggregation {@link #getTileContent tileContent}.
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.destroyTileContent = function() { return new sap.m.GenericTile(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.GenericTile</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.GenericTile(); };

/**
 * Creates a new subclass of class sap.m.GenericTile with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.GenericTile.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.GenericTileScope} [mParameters.scope] The current scope the GenericTile was in when the event occurred.
 * @param {string} [mParameters.action] The action that was pressed on the tile. In the Actions scope, the available actions are Press and Remove.
 * In Display scope, the parameter value is only Press.
 * @param {any} [mParameters.domRef] The Element's DOM Element. Points to GenericTile instance DOM Element in Display scope.
 * In Actions scope the domRef points to the DOM Element of the remove button (if pressed) or the more icon.
 * 
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.GenericTile.prototype.firePress = function(mParameters) { return new sap.m.GenericTile(); };

/**
 * Gets current value of property {@link #getBackgroundImage backgroundImage}.
 * 
 * The URI of the background image.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>backgroundImage</code>
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.getBackgroundImage = function() { return new sap.ui.core.URI(); };

/**
 * Provides an interface to the tile's layout information consistent in all modes and content densities.
 * 
 * @returns {object[]} An array containing all of the tile's bounding rectangles
 * @experimental since 1.44.1 This method's implementation is subject to change
 * @protected
 * 
 */
sap.m.GenericTile.prototype.getBoundingRects = function() { return new Array(); };

/**
 * Gets current value of property {@link #getFailedText failedText}.
 * 
 * The message that appears when the control is in the Failed state.
 * 
 * @returns {string} Value of property <code>failedText</code>
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.getFailedText = function() { return ""; };

/**
 * Gets current value of property {@link #getFrameType frameType}.
 * 
 * The frame type: OneByOne or TwoByOne. Set to OneByOne as default if no property is defined or set to Auto by the app.
 * 
 * Default value is <code>OneByOne</code>.
 * @returns {sap.m.FrameType} Value of property <code>frameType</code>
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.getFrameType = function() { return new sap.m.FrameType(); };

/**
 * Gets current value of property {@link #getHeader header}.
 * 
 * The header of the tile.
 * 
 * @returns {string} Value of property <code>header</code>
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.getHeader = function() { return ""; };

/**
 * Gets current value of property {@link #getHeaderImage headerImage}.
 * 
 * The image to be displayed as a graphical element within the header. This can be an image or an icon from the icon font.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>headerImage</code>
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.getHeaderImage = function() { return new sap.ui.core.URI(); };

/**
 * Gets content of aggregation {@link #getIcon icon}.
 * 
 * An icon or image to be displayed in the control.
 * This aggregation is deprecated since version 1.36.0, to display an icon or image use sap.m.TileContent control instead.
 * 
 * @returns {sap.ui.core.Control}
 * 
 * @deprecated Since version 1.36.0. This aggregation is deprecated, use sap.m.TileContent control to display an icon instead.
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.getIcon = function() { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getImageDescription imageDescription}.
 * 
 * Description of a header image that is used in the tooltip.
 * 
 * @returns {string} Value of property <code>imageDescription</code>
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.getImageDescription = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.GenericTile.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.GenericTile.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMode mode}.
 * 
 * The mode of the GenericTile.
 * 
 * Default value is <code>ContentMode</code>.
 * @returns {sap.m.GenericTileMode} Value of property <code>mode</code>
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.getMode = function() { return new sap.m.GenericTileMode(); };

/**
 * Gets current value of property {@link #getScope scope}.
 * 
 * Changes the visualization in order to enable additional actions with the Generic Tile.
 * 
 * Default value is <code>Display</code>.
 * @returns {sap.m.GenericTileScope} Value of property <code>scope</code>
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.getScope = function() { return new sap.m.GenericTileScope(); };

/**
 * Gets current value of property {@link #getSize size}.
 * 
 * The size of the tile. If not set, then the default size is applied based on the device.
 * 
 * Default value is <code>Auto</code>.
 * @returns {sap.m.Size} Value of property <code>size</code>
 * 
 * @deprecated Since version 1.38.0. The GenericTile control has now a fixed size, depending on the used media (desktop, tablet or phone).
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.getSize = function() { return new sap.m.Size(); };

/**
 * Gets current value of property {@link #getState state}.
 * 
 * The load status.
 * 
 * Default value is <code>Loaded</code>.
 * @returns {sap.m.LoadState} Value of property <code>state</code>
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.getState = function() { return new sap.m.LoadState(); };

/**
 * Gets current value of property {@link #getSubheader subheader}.
 * 
 * The subheader of the tile.
 * 
 * @returns {string} Value of property <code>subheader</code>
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.getSubheader = function() { return ""; };

/**
 * Gets content of aggregation {@link #getTileContent tileContent}.
 * 
 * The content of the tile.
 * 
 * @returns {sap.m.TileContent[]}
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.getTileContent = function() { return new Array(); };

/**
 * Checks for the provided <code>sap.m.TileContent</code> in the aggregation {@link #getTileContent tileContent}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.TileContent}
 *           oTileContent The tileContent whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.indexOfTileContent = function(oTileContent) { return 0; };

/**
 * Inserts a tileContent into the aggregation {@link #getTileContent tileContent}.
 * 
 * @param {sap.m.TileContent}
 *            oTileContent the tileContent to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the tileContent should be inserted at; for
 *              a negative value of <code>iIndex</code>, the tileContent is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the tileContent is inserted at
 *              the last position
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.insertTileContent = function(oTileContent,iIndex) { return new sap.m.GenericTile(); };

/**
 * Removes all the controls from the aggregation {@link #getTileContent tileContent}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.TileContent[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.removeAllTileContent = function() { return new Array(); };

/**
 * Removes a tileContent from the aggregation {@link #getTileContent tileContent}.
 * 
 * @param {int | string | sap.m.TileContent} vTileContent The tileContent to remove or its index or id
 * @returns {sap.m.TileContent} The removed tileContent or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.removeTileContent = function(vTileContent) { return new sap.m.TileContent(); };

/**
 * Sets a new value for property {@link #getBackgroundImage backgroundImage}.
 * 
 * The URI of the background image.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sBackgroundImage New value for property <code>backgroundImage</code>
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.setBackgroundImage = function(sBackgroundImage) { return new sap.m.GenericTile(); };

/**
 * Sets a new value for property {@link #getFailedText failedText}.
 * 
 * The message that appears when the control is in the Failed state.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sFailedText New value for property <code>failedText</code>
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.setFailedText = function(sFailedText) { return new sap.m.GenericTile(); };

/**
 * Sets a new value for property {@link #getFrameType frameType}.
 * 
 * The frame type: OneByOne or TwoByOne. Set to OneByOne as default if no property is defined or set to Auto by the app.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>OneByOne</code>.
 * @param {sap.m.FrameType} sFrameType New value for property <code>frameType</code>
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.setFrameType = function(sFrameType) { return new sap.m.GenericTile(); };

/**
 * Sets a new value for property {@link #getHeader header}.
 * 
 * The header of the tile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sHeader New value for property <code>header</code>
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.setHeader = function(sHeader) { return new sap.m.GenericTile(); };

/**
 * Sets a new value for property {@link #getHeaderImage headerImage}.
 * 
 * The image to be displayed as a graphical element within the header. This can be an image or an icon from the icon font.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sHeaderImage New value for property <code>headerImage</code>
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.setHeaderImage = function(sHeaderImage) { return new sap.m.GenericTile(); };

/**
 * Sets the aggregated {@link #getIcon icon}.
 * @param {sap.ui.core.Control} oIcon The icon to set
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.36.0. This aggregation is deprecated, use sap.m.TileContent control to display an icon instead.
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.setIcon = function(oIcon) { return new sap.m.GenericTile(); };

/**
 * Sets a new value for property {@link #getImageDescription imageDescription}.
 * 
 * Description of a header image that is used in the tooltip.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sImageDescription New value for property <code>imageDescription</code>
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.setImageDescription = function(sImageDescription) { return new sap.m.GenericTile(); };

/**
 * Sets a new value for property {@link #getMode mode}.
 * 
 * The mode of the GenericTile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>ContentMode</code>.
 * @param {sap.m.GenericTileMode} sMode New value for property <code>mode</code>
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.setMode = function(sMode) { return new sap.m.GenericTile(); };

/**
 * Provides an interface to switch on or off the tile's press event. Used in SlideTile for Actions scope.
 * 
 * @param {boolean} value If set to true, the press event of the tile is active.
 * @protected
 * @since 1.46
 * 
 */
sap.m.GenericTile.prototype.setPressEnabled = function(value) {  };

/**
 * Sets a new value for property {@link #getScope scope}.
 * 
 * Changes the visualization in order to enable additional actions with the Generic Tile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Display</code>.
 * @param {sap.m.GenericTileScope} sScope New value for property <code>scope</code>
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.setScope = function(sScope) { return new sap.m.GenericTile(); };

/**
 * Sets a new value for property {@link #getSize size}.
 * 
 * The size of the tile. If not set, then the default size is applied based on the device.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Auto</code>.
 * @param {sap.m.Size} sSize New value for property <code>size</code>
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.38.0. The GenericTile control has now a fixed size, depending on the used media (desktop, tablet or phone).
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.setSize = function(sSize) { return new sap.m.GenericTile(); };

/**
 * Sets a new value for property {@link #getState state}.
 * 
 * The load status.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Loaded</code>.
 * @param {sap.m.LoadState} sState New value for property <code>state</code>
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.setState = function(sState) { return new sap.m.GenericTile(); };

/**
 * Sets a new value for property {@link #getSubheader subheader}.
 * 
 * The subheader of the tile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSubheader New value for property <code>subheader</code>
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.setSubheader = function(sSubheader) { return new sap.m.GenericTile(); };

/**
 * Shows the actions scope view of GenericTile without changing the scope. Used in SlideTile for Actions scope.
 * 
 * @param {boolean} value If set to true, actions view is showed.
 * @protected
 * @since 1.46
 * 
 */
sap.m.GenericTile.prototype.showActionsView = function(value) {  };

/**
 * Unbinds aggregation {@link #getTileContent tileContent} from model data.
 * @returns {sap.m.GenericTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GenericTile.prototype.unbindTileContent = function() { return new sap.m.GenericTile(); };


// ---- sap.m.GenericTileMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.GenericTileMode.toString = function() { return ""; };

// ---- sap.m.GenericTileScope --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.GenericTileScope.toString = function() { return ""; };

// ---- sap.m.GroupHeaderListItem --------------------------------------------------------------------------

/**
 * Constructor for a new GroupHeaderListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getCount count} : string</li>
 * <li>{@link #getUpperCase upperCase} : boolean (default: false)</li>
 * <li>{@link #getTitleTextDirection titleTextDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * 
 * @param {string} [sId] Id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <code>sap.m.GroupHeaderListItem</code> is used to display the title of a group and act as separator between groups in <code>sap.m.List</code> and <code>sap.m.Table</code>.
 * <b>Note:</b> The inherited properties <code>unread</code>, <code>selected</code>, <code>counter</code> and <code>press</code> event from <code>sap.m.ListItemBase</code> are not supported.
 * 
 * @extends sap.m.ListItemBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.GroupHeaderListItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.GroupHeaderListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.GroupHeaderListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getCount count}.
 * 
 * Defines the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group.
 * <b>Note:</b> Will not be displayed if not set.
 * 
 * @returns {string} Value of property <code>count</code>
 * 
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.getCount = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.GroupHeaderListItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.GroupHeaderListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Defines the title of the group header.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getTitleTextDirection titleTextDirection}.
 * 
 * Defines the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>titleTextDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.getTitleTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getUpperCase upperCase}.
 * 
 * Allows to uppercase the group title.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>upperCase</code>
 * @since 1.13.2
 * @deprecated Since version 1.40.10
 * 
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.getUpperCase = function() { return false; };

/**
 * Sets a new value for property {@link #getCount count}.
 * 
 * Defines the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group.
 * <b>Note:</b> Will not be displayed if not set.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sCount New value for property <code>count</code>
 * @returns {sap.m.GroupHeaderListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.setCount = function(sCount) { return new sap.m.GroupHeaderListItem(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Defines the title of the group header.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.GroupHeaderListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.setTitle = function(sTitle) { return new sap.m.GroupHeaderListItem(); };

/**
 * Sets a new value for property {@link #getTitleTextDirection titleTextDirection}.
 * 
 * Defines the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTitleTextDirection New value for property <code>titleTextDirection</code>
 * @returns {sap.m.GroupHeaderListItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.setTitleTextDirection = function(sTitleTextDirection) { return new sap.m.GroupHeaderListItem(); };

/**
 * Sets a new value for property {@link #getUpperCase upperCase}.
 * 
 * Allows to uppercase the group title.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bUpperCase New value for property <code>upperCase</code>
 * @returns {sap.m.GroupHeaderListItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.13.2
 * @deprecated Since version 1.40.10
 * 
 * @public
 * 
 */
sap.m.GroupHeaderListItem.prototype.setUpperCase = function(bUpperCase) { return new sap.m.GroupHeaderListItem(); };


// ---- sap.m.GrowingEnablement --------------------------------------------------------------------------

/**
 * Creates a GrowingEnablement delegate that can be attached to ListBase Controls requiring capabilities for growing
 * 
 * 
 * @extends sap.ui.base.Object
 * @experimental Since 1.16. This class is experimental and provides only limited functionality. Also the API might be changed in future.
 * 
 * @param {sap.m.ListBase} oControl the ListBase control of which this Growing is the delegate
 * 
 * @constructor
 * @protected
 * 
 */
sap.m.GrowingEnablement = function(oControl) {};
/**
 * Creates a new subclass of class sap.m.GrowingEnablement with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.GrowingEnablement.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.GrowingEnablement.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.GrowingEnablement.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.GrowingList --------------------------------------------------------------------------

/**
 * Constructor for a new GrowingList.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getThreshold threshold} : int (default: 20)</li>
 * <li>{@link #getTriggerText triggerText} : string</li>
 * <li>{@link #getScrollToLoad scrollToLoad} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.List#constructor sap.m.List}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * sap.m.GrowingList control is the container for all list items and inherits from sap.m.List control. Everything like the selection, deletion, unread states and inset style are also maintained here. In addition the control provides a loading mechanism to request data from the model and append the list items to the list. The request is started manually by tapping on the trigger at the end of the list.
 * @extends sap.m.List
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @deprecated Since version 1.16.
 * Instead use "List" or "Table" control with setting "growing" property to "true"
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.GrowingList = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.GrowingList with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.List.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.GrowingList.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.GrowingList.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.GrowingList.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getScrollToLoad scrollToLoad}.
 * 
 * If you set this property to true then user needs to scroll end to trigger loading a new page. Default value is false which means user needs to scroll end and then click button to load new page.
 * NOTE: This property can be set true, if growing property is set "true" and if you only have one instance of this control inside the scroll container(e.g Page).
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>scrollToLoad</code>
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.GrowingList.prototype.getScrollToLoad = function() { return false; };

/**
 * Gets current value of property {@link #getThreshold threshold}.
 * 
 * Number of items requested from the server. To activate this you should set growing property to "true"
 * 
 * Default value is <code>20</code>.
 * @returns {int} Value of property <code>threshold</code>
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.GrowingList.prototype.getThreshold = function() { return 0; };

/**
 * Gets current value of property {@link #getTriggerText triggerText}.
 * 
 * Text which is displayed on the trigger at the end of the list. The default is a translated text ("Load More Data") coming from the messagebundle properties.
 * This property can be used only if growing property is set "true" and scrollToLoad property is set "false".
 * 
 * @returns {string} Value of property <code>triggerText</code>
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.GrowingList.prototype.getTriggerText = function() { return ""; };

/**
 * Sets a new value for property {@link #getScrollToLoad scrollToLoad}.
 * 
 * If you set this property to true then user needs to scroll end to trigger loading a new page. Default value is false which means user needs to scroll end and then click button to load new page.
 * NOTE: This property can be set true, if growing property is set "true" and if you only have one instance of this control inside the scroll container(e.g Page).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bScrollToLoad New value for property <code>scrollToLoad</code>
 * @returns {sap.m.GrowingList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.GrowingList.prototype.setScrollToLoad = function(bScrollToLoad) { return new sap.m.GrowingList(); };

/**
 * Sets a new value for property {@link #getThreshold threshold}.
 * 
 * Number of items requested from the server. To activate this you should set growing property to "true"
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>20</code>.
 * @param {int} iThreshold New value for property <code>threshold</code>
 * @returns {sap.m.GrowingList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.GrowingList.prototype.setThreshold = function(iThreshold) { return new sap.m.GrowingList(); };

/**
 * Sets a new value for property {@link #getTriggerText triggerText}.
 * 
 * Text which is displayed on the trigger at the end of the list. The default is a translated text ("Load More Data") coming from the messagebundle properties.
 * This property can be used only if growing property is set "true" and scrollToLoad property is set "false".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTriggerText New value for property <code>triggerText</code>
 * @returns {sap.m.GrowingList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.GrowingList.prototype.setTriggerText = function(sTriggerText) { return new sap.m.GrowingList(); };


// ---- sap.m.HBox --------------------------------------------------------------------------

/**
 * Constructor for a new HBox.
 * 
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The HBox control builds the container for a horizontal flexible box layout. HBox is a convenience control, as it is just a specialized FlexBox control.<br>
 * <br>
 * <b>Note:</b> Be sure to check the <code>renderType</code> setting to avoid issues due to browser inconsistencies.
 * 
 * @extends sap.m.FlexBox
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.HBox = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.HBox with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.FlexBox.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.HBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.HBox.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.HBox.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.HeaderContainer --------------------------------------------------------------------------

/**
 * Constructor for the new HeaderContainer control.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getScrollStep scrollStep} : int (default: 300)</li>
 * <li>{@link #getScrollTime scrollTime} : int (default: 500)</li>
 * <li>{@link #getShowDividers showDividers} : boolean (default: true)</li>
 * <li>{@link #getOrientation orientation} : sap.ui.core.Orientation (default: Horizontal)</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: library.BackgroundDesign.Transparent)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[] (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class The container that provides a horizontal layout. It provides a horizontal scrolling on the mobile devices.
 * On the desktop, it provides scroll left and scroll right buttons. This control supports keyboard navigation.
 * You can use left and right arrow keys to navigate through the inner content. The Home key puts focus on the first control and the End key puts focus on the last control.
 * Use Enter or Space key to choose the control.
 * @extends sap.ui.core.Control
 * @implements sap.m.ObjectHeaderContainer
 * @since 1.44.0
 * @version 1.48.4
 * 
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.HeaderContainer = function(sId,mSettings) {};
/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.HeaderContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.addContent = function(oContent) { return new sap.m.HeaderContainer(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.HeaderContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.destroyContent = function() { return new sap.m.HeaderContainer(); };

/**
 * Creates a new subclass of class sap.m.HeaderContainer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.HeaderContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Specifies the background color of the content. The visualization of the different options depends on the used theme.
 * 
 * Default value is <code>library.BackgroundDesign.Transparent</code>.
 * @returns {sap.m.BackgroundDesign} Value of property <code>backgroundDesign</code>
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * Content to add to HeaderContainer.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.getContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * The height of the whole HeaderContainer. If not specified, it is rendered as 'auto' in horizontal orientation and as '100%' in vertical orientation.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.HeaderContainer.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.HeaderContainer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getOrientation orientation}.
 * 
 * The orientation of the HeaderContainer. There are two orientation modes: horizontal and vertical. In horizontal mode
 * the content controls are displayed next to each other, in vertical mode the content controls are displayed
 * on top of each other.
 * 
 * Default value is <code>Horizontal</code>.
 * @returns {sap.ui.core.Orientation} Value of property <code>orientation</code>
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.getOrientation = function() { return new sap.ui.core.Orientation(); };

/**
 * Gets current value of property {@link #getScrollStep scrollStep}.
 * 
 * Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.
 * 
 * Default value is <code>300</code>.
 * @returns {int} Value of property <code>scrollStep</code>
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.getScrollStep = function() { return 0; };

/**
 * Gets current value of property {@link #getScrollTime scrollTime}.
 * 
 * Scroll animation time in milliseconds.
 * 
 * Default value is <code>500</code>.
 * @returns {int} Value of property <code>scrollTime</code>
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.getScrollTime = function() { return 0; };

/**
 * Gets current value of property {@link #getShowDividers showDividers}.
 * 
 * If set to true, it shows dividers between the different content controls.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showDividers</code>
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.getShowDividers = function() { return false; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * The width of the whole HeaderContainer. If not specified, it is rendered as '100%' in horizontal orientation and as 'auto' in vertical orientation.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.HeaderContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.insertContent = function(oContent,iIndex) { return new sap.m.HeaderContainer(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Specifies the background color of the content. The visualization of the different options depends on the used theme.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>library.BackgroundDesign.Transparent</code>.
 * @param {sap.m.BackgroundDesign} sBackgroundDesign New value for property <code>backgroundDesign</code>
 * @returns {sap.m.HeaderContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.HeaderContainer(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * The height of the whole HeaderContainer. If not specified, it is rendered as 'auto' in horizontal orientation and as '100%' in vertical orientation.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.m.HeaderContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.setHeight = function(sHeight) { return new sap.m.HeaderContainer(); };

/**
 * Sets a new value for property {@link #getOrientation orientation}.
 * 
 * The orientation of the HeaderContainer. There are two orientation modes: horizontal and vertical. In horizontal mode
 * the content controls are displayed next to each other, in vertical mode the content controls are displayed
 * on top of each other.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Horizontal</code>.
 * @param {sap.ui.core.Orientation} sOrientation New value for property <code>orientation</code>
 * @returns {sap.m.HeaderContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.setOrientation = function(sOrientation) { return new sap.m.HeaderContainer(); };

/**
 * Sets a new value for property {@link #getScrollStep scrollStep}.
 * 
 * Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>300</code>.
 * @param {int} iScrollStep New value for property <code>scrollStep</code>
 * @returns {sap.m.HeaderContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.setScrollStep = function(iScrollStep) { return new sap.m.HeaderContainer(); };

/**
 * Sets a new value for property {@link #getScrollTime scrollTime}.
 * 
 * Scroll animation time in milliseconds.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>500</code>.
 * @param {int} iScrollTime New value for property <code>scrollTime</code>
 * @returns {sap.m.HeaderContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.setScrollTime = function(iScrollTime) { return new sap.m.HeaderContainer(); };

/**
 * Sets a new value for property {@link #getShowDividers showDividers}.
 * 
 * If set to true, it shows dividers between the different content controls.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowDividers New value for property <code>showDividers</code>
 * @returns {sap.m.HeaderContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.setShowDividers = function(bShowDividers) { return new sap.m.HeaderContainer(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * The width of the whole HeaderContainer. If not specified, it is rendered as '100%' in horizontal orientation and as 'auto' in vertical orientation.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.HeaderContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.HeaderContainer.prototype.setWidth = function(sWidth) { return new sap.m.HeaderContainer(); };


// ---- sap.m.HeaderLevel --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.HeaderLevel.toString = function() { return ""; };

// ---- sap.m.IBar --------------------------------------------------------------------------


// ---- sap.m.IBarHTMLTag --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.IBarHTMLTag.toString = function() { return ""; };

// ---- sap.m.IBarInPageEnabler --------------------------------------------------------------------------

/**
 * 
 * @class Helper Class for implementing the IBar interface. Should be created once per IBar instance.
 * @version 1.22
 * @protected
 * 
 */
sap.m.IBarInPageEnabler = function() {};
/**
 * Adds the sapMBarChildClass to a control.
 * @param {sap.ui.core.Control} oControl
 * @protected
 * @static
 * 
 */
sap.m.IBarInPageEnabler.addChildClassTo = function(oControl) {  };

/**
 * Renders the tooltip for the given control
 * @protected
 * @param {sap.ui.core.RenderManager} oRM the RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered.
 * 
 */
sap.m.IBarInPageEnabler.renderTooltip = function(oRM,oControl) {  };


// ---- sap.m.IconTab --------------------------------------------------------------------------


// ---- sap.m.IconTabBar --------------------------------------------------------------------------

/**
 * Constructor for a new IconTabBar.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowSelection showSelection} : boolean (default: true)</li>
 * <li>{@link #getExpandable expandable} : boolean (default: true)</li>
 * <li>{@link #getExpanded expanded} : boolean (default: true)</li>
 * <li>{@link #getSelectedKey selectedKey} : string</li>
 * <li>{@link #getUpperCase upperCase} : boolean (default: false)</li>
 * <li>{@link #getStretchContentHeight stretchContentHeight} : boolean (default: false)</li>
 * <li>{@link #getApplyContentPadding applyContentPadding} : boolean (default: true)</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: Solid)</li>
 * <li>{@link #getHeaderMode headerMode} : sap.m.IconTabHeaderMode (default: Standard)</li>
 * <li>{@link #getShowOverflowSelectList showOverflowSelectList} : boolean (default: false)</li>
 * <li>{@link #getHeaderBackgroundDesign headerBackgroundDesign} : sap.m.BackgroundDesign (default: Solid)</li>
 * <li>{@link #getEnableTabReordering enableTabReordering} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.IconTab[]</li>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:expand expand} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The IconTabBar control represents a collection of tabs with associated content.
 * 
 * IconTabBar covers the following use cases:
 * - Filter – There is only one main content for all tabs. The main content can be filtered, based on the selected tab.
 * - Normal tab bar - The contents of each tab are independent from each other.
 * - Combination of the above - There can be both filtered and independent contents.
 * @extends sap.ui.core.Control
 * @implements sap.m.ObjectHeaderContainer
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.IconTabBar = function(sId,mSettings) {};
/**
 * Indicates that the tab will expand or collapse.
 * @event
 * @since 1.15.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.expand If the tab will expand, this is true.
 * @param {boolean} oControlEvent.getParameters.collapse If the tab will collapse, this is true.
 * @public
 * 
 */
sap.m.IconTabBar.prototype.expand = function(oControlEvent) {  };

/**
 * Fires when an item is selected.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.IconTabFilter} oControlEvent.getParameters.item The selected item
 * @param {string} oControlEvent.getParameters.key The key of the selected item
 * @param {sap.m.IconTabFilter} oControlEvent.getParameters.selectedItem The selected item
 * @param {string} oControlEvent.getParameters.selectedKey The key of the selected item
 * @public
 * 
 */
sap.m.IconTabBar.prototype.select = function(oControlEvent) {  };

/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.addContent = function(oContent) { return new sap.m.IconTabBar(); };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.m.IconTab}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.addItem = function(oItem) { return new sap.m.IconTabBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:expand expand} event of this <code>sap.m.IconTabBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.IconTabBar</code> itself.
 * 
 * Indicates that the tab will expand or collapse.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code> itself
 * 
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.15.0
 * 
 */
sap.m.IconTabBar.prototype.attachExpand = function(oData,fnFunction,oListener) { return new sap.m.IconTabBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:select select} event of this <code>sap.m.IconTabBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.IconTabBar</code> itself.
 * 
 * Fires when an item is selected.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code> itself
 * 
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.IconTabBar.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.IconTabBar(); };

/**
 * Forwards aggregations with the name of items to the internal list.
 * @overwrite
 * @public
 * @param {string} sAggregationName The name for the binding
 * @param {object} oBindingInfo The configuration parameters for the binding
 * @returns {sap.m.IconTabBar} this pointer for chaining
 * 
 */
sap.m.IconTabBar.prototype.bindAggregation = function(sAggregationName,oBindingInfo) { return new sap.m.IconTabBar(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.destroyContent = function() { return new sap.m.IconTabBar(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.destroyItems = function() { return new sap.m.IconTabBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:expand expand} event of this <code>sap.m.IconTabBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.detachExpand = function(fnFunction,oListener) { return new sap.m.IconTabBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:select select} event of this <code>sap.m.IconTabBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.IconTabBar(); };

/**
 * Creates a new subclass of class sap.m.IconTabBar with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.IconTabBar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:expand expand} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.expand] If the tab will expand, this is true.
 * @param {boolean} [mParameters.collapse] If the tab will collapse, this is true.
 * 
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.15.0
 * 
 */
sap.m.IconTabBar.prototype.fireExpand = function(mParameters) { return new sap.m.IconTabBar(); };

/**
 * Fires event {@link #event:select select} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.IconTabFilter} [mParameters.item] The selected item
 * @param {string} [mParameters.key] The key of the selected item
 * @param {sap.m.IconTabFilter} [mParameters.selectedItem] The selected item
 * @param {string} [mParameters.selectedKey] The key of the selected item
 * 
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.IconTabBar.prototype.fireSelect = function(mParameters) { return new sap.m.IconTabBar(); };

/**
 * Gets current value of property {@link #getApplyContentPadding applyContentPadding}.
 * 
 * Determines whether the IconTabBar content fits to the full area.
 * The paddings are removed if it's set to false.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>applyContentPadding</code>
 * @since 1.26
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getApplyContentPadding = function() { return false; };

/**
 * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Specifies the background color of the IconTabBar.
 * 
 * Depending on the theme, you can change the state of
 * the background color to "Solid", "Translucent", or "Transparent".
 * Default is "Solid".
 * 
 * Default value is <code>Solid</code>.
 * @returns {sap.m.BackgroundDesign} Value of property <code>backgroundDesign</code>
 * @since 1.26
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * Represents the contents displayed below the IconTabBar.
 * If there are multiple contents, they are rendered after each other.
 * The developer has to manage to display the right one or use the content aggregation
 * inside the IconTabFilter (which will be displayed instead if it is set).
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEnableTabReordering enableTabReordering}.
 * 
 * Specifies whether tab reordering is enabled. Relevant only for desktop devices.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableTabReordering</code>
 * @since 1.46
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getEnableTabReordering = function() { return false; };

/**
 * Gets current value of property {@link #getExpandable expandable}.
 * 
 * Defines if the tabs are collapsible and expandable.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>expandable</code>
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getExpandable = function() { return false; };

/**
 * Gets current value of property {@link #getExpanded expanded}.
 * 
 * Indicates if the actual tab content is expanded or not.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>expanded</code>
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getExpanded = function() { return false; };

/**
 * Gets current value of property {@link #getHeaderBackgroundDesign headerBackgroundDesign}.
 * 
 * Specifies the background color of the header.
 * 
 * Depending on the theme, you can change the state of
 * the background color to "Solid", "Translucent", or "Transparent".
 * Default is "Solid".
 * 
 * Default value is <code>Solid</code>.
 * @returns {sap.m.BackgroundDesign} Value of property <code>headerBackgroundDesign</code>
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getHeaderBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * Gets current value of property {@link #getHeaderMode headerMode}.
 * 
 * Specifies the header mode.
 * <b>Note:</b> The Inline mode works only if no icons are set.
 * 
 * Default value is <code>Standard</code>.
 * @returns {sap.m.IconTabHeaderMode} Value of property <code>headerMode</code>
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getHeaderMode = function() { return new sap.m.IconTabHeaderMode(); };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * The items displayed in the IconTabBar.
 * 
 * @returns {sap.m.IconTab[]}
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.IconTabBar.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.IconTabBar.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Reflector for the internal header's selectedKey property.
 * @overwrite
 * @public
 * @returns {string} The current property value
 * 
 */
sap.m.IconTabBar.prototype.getSelectedKey = function() { return ""; };

/**
 * Gets current value of property {@link #getShowOverflowSelectList showOverflowSelectList}.
 * 
 * Specifies if the overflow select list is displayed.
 * 
 * The overflow select list represents a list, where all tab filters are displayed,
 * so the user can select specific tab filter easier.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showOverflowSelectList</code>
 * @since 1.42
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getShowOverflowSelectList = function() { return false; };

/**
 * Gets current value of property {@link #getShowSelection showSelection}.
 * 
 * Defines whether the current selection should be visualized.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showSelection</code>
 * 
 * @deprecated As of 1.15.0.
 * Regarding to changes of this control this property is not needed anymore.
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getShowSelection = function() { return false; };

/**
 * Gets current value of property {@link #getStretchContentHeight stretchContentHeight}.
 * 
 * Determines whether the IconTabBar height is stretched to the maximum possible height
 * of its parent container. As a prerequisite, the height of the parent container must be
 * defined as a fixed value.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>stretchContentHeight</code>
 * @since 1.26
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getStretchContentHeight = function() { return false; };

/**
 * Gets current value of property {@link #getUpperCase upperCase}.
 * 
 * Determines whether the text of the icon tab filter (not the count) is displayed in uppercase.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>upperCase</code>
 * @since 1.22
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.getUpperCase = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Checks for the provided <code>sap.m.IconTab</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.IconTab}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.insertContent = function(oContent,iIndex) { return new sap.m.IconTabBar(); };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.m.IconTab}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.insertItem = function(oItem,iIndex) { return new sap.m.IconTabBar(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.IconTab[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.m.IconTab} vItem The item to remove or its index or id
 * @returns {sap.m.IconTab} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.removeItem = function(vItem) { return new sap.m.IconTab(); };

/**
 * Sets a new value for property {@link #getApplyContentPadding applyContentPadding}.
 * 
 * Determines whether the IconTabBar content fits to the full area.
 * The paddings are removed if it's set to false.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bApplyContentPadding New value for property <code>applyContentPadding</code>
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.setApplyContentPadding = function(bApplyContentPadding) { return new sap.m.IconTabBar(); };

/**
 * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Specifies the background color of the IconTabBar.
 * 
 * Depending on the theme, you can change the state of
 * the background color to "Solid", "Translucent", or "Transparent".
 * Default is "Solid".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Solid</code>.
 * @param {sap.m.BackgroundDesign} sBackgroundDesign New value for property <code>backgroundDesign</code>
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.IconTabBar(); };

/**
 * Sets the enableTabReordering property.
 * @overwrite
 * @public
 * @param {boolean} value New value for enableTabReordering
 * @return {sap.m.IconTabBar} this pointer for chaining
 * 
 */
sap.m.IconTabBar.prototype.setEnableTabReordering = function(value) { return new sap.m.IconTabBar(); };

/**
 * Sets the tabs as collapsible and expandable without re-rendering the control.
 * @overwrite
 * @public
 * @param {boolean} bExpandable new parameter value
 * @return {sap.m.IconTabBar} this pointer for chaining
 * 
 */
sap.m.IconTabBar.prototype.setExpandable = function(bExpandable) { return new sap.m.IconTabBar(); };

/**
 * Sets the tab content as expanded.
 * @overwrite
 * @public
 * @param {boolean} bExpanded new parameter value
 * @return {sap.m.IconTabBar} this pointer for chaining
 * 
 */
sap.m.IconTabBar.prototype.setExpanded = function(bExpanded) { return new sap.m.IconTabBar(); };

/**
 * Sets the header background design.
 * @overwrite
 * @public
 * @param {sap.m.BackgroundDesign} headerBackgroundDesign New parameter value
 * @return {sap.m.IconTabBar} this pointer for chaining
 * 
 */
sap.m.IconTabBar.prototype.setHeaderBackgroundDesign = function(headerBackgroundDesign) { return new sap.m.IconTabBar(); };

/**
 * Sets the header mode.
 * @overwrite
 * @public
 * @param {sap.m.IconTabHeaderMode} mode new parameter value
 * @return {sap.m.IconTabBar} this pointer for chaining
 * 
 */
sap.m.IconTabBar.prototype.setHeaderMode = function(mode) { return new sap.m.IconTabBar(); };

/**
 * Reflector for the internal header's selectedKey property.
 * @overwrite
 * @public
 * @param {string} sValue the new value
 * @returns {sap.m.IconTabBar} this pointer for chaining
 * 
 */
sap.m.IconTabBar.prototype.setSelectedKey = function(sValue) { return new sap.m.IconTabBar(); };

/**
 * Sets the showOverflowSelectList property.
 * @overwrite
 * @public
 * @param {boolean} value New value for showOverflowSelectList
 * @return {sap.m.IconTabBar} this pointer for chaining
 * 
 */
sap.m.IconTabBar.prototype.setShowOverflowSelectList = function(value) { return new sap.m.IconTabBar(); };

/**
 * Sets a new value for property {@link #getShowSelection showSelection}.
 * 
 * Defines whether the current selection should be visualized.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowSelection New value for property <code>showSelection</code>
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated As of 1.15.0.
 * Regarding to changes of this control this property is not needed anymore.
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.setShowSelection = function(bShowSelection) { return new sap.m.IconTabBar(); };

/**
 * Sets a new value for property {@link #getStretchContentHeight stretchContentHeight}.
 * 
 * Determines whether the IconTabBar height is stretched to the maximum possible height
 * of its parent container. As a prerequisite, the height of the parent container must be
 * defined as a fixed value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bStretchContentHeight New value for property <code>stretchContentHeight</code>
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.setStretchContentHeight = function(bStretchContentHeight) { return new sap.m.IconTabBar(); };

/**
 * Sets a new value for property {@link #getUpperCase upperCase}.
 * 
 * Determines whether the text of the icon tab filter (not the count) is displayed in uppercase.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bUpperCase New value for property <code>upperCase</code>
 * @returns {sap.m.IconTabBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22
 * 
 * @public
 * 
 */
sap.m.IconTabBar.prototype.setUpperCase = function(bUpperCase) { return new sap.m.IconTabBar(); };


// ---- sap.m.IconTabFilter --------------------------------------------------------------------------

/**
 * Constructor for a new IconTabFilter.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getCount count} : string (default: )</li>
 * <li>{@link #getShowAll showAll} : boolean (default: false)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: )</li>
 * <li>{@link #getIconColor iconColor} : sap.ui.core.IconColor (default: Default)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDesign design} : sap.m.IconTabFilterDesign (default: Vertical)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[] (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given.
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Represents a selectable item inside an IconTabBar.
 * 
 * @extends sap.ui.core.Item
 * @implements sap.m.IconTab
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.IconTabFilter = function(sId,mSettings) {};
/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.IconTabFilter} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.addContent = function(oContent) { return new sap.m.IconTabFilter(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.IconTabFilter} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.destroyContent = function() { return new sap.m.IconTabFilter(); };

/**
 * Creates a new subclass of class sap.m.IconTabFilter with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.IconTabFilter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * The content displayed for this item (optional).
 * 
 * If this content is set, it is displayed instead of the general content inside the IconTabBar.
 * 
 * @returns {sap.ui.core.Control[]}
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getCount count}.
 * 
 * Represents the "count" text, which is displayed in the tab filter.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>count</code>
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getCount = function() { return ""; };

/**
 * Gets current value of property {@link #getDesign design}.
 * 
 * Specifies whether the icon and the texts are placed vertically or horizontally.
 * 
 * Default value is <code>Vertical</code>.
 * @returns {sap.m.IconTabFilterDesign} Value of property <code>design</code>
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getDesign = function() { return new sap.m.IconTabFilterDesign(); };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Specifies the icon to be displayed for the tab filter.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIconColor iconColor}.
 * 
 * Specifies the icon color.
 * 
 * If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor).
 * Possible semantic colors are: Neutral, Positive, Critical, Negative.
 * Instead of the semantic icon color the brand color can be used, this is named Default.
 * Semantic colors and brand colors should not be mixed up inside one IconTabBar.
 * 
 * Default value is <code>Default</code>.
 * @returns {sap.ui.core.IconColor} Value of property <code>iconColor</code>
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getIconColor = function() { return new sap.ui.core.IconColor(); };

/**
 * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
 * 
 * If set to true, it sends one or more requests,
 * trying to get the density perfect version of the image if this version of
 * the image doesn't exist on the server. Default value is set to true.
 * 
 * If bandwidth is key for the application, set this value to false.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconDensityAware</code>
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getIconDensityAware = function() { return false; };

/**
 * Returns a metadata object for class sap.m.IconTabFilter.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.IconTabFilter.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowAll showAll}.
 * 
 * Enables special visualization for disabled filter (show all items).
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showAll</code>
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getShowAll = function() { return false; };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Specifies whether the tab filter is rendered.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.getVisible = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.IconTabFilter} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.insertContent = function(oContent,iIndex) { return new sap.m.IconTabFilter(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Renders this item in the IconTabHeader.
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @protected
 * 
 */
sap.m.IconTabFilter.prototype.render = function(rm) {  };

/**
 * Renders this item in the IconTabSelectList.
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.IconTabBarSelectList} selectList the select list in which this filter is rendered
 * @protected
 * 
 */
sap.m.IconTabFilter.prototype.renderInSelectList = function(rm,selectList) {  };

/**
 * Sets a new value for property {@link #getCount count}.
 * 
 * Represents the "count" text, which is displayed in the tab filter.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sCount New value for property <code>count</code>
 * @returns {sap.m.IconTabFilter} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setCount = function(sCount) { return new sap.m.IconTabFilter(); };

/**
 * Sets a new value for property {@link #getDesign design}.
 * 
 * Specifies whether the icon and the texts are placed vertically or horizontally.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Vertical</code>.
 * @param {sap.m.IconTabFilterDesign} sDesign New value for property <code>design</code>
 * @returns {sap.m.IconTabFilter} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setDesign = function(sDesign) { return new sap.m.IconTabFilter(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Specifies the icon to be displayed for the tab filter.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.IconTabFilter} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setIcon = function(sIcon) { return new sap.m.IconTabFilter(); };

/**
 * Sets a new value for property {@link #getIconColor iconColor}.
 * 
 * Specifies the icon color.
 * 
 * If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor).
 * Possible semantic colors are: Neutral, Positive, Critical, Negative.
 * Instead of the semantic icon color the brand color can be used, this is named Default.
 * Semantic colors and brand colors should not be mixed up inside one IconTabBar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Default</code>.
 * @param {sap.ui.core.IconColor} sIconColor New value for property <code>iconColor</code>
 * @returns {sap.m.IconTabFilter} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setIconColor = function(sIconColor) { return new sap.m.IconTabFilter(); };

/**
 * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
 * 
 * If set to true, it sends one or more requests,
 * trying to get the density perfect version of the image if this version of
 * the image doesn't exist on the server. Default value is set to true.
 * 
 * If bandwidth is key for the application, set this value to false.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware New value for property <code>iconDensityAware</code>
 * @returns {sap.m.IconTabFilter} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.IconTabFilter(); };

/**
 * Sets a new value for property {@link #getShowAll showAll}.
 * 
 * Enables special visualization for disabled filter (show all items).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowAll New value for property <code>showAll</code>
 * @returns {sap.m.IconTabFilter} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setShowAll = function(bShowAll) { return new sap.m.IconTabFilter(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Specifies whether the tab filter is rendered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.IconTabFilter} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabFilter.prototype.setVisible = function(bVisible) { return new sap.m.IconTabFilter(); };


// ---- sap.m.IconTabFilterDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.IconTabFilterDesign.toString = function() { return ""; };

// ---- sap.m.IconTabHeader --------------------------------------------------------------------------

/**
 * Constructor for a new IconTabHeader.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowSelection showSelection} : boolean (default: true)</li>
 * <li>{@link #getSelectedKey selectedKey} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMode mode} : sap.m.IconTabHeaderMode (default: Standard)</li>
 * <li>{@link #getShowOverflowSelectList showOverflowSelectList} : boolean (default: false)</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: Solid)</li>
 * <li>{@link #getEnableTabReordering enableTabReordering} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.IconTab[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * This control displays a number of IconTabFilters and IconTabSeparators. If the available horizontal
 * space is exceeded, a horizontal scrolling appears.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.IconTabHeader = function(sId,mSettings) {};
/**
 * Fires when an item is selected.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.IconTabFilter} oControlEvent.getParameters.item The selected item
 * @param {string} oControlEvent.getParameters.key The key of the selected item
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.select = function(oControlEvent) {  };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.m.IconTab}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.IconTabHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.addItem = function(oItem) { return new sap.m.IconTabHeader(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:select select} event of this <code>sap.m.IconTabHeader</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.IconTabHeader</code> itself.
 * 
 * Fires when an item is selected.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.IconTabHeader</code> itself
 * 
 * @returns {sap.m.IconTabHeader} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.IconTabHeader(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.IconTabHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.destroyItems = function() { return new sap.m.IconTabHeader(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:select select} event of this <code>sap.m.IconTabHeader</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.IconTabHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.IconTabHeader(); };

/**
 * Creates a new subclass of class sap.m.IconTabHeader with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.IconTabHeader.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:select select} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.IconTabFilter} [mParameters.item] The selected item
 * @param {string} [mParameters.key] The key of the selected item
 * 
 * @returns {sap.m.IconTabHeader} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.IconTabHeader.prototype.fireSelect = function(mParameters) { return new sap.m.IconTabHeader(); };

/**
 * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Specifies the background color of the header.
 * 
 * Depending on the theme, you can change the state of
 * the background color to "Solid", "Translucent", or "Transparent".
 * Default is "Solid".
 * 
 * Default value is <code>Solid</code>.
 * @returns {sap.m.BackgroundDesign} Value of property <code>backgroundDesign</code>
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * Gets current value of property {@link #getEnableTabReordering enableTabReordering}.
 * 
 * Specifies whether tab reordering is enabled. Relevant only for desktop devices.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableTabReordering</code>
 * @since 1.46
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.getEnableTabReordering = function() { return false; };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * The items displayed in the IconTabHeader.
 * 
 * @returns {sap.m.IconTab[]}
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.IconTabHeader.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.IconTabHeader.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMode mode}.
 * 
 * Specifies the header mode.
 * <b>Note:</b> The Inline mode works only if no icons are set.
 * 
 * Default value is <code>Standard</code>.
 * @returns {sap.m.IconTabHeaderMode} Value of property <code>mode</code>
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.getMode = function() { return new sap.m.IconTabHeaderMode(); };

/**
 * Gets current value of property {@link #getSelectedKey selectedKey}.
 * 
 * Key of the selected item.
 * 
 * If the key has no corresponding aggregated item, no changes will apply.
 * If duplicate keys exists the first item matching, the key is used.
 * 
 * @returns {string} Value of property <code>selectedKey</code>
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.getSelectedKey = function() { return ""; };

/**
 * Gets current value of property {@link #getShowOverflowSelectList showOverflowSelectList}.
 * 
 * Specifies if the overflow select list is displayed.
 * 
 * The overflow select list represents a list, where all tab filters are displayed,
 * so the user can select specific tab filter easier.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showOverflowSelectList</code>
 * @since 1.42
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.getShowOverflowSelectList = function() { return false; };

/**
 * Gets current value of property {@link #getShowSelection showSelection}.
 * 
 * Defines whether the current selection is visualized.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showSelection</code>
 * 
 * @deprecated As of 1.15.0.
 * Regarding to changes of this control this property is not needed anymore.
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.getShowSelection = function() { return false; };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Specifies whether the control is rendered.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.getVisible = function() { return false; };

/**
 * Checks for the provided <code>sap.m.IconTab</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.IconTab}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.m.IconTab}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.IconTabHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.insertItem = function(oItem,iIndex) { return new sap.m.IconTabHeader(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.IconTab[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.m.IconTab} vItem The item to remove or its index or id
 * @returns {sap.m.IconTab} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.removeItem = function(vItem) { return new sap.m.IconTab(); };

/**
 * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Specifies the background color of the header.
 * 
 * Depending on the theme, you can change the state of
 * the background color to "Solid", "Translucent", or "Transparent".
 * Default is "Solid".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Solid</code>.
 * @param {sap.m.BackgroundDesign} sBackgroundDesign New value for property <code>backgroundDesign</code>
 * @returns {sap.m.IconTabHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.IconTabHeader(); };

/**
 * Sets a new value for property {@link #getEnableTabReordering enableTabReordering}.
 * 
 * Specifies whether tab reordering is enabled. Relevant only for desktop devices.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableTabReordering New value for property <code>enableTabReordering</code>
 * @returns {sap.m.IconTabHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.setEnableTabReordering = function(bEnableTabReordering) { return new sap.m.IconTabHeader(); };

/**
 * Sets a new value for property {@link #getMode mode}.
 * 
 * Specifies the header mode.
 * <b>Note:</b> The Inline mode works only if no icons are set.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Standard</code>.
 * @param {sap.m.IconTabHeaderMode} sMode New value for property <code>mode</code>
 * @returns {sap.m.IconTabHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.setMode = function(sMode) { return new sap.m.IconTabHeader(); };

/**
 * Sets the selected item based on key.
 * @overwrite
 * @public
 * @param {string} sKey The key of the item to be selected
 * @return {sap.m.IconTabHeader} this pointer for chaining
 * 
 */
sap.m.IconTabHeader.prototype.setSelectedKey = function(sKey) { return new sap.m.IconTabHeader(); };

/**
 * Sets a new value for property {@link #getShowOverflowSelectList showOverflowSelectList}.
 * 
 * Specifies if the overflow select list is displayed.
 * 
 * The overflow select list represents a list, where all tab filters are displayed,
 * so the user can select specific tab filter easier.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowOverflowSelectList New value for property <code>showOverflowSelectList</code>
 * @returns {sap.m.IconTabHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.42
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.setShowOverflowSelectList = function(bShowOverflowSelectList) { return new sap.m.IconTabHeader(); };

/**
 * Sets a new value for property {@link #getShowSelection showSelection}.
 * 
 * Defines whether the current selection is visualized.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowSelection New value for property <code>showSelection</code>
 * @returns {sap.m.IconTabHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated As of 1.15.0.
 * Regarding to changes of this control this property is not needed anymore.
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.setShowSelection = function(bShowSelection) { return new sap.m.IconTabHeader(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Specifies whether the control is rendered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.IconTabHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.IconTabHeader.prototype.setVisible = function(bVisible) { return new sap.m.IconTabHeader(); };


// ---- sap.m.IconTabHeaderMode --------------------------------------------------------------------------


// ---- sap.m.IconTabSeparator --------------------------------------------------------------------------

/**
 * Constructor for a new IconTabSeparator.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: )</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Represents an Icon used to separate 2 tab filters.
 * 
 * @extends sap.ui.core.Element
 * @implements sap.m.IconTab
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.IconTabSeparator = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.IconTabSeparator with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.IconTabSeparator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * The icon to display for this separator. If no icon is given, a separator line is used instead.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.IconTabSeparator.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
 * 
 * If set to true, it sends one or more requests,
 * trying to get the density perfect version of the image if this version of
 * the image doesn't exist on the server. Default value is set to true.
 * 
 * If bandwidth is key for the application, set this value to false.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconDensityAware</code>
 * 
 * @public
 * 
 */
sap.m.IconTabSeparator.prototype.getIconDensityAware = function() { return false; };

/**
 * Returns a metadata object for class sap.m.IconTabSeparator.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.IconTabSeparator.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Specifies whether the separator is rendered.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.m.IconTabSeparator.prototype.getVisible = function() { return false; };

/**
 * Renders the item in the IconTabHeader.
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @protected
 * 
 */
sap.m.IconTabSeparator.prototype.render = function(rm) {  };

/**
 * Renders this item in the IconTabSelectList.
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.IconTabBarSelectList} selectList the select list in which this filter is rendered
 * @protected
 * 
 */
sap.m.IconTabSeparator.prototype.renderInSelectList = function(rm,selectList) {  };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * The icon to display for this separator. If no icon is given, a separator line is used instead.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.IconTabSeparator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabSeparator.prototype.setIcon = function(sIcon) { return new sap.m.IconTabSeparator(); };

/**
 * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
 * 
 * If set to true, it sends one or more requests,
 * trying to get the density perfect version of the image if this version of
 * the image doesn't exist on the server. Default value is set to true.
 * 
 * If bandwidth is key for the application, set this value to false.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware New value for property <code>iconDensityAware</code>
 * @returns {sap.m.IconTabSeparator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabSeparator.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.IconTabSeparator(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Specifies whether the separator is rendered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.IconTabSeparator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.IconTabSeparator.prototype.setVisible = function(bVisible) { return new sap.m.IconTabSeparator(); };


// ---- sap.m.Image --------------------------------------------------------------------------

/**
 * Constructor for a new Image.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSrc src} : sap.ui.core.URI</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getDecorative decorative} : boolean (default: true)</li>
 * <li>{@link #getAlt alt} : string</li>
 * <li>{@link #getUseMap useMap} : string</li>
 * <li>{@link #getDensityAware densityAware} : boolean (default: true)</li>
 * <li>{@link #getActiveSrc activeSrc} : sap.ui.core.URI (default: )</li>
 * <li>{@link #getMode mode} : sap.m.ImageMode (default: Image)</li>
 * <li>{@link #getBackgroundSize backgroundSize} : string (default: cover)</li>
 * <li>{@link #getBackgroundPosition backgroundPosition} : string (default: initial)</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : string (default: no-repeat)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getDetailBox detailBox} : sap.m.LightBox</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:load load} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:error error} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * A wrapper around the IMG tag. The image can be loaded from a remote or local server.
 * 
 * Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided. The valid desity values are 1, 1.5, 2. If the original devicePixelRatio isn't one of the three valid numbers, it's rounded up to the nearest one.
 * 
 * There are various size setting options available, and the images can be combined with actions.
 * 
 * From version 1.30, new image mode sap.m.ImageMode.Background is added. When this mode is set, the src property is set using the css style 'background-image'. The properties 'backgroundSize', 'backgroundPosition', 'backgroundRepeat' have effect only when image is in sap.m.ImageMode.Background mode. In order to make the high density image correctly displayed, the 'backgroundSize' should be set to the dimension of the normal density version.
 * 
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Image = function(sId,mSettings) {};
/**
 * Event is fired when the image resource can't be loaded. If densityAware is set to true, the event is fired when none of the fallback resources can be loaded.
 * @event
 * @since 1.36.2
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Image.prototype.error = function(oControlEvent) {  };

/**
 * Event is fired when the image resource is loaded.
 * @event
 * @since 1.36.2
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Image.prototype.load = function(oControlEvent) {  };

/**
 * Event is fired when the user clicks on the control.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Image.prototype.press = function(oControlEvent) {  };

/**
 * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead)
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Image.prototype.tap = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:error error} event of this <code>sap.m.Image</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Image</code> itself.
 * 
 * Event is fired when the image resource can't be loaded. If densityAware is set to true, the event is fired when none of the fallback resources can be loaded.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Image</code> itself
 * 
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.36.2
 * 
 */
sap.m.Image.prototype.attachError = function(oData,fnFunction,oListener) { return new sap.m.Image(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:load load} event of this <code>sap.m.Image</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Image</code> itself.
 * 
 * Event is fired when the image resource is loaded.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Image</code> itself
 * 
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.36.2
 * 
 */
sap.m.Image.prototype.attachLoad = function(oData,fnFunction,oListener) { return new sap.m.Image(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.Image</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Image</code> itself.
 * 
 * Event is fired when the user clicks on the control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Image</code> itself
 * 
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Image(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:tap tap} event of this <code>sap.m.Image</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Image</code> itself.
 * 
 * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead)
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Image</code> itself
 * 
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Image.prototype.attachTap = function(oData,fnFunction,oListener) { return new sap.m.Image(); };

/**
 * Binds aggregation {@link #getDetailBox detailBox} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Image.prototype.bindDetailBox = function(oBindingInfo) { return new sap.m.Image(); };

/**
 * Destroys the detailBox in the aggregation {@link #getDetailBox detailBox}.
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Image.prototype.destroyDetailBox = function() { return new sap.m.Image(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:error error} event of this <code>sap.m.Image</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.2
 * 
 * @public
 * 
 */
sap.m.Image.prototype.detachError = function(fnFunction,oListener) { return new sap.m.Image(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:load load} event of this <code>sap.m.Image</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.2
 * 
 * @public
 * 
 */
sap.m.Image.prototype.detachLoad = function(fnFunction,oListener) { return new sap.m.Image(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.Image</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Image.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Image(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:tap tap} event of this <code>sap.m.Image</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Image.prototype.detachTap = function(fnFunction,oListener) { return new sap.m.Image(); };

/**
 * Creates a new subclass of class sap.m.Image with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Image.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:error error} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.36.2
 * 
 */
sap.m.Image.prototype.fireError = function(mParameters) { return new sap.m.Image(); };

/**
 * Fires event {@link #event:load load} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.36.2
 * 
 */
sap.m.Image.prototype.fireLoad = function(mParameters) { return new sap.m.Image(); };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Image.prototype.firePress = function(mParameters) { return new sap.m.Image(); };

/**
 * Fires event {@link #event:tap tap} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Image.prototype.fireTap = function(mParameters) { return new sap.m.Image(); };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.Image.prototype.getAccessibilityInfo = function() {  };

/**
 * Gets current value of property {@link #getActiveSrc activeSrc}.
 * 
 * The source property which is used when the image is pressed.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.URI} Value of property <code>activeSrc</code>
 * 
 * @public
 * 
 */
sap.m.Image.prototype.getActiveSrc = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getAlt alt}.
 * 
 * The alternative text that is displayed in case the Image is not available, or cannot be displayed.
 * If the image is set to decorative this property is ignored.
 * 
 * @returns {string} Value of property <code>alt</code>
 * 
 * @public
 * 
 */
sap.m.Image.prototype.getAlt = function() { return ""; };

/**
 * Gets current value of property {@link #getBackgroundPosition backgroundPosition}.
 * 
 * Defines the position of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-position'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
 * 
 * Default value is <code>initial</code>.
 * @returns {string} Value of property <code>backgroundPosition</code>
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.m.Image.prototype.getBackgroundPosition = function() { return ""; };

/**
 * Gets current value of property {@link #getBackgroundRepeat backgroundRepeat}.
 * 
 * Defines whether the source image is repeated when the output DOM element is bigger than the source. This property is set on the output DOM element using CSS style 'background-repeat'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
 * 
 * Default value is <code>no-repeat</code>.
 * @returns {string} Value of property <code>backgroundRepeat</code>
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.m.Image.prototype.getBackgroundRepeat = function() { return ""; };

/**
 * Gets current value of property {@link #getBackgroundSize backgroundSize}.
 * 
 * Defines the size of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-size'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
 * 
 * Default value is <code>cover</code>.
 * @returns {string} Value of property <code>backgroundSize</code>
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.m.Image.prototype.getBackgroundSize = function() { return ""; };

/**
 * Gets current value of property {@link #getDecorative decorative}.
 * 
 * A decorative image is included for design reasons. Accessibility tools will ignore decorative images.
 * 
 * Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
 * A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>decorative</code>
 * 
 * @public
 * 
 */
sap.m.Image.prototype.getDecorative = function() { return false; };

/**
 * Gets current value of property {@link #getDensityAware densityAware}.
 * 
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>densityAware</code>
 * 
 * @public
 * 
 */
sap.m.Image.prototype.getDensityAware = function() { return false; };

/**
 * Gets content of aggregation {@link #getDetailBox detailBox}.
 * 
 * A <code>sap.m.LightBox</code> instance, that will be opened automatically when the user interacts with the image.
 * 
 * The <code>tap</code> event will still be fired.
 * 
 * @returns {sap.m.LightBox}
 * 
 * @public
 * 
 */
sap.m.Image.prototype.getDetailBox = function() { return new sap.m.LightBox(); };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.m.Image.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.Image.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Image.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMode mode}.
 * 
 * Defines how the src and the activeSrc is output to the Dom Element. When set to sap.m.ImageMode.Image which is the default value, the src (activeSrc) is set to the 'src' attribute of the 'img' tag. When set to sap.m.ImageMode.Background, the src (activeSrc) is set to the CSS style 'background-image' and the root DOM element is rendered as a 'span' tag instead of an 'img' tag.
 * 
 * Default value is <code>Image</code>.
 * @returns {sap.m.ImageMode} Value of property <code>mode</code>
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.m.Image.prototype.getMode = function() { return new sap.m.ImageMode(); };

/**
 * Gets current value of property {@link #getSrc src}.
 * 
 * Relative or absolute path to URL where the image file is stored. The path will be adapted to the density aware format according to the density of the device following the convention that [imageName]@[densityValue].[extension]
 * 
 * @returns {sap.ui.core.URI} Value of property <code>src</code>
 * 
 * @public
 * 
 */
sap.m.Image.prototype.getSrc = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getUseMap useMap}.
 * 
 * The name of the image map that defines the clickable areas
 * 
 * @returns {string} Value of property <code>useMap</code>
 * 
 * @public
 * 
 */
sap.m.Image.prototype.getUseMap = function() { return ""; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.Image.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * This overrides the default setter of the activeSrc property in order to avoid the rerendering.
 * 
 * @param {sap.ui.core.URI} sActiveSrc
 * @returns {sap.m.Image} <code>this</code> pointer for chaining
 * @public
 * 
 */
sap.m.Image.prototype.setActiveSrc = function(sActiveSrc) { return new sap.m.Image(); };

/**
 * Sets a new value for property {@link #getAlt alt}.
 * 
 * The alternative text that is displayed in case the Image is not available, or cannot be displayed.
 * If the image is set to decorative this property is ignored.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sAlt New value for property <code>alt</code>
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Image.prototype.setAlt = function(sAlt) { return new sap.m.Image(); };

/**
 * Sets a new value for property {@link #getBackgroundPosition backgroundPosition}.
 * 
 * Defines the position of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-position'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>initial</code>.
 * @param {string} sBackgroundPosition New value for property <code>backgroundPosition</code>
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.m.Image.prototype.setBackgroundPosition = function(sBackgroundPosition) { return new sap.m.Image(); };

/**
 * Sets a new value for property {@link #getBackgroundRepeat backgroundRepeat}.
 * 
 * Defines whether the source image is repeated when the output DOM element is bigger than the source. This property is set on the output DOM element using CSS style 'background-repeat'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>no-repeat</code>.
 * @param {string} sBackgroundRepeat New value for property <code>backgroundRepeat</code>
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.m.Image.prototype.setBackgroundRepeat = function(sBackgroundRepeat) { return new sap.m.Image(); };

/**
 * Sets a new value for property {@link #getBackgroundSize backgroundSize}.
 * 
 * Defines the size of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-size'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>cover</code>.
 * @param {string} sBackgroundSize New value for property <code>backgroundSize</code>
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.m.Image.prototype.setBackgroundSize = function(sBackgroundSize) { return new sap.m.Image(); };

/**
 * Sets a new value for property {@link #getDecorative decorative}.
 * 
 * A decorative image is included for design reasons. Accessibility tools will ignore decorative images.
 * 
 * Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
 * A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bDecorative New value for property <code>decorative</code>
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Image.prototype.setDecorative = function(bDecorative) { return new sap.m.Image(); };

/**
 * Sets a new value for property {@link #getDensityAware densityAware}.
 * 
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bDensityAware New value for property <code>densityAware</code>
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Image.prototype.setDensityAware = function(bDensityAware) { return new sap.m.Image(); };

/**
 * Sets the aggregated {@link #getDetailBox detailBox}.
 * @param {sap.m.LightBox} oDetailBox The detailBox to set
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Image.prototype.setDetailBox = function(oDetailBox) { return new sap.m.Image(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Image.prototype.setHeight = function(sHeight) { return new sap.m.Image(); };

/**
 * Sets a new value for property {@link #getMode mode}.
 * 
 * Defines how the src and the activeSrc is output to the Dom Element. When set to sap.m.ImageMode.Image which is the default value, the src (activeSrc) is set to the 'src' attribute of the 'img' tag. When set to sap.m.ImageMode.Background, the src (activeSrc) is set to the CSS style 'background-image' and the root DOM element is rendered as a 'span' tag instead of an 'img' tag.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Image</code>.
 * @param {sap.m.ImageMode} sMode New value for property <code>mode</code>
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.m.Image.prototype.setMode = function(sMode) { return new sap.m.Image(); };

/**
 * This overrides the default setter of the src property and update the dom node.
 * 
 * @param {sap.ui.core.URI} sSrc
 * @public
 * 
 */
sap.m.Image.prototype.setSrc = function(sSrc) {  };

/**
 * Sets a new value for property {@link #getUseMap useMap}.
 * 
 * The name of the image map that defines the clickable areas
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sUseMap New value for property <code>useMap</code>
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Image.prototype.setUseMap = function(sUseMap) { return new sap.m.Image(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Image.prototype.setWidth = function(sWidth) { return new sap.m.Image(); };

/**
 * Unbinds aggregation {@link #getDetailBox detailBox} from model data.
 * @returns {sap.m.Image} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Image.prototype.unbindDetailBox = function() { return new sap.m.Image(); };


// ---- sap.m.ImageContent --------------------------------------------------------------------------

/**
 * Constructor for a new sap.m.ImageContent control.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSrc src} : sap.ui.core.URI</li>
 * <li>{@link #getDescription description} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class This control can be displayed as image content in a tile.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * @since 1.38
 * 
 * @public
 * @ui5-metamodel This control will also be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ImageContent = function(sId,mSettings) {};
/**
 * The event is triggered when the image content is pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ImageContent.prototype.press = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.ImageContent</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ImageContent</code> itself.
 * 
 * The event is triggered when the image content is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ImageContent</code> itself
 * 
 * @returns {sap.m.ImageContent} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ImageContent.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.ImageContent(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.ImageContent</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ImageContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ImageContent.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.ImageContent(); };

/**
 * Creates a new subclass of class sap.m.ImageContent with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ImageContent.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ImageContent} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ImageContent.prototype.firePress = function(mParameters) { return new sap.m.ImageContent(); };

/**
 * Gets current value of property {@link #getDescription description}.
 * 
 * Description of image. This text is used to provide ScreenReader information.
 * 
 * @returns {string} Value of property <code>description</code>
 * 
 * @public
 * 
 */
sap.m.ImageContent.prototype.getDescription = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.ImageContent.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ImageContent.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSrc src}.
 * 
 * The image to be displayed as a graphical element within the imageContent. This can be an image or an icon from the icon font.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>src</code>
 * 
 * @public
 * 
 */
sap.m.ImageContent.prototype.getSrc = function() { return new sap.ui.core.URI(); };

/**
 * Sets a new value for property {@link #getDescription description}.
 * 
 * Description of image. This text is used to provide ScreenReader information.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sDescription New value for property <code>description</code>
 * @returns {sap.m.ImageContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ImageContent.prototype.setDescription = function(sDescription) { return new sap.m.ImageContent(); };

/**
 * Sets a new value for property {@link #getSrc src}.
 * 
 * The image to be displayed as a graphical element within the imageContent. This can be an image or an icon from the icon font.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sSrc New value for property <code>src</code>
 * @returns {sap.m.ImageContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ImageContent.prototype.setSrc = function(sSrc) { return new sap.m.ImageContent(); };


// ---- sap.m.ImageHelper --------------------------------------------------------------------------

/**
 * Creates or updates an image control.
 * 
 * @param {string} sImgId id of the image to be dealt with.
 * @param {sap.m.Image} oImageControl the image to update. If undefined, a new image will be created.
 * @param {sap.ui.core.Control} oParent oImageControl's parentControl.
 * @param {Map} mProperties map object that contains key value pairs if image propeties. The 'src' property
 * MUST be contained. Also the map's keys must be names of image properties
 * @param {Array} aCssClassesToAdd array of css classes which will be added if the image needs to be created.
 * @param {Array} aCssClassesToRemove all css clases that oImageControl has and which are contained in this array
 * are removed bevore adding the css classes listed in aCssClassesToAdd.
 * @returns the new or updated image control
 * 
 * @protected
 * 
 * @memberof sap.m.ImageHelper
 */
sap.m.ImageHelper.prototype.getImageControl = function(sImgId,oImageControl,oParent,mProperties,aCssClassesToAdd,aCssClassesToRemove) {  };


// ---- sap.m.ImageMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ImageMode.toString = function() { return ""; };

// ---- sap.m.Input --------------------------------------------------------------------------

/**
 * Constructor for a new Input.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.InputType (default: Text)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getDateFormat dateFormat} : string (default: YYYY-MM-dd)</li>
 * <li>{@link #getShowValueHelp showValueHelp} : boolean (default: false)</li>
 * <li>{@link #getShowSuggestion showSuggestion} : boolean (default: false)</li>
 * <li>{@link #getValueHelpOnly valueHelpOnly} : boolean (default: false)</li>
 * <li>{@link #getFilterSuggests filterSuggests} : boolean (default: true)</li>
 * <li>{@link #getMaxSuggestionWidth maxSuggestionWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getStartSuggestion startSuggestion} : int (default: 1)</li>
 * <li>{@link #getShowTableSuggestionValueHelp showTableSuggestionValueHelp} : boolean (default: true)</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getFieldWidth fieldWidth} : sap.ui.core.CSSSize (default: 50%)</li>
 * <li>{@link #getValueLiveUpdate valueLiveUpdate} : boolean (default: false)</li>
 * <li>{@link #getSelectedKey selectedKey} : string (default: )</li>
 * <li>{@link #getTextFormatMode textFormatMode} : sap.m.InputTextFormatMode (default: Value)</li>
 * <li>{@link #getTextFormatter textFormatter} : any (default: )</li>
 * <li>{@link #getSuggestionRowValidator suggestionRowValidator} : any (default: )</li>
 * <li>{@link #getEnableSuggestionsHighlighting enableSuggestionsHighlighting} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSuggestionItems suggestionItems} : sap.ui.core.Item[] (default)</li>
 * <li>{@link #getSuggestionColumns suggestionColumns} : sap.m.Column[]</li>
 * <li>{@link #getSuggestionRows suggestionRows} : sap.m.ColumnListItem[]</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedItem selectedItem} : (sap.ui.core.ID | sap.ui.core.Item)</li>
 * <li>{@link #getSelectedRow selectedRow} : (sap.ui.core.ID | sap.m.ColumnListItem)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:valueHelpRequest valueHelpRequest} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:suggest suggest} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:suggestionItemSelected suggestionItemSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:submit submit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <strong><em>Overview</em></strong>
 * <br /><br />
 * A text input field allows you to enter and edit text or numeric values in one line.
 * To easily enter a valid value, you can enable the autocomplete suggestion feature and the value help option.
 * <br><br>
 * <strong>Guidelines:</strong>
 * <ul>
 * <li> Always provide a meaningful label for any input field </li>
 * <li> Limit the length of the input field. This will visually emphasise the constraints for the field. </li>
 * <li> Do not use the <code>placeholder</code> property as a label.</li>
 * <li> Use the <code>description</code> property only for small fields with no placeholders (i.e. for currencies).</li>
 * </ul>
 * <strong><em>Structure</em></strong>
 * <br><br>
 * The controls inherits from {@link sap.m.InputBase} which controls the core properties like:
 * <ul>
 * <li> editable / read-only </li>
 * <li> enabled / disabled</li>
 * <li> placeholder</li>
 * <li> text direction</li>
 * <li> value states</li>
 * </ul>
 * To aid the user during input, you can enable value help (<code>showValueHelp</code>) or autocomplete (<code>showSuggestion</code>).
 * <strong>Value help</strong> will open a new dialog where you can refine your input.
 * <strong>Autocomplete</strong> has three types of suggestions:
 * <ul>
 * <li> Single value - a list of suggestions of type <code>sap.ui.core.Item</code> or <code>sap.ui.core.ListItem</code> </li>
 * <li> Two values - a list of two suggestions (ID and description) of type <code>sap.ui.core.Item</code> or <code>sap.ui.core.ListItem</code> </li>
 * <li> Tabular suggestions of type <code>sap.m.ColumnListItem</code> </li>
 * </ul>
 * The suggestions are stored in two aggregations <code>suggestionItems</code> (for single and double values) and <code>suggestionRows</code> (for tabular values).
 * 
 * <br><br>
 * <strong><em>Usage</em></strong>
 * <br><br>
 * <strong>When to use:</strong>
 * Use the control for short inputs like emails, phones, passwords, fields for assisted value selection.
 * 
 * <strong>When not to use:</strong>
 * Don't use the control for long texts, dates, designated search fields, fields for multiple selection.
 * <br><br>
 * 
 * @extends sap.m.InputBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Input = function(sId,mSettings) {};
/**
 * This event is fired when the value of the input is changed - e.g. at each keypress
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new value of the input.
 * @param {boolean} oControlEvent.getParameters.escPressed Indicate that ESC key triggered the event.
 * @param {string} oControlEvent.getParameters.previousValue The value of the input before pressing ESC key.
 * @public
 * 
 */
sap.m.Input.prototype.liveChange = function(oControlEvent) {  };

/**
 * This event is fired when user presses the <code>Enter</code> key on the input.
 * 
 * <b>Note:</b>
 * The event is fired independent of whether there was a change before or not. If a change was performed the event is fired after the change event.
 * The event is also fired when an item of the select list is selected via <code>Enter</code>.
 * The event is only fired on an input which allows text input (<code>editable</code>, <code>enabled</code> and not <code>valueHelpOnly</code>).
 * @event
 * @since 1.33.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new value of the input.
 * @public
 * 
 */
sap.m.Input.prototype.submit = function(oControlEvent) {  };

/**
 * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup.
 * @event
 * @since 1.16.1
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.suggestValue The current value which has been typed in the input.
 * @param {sap.m.ListBase} oControlEvent.getParameters.suggestionColumns The suggestion list is passed to this event for convenience. If you use list-based or tabular suggestions, fill the suggestionList with the items you want to suggest. Otherwise, directly add the suggestions to the "suggestionItems" aggregation of the input control.
 * @public
 * 
 */
sap.m.Input.prototype.suggest = function(oControlEvent) {  };

/**
 * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.
 * @event
 * @since 1.16.3
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem This is the item selected in the suggestion popup for one and two-value suggestions. For tabular suggestions, this value will not be set.
 * @param {sap.m.ColumnListItem} oControlEvent.getParameters.selectedRow This is the row selected in the tabular suggestion popup represented as a ColumnListItem. For one and two-value suggestions, this value will not be set.
 * 
 * Note: The row result function to select a result value for the string is already executed at this time. To pick different value for the input field or to do follow up steps after the item has been selected.
 * @public
 * 
 */
sap.m.Input.prototype.suggestionItemSelected = function(oControlEvent) {  };

/**
 * When the value help indicator is clicked, this event will be fired.
 * @event
 * @since 1.16
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.fromSuggestions The event parameter is set to true, when the button at the end of the suggestion table is clicked, otherwise false. It can be used to determine whether the "value help" trigger or the "show all items" trigger has been pressed.
 * @public
 * 
 */
sap.m.Input.prototype.valueHelpRequest = function(oControlEvent) {  };

/**
 * Adds some suggestionColumn to the aggregation {@link #getSuggestionColumns suggestionColumns}.
 * @param {sap.m.Column}
 *            oSuggestionColumn the suggestionColumn to add; if empty, nothing is inserted
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.addSuggestionColumn = function(oSuggestionColumn) { return new sap.m.Input(); };

/**
 * Adds some suggestionItem to the aggregation {@link #getSuggestionItems suggestionItems}.
 * @param {sap.ui.core.Item}
 *            oSuggestionItem the suggestionItem to add; if empty, nothing is inserted
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.addSuggestionItem = function(oSuggestionItem) { return new sap.m.Input(); };

/**
 * Adds some suggestionRow to the aggregation {@link #getSuggestionRows suggestionRows}.
 * @param {sap.m.ColumnListItem}
 *            oSuggestionRow the suggestionRow to add; if empty, nothing is inserted
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.addSuggestionRow = function(oSuggestionRow) { return new sap.m.Input(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:liveChange liveChange} event of this <code>sap.m.Input</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Input</code> itself.
 * 
 * This event is fired when the value of the input is changed - e.g. at each keypress
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself
 * 
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Input.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:submit submit} event of this <code>sap.m.Input</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Input</code> itself.
 * 
 * This event is fired when user presses the <code>Enter</code> key on the input.
 * 
 * <b>Note:</b>
 * The event is fired independent of whether there was a change before or not. If a change was performed the event is fired after the change event.
 * The event is also fired when an item of the select list is selected via <code>Enter</code>.
 * The event is only fired on an input which allows text input (<code>editable</code>, <code>enabled</code> and not <code>valueHelpOnly</code>).
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself
 * 
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.33.0
 * 
 */
sap.m.Input.prototype.attachSubmit = function(oData,fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:suggest suggest} event of this <code>sap.m.Input</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Input</code> itself.
 * 
 * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself
 * 
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.attachSuggest = function(oData,fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:suggestionItemSelected suggestionItemSelected} event of this <code>sap.m.Input</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Input</code> itself.
 * 
 * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself
 * 
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.16.3
 * 
 */
sap.m.Input.prototype.attachSuggestionItemSelected = function(oData,fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:valueHelpRequest valueHelpRequest} event of this <code>sap.m.Input</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Input</code> itself.
 * 
 * When the value help indicator is clicked, this event will be fired.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself
 * 
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Input.prototype.attachValueHelpRequest = function(oData,fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Forwards aggregations with the name of items or columns to the internal table.
 * @overwrite
 * @public
 * @param {string} sAggregationName the name for the binding
 * @param {object} oBindingInfo the configuration parameters for the binding
 * @returns {sap.m.Input} this pointer for chaining
 * 
 */
sap.m.Input.prototype.bindAggregation = function(sAggregationName,oBindingInfo) { return new sap.m.Input(); };

/**
 * Binds aggregation {@link #getSuggestionColumns suggestionColumns} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.bindSuggestionColumns = function(oBindingInfo) { return new sap.m.Input(); };

/**
 * Binds aggregation {@link #getSuggestionRows suggestionRows} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.bindSuggestionRows = function(oBindingInfo) { return new sap.m.Input(); };

/**
 * Closes the suggestion list.
 * @public
 * @since 1.48
 * 
 */
sap.m.Input.prototype.closeSuggestions = function() {  };

/**
 * Destroys all the suggestionColumns in the aggregation {@link #getSuggestionColumns suggestionColumns}.
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.destroySuggestionColumns = function() { return new sap.m.Input(); };

/**
 * Destroys all the suggestionItems in the aggregation {@link #getSuggestionItems suggestionItems}.
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.destroySuggestionItems = function() { return new sap.m.Input(); };

/**
 * Destroys all the suggestionRows in the aggregation {@link #getSuggestionRows suggestionRows}.
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.destroySuggestionRows = function() { return new sap.m.Input(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:liveChange liveChange} event of this <code>sap.m.Input</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Input.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:submit submit} event of this <code>sap.m.Input</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.33.0
 * 
 * @public
 * 
 */
sap.m.Input.prototype.detachSubmit = function(fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:suggest suggest} event of this <code>sap.m.Input</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.detachSuggest = function(fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:suggestionItemSelected suggestionItemSelected} event of this <code>sap.m.Input</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.3
 * 
 * @public
 * 
 */
sap.m.Input.prototype.detachSuggestionItemSelected = function(fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:valueHelpRequest valueHelpRequest} event of this <code>sap.m.Input</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Input.prototype.detachValueHelpRequest = function(fnFunction,oListener) { return new sap.m.Input(); };

/**
 * Creates a new subclass of class sap.m.Input with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Input.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:liveChange liveChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.value] The new value of the input.
 * @param {boolean} [mParameters.escPressed] Indicate that ESC key triggered the event.
 * @param {string} [mParameters.previousValue] The value of the input before pressing ESC key.
 * 
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Input.prototype.fireLiveChange = function(mParameters) { return new sap.m.Input(); };

/**
 * Fires event {@link #event:submit submit} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.value] The new value of the input.
 * 
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.33.0
 * 
 */
sap.m.Input.prototype.fireSubmit = function(mParameters) { return new sap.m.Input(); };

/**
 * Fires event {@link #event:suggest suggest} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.suggestValue] The current value which has been typed in the input.
 * @param {sap.m.ListBase} [mParameters.suggestionColumns] The suggestion list is passed to this event for convenience. If you use list-based or tabular suggestions, fill the suggestionList with the items you want to suggest. Otherwise, directly add the suggestions to the "suggestionItems" aggregation of the input control.
 * 
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.16.1
 * 
 */
sap.m.Input.prototype.fireSuggest = function(mParameters) { return new sap.m.Input(); };

/**
 * Fires event {@link #event:suggestionItemSelected suggestionItemSelected} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Item} [mParameters.selectedItem] This is the item selected in the suggestion popup for one and two-value suggestions. For tabular suggestions, this value will not be set.
 * @param {sap.m.ColumnListItem} [mParameters.selectedRow] This is the row selected in the tabular suggestion popup represented as a ColumnListItem. For one and two-value suggestions, this value will not be set.
 * 
 * Note: The row result function to select a result value for the string is already executed at this time. To pick different value for the input field or to do follow up steps after the item has been selected.
 * 
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.16.3
 * 
 */
sap.m.Input.prototype.fireSuggestionItemSelected = function(mParameters) { return new sap.m.Input(); };

/**
 * Fires event {@link #event:valueHelpRequest valueHelpRequest} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.fromSuggestions] The event parameter is set to true, when the button at the end of the suggestion table is clicked, otherwise false. It can be used to determine whether the "value help" trigger or the "show all items" trigger has been pressed.
 * 
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.16
 * 
 */
sap.m.Input.prototype.fireValueHelpRequest = function(mParameters) { return new sap.m.Input(); };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.Input.prototype.getAccessibilityInfo = function() {  };

/**
 * Gets current value of property {@link #getDateFormat dateFormat}.
 * 
 * Only used if type=date and no datepicker is available.
 * The data is displayed and the user input is parsed according to this format.
 * NOTE: The value property is always of the form RFC 3339 (YYYY-MM-dd).
 * 
 * Default value is <code>YYYY-MM-dd</code>.
 * @returns {string} Value of property <code>dateFormat</code>
 * 
 * @deprecated Since version 1.9.1.
 * <code>sap.m.DatePicker</code>, <code>sap.m.TimePicker</code> or <code>sap.m.DateTimePicker</code> should be used for date/time inputs and formating.
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getDateFormat = function() { return ""; };

/**
 * Gets current value of property {@link #getDescription description}.
 * 
 * The description is a text after the input field, e.g. units of measurement, currencies.
 * 
 * @returns {string} Value of property <code>description</code>
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getDescription = function() { return ""; };

/**
 * Gets current value of property {@link #getEnableSuggestionsHighlighting enableSuggestionsHighlighting}.
 * 
 * Specifies whether the suggestions highlighting is enabled.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enableSuggestionsHighlighting</code>
 * @since 1.46
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getEnableSuggestionsHighlighting = function() { return false; };

/**
 * Gets current value of property {@link #getFieldWidth fieldWidth}.
 * 
 * This property only takes effect if the description property is set. It controls the distribution of space between the input field and the description text. The default value is 50% leaving the other 50% for the description.
 * 
 * Default value is <code>50%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>fieldWidth</code>
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getFieldWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getFilterSuggests filterSuggests}.
 * 
 * Defines whether to filter the provided suggestions before showing them to the user.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>filterSuggests</code>
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getFilterSuggests = function() { return false; };

/**
 * Gets current value of property {@link #getMaxLength maxLength}.
 * 
 * Maximum number of characters. Value '0' means the feature is switched off.
 * This parameter is not compatible with the input type <code>sap.m.InputType.Number</code>.
 * If the input type is set to <code>Number</code>, the <code>maxLength</code> value is ignored.
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>maxLength</code>
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getMaxLength = function() { return 0; };

/**
 * Gets current value of property {@link #getMaxSuggestionWidth maxSuggestionWidth}.
 * 
 * If set, the value of this parameter will control the horizontal size of the suggestion list to display more data. This allows suggestion lists to be wider than the input field if there is enough space available. By default, the suggestion list is always as wide as the input field.
 * Note: The value will be ignored if the actual width of the input field is larger than the specified parameter value.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>maxSuggestionWidth</code>
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getMaxSuggestionWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.Input.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Input.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * ID of the element which is the current target of the association {@link #getSelectedItem selectedItem}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getSelectedItem = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getSelectedKey selectedKey}.
 * 
 * Defines the key of the selected item.
 * 
 * <b>Note:</b> If duplicate keys exist, the first item matching the key is used.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>selectedKey</code>
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getSelectedKey = function() { return ""; };

/**
 * ID of the element which is the current target of the association {@link #getSelectedRow selectedRow}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getSelectedRow = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getShowSuggestion showSuggestion}.
 * 
 * If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions are shown in a popup next to the input.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showSuggestion</code>
 * @since 1.16.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getShowSuggestion = function() { return false; };

/**
 * Gets current value of property {@link #getShowTableSuggestionValueHelp showTableSuggestionValueHelp}.
 * 
 * For tabular suggestions, this flag will show/hide the button at the end of the suggestion table that triggers the event "valueHelpRequest" when pressed. The default value is true.
 * 
 * NOTE: If suggestions are not tabular or no suggestions are used, the button will not be displayed and this flag is without effect.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showTableSuggestionValueHelp</code>
 * @since 1.22.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getShowTableSuggestionValueHelp = function() { return false; };

/**
 * Gets current value of property {@link #getShowValueHelp showValueHelp}.
 * 
 * If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest" will be fired.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showValueHelp</code>
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getShowValueHelp = function() { return false; };

/**
 * Getter for property <code>showValueStateMessage</code>.
 * Whether the value state message should be shown. This property is already available for sap.m.Input since 1.16.0.
 * 
 * Default value is <code>true</code>
 * 
 * @return {boolean} the value of property <code>showValueStateMessage</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.Input.prototype.getShowValueStateMessage = function() { return false; };

/**
 * Gets current value of property {@link #getStartSuggestion startSuggestion}.
 * 
 * Minimum length of the entered text in input before suggest event is fired. The default value is 1 which means the suggest event is fired after user types in input. When it's set to 0, suggest event is fired when input with no text gets focus.
 * 
 * Default value is <code>1</code>.
 * @returns {int} Value of property <code>startSuggestion</code>
 * @since 1.21.2
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getStartSuggestion = function() { return 0; };

/**
 * Gets content of aggregation {@link #getSuggestionColumns suggestionColumns}.
 * 
 * The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for binding the table columns; for more details see the aggregation "suggestionRows".
 * 
 * @returns {sap.m.Column[]}
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getSuggestionColumns = function() { return new Array(); };

/**
 * Gets the item with the given key from the aggregation <code>suggestionItems</code>.
 * 
 * <b>Note:</b> If duplicate keys exist, the first item matching the key is returned.
 * 
 * @param {string} sKey An item key that specifies the item to retrieve.
 * @returns {sap.ui.core.Item | undefined}
 * @public
 * @since 1.44
 * 
 */
sap.m.Input.prototype.getSuggestionItemByKey = function(sKey) { return new sap.ui.core.Item(); };

/**
 * Gets content of aggregation {@link #getSuggestionItems suggestionItems}.
 * 
 * SuggestItems are the items which will be shown in the suggestion popup. Changing this aggregation (by calling addSuggestionItem, insertSuggestionItem, removeSuggestionItem, removeAllSuggestionItems, destroySuggestionItems) after input is rendered will open/close the suggestion popup. o display suggestions with two text values, it is also possible to add sap.ui.core/ListItems as SuggestionItems (since 1.21.1). For the selected ListItem, only the first value is returned to the input field.
 * 
 * @returns {sap.ui.core.Item[]}
 * @since 1.16.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getSuggestionItems = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getSuggestionRows suggestionRows}.
 * 
 * The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for binding the table cells.
 * The items of this aggregation are to be bound directly or to set in the suggest event method.
 * Note: If this aggregation is filled, the aggregation suggestionItems will be ignored.
 * 
 * @returns {sap.m.ColumnListItem[]}
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getSuggestionRows = function() { return new Array(); };

/**
 * Gets current value of property {@link #getSuggestionRowValidator suggestionRowValidator}.
 * 
 * Defines the validation callback function called when a suggestion row gets selected.
 * 
 * Default value is <code></code>.
 * @returns {any} Value of property <code>suggestionRowValidator</code>
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getSuggestionRowValidator = function() { return null; };

/**
 * Gets current value of property {@link #getTextFormatMode textFormatMode}.
 * 
 * Defines the display text format mode.
 * 
 * Default value is <code>Value</code>.
 * @returns {sap.m.InputTextFormatMode} Value of property <code>textFormatMode</code>
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getTextFormatMode = function() { return new sap.m.InputTextFormatMode(); };

/**
 * Gets current value of property {@link #getTextFormatter textFormatter}.
 * 
 * Defines the display text formatter function.
 * 
 * Default value is <code></code>.
 * @returns {any} Value of property <code>textFormatter</code>
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getTextFormatter = function() { return null; };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * HTML type of the internal <code>input</code> tag (e.g. Text, Number, Email, Phone).
 * The particular effect of this property differs depending on the browser and the current language settings,
 * especially for the type Number.<br>
 * This parameter is intended to be used with touch devices that use different soft keyboard layouts depending on the given input type.<br>
 * Only the default value <code>sap.m.InputType.Text</code> may be used in combination with data model formats.
 * <code>sap.ui.model</code> defines extended formats that are mostly incompatible with normal HTML
 * representations for numbers and dates.
 * 
 * Default value is <code>Text</code>.
 * @returns {sap.m.InputType} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getType = function() { return new sap.m.InputType(); };

/**
 * Gets current value of property {@link #getValueHelpOnly valueHelpOnly}.
 * 
 * If set to true, direct text input is disabled and the control will trigger the event "valueHelpRequest" for all user interactions. The properties "showValueHelp", "editable", and "enabled" must be set to true, otherwise the property will have no effect
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>valueHelpOnly</code>
 * @since 1.21.0
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getValueHelpOnly = function() { return false; };

/**
 * Gets current value of property {@link #getValueLiveUpdate valueLiveUpdate}.
 * 
 * Indicates when the value gets updated with the user changes: At each keystroke (true) or first when the user presses enter or tabs out (false).
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>valueLiveUpdate</code>
 * @since 1.24
 * 
 * @public
 * 
 */
sap.m.Input.prototype.getValueLiveUpdate = function() { return false; };

/**
 * Getter for property <code>valueStateText</code>.
 * The text which is shown in the value state message popup. If not specfied a default text is shown. This property is already available for sap.m.Input since 1.16.0.
 * 
 * Default value is empty/<code>undefined</code>
 * 
 * @return {string} the value of property <code>valueStateText</code>
 * @public
 * @since 1.16
 * 
 */
sap.m.Input.prototype.getValueStateText = function() { return ""; };

/**
 * Returns the width of the input.
 * @public
 * @return {string} The current width or 100% as default
 * 
 */
sap.m.Input.prototype.getWidth = function() { return ""; };

/**
 * Checks for the provided <code>sap.m.Column</code> in the aggregation {@link #getSuggestionColumns suggestionColumns}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Column}
 *           oSuggestionColumn The suggestionColumn whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.indexOfSuggestionColumn = function(oSuggestionColumn) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation {@link #getSuggestionItems suggestionItems}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oSuggestionItem The suggestionItem whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.16.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.indexOfSuggestionItem = function(oSuggestionItem) { return 0; };

/**
 * Checks for the provided <code>sap.m.ColumnListItem</code> in the aggregation {@link #getSuggestionRows suggestionRows}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ColumnListItem}
 *           oSuggestionRow The suggestionRow whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.indexOfSuggestionRow = function(oSuggestionRow) { return 0; };

/**
 * Inserts a suggestionColumn into the aggregation {@link #getSuggestionColumns suggestionColumns}.
 * 
 * @param {sap.m.Column}
 *            oSuggestionColumn the suggestionColumn to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the suggestionColumn should be inserted at; for
 *              a negative value of <code>iIndex</code>, the suggestionColumn is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the suggestionColumn is inserted at
 *              the last position
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.insertSuggestionColumn = function(oSuggestionColumn,iIndex) { return new sap.m.Input(); };

/**
 * Inserts a suggestionItem into the aggregation {@link #getSuggestionItems suggestionItems}.
 * 
 * @param {sap.ui.core.Item}
 *            oSuggestionItem the suggestionItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the suggestionItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the suggestionItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the suggestionItem is inserted at
 *              the last position
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.insertSuggestionItem = function(oSuggestionItem,iIndex) { return new sap.m.Input(); };

/**
 * Inserts a suggestionRow into the aggregation {@link #getSuggestionRows suggestionRows}.
 * 
 * @param {sap.m.ColumnListItem}
 *            oSuggestionRow the suggestionRow to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the suggestionRow should be inserted at; for
 *              a negative value of <code>iIndex</code>, the suggestionRow is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the suggestionRow is inserted at
 *              the last position
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.insertSuggestionRow = function(oSuggestionRow,iIndex) { return new sap.m.Input(); };

/**
 * Fire valueHelpRequest event on tap
 * @public
 * @param {jQuery.Event} oEvent
 * 
 */
sap.m.Input.prototype.ontap = function(oEvent) {  };

/**
 * Removes all the controls from the aggregation {@link #getSuggestionColumns suggestionColumns}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Column[]} An array of the removed elements (might be empty)
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.removeAllSuggestionColumns = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getSuggestionItems suggestionItems}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Item[]} An array of the removed elements (might be empty)
 * @since 1.16.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.removeAllSuggestionItems = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getSuggestionRows suggestionRows}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ColumnListItem[]} An array of the removed elements (might be empty)
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.removeAllSuggestionRows = function() { return new Array(); };

/**
 * Removes a suggestionColumn from the aggregation {@link #getSuggestionColumns suggestionColumns}.
 * 
 * @param {int | string | sap.m.Column} vSuggestionColumn The suggestionColumn to remove or its index or id
 * @returns {sap.m.Column} The removed suggestionColumn or <code>null</code>
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.removeSuggestionColumn = function(vSuggestionColumn) { return new sap.m.Column(); };

/**
 * Removes a suggestionItem from the aggregation {@link #getSuggestionItems suggestionItems}.
 * 
 * @param {int | string | sap.ui.core.Item} vSuggestionItem The suggestionItem to remove or its index or id
 * @returns {sap.ui.core.Item} The removed suggestionItem or <code>null</code>
 * @since 1.16.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.removeSuggestionItem = function(vSuggestionItem) { return new sap.ui.core.Item(); };

/**
 * Removes a suggestionRow from the aggregation {@link #getSuggestionRows suggestionRows}.
 * 
 * @param {int | string | sap.m.ColumnListItem} vSuggestionRow The suggestionRow to remove or its index or id
 * @returns {sap.m.ColumnListItem} The removed suggestionRow or <code>null</code>
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.removeSuggestionRow = function(vSuggestionRow) { return new sap.m.ColumnListItem(); };

/**
 * Sets a new value for property {@link #getDateFormat dateFormat}.
 * 
 * Only used if type=date and no datepicker is available.
 * The data is displayed and the user input is parsed according to this format.
 * NOTE: The value property is always of the form RFC 3339 (YYYY-MM-dd).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>YYYY-MM-dd</code>.
 * @param {string} sDateFormat New value for property <code>dateFormat</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.9.1.
 * <code>sap.m.DatePicker</code>, <code>sap.m.TimePicker</code> or <code>sap.m.DateTimePicker</code> should be used for date/time inputs and formating.
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setDateFormat = function(sDateFormat) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getDescription description}.
 * 
 * The description is a text after the input field, e.g. units of measurement, currencies.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sDescription New value for property <code>description</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setDescription = function(sDescription) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getEnableSuggestionsHighlighting enableSuggestionsHighlighting}.
 * 
 * Specifies whether the suggestions highlighting is enabled.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableSuggestionsHighlighting New value for property <code>enableSuggestionsHighlighting</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setEnableSuggestionsHighlighting = function(bEnableSuggestionsHighlighting) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getFieldWidth fieldWidth}.
 * 
 * This property only takes effect if the description property is set. It controls the distribution of space between the input field and the description text. The default value is 50% leaving the other 50% for the description.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>50%</code>.
 * @param {sap.ui.core.CSSSize} sFieldWidth New value for property <code>fieldWidth</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setFieldWidth = function(sFieldWidth) { return new sap.m.Input(); };

/**
 * Sets a custom filter function for suggestions. The default is to check whether the first item text begins with the typed value. For one and two-value suggestions this callback function will operate on sap.ui.core.Item types, for tabular suggestions the function will operate on sap.m.ColumnListItem types.
 * @param {function} fnFilter The filter function is called when displaying suggestion items and has two input parameters: the first one is the string that is currently typed in the input field and the second one is the item that is being filtered. Returning true will add this item to the popup, returning false will not display it.
 * @returns {sap.m.Input} this pointer for chaining
 * @since 1.16.1
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Input.prototype.setFilterFunction = function(fnFilter) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getFilterSuggests filterSuggests}.
 * 
 * Defines whether to filter the provided suggestions before showing them to the user.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bFilterSuggests New value for property <code>filterSuggests</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setFilterSuggests = function(bFilterSuggests) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getMaxLength maxLength}.
 * 
 * Maximum number of characters. Value '0' means the feature is switched off.
 * This parameter is not compatible with the input type <code>sap.m.InputType.Number</code>.
 * If the input type is set to <code>Number</code>, the <code>maxLength</code> value is ignored.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {int} iMaxLength New value for property <code>maxLength</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setMaxLength = function(iMaxLength) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getMaxSuggestionWidth maxSuggestionWidth}.
 * 
 * If set, the value of this parameter will control the horizontal size of the suggestion list to display more data. This allows suggestion lists to be wider than the input field if there is enough space available. By default, the suggestion list is always as wide as the input field.
 * Note: The value will be ignored if the actual width of the input field is larger than the specified parameter value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sMaxSuggestionWidth New value for property <code>maxSuggestionWidth</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setMaxSuggestionWidth = function(sMaxSuggestionWidth) { return new sap.m.Input(); };

/**
 * Sets a custom result filter function for tabular suggestions to select the text that is passed to the input field. Default is to check whether the first cell with a "text" property begins with the typed value. For one value and two-value suggestions this callback function is not called.
 * @param {function} fnFilter The result function is called with one parameter: the sap.m.ColumnListItem that is selected. The function must return a result string that will be displayed as the input field's value.
 * @returns {sap.m.Input} this pointer for chaining
 * @public
 * @since 1.21.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Input.prototype.setRowResultFunction = function(fnFilter) { return new sap.m.Input(); };

/**
 * Sets the <code>selectedItem</code> association.
 * 
 * Default value is <code>null</code>.
 * 
 * @param {string | sap.ui.core.Item | null} oItem New value for the <code>selectedItem</code> association.
 * If an ID of a <code>sap.ui.core.Item</code> is given, the item with this ID becomes the
 * <code>selectedItem</code> association.
 * Alternatively, a <code>sap.ui.core.Item</code> instance may be given or <code>null</code> to clear
 * the selection.
 * 
 * @returns {sap.m.Input} <code>this</code> to allow method chaining.
 * @public
 * @since 1.44
 * 
 */
sap.m.Input.prototype.setSelectedItem = function(oItem) { return new sap.m.Input(); };

/**
 * Sets the <code>selectedKey</code> property.
 * 
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * 
 * @param {string} sKey New value for property <code>selectedKey</code>.
 * If the provided <code>sKey</code> is an empty string <code>""</code> or <code>undefined</code>,
 * the selection is cleared.
 * If duplicate keys exist, the first item matching the key is selected.
 * 
 * @returns {sap.m.Input} <code>this</code> to allow method chaining.
 * @public
 * @since 1.44
 * 
 */
sap.m.Input.prototype.setSelectedKey = function(sKey) { return new sap.m.Input(); };

/**
 * Sets the <code>selectedRow</code> association.
 * 
 * Default value is <code>null</code>.
 * 
 * @param {string | sap.m.ColumnListItem | null} oListItem New value for the <code>selectedRow</code> association.
 * If an ID of a <code>sap.m.ColumnListItem</code> is given, the item with this ID becomes the
 * <code>selectedRow</code> association.
 * Alternatively, a <code>sap.m.ColumnListItem</code> instance may be given or <code>null</code> to clear
 * the selection.
 * 
 * @returns {sap.m.Input} <code>this</code> to allow method chaining.
 * @public
 * @since 1.44
 * 
 */
sap.m.Input.prototype.setSelectedRow = function(oListItem) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getShowSuggestion showSuggestion}.
 * 
 * If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions are shown in a popup next to the input.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowSuggestion New value for property <code>showSuggestion</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setShowSuggestion = function(bShowSuggestion) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getShowTableSuggestionValueHelp showTableSuggestionValueHelp}.
 * 
 * For tabular suggestions, this flag will show/hide the button at the end of the suggestion table that triggers the event "valueHelpRequest" when pressed. The default value is true.
 * 
 * NOTE: If suggestions are not tabular or no suggestions are used, the button will not be displayed and this flag is without effect.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowTableSuggestionValueHelp New value for property <code>showTableSuggestionValueHelp</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setShowTableSuggestionValueHelp = function(bShowTableSuggestionValueHelp) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getShowValueHelp showValueHelp}.
 * 
 * If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest" will be fired.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowValueHelp New value for property <code>showValueHelp</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setShowValueHelp = function(bShowValueHelp) { return new sap.m.Input(); };

/**
 * Setter for property <code>showValueStateMessage</code>.
 * 
 * Default value is <code>true</code>
 * 
 * @param {boolean} bShowValueStateMessage  new value for property <code>showValueStateMessage</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Input.prototype.setShowValueStateMessage = function(bShowValueStateMessage) { return new sap.m.InputBase(); };

/**
 * Sets a new value for property {@link #getStartSuggestion startSuggestion}.
 * 
 * Minimum length of the entered text in input before suggest event is fired. The default value is 1 which means the suggest event is fired after user types in input. When it's set to 0, suggest event is fired when input with no text gets focus.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>1</code>.
 * @param {int} iStartSuggestion New value for property <code>startSuggestion</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.2
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setStartSuggestion = function(iStartSuggestion) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getSuggestionRowValidator suggestionRowValidator}.
 * 
 * Defines the validation callback function called when a suggestion row gets selected.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {any} oSuggestionRowValidator New value for property <code>suggestionRowValidator</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setSuggestionRowValidator = function(oSuggestionRowValidator) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getTextFormatMode textFormatMode}.
 * 
 * Defines the display text format mode.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Value</code>.
 * @param {sap.m.InputTextFormatMode} sTextFormatMode New value for property <code>textFormatMode</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setTextFormatMode = function(sTextFormatMode) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getTextFormatter textFormatter}.
 * 
 * Defines the display text formatter function.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {any} oTextFormatter New value for property <code>textFormatter</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setTextFormatter = function(oTextFormatter) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getType type}.
 * 
 * HTML type of the internal <code>input</code> tag (e.g. Text, Number, Email, Phone).
 * The particular effect of this property differs depending on the browser and the current language settings,
 * especially for the type Number.<br>
 * This parameter is intended to be used with touch devices that use different soft keyboard layouts depending on the given input type.<br>
 * Only the default value <code>sap.m.InputType.Text</code> may be used in combination with data model formats.
 * <code>sap.ui.model</code> defines extended formats that are mostly incompatible with normal HTML
 * representations for numbers and dates.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Text</code>.
 * @param {sap.m.InputType} sType New value for property <code>type</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setType = function(sType) { return new sap.m.Input(); };

/**
 * Setter for property <code>value</code>.
 * 
 * Default value is empty/<code>undefined</code>.
 * 
 * @param {string} sValue New value for property <code>value</code>.
 * @return {sap.m.Input} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.Input.prototype.setValue = function(sValue) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getValueHelpOnly valueHelpOnly}.
 * 
 * If set to true, direct text input is disabled and the control will trigger the event "valueHelpRequest" for all user interactions. The properties "showValueHelp", "editable", and "enabled" must be set to true, otherwise the property will have no effect
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bValueHelpOnly New value for property <code>valueHelpOnly</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.0
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setValueHelpOnly = function(bValueHelpOnly) { return new sap.m.Input(); };

/**
 * Sets a new value for property {@link #getValueLiveUpdate valueLiveUpdate}.
 * 
 * Indicates when the value gets updated with the user changes: At each keystroke (true) or first when the user presses enter or tabs out (false).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bValueLiveUpdate New value for property <code>valueLiveUpdate</code>
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.m.Input.prototype.setValueLiveUpdate = function(bValueLiveUpdate) { return new sap.m.Input(); };

/**
 * Setter for property <code>valueStateText</code>.
 * 
 * Default value is empty/<code>undefined</code>
 * 
 * @param {string} sValueStateText  new value for property <code>valueStateText</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.Input.prototype.setValueStateText = function(sValueStateText) { return new sap.m.InputBase(); };

/**
 * Defines the width of the input. Default value is 100%
 * @public
 * @param {string} sWidth
 * 
 */
sap.m.Input.prototype.setWidth = function(sWidth) {  };

/**
 * Unbinds aggregation {@link #getSuggestionColumns suggestionColumns} from model data.
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.unbindSuggestionColumns = function() { return new sap.m.Input(); };

/**
 * Unbinds aggregation {@link #getSuggestionRows suggestionRows} from model data.
 * @returns {sap.m.Input} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.Input.prototype.unbindSuggestionRows = function() { return new sap.m.Input(); };


// ---- sap.m.InputBase --------------------------------------------------------------------------

/**
 * Constructor for a new <code>sap.m.InputBase</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getValueStateText valueStateText} : string</li>
 * <li>{@link #getShowValueStateMessage showValueStateMessage} : boolean (default: true)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: Initial)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getRequired required} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>sap.m.InputBase</code> control provides a basic functionality for input controls.
 * 
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.InputBase = function(sId,mSettings) {};
/**
 * Use labels as placeholder configuration.
 * It can be necessary for the subclasses to overwrite this when
 * native placeholder usage causes undesired input events or when
 * placeholder attribute is not supported for the specified type.
 * https://html.spec.whatwg.org/multipage/forms.html#input-type-attr-summary
 * 
 * @see sap.m.InputBase#oninput
 * @protected
 * 
 */
sap.m.InputBase.prototype.bShowLabelAsPlaceholder = undefined

/**
 * Is fired when the text in the input field has changed and the focus leaves the input field or the enter key is pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new <code>value</code> of the <code>control</code>.
 * @public
 * 
 */
sap.m.InputBase.prototype.change = function(oControlEvent) {  };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.InputBase(); };

/**
 * Applies the focus info.
 * To be overwritten by subclasses.
 * 
 * @param {object} oFocusInfo
 * @protected
 * 
 */
sap.m.InputBase.prototype.applyFocusInfo = function(oFocusInfo) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.m.InputBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.InputBase</code> itself.
 * 
 * Is fired when the text in the input field has changed and the focus leaves the input field or the enter key is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.InputBase</code> itself
 * 
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.InputBase.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.InputBase(); };

/**
 * Registers an event listener to the browser input event.
 * 
 * @param {function} fnCallback Function to be called when the value of the input element is changed.
 * @deprecated Since 1.22. Instead, use event delegation(oninput) to listen input event.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @protected
 * 
 */
sap.m.InputBase.prototype.bindToInputEvent = function(fnCallback) { return new sap.m.InputBase(); };

/**
 * Binds property {@link #getValue value} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.bindValue = function(oBindingInfo) { return new sap.m.InputBase(); };

/**
 * Close value state message popup.
 * 
 * @since 1.26
 * @protected
 * 
 */
sap.m.InputBase.prototype.closeValueStateMessage = function() {  };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.m.InputBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.InputBase(); };

/**
 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.InputBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:change change} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.value] The new <code>value</code> of the <code>control</code>.
 * 
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.InputBase.prototype.fireChange = function(mParameters) { return new sap.m.InputBase(); };

/**
 * Fires the change event for the listeners
 * 
 * @protected
 * @param {String} sValue value of the input.
 * @param {Object} [oParams] extra event parameters.
 * @since 1.22.1
 * 
 */
sap.m.InputBase.prototype.fireChangeEvent = function(sValue,oParams) {  };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.InputBase.prototype.getAccessibilityInfo = function() {  };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets the DOM element reference where the message popup is attached.
 * 
 * @returns {object} The DOM element reference where the message popup is attached
 * @since 1.26
 * @protected
 * 
 */
sap.m.InputBase.prototype.getDomRefForValueStateMessage = function() { return new Object(); };

/**
 * Gets current value of property {@link #getEditable editable}.
 * 
 * Defines whether the control can be modified by the user or not.
 * <b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text from it.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>editable</code>
 * @since 1.12.0
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.getEditable = function() { return false; };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Indicates whether the user can interact with the control or not.
 * <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.getEnabled = function() { return false; };

/**
 * Returns an object representing the serialized focus information.
 * To be overwritten by subclasses.
 * 
 * @returns {object} An object representing the serialized focus information.
 * @protected
 * 
 */
sap.m.InputBase.prototype.getFocusInfo = function() { return new Object(); };

/**
 * Gets the labels referencing this control.
 * 
 * @returns {sap.m.Label[]} Array of objects which are the current targets of the <code>ariaLabelledBy</code>
 * association and the labels referencing this control.
 * @since 1.48
 * @protected
 * 
 */
sap.m.InputBase.prototype.getLabels = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.InputBase.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.InputBase.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * Defines the name of the control for the purposes of form submission.
 * 
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.getName = function() { return ""; };

/**
 * Gets current value of property {@link #getPlaceholder placeholder}.
 * 
 * Defines a short hint intended to aid the user with data entry when the control has no value.
 * 
 * @returns {string} Value of property <code>placeholder</code>
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.getPlaceholder = function() { return ""; };

/**
 * Gets current value of property {@link #getRequired required}.
 * 
 * Indicates that user input is required. This property is only needed for accessibility purposes when a single relationship between
 * the field and a label (see aggregation <code>labelFor</code> of <code>sap.m.Label</code>) cannot be established
 * (e.g. one label should label multiple fields).
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>required</code>
 * @since 1.38.4
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.getRequired = function() { return false; };

/**
 * Retrieves the selected text.
 * Only supported for input control's type of Text, Url, Tel and Password.
 * 
 * @returns {string} The selected text.
 * @protected
 * @since 1.32
 * 
 */
sap.m.InputBase.prototype.getSelectedText = function() { return ""; };

/**
 * Gets current value of property {@link #getShowValueStateMessage showValueStateMessage}.
 * 
 * Indicates whether the value state message should be shown or not.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showValueStateMessage</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.getShowValueStateMessage = function() { return false; };

/**
 * Gets current value of property {@link #getTextAlign textAlign}.
 * 
 * Defines the horizontal alignment of the text that is shown inside the input field.
 * 
 * Default value is <code>Initial</code>.
 * @returns {sap.ui.core.TextAlign} Value of property <code>textAlign</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Defines the text directionality of the input field, e.g. <code>RTL</code>, <code>LTR</code>
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * Defines the value of the control.
 * 
 * @returns {string} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.getValue = function() { return ""; };

/**
 * Gets current value of property {@link #getValueState valueState}.
 * 
 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>valueState</code>
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.getValueState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getValueStateText valueStateText}.
 * 
 * Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.
 * 
 * @returns {string} Value of property <code>valueStateText</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.getValueStateText = function() { return ""; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the control.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Handles the change event.
 * 
 * @protected
 * @param {object} oEvent
 * @param {object} [mParameters] Additional event parameters to be passed in to the change event handler if the
 * value has changed
 * @returns {true|undefined} true when change event is fired
 * 
 */
sap.m.InputBase.prototype.onChange = function(oEvent,mParameters) { return null; };

/**
 * Hook method that gets called when the input value is reverted with hitting escape.
 * It may require to re-implement this method from sub classes for control specific behaviour.
 * 
 * @protected
 * @param {String} sValue Reverted value of the input.
 * @since 1.26
 * 
 */
sap.m.InputBase.prototype.onValueRevertedByEscape = function(sValue) {  };

/**
 * Open value state message popup.
 * 
 * @since 1.26
 * @protected
 * 
 */
sap.m.InputBase.prototype.openValueStateMessage = function() {  };

/**
 * Hook method to prevent the change event from being fired when the text input field loses focus.
 * 
 * @param {jQuery.Event} [oEvent] The event object.
 * @returns {boolean} Whether or not the change event should be prevented.
 * @protected
 * @since 1.46
 * 
 */
sap.m.InputBase.prototype.preventChangeOnFocusLeave = function(oEvent) { return false; };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Selects the text within the input field between the specified start and end positions.
 * Only supported for input control's type of Text, Url, Tel and Password.
 * 
 * @param {int} iSelectionStart The index into the text at which the first selected character is located.
 * @param {int} iSelectionEnd The index into the text at which the last selected character is located.
 * @returns {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @protected
 * @since 1.22.1
 * 
 */
sap.m.InputBase.prototype.selectText = function(iSelectionStart,iSelectionEnd) { return new sap.m.InputBase(); };

/**
 * Sets a new value for property {@link #getEditable editable}.
 * 
 * Defines whether the control can be modified by the user or not.
 * <b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text from it.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEditable New value for property <code>editable</code>
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.12.0
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.setEditable = function(bEditable) { return new sap.m.InputBase(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Indicates whether the user can interact with the control or not.
 * <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.setEnabled = function(bEnabled) { return new sap.m.InputBase(); };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * Defines the name of the control for the purposes of form submission.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.setName = function(sName) { return new sap.m.InputBase(); };

/**
 * Sets a new value for property {@link #getPlaceholder placeholder}.
 * 
 * Defines a short hint intended to aid the user with data entry when the control has no value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sPlaceholder New value for property <code>placeholder</code>
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.setPlaceholder = function(sPlaceholder) { return new sap.m.InputBase(); };

/**
 * Sets a new value for property {@link #getRequired required}.
 * 
 * Indicates that user input is required. This property is only needed for accessibility purposes when a single relationship between
 * the field and a label (see aggregation <code>labelFor</code> of <code>sap.m.Label</code>) cannot be established
 * (e.g. one label should label multiple fields).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bRequired New value for property <code>required</code>
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.4
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.setRequired = function(bRequired) { return new sap.m.InputBase(); };

/**
 * Sets a new value for property {@link #getShowValueStateMessage showValueStateMessage}.
 * 
 * Indicates whether the value state message should be shown or not.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowValueStateMessage New value for property <code>showValueStateMessage</code>
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.setShowValueStateMessage = function(bShowValueStateMessage) { return new sap.m.InputBase(); };

/**
 * Sets a new value for property {@link #getTextAlign textAlign}.
 * 
 * Defines the horizontal alignment of the text that is shown inside the input field.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Initial</code>.
 * @param {sap.ui.core.TextAlign} sTextAlign New value for property <code>textAlign</code>
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.setTextAlign = function(sTextAlign) { return new sap.m.InputBase(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Defines the text directionality of the input field, e.g. <code>RTL</code>, <code>LTR</code>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.setTextDirection = function(sTextDirection) { return new sap.m.InputBase(); };

/**
 * Setter for property <code>value</code>.
 * 
 * Default value is empty/<code>undefined</code>.
 * 
 * @param {string} sValue New value for property <code>value</code>.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.InputBase.prototype.setValue = function(sValue) { return new sap.m.InputBase(); };

/**
 * Setter for property <code>valueState</code>.
 * 
 * Default value is <code>None</code>.
 * 
 * @param {sap.ui.core.ValueState} sValueState New value for property <code>valueState</code>.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.InputBase.prototype.setValueState = function(sValueState) { return new sap.m.InputBase(); };

/**
 * Setter for property <code>valueStateText</code>.
 * 
 * Default value is empty/<code>undefined</code>.
 * 
 * @param {string} sText New value for property <code>valueStateText</code>.
 * @returns {sap.m.InputBase} <code>this</code> to allow method chaining
 * @since 1.26
 * @public
 * 
 */
sap.m.InputBase.prototype.setValueStateText = function(sText) { return new sap.m.InputBase(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width of the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.setWidth = function(sWidth) { return new sap.m.InputBase(); };

/**
 * Unbinds property {@link #getValue value} from model data.
 * @returns {sap.m.InputBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.InputBase.prototype.unbindValue = function() { return new sap.m.InputBase(); };

/**
 * Sets the DOM value of the input field and handles placeholder visibility.
 * 
 * @param {string} sValue value of the input field.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining.
 * @since 1.22
 * @protected
 * 
 */
sap.m.InputBase.prototype.updateDomValue = function(sValue) { return new sap.m.InputBase(); };


// ---- sap.m.InputListItem --------------------------------------------------------------------------

/**
 * Constructor for a new InputListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getLabelTextDirection labelTextDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[] (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * List item should be used for a label and an input field.
 * @extends sap.m.ListItemBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.InputListItem = function(sId,mSettings) {};
/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.InputListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.InputListItem.prototype.addContent = function(oContent) { return new sap.m.InputListItem(); };

/**
 * Binds aggregation {@link #getContent content} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.InputListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.InputListItem.prototype.bindContent = function(oBindingInfo) { return new sap.m.InputListItem(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.InputListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.InputListItem.prototype.destroyContent = function() { return new sap.m.InputListItem(); };

/**
 * Creates a new subclass of class sap.m.InputListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.InputListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * Content controls can be added
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.InputListItem.prototype.getContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getLabel label}.
 * 
 * Label of the list item
 * 
 * @returns {string} Value of property <code>label</code>
 * 
 * @public
 * 
 */
sap.m.InputListItem.prototype.getLabel = function() { return ""; };

/**
 * Gets current value of property {@link #getLabelTextDirection labelTextDirection}.
 * 
 * This property specifies the label text directionality with enumerated options. By default, the label inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>labelTextDirection</code>
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.m.InputListItem.prototype.getLabelTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Returns a metadata object for class sap.m.InputListItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.InputListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.InputListItem.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.InputListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.InputListItem.prototype.insertContent = function(oContent,iIndex) { return new sap.m.InputListItem(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.InputListItem.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.InputListItem.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Sets a new value for property {@link #getLabel label}.
 * 
 * Label of the list item
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sLabel New value for property <code>label</code>
 * @returns {sap.m.InputListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.InputListItem.prototype.setLabel = function(sLabel) { return new sap.m.InputListItem(); };

/**
 * Sets a new value for property {@link #getLabelTextDirection labelTextDirection}.
 * 
 * This property specifies the label text directionality with enumerated options. By default, the label inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sLabelTextDirection New value for property <code>labelTextDirection</code>
 * @returns {sap.m.InputListItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.m.InputListItem.prototype.setLabelTextDirection = function(sLabelTextDirection) { return new sap.m.InputListItem(); };

/**
 * Unbinds aggregation {@link #getContent content} from model data.
 * @returns {sap.m.InputListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.InputListItem.prototype.unbindContent = function() { return new sap.m.InputListItem(); };


// ---- sap.m.InputODataSuggestProvider --------------------------------------------------------------------------


// ---- sap.m.InputTextFormatMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.InputTextFormatMode.toString = function() { return ""; };

// ---- sap.m.InputType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.InputType.toString = function() { return ""; };

// ---- sap.m.IScale --------------------------------------------------------------------------


// ---- sap.m.Label --------------------------------------------------------------------------

/**
 * Constructor for a new Label.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDesign design} : sap.m.LabelDesign (default: Standard)</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: Begin)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getRequired required} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLabelFor labelFor} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The Label control is used in a UI5 mobile application to provide label text for other controls. Design such as bold, and text alignment can be specified.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.Label,sap.ui.core.IShrinkable
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Label = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.Label with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Label.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.Label.prototype.getAccessibilityInfo = function() {  };

/**
 * Gets current value of property {@link #getDesign design}.
 * 
 * Sets the design of a Label to either Standard or Bold.
 * 
 * Default value is <code>Standard</code>.
 * @returns {sap.m.LabelDesign} Value of property <code>design</code>
 * 
 * @public
 * 
 */
sap.m.Label.prototype.getDesign = function() { return new sap.m.LabelDesign(); };

/**
 * ID of the element which is the current target of the association {@link #getLabelFor labelFor}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.Label.prototype.getLabelFor = function() { return new sap.ui.core.ID(); };

/**
 * Returns a metadata object for class sap.m.Label.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Label.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getRequired required}.
 * 
 * Indicates that user input is required in the input this label labels.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>required</code>
 * 
 * @public
 * 
 */
sap.m.Label.prototype.getRequired = function() { return false; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Determines the Label text to be displayed.
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.Label.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextAlign textAlign}.
 * 
 * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * Default value is <code>Begin</code>.
 * @returns {sap.ui.core.TextAlign} Value of property <code>textAlign</code>
 * 
 * @public
 * 
 */
sap.m.Label.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * 
 * @public
 * 
 */
sap.m.Label.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Determines the width of the label.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.Label.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Sets a new value for property {@link #getDesign design}.
 * 
 * Sets the design of a Label to either Standard or Bold.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Standard</code>.
 * @param {sap.m.LabelDesign} sDesign New value for property <code>design</code>
 * @returns {sap.m.Label} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Label.prototype.setDesign = function(sDesign) { return new sap.m.Label(); };

/**
 * Sets the associated {@link #getLabelFor labelFor}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oLabelFor ID of an element which becomes the new target of this labelFor association; alternatively, an element instance may be given
 * @returns {sap.m.Label} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Label.prototype.setLabelFor = function(oLabelFor) { return new sap.m.Label(); };

/**
 * Sets a new value for property {@link #getRequired required}.
 * 
 * Indicates that user input is required in the input this label labels.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bRequired New value for property <code>required</code>
 * @returns {sap.m.Label} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Label.prototype.setRequired = function(bRequired) { return new sap.m.Label(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Determines the Label text to be displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.Label} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Label.prototype.setText = function(sText) { return new sap.m.Label(); };

/**
 * Sets a new value for property {@link #getTextAlign textAlign}.
 * 
 * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Begin</code>.
 * @param {sap.ui.core.TextAlign} sTextAlign New value for property <code>textAlign</code>
 * @returns {sap.m.Label} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Label.prototype.setTextAlign = function(sTextAlign) { return new sap.m.Label(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.Label} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Label.prototype.setTextDirection = function(sTextDirection) { return new sap.m.Label(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Determines the width of the label.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.Label} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Label.prototype.setWidth = function(sWidth) { return new sap.m.Label(); };


// ---- sap.m.LabelDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.LabelDesign.toString = function() { return ""; };

// ---- sap.m.LightBox --------------------------------------------------------------------------

/**
 * Constructor for a new Lightbox.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getImageContent imageContent} : sap.m.LightBoxItem[] (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <strong><i>Overview</i></strong>
 * <br><br>
 * A {@link sap.m.LightBox} control represents a popup containing an image and a footer.
 * The purpose of the control is to display an image in its original size as long as this is possible. On smaller screens, images are scaled down to fit.
 * <br><br>
 * <strong>Notes:</strong>
 * <ul>
 *     <li>If the image doesn't load in 10 seconds an error is displayed. </li>
 *     <li>Setting the <code>imageContent</code> aggregation of the control as well as the source of the image and the title of the image is <u>mandatory</u>.
 *          If the image source is not set, the control will not open.</li>
 * </ul>
 * <strong><i>Structure</i></strong>
 * <br><br>
 * Each LightBox holds a {@link sap.m.LightBoxItem LightBoxItem} which keeps the properties of the image:
 * <ul>
 *     <li> imageSrc - The source URI of the image </li>
 *     <li> title - The title of the image </li>
 *     <li> subtitle - The subtitle of the image </li>
 *     <li> alt - The alt text of the image </li>
 * </ul>
 * <strong><i>Usage</i></strong>
 * <br><br>
 * The most common usecase is to click on an image thumbnail to view it in bigger size.
 * When the image that should be displayed in the control cannot be loaded, an error is displayed in the popup.
 * <br><br>
 * <strong><i>Responsive Behavior</i></strong>
 * <br><br>
 * On a mobile device, flipping the device to landscape will flip the lightbox and the image will be adjusted to fit the new dimensions.
 * <br><br>
 * <strong><i>Additional Information</i></strong>
 * <br><br>
 * Check out the <a href="/#docs/api/symbols/sap.m.LightBox.html" >API Reference</a>.
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.LightBox = function(sId,mSettings) {};
/**
 * Adds some imageContent to the aggregation {@link #getImageContent imageContent}.
 * @param {sap.m.LightBoxItem}
 *            oImageContent the imageContent to add; if empty, nothing is inserted
 * @returns {sap.m.LightBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.LightBox.prototype.addImageContent = function(oImageContent) { return new sap.m.LightBox(); };

/**
 * Binds aggregation {@link #getImageContent imageContent} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.LightBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.LightBox.prototype.bindImageContent = function(oBindingInfo) { return new sap.m.LightBox(); };

/**
 * Closes the LightBox.
 * @public
 * @returns {sap.m.LightBox} Pointer to the control instance for chaining.
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.LightBox.prototype.close = function() { return new sap.m.LightBox(); };

/**
 * Destroys all the imageContent in the aggregation {@link #getImageContent imageContent}.
 * @returns {sap.m.LightBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.LightBox.prototype.destroyImageContent = function() { return new sap.m.LightBox(); };

/**
 * Creates a new subclass of class sap.m.LightBox with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.LightBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getImageContent imageContent}.
 * 
 * Aggregation which holds data about the image and its description. Although multiple LightBoxItems
 * may be added to this aggregation only the first one in the list will be taken into account.
 * 
 * @returns {sap.m.LightBoxItem[]}
 * 
 * @public
 * 
 */
sap.m.LightBox.prototype.getImageContent = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.LightBox.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.LightBox.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.m.LightBoxItem</code> in the aggregation {@link #getImageContent imageContent}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.LightBoxItem}
 *           oImageContent The imageContent whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.LightBox.prototype.indexOfImageContent = function(oImageContent) { return 0; };

/**
 * Inserts a imageContent into the aggregation {@link #getImageContent imageContent}.
 * 
 * @param {sap.m.LightBoxItem}
 *            oImageContent the imageContent to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the imageContent should be inserted at; for
 *              a negative value of <code>iIndex</code>, the imageContent is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the imageContent is inserted at
 *              the last position
 * @returns {sap.m.LightBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.LightBox.prototype.insertImageContent = function(oImageContent,iIndex) { return new sap.m.LightBox(); };

/**
 * Opens the LightBox.
 * @public
 * @returns {sap.m.LightBox} Pointer to the control instance for chaining.
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.LightBox.prototype.open = function() { return new sap.m.LightBox(); };

/**
 * Removes all the controls from the aggregation {@link #getImageContent imageContent}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.LightBoxItem[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.LightBox.prototype.removeAllImageContent = function() { return new Array(); };

/**
 * Removes a imageContent from the aggregation {@link #getImageContent imageContent}.
 * 
 * @param {int | string | sap.m.LightBoxItem} vImageContent The imageContent to remove or its index or id
 * @returns {sap.m.LightBoxItem} The removed imageContent or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.LightBox.prototype.removeImageContent = function(vImageContent) { return new sap.m.LightBoxItem(); };

/**
 * Unbinds aggregation {@link #getImageContent imageContent} from model data.
 * @returns {sap.m.LightBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.LightBox.prototype.unbindImageContent = function() { return new sap.m.LightBox(); };


// ---- sap.m.LightBoxItem --------------------------------------------------------------------------

/**
 * Constructor for a new LightBoxItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getImageSrc imageSrc} : sap.ui.core.URI (default: )</li>
 * <li>{@link #getAlt alt} : string (default: )</li>
 * <li>{@link #getTitle title} : string (default: )</li>
 * <li>{@link #getSubtitle subtitle} : string (default: )</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Represents an item which is displayed within an sap.m.LightBox. This item holds all properties of the image as
 * well as the title and subtitle.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.42
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.LightBoxItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.LightBoxItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.LightBoxItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getAlt alt}.
 * 
 * Alt value for the image
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>alt</code>
 * 
 * @public
 * 
 */
sap.m.LightBoxItem.prototype.getAlt = function() { return ""; };

/**
 * Gets current value of property {@link #getImageSrc imageSrc}.
 * 
 * Source for the image. This property is mandatory. If not set the popup will not open
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.URI} Value of property <code>imageSrc</code>
 * 
 * @public
 * 
 */
sap.m.LightBoxItem.prototype.getImageSrc = function() { return new sap.ui.core.URI(); };

/**
 * Returns a metadata object for class sap.m.LightBoxItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.LightBoxItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSubtitle subtitle}.
 * 
 * Subtitle text for the image
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>subtitle</code>
 * 
 * @public
 * 
 */
sap.m.LightBoxItem.prototype.getSubtitle = function() { return ""; };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Title text for the image. This property is mandatory.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.LightBoxItem.prototype.getTitle = function() { return ""; };

/**
 * Sets the alt text of the image.
 * @public
 * @param {string} sAlt The alt text
 * @returns {sap.m.LightBoxItem} Pointer to the control instance for chaining.
 * 
 */
sap.m.LightBoxItem.prototype.setAlt = function(sAlt) { return new sap.m.LightBoxItem(); };

/**
 * Sets the source of the image.
 * @public
 * @param {sap.ui.core.URI} sImageSrc The image URI
 * @returns {sap.m.LightBoxItem} Pointer to the control instance for chaining.
 * 
 */
sap.m.LightBoxItem.prototype.setImageSrc = function(sImageSrc) { return new sap.m.LightBoxItem(); };

/**
 * Sets the subtitle of the image.
 * @public
 * @param {string} sSubtitle The image subtitle
 * @returns {sap.m.LightBoxItem} Pointer to the control instance for chaining.
 * 
 */
sap.m.LightBoxItem.prototype.setSubtitle = function(sSubtitle) { return new sap.m.LightBoxItem(); };

/**
 * Sets the title of the image.
 * @public
 * @param {string} sTitle The image title
 * @returns {sap.m.LightBoxItem} Pointer to the control instance for chaining.
 * 
 */
sap.m.LightBoxItem.prototype.setTitle = function(sTitle) { return new sap.m.LightBoxItem(); };


// ---- sap.m.LightBoxLoadingStates --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.LightBoxLoadingStates.toString = function() { return ""; };

// ---- sap.m.Link --------------------------------------------------------------------------

/**
 * Constructor for a new Link.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getTarget target} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHref href} : sap.ui.core.URI</li>
 * <li>{@link #getWrapping wrapping} : boolean (default: false)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: Initial)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getSubtle subtle} : boolean (default: false)</li>
 * <li>{@link #getEmphasized emphasized} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * A hyperlink control which can be used to trigger actions or to navigate to other applications or web pages.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IShrinkable, sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Link = function(sId,mSettings) {};
/**
 * Event is fired when the user triggers the link control.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Link.prototype.press = function(oControlEvent) {  };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.Link} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Link.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.Link(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.Link} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Link.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.Link(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.Link</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Link</code> itself.
 * 
 * Event is fired when the user triggers the link control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Link</code> itself
 * 
 * @returns {sap.m.Link} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Link.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Link(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.Link</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Link} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Link.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Link(); };

/**
 * Creates a new subclass of class sap.m.Link with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Link.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {boolean} Whether or not to prevent the default action
 * @protected
 * 
 */
sap.m.Link.prototype.firePress = function(mParameters) { return false; };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.Link.prototype.getAccessibilityInfo = function() {  };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.Link.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.Link.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEmphasized emphasized}.
 * 
 * Emphasized links look visually more important than regular links.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>emphasized</code>
 * @since 1.22
 * 
 * @public
 * 
 */
sap.m.Link.prototype.getEmphasized = function() { return false; };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Determines whether the link can be triggered by the user.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.Link.prototype.getEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getHref href}.
 * 
 * The link target URI. Supports standard hyperlink behavior. If a JavaScript action should be triggered, this should not be set, but instead an event handler for the "press" event should be registered.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>href</code>
 * 
 * @public
 * 
 */
sap.m.Link.prototype.getHref = function() { return new sap.ui.core.URI(); };

/**
 * Returns a metadata object for class sap.m.Link.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Link.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSubtle subtle}.
 * 
 * Subtle links look more like standard text than like links. They should only be used to help with visual hierarchy between large data lists of important and less important links. Subtle links should not be used in any other use case.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>subtle</code>
 * @since 1.22
 * 
 * @public
 * 
 */
sap.m.Link.prototype.getSubtle = function() { return false; };

/**
 * Gets current value of property {@link #getTarget target}.
 * 
 * Options are the standard values for window.open() supported by browsers: _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered. This property is only used when the href property is set.
 * 
 * @returns {string} Value of property <code>target</code>
 * 
 * @public
 * 
 */
sap.m.Link.prototype.getTarget = function() { return ""; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Link text to be displayed.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.Link.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextAlign textAlign}.
 * 
 * Sets the horizontal alignment of the text.
 * 
 * Default value is <code>Initial</code>.
 * @returns {sap.ui.core.TextAlign} Value of property <code>textAlign</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.Link.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the parent DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.Link.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Width of the link (CSS-size such as % or px). When it is set, this is the exact size. When left blank, the text defines the size.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.Link.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getWrapping wrapping}.
 * 
 * Determines whether the link text is allowed to wrap when there is not sufficient space.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>wrapping</code>
 * 
 * @public
 * 
 */
sap.m.Link.prototype.getWrapping = function() { return false; };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Link.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Link.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Link.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Link.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getEmphasized emphasized}.
 * 
 * Emphasized links look visually more important than regular links.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEmphasized New value for property <code>emphasized</code>
 * @returns {sap.m.Link} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22
 * 
 * @public
 * 
 */
sap.m.Link.prototype.setEmphasized = function(bEmphasized) { return new sap.m.Link(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Determines whether the link can be triggered by the user.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.Link} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Link.prototype.setEnabled = function(bEnabled) { return new sap.m.Link(); };

/**
 * Sets a new value for property {@link #getHref href}.
 * 
 * The link target URI. Supports standard hyperlink behavior. If a JavaScript action should be triggered, this should not be set, but instead an event handler for the "press" event should be registered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sHref New value for property <code>href</code>
 * @returns {sap.m.Link} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Link.prototype.setHref = function(sHref) { return new sap.m.Link(); };

/**
 * Sets a new value for property {@link #getSubtle subtle}.
 * 
 * Subtle links look more like standard text than like links. They should only be used to help with visual hierarchy between large data lists of important and less important links. Subtle links should not be used in any other use case.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSubtle New value for property <code>subtle</code>
 * @returns {sap.m.Link} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22
 * 
 * @public
 * 
 */
sap.m.Link.prototype.setSubtle = function(bSubtle) { return new sap.m.Link(); };

/**
 * Sets a new value for property {@link #getTarget target}.
 * 
 * Options are the standard values for window.open() supported by browsers: _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered. This property is only used when the href property is set.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTarget New value for property <code>target</code>
 * @returns {sap.m.Link} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Link.prototype.setTarget = function(sTarget) { return new sap.m.Link(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Link text to be displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.Link} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Link.prototype.setText = function(sText) { return new sap.m.Link(); };

/**
 * Sets a new value for property {@link #getTextAlign textAlign}.
 * 
 * Sets the horizontal alignment of the text.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Initial</code>.
 * @param {sap.ui.core.TextAlign} sTextAlign New value for property <code>textAlign</code>
 * @returns {sap.m.Link} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.Link.prototype.setTextAlign = function(sTextAlign) { return new sap.m.Link(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the parent DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.Link} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.Link.prototype.setTextDirection = function(sTextDirection) { return new sap.m.Link(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Width of the link (CSS-size such as % or px). When it is set, this is the exact size. When left blank, the text defines the size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.Link} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Link.prototype.setWidth = function(sWidth) { return new sap.m.Link(); };

/**
 * Sets a new value for property {@link #getWrapping wrapping}.
 * 
 * Determines whether the link text is allowed to wrap when there is not sufficient space.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bWrapping New value for property <code>wrapping</code>
 * @returns {sap.m.Link} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Link.prototype.setWrapping = function(bWrapping) { return new sap.m.Link(); };


// ---- sap.m.LinkConversion --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.LinkConversion.toString = function() { return ""; };

// ---- sap.m.List --------------------------------------------------------------------------

/**
 * Constructor for a new List.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: Solid)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getColumns columns} : sap.m.Column[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListBase#constructor sap.m.ListBase}
 * can be used as well.
 * 
 * @param {string} [sId] Id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The List control provides a container for all types of list items.
 * For mobile devices, the recommended limit of list items is 100 to assure proper performance. To improve initial rendering of large lists, use the "growing" feature. Please refer to the SAPUI5 Developer Guide for more information..
 * @extends sap.m.ListBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.List = function(sId,mSettings) {};
/**
 * Adds some column to the aggregation {@link #getColumns columns}.
 * @param {sap.m.Column}
 *            oColumn the column to add; if empty, nothing is inserted
 * @returns {sap.m.List} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.16. Instead, use the <code>sap.m.Table</code> control.
 * 
 * @public
 * 
 */
sap.m.List.prototype.addColumn = function(oColumn) { return new sap.m.List(); };

/**
 * Destroys all the columns in the aggregation {@link #getColumns columns}.
 * @returns {sap.m.List} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.16. Instead, use the <code>sap.m.Table</code> control.
 * 
 * @public
 * 
 */
sap.m.List.prototype.destroyColumns = function() { return new sap.m.List(); };

/**
 * Creates a new subclass of class sap.m.List with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.List.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Sets the background style of the list. Depending on the theme, you can change the state of the background from <code>Solid</code> to <code>Translucent</code> or to <code>Transparent</code>.
 * 
 * Default value is <code>Solid</code>.
 * @returns {sap.m.BackgroundDesign} Value of property <code>backgroundDesign</code>
 * @since 1.14
 * 
 * @public
 * 
 */
sap.m.List.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * Gets content of aggregation {@link #getColumns columns}.
 * 
 * Defines columns of the list.
 * 
 * @returns {sap.m.Column[]}
 * 
 * @deprecated Since version 1.16. Instead, use the <code>sap.m.Table</code> control.
 * 
 * @public
 * 
 */
sap.m.List.prototype.getColumns = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.List.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.List.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.m.Column</code> in the aggregation {@link #getColumns columns}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Column}
 *           oColumn The column whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @deprecated Since version 1.16. Instead, use the <code>sap.m.Table</code> control.
 * 
 * @public
 * 
 */
sap.m.List.prototype.indexOfColumn = function(oColumn) { return 0; };

/**
 * Inserts a column into the aggregation {@link #getColumns columns}.
 * 
 * @param {sap.m.Column}
 *            oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the column should be inserted at; for
 *              a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the column is inserted at
 *              the last position
 * @returns {sap.m.List} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.16. Instead, use the <code>sap.m.Table</code> control.
 * 
 * @public
 * 
 */
sap.m.List.prototype.insertColumn = function(oColumn,iIndex) { return new sap.m.List(); };

/**
 * Removes all the controls from the aggregation {@link #getColumns columns}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Column[]} An array of the removed elements (might be empty)
 * 
 * @deprecated Since version 1.16. Instead, use the <code>sap.m.Table</code> control.
 * 
 * @public
 * 
 */
sap.m.List.prototype.removeAllColumns = function() { return new Array(); };

/**
 * Removes a column from the aggregation {@link #getColumns columns}.
 * 
 * @param {int | string | sap.m.Column} vColumn The column to remove or its index or id
 * @returns {sap.m.Column} The removed column or <code>null</code>
 * 
 * @deprecated Since version 1.16. Instead, use the <code>sap.m.Table</code> control.
 * 
 * @public
 * 
 */
sap.m.List.prototype.removeColumn = function(vColumn) { return new sap.m.Column(); };

/**
 * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Sets the background style of the list. Depending on the theme, you can change the state of the background from <code>Solid</code> to <code>Translucent</code> or to <code>Transparent</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Solid</code>.
 * @param {sap.m.BackgroundDesign} sBackgroundDesign New value for property <code>backgroundDesign</code>
 * @returns {sap.m.List} Reference to <code>this</code> in order to allow method chaining
 * @since 1.14
 * 
 * @public
 * 
 */
sap.m.List.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.List(); };


// ---- sap.m.ListBase --------------------------------------------------------------------------

/**
 * Constructor for a new ListBase.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getInset inset} : boolean (default: false)</li>
 * <li>{@link #getHeaderText headerText} : string</li>
 * <li>{@link #getHeaderDesign headerDesign} : sap.m.ListHeaderDesign (default: Standard)</li>
 * <li>{@link #getFooterText footerText} : string</li>
 * <li>{@link #getMode mode} : sap.m.ListMode (default: None)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getIncludeItemInSelection includeItemInSelection} : boolean (default: false)</li>
 * <li>{@link #getShowUnread showUnread} : boolean (default: false)</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getShowNoData showNoData} : boolean (default: true)</li>
 * <li>{@link #getEnableBusyIndicator enableBusyIndicator} : boolean (default: true)</li>
 * <li>{@link #getModeAnimationOn modeAnimationOn} : boolean (default: true)</li>
 * <li>{@link #getShowSeparators showSeparators} : sap.m.ListSeparators (default: All)</li>
 * <li>{@link #getSwipeDirection swipeDirection} : sap.m.SwipeDirection (default: Both)</li>
 * <li>{@link #getGrowing growing} : boolean (default: false)</li>
 * <li>{@link #getGrowingThreshold growingThreshold} : int (default: 20)</li>
 * <li>{@link #getGrowingTriggerText growingTriggerText} : string</li>
 * <li>{@link #getGrowingScrollToLoad growingScrollToLoad} : boolean (default: false)</li>
 * <li>{@link #getGrowingDirection growingDirection} : sap.m.ListGrowingDirection (default: Downwards)</li>
 * <li>{@link #getRememberSelections rememberSelections} : boolean (default: true)</li>
 * <li>{@link #getKeyboardMode keyboardMode} : sap.m.ListKeyboardMode (default: Navigation)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.ListItemBase[] (default)</li>
 * <li>{@link #getSwipeContent swipeContent} : sap.ui.core.Control</li>
 * <li>{@link #getHeaderToolbar headerToolbar} : sap.m.Toolbar</li>
 * <li>{@link #getInfoToolbar infoToolbar} : sap.m.Toolbar</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:selectionChange selectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:delete delete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:swipe swipe} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:growingStarted growingStarted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:growingFinished growingFinished} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:updateStarted updateStarted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:updateFinished updateFinished} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:itemPress itemPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] Id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>sap.m.ListBase</code> control provides a base functionality of the <code>sap.m.List</code> and <code>sap.m.Table</code> controls. Selection, deletion, unread states and inset style are also maintained in <code>sap.m.ListBase</code>.
 * 
 * <b>Note:</b> The ListBase including all contained items may be completely re-rendered when the data of a bound model is changed. Due to the limited hardware resources of mobile devices this can lead to longer delays for lists that contain many items. As such the usage of a list is not recommended for these use cases.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase = function(sId,mSettings) {};
/**
 * Fires after the new growing chunk has been fetched from the model and processed by the control.
 * @event
 * @since 1.16
 * @deprecated Since version 1.16.3.
 * Instead, use "updateFinished" event.
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total Total number of items.
 * @public
 * 
 */
sap.m.ListBase.prototype.growingFinished = function(oControlEvent) {  };

/**
 * Fires before the new growing chunk is requested from the model.
 * @event
 * @since 1.16
 * @deprecated Since version 1.16.3.
 * Instead, use <code>updateStarted</code> event with listening <code>changeReason</code>.
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total Total number of items.
 * @public
 * 
 */
sap.m.ListBase.prototype.growingStarted = function(oControlEvent) {  };

/**
 * Fires when an item is pressed unless the item's <code>type</code> property is <code>Inactive</code>.
 * @event
 * @since 1.20
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The item which fired the pressed event.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.srcControl The control which caused the press event within the container.
 * @public
 * 
 */
sap.m.ListBase.prototype.itemPress = function(oControlEvent) {  };

/**
 * Fires when selection is changed via user interaction. In <code>MultiSelect</code> mode, this event is also fired on deselection.
 * @event
 * 
 * @deprecated Since version 1.16.
 * Use the <code>selectionChange</code> event instead.
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The item which fired the select event.
 * @public
 * 
 */
sap.m.ListBase.prototype.select = function(oControlEvent) {  };

/**
 * Fires when selection is changed via user interaction inside the control.
 * @event
 * @since 1.16
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The item whose selection has changed. In <code>MultiSelect</code> mode, only the up-most selected item is returned. This parameter can be used for single-selection modes.
 * @param {sap.m.ListItemBase[]} oControlEvent.getParameters.listItems Array of items whose selection has changed. This parameter can be used for <code>MultiSelect</code> mode.
 * @param {boolean} oControlEvent.getParameters.selected Indicates whether the <code>listItem</code> parameter is selected or not.
 * @public
 * 
 */
sap.m.ListBase.prototype.selectionChange = function(oControlEvent) {  };

/**
 * Fires after user's swipe action and before the <code>swipeContent</code> is shown. On the <code>swipe</code> event handler, <code>swipeContent</code> can be changed according to the swiped item.
 * Calling the <code>preventDefault</code> method of the event cancels the swipe action.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The item which fired the swipe.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.swipeContent Aggregated <code>swipeContent</code> control that is shown on the right hand side of the item.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.srcControl Holds which control caused the swipe event within the item.
 * @public
 * 
 */
sap.m.ListBase.prototype.swipe = function(oControlEvent) {  };

/**
 * Fires after <code>items</code> binding is updated and processed by the control.
 * @event
 * @since 1.16.3
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.reason The reason of the update, e.g. Binding, Filter, Sort, Growing, Change, Refresh, Context.
 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total The total count of bound items. This can be used if the <code>growing</code> property is set to <code>true</code>.
 * @public
 * 
 */
sap.m.ListBase.prototype.updateFinished = function(oControlEvent) {  };

/**
 * Fires before <code>items</code> binding is updated (e.g. sorting, filtering)
 * 
 * <b>Note:</b> Event handler should not invalidate the control.
 * @event
 * @since 1.16.3
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.reason The reason of the update, e.g. Binding, Filter, Sort, Growing, Change, Refresh, Context.
 * @param {int} oControlEvent.getParameters.actual Actual number of items.
 * @param {int} oControlEvent.getParameters.total The total count of bound items. This can be used if the <code>growing</code> property is set to <code>true</code>.
 * @public
 * 
 */
sap.m.ListBase.prototype.updateStarted = function(oControlEvent) {  };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.ListBase(); };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.m.ListItemBase}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.addItem = function(oItem) { return new sap.m.ListBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:delete delete} event of this <code>sap.m.ListBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
 * 
 * Fires when delete icon is pressed by user.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.attachDelete = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:growingFinished growingFinished} event of this <code>sap.m.ListBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
 * 
 * Fires after the new growing chunk has been fetched from the model and processed by the control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.16
 * @deprecated Since version 1.16.3.
 * Instead, use "updateFinished" event.
 * 
 */
sap.m.ListBase.prototype.attachGrowingFinished = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:growingStarted growingStarted} event of this <code>sap.m.ListBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
 * 
 * Fires before the new growing chunk is requested from the model.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.16
 * @deprecated Since version 1.16.3.
 * Instead, use <code>updateStarted</code> event with listening <code>changeReason</code>.
 * 
 */
sap.m.ListBase.prototype.attachGrowingStarted = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:itemPress itemPress} event of this <code>sap.m.ListBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
 * 
 * Fires when an item is pressed unless the item's <code>type</code> property is <code>Inactive</code>.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.20
 * 
 */
sap.m.ListBase.prototype.attachItemPress = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:select select} event of this <code>sap.m.ListBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
 * 
 * Fires when selection is changed via user interaction. In <code>MultiSelect</code> mode, this event is also fired on deselection.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 * @deprecated Since version 1.16.
 * Use the <code>selectionChange</code> event instead.
 * 
 */
sap.m.ListBase.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:selectionChange selectionChange} event of this <code>sap.m.ListBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
 * 
 * Fires when selection is changed via user interaction inside the control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.attachSelectionChange = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:swipe swipe} event of this <code>sap.m.ListBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
 * 
 * Fires after user's swipe action and before the <code>swipeContent</code> is shown. On the <code>swipe</code> event handler, <code>swipeContent</code> can be changed according to the swiped item.
 * Calling the <code>preventDefault</code> method of the event cancels the swipe action.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ListBase.prototype.attachSwipe = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:updateFinished updateFinished} event of this <code>sap.m.ListBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
 * 
 * Fires after <code>items</code> binding is updated and processed by the control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.16.3
 * 
 */
sap.m.ListBase.prototype.attachUpdateFinished = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:updateStarted updateStarted} event of this <code>sap.m.ListBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
 * 
 * Fires before <code>items</code> binding is updated (e.g. sorting, filtering)
 * 
 * <b>Note:</b> Event handler should not invalidate the control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.16.3
 * 
 */
sap.m.ListBase.prototype.attachUpdateStarted = function(oData,fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Binds aggregation {@link #getItems items} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.bindItems = function(oBindingInfo) { return new sap.m.ListBase(); };

/**
 * Destroys the headerToolbar in the aggregation {@link #getHeaderToolbar headerToolbar}.
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.destroyHeaderToolbar = function() { return new sap.m.ListBase(); };

/**
 * Destroys the infoToolbar in the aggregation {@link #getInfoToolbar infoToolbar}.
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.destroyInfoToolbar = function() { return new sap.m.ListBase(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.destroyItems = function() { return new sap.m.ListBase(); };

/**
 * Destroys the swipeContent in the aggregation {@link #getSwipeContent swipeContent}.
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.destroySwipeContent = function() { return new sap.m.ListBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:delete delete} event of this <code>sap.m.ListBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.detachDelete = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:growingFinished growingFinished} event of this <code>sap.m.ListBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * @deprecated Since version 1.16.3.
 * Instead, use "updateFinished" event.
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.detachGrowingFinished = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:growingStarted growingStarted} event of this <code>sap.m.ListBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * @deprecated Since version 1.16.3.
 * Instead, use <code>updateStarted</code> event with listening <code>changeReason</code>.
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.detachGrowingStarted = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:itemPress itemPress} event of this <code>sap.m.ListBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.20
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.detachItemPress = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:select select} event of this <code>sap.m.ListBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.16.
 * Use the <code>selectionChange</code> event instead.
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:selectionChange selectionChange} event of this <code>sap.m.ListBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.detachSelectionChange = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:swipe swipe} event of this <code>sap.m.ListBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.detachSwipe = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:updateFinished updateFinished} event of this <code>sap.m.ListBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.3
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.detachUpdateFinished = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:updateStarted updateStarted} event of this <code>sap.m.ListBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.3
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.detachUpdateStarted = function(fnFunction,oListener) { return new sap.m.ListBase(); };

/**
 * Creates a new subclass of class sap.m.ListBase with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ListBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:delete delete} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.ListItemBase} [mParameters.listItem] The item which fired the delete event.
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ListBase.prototype.fireDelete = function(mParameters) { return new sap.m.ListBase(); };

/**
 * Fires event {@link #event:growingFinished growingFinished} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {int} [mParameters.actual] Actual number of items.
 * @param {int} [mParameters.total] Total number of items.
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.16
 * @deprecated Since version 1.16.3.
 * Instead, use "updateFinished" event.
 * 
 */
sap.m.ListBase.prototype.fireGrowingFinished = function(mParameters) { return new sap.m.ListBase(); };

/**
 * Fires event {@link #event:growingStarted growingStarted} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {int} [mParameters.actual] Actual number of items.
 * @param {int} [mParameters.total] Total number of items.
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.16
 * @deprecated Since version 1.16.3.
 * Instead, use <code>updateStarted</code> event with listening <code>changeReason</code>.
 * 
 */
sap.m.ListBase.prototype.fireGrowingStarted = function(mParameters) { return new sap.m.ListBase(); };

/**
 * Fires event {@link #event:itemPress itemPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.ListItemBase} [mParameters.listItem] The item which fired the pressed event.
 * @param {sap.ui.core.Control} [mParameters.srcControl] The control which caused the press event within the container.
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.20
 * 
 */
sap.m.ListBase.prototype.fireItemPress = function(mParameters) { return new sap.m.ListBase(); };

/**
 * Fires event {@link #event:select select} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.ListItemBase} [mParameters.listItem] The item which fired the select event.
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 * @deprecated Since version 1.16.
 * Use the <code>selectionChange</code> event instead.
 * 
 */
sap.m.ListBase.prototype.fireSelect = function(mParameters) { return new sap.m.ListBase(); };

/**
 * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.ListItemBase} [mParameters.listItem] The item whose selection has changed. In <code>MultiSelect</code> mode, only the up-most selected item is returned. This parameter can be used for single-selection modes.
 * @param {sap.m.ListItemBase[]} [mParameters.listItems] Array of items whose selection has changed. This parameter can be used for <code>MultiSelect</code> mode.
 * @param {boolean} [mParameters.selected] Indicates whether the <code>listItem</code> parameter is selected or not.
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.16
 * 
 */
sap.m.ListBase.prototype.fireSelectionChange = function(mParameters) { return new sap.m.ListBase(); };

/**
 * Fires event {@link #event:swipe swipe} to attached listeners.
 * 
 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.ListItemBase} [mParameters.listItem] The item which fired the swipe.
 * @param {sap.ui.core.Control} [mParameters.swipeContent] Aggregated <code>swipeContent</code> control that is shown on the right hand side of the item.
 * @param {sap.ui.core.Control} [mParameters.srcControl] Holds which control caused the swipe event within the item.
 * 
 * @returns {boolean} Whether or not to prevent the default action
 * @protected
 * 
 */
sap.m.ListBase.prototype.fireSwipe = function(mParameters) { return false; };

/**
 * Fires event {@link #event:updateFinished updateFinished} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.reason] The reason of the update, e.g. Binding, Filter, Sort, Growing, Change, Refresh, Context.
 * @param {int} [mParameters.actual] Actual number of items.
 * @param {int} [mParameters.total] The total count of bound items. This can be used if the <code>growing</code> property is set to <code>true</code>.
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.16.3
 * 
 */
sap.m.ListBase.prototype.fireUpdateFinished = function(mParameters) { return new sap.m.ListBase(); };

/**
 * Fires event {@link #event:updateStarted updateStarted} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.reason] The reason of the update, e.g. Binding, Filter, Sort, Growing, Change, Refresh, Context.
 * @param {int} [mParameters.actual] Actual number of items.
 * @param {int} [mParameters.total] The total count of bound items. This can be used if the <code>growing</code> property is set to <code>true</code>.
 * 
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.16.3
 * 
 */
sap.m.ListBase.prototype.fireUpdateStarted = function(mParameters) { return new sap.m.ListBase(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEnableBusyIndicator enableBusyIndicator}.
 * 
 * When this property is set to <code>true</code>, the control will automatically display a busy indicator when it detects that data is being loaded. This busy indicator blocks the interaction with the items until data loading is finished.
 * By default, the busy indicator will be shown after one second. This behavior can be customized by setting the <code>busyIndicatorDelay</code> property.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enableBusyIndicator</code>
 * @since 1.20.2
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getEnableBusyIndicator = function() { return false; };

/**
 * Gets current value of property {@link #getFooterText footerText}.
 * 
 * Defines the footer text that appears in the control.
 * 
 * @returns {string} Value of property <code>footerText</code>
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getFooterText = function() { return ""; };

/**
 * Gets current value of property {@link #getGrowing growing}.
 * 
 * If set to <code>true</code>, enables the growing feature of the control to load more items by requesting from the model.
 * <b>Note:</b>: This feature only works when an <code>items</code> aggregation is bound. Growing must not be used together with two-way binding.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>growing</code>
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getGrowing = function() { return false; };

/**
 * Gets current value of property {@link #getGrowingDirection growingDirection}.
 * 
 * Defines the direction of the growing feature.
 * If set to <code>Downwards</code> the user has to scroll down to load more items or the growing button is displayed at the bottom.
 * If set to <code>Upwards</code> the user has to scroll up to load more items or the growing button is displayed at the top.
 * 
 * Default value is <code>Downwards</code>.
 * @returns {sap.m.ListGrowingDirection} Value of property <code>growingDirection</code>
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getGrowingDirection = function() { return new sap.m.ListGrowingDirection(); };

/**
 * Returns growing information as object with "actual" and "total" keys.
 * Note: This function returns "null" if "growing" feature is disabled.
 * 
 * @type object
 * @public
 * @since 1.16
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.getGrowingInfo = function() { return new Object(); };

/**
 * Gets current value of property {@link #getGrowingScrollToLoad growingScrollToLoad}.
 * 
 * If set to true, the user can scroll down/up to load more items. Otherwise a growing button is displayed at the bottom/top of the control.
 * <b>Note:</b> This property can only be used if the <code>growing</code> property is set to <code>true</code> and only if there is one instance of <code>sap.m.List</code> or <code>sap.m.Table</code> inside the scrollable scroll container (e.g <code>sap.m.Page</code>).
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>growingScrollToLoad</code>
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getGrowingScrollToLoad = function() { return false; };

/**
 * Gets current value of property {@link #getGrowingThreshold growingThreshold}.
 * 
 * Defines the number of items to be requested from the model for each grow.
 * This property can only be used if the <code>growing</code> property is set to <code>true</code>.
 * 
 * Default value is <code>20</code>.
 * @returns {int} Value of property <code>growingThreshold</code>
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getGrowingThreshold = function() { return 0; };

/**
 * Gets current value of property {@link #getGrowingTriggerText growingTriggerText}.
 * 
 * Defines the text displayed on the growing button. The default is a translated text ("More") coming from the message bundle.
 * This property can only be used if the <code>growing</code> property is set to <code>true</code>.
 * 
 * @returns {string} Value of property <code>growingTriggerText</code>
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getGrowingTriggerText = function() { return ""; };

/**
 * Gets current value of property {@link #getHeaderDesign headerDesign}.
 * 
 * Defines the header style of the control. Possible values are <code>Standard</code> and <code>Plain</code>.
 * 
 * Default value is <code>Standard</code>.
 * @returns {sap.m.ListHeaderDesign} Value of property <code>headerDesign</code>
 * @since 1.14
 * @deprecated Since version 1.16. No longer has any functionality.
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getHeaderDesign = function() { return new sap.m.ListHeaderDesign(); };

/**
 * Gets current value of property {@link #getHeaderText headerText}.
 * 
 * Defines the header text that appears in the control.
 * <b>Note:</b> If <code>headerToolbar</code> aggregation is set, then this property is ignored.
 * 
 * @returns {string} Value of property <code>headerText</code>
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getHeaderText = function() { return ""; };

/**
 * Gets content of aggregation {@link #getHeaderToolbar headerToolbar}.
 * 
 * The header area can be used as a toolbar to add extra controls for user interactions.
 * <b>Note:</b> When set, this overwrites the <code>headerText</code> property.
 * 
 * @returns {sap.m.Toolbar}
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getHeaderToolbar = function() { return new sap.m.Toolbar(); };

/**
 * Gets current value of property {@link #getIncludeItemInSelection includeItemInSelection}.
 * 
 * Defines whether the items are selectable by clicking on the item itself (<code>true</code>) rather than having to set the selection control first.
 * <b>Note:</b> The <code>SingleSelectMaster</code> mode also provides this functionality by default.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>includeItemInSelection</code>
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getIncludeItemInSelection = function() { return false; };

/**
 * Gets content of aggregation {@link #getInfoToolbar infoToolbar}.
 * 
 * A toolbar that is placed below the header to show extra information to the user.
 * 
 * @returns {sap.m.Toolbar}
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getInfoToolbar = function() { return new sap.m.Toolbar(); };

/**
 * Gets current value of property {@link #getInset inset}.
 * 
 * Defines the indentation of the container. Setting it to <code>true</code> indents the list.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>inset</code>
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getInset = function() { return false; };

/**
 * Returns ItemNavigation for controls uses List
 * @since 1.16.5
 * @returns {sap.ui.core.delegate.ItemNavigation|undefined}
 * @protected
 * 
 */
sap.m.ListBase.prototype.getItemNavigation = function() { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * Defines the items contained within this control.
 * 
 * @returns {sap.m.ListItemBase[]}
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getItems = function() { return new Array(); };

/**
 * Gets current value of property {@link #getKeyboardMode keyboardMode}.
 * 
 * Defines keyboard handling behavior of the control.
 * 
 * Default value is <code>Navigation</code>.
 * @returns {sap.m.ListKeyboardMode} Value of property <code>keyboardMode</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getKeyboardMode = function() { return new sap.m.ListKeyboardMode(); };

/**
 * Returns the last list mode, the mode that is rendered
 * This can be used to detect mode changes during rendering
 * 
 * @protected
 * 
 */
sap.m.ListBase.prototype.getLastMode = function() {  };

/**
 * Returns a metadata object for class sap.m.ListBase.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ListBase.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMode mode}.
 * 
 * Defines the mode of the control (e.g. <code>None</code>, <code>SingleSelect</code>, <code>MultiSelect</code>, <code>Delete</code>).
 * 
 * Default value is <code>None</code>.
 * @returns {sap.m.ListMode} Value of property <code>mode</code>
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getMode = function() { return new sap.m.ListMode(); };

/**
 * Gets current value of property {@link #getModeAnimationOn modeAnimationOn}.
 * 
 * Defines if animations will be shown while switching between modes.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>modeAnimationOn</code>
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getModeAnimationOn = function() { return false; };

/**
 * Gets current value of property {@link #getNoDataText noDataText}.
 * 
 * This text is displayed when the control contains no items.
 * 
 * @returns {string} Value of property <code>noDataText</code>
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getNoDataText = function() { return ""; };

/**
 * Gets current value of property {@link #getRememberSelections rememberSelections}.
 * 
 * If set to true, this control remembers and retains the selection of the items after a binding update has been performed (e.g. sorting, filtering).
 * <b>Note:</b> This feature works only if two-way data binding for the <code>selected</code> property of the item is not used. It also needs to be turned off if the binding context of the item does not always point to the same entry in the model, for example, if the order of the data in the <code>JSONModel</code> is changed.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>rememberSelections</code>
 * @since 1.16.6
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getRememberSelections = function() { return false; };

/**
 * Returns the binding contexts of the selected items.
 * Note: This method returns an empty array if no databinding is used.
 * 
 * @param {boolean} bAll
 *         Set true to include even invisible selected items(e.g. the selections from the previous filters).
 *         Note: In single selection modes, only the last selected item's binding context is returned in array.
 * @type object[]
 * @public
 * @since 1.18.6
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.getSelectedContexts = function(bAll) { return new Array(); };

/**
 * Returns selected list item. When no item is selected, "null" is returned. When "multi-selection" is enabled and multiple items are selected, only the up-most selected item is returned.
 * 
 * @type sap.m.ListItemBase
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.getSelectedItem = function() { return new sap.m.ListItemBase(); };

/**
 * Returns an array containing the selected list items. If no items are selected, an empty array is returned.
 * 
 * @type sap.m.ListItemBase[]
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.getSelectedItems = function() { return new Array(); };

/**
 * Gets current value of property {@link #getShowNoData showNoData}.
 * 
 * Defines whether or not the text specified in the <code>noDataText</code> property is displayed.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showNoData</code>
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getShowNoData = function() { return false; };

/**
 * Gets current value of property {@link #getShowSeparators showSeparators}.
 * 
 * Defines which item separator style will be used.
 * 
 * Default value is <code>All</code>.
 * @returns {sap.m.ListSeparators} Value of property <code>showSeparators</code>
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getShowSeparators = function() { return new sap.m.ListSeparators(); };

/**
 * Gets current value of property {@link #getShowUnread showUnread}.
 * 
 * Activates the unread indicator for all items, if set to <code>true</code>.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showUnread</code>
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getShowUnread = function() { return false; };

/**
 * Gets content of aggregation {@link #getSwipeContent swipeContent}.
 * 
 * User can swipe to bring in this control on the right hand side of an item.
 * <b>Note:</b> For non-touch devices, this functionality is ignored.
 * 
 * @returns {sap.ui.core.Control}
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getSwipeContent = function() { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getSwipeDirection swipeDirection}.
 * 
 * Defines the direction of the swipe movement (e.g LeftToRight, RightToLeft, Both) to display the control defined in the <code>swipeContent</code> aggregation.
 * 
 * Default value is <code>Both</code>.
 * @returns {sap.m.SwipeDirection} Value of property <code>swipeDirection</code>
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getSwipeDirection = function() { return new sap.m.SwipeDirection(); };

/**
 * Returns swiped list item. When no item is swiped, "null" is returned.
 * 
 * @type sap.m.ListItemBase
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.getSwipedItem = function() { return new sap.m.ListItemBase(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Sets the width of the control.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ListItemBase}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.m.ListItemBase}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.insertItem = function(oItem,iIndex) { return new sap.m.ListBase(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ListItemBase[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.m.ListItemBase} vItem The item to remove or its index or id
 * @returns {sap.m.ListItemBase} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.removeItem = function(vItem) { return new sap.m.ListItemBase(); };

/**
 * Removes visible selections of the current selection mode.
 * 
 * @param {boolean} bAll
 *         Since version 1.16.3. This control keeps old selections after filter or sorting. Set this parameter "true" to remove all selections.
 * @type sap.m.ListBase
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.removeSelections = function(bAll) { return new sap.m.ListBase(); };

/**
 * Select all items in "MultiSelection" mode.
 * 
 * @type sap.m.ListBase
 * @public
 * @since 1.16
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.selectAll = function() { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getEnableBusyIndicator enableBusyIndicator}.
 * 
 * When this property is set to <code>true</code>, the control will automatically display a busy indicator when it detects that data is being loaded. This busy indicator blocks the interaction with the items until data loading is finished.
 * By default, the busy indicator will be shown after one second. This behavior can be customized by setting the <code>busyIndicatorDelay</code> property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableBusyIndicator New value for property <code>enableBusyIndicator</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.20.2
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setEnableBusyIndicator = function(bEnableBusyIndicator) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getFooterText footerText}.
 * 
 * Defines the footer text that appears in the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sFooterText New value for property <code>footerText</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setFooterText = function(sFooterText) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getGrowing growing}.
 * 
 * If set to <code>true</code>, enables the growing feature of the control to load more items by requesting from the model.
 * <b>Note:</b>: This feature only works when an <code>items</code> aggregation is bound. Growing must not be used together with two-way binding.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bGrowing New value for property <code>growing</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setGrowing = function(bGrowing) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getGrowingDirection growingDirection}.
 * 
 * Defines the direction of the growing feature.
 * If set to <code>Downwards</code> the user has to scroll down to load more items or the growing button is displayed at the bottom.
 * If set to <code>Upwards</code> the user has to scroll up to load more items or the growing button is displayed at the top.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Downwards</code>.
 * @param {sap.m.ListGrowingDirection} sGrowingDirection New value for property <code>growingDirection</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setGrowingDirection = function(sGrowingDirection) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getGrowingScrollToLoad growingScrollToLoad}.
 * 
 * If set to true, the user can scroll down/up to load more items. Otherwise a growing button is displayed at the bottom/top of the control.
 * <b>Note:</b> This property can only be used if the <code>growing</code> property is set to <code>true</code> and only if there is one instance of <code>sap.m.List</code> or <code>sap.m.Table</code> inside the scrollable scroll container (e.g <code>sap.m.Page</code>).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bGrowingScrollToLoad New value for property <code>growingScrollToLoad</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setGrowingScrollToLoad = function(bGrowingScrollToLoad) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getGrowingThreshold growingThreshold}.
 * 
 * Defines the number of items to be requested from the model for each grow.
 * This property can only be used if the <code>growing</code> property is set to <code>true</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>20</code>.
 * @param {int} iGrowingThreshold New value for property <code>growingThreshold</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setGrowingThreshold = function(iGrowingThreshold) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getGrowingTriggerText growingTriggerText}.
 * 
 * Defines the text displayed on the growing button. The default is a translated text ("More") coming from the message bundle.
 * This property can only be used if the <code>growing</code> property is set to <code>true</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sGrowingTriggerText New value for property <code>growingTriggerText</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setGrowingTriggerText = function(sGrowingTriggerText) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getHeaderDesign headerDesign}.
 * 
 * Defines the header style of the control. Possible values are <code>Standard</code> and <code>Plain</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Standard</code>.
 * @param {sap.m.ListHeaderDesign} sHeaderDesign New value for property <code>headerDesign</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.14
 * @deprecated Since version 1.16. No longer has any functionality.
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setHeaderDesign = function(sHeaderDesign) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getHeaderText headerText}.
 * 
 * Defines the header text that appears in the control.
 * <b>Note:</b> If <code>headerToolbar</code> aggregation is set, then this property is ignored.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sHeaderText New value for property <code>headerText</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setHeaderText = function(sHeaderText) { return new sap.m.ListBase(); };

/**
 * Sets the aggregated {@link #getHeaderToolbar headerToolbar}.
 * @param {sap.m.Toolbar} oHeaderToolbar The headerToolbar to set
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setHeaderToolbar = function(oHeaderToolbar) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getIncludeItemInSelection includeItemInSelection}.
 * 
 * Defines whether the items are selectable by clicking on the item itself (<code>true</code>) rather than having to set the selection control first.
 * <b>Note:</b> The <code>SingleSelectMaster</code> mode also provides this functionality by default.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bIncludeItemInSelection New value for property <code>includeItemInSelection</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setIncludeItemInSelection = function(bIncludeItemInSelection) { return new sap.m.ListBase(); };

/**
 * Sets the aggregated {@link #getInfoToolbar infoToolbar}.
 * @param {sap.m.Toolbar} oInfoToolbar The infoToolbar to set
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setInfoToolbar = function(oInfoToolbar) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getInset inset}.
 * 
 * Defines the indentation of the container. Setting it to <code>true</code> indents the list.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bInset New value for property <code>inset</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setInset = function(bInset) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getKeyboardMode keyboardMode}.
 * 
 * Defines keyboard handling behavior of the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Navigation</code>.
 * @param {sap.m.ListKeyboardMode} sKeyboardMode New value for property <code>keyboardMode</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setKeyboardMode = function(sKeyboardMode) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getMode mode}.
 * 
 * Defines the mode of the control (e.g. <code>None</code>, <code>SingleSelect</code>, <code>MultiSelect</code>, <code>Delete</code>).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.m.ListMode} sMode New value for property <code>mode</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setMode = function(sMode) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getModeAnimationOn modeAnimationOn}.
 * 
 * Defines if animations will be shown while switching between modes.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bModeAnimationOn New value for property <code>modeAnimationOn</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setModeAnimationOn = function(bModeAnimationOn) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getNoDataText noDataText}.
 * 
 * This text is displayed when the control contains no items.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sNoDataText New value for property <code>noDataText</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setNoDataText = function(sNoDataText) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getRememberSelections rememberSelections}.
 * 
 * If set to true, this control remembers and retains the selection of the items after a binding update has been performed (e.g. sorting, filtering).
 * <b>Note:</b> This feature works only if two-way data binding for the <code>selected</code> property of the item is not used. It also needs to be turned off if the binding context of the item does not always point to the same entry in the model, for example, if the order of the data in the <code>JSONModel</code> is changed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bRememberSelections New value for property <code>rememberSelections</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.6
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setRememberSelections = function(bRememberSelections) { return new sap.m.ListBase(); };

/**
 * Selects or deselects the given list item.
 * 
 * @param {sap.m.ListItemBase} oListItem
 *         The list item whose selection to be changed. This parameter is mandatory.
 * @param {boolean} bSelect
 *         Sets selected status of the list item. Default value is true.
 * @type sap.m.ListBase
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.setSelectedItem = function(oListItem,bSelect) { return new sap.m.ListBase(); };

/**
 * Sets a list item to be selected by id. In single mode the method removes the previous selection.
 * 
 * @param {string} sId
 *         The id of the list item whose selection to be changed.
 * @param {boolean} bSelect
 *         Sets selected status of the list item. Default value is true.
 * @type sap.m.ListBase
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.setSelectedItemById = function(sId,bSelect) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getShowNoData showNoData}.
 * 
 * Defines whether or not the text specified in the <code>noDataText</code> property is displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowNoData New value for property <code>showNoData</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setShowNoData = function(bShowNoData) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getShowSeparators showSeparators}.
 * 
 * Defines which item separator style will be used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>All</code>.
 * @param {sap.m.ListSeparators} sShowSeparators New value for property <code>showSeparators</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setShowSeparators = function(sShowSeparators) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getShowUnread showUnread}.
 * 
 * Activates the unread indicator for all items, if set to <code>true</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowUnread New value for property <code>showUnread</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setShowUnread = function(bShowUnread) { return new sap.m.ListBase(); };

/**
 * Sets the aggregated {@link #getSwipeContent swipeContent}.
 * @param {sap.ui.core.Control} oSwipeContent The swipeContent to set
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setSwipeContent = function(oSwipeContent) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getSwipeDirection swipeDirection}.
 * 
 * Defines the direction of the swipe movement (e.g LeftToRight, RightToLeft, Both) to display the control defined in the <code>swipeContent</code> aggregation.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Both</code>.
 * @param {sap.m.SwipeDirection} sSwipeDirection New value for property <code>swipeDirection</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setSwipeDirection = function(sSwipeDirection) { return new sap.m.ListBase(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Sets the width of the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.setWidth = function(sWidth) { return new sap.m.ListBase(); };

/**
 * After swipeContent is shown, user can interact with this control(e.g Tap). After interaction is done, you can/should use this method to hide swipeContent from screen.
 * Note: If users try to tap inside of the list but outside of the swipeContent then control hides automatically.
 * 
 * @param {any} oCallback
 *         This callback function is called with two parameters(swipedListItem and swipedContent) after swipe-out animation is finished.
 * @type sap.m.ListBase
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListBase.prototype.swipeOut = function(oCallback) { return new sap.m.ListBase(); };

/**
 * Unbinds aggregation {@link #getItems items} from model data.
 * @returns {sap.m.ListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListBase.prototype.unbindItems = function() { return new sap.m.ListBase(); };


// ---- sap.m.ListGrowingDirection --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ListGrowingDirection.toString = function() { return ""; };

// ---- sap.m.ListHeaderDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ListHeaderDesign.toString = function() { return ""; };

// ---- sap.m.ListItemBase --------------------------------------------------------------------------

/**
 * Constructor for a new ListItemBase.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.ListType (default: Inactive)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getUnread unread} : boolean (default: false)</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getCounter counter} : int</li>
 * <li>{@link #getHighlight highlight} : sap.ui.core.MessageType (default: None)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:detailTap detailTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:detailPress detailPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] Id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * ListItemBase contains the base features of all specific list items.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListItemBase = function(sId,mSettings) {};
/**
 * Returns the state of the item selection as a boolean
 * 
 * @public
 * @return boolean
 * @deprecated Since version 1.10.2.
 * API Change makes this method unnecessary. Use getSelected method instead.
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ListItemBase.prototype.isSelected = undefined

/**
 * Fires when the user clicks on the detail button of the control.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detailPress = function(oControlEvent) {  };

/**
 * Fires when the user taps on the detail button of the control.
 * @event
 * 
 * @deprecated Since version 1.20.0. Instead, use <code>detailPress</code> event.
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detailTap = function(oControlEvent) {  };

/**
 * Fires when the user clicks on the control.
 * <b>Note:</b> This event is not fired when the parent <code>mode</code> is <code>SingleSelectMaster</code> or when the <code>includeItemInSelection</code> property is set to <code>true</code>.
 * If there is an interactive element that handles its own <code>press</code> event then the list item's <code>press</code> event is not fired.
 * Also see {@link sap.m.ListBase#attachItemPress}.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ListItemBase.prototype.press = function(oControlEvent) {  };

/**
 * Fires when the user taps on the control.
 * @event
 * 
 * @deprecated Since version 1.20.0. Instead, use <code>press</code> event.
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ListItemBase.prototype.tap = function(oControlEvent) {  };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.ListItemBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:detailPress detailPress} event of this <code>sap.m.ListItemBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ListItemBase</code> itself.
 * 
 * Fires when the user clicks on the detail button of the control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code> itself
 * 
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.attachDetailPress = function(oData,fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:detailTap detailTap} event of this <code>sap.m.ListItemBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ListItemBase</code> itself.
 * 
 * Fires when the user taps on the detail button of the control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code> itself
 * 
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 * @deprecated Since version 1.20.0. Instead, use <code>detailPress</code> event.
 * 
 */
sap.m.ListItemBase.prototype.attachDetailTap = function(oData,fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.ListItemBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ListItemBase</code> itself.
 * 
 * Fires when the user clicks on the control.
 * <b>Note:</b> This event is not fired when the parent <code>mode</code> is <code>SingleSelectMaster</code> or when the <code>includeItemInSelection</code> property is set to <code>true</code>.
 * If there is an interactive element that handles its own <code>press</code> event then the list item's <code>press</code> event is not fired.
 * Also see {@link sap.m.ListBase#attachItemPress}.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code> itself
 * 
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ListItemBase.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:tap tap} event of this <code>sap.m.ListItemBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ListItemBase</code> itself.
 * 
 * Fires when the user taps on the control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code> itself
 * 
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 * @deprecated Since version 1.20.0. Instead, use <code>press</code> event.
 * 
 */
sap.m.ListItemBase.prototype.attachTap = function(oData,fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:detailPress detailPress} event of this <code>sap.m.ListItemBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detachDetailPress = function(fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:detailTap detailTap} event of this <code>sap.m.ListItemBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.20.0. Instead, use <code>detailPress</code> event.
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detachDetailTap = function(fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.ListItemBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:tap tap} event of this <code>sap.m.ListItemBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.20.0. Instead, use <code>press</code> event.
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.detachTap = function(fnFunction,oListener) { return new sap.m.ListItemBase(); };

/**
 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ListItemBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:detailPress detailPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ListItemBase.prototype.fireDetailPress = function(mParameters) { return new sap.m.ListItemBase(); };

/**
 * Fires event {@link #event:detailTap detailTap} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 * @deprecated Since version 1.20.0. Instead, use <code>detailPress</code> event.
 * 
 */
sap.m.ListItemBase.prototype.fireDetailTap = function(mParameters) { return new sap.m.ListItemBase(); };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ListItemBase.prototype.firePress = function(mParameters) { return new sap.m.ListItemBase(); };

/**
 * Fires event {@link #event:tap tap} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 * @deprecated Since version 1.20.0. Instead, use <code>press</code> event.
 * 
 */
sap.m.ListItemBase.prototype.fireTap = function(mParameters) { return new sap.m.ListItemBase(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getCounter counter}.
 * 
 * Defines the counter value of the list items.
 * 
 * @returns {int} Value of property <code>counter</code>
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getCounter = function() { return 0; };

/**
 * Gets current value of property {@link #getHighlight highlight}.
 * 
 * Defines the highlight state of the list items.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.MessageType} Value of property <code>highlight</code>
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getHighlight = function() { return new sap.ui.core.MessageType(); };

/**
 * Returns a metadata object for class sap.m.ListItemBase.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ListItemBase.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the accessibility announcement for the content
 * Hook for the subclasses.
 * 
 * @returns {string}
 * @protected
 * ListItemBase.prototype.getContentAnnouncement = function() {
 * };
 * 
 */
sap.m.ListItemBase.prototype.getMode = function() { return ""; };

/**
 * Gets current value of property {@link #getSelected selected}.
 * 
 * Defines the selected state of the list items.
 * <b>Note:</b> Binding the <code>selected</code> property in single selection modes may cause unwanted results if you have more than one selected items in your binding.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>selected</code>
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getSelected = function() { return false; };

/**
 * Returns the tabbable DOM elements as a jQuery collection
 * 
 * @returns {jQuery} jQuery object
 * @protected
 * @since 1.26
 * 
 */
sap.m.ListItemBase.prototype.getTabbables = function() { return null; };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * Defines the visual indication and behavior of the list items, e.g. <code>Active</code>, <code>Navigation</code>, <code>Detail</code>.
 * 
 * Default value is <code>Inactive</code>.
 * @returns {sap.m.ListType} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getType = function() { return new sap.m.ListType(); };

/**
 * Gets current value of property {@link #getUnread unread}.
 * 
 * Activates the unread indicator for the list item, if set to <code>true</code>.
 * <b>Note:</b> This flag is ignored when the <code>showUnread</code> property of the parent is set to <code>false</code>.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>unread</code>
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getUnread = function() { return false; };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.getVisible = function() { return false; };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getCounter counter}.
 * 
 * Defines the counter value of the list items.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iCounter New value for property <code>counter</code>
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setCounter = function(iCounter) { return new sap.m.ListItemBase(); };

/**
 * Sets a new value for property {@link #getHighlight highlight}.
 * 
 * Defines the highlight state of the list items.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.core.MessageType} sHighlight New value for property <code>highlight</code>
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setHighlight = function(sHighlight) { return new sap.m.ListItemBase(); };

/**
 * Sets a new value for property {@link #getSelected selected}.
 * 
 * Defines the selected state of the list items.
 * <b>Note:</b> Binding the <code>selected</code> property in single selection modes may cause unwanted results if you have more than one selected items in your binding.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSelected New value for property <code>selected</code>
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setSelected = function(bSelected) { return new sap.m.ListItemBase(); };

/**
 * Sets a new value for property {@link #getType type}.
 * 
 * Defines the visual indication and behavior of the list items, e.g. <code>Active</code>, <code>Navigation</code>, <code>Detail</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inactive</code>.
 * @param {sap.m.ListType} sType New value for property <code>type</code>
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setType = function(sType) { return new sap.m.ListItemBase(); };

/**
 * Sets a new value for property {@link #getUnread unread}.
 * 
 * Activates the unread indicator for the list item, if set to <code>true</code>.
 * <b>Note:</b> This flag is ignored when the <code>showUnread</code> property of the parent is set to <code>false</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bUnread New value for property <code>unread</code>
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setUnread = function(bUnread) { return new sap.m.ListItemBase(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.ListItemBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ListItemBase.prototype.setVisible = function(bVisible) { return new sap.m.ListItemBase(); };


// ---- sap.m.ListKeyboardMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ListKeyboardMode.toString = function() { return ""; };

// ---- sap.m.ListMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ListMode.toString = function() { return ""; };

// ---- sap.m.ListSeparators --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ListSeparators.toString = function() { return ""; };

// ---- sap.m.ListType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ListType.toString = function() { return ""; };

// ---- sap.m.LoadState --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.LoadState.toString = function() { return ""; };

// ---- sap.m.MaskInput --------------------------------------------------------------------------

/**
 * Constructor for a new MaskInput.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlaceholderSymbol placeholderSymbol} : string (default: _)</li>
 * <li>{@link #getMask mask} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getRules rules} : sap.m.MaskInputRule[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>sap.m.MaskInput</code> control allows users to easily enter data in a certain format and in a fixed-width input
 * (for example: date, time, phone number, credit card number, currency, IP address, MAC address, and others).
 * @extends sap.m.InputBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.34.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MaskInput = function(sId,mSettings) {};
/**
 * Gets a replacement string for the character being placed in the input.
 * Subclasses may override this method in order to get some additional behavior. For instance, switching current input
 * character with other for time input purposes. As an example, if the user enters "2" (in 12-hour format), the consumer may use
 * this method to replace the input from "2" to "02".
 * @param {String} sChar The current character from the input
 * @param {int} iPlacePosition The position the character should occupy
 * @param {string} sCurrentInputValue The value currently inside the input field (may differ from the property value)
 * @returns {String} A string that replaces the character
 * @protected
 * 
 */
sap.m.MaskInput.prototype._feedReplaceChar = function(sChar,iPlacePosition,sCurrentInputValue) { return null; };

/**
 * Verifies whether a character at a given position is allowed according to its mask rule.
 * @param {String} sChar The character
 * @param {int} iIndex The position of the character
 * @protected
 * 
 */
sap.m.MaskInput.prototype._isCharAllowed = function(sChar,iIndex) {  };

/**
 * Adds some rule to the aggregation {@link #getRules rules}.
 * @param {sap.m.MaskInputRule}
 *            oRule the rule to add; if empty, nothing is inserted
 * @returns {sap.m.MaskInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MaskInput.prototype.addRule = function(oRule) { return new sap.m.MaskInput(); };

/**
 * Destroys all the rules in the aggregation {@link #getRules rules}.
 * @returns {sap.m.MaskInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MaskInput.prototype.destroyRules = function() { return new sap.m.MaskInput(); };

/**
 * Creates a new subclass of class sap.m.MaskInput with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.MaskInput.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getMask mask}.
 * 
 * Mask defined by its characters type (respectively, by its length).
 * You should consider the following important facts:
 * 1. The mask characters normally correspond to an existing rule (one rule per unique char).
 * Characters which don't, are considered immutable characters (for example, the mask '2099', where '9' corresponds to a rule
 * for digits, has the characters '2' and '0' as immutable).
 * 2. Adding a rule corresponding to the <code>placeholderSymbol</code> is not recommended and would lead to an unpredictable behavior.
 * 3. You can use the special escape character '^' called "Caret" prepending a rule character to make it immutable.
 * Use the double escape '^^' if you want to make use of the escape character as an immutable one.
 * 
 * @returns {string} Value of property <code>mask</code>
 * 
 * @public
 * 
 */
sap.m.MaskInput.prototype.getMask = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.MaskInput.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.MaskInput.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPlaceholderSymbol placeholderSymbol}.
 * 
 * Defines a placeholder symbol. Shown at the position where there is no user input yet.
 * 
 * Default value is <code>_</code>.
 * @returns {string} Value of property <code>placeholderSymbol</code>
 * 
 * @public
 * 
 */
sap.m.MaskInput.prototype.getPlaceholderSymbol = function() { return ""; };

/**
 * Gets content of aggregation {@link #getRules rules}.
 * 
 * A list of validation rules (one rule per mask character).
 * 
 * @returns {sap.m.MaskInputRule[]}
 * 
 * @public
 * 
 */
sap.m.MaskInput.prototype.getRules = function() { return new Array(); };

/**
 * Checks for the provided <code>sap.m.MaskInputRule</code> in the aggregation {@link #getRules rules}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.MaskInputRule}
 *           oRule The rule whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.MaskInput.prototype.indexOfRule = function(oRule) { return 0; };

/**
 * Inserts a rule into the aggregation {@link #getRules rules}.
 * 
 * @param {sap.m.MaskInputRule}
 *            oRule the rule to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the rule should be inserted at; for
 *              a negative value of <code>iIndex</code>, the rule is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the rule is inserted at
 *              the last position
 * @returns {sap.m.MaskInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MaskInput.prototype.insertRule = function(oRule,iIndex) { return new sap.m.MaskInput(); };

/**
 * Removes all the controls from the aggregation {@link #getRules rules}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.MaskInputRule[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.MaskInput.prototype.removeAllRules = function() { return new Array(); };

/**
 * Removes a rule from the aggregation {@link #getRules rules}.
 * 
 * @param {int | string | sap.m.MaskInputRule} vRule The rule to remove or its index or id
 * @returns {sap.m.MaskInputRule} The removed rule or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.MaskInput.prototype.removeRule = function(vRule) { return new sap.m.MaskInputRule(); };

/**
 * Setter for property <code>value</code>.
 * 
 * @param {string} sValue New value for property <code>value</code>.
 * @return {sap.m.MaskInput} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.MaskInput.prototype.setValue = function(sValue) { return new sap.m.MaskInput(); };


// ---- sap.m.MaskInputRule --------------------------------------------------------------------------

/**
 * Constructor for a new MaskInputRule.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMaskFormatSymbol maskFormatSymbol} : string (default: *)</li>
 * <li>{@link #getRegex regex} : string (default: [a-zA-Z0-9])</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>sap.m.MaskInputRule</code> control holds the mapping of a single <code>maskFormatSymbol</code>
 * to the regular expression <code>regex</code> that defines the allowed characters for the rule.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * @public
 * @constructor
 * @since 1.34.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MaskInputRule = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.MaskInputRule with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.MaskInputRule.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getMaskFormatSymbol maskFormatSymbol}.
 * 
 * Defines the symbol used in the mask format which will accept a certain range of characters.
 * 
 * Default value is <code>*</code>.
 * @returns {string} Value of property <code>maskFormatSymbol</code>
 * 
 * @public
 * 
 */
sap.m.MaskInputRule.prototype.getMaskFormatSymbol = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.MaskInputRule.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.MaskInputRule.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getRegex regex}.
 * 
 * Defines the allowed characters as a regular expression.
 * 
 * Default value is <code>[a-zA-Z0-9]</code>.
 * @returns {string} Value of property <code>regex</code>
 * 
 * @public
 * 
 */
sap.m.MaskInputRule.prototype.getRegex = function() { return ""; };


// ---- sap.m.Menu --------------------------------------------------------------------------

/**
 * Constructor for a new Menu.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.MenuItem[] (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:itemSelected itemSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:closed closed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>sap.m.Menu</code> control represents a hierarchical menu.
 * When opened on mobile devices it occupies the whole screen.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IContextMenu
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Menu = function(sId,mSettings) {};
/**
 * Fired when the menu is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Menu.prototype.closed = function(oControlEvent) {  };

/**
 * Fired when a <code>MenuItem</code> is selected.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.MenuItem} oControlEvent.getParameters.item The <code>MenuItem</code> which was selected.
 * @public
 * 
 */
sap.m.Menu.prototype.itemSelected = function(oControlEvent) {  };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.m.MenuItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.Menu} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Menu.prototype.addItem = function(oItem) { return new sap.m.Menu(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:closed closed} event of this <code>sap.m.Menu</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Menu</code> itself.
 * 
 * Fired when the menu is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Menu</code> itself
 * 
 * @returns {sap.m.Menu} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Menu.prototype.attachClosed = function(oData,fnFunction,oListener) { return new sap.m.Menu(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:itemSelected itemSelected} event of this <code>sap.m.Menu</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Menu</code> itself.
 * 
 * Fired when a <code>MenuItem</code> is selected.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Menu</code> itself
 * 
 * @returns {sap.m.Menu} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Menu.prototype.attachItemSelected = function(oData,fnFunction,oListener) { return new sap.m.Menu(); };

/**
 * Binds aggregation {@link #getItems items} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.Menu} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Menu.prototype.bindItems = function(oBindingInfo) { return new sap.m.Menu(); };

/**
 * Closes the <code>Menu</code>.
 * @public
 * 
 */
sap.m.Menu.prototype.close = function() {  };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.Menu} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Menu.prototype.destroyItems = function() { return new sap.m.Menu(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:closed closed} event of this <code>sap.m.Menu</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Menu} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Menu.prototype.detachClosed = function(fnFunction,oListener) { return new sap.m.Menu(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:itemSelected itemSelected} event of this <code>sap.m.Menu</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Menu} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Menu.prototype.detachItemSelected = function(fnFunction,oListener) { return new sap.m.Menu(); };

/**
 * Creates a new subclass of class sap.m.Menu with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Menu.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:closed closed} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Menu} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Menu.prototype.fireClosed = function(mParameters) { return new sap.m.Menu(); };

/**
 * Fires event {@link #event:itemSelected itemSelected} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.MenuItem} [mParameters.item] The <code>MenuItem</code> which was selected.
 * 
 * @returns {sap.m.Menu} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Menu.prototype.fireItemSelected = function(mParameters) { return new sap.m.Menu(); };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * Defines the items contained within this control.
 * 
 * @returns {sap.m.MenuItem[]}
 * 
 * @public
 * 
 */
sap.m.Menu.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.Menu.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Menu.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Defines the <code>Menu</code> title.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.Menu.prototype.getTitle = function() { return ""; };

/**
 * Checks for the provided <code>sap.m.MenuItem</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.MenuItem}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Menu.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Initializes the control.
 * @public
 * 
 */
sap.m.Menu.prototype.init = function() {  };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.m.MenuItem}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.Menu} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Menu.prototype.insertItem = function(oItem,iIndex) { return new sap.m.Menu(); };

/**
 * Opens the <code>Menu</code> next to the given control.
 * @param oControl The control that defines the position for the menu
 * @param bWithKeyboard Whether the menu is opened with a shortcut or not
 * @public
 * 
 */
sap.m.Menu.prototype.openBy = function(oControl,bWithKeyboard) {  };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.MenuItem[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Menu.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.m.MenuItem} vItem The item to remove or its index or id
 * @returns {sap.m.MenuItem} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Menu.prototype.removeItem = function(vItem) { return new sap.m.MenuItem(); };

/**
 * Sets the title of the <code>Menu</code>.
 * @param {String} sTitle The new title of the <code>Menu</code>
 * @public
 * 
 */
sap.m.Menu.prototype.setTitle = function(sTitle) {  };

/**
 * Unbinds aggregation {@link #getItems items} from model data.
 * @returns {sap.m.Menu} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Menu.prototype.unbindItems = function() { return new sap.m.Menu(); };


// ---- sap.m.MenuButton --------------------------------------------------------------------------

/**
 * Constructor for a new MenuButton.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getType type} : sap.m.ButtonType (default: Default)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getButtonMode buttonMode} : sap.m.MenuButtonMode (default: Regular)</li>
 * <li>{@link #getUseDefaultActionOnly useDefaultActionOnly} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMenu menu} : sap.m.Menu (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:defaultAction defaultAction} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>sap.m.MenuButton</code> control enables the user to show a hierarchical menu.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MenuButton = function(sId,mSettings) {};
/**
 * Fired when the <code>buttonMode</code> is set to <code>Split</code> and the user presses the main button
 * unless <code>useDefaultActionOnly</code> is set to <code>false</code> and another action
 * from the menu has been selected previously.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.MenuButton.prototype.defaultAction = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:defaultAction defaultAction} event of this <code>sap.m.MenuButton</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MenuButton</code> itself.
 * 
 * Fired when the <code>buttonMode</code> is set to <code>Split</code> and the user presses the main button
 * unless <code>useDefaultActionOnly</code> is set to <code>false</code> and another action
 * from the menu has been selected previously.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MenuButton</code> itself
 * 
 * @returns {sap.m.MenuButton} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MenuButton.prototype.attachDefaultAction = function(oData,fnFunction,oListener) { return new sap.m.MenuButton(); };

/**
 * Destroys the menu in the aggregation {@link #getMenu menu}.
 * @returns {sap.m.MenuButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.destroyMenu = function() { return new sap.m.MenuButton(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:defaultAction defaultAction} event of this <code>sap.m.MenuButton</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MenuButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.detachDefaultAction = function(fnFunction,oListener) { return new sap.m.MenuButton(); };

/**
 * Creates a new subclass of class sap.m.MenuButton with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.MenuButton.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:defaultAction defaultAction} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.MenuButton} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MenuButton.prototype.fireDefaultAction = function(mParameters) { return new sap.m.MenuButton(); };

/**
 * Gets current value of property {@link #getActiveIcon activeIcon}.
 * 
 * The source property of an alternative icon for the active (pressed) state of the button.
 * Both active and default icon properties should be defined and of the same type - image or icon font.
 * If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>activeIcon</code>
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getButtonMode buttonMode}.
 * 
 * Defines whether the <code>MenuButton</code> is set to <code>Regular</code> or <code>Split</code> mode.
 * 
 * Default value is <code>Regular</code>.
 * @returns {sap.m.MenuButtonMode} Value of property <code>buttonMode</code>
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.getButtonMode = function() { return new sap.m.MenuButtonMode(); };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Boolean property to enable the control (default is <code>true</code>).
 * <br/><b>Note:</b> Depending on custom settings, the buttons that are disabled have other colors than the enabled ones.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.getEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Defines the icon to be displayed as a graphical element within the button.
 * It can be an image or an icon from the icon font.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
 * 
 * When set to <code>true</code> (default), one or more requests are sent trying to get the
 * density perfect version of image if this version of image doesn't exist on the server.
 * If only one version of image is provided, set this value to <code>false</code> to
 * avoid the attempt of fetching density perfect image.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconDensityAware</code>
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.getIconDensityAware = function() { return false; };

/**
 * Gets content of aggregation {@link #getMenu menu}.
 * 
 * Defines the menu that opens for this button.
 * 
 * @returns {sap.m.Menu}
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.getMenu = function() { return new sap.m.Menu(); };

/**
 * Returns a metadata object for class sap.m.MenuButton.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.MenuButton.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Defines the text of the <code>MenuButton</code>.
 * <br/><b>Note:</b> In <code>Split</code> <code>buttonMode</code> with <code>useDefaultActionOnly</code>
 * set to <code>false</code>, the text is changed to display the last selected item's text,
 * while in <code>Regular</code> <code>buttonMode<code> the text stays unchanged.
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Specifies the element's text directionality with enumerated options.
 * By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * Defines the type of the <code>MenuButton</code> (for example, Default, Accept, Reject, Back, etc.)
 * 
 * Default value is <code>Default</code>.
 * @returns {sap.m.ButtonType} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.getType = function() { return new sap.m.ButtonType(); };

/**
 * Gets current value of property {@link #getUseDefaultActionOnly useDefaultActionOnly}.
 * 
 * Controls whether the default action handler is invoked always or it is invoked only until a menu item is selected.
 * Usable only if <code>buttonMode</code> is set to <code>Split</code>.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>useDefaultActionOnly</code>
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.getUseDefaultActionOnly = function() { return false; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the <code>MenuButton</code>.
 * <br/><b>Note:</b>As per visual design this width can be maximum of 12rem (192px).
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Initializes the control.
 * @public
 * 
 */
sap.m.MenuButton.prototype.init = function() {  };

/**
 * Sets a new value for property {@link #getActiveIcon activeIcon}.
 * 
 * The source property of an alternative icon for the active (pressed) state of the button.
 * Both active and default icon properties should be defined and of the same type - image or icon font.
 * If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sActiveIcon New value for property <code>activeIcon</code>
 * @returns {sap.m.MenuButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.MenuButton(); };

/**
 * Sets the <code>buttonMode</code> of the control.
 * @param {sap.m.MenuButtonMode} sMode The new button mode
 * @returns {sap.m.MenuButton} This instance
 * @public
 * 
 */
sap.m.MenuButton.prototype.setButtonMode = function(sMode) { return new sap.m.MenuButton(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Boolean property to enable the control (default is <code>true</code>).
 * <br/><b>Note:</b> Depending on custom settings, the buttons that are disabled have other colors than the enabled ones.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.MenuButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.setEnabled = function(bEnabled) { return new sap.m.MenuButton(); };

/**
 * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
 * 
 * When set to <code>true</code> (default), one or more requests are sent trying to get the
 * density perfect version of image if this version of image doesn't exist on the server.
 * If only one version of image is provided, set this value to <code>false</code> to
 * avoid the attempt of fetching density perfect image.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware New value for property <code>iconDensityAware</code>
 * @returns {sap.m.MenuButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.MenuButton(); };

/**
 * Sets the aggregated {@link #getMenu menu}.
 * @param {sap.m.Menu} oMenu The menu to set
 * @returns {sap.m.MenuButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.setMenu = function(oMenu) { return new sap.m.MenuButton(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Specifies the element's text directionality with enumerated options.
 * By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.MenuButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.setTextDirection = function(sTextDirection) { return new sap.m.MenuButton(); };

/**
 * Sets the tooltip for the <code>MenuButton</code>.
 * Can either be an instance of a TooltipBase subclass or a simple string.
 * @param {sap.ui.core.TooltipBase} vTooltip The tooltip that should be shown.
 * @returns {*} this instance
 * @public
 * 
 */
sap.m.MenuButton.prototype.setTooltip = function(vTooltip) { return null; };

/**
 * Sets a new value for property {@link #getUseDefaultActionOnly useDefaultActionOnly}.
 * 
 * Controls whether the default action handler is invoked always or it is invoked only until a menu item is selected.
 * Usable only if <code>buttonMode</code> is set to <code>Split</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bUseDefaultActionOnly New value for property <code>useDefaultActionOnly</code>
 * @returns {sap.m.MenuButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.setUseDefaultActionOnly = function(bUseDefaultActionOnly) { return new sap.m.MenuButton(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width of the <code>MenuButton</code>.
 * <br/><b>Note:</b>As per visual design this width can be maximum of 12rem (192px).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.MenuButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuButton.prototype.setWidth = function(sWidth) { return new sap.m.MenuButton(); };


// ---- sap.m.MenuButtonMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.MenuButtonMode.toString = function() { return ""; };

// ---- sap.m.MenuItem --------------------------------------------------------------------------

/**
 * Constructor for a new <code>MenuItem</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getStartsSection startsSection} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.MenuItem[] (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:propertyChanged propertyChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:aggregationChanged aggregationChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>MenuItem</code> control is used for creating items for the <code>sap.m.Menu</code>.
 * It is derived from a core <code>sap.ui.core.Item</code>.
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.38
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MenuItem = function(sId,mSettings) {};
/**
 * Fired when aggregation of the item changes.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {String} oControlEvent.getParameters.aggregationName The aggregation name of the changed aggregation.
 * @param {String} oControlEvent.getParameters.methodName Which method changed the aggregation.
 * @param {Object} oControlEvent.getParameters.methodParams What parameters were used to change the aggregation.
 * @public
 * 
 */
sap.m.MenuItem.prototype.aggregationChanged = function(oControlEvent) {  };

/**
 * Fired after the item has been pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.MenuItem.prototype.press = function(oControlEvent) {  };

/**
 * Fired when a property of the item changes.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.propertyKey The property name to be changed.
 * @param {any} oControlEvent.getParameters.propertyValue The new property value.
 * @public
 * 
 */
sap.m.MenuItem.prototype.propertyChanged = function(oControlEvent) {  };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.m.MenuItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.addItem = function(oItem) { return new sap.m.MenuItem(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:aggregationChanged aggregationChanged} event of this <code>sap.m.MenuItem</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MenuItem</code> itself.
 * 
 * Fired when aggregation of the item changes.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MenuItem</code> itself
 * 
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MenuItem.prototype.attachAggregationChanged = function(oData,fnFunction,oListener) { return new sap.m.MenuItem(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.MenuItem</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MenuItem</code> itself.
 * 
 * Fired after the item has been pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MenuItem</code> itself
 * 
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MenuItem.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.MenuItem(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:propertyChanged propertyChanged} event of this <code>sap.m.MenuItem</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MenuItem</code> itself.
 * 
 * Fired when a property of the item changes.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MenuItem</code> itself
 * 
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MenuItem.prototype.attachPropertyChanged = function(oData,fnFunction,oListener) { return new sap.m.MenuItem(); };

/**
 * Binds aggregation {@link #getItems items} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.bindItems = function(oBindingInfo) { return new sap.m.MenuItem(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.destroyItems = function() { return new sap.m.MenuItem(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:aggregationChanged aggregationChanged} event of this <code>sap.m.MenuItem</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.detachAggregationChanged = function(fnFunction,oListener) { return new sap.m.MenuItem(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.MenuItem</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.MenuItem(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:propertyChanged propertyChanged} event of this <code>sap.m.MenuItem</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.detachPropertyChanged = function(fnFunction,oListener) { return new sap.m.MenuItem(); };

/**
 * Creates a new subclass of class sap.m.MenuItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.MenuItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:aggregationChanged aggregationChanged} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {String} [mParameters.aggregationName] The aggregation name of the changed aggregation.
 * @param {String} [mParameters.methodName] Which method changed the aggregation.
 * @param {Object} [mParameters.methodParams] What parameters were used to change the aggregation.
 * 
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MenuItem.prototype.fireAggregationChanged = function(mParameters) { return new sap.m.MenuItem(); };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MenuItem.prototype.firePress = function(mParameters) { return new sap.m.MenuItem(); };

/**
 * Fires event {@link #event:propertyChanged propertyChanged} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.propertyKey] The property name to be changed.
 * @param {any} [mParameters.propertyValue] The new property value.
 * 
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MenuItem.prototype.firePropertyChanged = function(mParameters) { return new sap.m.MenuItem(); };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Defines the icon, which belongs to the item.
 * This can be a URI to an image or an icon font URI.
 * 
 * @returns {string} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.getIcon = function() { return ""; };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * Defines the sub-items contained within this element.
 * 
 * @returns {sap.m.MenuItem[]}
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.MenuItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.MenuItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getStartsSection startsSection}.
 * 
 * Defines whether a visual separator should be rendered before the item.
 * <b>Note:</b> If an item is invisible its separator is also not displayed.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>startsSection</code>
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.getStartsSection = function() { return false; };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Defines whether the item should be visible on the screen. If set to <code>false</code>,
 * a placeholder is rendered instead of the real item.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.getVisible = function() { return false; };

/**
 * Checks for the provided <code>sap.m.MenuItem</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.MenuItem}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.m.MenuItem}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.insertItem = function(oItem,iIndex) { return new sap.m.MenuItem(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.MenuItem[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.m.MenuItem} vItem The item to remove or its index or id
 * @returns {sap.m.MenuItem} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.removeItem = function(vItem) { return new sap.m.MenuItem(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Defines the icon, which belongs to the item.
 * This can be a URI to an image or an icon font URI.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIcon New value for property <code>icon</code>
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.setIcon = function(sIcon) { return new sap.m.MenuItem(); };

/**
 * Sets a new value for property {@link #getStartsSection startsSection}.
 * 
 * Defines whether a visual separator should be rendered before the item.
 * <b>Note:</b> If an item is invisible its separator is also not displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bStartsSection New value for property <code>startsSection</code>
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.setStartsSection = function(bStartsSection) { return new sap.m.MenuItem(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Defines whether the item should be visible on the screen. If set to <code>false</code>,
 * a placeholder is rendered instead of the real item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.setVisible = function(bVisible) { return new sap.m.MenuItem(); };

/**
 * Unbinds aggregation {@link #getItems items} from model data.
 * @returns {sap.m.MenuItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MenuItem.prototype.unbindItems = function() { return new sap.m.MenuItem(); };


// ---- sap.m.MessageBox --------------------------------------------------------------------------

/**
 * Displays an alert dialog with the given message and an OK button (no icons).
 * 
 * <pre>
 * sap.m.MessageBox.alert("This message should appear in the alert", {
 *     title: "Alert",                                      // default
 *     onClose: null,                                       // default
 *     styleClass: ""                                       // default
 *     initialFocus: null                                   // default
 *     textDirection: sap.ui.core.TextDirection.Inherit     // default
 * });
 * </pre>
 * 
 * If a callback is given, it is called after the alert dialog has been closed
 * by the user via the OK button. The callback is called with the following signature:
 * 
 * <pre>
 *   function (oAction)
 * </pre>
 * 
 * where <code>oAction</code> can be either sap.m.MessageBox.Action.OK when the alert dialog is closed by tapping on the OK button
 *    or null when the alert dialog is closed by calling <code>sap.m.InstanceManager.closeAllDialogs()</code>.
 * 
 * The alert dialog opened by this method is processed asynchronously.
 * Applications have to use <code>fnCallback</code> to continue work after the
 * user closed the alert dialog.
 * 
 * @param {string} vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as vMassage is deprecated since version 1.30.4.
 * @param {object} [mOptions] Other options (optional)
 * @param {function} [mOptions.onClose] callback function to be called when the user closes the dialog
 * @param {string} [mOptions.title='Alert'] Title to be displayed in the alert dialog
 * @param {string} [mOptions.id] ID to be used for the alert dialog. Intended for test scenarios, not recommended for productive apps
 * @param {string} [mOptions.styleClass] Added since version 1.21.2. CSS style class which is added to the alert dialog's root DOM node. The compact design can be activated by setting this to "sapUiSizeCompact"
 * @param {string|sap.m.MessageBox.Action} [mOptions.initialFocus] Added since version 1.28.0. initialFocus, this option sets the action name, the text of the button or the control that gets the focus as first focusable element after the MessageBox is opened.
 * The usage of sap.ui.core.Control to set initialFocus is deprecated since version 1.30.4.
 * @param {sap.ui.core.TextDirection} [mOptions.textDirection] Added since version 1.28. Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * @param {boolean} [deprecated mOptions.verticalScrolling] verticalScrolling is deprecated since version 1.30.4. VerticalScrolling, this option indicates if the user can scroll vertically inside the MessageBox when the content is larger than the content area.
 * @param {boolean} [deprecated mOptions.horizontalScrolling] horizontalScrolling is deprecated since version 1.30.4. HorizontalScrolling, this option indicates if the user can scroll horizontally inside the MessageBox when the content is larger than the content area.
 * @public
 * @static
 * 
 * @memberof sap.m.MessageBox
 */
sap.m.MessageBox.alert = function(vMessage,mOptions) {  };

/**
 * Displays a confirmation dialog with the given message, a QUESTION icon, an OK button
 * and a Cancel button. If a callback is given, it is called after the confirmation box
 * has been closed by the user with one of the buttons.
 * 
 * <pre>
 * sap.m.MessageBox.confirm("This message should appear in the confirmation", {
 *     title: "Confirm",                                    // default
 *     onClose: null                                        // default
 *     styleClass: ""                                       // default
 *     initialFocus: null                                   // default
 *     textDirection: sap.ui.core.TextDirection.Inherit     // default
 *     });
 * </pre>
 * 
 * The callback is called with the following signature
 * 
 * <pre>
 *   function(oAction)
 * </pre>
 * 
 * where oAction is set by one of the following three values:
 * 1. sap.m.MessageBox.Action.OK: OK (confirmed) button is tapped.
 * 2. sap.m.MessageBox.Action.Cancel: Cancel (unconfirmed) button is tapped.
 * 3. null: Confirm dialog is closed by calling <code>sap.m.InstanceManager.closeAllDialogs()</code>
 * 
 * The confirmation dialog opened by this method is processed asynchronously.
 * Applications have to use <code>fnCallback</code> to continue work after the
 * user closed the confirmation dialog
 * 
 * @param {string} vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as vMassage is deprecated since version 1.30.4.
 * @param {object} [mOptions] Other options (optional)
 * @param {function} [mOptions.onClose] Callback to be called when the user closes the dialog
 * @param {string} [mOptions.title='Confirmation'] Title to display in the confirmation dialog
 * @param {string} [mOptions.id] ID to be used for the confirmation dialog. Intended for test scenarios, not recommended for productive apps
 * @param {string} [mOptions.styleClass] Added since version 1.21.2. CSS style class which is added to the confirmation dialog's root DOM node. The compact design can be activated by setting this to "sapUiSizeCompact"
 * @param {string|sap.m.MessageBox.Action} [mOptions.initialFocus] Added since version 1.28.0. initialFocus, this option sets the action name, the text of the button or the control that gets the focus as first focusable element after the MessageBox is opened.
 * The usage of sap.ui.core.Control to set initialFocus is deprecated since version 1.30.4.
 * @param {sap.ui.core.TextDirection} [mOptions.textDirection] Added since version 1.28. Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * @param {boolean} [deprecated mOptions.verticalScrolling] verticalScrolling is deprecated since version 1.30.4. VerticalScrolling, this option indicates if the user can scroll vertically inside the MessageBox when the content is larger than the content area.
 * @param {boolean} [deprecated mOptions.horizontalScrolling] horizontalScrolling is deprecated since version 1.30.4. HorizontalScrolling, this option indicates if the user can scroll horizontally inside the MessageBox when the content is larger than the content area.
 * @public
 * @static
 * 
 * @memberof sap.m.MessageBox
 */
sap.m.MessageBox.confirm = function(vMessage,mOptions) {  };

/**
 * Displays an error dialog with the given message, an ERROR icon, a CLOSE button..
 * If a callback is given, it is called after the error box
 * has been closed by the user with one of the buttons.
 * 
 * <pre>
 * sap.m.MessageBox.error("This message should appear in the error message box", {
 *     title: "Error",                                      // default
 *     onClose: null                                        // default
 *     styleClass: ""                                       // default
 *     initialFocus: null                                   // default
 *     textDirection: sap.ui.core.TextDirection.Inherit     // default
 *     });
 * </pre>
 * 
 * The callback is called with the following signature
 * 
 * 
 * <pre>
 *   function (oAction)
 * </pre>
 * 
 * The error dialog opened by this method is processed asynchronously.
 * Applications have to use <code>fnCallback</code> to continue work after the
 * user closed the error dialog.
 * 
 * @param {string} vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as vMassage is deprecated since version 1.30.4.
 * @param {object} [mOptions] Other options (optional)
 * @param {function} [mOptions.onClose] Callback when the user closes the dialog
 * @param {string} [mOptions.title='Error'] Title of the error dialog
 * @param {string} [mOptions.id] ID for the error dialog. Intended for test scenarios, not recommended for productive apps
 * @param {string} [mOptions.styleClass] CSS style class which is added to the error dialog's root DOM node. The compact design can be activated by setting this to "sapUiSizeCompact"
 * @param {string|sap.m.MessageBox.Action} [mOptions.initialFocus] This option sets the action name, the text of the button or the control that gets the focus as first focusable element after the MessageBox is opened.
 * The usage of sap.ui.core.Control to set initialFocus is deprecated since version 1.30.4.
 * @param {sap.ui.core.TextDirection} [mOptions.textDirection] Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * @param {boolean} [deprecated mOptions.verticalScrolling] verticalScrolling is deprecated since version 1.30.4. VerticalScrolling, this option indicates if the user can scroll vertically inside the MessageBox when the content is larger than the content area.
 * @param {boolean} [deprecated mOptions.horizontalScrolling] horizontalScrolling is deprecated since version 1.30.4. HorizontalScrolling, this option indicates if the user can scroll horizontally inside the MessageBox when the content is larger than the content area.
 * @public
 * @since 1.30
 * @static
 * 
 * @memberof sap.m.MessageBox
 */
sap.m.MessageBox.error = function(vMessage,mOptions) {  };

/**
 * Displays an information dialog with the given message, an INFO icon, an OK button.
 * If a callback is given, it is called after the info box
 * has been closed by the user with one of the buttons.
 * 
 * <pre>
 * sap.m.MessageBox.information("This message should appear in the information message box", {
 *     title: "Information",                                // default
 *     onClose: null                                        // default
 *     styleClass: ""                                       // default
 *     initialFocus: null                                   // default
 *     textDirection: sap.ui.core.TextDirection.Inherit     // default
 *     });
 * </pre>
 * 
 * The callback is called with the following signature
 * 				 *
 * <pre>
 *   function (oAction)
 * </pre>
 * 
 * The information dialog opened by this method is processed asynchronously.
 * Applications have to use <code>fnCallback</code> to continue work after the
 * user closed the information dialog
 * 
 * @param {string} vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as vMassage is deprecated since version 1.30.4.
 * @param {object} [mOptions] Other options (optional)
 * @param {function} [mOptions.onClose] Callback when the user closes the dialog
 * @param {string} [mOptions.title='Information'] Title of the information dialog
 * @param {string} [mOptions.id] ID for the information dialog. Intended for test scenarios, not recommended for productive apps
 * @param {string} [mOptions.styleClass] CSS style class which is added to the information dialog's root DOM node. The compact design can be activated by setting this to "sapUiSizeCompact"
 * @param {string|sap.m.MessageBox.Action} [mOptions.initialFocus] This option sets the action name, the text of the button or the control that gets the focus as first focusable element after the MessageBox is opened.
 * The usage of sap.ui.core.Control to set initialFocus is deprecated since version 1.30.4.
 * @param {sap.ui.core.TextDirection} [mOptions.textDirection] Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * @param {boolean} [deprecated mOptions.verticalScrolling] verticalScrolling is deprecated since version 1.30.4. VerticalScrolling, this option indicates if the user can scroll vertically inside the MessageBox when the content is larger than the content area.
 * @param {boolean} [deprecated mOptions.horizontalScrolling] horizontalScrolling is deprecated since version 1.30.4. HorizontalScrolling, this option indicates if the user can scroll horizontally inside the MessageBox when the content is larger than the content area.
 * @public
 * @since 1.30
 * @static
 * 
 * @memberof sap.m.MessageBox
 */
sap.m.MessageBox.information = function(vMessage,mOptions) {  };

/**
 * Creates and displays an sap.m.Dialog with type sap.m.DialogType.Message with the given text and buttons, and optionally other parts.
 * After the user has tapped a button, the <code>onClose</code> function is invoked when given.
 * 
 * The only mandatory parameter is <code>vMessage</code>. Either a string with the corresponding text or even
 * a layout control could be provided.
 * 
 * <pre>
 * sap.m.MessageBox.show("This message should appear in the message box", {
 *     icon: sap.m.MessageBox.Icon.NONE,                    // default
 *     title: "",                                           // default
 *     actions: sap.m.MessageBox.Action.OK                  // default
 *     onClose: null                                        // default
 *     styleClass: ""                                       // default
 *     initialFocus: null                                   // default
 *     textDirection: sap.ui.core.TextDirection.Inherit     // default
 * });
 * </pre>
 * 
 * The created dialog is executed asynchronously. When it has been created and registered for rendering,
 * this function returns without waiting for a user reaction.
 * 
 * When applications have to react on the users choice, they have to provide a callback function and
 * postpone any reaction on the user choice until that callback is triggered.
 * 
 * The signature of the callback is
 * 
 *   function (oAction);
 * 
 * where <code>oAction</code> is the button that the user has tapped. For example, when the user has pressed the close button,
 * an sap.m.MessageBox.Action.Close is returned.
 * 
 * @param {string} vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as vMassage is deprecated since version 1.30.4.
 * @param {object} [mOptions] Other options (optional)
 * @param {sap.m.MessageBox.Icon} [mOptions.icon] The icon to be displayed.
 * @param {string} [mOptions.title] The title of the message box.
 * @param {sap.m.MessageBox.Action|sap.m.MessageBox.Action[]|string|string[]} [mOptions.actions=sap.m.MessageBox.Action.OK] Either a single action, or an array of two actions.
 *      If no action(s) are given, the single action MessageBox.Action.OK is taken as a default for the parameter. From UI5 version 1.21, more than 2 actions are supported.
 *      For the former versions, if more than two actions are given, only the first two actions are taken. Custom action string(s) can be provided, and then the translation
 *      of custom action string(s) needs to be done by the application.
 * @param {function} [mOptions.onClose] Function to be called when the user taps a button or closes the message box.
 * @param {string} [mOptions.id] ID to be used for the dialog. Intended for test scenarios, not recommended for productive apps
 * @param {string} [mOptions.styleClass] Added since version 1.21.2. CSS style class which is added to the dialog's root DOM node. The compact design can be activated by setting this to "sapUiSizeCompact"
 * @param {string|sap.m.MessageBox.Action} [mOptions.initialFocus] Added since version 1.28.0. initialFocus, this option sets the action name, the text of the button or the control that gets the focus as first focusable element after the MessageBox is opened.
 * The usage of sap.ui.core.Control to set initialFocus is deprecated since version 1.30.4.
 * @param {sap.ui.core.TextDirection} [mOptions.textDirection] Added since version 1.28. Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * @param {boolean} [deprecated mOptions.verticalScrolling] verticalScrolling is deprecated since version 1.30.4. VerticalScrolling, this option indicates if the user can scroll vertically inside the MessageBox when the content is larger than the content area.
 * @param {boolean} [deprecated mOptions.horizontalScrolling] horizontalScrolling is deprecated since version 1.30.4. HorizontalScrolling, this option indicates if the user can scroll horizontally inside the MessageBox when the content is larger than the content area.
 * @param {string} [mOptions.details] Added since version 1.28.0. If 'details' is set in the MessageBox, a 'Show detail' link is added. When you click the link, it is set to visible = false and the text area containing 'details' information is then displayed.
 * @param {sap.ui.core.CSSSize} [mOptions.contentWidth] The width of the MessageBox
 * @public
 * @static
 * 
 * @memberof sap.m.MessageBox
 */
sap.m.MessageBox.show = function(vMessage,mOptions) {  };

/**
 * Displays a success dialog with the given message, a SUCCESS icon, an OK button.
 * If a callback is given, it is called after the success box
 * has been closed by the user with one of the buttons.
 * 
 * <pre>
 * sap.m.MessageBox.success("This message should appear in the success message box", {
 *     title: "Success",                                    // default
 *     onClose: null                                        // default
 *     styleClass: ""                                       // default
 *     initialFocus: null                                   // default
 *     textDirection: sap.ui.core.TextDirection.Inherit     // default
 *     });
 * </pre>
 * 
 * The callback is called with the following signature
 * 
 * <pre>
 *   function(oAction)
 * </pre>
 * 
 * The success dialog opened by this method is processed asynchronously.
 * Applications have to use <code>fnCallback</code> to continue work after the
 * user closed the success dialog
 * 
 * @param {string} vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as vMassage is deprecated since version 1.30.4.
 * @param {object} [mOptions] Other options (optional)
 * @param {function} [mOptions.onClose] Callback when the user closes the dialog
 * @param {string} [mOptions.title='Success'] Title of the success dialog
 * @param {string} [mOptions.id] ID for the success dialog. Intended for test scenarios, not recommended for productive apps
 * @param {string} [mOptions.styleClass] CSS style class which is added to the success dialog's root DOM node. The compact design can be activated by setting this to "sapUiSizeCompact"
 * @param {string|sap.m.MessageBox.Action} [mOptions.initialFocus] This option sets the action name, the text of the button or the control that gets the focus as first focusable element after the MessageBox is opened.
 * The usage of sap.ui.core.Control to set initialFocus is deprecated since version 1.30.4.
 * @param {sap.ui.core.TextDirection} [mOptions.textDirection] Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * @param {boolean} [deprecated mOptions.verticalScrolling] verticalScrolling is deprecated since version 1.30.4. VerticalScrolling, this option indicates if the user can scroll vertically inside the MessageBox when the content is larger than the content area.
 * @param {boolean} [deprecated mOptions.horizontalScrolling] horizontalScrolling is deprecated since version 1.30.4. HorizontalScrolling, this option indicates if the user can scroll horizontally inside the MessageBox when the content is larger than the content area.
 * @public
 * @since 1.30
 * @static
 * 
 * @memberof sap.m.MessageBox
 */
sap.m.MessageBox.success = function(vMessage,mOptions) {  };

/**
 * Displays a warning dialog with the given message, a WARNING icon, an OK button.
 * If a callback is given, it is called after the warning box
 * has been closed by the user with one of the buttons.
 * 
 * <pre>
 * sap.m.MessageBox.warning("This message should appear in the warning message box", {
 *     title: "Warning",                                    // default
 *     onClose: null                                        // default
 *     styleClass: ""                                       // default
 *     initialFocus: null                                   // default
 *     textDirection: sap.ui.core.TextDirection.Inherit     // default
 *     });
 * </pre>
 * 
 * The callback is called with the following signature
 * 				 *
 * <pre>
 *   function (oAction)
 * </pre>
 * 
 * The warning dialog opened by this method is processed asynchronously.
 * Applications have to use <code>fnCallback</code> to continue work after the
 * user closed the warning dialog
 * 
 * @param {string} vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as vMassage is deprecated since version 1.30.4.
 * @param {object} [mOptions] Other options (optional)
 * @param {function} [mOptions.onClose] Callback when the user closes the dialog
 * @param {string} [mOptions.title='Warning'] Title of the warning dialog
 * @param {string} [mOptions.id] ID to for the warning dialog. Intended for test scenarios, not recommended for productive apps
 * @param {string} [mOptions.styleClass] CSS style class which is added to the warning dialog's root DOM node. The compact design can be activated by setting this to "sapUiSizeCompact"
 * @param {string|sap.m.MessageBox.Action} [mOptions.initialFocus] This option sets the action name, the text of the button or the control that gets the focus as first focusable element after the MessageBox is opened.
 * The usage of sap.ui.core.Control to set initialFocus is deprecated since version 1.30.4.
 * @param {sap.ui.core.TextDirection} [mOptions.textDirection] Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * @param {boolean} [deprecated mOptions.verticalScrolling] verticalScrolling is deprecated since version 1.30.4. VerticalScrolling, this option indicates if the user can scroll vertically inside the MessageBox when the content is larger than the content area.
 * @param {boolean} [deprecated mOptions.horizontalScrolling] horizontalScrolling is deprecated since version 1.30.4. HorizontalScrolling, this option indicates if the user can scroll horizontally inside the MessageBox when the content is larger than the content area.
 * @public
 * @since 1.30
 * @static
 * 
 * @memberof sap.m.MessageBox
 */
sap.m.MessageBox.warning = function(vMessage,mOptions) {  };


// ---- sap.m.MessageBox.Action --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.MessageBox.Action.toString = function() { return ""; };

// ---- sap.m.MessageBox.Icon --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.MessageBox.Icon.toString = function() { return ""; };

// ---- sap.m.MessageItem --------------------------------------------------------------------------

/**
 * Constructor for a new MessageItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.ui.core.MessageType (default: Error)</li>
 * <li>{@link #getTitle title} : string (default: )</li>
 * <li>{@link #getSubtitle subtitle} : string</li>
 * <li>{@link #getDescription description} : string (default: )</li>
 * <li>{@link #getMarkupDescription markupDescription} : boolean (default: false)</li>
 * <li>{@link #getLongtextUrl longtextUrl} : sap.ui.core.URI</li>
 * <li>{@link #getCounter counter} : int</li>
 * <li>{@link #getGroupName groupName} : string (default: )</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLink link} : sap.m.Link (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A wrapper control used to hold different types of system messages.
 * <h3>Structure</h3>
 * The message item holds the basic set of properties for a system message:
 * <ul>
 * <li> Type, title, subtitle and description </li>
 * <li> If the description contains markup, the <code>markupDescription</code> needs to be set to true, to ensure it is interpreted correctly. </li>
 * <li> If the long text description can be specified by a URL by setting, the <code>longtextUrl</code> property. </li>
 * <li> The message item can have a single {@link sap.m.Link} after the description. It is stored in the <code>link</code> aggregation. </li>
 * <h3>Usage</h3>
 * <b>Note:</b> The MessageItem control replaces {@link sap.m.MessagePopoverItem} as a more generic wrapper for messages.
 * 
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.46
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MessageItem = function(sId,mSettings) {};
/**
 * Destroys the link in the aggregation {@link #getLink link}.
 * @returns {sap.m.MessageItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.destroyLink = function() { return new sap.m.MessageItem(); };

/**
 * Creates a new subclass of class sap.m.MessageItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.MessageItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getCounter counter}.
 * 
 * Defines the number of messages for a given message.
 * 
 * @returns {int} Value of property <code>counter</code>
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.getCounter = function() { return 0; };

/**
 * Gets current value of property {@link #getDescription description}.
 * 
 * Specifies detailed description of the message
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>description</code>
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.getDescription = function() { return ""; };

/**
 * Gets current value of property {@link #getGroupName groupName}.
 * 
 * Name of a message group the current item belongs to.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>groupName</code>
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.getGroupName = function() { return ""; };

/**
 * Gets content of aggregation {@link #getLink link}.
 * 
 * Adds an sap.m.Link control which will be displayed at the end of the description of a message.
 * 
 * @returns {sap.m.Link}
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.getLink = function() { return new sap.m.Link(); };

/**
 * Gets current value of property {@link #getLongtextUrl longtextUrl}.
 * 
 * Specifies long text description location URL
 * 
 * @returns {sap.ui.core.URI} Value of property <code>longtextUrl</code>
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.getLongtextUrl = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getMarkupDescription markupDescription}.
 * 
 * Specifies if description should be interpreted as markup
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>markupDescription</code>
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.getMarkupDescription = function() { return false; };

/**
 * Returns a metadata object for class sap.m.MessageItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.MessageItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSubtitle subtitle}.
 * 
 * Specifies the subtitle of the message
 * <b>Note:</b> This is only visible when the <code>title</code> property is not empty.
 * 
 * @returns {string} Value of property <code>subtitle</code>
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.getSubtitle = function() { return ""; };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Specifies the title of the message
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * Specifies the type of the message
 * 
 * Default value is <code>Error</code>.
 * @returns {sap.ui.core.MessageType} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.getType = function() { return new sap.ui.core.MessageType(); };

/**
 * Sets a new value for property {@link #getCounter counter}.
 * 
 * Defines the number of messages for a given message.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iCounter New value for property <code>counter</code>
 * @returns {sap.m.MessageItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.setCounter = function(iCounter) { return new sap.m.MessageItem(); };

/**
 * Sets a new value for property {@link #getDescription description}.
 * 
 * Specifies detailed description of the message
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sDescription New value for property <code>description</code>
 * @returns {sap.m.MessageItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.setDescription = function(sDescription) { return new sap.m.MessageItem(); };

/**
 * Sets a new value for property {@link #getGroupName groupName}.
 * 
 * Name of a message group the current item belongs to.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sGroupName New value for property <code>groupName</code>
 * @returns {sap.m.MessageItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.setGroupName = function(sGroupName) { return new sap.m.MessageItem(); };

/**
 * Sets the aggregated {@link #getLink link}.
 * @param {sap.m.Link} oLink The link to set
 * @returns {sap.m.MessageItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.setLink = function(oLink) { return new sap.m.MessageItem(); };

/**
 * Sets a new value for property {@link #getLongtextUrl longtextUrl}.
 * 
 * Specifies long text description location URL
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sLongtextUrl New value for property <code>longtextUrl</code>
 * @returns {sap.m.MessageItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.setLongtextUrl = function(sLongtextUrl) { return new sap.m.MessageItem(); };

/**
 * Sets a new value for property {@link #getMarkupDescription markupDescription}.
 * 
 * Specifies if description should be interpreted as markup
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bMarkupDescription New value for property <code>markupDescription</code>
 * @returns {sap.m.MessageItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.setMarkupDescription = function(bMarkupDescription) { return new sap.m.MessageItem(); };

/**
 * Sets a new value for property {@link #getSubtitle subtitle}.
 * 
 * Specifies the subtitle of the message
 * <b>Note:</b> This is only visible when the <code>title</code> property is not empty.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSubtitle New value for property <code>subtitle</code>
 * @returns {sap.m.MessageItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.setSubtitle = function(sSubtitle) { return new sap.m.MessageItem(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Specifies the title of the message
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.MessageItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageItem.prototype.setTitle = function(sTitle) { return new sap.m.MessageItem(); };

/**
 * Sets type of the MessageItem.
 * <b>Note:</b> if you set the type to None it will be handled and rendered as Information.
 * 
 * @param {sap.ui.core.MessageType} sType Type of Message
 * @returns {sap.m.MessageItem} The MessageItem
 * @public
 * 
 */
sap.m.MessageItem.prototype.setType = function(sType) { return new sap.m.MessageItem(); };


// ---- sap.m.MessagePage --------------------------------------------------------------------------

/**
 * Constructor for a new MessagePage.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: No matching items found.)</li>
 * <li>{@link #getDescription description} : string (default: Check the filter settings.)</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getShowNavButton showNavButton} : boolean (default: false)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: sap-icon://documents)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCustomText customText} : sap.m.Link</li>
 * <li>{@link #getCustomDescription customDescription} : sap.m.Link</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:navButtonPress navButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * MessagePage is displayed when there is no data or matching content. There are different use cases where a MessagePage might be visualized, for example:
 * 		- The search query returned no results
 * 		- The app contains no items
 * 		- There are too many items
 * 		- The application is loading
 * The layout is unchanged but the text varies depending on the use case.
 * <br><b>Note:</b> The <code>MessagePage</code> is not intended to be used as a top-level control,
 * but rather used within controls such as <code>NavContainer</code>, <code>App</code>, <code>Shell</code> or other container controls.
 * 
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.28
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MessagePage = function(sId,mSettings) {};
/**
 * This event is fired when Nav Button is pressed.
 * @event
 * @since 1.28.1
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.MessagePage.prototype.navButtonPress = function(oControlEvent) {  };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.MessagePage(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.MessagePage(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:navButtonPress navButtonPress} event of this <code>sap.m.MessagePage</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessagePage</code> itself.
 * 
 * This event is fired when Nav Button is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessagePage</code> itself
 * 
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.1
 * 
 */
sap.m.MessagePage.prototype.attachNavButtonPress = function(oData,fnFunction,oListener) { return new sap.m.MessagePage(); };

/**
 * Destroys the customDescription in the aggregation {@link #getCustomDescription customDescription}.
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.destroyCustomDescription = function() { return new sap.m.MessagePage(); };

/**
 * Destroys the customText in the aggregation {@link #getCustomText customText}.
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.destroyCustomText = function() { return new sap.m.MessagePage(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:navButtonPress navButtonPress} event of this <code>sap.m.MessagePage</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.1
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.detachNavButtonPress = function(fnFunction,oListener) { return new sap.m.MessagePage(); };

/**
 * Creates a new subclass of class sap.m.MessagePage with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.MessagePage.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:navButtonPress navButtonPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.1
 * 
 */
sap.m.MessagePage.prototype.fireNavButtonPress = function(mParameters) { return new sap.m.MessagePage(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getCustomDescription customDescription}.
 * 
 * The (optional) custom description control of this page.
 * Use this aggregation when the "description" (sap.m.Text) control needs to be replaced with an sap.m.Link control.
 * "description" and "textDirection" setters can be used for this aggregation.
 * 
 * @returns {sap.m.Link}
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.getCustomDescription = function() { return new sap.m.Link(); };

/**
 * Gets content of aggregation {@link #getCustomText customText}.
 * 
 * The (optional) custom Text control of this page.
 * Use this aggregation when the "text" (sap.m.Text) control needs to be replaced with an sap.m.Link control.
 * "text" and "textDirection" setters can be used for this aggregation.
 * 
 * @returns {sap.m.Link}
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.getCustomText = function() { return new sap.m.Link(); };

/**
 * Gets current value of property {@link #getDescription description}.
 * 
 * Determines the detailed description that shows additional information on the MessagePage.
 * 
 * Default value is <code>Check the filter settings.</code>.
 * @returns {string} Value of property <code>description</code>
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.getDescription = function() { return ""; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Determines the icon displayed on the MessagePage.
 * 
 * Default value is <code>sap-icon://documents</code>.
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Returns a metadata object for class sap.m.MessagePage.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.MessagePage.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowHeader showHeader}.
 * 
 * Determines the visibility of the MessagePage header.
 * Can be used to hide the header of the MessagePage when it's embedded in another page.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showHeader</code>
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.getShowHeader = function() { return false; };

/**
 * Gets current value of property {@link #getShowNavButton showNavButton}.
 * 
 * Determines the visibility of the navigation button in MessagePage header.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showNavButton</code>
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.getShowNavButton = function() { return false; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Determines the main text displayed on the MessagePage.
 * 
 * Default value is <code>No matching items found.</code>.
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Determines the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Determines the title in the header of MessagePage.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.getTitle = function() { return ""; };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets the aggregated {@link #getCustomDescription customDescription}.
 * @param {sap.m.Link} oCustomDescription The customDescription to set
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.setCustomDescription = function(oCustomDescription) { return new sap.m.MessagePage(); };

/**
 * Sets the aggregated {@link #getCustomText customText}.
 * @param {sap.m.Link} oCustomText The customText to set
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.setCustomText = function(oCustomText) { return new sap.m.MessagePage(); };

/**
 * Sets a new value for property {@link #getDescription description}.
 * 
 * Determines the detailed description that shows additional information on the MessagePage.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Check the filter settings.</code>.
 * @param {string} sDescription New value for property <code>description</code>
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.setDescription = function(sDescription) { return new sap.m.MessagePage(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Determines the icon displayed on the MessagePage.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>sap-icon://documents</code>.
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.setIcon = function(sIcon) { return new sap.m.MessagePage(); };

/**
 * Sets a new value for property {@link #getShowHeader showHeader}.
 * 
 * Determines the visibility of the MessagePage header.
 * Can be used to hide the header of the MessagePage when it's embedded in another page.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowHeader New value for property <code>showHeader</code>
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.setShowHeader = function(bShowHeader) { return new sap.m.MessagePage(); };

/**
 * Sets a new value for property {@link #getShowNavButton showNavButton}.
 * 
 * Determines the visibility of the navigation button in MessagePage header.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowNavButton New value for property <code>showNavButton</code>
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.setShowNavButton = function(bShowNavButton) { return new sap.m.MessagePage(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Determines the main text displayed on the MessagePage.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>No matching items found.</code>.
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.setText = function(sText) { return new sap.m.MessagePage(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Determines the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.setTextDirection = function(sTextDirection) { return new sap.m.MessagePage(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Determines the title in the header of MessagePage.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.MessagePage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePage.prototype.setTitle = function(sTitle) { return new sap.m.MessagePage(); };


// ---- sap.m.MessagePopover --------------------------------------------------------------------------

/**
 * Constructor for a new MessagePopover.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAsyncDescriptionHandler asyncDescriptionHandler} : any</li>
 * <li>{@link #getAsyncURLHandler asyncURLHandler} : any</li>
 * <li>{@link #getPlacement placement} : sap.m.VerticalPlacementType (default: Vertical)</li>
 * <li>{@link #getInitiallyExpanded initiallyExpanded} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : (sap.m.MessageItem|sap.m.MessagePopoverItem)[] (default)</li>
 * <li>{@link #getHeaderButton headerButton} : sap.m.Button</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:itemSelect itemSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:listSelect listSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:longtextLoaded longtextLoaded} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:urlValidated urlValidated} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A summarized list of different types of messages.
 * <h3>Overview</h3>
 * A message popover is used to display a summarized list of different types of messages (errors, warnings, success and information).
 * It provides a handy and systemized way to navigate and explore details for every message.
 * <h4>Notes:</h4>
 * <ul>
 * <li> Messages can have descriptions pre-formatted with HTML markup. In this case, the <code>markupDescription</code> has to be set to <code>true</code>.</li>
 * <li> If the message cannot be fully displayed or includes a long description, the message popover provides navigation to the detailed description.</li>
 * </ul>
 * <h3>Structure</h3>
 * The message popover stores all messages in an association of type {@link sap.m.MessageItem} named <code>items</code>.
 * 
 * A set of properties determines how the items are rendered:
 * <ul>
 * <li> counter - An integer that is used to indicate the number of errors for each type </li>
 * <li> type - The type of message </li>
 * <li> title/subtitle - The title and subtitle of the message</li>
 * <li> description - The long text description of the message</li>
 * </ul>
 * <h3>Usage</h3>
 * With the message concept, MessagePopover provides a way to centrally manage messages and show them to the user without additional work for the developer.
 * The message popover is triggered from a messaging button in the footer toolbar. If an error has occurred at any validation point,
 * the total number of messages should be incremented, but the user's work shouldn't be interrupted.
 * <h3>Responsive Behavior</h3>
 * On mobile phones, the message popover is automatically shown in full screen mode.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.28
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MessagePopover = function(sId,mSettings) {};
/**
 * This event will be fired after the popover is closed
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy Refers to the control which opens the popover
 * @public
 * 
 */
sap.m.MessagePopover.prototype.afterClose = function(oControlEvent) {  };

/**
 * This event will be fired after the popover is opened
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover
 * @public
 * 
 */
sap.m.MessagePopover.prototype.afterOpen = function(oControlEvent) {  };

/**
 * This event will be fired before the popover is closed
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy Refers to the control which opens the popover
 * See sap.ui.core.MessageType enum values for types
 * @public
 * 
 */
sap.m.MessagePopover.prototype.beforeClose = function(oControlEvent) {  };

/**
 * This event will be fired before the popover is opened
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy Refers to the control which opens the popover
 * @public
 * 
 */
sap.m.MessagePopover.prototype.beforeOpen = function(oControlEvent) {  };

/**
 * This event will be fired when description is shown
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.MessagePopoverItem} oControlEvent.getParameters.item Refers to the message popover item that is being presented
 * @param {sap.ui.core.MessageType} oControlEvent.getParameters.messageTypeFilter Refers to the type of messages being shown
 * See sap.ui.core.MessageType values for types
 * @public
 * 
 */
sap.m.MessagePopover.prototype.itemSelect = function(oControlEvent) {  };

/**
 * This event will be fired when one of the lists is shown when (not) filtered  by type
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.MessageType} oControlEvent.getParameters.messageTypeFilter This parameter refers to the type of messages being shown.
 * @public
 * 
 */
sap.m.MessagePopover.prototype.listSelect = function(oControlEvent) {  };

/**
 * This event will be fired when the long text description data from a remote URL is loaded
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.MessagePopover.prototype.longtextLoaded = function(oControlEvent) {  };

/**
 * This event will be fired when a validation of a URL from long text description is ready
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.MessagePopover.prototype.urlValidated = function(oControlEvent) {  };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.m.MessageItem|sap.m.MessagePopoverItem}
 *            vItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.addItem = function(vItem) { return new sap.m.MessagePopover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterClose afterClose} event of this <code>sap.m.MessagePopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
 * 
 * This event will be fired after the popover is closed
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself
 * 
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MessagePopover.prototype.attachAfterClose = function(oData,fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterOpen afterOpen} event of this <code>sap.m.MessagePopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
 * 
 * This event will be fired after the popover is opened
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself
 * 
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MessagePopover.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeClose beforeClose} event of this <code>sap.m.MessagePopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
 * 
 * This event will be fired before the popover is closed
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself
 * 
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MessagePopover.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.MessagePopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
 * 
 * This event will be fired before the popover is opened
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself
 * 
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MessagePopover.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:itemSelect itemSelect} event of this <code>sap.m.MessagePopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
 * 
 * This event will be fired when description is shown
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself
 * 
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MessagePopover.prototype.attachItemSelect = function(oData,fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:listSelect listSelect} event of this <code>sap.m.MessagePopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
 * 
 * This event will be fired when one of the lists is shown when (not) filtered  by type
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself
 * 
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MessagePopover.prototype.attachListSelect = function(oData,fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:longtextLoaded longtextLoaded} event of this <code>sap.m.MessagePopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
 * 
 * This event will be fired when the long text description data from a remote URL is loaded
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself
 * 
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MessagePopover.prototype.attachLongtextLoaded = function(oData,fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:urlValidated urlValidated} event of this <code>sap.m.MessagePopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
 * 
 * This event will be fired when a validation of a URL from long text description is ready
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself
 * 
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MessagePopover.prototype.attachUrlValidated = function(oData,fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Closes the MessagePopover
 * 
 * @returns {sap.m.MessagePopover} Reference to the 'this' for chaining purposes
 * @public
 * 
 */
sap.m.MessagePopover.prototype.close = function() { return new sap.m.MessagePopover(); };

/**
 * Destroys the headerButton in the aggregation {@link #getHeaderButton headerButton}.
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.destroyHeaderButton = function() { return new sap.m.MessagePopover(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.destroyItems = function() { return new sap.m.MessagePopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterClose afterClose} event of this <code>sap.m.MessagePopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.detachAfterClose = function(fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterOpen afterOpen} event of this <code>sap.m.MessagePopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeClose beforeClose} event of this <code>sap.m.MessagePopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.MessagePopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:itemSelect itemSelect} event of this <code>sap.m.MessagePopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.detachItemSelect = function(fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:listSelect listSelect} event of this <code>sap.m.MessagePopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.detachListSelect = function(fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:longtextLoaded longtextLoaded} event of this <code>sap.m.MessagePopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.detachLongtextLoaded = function(fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:urlValidated urlValidated} event of this <code>sap.m.MessagePopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.detachUrlValidated = function(fnFunction,oListener) { return new sap.m.MessagePopover(); };

/**
 * Creates a new subclass of class sap.m.MessagePopover with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.MessagePopover.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterClose afterClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] Refers to the control which opens the popover
 * 
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MessagePopover.prototype.fireAfterClose = function(mParameters) { return new sap.m.MessagePopover(); };

/**
 * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] This refers to the control which opens the popover
 * 
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MessagePopover.prototype.fireAfterOpen = function(mParameters) { return new sap.m.MessagePopover(); };

/**
 * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] Refers to the control which opens the popover
 * See sap.ui.core.MessageType enum values for types
 * 
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MessagePopover.prototype.fireBeforeClose = function(mParameters) { return new sap.m.MessagePopover(); };

/**
 * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] Refers to the control which opens the popover
 * 
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MessagePopover.prototype.fireBeforeOpen = function(mParameters) { return new sap.m.MessagePopover(); };

/**
 * Fires event {@link #event:itemSelect itemSelect} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.MessagePopoverItem} [mParameters.item] Refers to the message popover item that is being presented
 * @param {sap.ui.core.MessageType} [mParameters.messageTypeFilter] Refers to the type of messages being shown
 * See sap.ui.core.MessageType values for types
 * 
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MessagePopover.prototype.fireItemSelect = function(mParameters) { return new sap.m.MessagePopover(); };

/**
 * Fires event {@link #event:listSelect listSelect} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.MessageType} [mParameters.messageTypeFilter] This parameter refers to the type of messages being shown.
 * 
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MessagePopover.prototype.fireListSelect = function(mParameters) { return new sap.m.MessagePopover(); };

/**
 * Fires event {@link #event:longtextLoaded longtextLoaded} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MessagePopover.prototype.fireLongtextLoaded = function(mParameters) { return new sap.m.MessagePopover(); };

/**
 * Fires event {@link #event:urlValidated urlValidated} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MessagePopover.prototype.fireUrlValidated = function(mParameters) { return new sap.m.MessagePopover(); };

/**
 * Gets current value of property {@link #getAsyncDescriptionHandler asyncDescriptionHandler}.
 * 
 * Callback function for resolving a promise after description has been asynchronously loaded inside this function
 * 
 * @returns {any} Value of property <code>asyncDescriptionHandler</code>
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.getAsyncDescriptionHandler = function() { return null; };

/**
 * Gets current value of property {@link #getAsyncURLHandler asyncURLHandler}.
 * 
 * Callback function for resolving a promise after a link has been asynchronously validated inside this function
 * 
 * @returns {any} Value of property <code>asyncURLHandler</code>
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.getAsyncURLHandler = function() { return null; };

/**
 * Gets content of aggregation {@link #getHeaderButton headerButton}.
 * 
 * A custom header button
 * 
 * @returns {sap.m.Button}
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.getHeaderButton = function() { return new sap.m.Button(); };

/**
 * Gets current value of property {@link #getInitiallyExpanded initiallyExpanded}.
 * 
 * Sets the initial state of the control - expanded or collapsed. By default the control opens as expanded
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>initiallyExpanded</code>
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.getInitiallyExpanded = function() { return false; };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * A list with message items
 * 
 * @returns {(sap.m.MessageItem|sap.m.MessagePopoverItem)[]}
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.getItems = function() {  };

/**
 * Returns a metadata object for class sap.m.MessagePopover.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.MessagePopover.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPlacement placement}.
 * 
 * Determines the position, where the control will appear on the screen. Possible values are: sap.m.VerticalPlacementType.Top, sap.m.VerticalPlacementType.Bottom and sap.m.VerticalPlacementType.Vertical.
 * The default value is sap.m.VerticalPlacementType.Vertical. Setting this property while the control is open, will not cause any re-rendering and changing of the position. Changes will only be applied with the next interaction.
 * 
 * Default value is <code>Vertical</code>.
 * @returns {sap.m.VerticalPlacementType} Value of property <code>placement</code>
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.getPlacement = function() { return new sap.m.VerticalPlacementType(); };

/**
 * Checks for the provided <code>sap.m.MessageItem</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.MessageItem|sap.m.MessagePopoverItem}
 *           vItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.indexOfItem = function(vItem) { return 0; };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.m.MessageItem|sap.m.MessagePopoverItem}
 *            vItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.insertItem = function(vItem,iIndex) { return new sap.m.MessagePopover(); };

/**
 * The method checks if the MessagePopover is open. It returns true when the MessagePopover is currently open
 * (this includes opening and closing animations), otherwise it returns false
 * 
 * @public
 * @returns {boolean} Whether the MessagePopover is open
 * 
 */
sap.m.MessagePopover.prototype.isOpen = function() { return false; };

/**
 * Opens the MessagePopover
 * 
 * @param {sap.ui.core.Control} oControl Control which opens the MessagePopover
 * @returns {sap.m.MessagePopover} Reference to the 'this' for chaining purposes
 * @public
 * @ui5-metamodel
 * 
 */
sap.m.MessagePopover.prototype.openBy = function(oControl) { return new sap.m.MessagePopover(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {(sap.m.MessageItem|sap.m.MessagePopoverItem)[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.removeAllItems = function() {  };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.m.MessageItem|sap.m.MessagePopoverItem} vItem The item to remove or its index or id
 * @returns {sap.m.MessageItem|sap.m.MessagePopoverItem} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.removeItem = function(vItem) { return new sap.m.MessageItem(); };

/**
 * Sets a new value for property {@link #getAsyncDescriptionHandler asyncDescriptionHandler}.
 * 
 * Callback function for resolving a promise after description has been asynchronously loaded inside this function
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oAsyncDescriptionHandler New value for property <code>asyncDescriptionHandler</code>
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.setAsyncDescriptionHandler = function(oAsyncDescriptionHandler) { return new sap.m.MessagePopover(); };

/**
 * Sets a new value for property {@link #getAsyncURLHandler asyncURLHandler}.
 * 
 * Callback function for resolving a promise after a link has been asynchronously validated inside this function
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oAsyncURLHandler New value for property <code>asyncURLHandler</code>
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.setAsyncURLHandler = function(oAsyncURLHandler) { return new sap.m.MessagePopover(); };

/**
 * Setter for default description and URL validation callbacks across all instances of MessagePopover
 * @static
 * @protected
 * @param {object} mDefaultHandlers An object setting default callbacks
 * @param {function} mDefaultHandlers.asyncDescriptionHandler
 * @param {function} mDefaultHandlers.asyncURLHandler
 * 
 */
sap.m.MessagePopover.setDefaultHandlers = function(mDefaultHandlers) {  };

/**
 * Sets the aggregated {@link #getHeaderButton headerButton}.
 * @param {sap.m.Button} oHeaderButton The headerButton to set
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.setHeaderButton = function(oHeaderButton) { return new sap.m.MessagePopover(); };

/**
 * Sets a new value for property {@link #getInitiallyExpanded initiallyExpanded}.
 * 
 * Sets the initial state of the control - expanded or collapsed. By default the control opens as expanded
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bInitiallyExpanded New value for property <code>initiallyExpanded</code>
 * @returns {sap.m.MessagePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessagePopover.prototype.setInitiallyExpanded = function(bInitiallyExpanded) { return new sap.m.MessagePopover(); };

/**
 * This method toggles between open and closed state of the MessagePopover instance.
 * oControl parameter is mandatory in the same way as in 'openBy' method
 * 
 * @param {sap.ui.core.Control} oControl Control which opens the MessagePopover
 * @returns {sap.m.MessagePopover} Reference to the 'this' for chaining purposes
 * @public
 * 
 */
sap.m.MessagePopover.prototype.toggle = function(oControl) { return new sap.m.MessagePopover(); };


// ---- sap.m.MessagePopoverItem --------------------------------------------------------------------------

/**
 * Constructor for a new MessagePopoverItem.
 * 
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Items provide information about Error Messages in the page.
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.28
 * @deprecated Since version 1.46, use MessageItem instead
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MessagePopoverItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.MessagePopoverItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.MessagePopoverItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.MessagePopoverItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.MessagePopoverItem.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.MessageStrip --------------------------------------------------------------------------

/**
 * Constructor for a new MessageStrip.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getType type} : sap.ui.core.MessageType (default: Information)</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI (default: )</li>
 * <li>{@link #getShowIcon showIcon} : boolean (default: false)</li>
 * <li>{@link #getShowCloseButton showCloseButton} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLink link} : sap.m.Link (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * MessageStrip is a control that enables the embedding of application-related messages in the application.
 * There are 4 types of messages: Information, Success, Warning and Error.
 * Each message can have a close button, so that it can be removed from the UI if needed.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MessageStrip = function(sId,mSettings) {};
/**
 * This event will be fired after the container is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.MessageStrip.prototype.close = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:close close} event of this <code>sap.m.MessageStrip</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessageStrip</code> itself.
 * 
 * This event will be fired after the container is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessageStrip</code> itself
 * 
 * @returns {sap.m.MessageStrip} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MessageStrip.prototype.attachClose = function(oData,fnFunction,oListener) { return new sap.m.MessageStrip(); };

/**
 * Closes the MessageStrip.
 * This method sets the visible property of the MessageStrip to false.
 * The MessageStrip can be shown again by setting the visible property to true.
 * @type void
 * @public
 * 
 */
sap.m.MessageStrip.prototype.close = function() { return null; };

/**
 * Destroys the link in the aggregation {@link #getLink link}.
 * @returns {sap.m.MessageStrip} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageStrip.prototype.destroyLink = function() { return new sap.m.MessageStrip(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:close close} event of this <code>sap.m.MessageStrip</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessageStrip} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageStrip.prototype.detachClose = function(fnFunction,oListener) { return new sap.m.MessageStrip(); };

/**
 * Creates a new subclass of class sap.m.MessageStrip with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.MessageStrip.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:close close} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.MessageStrip} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MessageStrip.prototype.fireClose = function(mParameters) { return new sap.m.MessageStrip(); };

/**
 * Gets current value of property {@link #getCustomIcon customIcon}.
 * 
 * Determines a custom icon which is displayed.
 * If none is set, the default icon for this message type is used.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.URI} Value of property <code>customIcon</code>
 * 
 * @public
 * 
 */
sap.m.MessageStrip.prototype.getCustomIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets content of aggregation {@link #getLink link}.
 * 
 * Adds an sap.m.Link control which will be displayed at the end of the message.
 * 
 * @returns {sap.m.Link}
 * 
 * @public
 * 
 */
sap.m.MessageStrip.prototype.getLink = function() { return new sap.m.Link(); };

/**
 * Returns a metadata object for class sap.m.MessageStrip.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.MessageStrip.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowCloseButton showCloseButton}.
 * 
 * Determines if the message has a close button in the upper right corner.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showCloseButton</code>
 * 
 * @public
 * 
 */
sap.m.MessageStrip.prototype.getShowCloseButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowIcon showIcon}.
 * 
 * Determines if an icon is displayed for the message.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showIcon</code>
 * 
 * @public
 * 
 */
sap.m.MessageStrip.prototype.getShowIcon = function() { return false; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Determines the text of the message.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.MessageStrip.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * Determines the type of messages that are displayed in the MessageStrip.
 * Possible values are: Information (default), Success, Warning, Error.
 * If None is passed, the value is set to Information and a warning is displayed in the console.
 * 
 * Default value is <code>Information</code>.
 * @returns {sap.ui.core.MessageType} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.MessageStrip.prototype.getType = function() { return new sap.ui.core.MessageType(); };

/**
 * Sets a new value for property {@link #getCustomIcon customIcon}.
 * 
 * Determines a custom icon which is displayed.
 * If none is set, the default icon for this message type is used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.URI} sCustomIcon New value for property <code>customIcon</code>
 * @returns {sap.m.MessageStrip} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageStrip.prototype.setCustomIcon = function(sCustomIcon) { return new sap.m.MessageStrip(); };

/**
 * Sets the aggregated {@link #getLink link}.
 * @param {sap.m.Link} oLink The link to set
 * @returns {sap.m.MessageStrip} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageStrip.prototype.setLink = function(oLink) { return new sap.m.MessageStrip(); };

/**
 * Sets a new value for property {@link #getShowCloseButton showCloseButton}.
 * 
 * Determines if the message has a close button in the upper right corner.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowCloseButton New value for property <code>showCloseButton</code>
 * @returns {sap.m.MessageStrip} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageStrip.prototype.setShowCloseButton = function(bShowCloseButton) { return new sap.m.MessageStrip(); };

/**
 * Sets a new value for property {@link #getShowIcon showIcon}.
 * 
 * Determines if an icon is displayed for the message.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowIcon New value for property <code>showIcon</code>
 * @returns {sap.m.MessageStrip} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageStrip.prototype.setShowIcon = function(bShowIcon) { return new sap.m.MessageStrip(); };

/**
 * Setter for property text.
 * Default value is empty/undefined
 * @public
 * @param {string} sText new value for property text
 * @returns {sap.m.MessageStrip} this to allow method chaining
 * 
 */
sap.m.MessageStrip.prototype.setText = function(sText) { return new sap.m.MessageStrip(); };

/**
 * Setter for property type.
 * Default value is sap.ui.core.MessageType.Information
 * @public
 * @param {sap.ui.core.MessageType} sType The Message type
 * @returns {sap.m.MessageStrip} this to allow method chaining
 * 
 */
sap.m.MessageStrip.prototype.setType = function(sType) { return new sap.m.MessageStrip(); };


// ---- sap.m.MessageToast --------------------------------------------------------------------------

/**
 * Creates and displays a simple message toast notification message with the given text, and optionally other options.
 * 
 * The only mandatory parameter is <code>sMessage</code>.
 * 
 * @param {string} sMessage The message to be displayed.
 * @param {object} [mOptions] Object which can contain all other options. Not all entries in this object are required. This property is optional.
 * @param {int} [mOptions.duration=3000] Time in milliseconds before the close animation starts. Needs to be a finite positive nonzero integer.
 * @param {sap.ui.core.CSSSize} [mOptions.width='15em'] The width of the message toast, this value can be provided in %, em, px and all possible CSS measures.
 * @param {sap.ui.core.Popup.Dock} [mOptions.my='center bottom'] Specifies which point of the message toast should be aligned.
 * @param {sap.ui.core.Popup.Dock} [mOptions.at='center bottom'] Specifies the point of the reference element to which the message toast should be aligned.
 * @param {sap.ui.core.Control|Element|jQuery|Window|undefined} [mOptions.of=window] Specifies the reference element to which the message toast should be aligned, by default it is aligned to the browser visual viewport.
 * @param {string} [mOptions.offset='0 0'] The offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the message toast 10 pixels to the right).
 * @param {string} [mOptions.collision='fit fit'] Specifies how the position of the message toast should be adjusted in case it overflows the screen in some direction. Possible values “fit”, “flip”, “none”, or a pair for horizontal and vertical e.g. "fit flip”, "fit none".
 * @param {function} [mOptions.onClose=null] Function to be called when the message toast closes.
 * @param {boolean} [mOptions.autoClose=true] Specify whether the message toast should close as soon as the end user touches the screen.
 * @param {string} [mOptions.animationTimingFunction='ease'] Describes how the close animation will progress. Possible values "ease", "linear", "ease-in", "ease-out", "ease-in-out". This feature is not supported in android and ie9 browsers.
 * @param {int} [mOptions.animationDuration=1000] Time in milliseconds that the close animation takes to complete. Needs to be a finite positive integer. For not animation set to 0. This feature is not supported in android and ie9 browsers.
 * @param {boolean} [mOptions.closeOnBrowserNavigation=true] Specifies if the message toast closes on browser navigation.
 * 
 * @type void
 * @public
 * 
 * @memberof sap.m.MessageToast
 */
sap.m.MessageToast.show = function(sMessage,mOptions) { return null; };


// ---- sap.m.MessageView --------------------------------------------------------------------------

/**
 * Constructor for a new MessageView
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAsyncDescriptionHandler asyncDescriptionHandler} : any</li>
 * <li>{@link #getAsyncURLHandler asyncURLHandler} : any</li>
 * <li>{@link #getGroupItems groupItems} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.MessageItem[] (default)</li>
 * <li>{@link #getHeaderButton headerButton} : sap.m.Button</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:itemSelect itemSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:listSelect listSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:longtextLoaded longtextLoaded} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:urlValidated urlValidated} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <strong><i>Overview</i></strong>
 * <br><br>
 * A {@link sap.m.MessageView} is used to display a summarized list of different types of messages (errors, warnings, success and information).
 * It provides a handy and systemized way to navigate and explore details for every message.
 * It is meant to be embedded into container controls.
 * <br><br>
 * <strong>Notes:</strong>
 * <ul>
 * <li> Messages can have descriptions pre-formatted with HTML markup. In this case, the <code>markupDescription</code> has to be set to <code>true</code>. </li>
 * <li> If the message cannot be fully displayed or includes a long description, the MessageView provides navigation to the detailed description. </li>
 * </ul>
 * <strong><i>Structure</i></strong>
 * <br><br>
 * The MessageView stores all messages in an association of type {@link sap.m.MessageItem} named <code>items</code>.
 * <br>
 * A set of properties determines how the items are rendered:
 * <ul>
 * <li> counter - An integer that is used to indicate the number of errors for each type </li>
 * <li> type - The type of message </li>
 * <li> title/subtitle - The title and subtitle of the message</li>
 * <li> description - The long text description of the message</li>
 * </ul>
 * <strong><i>Usage</i></strong>
 * <br><br>
 * As part of the messaging concept, MessageView provides a way to centrally manage messages and show them to the user without additional work for the developer.
 * <br><br>
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.46
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MessageView = function(sId,mSettings) {};
/**
 * This event will be fired after the popover is opened
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover
 * @public
 * 
 */
sap.m.MessageView.prototype.afterOpen = function(oControlEvent) {  };

/**
 * This event will be fired when description is shown
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.MessageItem} oControlEvent.getParameters.item Refers to the message item that is being presented
 * @param {sap.ui.core.MessageType} oControlEvent.getParameters.messageTypeFilter Refers to the type of messages being shown
 * See sap.ui.core.MessageType values for types
 * @public
 * 
 */
sap.m.MessageView.prototype.itemSelect = function(oControlEvent) {  };

/**
 * This event will be fired when one of the lists is shown when (not) filtered  by type
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.MessageType} oControlEvent.getParameters.messageTypeFilter This parameter refers to the type of messages being shown.
 * @public
 * 
 */
sap.m.MessageView.prototype.listSelect = function(oControlEvent) {  };

/**
 * This event will be fired when the long text description data from a remote URL is loaded
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.MessageView.prototype.longtextLoaded = function(oControlEvent) {  };

/**
 * This event will be fired when a validation of a URL from long text description is ready
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.MessageView.prototype.urlValidated = function(oControlEvent) {  };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.m.MessageItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.addItem = function(oItem) { return new sap.m.MessageView(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterOpen afterOpen} event of this <code>sap.m.MessageView</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessageView</code> itself.
 * 
 * This event will be fired after the popover is opened
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessageView</code> itself
 * 
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MessageView.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.MessageView(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:itemSelect itemSelect} event of this <code>sap.m.MessageView</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessageView</code> itself.
 * 
 * This event will be fired when description is shown
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessageView</code> itself
 * 
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MessageView.prototype.attachItemSelect = function(oData,fnFunction,oListener) { return new sap.m.MessageView(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:listSelect listSelect} event of this <code>sap.m.MessageView</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessageView</code> itself.
 * 
 * This event will be fired when one of the lists is shown when (not) filtered  by type
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessageView</code> itself
 * 
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MessageView.prototype.attachListSelect = function(oData,fnFunction,oListener) { return new sap.m.MessageView(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:longtextLoaded longtextLoaded} event of this <code>sap.m.MessageView</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessageView</code> itself.
 * 
 * This event will be fired when the long text description data from a remote URL is loaded
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessageView</code> itself
 * 
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MessageView.prototype.attachLongtextLoaded = function(oData,fnFunction,oListener) { return new sap.m.MessageView(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:urlValidated urlValidated} event of this <code>sap.m.MessageView</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MessageView</code> itself.
 * 
 * This event will be fired when a validation of a URL from long text description is ready
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MessageView</code> itself
 * 
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MessageView.prototype.attachUrlValidated = function(oData,fnFunction,oListener) { return new sap.m.MessageView(); };

/**
 * Destroys the headerButton in the aggregation {@link #getHeaderButton headerButton}.
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.destroyHeaderButton = function() { return new sap.m.MessageView(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.destroyItems = function() { return new sap.m.MessageView(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterOpen afterOpen} event of this <code>sap.m.MessageView</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.MessageView(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:itemSelect itemSelect} event of this <code>sap.m.MessageView</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.detachItemSelect = function(fnFunction,oListener) { return new sap.m.MessageView(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:listSelect listSelect} event of this <code>sap.m.MessageView</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.detachListSelect = function(fnFunction,oListener) { return new sap.m.MessageView(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:longtextLoaded longtextLoaded} event of this <code>sap.m.MessageView</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.detachLongtextLoaded = function(fnFunction,oListener) { return new sap.m.MessageView(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:urlValidated urlValidated} event of this <code>sap.m.MessageView</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.detachUrlValidated = function(fnFunction,oListener) { return new sap.m.MessageView(); };

/**
 * Creates a new subclass of class sap.m.MessageView with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.MessageView.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] This refers to the control which opens the popover
 * 
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MessageView.prototype.fireAfterOpen = function(mParameters) { return new sap.m.MessageView(); };

/**
 * Fires event {@link #event:itemSelect itemSelect} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.MessageItem} [mParameters.item] Refers to the message item that is being presented
 * @param {sap.ui.core.MessageType} [mParameters.messageTypeFilter] Refers to the type of messages being shown
 * See sap.ui.core.MessageType values for types
 * 
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MessageView.prototype.fireItemSelect = function(mParameters) { return new sap.m.MessageView(); };

/**
 * Fires event {@link #event:listSelect listSelect} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.MessageType} [mParameters.messageTypeFilter] This parameter refers to the type of messages being shown.
 * 
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MessageView.prototype.fireListSelect = function(mParameters) { return new sap.m.MessageView(); };

/**
 * Fires event {@link #event:longtextLoaded longtextLoaded} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MessageView.prototype.fireLongtextLoaded = function(mParameters) { return new sap.m.MessageView(); };

/**
 * Fires event {@link #event:urlValidated urlValidated} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MessageView.prototype.fireUrlValidated = function(mParameters) { return new sap.m.MessageView(); };

/**
 * Gets current value of property {@link #getAsyncDescriptionHandler asyncDescriptionHandler}.
 * 
 * Callback function for resolving a promise after description has been asynchronously loaded inside this function
 * 
 * @returns {any} Value of property <code>asyncDescriptionHandler</code>
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.getAsyncDescriptionHandler = function() { return null; };

/**
 * Gets current value of property {@link #getAsyncURLHandler asyncURLHandler}.
 * 
 * Callback function for resolving a promise after a link has been asynchronously validated inside this function
 * 
 * @returns {any} Value of property <code>asyncURLHandler</code>
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.getAsyncURLHandler = function() { return null; };

/**
 * Gets current value of property {@link #getGroupItems groupItems}.
 * 
 * Defines whether the MessageItems are grouped or not
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>groupItems</code>
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.getGroupItems = function() { return false; };

/**
 * Gets content of aggregation {@link #getHeaderButton headerButton}.
 * 
 * A custom header button
 * 
 * @returns {sap.m.Button}
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.getHeaderButton = function() { return new sap.m.Button(); };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * A list with message items
 * 
 * @returns {sap.m.MessageItem[]}
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.MessageView.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.MessageView.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.m.MessageItem</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.MessageItem}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.m.MessageItem}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.insertItem = function(oItem,iIndex) { return new sap.m.MessageView(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.MessageItem[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.m.MessageItem} vItem The item to remove or its index or id
 * @returns {sap.m.MessageItem} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.removeItem = function(vItem) { return new sap.m.MessageItem(); };

/**
 * Sets a new value for property {@link #getAsyncDescriptionHandler asyncDescriptionHandler}.
 * 
 * Callback function for resolving a promise after description has been asynchronously loaded inside this function
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oAsyncDescriptionHandler New value for property <code>asyncDescriptionHandler</code>
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.setAsyncDescriptionHandler = function(oAsyncDescriptionHandler) { return new sap.m.MessageView(); };

/**
 * Sets a new value for property {@link #getAsyncURLHandler asyncURLHandler}.
 * 
 * Callback function for resolving a promise after a link has been asynchronously validated inside this function
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oAsyncURLHandler New value for property <code>asyncURLHandler</code>
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.setAsyncURLHandler = function(oAsyncURLHandler) { return new sap.m.MessageView(); };

/**
 * Setter for default description and URL validation callbacks across all instances of MessageView
 * @static
 * @protected
 * @param {object} mDefaultHandlers An object setting default callbacks
 * @param {function} mDefaultHandlers.asyncDescriptionHandler
 * @param {function} mDefaultHandlers.asyncURLHandler
 * 
 */
sap.m.MessageView.setDefaultHandlers = function(mDefaultHandlers) {  };

/**
 * Sets a new value for property {@link #getGroupItems groupItems}.
 * 
 * Defines whether the MessageItems are grouped or not
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bGroupItems New value for property <code>groupItems</code>
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.setGroupItems = function(bGroupItems) { return new sap.m.MessageView(); };

/**
 * Sets the aggregated {@link #getHeaderButton headerButton}.
 * @param {sap.m.Button} oHeaderButton The headerButton to set
 * @returns {sap.m.MessageView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MessageView.prototype.setHeaderButton = function(oHeaderButton) { return new sap.m.MessageView(); };


// ---- sap.m.MultiComboBox --------------------------------------------------------------------------

/**
 * Constructor for a new MultiComboBox.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelectedKeys selectedKeys} : string[] (default: [])</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedItems selectedItems} : (sap.ui.core.ID | sap.ui.core.Item)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:selectionChange selectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:selectionFinish selectionFinish} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ComboBoxBase#constructor sap.m.ComboBoxBase}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The MultiComboBox control provides a list box with items and a text field allowing the user to either type a value directly into the control or choose from the list of existing items.
 * @extends sap.m.ComboBoxBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.22.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MultiComboBox = function(sId,mSettings) {};
/**
 * Event is fired when selection of an item is changed.
 * Note: please do not use the "change" event inherited from sap.m.InputBase
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.changedItem Item which selection is changed
 * @param {boolean} oControlEvent.getParameters.selected Selection state: true if item is selected, false if
 * item is not selected
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.selectionChange = function(oControlEvent) {  };

/**
 * Event is fired when user has finished a selection of items in a list box and list box has been closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item[]} oControlEvent.getParameters.selectedItems The selected items which are selected after list box has been closed.
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.selectionFinish = function(oControlEvent) {  };

/**
 * Adds some item <code>oItem</code> to the association named <code>selectedItems</code>.
 * 
 * @param {sap.ui.core.Item} oItem The selected item to add; if empty, nothing is added.
 * @returns {sap.m.MultiComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.addSelectedItem = function(oItem) { return new sap.m.MultiComboBox(); };

/**
 * Adds selected items. Only items with valid keys are added as selected.
 * 
 * @param {string[]} aKeys
 *         An array of item keys that identifies the items to be added as selected
 * @type sap.m.MultiComboBox
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MultiComboBox.prototype.addSelectedKeys = function(aKeys) { return new sap.m.MultiComboBox(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:selectionChange selectionChange} event of this <code>sap.m.MultiComboBox</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MultiComboBox</code> itself.
 * 
 * Event is fired when selection of an item is changed.
 * Note: please do not use the "change" event inherited from sap.m.InputBase
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MultiComboBox</code> itself
 * 
 * @returns {sap.m.MultiComboBox} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.attachSelectionChange = function(oData,fnFunction,oListener) { return new sap.m.MultiComboBox(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:selectionFinish selectionFinish} event of this <code>sap.m.MultiComboBox</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MultiComboBox</code> itself.
 * 
 * Event is fired when user has finished a selection of items in a list box and list box has been closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MultiComboBox</code> itself
 * 
 * @returns {sap.m.MultiComboBox} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.attachSelectionFinish = function(oData,fnFunction,oListener) { return new sap.m.MultiComboBox(); };

/**
 * Clear the selection.
 * 
 * @protected
 * 
 */
sap.m.MultiComboBox.prototype.clearSelection = function() {  };

/**
 * Creates a picker. To be overwritten by subclasses.
 * 
 * @param {string} sPickerType
 * @returns {sap.m.Popover | sap.m.Dialog} The picker pop-up to be used.
 * @protected
 * 
 */
sap.m.MultiComboBox.prototype.createPicker = function(sPickerType) { return new sap.m.Popover(); };

/**
 * Destroys all the items in the aggregation named <code>items</code>.
 * 
 * @returns {sap.m.MultiComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.destroyItems = function() { return new sap.m.MultiComboBox(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:selectionChange selectionChange} event of this <code>sap.m.MultiComboBox</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MultiComboBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.detachSelectionChange = function(fnFunction,oListener) { return new sap.m.MultiComboBox(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:selectionFinish selectionFinish} event of this <code>sap.m.MultiComboBox</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MultiComboBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.detachSelectionFinish = function(fnFunction,oListener) { return new sap.m.MultiComboBox(); };

/**
 * Creates a new subclass of class sap.m.MultiComboBox with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ComboBoxBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.MultiComboBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Item} [mParameters.changedItem] Item which selection is changed
 * @param {boolean} [mParameters.selected] Selection state: true if item is selected, false if
 * item is not selected
 * 
 * @returns {sap.m.MultiComboBox} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MultiComboBox.prototype.fireSelectionChange = function(mParameters) { return new sap.m.MultiComboBox(); };

/**
 * Fires event {@link #event:selectionFinish selectionFinish} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Item[]} [mParameters.selectedItems] The selected items which are selected after list box has been closed.
 * 
 * @returns {sap.m.MultiComboBox} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MultiComboBox.prototype.fireSelectionFinish = function(mParameters) { return new sap.m.MultiComboBox(); };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.MultiComboBox.prototype.getAccessibilityInfo = function() {  };

/**
 * Gets the enabled items from the aggregation named <code>items</code>.
 * 
 * @param {sap.ui.core.Item[]} [aItems=getItems()] Items to filter.
 * @return {sap.ui.core.Item[]} An array containing the enabled items.
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.getEnabledItems = function(aItems) { return new Array(); };

/**
 * Gets the item with the given key from the aggregation named <code>items</code>.<br>
 * <b>Note:</b> If duplicate keys exist, the first item matching the key is returned.
 * 
 * @param {string} sKey An item key that specifies the item to retrieve.
 * @returns {sap.ui.core.Item}
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.getItemByKey = function(sKey) { return new sap.ui.core.Item(); };

/**
 * Returns a metadata object for class sap.m.MultiComboBox.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.MultiComboBox.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Retrieves the selected item objects from the association named <code>selectedItems</code>.
 * 
 * @returns {sap.ui.core.Item[]} Array of sap.ui.core.Item instances. The current target of the <code>selectedItems</code>
 *          association.
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.getSelectedItems = function() { return new Array(); };

/**
 * Gets current value of property {@link #getSelectedKeys selectedKeys}.
 * 
 * Keys of the selected items. If the key has no corresponding item, no changes will apply. If duplicate keys exists the first item matching the key is used.
 * 
 * Default value is <code>[]</code>.
 * @returns {string[]} Value of property <code>selectedKeys</code>
 * 
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.getSelectedKeys = function() { return new Array(); };

/**
 * Inserts an item into the aggregation named <code>items</code>.
 * 
 * @param {sap.ui.core.Item} oItem The item to insert; if empty, nothing is inserted.
 * @param {int} iIndex The <code>0</code>-based index the item should be inserted at; for
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *             greater than the current size of the aggregation, the item is inserted at
 *             the last position.
 * @returns {sap.m.MultiComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.insertItem = function(oItem,iIndex) { return new sap.m.MultiComboBox(); };

/**
 * This hook method is called after the MultiComboBox's Pop-up is rendered.
 * 
 * @protected
 * 
 */
sap.m.MultiComboBox.prototype.onAfterRenderingPicker = function() {  };

/**
 * This hook method is called before the MultiComboBox's Pop-up is rendered.
 * 
 * @protected
 * 
 */
sap.m.MultiComboBox.prototype.onBeforeRenderingPicker = function() {  };

/**
 * Removes all the items in the aggregation named <code>items</code>.
 * 
 * @returns {sap.ui.core.Item[]} An array of sap.ui.core.Item of the removed items (might be empty).
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getSelectedItems selectedItems}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.removeAllSelectedItems = function() { return new Array(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * 
 * @param {int | string | sap.ui.core.Item} oItem The item to remove or its index or id.
 * @returns {sap.ui.core.Item} The removed item or null.
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.removeItem = function(oItem) { return new sap.ui.core.Item(); };

/**
 * Removes an selectedItem from the association named {@link #getSelectedItems selectedItems}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Item} vSelectedItem The selectedItem to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed selectedItem or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.removeSelectedItem = function(vSelectedItem) { return new sap.ui.core.ID(); };

/**
 * Removes selected items. Only items with valid keys are removed.
 * 
 * @param {string[]} aKeys
 *         An array of item keys that identifies the items to be removed
 * @type sap.m.MultiComboBox
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MultiComboBox.prototype.removeSelectedKeys = function(aKeys) { return new sap.m.MultiComboBox(); };

/**
 * Setter for association <code>selectedItems</code>.
 * 
 * @param {string[] | sap.ui.core.Item[] | null} aItems new values for association <code>selectedItems</code>.
 * Array of sap.ui.core.Item Id which becomes the new target of this <code>selectedItems</code> association.
 * Alternatively, an array of sap.ui.core.Item instance may be given or null.
 * 
 * @returns {sap.m.MultiComboBox} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.setSelectedItems = function(aItems) { return new sap.m.MultiComboBox(); };

/**
 * Sets a new value for property {@link #getSelectedKeys selectedKeys}.
 * 
 * Keys of the selected items. If the key has no corresponding item, no changes will apply. If duplicate keys exists the first item matching the key is used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>[]</code>.
 * @param {string[]} sSelectedKeys New value for property <code>selectedKeys</code>
 * @returns {sap.m.MultiComboBox} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MultiComboBox.prototype.setSelectedKeys = function(sSelectedKeys) { return new sap.m.MultiComboBox(); };


// ---- sap.m.MultiInput --------------------------------------------------------------------------

/**
 * Constructor for a new MultiInput.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnableMultiLineMode enableMultiLineMode} : boolean (default: false)</li>
 * <li>{@link #getMaxTokens maxTokens} : int</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTokens tokens} : sap.m.Token[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:tokenChange tokenChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:tokenUpdate tokenUpdate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Input#constructor sap.m.Input}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <h3>Overview</h3>
 * A multi-input field allows the user to enter multiple values, which are displayed as {@link sap.m.Token tokens}. These can be displayed in single and multi-line mode.
 * You can enable auto-complete suggestions or value help to help the user choose the correct entry. You can define
 * validator functions to define what token values are accepted.
 * <b>Notes:</b>
 * <ul>
 * <li> New valid tokens are created, when the user presses Enter, selects a value from the suggestions drop-down, or when the focus leaves the field.</li>
 * <li> Provide meaningful labels for all input fields. Do not use the placeholder as a replacement for the label.</li>
 * </ul>
 * <h3>Usage</h3>
 * <h4>When to use:</h4>
 * <ul>
 * <li> You need to provide the value help option to help users select or search multiple business objects.</li>
 * <li> The dataset to choose from is expected to increase over time (for example, to more than 200 values).</li>
 * </ul>
 * <h4>When not to use:</h4>
 * <ul>
 * <li> When you need to select only one value.</li>
 * <li> When you want the user to select from a predefined set of options. Use {@link sap.m.MultiComboBox} instead.</li>
 * </ul>
 * <h3>Responsive Behavior</h3>
 * <u>On Phones:</u>
 * <ul>
 * <li> Only the last entered token is displayed.</li>
 * <li> A new full-screen dialog opens where the auto-complete suggestions can be selected.</li>
 * <li> You can review the tokens by tapping on the token or the input field.</li>
 * </ul>
 * <u> On Tablets:</u>
 * <ul>
 * <li> The auto-complete suggestions appear below or above the multi-input field.</li>
 * <li> You can review the tokens by swiping them to the left or right.</li>
 * <li> (Multi-line Mode) Previously added tokens are visible above the input field.</li>
 * </ul>
 * <u>On Desktop:</u>
 * <ul>
 * <li> The auto-complete suggestions appear below or above the multi-input field.</li>
 * <li> You can review the tokens by pressing the right or left arrows on the keyboard.</li>
 * <li> You can select single tokens or a range of tokens and you can copy/cut/delete them.</
 * <li> (Multi-line Mode) Previously added tokens are visible above the input field.</li>
 * </ul>
 * @extends sap.m.Input
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.MultiInput = function(sId,mSettings) {};
/**
 * Fired when the tokens aggregation changed (add / remove token)
 * @event
 * 
 * @deprecated Since version 1.46.
 * Please use the new event tokenUpdate.
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.type Type of tokenChange event.
 * There are four TokenChange types: "added", "removed", "removedAll", "tokensChanged".
 * Use Tokenizer.TokenChangeType.Added for "added",    Tokenizer.TokenChangeType.Removed for "removed", Tokenizer.TokenChangeType.RemovedAll for "removedAll" and Tokenizer.TokenChangeType.TokensChanged for "tokensChanged".
 * @param {sap.m.Token} oControlEvent.getParameters.token The added token or removed token.
 * This parameter is used when tokenChange type is "added" or "removed".
 * @param {sap.m.Token[]} oControlEvent.getParameters.tokens The array of removed tokens.
 * This parameter is used when tokenChange type is "removedAll".
 * @param {sap.m.Token[]} oControlEvent.getParameters.addedTokens The array of tokens that are added.
 * This parameter is used when tokenChange type is "tokenChanged".
 * @param {sap.m.Token[]} oControlEvent.getParameters.removedTokens The array of tokens that are removed.
 * This parameter is used when tokenChange type is "tokenChanged".
 * @public
 * 
 */
sap.m.MultiInput.prototype.tokenChange = function(oControlEvent) {  };

/**
 * Fired when the tokens aggregation changed (add / remove token)
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.MultiInput.prototype.tokenUpdate = function(oControlEvent) {  };

/**
 * Adds some token to the aggregation {@link #getTokens tokens}.
 * @param {sap.m.Token}
 *            oToken the token to add; if empty, nothing is inserted
 * @returns {sap.m.MultiInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MultiInput.prototype.addToken = function(oToken) { return new sap.m.MultiInput(); };

/**
 * Function adds a validation callback called before any new token gets added to the tokens aggregation
 * 
 * @param {function} fValidator
 * @public
 * 
 */
sap.m.MultiInput.prototype.addValidator = function(fValidator) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:tokenChange tokenChange} event of this <code>sap.m.MultiInput</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MultiInput</code> itself.
 * 
 * Fired when the tokens aggregation changed (add / remove token)
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MultiInput</code> itself
 * 
 * @returns {sap.m.MultiInput} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 * @deprecated Since version 1.46.
 * Please use the new event tokenUpdate.
 * 
 */
sap.m.MultiInput.prototype.attachTokenChange = function(oData,fnFunction,oListener) { return new sap.m.MultiInput(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:tokenUpdate tokenUpdate} event of this <code>sap.m.MultiInput</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.MultiInput</code> itself.
 * 
 * Fired when the tokens aggregation changed (add / remove token)
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.MultiInput</code> itself
 * 
 * @returns {sap.m.MultiInput} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.MultiInput.prototype.attachTokenUpdate = function(oData,fnFunction,oListener) { return new sap.m.MultiInput(); };

/**
 * Function overwrites clone function to add tokens to MultiInput
 * 
 * @public
 * @return {sap.ui.core.Element} reference to the newly created clone
 * 
 */
sap.m.MultiInput.prototype.clone = function() { return new sap.ui.core.Element(); };

/**
 * Close multi-line MultiInput in multi-line mode
 * 
 * @since 1.28
 * @public
 * 
 */
sap.m.MultiInput.prototype.closeMultiLine = function() {  };

/**
 * Destroys all the tokens in the aggregation {@link #getTokens tokens}.
 * @returns {sap.m.MultiInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MultiInput.prototype.destroyTokens = function() { return new sap.m.MultiInput(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:tokenChange tokenChange} event of this <code>sap.m.MultiInput</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MultiInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.46.
 * Please use the new event tokenUpdate.
 * 
 * @public
 * 
 */
sap.m.MultiInput.prototype.detachTokenChange = function(fnFunction,oListener) { return new sap.m.MultiInput(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:tokenUpdate tokenUpdate} event of this <code>sap.m.MultiInput</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.MultiInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MultiInput.prototype.detachTokenUpdate = function(fnFunction,oListener) { return new sap.m.MultiInput(); };

/**
 * Creates a new subclass of class sap.m.MultiInput with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Input.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.MultiInput.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:tokenChange tokenChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.type] Type of tokenChange event.
 * There are four TokenChange types: "added", "removed", "removedAll", "tokensChanged".
 * Use Tokenizer.TokenChangeType.Added for "added",    Tokenizer.TokenChangeType.Removed for "removed", Tokenizer.TokenChangeType.RemovedAll for "removedAll" and Tokenizer.TokenChangeType.TokensChanged for "tokensChanged".
 * @param {sap.m.Token} [mParameters.token] The added token or removed token.
 * This parameter is used when tokenChange type is "added" or "removed".
 * @param {sap.m.Token[]} [mParameters.tokens] The array of removed tokens.
 * This parameter is used when tokenChange type is "removedAll".
 * @param {sap.m.Token[]} [mParameters.addedTokens] The array of tokens that are added.
 * This parameter is used when tokenChange type is "tokenChanged".
 * @param {sap.m.Token[]} [mParameters.removedTokens] The array of tokens that are removed.
 * This parameter is used when tokenChange type is "tokenChanged".
 * 
 * @returns {sap.m.MultiInput} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 * @deprecated Since version 1.46.
 * Please use the new event tokenUpdate.
 * 
 */
sap.m.MultiInput.prototype.fireTokenChange = function(mParameters) { return new sap.m.MultiInput(); };

/**
 * Fires event {@link #event:tokenUpdate tokenUpdate} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.MultiInput} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.MultiInput.prototype.fireTokenUpdate = function(mParameters) { return new sap.m.MultiInput(); };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.MultiInput.prototype.getAccessibilityInfo = function() {  };

/**
 * Get the reference element which the message popup should dock to
 * 
 * @return {DOMRef} Dom Element which the message popup should dock to
 * @protected
 * 
 */
sap.m.MultiInput.prototype.getDomRefForValueStateMessage = function() { return null; };

/**
 * Gets current value of property {@link #getEnableMultiLineMode enableMultiLineMode}.
 * 
 * If set to true, the MultiInput will be displayed in multi-line display mode.
 * In multi-line display mode, all tokens can be fully viewed and easily edited in the MultiInput.
 * The default value is false.
 * <b>Note:</b> This property does not take effect on smartphones or when the editable property is set to false.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableMultiLineMode</code>
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.MultiInput.prototype.getEnableMultiLineMode = function() { return false; };

/**
 * Gets current value of property {@link #getMaxTokens maxTokens}.
 * 
 * The max number of tokens that is allowed in MultiInput.
 * 
 * @returns {int} Value of property <code>maxTokens</code>
 * @since 1.36
 * 
 * @public
 * 
 */
sap.m.MultiInput.prototype.getMaxTokens = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.MultiInput.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.MultiInput.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Function returns domref which acts as reference point for the opening suggestion menu
 * 
 * @public
 * @returns {domRef}
 *          the domref at which to open the suggestion menu
 * 
 */
sap.m.MultiInput.prototype.getPopupAnchorDomRef = function() { return null; };

/**
 * Gets content of aggregation {@link #getTokens tokens}.
 * 
 * The currently displayed tokens
 * 
 * @returns {sap.m.Token[]}
 * 
 * @public
 * 
 */
sap.m.MultiInput.prototype.getTokens = function() { return new Array(); };

/**
 * Checks for the provided <code>sap.m.Token</code> in the aggregation {@link #getTokens tokens}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Token}
 *           oToken The token whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.MultiInput.prototype.indexOfToken = function(oToken) { return 0; };

/**
 * Inserts a token into the aggregation {@link #getTokens tokens}.
 * 
 * @param {sap.m.Token}
 *            oToken the token to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the token should be inserted at; for
 *              a negative value of <code>iIndex</code>, the token is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the token is inserted at
 *              the last position
 * @returns {sap.m.MultiInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.MultiInput.prototype.insertToken = function(oToken,iIndex) { return new sap.m.MultiInput(); };

/**
 * Focus is on MultiInput
 * @public
 * @param {jQuery.Event} oEvent
 * 
 */
sap.m.MultiInput.prototype.onfocusin = function(oEvent) {  };

/**
 * When press ESC, deselect all tokens and all texts
 * @public
 * @param {jQuery.Event} oEvent
 * 
 */
sap.m.MultiInput.prototype.onsapescape = function(oEvent) {  };

/**
 * When tap on text field, deselect all tokens
 * @public
 * @param {jQuery.Event} oEvent
 * 
 */
sap.m.MultiInput.prototype.ontap = function(oEvent) {  };

/**
 * Expand multi-line MultiInput in multi-line mode
 * 
 * @since 1.28
 * @public
 * 
 */
sap.m.MultiInput.prototype.openMultiLine = function() {  };

/**
 * Removes all the controls from the aggregation {@link #getTokens tokens}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Token[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.MultiInput.prototype.removeAllTokens = function() { return new Array(); };

/**
 * Function removes all validation callbacks
 * 
 * @public
 * 
 */
sap.m.MultiInput.prototype.removeAllValidators = function() {  };

/**
 * Removes a token from the aggregation {@link #getTokens tokens}.
 * 
 * @param {int | string | sap.m.Token} vToken The token to remove or its index or id
 * @returns {sap.m.Token} The removed token or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.MultiInput.prototype.removeToken = function(vToken) { return new sap.m.Token(); };

/**
 * Function removes a validation callback
 * 
 * @param {function} fValidator
 * @public
 * 
 */
sap.m.MultiInput.prototype.removeValidator = function(fValidator) {  };

/**
 * Setter for property <code>enableMultiLineMode</code>.
 * 
 * @since 1.28
 * @public
 * 
 */
sap.m.MultiInput.prototype.setEnableMultiLineMode = function() {  };

/**
 * Sets a new value for property {@link #getMaxTokens maxTokens}.
 * 
 * The max number of tokens that is allowed in MultiInput.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iMaxTokens New value for property <code>maxTokens</code>
 * @returns {sap.m.MultiInput} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36
 * 
 * @public
 * 
 */
sap.m.MultiInput.prototype.setMaxTokens = function(iMaxTokens) { return new sap.m.MultiInput(); };

/**
 * Function sets an array of tokens, existing tokens will get overridden
 * 
 * @param {sap.m.Token[]}
 *          aTokens - the new token set
 * @public
 * @returns {sap.m.MultiInput} Pointer to the control instance for chaining
 * 
 */
sap.m.MultiInput.prototype.setTokens = function(aTokens) { return new sap.m.MultiInput(); };


// ---- sap.m.NavContainer --------------------------------------------------------------------------

/**
 * Constructor for a new NavContainer.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAutoFocus autoFocus} : boolean (default: true)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDefaultTransitionName defaultTransitionName} : string (default: slide)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPages pages} : sap.ui.core.Control[] (default)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getInitialPage initialPage} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterNavigate afterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The NavContainer control handles hierarchic navigation between Pages or other fullscreen controls.
 * 
 * All children of this control will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer = function(sId,mSettings) {};
/**
 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.
 * @event
 * @since 1.7.1
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to a specific page, triggered by "backToPage()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
 * @public
 * 
 */
sap.m.NavContainer.prototype.afterNavigate = function(oControlEvent) {  };

/**
 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
 * @event
 * @since 1.7.1
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to a specific page, triggered by "backToPage()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
 * @public
 * 
 */
sap.m.NavContainer.prototype.navigate = function(oControlEvent) {  };

/**
 * Adds a custom transition to the NavContainer type (not to a particular instance!). The transition is identified by a "name". Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
 * 
 * "to" and "back" are the transition functions for the forward and backward navigation.
 * Both will be called with the following parameters:
 * - oFromPage: the Control which is currently being displayed by the NavContainer
 * - oToPage: the Control which should be displayed by the NavContainer after the transition
 * - fCallback: a function which MUST be called when the transition has completed
 * - oTransitionParameters: a data object that can be given by application code when triggering the transition by calling to() or back(); this object could give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration
 * 
 * The contract for "to" and "back" is that they may do an animation of their choice, but it should not take "too long". At the beginning of the transition the target page "oToPage" does have the CSS class "sapMNavItemHidden" which initially hides the target page (visibility:hidden). The transition can do any preparation (e.g. move that page out of the screen or make it transparent) and then should remove this CSS class.
 * After the animation the target page "oToPage" should cover the entire screen and the source page "oFromPage" should not be visible anymore. This page should then have the CSS class "sapMNavItemHidden".
 * For adding/removing this or other CSS classes, the transition can use the addStyleClass/removeStyleClass method:
 * oFromPage.addStyleClass("sapMNavItemHidden");
 * When the transition is complete, it MUST call the given fCallback method to inform the NavContainer that navigation has finished!
 * 
 * Hint: if the target page of your transition stays black on iPhone, try wrapping the animation start into a
 * setTimeout(..., 0)
 * block (delayed, but without waiting).
 * 
 * This method can be called on any NavContainer instance or statically on the sap.m.NavContainer type. However, the transition will always be registered for the type (and ALL instances), not for the single instance on which this method was invoked.
 * 
 * Returns the sap.m.NavContainer type if called statically, or "this" (to allow method chaining) if called on a particular NavContainer instance.
 * 
 * @param {string} sName
 *         The name of the transition. This name can be used by the application to choose this transition when navigating "to()" or "back()": the "transitionName" parameter of "NavContainer.to()" corresponds to this name, the back() navigation will automatically use the same transition.
 * 
 *         Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
 * @param {object} oTo
 *         The function which will be called by the NavContainer when the application navigates "to()", using this animation's name. The NavContainer instance is the "this" context within the animation function.
 * 
 *         See the documentation of NavContainer.addCustomTransitions for more details about this function.
 * @param {object} oBack
 *         The function which will be called by the NavContainer when the application navigates "back()" from a page where it had navigated to using this animation's name. The NavContainer instance is the "this" context within the animation function.
 * 
 *         See the documentation of NavContainer.addCustomTransitions for more details about this function.
 * @type sap.m.NavContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.addCustomTransition = function(sName,oTo,oBack) { return new sap.m.NavContainer(); };

/**
 * Adds some page to the aggregation {@link #getPages pages}.
 * @param {sap.ui.core.Control}
 *            oPage the page to add; if empty, nothing is inserted
 * @returns {sap.m.NavContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.addPage = function(oPage) { return new sap.m.NavContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterNavigate afterNavigate} event of this <code>sap.m.NavContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.NavContainer</code> itself.
 * 
 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code> itself
 * 
 * @returns {sap.m.NavContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.attachAfterNavigate = function(oData,fnFunction,oListener) { return new sap.m.NavContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:navigate navigate} event of this <code>sap.m.NavContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.NavContainer</code> itself.
 * 
 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code> itself
 * 
 * @returns {sap.m.NavContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.attachNavigate = function(oData,fnFunction,oListener) { return new sap.m.NavContainer(); };

/**
 * Navigates back one level. If already on the initial page and there is no place to go back, nothing happens.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 * 
 * @param {object} [oBackData]
 *         Since version 1.7.1. This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 *         In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 *         For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 *         When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} [oTransitionParameters]
 *         Since version 1.7.1. This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 *         In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.NavContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.back = function(oBackData,oTransitionParameters) { return new sap.m.NavContainer(); };

/**
 * Navigates back to the nearest previous page in the NavContainer history with the given ID. If there is no such page among the previous pages, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 * 
 * @param {string} sPageId
 *         The ID of the screen to which back navigation should happen. The ID or the control itself can be given. The nearest such page among the previous pages in the history stack will be used.
 * @param {object} [oBackData]
 *         This optional object can carry any payload data which should be made available to the target page of the "backToPage" navigation. The event on the target page will contain this data object as "backData" property.
 * 
 *         When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} [oTransitionParameters]
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 *         In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.NavContainer
 * @public
 * @since 1.7.2
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.backToPage = function(sPageId,oBackData,oTransitionParameters) { return new sap.m.NavContainer(); };

/**
 * Navigates back to the initial/top level (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
 * 
 * @param {object} [oBackData]
 *         This optional object can carry any payload data which should be made available to the target page of the "backToTop" navigation. The event on the target page will contain this data object as "backData" property.
 * 
 *         When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} [oTransitionParameters]
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 *         In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.NavContainer
 * @public
 * @since 1.7.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.backToTop = function(oBackData,oTransitionParameters) { return new sap.m.NavContainer(); };

/**
 * Returns whether the current page is the top/initial page.
 * 
 * Note: going to the initial page again with a row of "to" navigations causes the initial page to be displayed again, but logically one is not at the top level, so this method returns "false" in this case.
 * 
 * @type boolean
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.currentPageIsTopPage = function() { return false; };

/**
 * Destroys all the pages in the aggregation {@link #getPages pages}.
 * @returns {sap.m.NavContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.destroyPages = function() { return new sap.m.NavContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterNavigate afterNavigate} event of this <code>sap.m.NavContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.NavContainer} Reference to <code>this</code> in order to allow method chaining
 * @since 1.7.1
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.detachAfterNavigate = function(fnFunction,oListener) { return new sap.m.NavContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:navigate navigate} event of this <code>sap.m.NavContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.NavContainer} Reference to <code>this</code> in order to allow method chaining
 * @since 1.7.1
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.detachNavigate = function(fnFunction,oListener) { return new sap.m.NavContainer(); };

/**
 * Creates a new subclass of class sap.m.NavContainer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.NavContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterNavigate afterNavigate} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.from] The page which had been shown before navigation.
 * @param {string} [mParameters.fromId] The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} [mParameters.to] The page which is now shown after navigation.
 * @param {string} [mParameters.toId] The ID of the page which is now shown after navigation.
 * @param {boolean} [mParameters.firstTime] Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} [mParameters.isTo] Whether was a forward navigation, triggered by "to()".
 * @param {boolean} [mParameters.isBack] Whether this was a back navigation, triggered by "back()".
 * @param {boolean} [mParameters.isBackToTop] Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} [mParameters.isBackToPage] Whether this was a navigation to a specific page, triggered by "backToPage()".
 * @param {string} [mParameters.direction] How the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
 * 
 * @returns {sap.m.NavContainer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.fireAfterNavigate = function(mParameters) { return new sap.m.NavContainer(); };

/**
 * Fires event {@link #event:navigate navigate} to attached listeners.
 * 
 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.from] The page which was shown before the current navigation.
 * @param {string} [mParameters.fromId] The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} [mParameters.to] The page which will be shown after the current navigation.
 * @param {string} [mParameters.toId] The ID of the page which will be shown after the current navigation.
 * @param {boolean} [mParameters.firstTime] Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} [mParameters.isTo] Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} [mParameters.isBack] Whether this is a back navigation, triggered by "back()".
 * @param {boolean} [mParameters.isBackToTop] Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} [mParameters.isBackToPage] Whether this was a navigation to a specific page, triggered by "backToPage()".
 * @param {string} [mParameters.direction] How the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
 * 
 * @returns {boolean} Whether or not to prevent the default action
 * @protected
 * @since 1.7.1
 * 
 */
sap.m.NavContainer.prototype.fireNavigate = function(mParameters) { return false; };

/**
 * Gets current value of property {@link #getAutoFocus autoFocus}.
 * 
 * Determines whether the initial focus is set automatically on first rendering and after navigating to a new page.
 * This is useful when on touch devices the keyboard pops out due to the focus being automatically set on an input field.
 * If necessary the "afterShow" event can be used to focus another element.
 * 
 * <b>Note:</b>  The following scenarios are possible, depending on where the focus
 * was before navigation to a new page:
 * <ul><li>If <code>autoFocus<code> is set to <code>true<code> and the focus was
 * inside the current page, the focus will be moved automatically on the new page.</li>
 * <li>If <code>autoFocus<code> is set to <code>false<code> and the focus was inside
 * the current page, the focus will disappear.
 * <li>If the focus was outside the current page, after the navigation it will remain
 * unchanged regardless of what is set to the <code>autoFocus<code> property.</li></ul>
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>autoFocus</code>
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.getAutoFocus = function() { return false; };

/**
 * Returns the currently displayed page-level control. Note: it is not necessarily an instance of sap.m.Page, but it could also be an sap.ui.core.View, sap.m.Carousel, or whatever is aggregated.
 * 
 * Returns undefined if no page has been added yet.
 * 
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.getCurrentPage = function() { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getDefaultTransitionName defaultTransitionName}.
 * 
 * The type of the transition/animation to apply when "to()" is called without defining a transition type to use. The default is "slide". Other options are: "fade", "flip" and "show" - and the names of any registered custom transitions.
 * 
 * Default value is <code>slide</code>.
 * @returns {string} Value of property <code>defaultTransitionName</code>
 * @since 1.7.1
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.getDefaultTransitionName = function() { return ""; };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * ID of the element which is the current target of the association {@link #getInitialPage initialPage}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.getInitialPage = function() { return new sap.ui.core.ID(); };

/**
 * Returns a metadata object for class sap.m.NavContainer.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.NavContainer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the control with the given ID from the "pages" aggregation (if available).
 * 
 * @param {string} sId
 *         The ID of the aggregated control to find.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.getPage = function(sId) { return new sap.ui.core.Control(); };

/**
 * Gets content of aggregation {@link #getPages pages}.
 * 
 * The content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * 
 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.getPages = function() { return new Array(); };

/**
 * Returns the previous page (the page from which the user drilled down to the current page with "to()").
 * Note: this is not the page which the user has seen before, but the page which is the target of the next "back()" navigation.
 * If there is no previous page, "undefined" is returned.
 * 
 * @type sap.ui.core.Control
 * @public
 * @since 1.7.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.getPreviousPage = function() { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Whether the NavContainer is visible.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.getVisible = function() { return false; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getPages pages}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oPage The page whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.indexOfPage = function(oPage) { return 0; };

/**
 * Inserts a page into the aggregation {@link #getPages pages}.
 * 
 * @param {sap.ui.core.Control}
 *            oPage the page to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the page should be inserted at; for
 *              a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the page is inserted at
 *              the last position
 * @returns {sap.m.NavContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.insertPage = function(oPage,iIndex) { return new sap.m.NavContainer(); };

/**
 * Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.
 * 
 * This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark and then wants to navigate up in the drilldown hierarchy. Normally such a back navigation would not be possible because there is no previous page in the NavContainer's history stack.
 * 
 * @param {string} sPageId
 *         The ID of the control/page/screen which is inserted into the history stack. The respective control must be aggregated by the NavContainer, otherwise this will cause an error.
 * @param {string} [sTransitionName]
 *         The type of the transition/animation which would have been used to navigate from the (inserted) previous page to the current page. When navigating back, the inverse animation will be applied.
 *         This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * @param {object} [oData]
 *         This optional object can carry any payload data which would have been given to the inserted previous page if the user would have done a normal forward navigation to it.
 * @type sap.m.NavContainer
 * @public
 * @since 1.16.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.insertPreviousPage = function(sPageId,sTransitionName,oData) { return new sap.m.NavContainer(); };

/**
 * Removes all the controls from the aggregation {@link #getPages pages}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.removeAllPages = function() { return new Array(); };

/**
 * Removes a page from the aggregation {@link #getPages pages}.
 * 
 * @param {int | string | sap.ui.core.Control} vPage The page to remove or its index or id
 * @returns {sap.ui.core.Control} The removed page or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.removePage = function(vPage) { return new sap.ui.core.Control(); };

/**
 * Sets a new value for property {@link #getAutoFocus autoFocus}.
 * 
 * Determines whether the initial focus is set automatically on first rendering and after navigating to a new page.
 * This is useful when on touch devices the keyboard pops out due to the focus being automatically set on an input field.
 * If necessary the "afterShow" event can be used to focus another element.
 * 
 * <b>Note:</b>  The following scenarios are possible, depending on where the focus
 * was before navigation to a new page:
 * <ul><li>If <code>autoFocus<code> is set to <code>true<code> and the focus was
 * inside the current page, the focus will be moved automatically on the new page.</li>
 * <li>If <code>autoFocus<code> is set to <code>false<code> and the focus was inside
 * the current page, the focus will disappear.
 * <li>If the focus was outside the current page, after the navigation it will remain
 * unchanged regardless of what is set to the <code>autoFocus<code> property.</li></ul>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bAutoFocus New value for property <code>autoFocus</code>
 * @returns {sap.m.NavContainer} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.setAutoFocus = function(bAutoFocus) { return new sap.m.NavContainer(); };

/**
 * Sets a new value for property {@link #getDefaultTransitionName defaultTransitionName}.
 * 
 * The type of the transition/animation to apply when "to()" is called without defining a transition type to use. The default is "slide". Other options are: "fade", "flip" and "show" - and the names of any registered custom transitions.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>slide</code>.
 * @param {string} sDefaultTransitionName New value for property <code>defaultTransitionName</code>
 * @returns {sap.m.NavContainer} Reference to <code>this</code> in order to allow method chaining
 * @since 1.7.1
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.setDefaultTransitionName = function(sDefaultTransitionName) { return new sap.m.NavContainer(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.m.NavContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.setHeight = function(sHeight) { return new sap.m.NavContainer(); };

/**
 * Sets the associated {@link #getInitialPage initialPage}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oInitialPage ID of an element which becomes the new target of this initialPage association; alternatively, an element instance may be given
 * @returns {sap.m.NavContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.setInitialPage = function(oInitialPage) { return new sap.m.NavContainer(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Whether the NavContainer is visible.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.NavContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.setVisible = function(bVisible) { return new sap.m.NavContainer(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.NavContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NavContainer.prototype.setWidth = function(sWidth) { return new sap.m.NavContainer(); };

/**
 * Navigates to the next page (with drill-down semantic) with the given (or default) animation. This creates a new history item inside the NavContainer and allows going back.
 * 
 * Note that any modifications to the target page (like setting its title, or anything else that could cause a re-rendering) should be done BEFORE calling to(), in order to avoid unwanted side effects, e.g. related to the page animation.
 * 
 * Available transitions currently include "slide" (default), "fade", "flip", and "show". None of these is currently making use of any given transitionParameters.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given data object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
 * 
 * @param {string} sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} [sTransitionName]
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 *         Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 *         None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} [oData]
 *         Since version 1.7.1. This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * 
 *         Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 *         When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} [oTransitionParameters]
 *         Since version 1.7.1. This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 *         For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * 
 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 *         The "show", "slide" and "fade" transitions do not use any parameter.
 * @type sap.m.NavContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NavContainer.prototype.to = function(sPageId,sTransitionName,oData,oTransitionParameters) { return new sap.m.NavContainer(); };


// ---- sap.m.NavContainerChild --------------------------------------------------------------------------

/**
 * This event is fired every time when the NavContainer has made this child control invisible. In case of animated transitions this
 * event is fired after the transition finishes. This control is now no longer being displayed and not animated anymore.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @public
 * 
 */
sap.m.NavContainerChild.prototype.AfterHide = function() {  };

/**
 * This event is fired every time when the NavContainer has made this child control visible. In case of animated transitions this
 * event is fired after the transition finishes. This control is now being displayed and not animated anymore.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @public
 * 
 */
sap.m.NavContainerChild.prototype.AfterShow = function() {  };

/**
 * This event is fired before the NavContainer shows this child control for the first time.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @public
 * 
 */
sap.m.NavContainerChild.prototype.BeforeFirstShow = function() {  };

/**
 * This event is fired every time before the NavContainer hides this child control. In case of animated transitions this
 * event is fired before the transition starts.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @public
 * 
 */
sap.m.NavContainerChild.prototype.BeforeHide = function() {  };

/**
 * This event is fired every time before the NavContainer shows this child control. In case of animated transitions this
 * event is fired before the transition starts.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @public
 * 
 */
sap.m.NavContainerChild.prototype.BeforeShow = function() {  };


// ---- sap.m.NewsContent --------------------------------------------------------------------------

/**
 * Constructor for a new sap.m.NewsContent control.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSize size} : sap.m.Size (default: Auto)</li>
 * <li>{@link #getContentText contentText} : string</li>
 * <li>{@link #getSubheader subheader} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class This control displays the news content text and subheader in a tile.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * @since 1.34
 * 
 * @public
 * @ui5-metamodel This control will also be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NewsContent = function(sId,mSettings) {};
/**
 * The event is triggered when the News Content is pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.NewsContent.prototype.press = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.NewsContent</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.NewsContent</code> itself.
 * 
 * The event is triggered when the News Content is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.NewsContent</code> itself
 * 
 * @returns {sap.m.NewsContent} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.NewsContent.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.NewsContent(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.NewsContent</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.NewsContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NewsContent.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.NewsContent(); };

/**
 * Creates a new subclass of class sap.m.NewsContent with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.NewsContent.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.NewsContent} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.NewsContent.prototype.firePress = function(mParameters) { return new sap.m.NewsContent(); };

/**
 * Gets current value of property {@link #getContentText contentText}.
 * 
 * The content text.
 * 
 * @returns {string} Value of property <code>contentText</code>
 * 
 * @public
 * 
 */
sap.m.NewsContent.prototype.getContentText = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.NewsContent.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.NewsContent.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSize size}.
 * 
 * Updates the size of the chart. If not set then the default size is applied based on the device tile.
 * 
 * Default value is <code>Auto</code>.
 * @returns {sap.m.Size} Value of property <code>size</code>
 * 
 * @deprecated Since version 1.38.0. The NewsContent control has now a fixed size, depending on the used media (desktop, tablet or phone).
 * 
 * @public
 * 
 */
sap.m.NewsContent.prototype.getSize = function() { return new sap.m.Size(); };

/**
 * Gets current value of property {@link #getSubheader subheader}.
 * 
 * The subheader.
 * 
 * @returns {string} Value of property <code>subheader</code>
 * 
 * @public
 * 
 */
sap.m.NewsContent.prototype.getSubheader = function() { return ""; };

/**
 * Sets a new value for property {@link #getSize size}.
 * 
 * Updates the size of the chart. If not set then the default size is applied based on the device tile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Auto</code>.
 * @param {sap.m.Size} sSize New value for property <code>size</code>
 * @returns {sap.m.NewsContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.38.0. The NewsContent control has now a fixed size, depending on the used media (desktop, tablet or phone).
 * 
 * @public
 * 
 */
sap.m.NewsContent.prototype.setSize = function(sSize) { return new sap.m.NewsContent(); };

/**
 * Sets a new value for property {@link #getSubheader subheader}.
 * 
 * The subheader.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSubheader New value for property <code>subheader</code>
 * @returns {sap.m.NewsContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NewsContent.prototype.setSubheader = function(sSubheader) { return new sap.m.NewsContent(); };


// ---- sap.m.NotificationListBase --------------------------------------------------------------------------

/**
 * Constructor for a new NotificationListBase.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPriority priority} : sap.ui.core.Priority (default: None)</li>
 * <li>{@link #getTitle title} : string (default: )</li>
 * <li>{@link #getDatetime datetime} : string (default: )</li>
 * <li>{@link #getShowButtons showButtons} : boolean (default: true)</li>
 * <li>{@link #getShowCloseButton showCloseButton} : boolean (default: true)</li>
 * <li>{@link #getAuthorName authorName} : string (default: )</li>
 * <li>{@link #getAuthorPicture authorPicture} : sap.ui.core.URI</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.m.Button[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The NotificationListBase is the base class for NotificationListItem and NotificationListGroup.
 * @extends sap.m.ListItemBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.38
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NotificationListBase = function(sId,mSettings) {};
/**
 * Fired when the close button of the notification is pressed.<br><b>Note:</b> Pressing the close button doesn't destroy the notification automatically.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.close = function(oControlEvent) {  };

/**
 * Returns the sap.m.Image or the sap.ui.core.Control used in the NotificationListBase's author picture.
 * @returns {sap.m.Image|sap.ui.core.Control} The notification author picture text
 * @protected
 * 
 */
sap.m.NotificationListBase.prototype._getAuthorImage = function() { return new sap.m.Image(); };

/**
 * Returns the sap.m.Text control used in the NotificationListBase's author name.
 * @returns {sap.m.Text} The notification author name text
 * @protected
 * 
 */
sap.m.NotificationListBase.prototype._getAuthorName = function() { return new sap.m.Text(); };

/**
 * Returns the sap.m.Text control used in the NotificationListBase's header title.
 * @returns {sap.m.Text} The datetime control inside the Notification List Base control
 * @protected
 * 
 */
sap.m.NotificationListBase.prototype._getDateTimeText = function() { return new sap.m.Text(); };

/**
 * Returns the sap.m.Text control used in the NotificationListBase's header title.
 * @returns {sap.m.Text} The title control inside the Notification List Base control
 * @protected
 * 
 */
sap.m.NotificationListBase.prototype._getHeaderTitle = function() { return new sap.m.Text(); };

/**
 * Returns the sap.m.OverflowToolbar control used in the NotificationListBase.
 * @returns {sap.m.OverflowToolbar} The footer toolbar
 * @protected
 * 
 */
sap.m.NotificationListBase.prototype._getToolbar = function() { return new sap.m.OverflowToolbar(); };

/**
 * Adds some button to the aggregation {@link #getButtons buttons}.
 * @param {sap.m.Button}
 *            oButton the button to add; if empty, nothing is inserted
 * @returns {sap.m.NotificationListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.addButton = function(oButton) { return new sap.m.NotificationListBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:close close} event of this <code>sap.m.NotificationListBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.NotificationListBase</code> itself.
 * 
 * Fired when the close button of the notification is pressed.<br><b>Note:</b> Pressing the close button doesn't destroy the notification automatically.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.NotificationListBase</code> itself
 * 
 * @returns {sap.m.NotificationListBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.attachClose = function(oData,fnFunction,oListener) { return new sap.m.NotificationListBase(); };

/**
 * Destroys all the buttons in the aggregation {@link #getButtons buttons}.
 * @returns {sap.m.NotificationListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.destroyButtons = function() { return new sap.m.NotificationListBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:close close} event of this <code>sap.m.NotificationListBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.NotificationListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.detachClose = function(fnFunction,oListener) { return new sap.m.NotificationListBase(); };

/**
 * Creates a new subclass of class sap.m.NotificationListBase with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.NotificationListBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:close close} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.NotificationListBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.NotificationListBase.prototype.fireClose = function(mParameters) { return new sap.m.NotificationListBase(); };

/**
 * Gets current value of property {@link #getAuthorName authorName}.
 * 
 * Determines the notification group's author name.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>authorName</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.getAuthorName = function() { return ""; };

/**
 * Gets current value of property {@link #getAuthorPicture authorPicture}.
 * 
 * Determines the URL of the notification group's author picture.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>authorPicture</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.getAuthorPicture = function() { return new sap.ui.core.URI(); };

/**
 * Gets content of aggregation {@link #getButtons buttons}.
 * 
 * Action buttons.
 * 
 * @returns {sap.m.Button[]}
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.getButtons = function() { return new Array(); };

/**
 * Gets current value of property {@link #getDatetime datetime}.
 * 
 * Determines the due date of the NotificationListItem.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>datetime</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.getDatetime = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.NotificationListBase.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.NotificationListBase.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPriority priority}.
 * 
 * Determines the priority of the Notification.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.Priority} Value of property <code>priority</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.getPriority = function() { return new sap.ui.core.Priority(); };

/**
 * Gets current value of property {@link #getShowButtons showButtons}.
 * 
 * Determines the action buttons visibility.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showButtons</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.getShowButtons = function() { return false; };

/**
 * Gets current value of property {@link #getShowCloseButton showCloseButton}.
 * 
 * Determines the visibility of the close button.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showCloseButton</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.getShowCloseButton = function() { return false; };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Determines the title of the NotificationListBase item.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.getTitle = function() { return ""; };

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation {@link #getButtons buttons}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Button}
 *           oButton The button whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.indexOfButton = function(oButton) { return 0; };

/**
 * Inserts a button into the aggregation {@link #getButtons buttons}.
 * 
 * @param {sap.m.Button}
 *            oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the button should be inserted at; for
 *              a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the button is inserted at
 *              the last position
 * @returns {sap.m.NotificationListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.insertButton = function(oButton,iIndex) { return new sap.m.NotificationListBase(); };

/**
 * Removes all the controls from the aggregation {@link #getButtons buttons}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Button[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.removeAllButtons = function() { return new Array(); };

/**
 * Removes a button from the aggregation {@link #getButtons buttons}.
 * 
 * @param {int | string | sap.m.Button} vButton The button to remove or its index or id
 * @returns {sap.m.Button} The removed button or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.removeButton = function(vButton) { return new sap.m.Button(); };

/**
 * Sets a new value for property {@link #getAuthorName authorName}.
 * 
 * Determines the notification group's author name.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sAuthorName New value for property <code>authorName</code>
 * @returns {sap.m.NotificationListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.setAuthorName = function(sAuthorName) { return new sap.m.NotificationListBase(); };

/**
 * Sets a new value for property {@link #getAuthorPicture authorPicture}.
 * 
 * Determines the URL of the notification group's author picture.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sAuthorPicture New value for property <code>authorPicture</code>
 * @returns {sap.m.NotificationListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.setAuthorPicture = function(sAuthorPicture) { return new sap.m.NotificationListBase(); };

/**
 * Sets a new value for property {@link #getDatetime datetime}.
 * 
 * Determines the due date of the NotificationListItem.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sDatetime New value for property <code>datetime</code>
 * @returns {sap.m.NotificationListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.setDatetime = function(sDatetime) { return new sap.m.NotificationListBase(); };

/**
 * Sets a new value for property {@link #getPriority priority}.
 * 
 * Determines the priority of the Notification.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.core.Priority} sPriority New value for property <code>priority</code>
 * @returns {sap.m.NotificationListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.setPriority = function(sPriority) { return new sap.m.NotificationListBase(); };

/**
 * Sets a new value for property {@link #getShowButtons showButtons}.
 * 
 * Determines the action buttons visibility.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowButtons New value for property <code>showButtons</code>
 * @returns {sap.m.NotificationListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.setShowButtons = function(bShowButtons) { return new sap.m.NotificationListBase(); };

/**
 * Sets a new value for property {@link #getShowCloseButton showCloseButton}.
 * 
 * Determines the visibility of the close button.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowCloseButton New value for property <code>showCloseButton</code>
 * @returns {sap.m.NotificationListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.setShowCloseButton = function(bShowCloseButton) { return new sap.m.NotificationListBase(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Determines the title of the NotificationListBase item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.NotificationListBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListBase.prototype.setTitle = function(sTitle) { return new sap.m.NotificationListBase(); };


// ---- sap.m.NotificationListGroup --------------------------------------------------------------------------

/**
 * Constructor for a new NotificationListGroup.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getCollapsed collapsed} : boolean (default: false)</li>
 * <li>{@link #getAutoPriority autoPriority} : boolean (default: true)</li>
 * <li>{@link #getShowEmptyGroup showEmptyGroup} : boolean (default: false)</li>
 * <li>{@link #getEnableCollapseButtonWhenEmpty enableCollapseButtonWhenEmpty} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.NotificationListItem[] (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:onCollapse onCollapse} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.NotificationListBase#constructor sap.m.NotificationListBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The NotificationListItemGroup control is used for grouping NotificationListItems of the same type.
 * @extends sap.m.NotificationListBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.34
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NotificationListGroup = function(sId,mSettings) {};
/**
 * This event is called when collapse property value is changed
 * @event
 * @since 1.44
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.collapsed Indicates exact collapse direction
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.onCollapse = function(oControlEvent) {  };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.m.NotificationListItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.NotificationListGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.addItem = function(oItem) { return new sap.m.NotificationListGroup(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:onCollapse onCollapse} event of this <code>sap.m.NotificationListGroup</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.NotificationListGroup</code> itself.
 * 
 * This event is called when collapse property value is changed
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.NotificationListGroup</code> itself
 * 
 * @returns {sap.m.NotificationListGroup} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.44
 * 
 */
sap.m.NotificationListGroup.prototype.attachOnCollapse = function(oData,fnFunction,oListener) { return new sap.m.NotificationListGroup(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.NotificationListGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.destroyItems = function() { return new sap.m.NotificationListGroup(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:onCollapse onCollapse} event of this <code>sap.m.NotificationListGroup</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.NotificationListGroup} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.detachOnCollapse = function(fnFunction,oListener) { return new sap.m.NotificationListGroup(); };

/**
 * Creates a new subclass of class sap.m.NotificationListGroup with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.NotificationListBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.NotificationListGroup.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:onCollapse onCollapse} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.collapsed] Indicates exact collapse direction
 * 
 * @returns {sap.m.NotificationListGroup} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.44
 * 
 */
sap.m.NotificationListGroup.prototype.fireOnCollapse = function(mParameters) { return new sap.m.NotificationListGroup(); };

/**
 * Gets current value of property {@link #getAutoPriority autoPriority}.
 * 
 * Determines if the group will automatically set the priority based on the highest priority of its notifications or get its priority from the developer.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>autoPriority</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.getAutoPriority = function() { return false; };

/**
 * Gets current value of property {@link #getCollapsed collapsed}.
 * 
 * Determines if the group is collapsed or expanded.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>collapsed</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.getCollapsed = function() { return false; };

/**
 * Gets current value of property {@link #getEnableCollapseButtonWhenEmpty enableCollapseButtonWhenEmpty}.
 * 
 * Determines if the collapse/expand button should be enabled for an empty group.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableCollapseButtonWhenEmpty</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.getEnableCollapseButtonWhenEmpty = function() { return false; };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * The NotificationListItems inside the group.
 * 
 * @returns {sap.m.NotificationListItem[]}
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.NotificationListGroup.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.NotificationListGroup.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowEmptyGroup showEmptyGroup}.
 * 
 * Determines if the group header/footer of the empty group will be always shown. By default groups with 0 notifications are not shown.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showEmptyGroup</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.getShowEmptyGroup = function() { return false; };

/**
 * Checks for the provided <code>sap.m.NotificationListItem</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.NotificationListItem}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.m.NotificationListItem}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.NotificationListGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.insertItem = function(oItem,iIndex) { return new sap.m.NotificationListGroup(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.NotificationListItem[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.m.NotificationListItem} vItem The item to remove or its index or id
 * @returns {sap.m.NotificationListItem} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.removeItem = function(vItem) { return new sap.m.NotificationListItem(); };

/**
 * Sets a new value for property {@link #getAutoPriority autoPriority}.
 * 
 * Determines if the group will automatically set the priority based on the highest priority of its notifications or get its priority from the developer.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bAutoPriority New value for property <code>autoPriority</code>
 * @returns {sap.m.NotificationListGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.setAutoPriority = function(bAutoPriority) { return new sap.m.NotificationListGroup(); };

/**
 * Sets a new value for property {@link #getCollapsed collapsed}.
 * 
 * Determines if the group is collapsed or expanded.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bCollapsed New value for property <code>collapsed</code>
 * @returns {sap.m.NotificationListGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.setCollapsed = function(bCollapsed) { return new sap.m.NotificationListGroup(); };

/**
 * Sets a new value for property {@link #getEnableCollapseButtonWhenEmpty enableCollapseButtonWhenEmpty}.
 * 
 * Determines if the collapse/expand button should be enabled for an empty group.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableCollapseButtonWhenEmpty New value for property <code>enableCollapseButtonWhenEmpty</code>
 * @returns {sap.m.NotificationListGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.setEnableCollapseButtonWhenEmpty = function(bEnableCollapseButtonWhenEmpty) { return new sap.m.NotificationListGroup(); };

/**
 * Sets a new value for property {@link #getShowEmptyGroup showEmptyGroup}.
 * 
 * Determines if the group header/footer of the empty group will be always shown. By default groups with 0 notifications are not shown.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowEmptyGroup New value for property <code>showEmptyGroup</code>
 * @returns {sap.m.NotificationListGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListGroup.prototype.setShowEmptyGroup = function(bShowEmptyGroup) { return new sap.m.NotificationListGroup(); };


// ---- sap.m.NotificationListItem --------------------------------------------------------------------------

/**
 * Constructor for a new NotificationListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDescription description} : string (default: )</li>
 * <li>{@link #getTruncate truncate} : boolean (default: true)</li>
 * <li>{@link #getHideShowMoreButton hideShowMoreButton} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getProcessingMessage processingMessage} : sap.m.MessageStrip</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.NotificationListBase#constructor sap.m.NotificationListBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The NotificationListItem control is suitable for showing notifications to the user.
 * @extends sap.m.NotificationListBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.34
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NotificationListItem = function(sId,mSettings) {};
/**
 * Destroys the processingMessage in the aggregation {@link #getProcessingMessage processingMessage}.
 * @returns {sap.m.NotificationListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListItem.prototype.destroyProcessingMessage = function() { return new sap.m.NotificationListItem(); };

/**
 * Creates a new subclass of class sap.m.NotificationListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.NotificationListBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.NotificationListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getDescription description}.
 * 
 * Determines the description of the NotificationListItem.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>description</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListItem.prototype.getDescription = function() { return ""; };

/**
 * Gets current value of property {@link #getHideShowMoreButton hideShowMoreButton}.
 * 
 * Determines it the "Show More" button should be hidden.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>hideShowMoreButton</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListItem.prototype.getHideShowMoreButton = function() { return false; };

/**
 * Returns a metadata object for class sap.m.NotificationListItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.NotificationListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getProcessingMessage processingMessage}.
 * 
 * The sap.m.MessageStrip control that holds the information about any error that may occur when pressing the notification buttons
 * 
 * @returns {sap.m.MessageStrip}
 * 
 * @public
 * 
 */
sap.m.NotificationListItem.prototype.getProcessingMessage = function() { return new sap.m.MessageStrip(); };

/**
 * Gets current value of property {@link #getTruncate truncate}.
 * 
 * Determines if the text in the title and the description of the notification are truncated to the first two lines.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>truncate</code>
 * 
 * @public
 * 
 */
sap.m.NotificationListItem.prototype.getTruncate = function() { return false; };

/**
 * Sets a new value for property {@link #getDescription description}.
 * 
 * Determines the description of the NotificationListItem.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sDescription New value for property <code>description</code>
 * @returns {sap.m.NotificationListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListItem.prototype.setDescription = function(sDescription) { return new sap.m.NotificationListItem(); };

/**
 * Sets a new value for property {@link #getHideShowMoreButton hideShowMoreButton}.
 * 
 * Determines it the "Show More" button should be hidden.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bHideShowMoreButton New value for property <code>hideShowMoreButton</code>
 * @returns {sap.m.NotificationListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListItem.prototype.setHideShowMoreButton = function(bHideShowMoreButton) { return new sap.m.NotificationListItem(); };

/**
 * Sets the aggregated {@link #getProcessingMessage processingMessage}.
 * @param {sap.m.MessageStrip} oProcessingMessage The processingMessage to set
 * @returns {sap.m.NotificationListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListItem.prototype.setProcessingMessage = function(oProcessingMessage) { return new sap.m.NotificationListItem(); };

/**
 * Sets a new value for property {@link #getTruncate truncate}.
 * 
 * Determines if the text in the title and the description of the notification are truncated to the first two lines.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bTruncate New value for property <code>truncate</code>
 * @returns {sap.m.NotificationListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NotificationListItem.prototype.setTruncate = function(bTruncate) { return new sap.m.NotificationListItem(); };


// ---- sap.m.NumericContent --------------------------------------------------------------------------

/**
 * Constructor for a new sap.m.GenericTile control.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAnimateTextChange animateTextChange} : boolean (default: true)</li>
 * <li>{@link #getFormatterValue formatterValue} : boolean (default: false)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDescription iconDescription} : string</li>
 * <li>{@link #getIndicator indicator} : sap.m.DeviationIndicator (default: None)</li>
 * <li>{@link #getNullifyValue nullifyValue} : boolean (default: true)</li>
 * <li>{@link #getScale scale} : string</li>
 * <li>{@link #getSize size} : sap.m.Size (default: Auto)</li>
 * <li>{@link #getTruncateValueTo truncateValueTo} : int (default: 4)</li>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getValueColor valueColor} : sap.m.ValueColor (default: Neutral)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getWithMargin withMargin} : boolean (default: true)</li>
 * <li>{@link #getState state} : sap.m.LoadState (default: Loaded)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class Shows numeric values used for example in tiles colored according to their meaning and displays deviations.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * @since 1.34
 * 
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.NumericContent = function(sId,mSettings) {};
/**
 * The event is fired when the user chooses the numeric content.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.NumericContent.prototype.press = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.NumericContent</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.NumericContent</code> itself.
 * 
 * The event is fired when the user chooses the numeric content.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.NumericContent</code> itself
 * 
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.NumericContent.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.NumericContent(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.NumericContent</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.NumericContent(); };

/**
 * Creates a new subclass of class sap.m.NumericContent with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.NumericContent.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.NumericContent.prototype.firePress = function(mParameters) { return new sap.m.NumericContent(); };

/**
 * Gets current value of property {@link #getAnimateTextChange animateTextChange}.
 * 
 * If set to true, the change of the value will be animated.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>animateTextChange</code>
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.getAnimateTextChange = function() { return false; };

/**
 * Gets current value of property {@link #getFormatterValue formatterValue}.
 * 
 * If set to true, the value parameter contains a numeric value and scale. If set to false (default), the value parameter contains a numeric value only.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>formatterValue</code>
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.getFormatterValue = function() { return false; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * The icon to be displayed as a graphical element within the control. This can be an image or an icon from the icon font.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIconDescription iconDescription}.
 * 
 * Description of an icon that is used in the tooltip.
 * 
 * @returns {string} Value of property <code>iconDescription</code>
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.getIconDescription = function() { return ""; };

/**
 * Gets current value of property {@link #getIndicator indicator}.
 * 
 * The indicator arrow that shows value deviation.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.m.DeviationIndicator} Value of property <code>indicator</code>
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.getIndicator = function() { return new sap.m.DeviationIndicator(); };

/**
 * Returns a metadata object for class sap.m.NumericContent.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.NumericContent.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getNullifyValue nullifyValue}.
 * 
 * If set to true, the omitted value property is set to 0.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>nullifyValue</code>
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.getNullifyValue = function() { return false; };

/**
 * Gets current value of property {@link #getScale scale}.
 * 
 * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can be used for units. If the scaling prefix contains more than three characters, only the first three characters are displayed.
 * 
 * @returns {string} Value of property <code>scale</code>
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.getScale = function() { return ""; };

/**
 * Gets current value of property {@link #getSize size}.
 * 
 * Updates the size of the control. If not set then the default size is applied based on the device tile.
 * 
 * Default value is <code>Auto</code>.
 * @returns {sap.m.Size} Value of property <code>size</code>
 * 
 * @deprecated Since version 1.38.0. The NumericContent control has now a fixed size, depending on the used media (desktop, tablet or phone).
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.getSize = function() { return new sap.m.Size(); };

/**
 * Gets current value of property {@link #getState state}.
 * 
 * Indicates the load status.
 * 
 * Default value is <code>Loaded</code>.
 * @returns {sap.m.LoadState} Value of property <code>state</code>
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.getState = function() { return new sap.m.LoadState(); };

/**
 * Gets current value of property {@link #getTruncateValueTo truncateValueTo}.
 * 
 * The number of characters to display for the value property.
 * 
 * Default value is <code>4</code>.
 * @returns {int} Value of property <code>truncateValueTo</code>
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.getTruncateValueTo = function() { return 0; };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * The actual value.
 * 
 * @returns {string} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.getValue = function() { return ""; };

/**
 * Gets current value of property {@link #getValueColor valueColor}.
 * 
 * The semantic color of the value.
 * 
 * Default value is <code>Neutral</code>.
 * @returns {sap.m.ValueColor} Value of property <code>valueColor</code>
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.getValueColor = function() { return new sap.m.ValueColor(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * The width of the control. If it is not set, the size of the control is defined by the 'size' property.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getWithMargin withMargin}.
 * 
 * If the value is set to false, the content will fit to the whole size of the control.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>withMargin</code>
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.getWithMargin = function() { return false; };

/**
 * Sets a new value for property {@link #getAnimateTextChange animateTextChange}.
 * 
 * If set to true, the change of the value will be animated.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bAnimateTextChange New value for property <code>animateTextChange</code>
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.setAnimateTextChange = function(bAnimateTextChange) { return new sap.m.NumericContent(); };

/**
 * Sets a new value for property {@link #getFormatterValue formatterValue}.
 * 
 * If set to true, the value parameter contains a numeric value and scale. If set to false (default), the value parameter contains a numeric value only.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bFormatterValue New value for property <code>formatterValue</code>
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.setFormatterValue = function(bFormatterValue) { return new sap.m.NumericContent(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * The icon to be displayed as a graphical element within the control. This can be an image or an icon from the icon font.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.setIcon = function(sIcon) { return new sap.m.NumericContent(); };

/**
 * Sets a new value for property {@link #getIconDescription iconDescription}.
 * 
 * Description of an icon that is used in the tooltip.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIconDescription New value for property <code>iconDescription</code>
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.setIconDescription = function(sIconDescription) { return new sap.m.NumericContent(); };

/**
 * Sets a new value for property {@link #getIndicator indicator}.
 * 
 * The indicator arrow that shows value deviation.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.m.DeviationIndicator} sIndicator New value for property <code>indicator</code>
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.setIndicator = function(sIndicator) { return new sap.m.NumericContent(); };

/**
 * Sets a new value for property {@link #getNullifyValue nullifyValue}.
 * 
 * If set to true, the omitted value property is set to 0.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bNullifyValue New value for property <code>nullifyValue</code>
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.setNullifyValue = function(bNullifyValue) { return new sap.m.NumericContent(); };

/**
 * Sets a new value for property {@link #getScale scale}.
 * 
 * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can be used for units. If the scaling prefix contains more than three characters, only the first three characters are displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sScale New value for property <code>scale</code>
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.setScale = function(sScale) { return new sap.m.NumericContent(); };

/**
 * Sets a new value for property {@link #getSize size}.
 * 
 * Updates the size of the control. If not set then the default size is applied based on the device tile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Auto</code>.
 * @param {sap.m.Size} sSize New value for property <code>size</code>
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.38.0. The NumericContent control has now a fixed size, depending on the used media (desktop, tablet or phone).
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.setSize = function(sSize) { return new sap.m.NumericContent(); };

/**
 * Sets a new value for property {@link #getState state}.
 * 
 * Indicates the load status.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Loaded</code>.
 * @param {sap.m.LoadState} sState New value for property <code>state</code>
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.setState = function(sState) { return new sap.m.NumericContent(); };

/**
 * Sets a new value for property {@link #getTruncateValueTo truncateValueTo}.
 * 
 * The number of characters to display for the value property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>4</code>.
 * @param {int} iTruncateValueTo New value for property <code>truncateValueTo</code>
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.setTruncateValueTo = function(iTruncateValueTo) { return new sap.m.NumericContent(); };

/**
 * Sets a new value for property {@link #getValue value}.
 * 
 * The actual value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sValue New value for property <code>value</code>
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.setValue = function(sValue) { return new sap.m.NumericContent(); };

/**
 * Sets a new value for property {@link #getValueColor valueColor}.
 * 
 * The semantic color of the value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Neutral</code>.
 * @param {sap.m.ValueColor} sValueColor New value for property <code>valueColor</code>
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.setValueColor = function(sValueColor) { return new sap.m.NumericContent(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * The width of the control. If it is not set, the size of the control is defined by the 'size' property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.setWidth = function(sWidth) { return new sap.m.NumericContent(); };

/**
 * Sets a new value for property {@link #getWithMargin withMargin}.
 * 
 * If the value is set to false, the content will fit to the whole size of the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bWithMargin New value for property <code>withMargin</code>
 * @returns {sap.m.NumericContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.NumericContent.prototype.setWithMargin = function(bWithMargin) { return new sap.m.NumericContent(); };


// ---- sap.m.ObjectAttribute --------------------------------------------------------------------------

/**
 * Constructor for a new <code>ObjectAttribute</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getActive active} : boolean</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCustomContent customContent} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>ObjectAttribute</code> control displays a text field that can be normal or active.
 * The <code>ObjectAttribute</code> fires a <code>press</code> event when the user chooses the active text.
 * 
 * <b>Note:</b> If property <code>active</code> is set to <code>true</code>, only the value of the
 * <code>text</code> property is styled and acts as a link. In this case the <code>text</code>
 * property must also be set, as otherwise there will be no link displayed for the user.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ObjectAttribute = function(sId,mSettings) {};
/**
 * Fires when the user clicks on active text.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.domRef DOM reference of the ObjectAttribute's text to be used for positioning.
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.press = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.ObjectAttribute</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ObjectAttribute</code> itself.
 * 
 * Fires when the user clicks on active text.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectAttribute</code> itself
 * 
 * @returns {sap.m.ObjectAttribute} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.ObjectAttribute(); };

/**
 * Destroys the customContent in the aggregation {@link #getCustomContent customContent}.
 * @returns {sap.m.ObjectAttribute} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.destroyCustomContent = function() { return new sap.m.ObjectAttribute(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.ObjectAttribute</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ObjectAttribute} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.ObjectAttribute(); };

/**
 * Creates a new subclass of class sap.m.ObjectAttribute with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectAttribute.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.domRef] DOM reference of the ObjectAttribute's text to be used for positioning.
 * 
 * @returns {sap.m.ObjectAttribute} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ObjectAttribute.prototype.firePress = function(mParameters) { return new sap.m.ObjectAttribute(); };

/**
 * Gets current value of property {@link #getActive active}.
 * 
 * Indicates if the <code>ObjectAttribute</code> text is selectable for the user.
 * 
 * <b>Note:</b> As of version 1.48, only the value of the <code>text</code> property becomes active (styled and acts like a link) as opposed to both the <code>title</code> and <code>text</code> in the previous versions. If you set this property to <code>true</code>, you have to also set the <code>text</code> property.
 * 
 * @returns {boolean} Value of property <code>active</code>
 * 
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.getActive = function() { return false; };

/**
 * Gets content of aggregation {@link #getCustomContent customContent}.
 * 
 * When the aggregation is set, it replaces the text, active and textDirection properties. This also ignores the press event. The provided control is displayed as an active link.
 * <b>Note:</b> It will only allow sap.m.Text and sap.m.Link controls.
 * 
 * @returns {sap.ui.core.Control}
 * 
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.getCustomContent = function() { return new sap.ui.core.Control(); };

/**
 * Returns a metadata object for class sap.m.ObjectAttribute.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ObjectAttribute.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Defines to which DOM reference the Popup should be docked.
 * 
 * @protected
 * @return {DomNode} The DOM reference that Popup should dock to
 * 
 */
sap.m.ObjectAttribute.prototype.getPopupAnchorDomRef = function() { return null; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Defines the ObjectAttribute text.
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Determines the direction of the text, not including the title.
 * Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * 
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Defines the ObjectAttribute title.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.getTitle = function() { return ""; };

/**
 * Sets a new value for property {@link #getActive active}.
 * 
 * Indicates if the <code>ObjectAttribute</code> text is selectable for the user.
 * 
 * <b>Note:</b> As of version 1.48, only the value of the <code>text</code> property becomes active (styled and acts like a link) as opposed to both the <code>title</code> and <code>text</code> in the previous versions. If you set this property to <code>true</code>, you have to also set the <code>text</code> property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bActive New value for property <code>active</code>
 * @returns {sap.m.ObjectAttribute} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.setActive = function(bActive) { return new sap.m.ObjectAttribute(); };

/**
 * Sets the aggregated {@link #getCustomContent customContent}.
 * @param {sap.ui.core.Control} oCustomContent The customContent to set
 * @returns {sap.m.ObjectAttribute} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.setCustomContent = function(oCustomContent) { return new sap.m.ObjectAttribute(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Defines the ObjectAttribute text.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.ObjectAttribute} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.setText = function(sText) { return new sap.m.ObjectAttribute(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Determines the direction of the text, not including the title.
 * Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.ObjectAttribute} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.setTextDirection = function(sTextDirection) { return new sap.m.ObjectAttribute(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Defines the ObjectAttribute title.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.ObjectAttribute} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectAttribute.prototype.setTitle = function(sTitle) { return new sap.m.ObjectAttribute(); };


// ---- sap.m.ObjectHeader --------------------------------------------------------------------------

/**
 * Constructor for a new </code>ObjectHeader</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getIntro intro} : string</li>
 * <li>{@link #getIntroActive introActive} : boolean</li>
 * <li>{@link #getTitleActive titleActive} : boolean</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconActive iconActive} : boolean</li>
 * <li>{@link #getIconAlt iconAlt} : string</li>
 * <li>{@link #getIconTooltip iconTooltip} : string</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getMarkFavorite markFavorite} : boolean (default: false)</li>
 * <li>{@link #getMarkFlagged markFlagged} : boolean (default: false)</li>
 * <li>{@link #getShowMarkers showMarkers} : boolean (default: false)</li>
 * <li>{@link #getShowTitleSelector showTitleSelector} : boolean (default: false)</li>
 * <li>{@link #getNumberState numberState} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getCondensed condensed} : boolean (default: false)</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign</li>
 * <li>{@link #getResponsive responsive} : boolean (default: false)</li>
 * <li>{@link #getFullScreenOptimized fullScreenOptimized} : boolean (default: false)</li>
 * <li>{@link #getTitleHref titleHref} : sap.ui.core.URI</li>
 * <li>{@link #getTitleTarget titleTarget} : string</li>
 * <li>{@link #getIntroHref introHref} : sap.ui.core.URI</li>
 * <li>{@link #getIntroTarget introTarget} : string</li>
 * <li>{@link #getTitleTextDirection titleTextDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getIntroTextDirection introTextDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getNumberTextDirection numberTextDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getTitleSelectorTooltip titleSelectorTooltip} : string (default: Options)</li>
 * <li>{@link #getTitleLevel titleLevel} : sap.ui.core.TitleLevel (default: H1)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} : sap.m.ObjectAttribute[] (default)</li>
 * <li>{@link #getFirstStatus firstStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getSecondStatus secondStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getStatuses statuses} : sap.ui.core.Control[]</li>
 * <li>{@link #getAdditionalNumbers additionalNumbers} : sap.m.ObjectNumber[]</li>
 * <li>{@link #getHeaderContainer headerContainer} : sap.m.ObjectHeaderContainer</li>
 * <li>{@link #getMarkers markers} : sap.m.ObjectMarker[]</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:titlePress titlePress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:introPress introPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:iconPress iconPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:titleSelectorPress titleSelectorPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <code>ObjectHeader</code> is a display control that enables the user to easily identify
 * a specific object. The object header title is the key identifier of the object and
 * additional text and icons can be used to further distinguish it from other objects.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ObjectHeader = function(sId,mSettings) {};
/**
 * Event is fired when the title icon is active and the user taps/clicks on it
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' icon to be used for positioning.
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.iconPress = function(oControlEvent) {  };

/**
 * Event is fired when the intro is active and the user taps/clicks on it
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' intro to be used for positioning.
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.introPress = function(oControlEvent) {  };

/**
 * Event is fired when the title is active and the user taps/clicks on it
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' title to be used for positioning.
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.titlePress = function(oControlEvent) {  };

/**
 * Event is fired when the object header title selector (down-arrow) is pressed
 * @event
 * @since 1.16.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.domRef Dom reference of the object header' titleArrow to be used for positioning.
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.titleSelectorPress = function(oControlEvent) {  };

/**
 * Adds some additionalNumber to the aggregation {@link #getAdditionalNumbers additionalNumbers}.
 * @param {sap.m.ObjectNumber}
 *            oAdditionalNumber the additionalNumber to add; if empty, nothing is inserted
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.addAdditionalNumber = function(oAdditionalNumber) { return new sap.m.ObjectHeader(); };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.ObjectHeader(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.ObjectHeader(); };

/**
 * Adds some attribute to the aggregation {@link #getAttributes attributes}.
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.addAttribute = function(oAttribute) { return new sap.m.ObjectHeader(); };

/**
 * Adds some marker to the aggregation {@link #getMarkers markers}.
 * @param {sap.m.ObjectMarker}
 *            oMarker the marker to add; if empty, nothing is inserted
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.addMarker = function(oMarker) { return new sap.m.ObjectHeader(); };

/**
 * Adds some status to the aggregation {@link #getStatuses statuses}.
 * @param {sap.ui.core.Control}
 *            oStatus the status to add; if empty, nothing is inserted
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.addStatus = function(oStatus) { return new sap.m.ObjectHeader(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:iconPress iconPress} event of this <code>sap.m.ObjectHeader</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ObjectHeader</code> itself.
 * 
 * Event is fired when the title icon is active and the user taps/clicks on it
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code> itself
 * 
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.attachIconPress = function(oData,fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:introPress introPress} event of this <code>sap.m.ObjectHeader</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ObjectHeader</code> itself.
 * 
 * Event is fired when the intro is active and the user taps/clicks on it
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code> itself
 * 
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.attachIntroPress = function(oData,fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:titlePress titlePress} event of this <code>sap.m.ObjectHeader</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ObjectHeader</code> itself.
 * 
 * Event is fired when the title is active and the user taps/clicks on it
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code> itself
 * 
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.attachTitlePress = function(oData,fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:titleSelectorPress titleSelectorPress} event of this <code>sap.m.ObjectHeader</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ObjectHeader</code> itself.
 * 
 * Event is fired when the object header title selector (down-arrow) is pressed
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code> itself
 * 
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.attachTitleSelectorPress = function(oData,fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Destroys all the additionalNumbers in the aggregation {@link #getAdditionalNumbers additionalNumbers}.
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.destroyAdditionalNumbers = function() { return new sap.m.ObjectHeader(); };

/**
 * Destroys all the attributes in the aggregation {@link #getAttributes attributes}.
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.destroyAttributes = function() { return new sap.m.ObjectHeader(); };

/**
 * Destroys the firstStatus in the aggregation {@link #getFirstStatus firstStatus}.
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.16.0.
 * Use the statuses aggregation instead.
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.destroyFirstStatus = function() { return new sap.m.ObjectHeader(); };

/**
 * Destroys the headerContainer in the aggregation {@link #getHeaderContainer headerContainer}.
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.destroyHeaderContainer = function() { return new sap.m.ObjectHeader(); };

/**
 * Destroys all the markers in the aggregation {@link #getMarkers markers}.
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.destroyMarkers = function() { return new sap.m.ObjectHeader(); };

/**
 * Destroys the secondStatus in the aggregation {@link #getSecondStatus secondStatus}.
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.16.0.
 * Use the statuses aggregation instead.
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.destroySecondStatus = function() { return new sap.m.ObjectHeader(); };

/**
 * Destroys all the statuses in the aggregation {@link #getStatuses statuses}.
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.destroyStatuses = function() { return new sap.m.ObjectHeader(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:iconPress iconPress} event of this <code>sap.m.ObjectHeader</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.detachIconPress = function(fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:introPress introPress} event of this <code>sap.m.ObjectHeader</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.detachIntroPress = function(fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:titlePress titlePress} event of this <code>sap.m.ObjectHeader</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.detachTitlePress = function(fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:titleSelectorPress titleSelectorPress} event of this <code>sap.m.ObjectHeader</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.detachTitleSelectorPress = function(fnFunction,oListener) { return new sap.m.ObjectHeader(); };

/**
 * Creates a new subclass of class sap.m.ObjectHeader with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectHeader.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:iconPress iconPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {object} [mParameters.domRef] Dom reference of the object header' icon to be used for positioning.
 * 
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ObjectHeader.prototype.fireIconPress = function(mParameters) { return new sap.m.ObjectHeader(); };

/**
 * Fires event {@link #event:introPress introPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {object} [mParameters.domRef] Dom reference of the object header' intro to be used for positioning.
 * 
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ObjectHeader.prototype.fireIntroPress = function(mParameters) { return new sap.m.ObjectHeader(); };

/**
 * Fires event {@link #event:titlePress titlePress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {object} [mParameters.domRef] Dom reference of the object header' title to be used for positioning.
 * 
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ObjectHeader.prototype.fireTitlePress = function(mParameters) { return new sap.m.ObjectHeader(); };

/**
 * Fires event {@link #event:titleSelectorPress titleSelectorPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {object} [mParameters.domRef] Dom reference of the object header' titleArrow to be used for positioning.
 * 
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.16.0
 * 
 */
sap.m.ObjectHeader.prototype.fireTitleSelectorPress = function(mParameters) { return new sap.m.ObjectHeader(); };

/**
 * Gets content of aggregation {@link #getAdditionalNumbers additionalNumbers}.
 * 
 * NOTE: Only applied if you set "responsive=false".
 * Additional object numbers and units are managed in this aggregation.
 * The numbers are hidden on tablet and phone size screens.
 * When only one number is provided, it is rendered with additional separator from the main ObjectHeader number.
 * 
 * @returns {sap.m.ObjectNumber[]}
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getAdditionalNumbers = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getAttributes attributes}.
 * 
 * The list of Object Attributes
 * 
 * @returns {sap.m.ObjectAttribute[]}
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getAttributes = function() { return new Array(); };

/**
 * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Determines the background color of the <code>ObjectHeader</code>.
 * 
 * <b>Note:</b> The different types of <code>ObjectHeader</code> come with different default background:
 * <ul>
 * <li>non responsive - Transparent</li>
 * <li>responsive - Translucent</li>
 * <li>condensed - Solid</li>
 * </ul>
 * 
 * @returns {sap.m.BackgroundDesign} Value of property <code>backgroundDesign</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * Gets current value of property {@link #getCondensed condensed}.
 * 
 * <code>ObjectHeader</code> with title, one attribute, number, and number unit.
 * 
 * <b>Note:</b> Only applied if the <code>responsive</code> property is set to <code>false</code>.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>condensed</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getCondensed = function() { return false; };

/**
 * Gets content of aggregation {@link #getFirstStatus firstStatus}.
 * 
 * First status shown on the right side of the attributes above the second status.
 * If it is not set the first attribute will expand to take the entire row.
 * 
 * @returns {sap.m.ObjectStatus}
 * 
 * @deprecated Since version 1.16.0.
 * Use the statuses aggregation instead.
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getFirstStatus = function() { return new sap.m.ObjectStatus(); };

/**
 * Gets current value of property {@link #getFullScreenOptimized fullScreenOptimized}.
 * 
 * Optimizes the display of the elements of the <code>ObjectHeader</code>.
 * 
 * Set this property to <code>true</code> if your app uses a fullscreen layout (as opposed
 * to a master-detail or other split-screen layout).
 * 
 * <b>Note</b>: Only applied if the <code>responsive</code> property is also set to <code>true</code>.
 * 
 * If set to <code>true</code>, the following situations apply:
 * <ul>
 * <li>On desktop, 1-3 attributes/statuses - positioned as a third block on the right side of the Title/Number group</li>
 * <li>On desktop, 4+ attributes/statuses - 4 columns below the Title/Number</li>
 * <li>On tablet (portrait mode), always in 2 columns below the Title/Number</li>
 * <li>On tablet (landscape mode), 1-2 attributes/statuses - 2 columns below the Title/Number</li>
 * <li>On tablet (landscape mode), 3+ attributes/statuses - 3 columns below the Title/Number</li>
 * </ul>
 * On phone, the attributes and statuses are always positioned in 1 column below the Title/Number of the <code>ObjectHeader</code>.
 * 
 * If set to <code>false</code>, the attributes and statuses are being positioned below the
 * Title/Number of the <code>ObjectHeader</code> in 2 or 3 columns depending on their number:
 * <ul>
 * <li>On desktop, 1-4 attributes/statuses - 2 columns</li>
 * <li>On desktop, 5+ attributes/statuses - 3 columns</li>
 * <li>On tablet, always in 2 columns</li>
 * </ul>
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>fullScreenOptimized</code>
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getFullScreenOptimized = function() { return false; };

/**
 * Gets content of aggregation {@link #getHeaderContainer headerContainer}.
 * 
 * This aggregation takes only effect when you set "responsive" to true.
 * It can either be filled with an sap.m.IconTabBar or an sap.suite.ui.commons.HeaderContainer control. Overflow handling must be taken care of by the inner control. If used with an IconTabBar control, only the header will be displayed inside the object header, the content will be displayed below the ObjectHeader.
 * 
 * @returns {sap.m.ObjectHeaderContainer}
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getHeaderContainer = function() { return new sap.m.ObjectHeaderContainer(); };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Defines the icon of the <code>ObjectHeader</code>.
 * 
 * <b>Note:</b> Recursive resolution of binding expressions is not supported by the framework.
 * It works only in ObjectHeader, since it is a composite control and creates an Image control internally.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIconActive iconActive}.
 * 
 * Determines whether the <code>ObjectHeader</code> icon is clickable.
 * 
 * @returns {boolean} Value of property <code>iconActive</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIconActive = function() { return false; };

/**
 * Gets current value of property {@link #getIconAlt iconAlt}.
 * 
 * Determines the alternative text of the <code>ObjectHeader</code> icon. The text is
 * displayed if the image for the icon is not available, or cannot be displayed.
 * 
 * @returns {string} Value of property <code>iconAlt</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIconAlt = function() { return ""; };

/**
 * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, this is set to <code>true</code> but then one or more requests are sent trying to get
 * the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to <code>false</code>.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconDensityAware</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIconDensityAware = function() { return false; };

/**
 * Gets current value of property {@link #getIconTooltip iconTooltip}.
 * 
 * Determines the tooltip text of the <code>ObjectHeader</code> icon.
 * 
 * @returns {string} Value of property <code>iconTooltip</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIconTooltip = function() { return ""; };

/**
 * Gets current value of property {@link #getIntro intro}.
 * 
 * Determines the introductory text for the <code>ObjectHeader</code>.
 * 
 * @returns {string} Value of property <code>intro</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIntro = function() { return ""; };

/**
 * Gets current value of property {@link #getIntroActive introActive}.
 * 
 * Determines whether the introductory text of the <code>ObjectHeader</code> is clickable.
 * 
 * @returns {boolean} Value of property <code>introActive</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIntroActive = function() { return false; };

/**
 * Gets current value of property {@link #getIntroHref introHref}.
 * 
 * Determines the intro link target URI. Supports standard hyperlink behavior. If an action should be triggered,
 * this should not be set, but instead an event handler for the <code>introPress</code> event should be registered.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>introHref</code>
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIntroHref = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIntroTarget introTarget}.
 * 
 * Determines the <code>target</code> attribute for the intro link. Options are <code>_self</code>,
 * <code>_top</code>, <code>_blank</code>, <code>_parent</code>, <code>_search</code>. Alternatively,
 * a frame name can be entered.
 * 
 * @returns {string} Value of property <code>introTarget</code>
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIntroTarget = function() { return ""; };

/**
 * Gets current value of property {@link #getIntroTextDirection introTextDirection}.
 * 
 * Specifies the intro text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>introTextDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getIntroTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets content of aggregation {@link #getMarkers markers}.
 * 
 * List of markers (icon and/or text) that can be displayed for the <code>ObjectHeader</code>, such as favorite and flagged.<br><br>
 * <b>Note:</b> You should use either this aggregation or the already deprecated properties - <code>markFlagged</code> and <code>markFavorite</code>. Using both can lead to unexpected results.
 * 
 * @returns {sap.m.ObjectMarker[]}
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getMarkers = function() { return new Array(); };

/**
 * Gets current value of property {@link #getMarkFavorite markFavorite}.
 * 
 * Sets the favorite state for the <code>ObjectHeader</code>. The <code>showMarkers</code>
 * property must be set to <code>true</code> for this property to take effect.
 * 
 * <b>Note:</b> As this property is deprecated, we recommend that you use the <code>markers</code>
 * aggregation - add <code>sap.m.ObjectMarker</code> with type <code>sap.m.ObjectMarkerType.Favorite</code>.
 * You should use either this property or the <code>markers</code> aggregation, using both may lead to unpredicted behavior.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>markFavorite</code>
 * @since 1.16.0
 * @deprecated Since version 1.42.0.
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getMarkFavorite = function() { return false; };

/**
 * Gets current value of property {@link #getMarkFlagged markFlagged}.
 * 
 * Sets the flagged state for the <code>ObjectHeader</code>. The <code>showMarkers</code> property
 * must be set to <code>true</code> for this property to take effect.
 * 
 * <b>Note:</b> As this property is deprecated, we recommend that you use the <code>markers</code>
 * aggregation - add <code>sap.m.ObjectMarker</code> with type <code>sap.m.ObjectMarkerType.Flagged</code>.
 * You should use either this property or the <code>markers</code> aggregation, using both may lead to unpredicted behavior.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>markFlagged</code>
 * @since 1.16.0
 * @deprecated Since version 1.42.0.
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getMarkFlagged = function() { return false; };

/**
 * Returns a metadata object for class sap.m.ObjectHeader.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ObjectHeader.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getNumber number}.
 * 
 * Determines the displayed number of the <code>ObjectHeader</code> number field.
 * 
 * @returns {string} Value of property <code>number</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getNumber = function() { return ""; };

/**
 * Gets current value of property {@link #getNumberState numberState}.
 * 
 * Determines the value state of the <code>number<code> and <code>numberUnit<code> properties.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>numberState</code>
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getNumberState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getNumberTextDirection numberTextDirection}.
 * 
 * Specifies the number and unit text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>numberTextDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getNumberTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getNumberUnit numberUnit}.
 * 
 * Determines the units qualifier of the <code>ObjectHeader</code> number.
 * 
 * <b>Note:</b> The value of the <code>numberUnit</code> is not displayed if the
 * number property is set to <code>null</code>.
 * 
 * @returns {string} Value of property <code>numberUnit</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getNumberUnit = function() { return ""; };

/**
 * Gets current value of property {@link #getResponsive responsive}.
 * 
 * Determines whether the <code>ObjectHeader<code> is rendered with a different design that
 * reacts responsively to the screen sizes.
 * 
 * <b>Note:</b> Be aware that the design and behavior of the responsive <code>ObjectHeader</code>
 * could change without further notification.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>responsive</code>
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getResponsive = function() { return false; };

/**
 * Gets content of aggregation {@link #getSecondStatus secondStatus}.
 * 
 * Second status shown on the right side of the attributes below the first status.
 * If it is not set the second attribute will expand to take the entire row.
 * 
 * @returns {sap.m.ObjectStatus}
 * 
 * @deprecated Since version 1.16.0.
 * Use the statuses aggregation instead.
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getSecondStatus = function() { return new sap.m.ObjectStatus(); };

/**
 * Gets current value of property {@link #getShowMarkers showMarkers}.
 * 
 * If set to <code>true</code>, the <code>ObjectHeader</code> can be marked with icons such as favorite and flag.
 * 
 * <b>Note:</b> This property is valid only if you are using the already deprecated properties - <code>markFlagged</code> and <code>markFavorite</code>.
 * If you are using the <code>markers</code> aggregation, the visibility of the markers depends on what is set in the aggregation itself.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showMarkers</code>
 * @since 1.16.0
 * @deprecated Since version 1.42.0.
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getShowMarkers = function() { return false; };

/**
 * Gets current value of property {@link #getShowTitleSelector showTitleSelector}.
 * 
 * Determines whether the selector arrow icon/image is displayed and can be pressed.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showTitleSelector</code>
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getShowTitleSelector = function() { return false; };

/**
 * Gets content of aggregation {@link #getStatuses statuses}.
 * 
 * The list of Object sap.ui.core.Control. It will only allow sap.m.ObjectStatus and sap.m.ProgressIndicator controls.
 * 
 * @returns {sap.ui.core.Control[]}
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getStatuses = function() { return new Array(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Determines the title of the <code>ObjectHeader</code>.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getTitleActive titleActive}.
 * 
 * Determines whether the title of the <code>ObjectHeader</code> is clickable
 * and is set only if a title is provided.
 * 
 * @returns {boolean} Value of property <code>titleActive</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getTitleActive = function() { return false; };

/**
 * Gets current value of property {@link #getTitleHref titleHref}.
 * 
 * Defines the title link target URI. Supports standard hyperlink behavior.
 * 
 * <b>Note:</b> If an action should be triggered, this property should not be set, but instead
 * an event handler for the <code>titlePress</code> event should be registered.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>titleHref</code>
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getTitleHref = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getTitleLevel titleLevel}.
 * 
 * Defines the semantic level of the title.
 * 
 * This information is used by assistive technologies, such as screen readers to create a hierarchical site map for faster navigation.
 * Depending on this setting an HTML h1-h6 element is used.
 * 
 * Default value is <code>H1</code>.
 * @returns {sap.ui.core.TitleLevel} Value of property <code>titleLevel</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getTitleLevel = function() { return new sap.ui.core.TitleLevel(); };

/**
 * Gets current value of property {@link #getTitleSelectorTooltip titleSelectorTooltip}.
 * 
 * Determines a custom text for the tooltip of the select title arrow. If not set, a default text of the tooltip will be displayed.
 * 
 * Default value is <code>Options</code>.
 * @returns {string} Value of property <code>titleSelectorTooltip</code>
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getTitleSelectorTooltip = function() { return ""; };

/**
 * Gets current value of property {@link #getTitleTarget titleTarget}.
 * 
 * Determines the <code>target</code> attribute for the title link. Options are <code>_self</code>,
 * <code>_top</code>, <code>_blank</code>, <code>_parent</code>, <code>_search</code>. Alternatively,
 * a frame name can be entered.
 * 
 * @returns {string} Value of property <code>titleTarget</code>
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getTitleTarget = function() { return ""; };

/**
 * Gets current value of property {@link #getTitleTextDirection titleTextDirection}.
 * 
 * Specifies the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>titleTextDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.getTitleTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Checks for the provided <code>sap.m.ObjectNumber</code> in the aggregation {@link #getAdditionalNumbers additionalNumbers}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ObjectNumber}
 *           oAdditionalNumber The additionalNumber whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.indexOfAdditionalNumber = function(oAdditionalNumber) { return 0; };

/**
 * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation {@link #getAttributes attributes}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ObjectAttribute}
 *           oAttribute The attribute whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.indexOfAttribute = function(oAttribute) { return 0; };

/**
 * Checks for the provided <code>sap.m.ObjectMarker</code> in the aggregation {@link #getMarkers markers}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ObjectMarker}
 *           oMarker The marker whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.indexOfMarker = function(oMarker) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getStatuses statuses}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oStatus The status whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.indexOfStatus = function(oStatus) { return 0; };

/**
 * Inserts a additionalNumber into the aggregation {@link #getAdditionalNumbers additionalNumbers}.
 * 
 * @param {sap.m.ObjectNumber}
 *            oAdditionalNumber the additionalNumber to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the additionalNumber should be inserted at; for
 *              a negative value of <code>iIndex</code>, the additionalNumber is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the additionalNumber is inserted at
 *              the last position
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.insertAdditionalNumber = function(oAdditionalNumber,iIndex) { return new sap.m.ObjectHeader(); };

/**
 * Inserts a attribute into the aggregation {@link #getAttributes attributes}.
 * 
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the attribute should be inserted at; for
 *              a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the attribute is inserted at
 *              the last position
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.insertAttribute = function(oAttribute,iIndex) { return new sap.m.ObjectHeader(); };

/**
 * Inserts a marker into the aggregation {@link #getMarkers markers}.
 * 
 * @param {sap.m.ObjectMarker}
 *            oMarker the marker to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the marker should be inserted at; for
 *              a negative value of <code>iIndex</code>, the marker is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the marker is inserted at
 *              the last position
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.insertMarker = function(oMarker,iIndex) { return new sap.m.ObjectHeader(); };

/**
 * Inserts a status into the aggregation {@link #getStatuses statuses}.
 * 
 * @param {sap.ui.core.Control}
 *            oStatus the status to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the status should be inserted at; for
 *              a negative value of <code>iIndex</code>, the status is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the status is inserted at
 *              the last position
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.insertStatus = function(oStatus,iIndex) { return new sap.m.ObjectHeader(); };

/**
 * Removes a additionalNumber from the aggregation {@link #getAdditionalNumbers additionalNumbers}.
 * 
 * @param {int | string | sap.m.ObjectNumber} vAdditionalNumber The additionalNumber to remove or its index or id
 * @returns {sap.m.ObjectNumber} The removed additionalNumber or <code>null</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAdditionalNumber = function(vAdditionalNumber) { return new sap.m.ObjectNumber(); };

/**
 * Removes all the controls from the aggregation {@link #getAdditionalNumbers additionalNumbers}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ObjectNumber[]} An array of the removed elements (might be empty)
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAllAdditionalNumbers = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getAttributes attributes}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ObjectAttribute[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAllAttributes = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getMarkers markers}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ObjectMarker[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAllMarkers = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getStatuses statuses}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAllStatuses = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Removes a attribute from the aggregation {@link #getAttributes attributes}.
 * 
 * @param {int | string | sap.m.ObjectAttribute} vAttribute The attribute to remove or its index or id
 * @returns {sap.m.ObjectAttribute} The removed attribute or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeAttribute = function(vAttribute) { return new sap.m.ObjectAttribute(); };

/**
 * Removes a marker from the aggregation {@link #getMarkers markers}.
 * 
 * @param {int | string | sap.m.ObjectMarker} vMarker The marker to remove or its index or id
 * @returns {sap.m.ObjectMarker} The removed marker or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeMarker = function(vMarker) { return new sap.m.ObjectMarker(); };

/**
 * Removes a status from the aggregation {@link #getStatuses statuses}.
 * 
 * @param {int | string | sap.ui.core.Control} vStatus The status to remove or its index or id
 * @returns {sap.ui.core.Control} The removed status or <code>null</code>
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.removeStatus = function(vStatus) { return new sap.ui.core.Control(); };

/**
 * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Determines the background color of the <code>ObjectHeader</code>.
 * 
 * <b>Note:</b> The different types of <code>ObjectHeader</code> come with different default background:
 * <ul>
 * <li>non responsive - Transparent</li>
 * <li>responsive - Translucent</li>
 * <li>condensed - Solid</li>
 * </ul>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.m.BackgroundDesign} sBackgroundDesign New value for property <code>backgroundDesign</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.ObjectHeader(); };

/**
 * Set the condensed flag
 * @override
 * @public
 * @param {boolean} bCondensed the new value
 * @returns {sap.m.ObjectHeader} this pointer for chaining
 * 
 */
sap.m.ObjectHeader.prototype.setCondensed = function(bCondensed) { return new sap.m.ObjectHeader(); };

/**
 * Sets the aggregated {@link #getFirstStatus firstStatus}.
 * @param {sap.m.ObjectStatus} oFirstStatus The firstStatus to set
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.16.0.
 * Use the statuses aggregation instead.
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setFirstStatus = function(oFirstStatus) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getFullScreenOptimized fullScreenOptimized}.
 * 
 * Optimizes the display of the elements of the <code>ObjectHeader</code>.
 * 
 * Set this property to <code>true</code> if your app uses a fullscreen layout (as opposed
 * to a master-detail or other split-screen layout).
 * 
 * <b>Note</b>: Only applied if the <code>responsive</code> property is also set to <code>true</code>.
 * 
 * If set to <code>true</code>, the following situations apply:
 * <ul>
 * <li>On desktop, 1-3 attributes/statuses - positioned as a third block on the right side of the Title/Number group</li>
 * <li>On desktop, 4+ attributes/statuses - 4 columns below the Title/Number</li>
 * <li>On tablet (portrait mode), always in 2 columns below the Title/Number</li>
 * <li>On tablet (landscape mode), 1-2 attributes/statuses - 2 columns below the Title/Number</li>
 * <li>On tablet (landscape mode), 3+ attributes/statuses - 3 columns below the Title/Number</li>
 * </ul>
 * On phone, the attributes and statuses are always positioned in 1 column below the Title/Number of the <code>ObjectHeader</code>.
 * 
 * If set to <code>false</code>, the attributes and statuses are being positioned below the
 * Title/Number of the <code>ObjectHeader</code> in 2 or 3 columns depending on their number:
 * <ul>
 * <li>On desktop, 1-4 attributes/statuses - 2 columns</li>
 * <li>On desktop, 5+ attributes/statuses - 3 columns</li>
 * <li>On tablet, always in 2 columns</li>
 * </ul>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bFullScreenOptimized New value for property <code>fullScreenOptimized</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setFullScreenOptimized = function(bFullScreenOptimized) { return new sap.m.ObjectHeader(); };

/**
 * Sets the aggregated {@link #getHeaderContainer headerContainer}.
 * @param {sap.m.ObjectHeaderContainer} oHeaderContainer The headerContainer to set
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setHeaderContainer = function(oHeaderContainer) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Defines the icon of the <code>ObjectHeader</code>.
 * 
 * <b>Note:</b> Recursive resolution of binding expressions is not supported by the framework.
 * It works only in ObjectHeader, since it is a composite control and creates an Image control internally.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIcon = function(sIcon) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getIconActive iconActive}.
 * 
 * Determines whether the <code>ObjectHeader</code> icon is clickable.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bIconActive New value for property <code>iconActive</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIconActive = function(bIconActive) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getIconAlt iconAlt}.
 * 
 * Determines the alternative text of the <code>ObjectHeader</code> icon. The text is
 * displayed if the image for the icon is not available, or cannot be displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIconAlt New value for property <code>iconAlt</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIconAlt = function(sIconAlt) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, this is set to <code>true</code> but then one or more requests are sent trying to get
 * the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to <code>false</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware New value for property <code>iconDensityAware</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getIconTooltip iconTooltip}.
 * 
 * Determines the tooltip text of the <code>ObjectHeader</code> icon.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIconTooltip New value for property <code>iconTooltip</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIconTooltip = function(sIconTooltip) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getIntro intro}.
 * 
 * Determines the introductory text for the <code>ObjectHeader</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIntro New value for property <code>intro</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIntro = function(sIntro) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getIntroActive introActive}.
 * 
 * Determines whether the introductory text of the <code>ObjectHeader</code> is clickable.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bIntroActive New value for property <code>introActive</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIntroActive = function(bIntroActive) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getIntroHref introHref}.
 * 
 * Determines the intro link target URI. Supports standard hyperlink behavior. If an action should be triggered,
 * this should not be set, but instead an event handler for the <code>introPress</code> event should be registered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIntroHref New value for property <code>introHref</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIntroHref = function(sIntroHref) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getIntroTarget introTarget}.
 * 
 * Determines the <code>target</code> attribute for the intro link. Options are <code>_self</code>,
 * <code>_top</code>, <code>_blank</code>, <code>_parent</code>, <code>_search</code>. Alternatively,
 * a frame name can be entered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIntroTarget New value for property <code>introTarget</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIntroTarget = function(sIntroTarget) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getIntroTextDirection introTextDirection}.
 * 
 * Specifies the intro text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sIntroTextDirection New value for property <code>introTextDirection</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setIntroTextDirection = function(sIntroTextDirection) { return new sap.m.ObjectHeader(); };

/**
 * Sets the visibility value of the Favorite marker.
 * @override
 * @public
 * @param {boolean} bMarked visibility of the marker
 * @returns {sap.m.ObjectHeader} this pointer for chaining
 * 
 */
sap.m.ObjectHeader.prototype.setMarkFavorite = function(bMarked) { return new sap.m.ObjectHeader(); };

/**
 * Sets the visibility value of the Flagged marker.
 * @override
 * @public
 * @param {boolean} bMarked visibility of the marker
 * @returns {sap.m.ObjectHeader} this pointer for chaining
 * 
 */
sap.m.ObjectHeader.prototype.setMarkFlagged = function(bMarked) { return new sap.m.ObjectHeader(); };

/**
 * Set the number value to the internal aggregation
 * @override
 * @public
 * @param {string} sNumber the new value
 * @returns {sap.m.ObjectHeader} this pointer for chaining
 * 
 */
sap.m.ObjectHeader.prototype.setNumber = function(sNumber) { return new sap.m.ObjectHeader(); };

/**
 * Set the number state to the internal aggregation
 * @override
 * @public
 * @param {sap.ui.core.ValueState} sState the new value
 * @returns {sap.m.ObjectHeader} this pointer for chaining
 * 
 */
sap.m.ObjectHeader.prototype.setNumberState = function(sState) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getNumberTextDirection numberTextDirection}.
 * 
 * Specifies the number and unit text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sNumberTextDirection New value for property <code>numberTextDirection</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setNumberTextDirection = function(sNumberTextDirection) { return new sap.m.ObjectHeader(); };

/**
 * Set the number unit to the internal aggregation
 * @override
 * @public
 * @param {string} sUnit the new value
 * @returns {sap.m.ObjectHeader} this pointer for chaining
 * 
 */
sap.m.ObjectHeader.prototype.setNumberUnit = function(sUnit) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getResponsive responsive}.
 * 
 * Determines whether the <code>ObjectHeader<code> is rendered with a different design that
 * reacts responsively to the screen sizes.
 * 
 * <b>Note:</b> Be aware that the design and behavior of the responsive <code>ObjectHeader</code>
 * could change without further notification.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bResponsive New value for property <code>responsive</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.21.1
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setResponsive = function(bResponsive) { return new sap.m.ObjectHeader(); };

/**
 * Sets the aggregated {@link #getSecondStatus secondStatus}.
 * @param {sap.m.ObjectStatus} oSecondStatus The secondStatus to set
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.16.0.
 * Use the statuses aggregation instead.
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setSecondStatus = function(oSecondStatus) { return new sap.m.ObjectHeader(); };

/**
 * Sets the visibility value of the Flagged and Favorite markers.
 * @override
 * @public
 * @param {boolean} bMarked visibility of all markers
 * @returns {sap.m.ObjectHeader} this pointer for chaining
 * 
 */
sap.m.ObjectHeader.prototype.setShowMarkers = function(bMarked) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getShowTitleSelector showTitleSelector}.
 * 
 * Determines whether the selector arrow icon/image is displayed and can be pressed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowTitleSelector New value for property <code>showTitleSelector</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setShowTitleSelector = function(bShowTitleSelector) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Determines the title of the <code>ObjectHeader</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setTitle = function(sTitle) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getTitleActive titleActive}.
 * 
 * Determines whether the title of the <code>ObjectHeader</code> is clickable
 * and is set only if a title is provided.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bTitleActive New value for property <code>titleActive</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setTitleActive = function(bTitleActive) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getTitleHref titleHref}.
 * 
 * Defines the title link target URI. Supports standard hyperlink behavior.
 * 
 * <b>Note:</b> If an action should be triggered, this property should not be set, but instead
 * an event handler for the <code>titlePress</code> event should be registered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sTitleHref New value for property <code>titleHref</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setTitleHref = function(sTitleHref) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getTitleLevel titleLevel}.
 * 
 * Defines the semantic level of the title.
 * 
 * This information is used by assistive technologies, such as screen readers to create a hierarchical site map for faster navigation.
 * Depending on this setting an HTML h1-h6 element is used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>H1</code>.
 * @param {sap.ui.core.TitleLevel} sTitleLevel New value for property <code>titleLevel</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setTitleLevel = function(sTitleLevel) { return new sap.m.ObjectHeader(); };

/**
 * Sets the new text for the tooltip of the select title arrow to the internal aggregation
 * @override
 * @public
 * @param sTooltip the tooltip of the title selector
 * @returns {sap.m.ObjectHeader} this pointer for chaining
 * 
 */
sap.m.ObjectHeader.prototype.setTitleSelectorTooltip = function(sTooltip) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getTitleTarget titleTarget}.
 * 
 * Determines the <code>target</code> attribute for the title link. Options are <code>_self</code>,
 * <code>_top</code>, <code>_blank</code>, <code>_parent</code>, <code>_search</code>. Alternatively,
 * a frame name can be entered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitleTarget New value for property <code>titleTarget</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setTitleTarget = function(sTitleTarget) { return new sap.m.ObjectHeader(); };

/**
 * Sets a new value for property {@link #getTitleTextDirection titleTextDirection}.
 * 
 * Specifies the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTitleTextDirection New value for property <code>titleTextDirection</code>
 * @returns {sap.m.ObjectHeader} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ObjectHeader.prototype.setTitleTextDirection = function(sTitleTextDirection) { return new sap.m.ObjectHeader(); };


// ---- sap.m.ObjectHeaderContainer --------------------------------------------------------------------------


// ---- sap.m.ObjectIdentifier --------------------------------------------------------------------------

/**
 * Constructor for a new ObjectIdentifier.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getBadgeNotes badgeNotes} : boolean</li>
 * <li>{@link #getBadgePeople badgePeople} : boolean</li>
 * <li>{@link #getBadgeAttachments badgeAttachments} : boolean</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getTitleActive titleActive} : boolean (default: false)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:titlePress titlePress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The ObjectIdentifier is a display control that enables the user to easily identify a specific object. The ObjectIdentifier title is the key identifier of the object and additional text and icons can be used to further distinguish it from other objects.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ObjectIdentifier = function(sId,mSettings) {};
/**
 * Fires when the title is active and the user taps/clicks on it.
 * @event
 * @since 1.26
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.domRef DOM reference of the object identifier's title.
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.titlePress = function(oControlEvent) {  };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.ObjectIdentifier} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.ObjectIdentifier(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:titlePress titlePress} event of this <code>sap.m.ObjectIdentifier</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ObjectIdentifier</code> itself.
 * 
 * Fires when the title is active and the user taps/clicks on it.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectIdentifier</code> itself
 * 
 * @returns {sap.m.ObjectIdentifier} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.26
 * 
 */
sap.m.ObjectIdentifier.prototype.attachTitlePress = function(oData,fnFunction,oListener) { return new sap.m.ObjectIdentifier(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:titlePress titlePress} event of this <code>sap.m.ObjectIdentifier</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ObjectIdentifier} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.detachTitlePress = function(fnFunction,oListener) { return new sap.m.ObjectIdentifier(); };

/**
 * Creates a new subclass of class sap.m.ObjectIdentifier with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectIdentifier.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:titlePress titlePress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {object} [mParameters.domRef] DOM reference of the object identifier's title.
 * 
 * @returns {sap.m.ObjectIdentifier} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.26
 * 
 */
sap.m.ObjectIdentifier.prototype.fireTitlePress = function(mParameters) { return new sap.m.ObjectIdentifier(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getBadgeAttachments badgeAttachments}.
 * 
 * Indicates whether or not the attachments icon is displayed.
 * 
 * @returns {boolean} Value of property <code>badgeAttachments</code>
 * 
 * @deprecated Since version 1.24.0.
 * Will be replaced in the future by a more generic mechanism.
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getBadgeAttachments = function() { return false; };

/**
 * Gets current value of property {@link #getBadgeNotes badgeNotes}.
 * 
 * Indicates whether or not the notes icon is displayed.
 * 
 * @returns {boolean} Value of property <code>badgeNotes</code>
 * 
 * @deprecated Since version 1.24.0.
 * Will be replaced in the future by a more generic mechanism.
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getBadgeNotes = function() { return false; };

/**
 * Gets current value of property {@link #getBadgePeople badgePeople}.
 * 
 * Indicates whether or not the address book icon is displayed.
 * 
 * @returns {boolean} Value of property <code>badgePeople</code>
 * 
 * @deprecated Since version 1.24.0.
 * Will be replaced in the future by a more generic mechanism.
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getBadgePeople = function() { return false; };

/**
 * Returns a metadata object for class sap.m.ObjectIdentifier.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ObjectIdentifier.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Defines the object text.
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Defines the object title.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getTitleActive titleActive}.
 * 
 * Indicates if the ObjectIdentifier's title is clickable.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>titleActive</code>
 * @since 1.26
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getTitleActive = function() { return false; };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Indicates if the ObjectIdentifier is visible. An invisible ObjectIdentifier is not being rendered.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.getVisible = function() { return false; };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getBadgeAttachments badgeAttachments}.
 * 
 * Indicates whether or not the attachments icon is displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bBadgeAttachments New value for property <code>badgeAttachments</code>
 * @returns {sap.m.ObjectIdentifier} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.24.0.
 * Will be replaced in the future by a more generic mechanism.
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.setBadgeAttachments = function(bBadgeAttachments) { return new sap.m.ObjectIdentifier(); };

/**
 * Sets a new value for property {@link #getBadgeNotes badgeNotes}.
 * 
 * Indicates whether or not the notes icon is displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bBadgeNotes New value for property <code>badgeNotes</code>
 * @returns {sap.m.ObjectIdentifier} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.24.0.
 * Will be replaced in the future by a more generic mechanism.
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.setBadgeNotes = function(bBadgeNotes) { return new sap.m.ObjectIdentifier(); };

/**
 * Sets a new value for property {@link #getBadgePeople badgePeople}.
 * 
 * Indicates whether or not the address book icon is displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bBadgePeople New value for property <code>badgePeople</code>
 * @returns {sap.m.ObjectIdentifier} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.24.0.
 * Will be replaced in the future by a more generic mechanism.
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.setBadgePeople = function(bBadgePeople) { return new sap.m.ObjectIdentifier(); };

/**
 * Sets text.
 * Default value is empty/undefined.
 * @public
 * @param {string} sText New value for property text
 * @returns {sap.m.ObjectIdentifier} this to allow method chaining
 * 
 */
sap.m.ObjectIdentifier.prototype.setText = function(sText) { return new sap.m.ObjectIdentifier(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.ObjectIdentifier} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.setTextDirection = function(sTextDirection) { return new sap.m.ObjectIdentifier(); };

/**
 * Sets the title.
 * Default value is empty/undefined.
 * @public
 * @param {string} sTitle New value for property title
 * @returns {sap.m.ObjectIdentifier} this to allow method chaining
 * 
 */
sap.m.ObjectIdentifier.prototype.setTitle = function(sTitle) { return new sap.m.ObjectIdentifier(); };

/**
 * Sets property titleActive.
 * Default value is false.
 * @public
 * @param {boolean} bValue new value for property titleActive
 * @returns {sap.m.ObjectIdentifier} this to allow method chaining
 * 
 */
sap.m.ObjectIdentifier.prototype.setTitleActive = function(bValue) { return new sap.m.ObjectIdentifier(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Indicates if the ObjectIdentifier is visible. An invisible ObjectIdentifier is not being rendered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.ObjectIdentifier} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectIdentifier.prototype.setVisible = function(bVisible) { return new sap.m.ObjectIdentifier(); };


// ---- sap.m.ObjectListItem --------------------------------------------------------------------------

/**
 * Constructor for a new ObjectListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getIntro intro} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getMarkFavorite markFavorite} : boolean</li>
 * <li>{@link #getMarkFlagged markFlagged} : boolean</li>
 * <li>{@link #getShowMarkers showMarkers} : boolean</li>
 * <li>{@link #getNumberState numberState} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getTitleTextDirection titleTextDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getIntroTextDirection introTextDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getNumberTextDirection numberTextDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getMarkLocked markLocked} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} : sap.m.ObjectAttribute[] (default)</li>
 * <li>{@link #getFirstStatus firstStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getSecondStatus secondStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getMarkers markers} : sap.m.ObjectMarker[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * ObjectListItem is a display control that provides summary information about an object as a list item. The ObjectListItem title is the key identifier of the object. Additional text and icons can be used to further distinguish it from other objects. Attributes and statuses can be used to provide additional meaning about the object to the user.
 * @extends sap.m.ListItemBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ObjectListItem = function(sId,mSettings) {};
/**
 * Adds some attribute to the aggregation {@link #getAttributes attributes}.
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.addAttribute = function(oAttribute) { return new sap.m.ObjectListItem(); };

/**
 * Adds some marker to the aggregation {@link #getMarkers markers}.
 * @param {sap.m.ObjectMarker}
 *            oMarker the marker to add; if empty, nothing is inserted
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.addMarker = function(oMarker) { return new sap.m.ObjectListItem(); };

/**
 * Destroys all the attributes in the aggregation {@link #getAttributes attributes}.
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.destroyAttributes = function() { return new sap.m.ObjectListItem(); };

/**
 * Destroys the firstStatus in the aggregation {@link #getFirstStatus firstStatus}.
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.destroyFirstStatus = function() { return new sap.m.ObjectListItem(); };

/**
 * Destroys all the markers in the aggregation {@link #getMarkers markers}.
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.destroyMarkers = function() { return new sap.m.ObjectListItem(); };

/**
 * Destroys the secondStatus in the aggregation {@link #getSecondStatus secondStatus}.
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.destroySecondStatus = function() { return new sap.m.ObjectListItem(); };

/**
 * Creates a new subclass of class sap.m.ObjectListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getActiveIcon activeIcon}.
 * 
 * Icon displayed when the ObjectListItem is active.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>activeIcon</code>
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets content of aggregation {@link #getAttributes attributes}.
 * 
 * List of attributes displayed below the title to the left of the status fields.
 * 
 * @returns {sap.m.ObjectAttribute[]}
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getAttributes = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getFirstStatus firstStatus}.
 * 
 * First status text field displayed on the right side of the attributes.
 * 
 * @returns {sap.m.ObjectStatus}
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getFirstStatus = function() { return new sap.m.ObjectStatus(); };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * ObjectListItem icon displayed to the left of the title.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image (in case this version of image doesn't exist on the server).
 * 
 * If bandwidth is key for the application, set this value to false.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconDensityAware</code>
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getIconDensityAware = function() { return false; };

/**
 * Gets current value of property {@link #getIntro intro}.
 * 
 * Defines the introductory text for the ObjectListItem.
 * 
 * @returns {string} Value of property <code>intro</code>
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getIntro = function() { return ""; };

/**
 * Gets current value of property {@link #getIntroTextDirection introTextDirection}.
 * 
 * Determines the text direction of the item intro.
 * Available options for the intro direction are LTR (left-to-right) and RTL (right-to-left).
 * By default the item intro inherits the text direction from its parent.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>introTextDirection</code>
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getIntroTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets content of aggregation {@link #getMarkers markers}.
 * 
 * List of markers (icon and/or text) that can be displayed for the <code>ObjectListItems</code>, such as favorite and flagged.<br><br>
 * <b>Note:</b> You should use either this aggregation or the already deprecated properties - <code>markFlagged</code>, <code>markFavorite</code>, and <code>markLocked</code>. Using both can lead to unexpected results.
 * 
 * @returns {sap.m.ObjectMarker[]}
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getMarkers = function() { return new Array(); };

/**
 * Gets current value of property {@link #getMarkFavorite markFavorite}.
 * 
 * Sets the favorite state for the ObjectListItem.<br><br>
 * <b>Note:</b> As this property is deprecated, we recommend you use the <code>markers</code> aggregation - add <code>sap.m.ObjectMarker</code> with type <code>sap.m.ObjectMarkerType.Favorite</code>.
 * You should use either this property or the <code>markers</code> aggregation, using both may lead to unpredicted behavior.<br><br>
 * 
 * @returns {boolean} Value of property <code>markFavorite</code>
 * @since 1.16.0
 * @deprecated Since version 1.42.0.
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getMarkFavorite = function() { return false; };

/**
 * Gets current value of property {@link #getMarkFlagged markFlagged}.
 * 
 * Sets the flagged state for the ObjectListItem.<br><br>
 * <b>Note:</b> As this property is deprecated, we recommend you use the <code>markers</code> aggregation - add <code>sap.m.ObjectMarker</code> with type <code>sap.m.ObjectMarkerType.Flagged</code>.
 * You should use either this property or the <code>markers</code> aggregation, using both may lead to unpredicted behavior.<br><br>
 * 
 * @returns {boolean} Value of property <code>markFlagged</code>
 * @since 1.16.0
 * @deprecated Since version 1.42.0.
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getMarkFlagged = function() { return false; };

/**
 * Gets current value of property {@link #getMarkLocked markLocked}.
 * 
 * Sets the locked state of the ObjectListItem.<br><br>
 * <b>Note:</b> As this property is deprecated, we recommend you use the <code>markers</code> aggregation - add <code>sap.m.ObjectMarker</code> with type <code>sap.m.ObjectMarkerType.Locked</code>.
 * You should use either this property or the <code>markers</code> aggregation, using both may lead to unpredicted behavior.<br><br>
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>markLocked</code>
 * @since 1.28
 * @deprecated Since version 1.42.0.
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getMarkLocked = function() { return false; };

/**
 * Returns a metadata object for class sap.m.ObjectListItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ObjectListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getNumber number}.
 * 
 * Defines the ObjectListItem number.
 * 
 * @returns {string} Value of property <code>number</code>
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getNumber = function() { return ""; };

/**
 * Gets current value of property {@link #getNumberState numberState}.
 * 
 * Defines the ObjectListItem number and numberUnit value state.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>numberState</code>
 * @since 1.16.0
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getNumberState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getNumberTextDirection numberTextDirection}.
 * 
 * Determines the text direction of the item number.
 * Available options for the number direction are LTR (left-to-right) and RTL (right-to-left).
 * By default the item number inherits the text direction from its parent.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>numberTextDirection</code>
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getNumberTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getNumberUnit numberUnit}.
 * 
 * Defines the number units qualifier of the ObjectListItem.
 * 
 * @returns {string} Value of property <code>numberUnit</code>
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getNumberUnit = function() { return ""; };

/**
 * Gets content of aggregation {@link #getSecondStatus secondStatus}.
 * 
 * Second status text field displayed on the right side of the attributes.
 * 
 * @returns {sap.m.ObjectStatus}
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getSecondStatus = function() { return new sap.m.ObjectStatus(); };

/**
 * Gets current value of property {@link #getShowMarkers showMarkers}.
 * 
 * If set to true, the ObjectListItem can be marked with icons such as favorite and flag.<br><br>
 * <b>Note:</b> This property is valid only if you are using the already deprecated properties - <code>markFlagged</code>, <code>markFavorite</code>, and <code>markLocked</code>.
 * If you are using the <code>markers</code> aggregation, the visibility of the markers depends on what is set in the aggregation itself.<br><br>
 * 
 * @returns {boolean} Value of property <code>showMarkers</code>
 * @since 1.16.0
 * @deprecated Since version 1.42.0.
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getShowMarkers = function() { return false; };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Defines the ObjectListItem title.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getTitleTextDirection titleTextDirection}.
 * 
 * Determines the text direction of the item title.
 * Available options for the title direction are LTR (left-to-right) and RTL (right-to-left).
 * By default the item title inherits the text direction from its parent.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>titleTextDirection</code>
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.getTitleTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation {@link #getAttributes attributes}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ObjectAttribute}
 *           oAttribute The attribute whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.indexOfAttribute = function(oAttribute) { return 0; };

/**
 * Checks for the provided <code>sap.m.ObjectMarker</code> in the aggregation {@link #getMarkers markers}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ObjectMarker}
 *           oMarker The marker whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.indexOfMarker = function(oMarker) { return 0; };

/**
 * Inserts a attribute into the aggregation {@link #getAttributes attributes}.
 * 
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the attribute should be inserted at; for
 *              a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the attribute is inserted at
 *              the last position
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.insertAttribute = function(oAttribute,iIndex) { return new sap.m.ObjectListItem(); };

/**
 * Inserts a marker into the aggregation {@link #getMarkers markers}.
 * 
 * @param {sap.m.ObjectMarker}
 *            oMarker the marker to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the marker should be inserted at; for
 *              a negative value of <code>iIndex</code>, the marker is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the marker is inserted at
 *              the last position
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.insertMarker = function(oMarker,iIndex) { return new sap.m.ObjectListItem(); };

/**
 * Removes all the controls from the aggregation {@link #getAttributes attributes}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ObjectAttribute[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.removeAllAttributes = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getMarkers markers}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ObjectMarker[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.removeAllMarkers = function() { return new Array(); };

/**
 * Removes a attribute from the aggregation {@link #getAttributes attributes}.
 * 
 * @param {int | string | sap.m.ObjectAttribute} vAttribute The attribute to remove or its index or id
 * @returns {sap.m.ObjectAttribute} The removed attribute or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.removeAttribute = function(vAttribute) { return new sap.m.ObjectAttribute(); };

/**
 * Removes a marker from the aggregation {@link #getMarkers markers}.
 * 
 * @param {int | string | sap.m.ObjectMarker} vMarker The marker to remove or its index or id
 * @returns {sap.m.ObjectMarker} The removed marker or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.removeMarker = function(vMarker) { return new sap.m.ObjectMarker(); };

/**
 * Sets a new value for property {@link #getActiveIcon activeIcon}.
 * 
 * Icon displayed when the ObjectListItem is active.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sActiveIcon New value for property <code>activeIcon</code>
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.ObjectListItem(); };

/**
 * Sets the aggregated {@link #getFirstStatus firstStatus}.
 * @param {sap.m.ObjectStatus} oFirstStatus The firstStatus to set
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setFirstStatus = function(oFirstStatus) { return new sap.m.ObjectListItem(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * ObjectListItem icon displayed to the left of the title.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setIcon = function(sIcon) { return new sap.m.ObjectListItem(); };

/**
 * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image (in case this version of image doesn't exist on the server).
 * 
 * If bandwidth is key for the application, set this value to false.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware New value for property <code>iconDensityAware</code>
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.ObjectListItem(); };

/**
 * Sets a new value for property {@link #getIntro intro}.
 * 
 * Defines the introductory text for the ObjectListItem.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIntro New value for property <code>intro</code>
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setIntro = function(sIntro) { return new sap.m.ObjectListItem(); };

/**
 * Sets a new value for property {@link #getIntroTextDirection introTextDirection}.
 * 
 * Determines the text direction of the item intro.
 * Available options for the intro direction are LTR (left-to-right) and RTL (right-to-left).
 * By default the item intro inherits the text direction from its parent.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sIntroTextDirection New value for property <code>introTextDirection</code>
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setIntroTextDirection = function(sIntroTextDirection) { return new sap.m.ObjectListItem(); };

/**
 * Sets the visibility value of the Favorite marker.
 * @override
 * @public
 * @param {boolean} bMarked the new value
 * @returns {sap.m.ObjectListItem} this pointer for chaining
 * 
 */
sap.m.ObjectListItem.prototype.setMarkFavorite = function(bMarked) { return new sap.m.ObjectListItem(); };

/**
 * Sets the visibility value of the Flagged marker.
 * @override
 * @public
 * @param {boolean} bMarked the new value
 * @returns {sap.m.ObjectListItem} this pointer for chaining
 * 
 */
sap.m.ObjectListItem.prototype.setMarkFlagged = function(bMarked) { return new sap.m.ObjectListItem(); };

/**
 * Sets the visibility value of the Favorite marker.
 * @override
 * @public
 * @param {boolean} bMarked the new value
 * @returns {sap.m.ObjectListItem} this pointer for chaining
 * 
 */
sap.m.ObjectListItem.prototype.setMarkLocked = function(bMarked) { return new sap.m.ObjectListItem(); };

/**
 * Sets the aggregated {@link #getSecondStatus secondStatus}.
 * @param {sap.m.ObjectStatus} oSecondStatus The secondStatus to set
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setSecondStatus = function(oSecondStatus) { return new sap.m.ObjectListItem(); };

/**
 * Sets the visibility value of the Flagged and Favorite markers.
 * @override
 * @public
 * @param {boolean} bMarked the new value
 * @returns {sap.m.ObjectListItem} this pointer for chaining
 * 
 */
sap.m.ObjectListItem.prototype.setShowMarkers = function(bMarked) { return new sap.m.ObjectListItem(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Defines the ObjectListItem title.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setTitle = function(sTitle) { return new sap.m.ObjectListItem(); };

/**
 * Sets a new value for property {@link #getTitleTextDirection titleTextDirection}.
 * 
 * Determines the text direction of the item title.
 * Available options for the title direction are LTR (left-to-right) and RTL (right-to-left).
 * By default the item title inherits the text direction from its parent.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTitleTextDirection New value for property <code>titleTextDirection</code>
 * @returns {sap.m.ObjectListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectListItem.prototype.setTitleTextDirection = function(sTitleTextDirection) { return new sap.m.ObjectListItem(); };


// ---- sap.m.ObjectMarker --------------------------------------------------------------------------

/**
 * Constructor for a new ObjectMarker.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.ObjectMarkerType</li>
 * <li>{@link #getVisibility visibility} : sap.m.ObjectMarkerVisibility</li>
 * <li>{@link #getAdditionalInfo additionalInfo} : string (default: )</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>sap.m.ObjectMarker</code> control represents one of the following predefined types:
 * <ul>
 * <li><code>Flagged</code>
 * <li><code>Favorite</code>
 * <li><code>Draft</code>
 * <li><code>Locked</code>
 * <li><code>LockedBy</code>
 * <li><code>Unsaved</code>
 * <li><code>UnsavedBy</code>
 * </ul>
 * <b>Note</b>: Use the <code>LockedBy/UnsavedBy</code> type along with the <code>additionalInfo</code> property to display the name of the user who locked/changed the object.
 * If <code>additionalInfo</code> property is not set when using <code>LockedBy/UnsavedBy</code> types, the string "Locked by another user"/"Unsaved changes by another user" will be displayed.
 * If you don't want to display name of the user, simply use the <code>Locked/Unsaved</code> types.
 * 
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.38
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ObjectMarker = function(sId,mSettings) {};
/**
 * Event is fired when the <code>ObjectMarker</code> is interactive and the user taps/clicks on it.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ObjectMarker.prototype.press = function(oControlEvent) {  };

/**
 * Creates a new subclass of class sap.m.ObjectMarker with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectMarker.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ObjectMarker} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ObjectMarker.prototype.firePress = function(mParameters) { return new sap.m.ObjectMarker(); };

/**
 * Gets current value of property {@link #getAdditionalInfo additionalInfo}.
 * 
 * Sets additional information to the displayed <code>type</code>.
 * 
 * <b>Note:</b> If no type is set, the additional information will not be displayed.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>additionalInfo</code>
 * 
 * @public
 * 
 */
sap.m.ObjectMarker.prototype.getAdditionalInfo = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.ObjectMarker.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ObjectMarker.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * Sets one of the predefined types.
 * 
 * <b>Note</b>: If the <code>visibility</code> property is not specified explicitly, every <code>type</code> comes with predefined one as follows:
 * <ul>
 *                 <li>For <code>Flagged</code> and <code>Favorite</code> the icon is visible and the text is not displayed</li>
 *                 <li>For <code>Draft</code> the text is visible and the icon is not displayed</li>
 *                 <li>For <code>Locked</code>, <code>LockedBy</code>, <code>Unsaved</code> and <code>UnsavedBy</code> - on screens larger than 600px both icon and text are visible, otherwise only the icon</li>
 * 
 * </ul>
 * 
 * @returns {sap.m.ObjectMarkerType} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.ObjectMarker.prototype.getType = function() { return new sap.m.ObjectMarkerType(); };

/**
 * Gets current value of property {@link #getVisibility visibility}.
 * 
 * Sets one of the visibility states.
 * Visibility states are as follows:
 * <ul>
 *                 <li><code>IconOnly</code> - displays only icon, regardless of the screen size</li>
 *                 <li><code>TextOnly</code> - displays only text, regardless of the screen size</li>
 *                 <li><code>IconAndText</code> - displays both icon and text, regardless of the screen size</li>
 * </ul>
 * 
 * @returns {sap.m.ObjectMarkerVisibility} Value of property <code>visibility</code>
 * 
 * @public
 * 
 */
sap.m.ObjectMarker.prototype.getVisibility = function() { return new sap.m.ObjectMarkerVisibility(); };

/**
 * Sets a new value for property {@link #getAdditionalInfo additionalInfo}.
 * 
 * Sets additional information to the displayed <code>type</code>.
 * 
 * <b>Note:</b> If no type is set, the additional information will not be displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sAdditionalInfo New value for property <code>additionalInfo</code>
 * @returns {sap.m.ObjectMarker} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectMarker.prototype.setAdditionalInfo = function(sAdditionalInfo) { return new sap.m.ObjectMarker(); };

/**
 * Sets a new value for property {@link #getType type}.
 * 
 * Sets one of the predefined types.
 * 
 * <b>Note</b>: If the <code>visibility</code> property is not specified explicitly, every <code>type</code> comes with predefined one as follows:
 * <ul>
 *                 <li>For <code>Flagged</code> and <code>Favorite</code> the icon is visible and the text is not displayed</li>
 *                 <li>For <code>Draft</code> the text is visible and the icon is not displayed</li>
 *                 <li>For <code>Locked</code>, <code>LockedBy</code>, <code>Unsaved</code> and <code>UnsavedBy</code> - on screens larger than 600px both icon and text are visible, otherwise only the icon</li>
 * 
 * </ul>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.m.ObjectMarkerType} sType New value for property <code>type</code>
 * @returns {sap.m.ObjectMarker} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectMarker.prototype.setType = function(sType) { return new sap.m.ObjectMarker(); };

/**
 * Sets a new value for property {@link #getVisibility visibility}.
 * 
 * Sets one of the visibility states.
 * Visibility states are as follows:
 * <ul>
 *                 <li><code>IconOnly</code> - displays only icon, regardless of the screen size</li>
 *                 <li><code>TextOnly</code> - displays only text, regardless of the screen size</li>
 *                 <li><code>IconAndText</code> - displays both icon and text, regardless of the screen size</li>
 * </ul>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.m.ObjectMarkerVisibility} sVisibility New value for property <code>visibility</code>
 * @returns {sap.m.ObjectMarker} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectMarker.prototype.setVisibility = function(sVisibility) { return new sap.m.ObjectMarker(); };


// ---- sap.m.ObjectMarkerType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ObjectMarkerType.toString = function() { return ""; };

// ---- sap.m.ObjectMarkerVisibility --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ObjectMarkerVisibility.toString = function() { return ""; };

// ---- sap.m.ObjectNumber --------------------------------------------------------------------------

/**
 * Constructor for a new ObjectNumber.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getEmphasized emphasized} : boolean (default: true)</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getUnit unit} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: Begin)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The ObjectNumber control displays number and number unit properties for an object. The number can be displayed using semantic
 * colors to provide additional meaning about the object to the user.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ObjectNumber = function(sId,mSettings) {};
/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.ObjectNumber} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.ObjectNumber(); };

/**
 * Creates a new subclass of class sap.m.ObjectNumber with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectNumber.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEmphasized emphasized}.
 * 
 * Indicates if the object number should appear emphasized.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>emphasized</code>
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getEmphasized = function() { return false; };

/**
 * Returns a metadata object for class sap.m.ObjectNumber.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ObjectNumber.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getNumber number}.
 * 
 * Defines the number field.
 * 
 * @returns {string} Value of property <code>number</code>
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getNumber = function() { return ""; };

/**
 * Gets current value of property {@link #getNumberUnit numberUnit}.
 * 
 * Defines the number units qualifier.
 * 
 * @returns {string} Value of property <code>numberUnit</code>
 * 
 * @deprecated Since version 1.16.1.
 * 
 * Replaced by unit property due to the number before unit is redundant.
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getNumberUnit = function() { return ""; };

/**
 * Gets current value of property {@link #getState state}.
 * 
 * Determines the object number's value state. Setting this state will cause the number to be rendered in state-specific colors (only blue-crystal theme).
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>state</code>
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getTextAlign textAlign}.
 * 
 * Sets the horizontal alignment of the number and unit.
 * 
 * Default value is <code>Begin</code>.
 * @returns {sap.ui.core.TextAlign} Value of property <code>textAlign</code>
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Available options for the number and unit text direction are LTR(left-to-right) and RTL(right-to-left). By default, the control inherits the text direction from its parent control.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getUnit unit}.
 * 
 * Defines the number units qualifier. If numberUnit and unit are both set, the unit value is used.
 * 
 * @returns {string} Value of property <code>unit</code>
 * @since 1.16.1
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.getUnit = function() { return ""; };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getEmphasized emphasized}.
 * 
 * Indicates if the object number should appear emphasized.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEmphasized New value for property <code>emphasized</code>
 * @returns {sap.m.ObjectNumber} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.setEmphasized = function(bEmphasized) { return new sap.m.ObjectNumber(); };

/**
 * Sets a new value for property {@link #getNumber number}.
 * 
 * Defines the number field.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sNumber New value for property <code>number</code>
 * @returns {sap.m.ObjectNumber} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.setNumber = function(sNumber) { return new sap.m.ObjectNumber(); };

/**
 * Sets a new value for property {@link #getNumberUnit numberUnit}.
 * 
 * Defines the number units qualifier.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sNumberUnit New value for property <code>numberUnit</code>
 * @returns {sap.m.ObjectNumber} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.16.1.
 * 
 * Replaced by unit property due to the number before unit is redundant.
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.setNumberUnit = function(sNumberUnit) { return new sap.m.ObjectNumber(); };

/**
 * Sets the ObjectNumber's value state.
 * 
 * @override
 * @public
 * @param {sap.ui.core.ValueState} sState The state to be set to
 * @returns {sap.m.ObjectNumber} this pointer for chaining
 * 
 */
sap.m.ObjectNumber.prototype.setState = function(sState) { return new sap.m.ObjectNumber(); };

/**
 * Sets the text alignment of the control without re-rendering the whole ObjectNumber.
 * 
 * @override
 * @public
 * @param {sap.ui.core.TextAlign} sAlign The new value
 * @returns {sap.m.ObjectNumber} <code>this</code> pointer for chaining
 * 
 */
sap.m.ObjectNumber.prototype.setTextAlign = function(sAlign) { return new sap.m.ObjectNumber(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Available options for the number and unit text direction are LTR(left-to-right) and RTL(right-to-left). By default, the control inherits the text direction from its parent control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.ObjectNumber} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.setTextDirection = function(sTextDirection) { return new sap.m.ObjectNumber(); };

/**
 * Sets a new value for property {@link #getUnit unit}.
 * 
 * Defines the number units qualifier. If numberUnit and unit are both set, the unit value is used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sUnit New value for property <code>unit</code>
 * @returns {sap.m.ObjectNumber} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.1
 * 
 * @public
 * 
 */
sap.m.ObjectNumber.prototype.setUnit = function(sUnit) { return new sap.m.ObjectNumber(); };


// ---- sap.m.ObjectStatus --------------------------------------------------------------------------

/**
 * Constructor for a new ObjectStatus.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Status information that can be either text with a value state, or an icon.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ObjectStatus = function(sId,mSettings) {};
/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.ObjectStatus} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.ObjectStatus(); };

/**
 * Creates a new subclass of class sap.m.ObjectStatus with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ObjectStatus.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.ObjectStatus.prototype.getAccessibilityInfo = function() {  };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Icon URI. This may be either an icon font or image path.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is key for the application, set this value to false.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconDensityAware</code>
 * 
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getIconDensityAware = function() { return false; };

/**
 * Returns a metadata object for class sap.m.ObjectStatus.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ObjectStatus.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getState state}.
 * 
 * Defines the text value state.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>state</code>
 * 
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Defines the ObjectStatus text.
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Determines the direction of the text, not including the title.
 * Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * 
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Defines the ObjectStatus title.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.getTitle = function() { return ""; };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Icon URI. This may be either an icon font or image path.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.ObjectStatus} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.setIcon = function(sIcon) { return new sap.m.ObjectStatus(); };

/**
 * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is key for the application, set this value to false.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware New value for property <code>iconDensityAware</code>
 * @returns {sap.m.ObjectStatus} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.ObjectStatus(); };

/**
 * Sets a new value for property {@link #getState state}.
 * 
 * Defines the text value state.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.core.ValueState} sState New value for property <code>state</code>
 * @returns {sap.m.ObjectStatus} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.setState = function(sState) { return new sap.m.ObjectStatus(); };

/**
 * Sets the text.
 * The default value is empty/undefined.
 * @public
 * @param {string} sText New value for property text
 * @returns {sap.m.ObjectStatus} this to allow method chaining
 * 
 */
sap.m.ObjectStatus.prototype.setText = function(sText) { return new sap.m.ObjectStatus(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Determines the direction of the text, not including the title.
 * Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.ObjectStatus} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ObjectStatus.prototype.setTextDirection = function(sTextDirection) { return new sap.m.ObjectStatus(); };

/**
 * Sets the title.
 * The default value is empty/undefined.
 * @public
 * @param {string} sTitle New value for property title
 * @returns {sap.m.ObjectStatus} this to allow method chaining
 * 
 */
sap.m.ObjectStatus.prototype.setTitle = function(sTitle) { return new sap.m.ObjectStatus(); };


// ---- sap.m.OverflowToolbar --------------------------------------------------------------------------

/**
 * Constructor for a new <code>OverflowToolbar</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Toolbar#constructor sap.m.Toolbar}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A container control based on {@link sap.m.Toolbar}, that provides overflow when
 * its content does not fit in the visible area.
 * 
 * <h3>Overview</h3>
 * 
 * The content of the <code>OverflowToolbar</code> moves into the overflow area from
 * right to left when the the available space is not enough in the visible area of
 * the container. It can be accessed by the user through the overflow button that
 * opens it in a popover.
 * 
 * <b>Note:</b> It is recommended that you use <code>OverflowToolbar</code> over
 * {@link sap.m.Toolbar}, unless you want to avoid overflow in favor of shrinking.
 * 
 * <h3>Usage</h3>
 * 
 * Different behavior and priorities can be set for each control inside the
 * <code>OverflowToolbar</code>, such as certain actions to appear only in the
 * overflow area or to never move there. For more information, see
 * {@link sap.m.OverflowToolbarLayoutData} and {@link sap.m.OverflowToolbarPriority}.
 * 
 * Only the following controls can be moved in the overflow area:
 * 
 * <ul><li>{@link sap.m.Button}</li>
 * <li>{@link sap.m.CheckBox}</li>
 * <li>{@link sap.m.ComboBox}</li>
 * <li>{@link sap.m.DatePicker}</li>
 * <li>{@link sap.m.DateTimeInput}</li>
 * <li>{@link sap.m.DateTimePicker}</li>
 * <li>{@link sap.m.Input}</li>
 * <li>{@link sap.m.OverflowToolbarButton}</li>
 * <li>{@link sap.m.SearchField}</li>
 * <li>{@link sap.m.SegmentedButton}</li>
 * <li>{@link sap.m.Select}</li>
 * <li>{@link sap.m.TimePicker}</li>
 * <li>{@link sap.m.ToggleButton}</li>
 * <li>{@link sap.ui.comp.smartfield.SmartField}</li>
 * <li>{@link sap.ui.comp.smartfield.SmartLabel}</li></ul>
 * 
 * <h3>Responsive behavior</h3>
 * 
 * The height of the toolbar changes on desktop, tablet, and smartphones.
 * 
 * @extends sap.m.Toolbar
 * @implements sap.ui.core.Toolbar,sap.m.IBar
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.28
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 * 
 */
sap.m.OverflowToolbar = function(sId,mSettings) {};
/**
 * Returns all the controls from the <code>sap.m.OverflowToolbar</code>,
 * that are not in the overflow area and their <code>visible</code> property is <code>true</code>.
 * @private
 * @sap-restricted
 * @returns {*|Array.<T>}
 * 
 */
sap.m.OverflowToolbar.prototype._getVisibleAndNonOverflowContent = function() { return null; };

/**
 * Closes the overflow area.
 * Useful to manually close the overflow after having suppressed automatic closing with "closeOverflowOnInteraction=false".
 * 
 * @public
 * @since 1.40
 * 
 */
sap.m.OverflowToolbar.prototype.closeOverflow = function() {  };

/**
 * Creates a new subclass of class sap.m.OverflowToolbar with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Toolbar.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.OverflowToolbar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.OverflowToolbar.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.OverflowToolbar.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.OverflowToolbarButton --------------------------------------------------------------------------

/**
 * Constructor for a new <code>OverflowToolbarButton</code>.
 * 
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Represents an {@link sap.m.Button} that shows its text only when in the overflow area of an {@link sap.m.OverflowToolbar}.
 * 
 * <b>Note:</b> This control is intended to be used exclusively in the context of the <code>OverflowToolbar</code>, whenever it is required
 * to have buttons that show only an icon in the toolbar, but icon and text in the overflow menu.
 * @extends sap.m.Button
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.28
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.OverflowToolbarButton = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.OverflowToolbarButton with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Button.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.OverflowToolbarButton.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.OverflowToolbarButton.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.OverflowToolbarButton.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.OverflowToolbarLayoutData --------------------------------------------------------------------------

/**
 * Constructor for a new <code>OverflowToolbarLayoutData</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMoveToOverflow moveToOverflow} : boolean (default: true)</li>
 * <li>{@link #getStayInOverflow stayInOverflow} : boolean (default: false)</li>
 * <li>{@link #getPriority priority} : sap.m.OverflowToolbarPriority (default: High)</li>
 * <li>{@link #getGroup group} : int (default: 0)</li>
 * <li>{@link #getCloseOverflowOnInteraction closeOverflowOnInteraction} : boolean (default: true)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ToolbarLayoutData#constructor sap.m.ToolbarLayoutData}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new element, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Holds layout data for the {@link sap.m.OverflowToolbar} items.
 * @extends sap.m.ToolbarLayoutData
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.28
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.OverflowToolbarLayoutData = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.OverflowToolbarLayoutData with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ToolbarLayoutData.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.OverflowToolbarLayoutData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getCloseOverflowOnInteraction closeOverflowOnInteraction}.
 * 
 * Defines whether the overflow area is automatically closed when interacting with a control in it
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>closeOverflowOnInteraction</code>
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.OverflowToolbarLayoutData.prototype.getCloseOverflowOnInteraction = function() { return false; };

/**
 * Gets current value of property {@link #getGroup group}.
 * 
 * Defines OverflowToolbar items group number.
 * Default value is 0, which means that the control does not belong to any group.
 * Elements that belong to a group overflow together. The overall priority of the group is defined by the element with highest priority.
 * Elements that belong to a group are not allowed to have AlwaysOverflow or NeverOverflow priority.
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>group</code>
 * @since 1.32
 * 
 * @public
 * 
 */
sap.m.OverflowToolbarLayoutData.prototype.getGroup = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.OverflowToolbarLayoutData.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.OverflowToolbarLayoutData.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMoveToOverflow moveToOverflow}.
 * 
 * The OverflowToolbar item can or cannot move to the overflow area
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>moveToOverflow</code>
 * 
 * @deprecated Since version 1.32
 * 
 * @public
 * 
 */
sap.m.OverflowToolbarLayoutData.prototype.getMoveToOverflow = function() { return false; };

/**
 * Gets current value of property {@link #getPriority priority}.
 * 
 * Defines OverflowToolbar items priority, Available priorities ate NeverOverflow, High, Low, Disappear and AlwaysOverflow
 * 
 * Default value is <code>High</code>.
 * @returns {sap.m.OverflowToolbarPriority} Value of property <code>priority</code>
 * @since 1.32
 * 
 * @public
 * 
 */
sap.m.OverflowToolbarLayoutData.prototype.getPriority = function() { return new sap.m.OverflowToolbarPriority(); };

/**
 * Gets current value of property {@link #getStayInOverflow stayInOverflow}.
 * 
 * The OverflowToolbar item can or cannot stay in the overflow area
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>stayInOverflow</code>
 * 
 * @deprecated Since version 1.32
 * 
 * @public
 * 
 */
sap.m.OverflowToolbarLayoutData.prototype.getStayInOverflow = function() { return false; };

/**
 * Sets a new value for property {@link #getCloseOverflowOnInteraction closeOverflowOnInteraction}.
 * 
 * Defines whether the overflow area is automatically closed when interacting with a control in it
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bCloseOverflowOnInteraction New value for property <code>closeOverflowOnInteraction</code>
 * @returns {sap.m.OverflowToolbarLayoutData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.OverflowToolbarLayoutData.prototype.setCloseOverflowOnInteraction = function(bCloseOverflowOnInteraction) { return new sap.m.OverflowToolbarLayoutData(); };

/**
 * Sets a new value for property {@link #getGroup group}.
 * 
 * Defines OverflowToolbar items group number.
 * Default value is 0, which means that the control does not belong to any group.
 * Elements that belong to a group overflow together. The overall priority of the group is defined by the element with highest priority.
 * Elements that belong to a group are not allowed to have AlwaysOverflow or NeverOverflow priority.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {int} iGroup New value for property <code>group</code>
 * @returns {sap.m.OverflowToolbarLayoutData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32
 * 
 * @public
 * 
 */
sap.m.OverflowToolbarLayoutData.prototype.setGroup = function(iGroup) { return new sap.m.OverflowToolbarLayoutData(); };

/**
 * Sets a new value for property {@link #getMoveToOverflow moveToOverflow}.
 * 
 * The OverflowToolbar item can or cannot move to the overflow area
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bMoveToOverflow New value for property <code>moveToOverflow</code>
 * @returns {sap.m.OverflowToolbarLayoutData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.32
 * 
 * @public
 * 
 */
sap.m.OverflowToolbarLayoutData.prototype.setMoveToOverflow = function(bMoveToOverflow) { return new sap.m.OverflowToolbarLayoutData(); };

/**
 * Sets a new value for property {@link #getPriority priority}.
 * 
 * Defines OverflowToolbar items priority, Available priorities ate NeverOverflow, High, Low, Disappear and AlwaysOverflow
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>High</code>.
 * @param {sap.m.OverflowToolbarPriority} sPriority New value for property <code>priority</code>
 * @returns {sap.m.OverflowToolbarLayoutData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32
 * 
 * @public
 * 
 */
sap.m.OverflowToolbarLayoutData.prototype.setPriority = function(sPriority) { return new sap.m.OverflowToolbarLayoutData(); };

/**
 * Sets a new value for property {@link #getStayInOverflow stayInOverflow}.
 * 
 * The OverflowToolbar item can or cannot stay in the overflow area
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bStayInOverflow New value for property <code>stayInOverflow</code>
 * @returns {sap.m.OverflowToolbarLayoutData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.32
 * 
 * @public
 * 
 */
sap.m.OverflowToolbarLayoutData.prototype.setStayInOverflow = function(bStayInOverflow) { return new sap.m.OverflowToolbarLayoutData(); };


// ---- sap.m.OverflowToolbarPriority --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.OverflowToolbarPriority.toString = function() { return ""; };

// ---- sap.m.P13nColumnsItem --------------------------------------------------------------------------

/**
 * Constructor for a new P13nColumnsItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColumnKey columnKey} : string</li>
 * <li>{@link #getIndex index} : int</li>
 * <li>{@link #getVisible visible} : boolean</li>
 * <li>{@link #getWidth width} : string</li>
 * <li>{@link #getTotal total} : boolean</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class Type for <code>columnsItems</code> aggregation in <code>P13nColumnsPanel</code> control.
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nColumnsItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.P13nColumnsItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nColumnsItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getColumnKey columnKey}.
 * 
 * This property contains the unique table column key
 * 
 * @returns {string} Value of property <code>columnKey</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.getColumnKey = function() { return ""; };

/**
 * Gets current value of property {@link #getIndex index}.
 * 
 * This property contains the index of a table column
 * 
 * @returns {int} Value of property <code>index</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.getIndex = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.P13nColumnsItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.P13nColumnsItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getTotal total}.
 * 
 * This property contains the total flag of a table column.
 * 
 * @returns {boolean} Value of property <code>total</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.getTotal = function() { return false; };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * This property decides whether a <code>P13nColumnsItem</code> is visible
 * 
 * @returns {boolean} Value of property <code>visible</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.getVisible = function() { return false; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * This property contains the with of a table column.
 * 
 * @returns {string} Value of property <code>width</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.getWidth = function() { return ""; };

/**
 * Sets a new value for property {@link #getColumnKey columnKey}.
 * 
 * This property contains the unique table column key
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sColumnKey New value for property <code>columnKey</code>
 * @returns {sap.m.P13nColumnsItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.setColumnKey = function(sColumnKey) { return new sap.m.P13nColumnsItem(); };

/**
 * Sets a new value for property {@link #getIndex index}.
 * 
 * This property contains the index of a table column
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iIndex New value for property <code>index</code>
 * @returns {sap.m.P13nColumnsItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.setIndex = function(iIndex) { return new sap.m.P13nColumnsItem(); };

/**
 * Sets a new value for property {@link #getTotal total}.
 * 
 * This property contains the total flag of a table column.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bTotal New value for property <code>total</code>
 * @returns {sap.m.P13nColumnsItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.setTotal = function(bTotal) { return new sap.m.P13nColumnsItem(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * This property decides whether a <code>P13nColumnsItem</code> is visible
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.P13nColumnsItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.setVisible = function(bVisible) { return new sap.m.P13nColumnsItem(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * This property contains the with of a table column.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sWidth New value for property <code>width</code>
 * @returns {sap.m.P13nColumnsItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsItem.prototype.setWidth = function(sWidth) { return new sap.m.P13nColumnsItem(); };


// ---- sap.m.P13nColumnsPanel --------------------------------------------------------------------------

/**
 * Constructor for a new P13nColumnsPanel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisibleItemsThreshold visibleItemsThreshold} : int (default: -1)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getColumnsItems columnsItems} : sap.m.P13nColumnsItem[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:addColumnsItem addColumnsItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:changeColumnsItems changeColumnsItems} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:setData setData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.P13nPanel#constructor sap.m.P13nPanel}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The <code>P13nColumnsPanel</code> control is used to define column-specific settings for table personalization.
 * @extends sap.m.P13nPanel
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nColumnsPanel = function(sId,mSettings) {};
/**
 * Event raised when a <code>columnsItem</code> is added.
 * @event
 * @since 1.26.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.P13nColumnsItem} oControlEvent.getParameters.newItem <code>columnsItem</code> that needs to be added in the model.
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.addColumnsItem = function(oControlEvent) {  };

/**
 * Event raised if <code>columnsItems</code> is changed or new one needs to be created in the model.
 * @event
 * @since 1.26.7
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.P13nColumnsItem[]} oControlEvent.getParameters.newItems Contains <code>columnsItems</code> that needs to be created in the model.
 * @param {sap.m.P13nColumnsItem[]} oControlEvent.getParameters.existingItems Contains <code>columnsItems</code> that needs to be changed in the model.
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.changeColumnsItems = function(oControlEvent) {  };

/**
 * Event raised if <code>setData</code> is called in model. The event serves the purpose of minimizing such calls since they can
 * take up a lot of performance.
 * @event
 * @since 1.26.7
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.setData = function(oControlEvent) {  };

/**
 * Adds some columnsItem to the aggregation {@link #getColumnsItems columnsItems}.
 * @param {sap.m.P13nColumnsItem}
 *            oColumnsItem the columnsItem to add; if empty, nothing is inserted
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.addColumnsItem = function(oColumnsItem) { return new sap.m.P13nColumnsPanel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:addColumnsItem addColumnsItem} event of this <code>sap.m.P13nColumnsPanel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nColumnsPanel</code> itself.
 * 
 * Event raised when a <code>columnsItem</code> is added.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nColumnsPanel</code> itself
 * 
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.26.0
 * 
 */
sap.m.P13nColumnsPanel.prototype.attachAddColumnsItem = function(oData,fnFunction,oListener) { return new sap.m.P13nColumnsPanel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:changeColumnsItems changeColumnsItems} event of this <code>sap.m.P13nColumnsPanel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nColumnsPanel</code> itself.
 * 
 * Event raised if <code>columnsItems</code> is changed or new one needs to be created in the model.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nColumnsPanel</code> itself
 * 
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.26.7
 * 
 */
sap.m.P13nColumnsPanel.prototype.attachChangeColumnsItems = function(oData,fnFunction,oListener) { return new sap.m.P13nColumnsPanel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:setData setData} event of this <code>sap.m.P13nColumnsPanel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nColumnsPanel</code> itself.
 * 
 * Event raised if <code>setData</code> is called in model. The event serves the purpose of minimizing such calls since they can
 * take up a lot of performance.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nColumnsPanel</code> itself
 * 
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.26.7
 * 
 */
sap.m.P13nColumnsPanel.prototype.attachSetData = function(oData,fnFunction,oListener) { return new sap.m.P13nColumnsPanel(); };

/**
 * Binds aggregation {@link #getColumnsItems columnsItems} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.bindColumnsItems = function(oBindingInfo) { return new sap.m.P13nColumnsPanel(); };

/**
 * Destroys all the columnsItems in the aggregation {@link #getColumnsItems columnsItems}.
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.destroyColumnsItems = function() { return new sap.m.P13nColumnsPanel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:addColumnsItem addColumnsItem} event of this <code>sap.m.P13nColumnsPanel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.detachAddColumnsItem = function(fnFunction,oListener) { return new sap.m.P13nColumnsPanel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:changeColumnsItems changeColumnsItems} event of this <code>sap.m.P13nColumnsPanel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.7
 * 
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.detachChangeColumnsItems = function(fnFunction,oListener) { return new sap.m.P13nColumnsPanel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:setData setData} event of this <code>sap.m.P13nColumnsPanel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.7
 * 
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.detachSetData = function(fnFunction,oListener) { return new sap.m.P13nColumnsPanel(); };

/**
 * Creates a new subclass of class sap.m.P13nColumnsPanel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nColumnsPanel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:addColumnsItem addColumnsItem} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.P13nColumnsItem} [mParameters.newItem] <code>columnsItem</code> that needs to be added in the model.
 * 
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.26.0
 * 
 */
sap.m.P13nColumnsPanel.prototype.fireAddColumnsItem = function(mParameters) { return new sap.m.P13nColumnsPanel(); };

/**
 * Fires event {@link #event:changeColumnsItems changeColumnsItems} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.P13nColumnsItem[]} [mParameters.newItems] Contains <code>columnsItems</code> that needs to be created in the model.
 * @param {sap.m.P13nColumnsItem[]} [mParameters.existingItems] Contains <code>columnsItems</code> that needs to be changed in the model.
 * 
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.26.7
 * 
 */
sap.m.P13nColumnsPanel.prototype.fireChangeColumnsItems = function(mParameters) { return new sap.m.P13nColumnsPanel(); };

/**
 * Fires event {@link #event:setData setData} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.26.7
 * 
 */
sap.m.P13nColumnsPanel.prototype.fireSetData = function(mParameters) { return new sap.m.P13nColumnsPanel(); };

/**
 * Gets content of aggregation {@link #getColumnsItems columnsItems}.
 * 
 * List of columns that has been changed.
 * 
 * @returns {sap.m.P13nColumnsItem[]}
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.getColumnsItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.P13nColumnsPanel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.P13nColumnsPanel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Delivers a payload for columnsPanel that can be used at consumer side
 * 
 * @public
 * @since 1.26.7
 * @returns {object} oPayload, which contains useful information
 * 
 */
sap.m.P13nColumnsPanel.prototype.getOkPayload = function() { return new Object(); };

/**
 * Delivers a payload for columnsPanel that can be used at consumer side
 * 
 * @public
 * @since 1.28
 * @returns {object} oPayload, which contains useful information
 * 
 */
sap.m.P13nColumnsPanel.prototype.getResetPayload = function() { return new Object(); };

/**
 * Gets current value of property {@link #getVisibleItemsThreshold visibleItemsThreshold}.
 * 
 * Specifies a threshold of visible items. If the end user makes a lot of columns visible, this might cause performance to slow down.
 * When this happens, the user can receive a corresponding warning triggered by the <code>visibleItemsThreshold</code> property. The
 * property needs to be activated and set to the required value by the consuming application to ensure that the warning message is
 * shown when the threshold has been exceeded. In the following example the message will be shown if more than 100 visible columns are
 * selected:
 * 
 * <pre>
 * customData&gt;
 * core:CustomData key=&quot;p13nDialogSettings&quot;
 * value='\{&quot;columns&quot;:\{&quot;visible&quot;: true, &quot;payload&quot;: \{&quot;visibleItemsThreshold&quot;: 3\}\}\}' /&gt;
 * /customData&gt;
 * </pre>
 * 
 * Default value is <code>-1</code>.
 * @returns {int} Value of property <code>visibleItemsThreshold</code>
 * @since 1.26.7
 * 
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.getVisibleItemsThreshold = function() { return 0; };

/**
 * Checks for the provided <code>sap.m.P13nColumnsItem</code> in the aggregation {@link #getColumnsItems columnsItems}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.P13nColumnsItem}
 *           oColumnsItem The columnsItem whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.indexOfColumnsItem = function(oColumnsItem) { return 0; };

/**
 * Inserts a columnsItem into the aggregation {@link #getColumnsItems columnsItems}.
 * 
 * @param {sap.m.P13nColumnsItem}
 *            oColumnsItem the columnsItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the columnsItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the columnsItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the columnsItem is inserted at
 *              the last position
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.insertColumnsItem = function(oColumnsItem,iIndex) { return new sap.m.P13nColumnsPanel(); };

/**
 * This method does a re-initialization of the panel
 * 
 * @public
 * @since 1.28
 * 
 */
sap.m.P13nColumnsPanel.prototype.reInitialize = function() {  };

/**
 * Removes all the controls from the aggregation {@link #getColumnsItems columnsItems}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.P13nColumnsItem[]} An array of the removed elements (might be empty)
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.removeAllColumnsItems = function() { return new Array(); };

/**
 * Removes a columnsItem from the aggregation {@link #getColumnsItems columnsItems}.
 * 
 * @param {int | string | sap.m.P13nColumnsItem} vColumnsItem The columnsItem to remove or its index or id
 * @returns {sap.m.P13nColumnsItem} The removed columnsItem or <code>null</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.removeColumnsItem = function(vColumnsItem) { return new sap.m.P13nColumnsItem(); };

/**
 * Sets a new value for property {@link #getVisibleItemsThreshold visibleItemsThreshold}.
 * 
 * Specifies a threshold of visible items. If the end user makes a lot of columns visible, this might cause performance to slow down.
 * When this happens, the user can receive a corresponding warning triggered by the <code>visibleItemsThreshold</code> property. The
 * property needs to be activated and set to the required value by the consuming application to ensure that the warning message is
 * shown when the threshold has been exceeded. In the following example the message will be shown if more than 100 visible columns are
 * selected:
 * 
 * <pre>
 * customData&gt;
 * core:CustomData key=&quot;p13nDialogSettings&quot;
 * value='\{&quot;columns&quot;:\{&quot;visible&quot;: true, &quot;payload&quot;: \{&quot;visibleItemsThreshold&quot;: 3\}\}\}' /&gt;
 * /customData&gt;
 * </pre>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>-1</code>.
 * @param {int} iVisibleItemsThreshold New value for property <code>visibleItemsThreshold</code>
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.7
 * 
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.setVisibleItemsThreshold = function(iVisibleItemsThreshold) { return new sap.m.P13nColumnsPanel(); };

/**
 * Unbinds aggregation {@link #getColumnsItems columnsItems} from model data.
 * @returns {sap.m.P13nColumnsPanel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.m.P13nColumnsPanel.prototype.unbindColumnsItems = function() { return new sap.m.P13nColumnsPanel(); };


// ---- sap.m.P13nConditionOperation --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.P13nConditionOperation.toString = function() { return ""; };

// ---- sap.m.P13nConditionPanel --------------------------------------------------------------------------

/**
 * Constructor for a new P13nConditionPanel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMaxConditions maxConditions} : string (default: -1)</li>
 * <li>{@link #getExclude exclude} : boolean (default: false)</li>
 * <li>{@link #getContainerQuery containerQuery} : boolean (default: false)</li>
 * <li>{@link #getAutoAddNewRow autoAddNewRow} : boolean (default: false)</li>
 * <li>{@link #getDisableFirstRemoveIcon disableFirstRemoveIcon} : boolean (default: false)</li>
 * <li>{@link #getAlwaysShowAddIcon alwaysShowAddIcon} : boolean (default: true)</li>
 * <li>{@link #getUsePrevConditionSetting usePrevConditionSetting} : boolean (default: true)</li>
 * <li>{@link #getAutoReduceKeyFieldItems autoReduceKeyFieldItems} : boolean (default: false)</li>
 * <li>{@link #getLayoutMode layoutMode} : string</li>
 * <li>{@link #getShowLabel showLabel} : boolean (default: false)</li>
 * <li>{@link #getDisplayFormat displayFormat} : string</li>
 * <li>{@link #getValidationExecutor validationExecutor} : object</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:dataChange dataChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The ConditionPanel Control will be used to implement the Sorting, Filtering and Grouping panel of the new Personalization dialog.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.26.0
 * @experimental since version 1.26 !!! THIS CONTROL IS ONLY FOR INTERNAL USE !!!
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nConditionPanel = function(sId,mSettings) {};
/**
 * Workaround for updating the binding
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.dataChange = function(oControlEvent) {  };

/**
 * add a single condition.
 * 
 * @param {object} oCondition the new condition of type <code>{ "key": "007", "operation": sap.m.P13nConditionOperation.Ascending, "keyField":
 *        "keyFieldKey", "value1": "", "value2": ""};</code>
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.addCondition = function(oCondition) {  };

/**
 * add a single KeyField
 * 
 * @public
 * @param {object} oKeyField {key: "CompanyCode", text: "ID"}
 * 
 */
sap.m.P13nConditionPanel.prototype.addKeyField = function(oKeyField) {  };

/**
 * add a single operation
 * 
 * @public
 * @param {sap.m.P13nConditionOperation} oOperation
 * @param {string} sType defines the type for which this operations will be used.
 * 
 */
sap.m.P13nConditionPanel.prototype.addOperation = function(oOperation,sType) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:dataChange dataChange} event of this <code>sap.m.P13nConditionPanel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nConditionPanel</code> itself.
 * 
 * Workaround for updating the binding
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nConditionPanel</code> itself
 * 
 * @returns {sap.m.P13nConditionPanel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.attachDataChange = function(oData,fnFunction,oListener) { return new sap.m.P13nConditionPanel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:dataChange dataChange} event of this <code>sap.m.P13nConditionPanel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nConditionPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.detachDataChange = function(fnFunction,oListener) { return new sap.m.P13nConditionPanel(); };

/**
 * Creates a new subclass of class sap.m.P13nConditionPanel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nConditionPanel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:dataChange dataChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nConditionPanel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.P13nConditionPanel.prototype.fireDataChange = function(mParameters) { return new sap.m.P13nConditionPanel(); };

/**
 * Gets current value of property {@link #getAlwaysShowAddIcon alwaysShowAddIcon}.
 * 
 * makes the Add icon visible on each condition row. If is set to false the Add is only visible at the end and you can only append a
 * new condition.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>alwaysShowAddIcon</code>
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getAlwaysShowAddIcon = function() { return false; };

/**
 * Gets current value of property {@link #getAutoAddNewRow autoAddNewRow}.
 * 
 * adds initial a new empty condition row
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>autoAddNewRow</code>
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getAutoAddNewRow = function() { return false; };

/**
 * Gets current value of property {@link #getAutoReduceKeyFieldItems autoReduceKeyFieldItems}.
 * 
 * KeyField value can only be selected once. When you set the property to <code>true</code> the ConditionPanel will automatically offers on the
 * KeyField drop down only the keyFields which are not used. The default behavior is that in each keyField dropdown all keyfields are
 * listed.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>autoReduceKeyFieldItems</code>
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getAutoReduceKeyFieldItems = function() { return false; };

/**
 * returns array of all defined conditions.
 * 
 * @public
 * @returns {object[]} array of Conditions
 * 
 */
sap.m.P13nConditionPanel.prototype.getConditions = function() { return new Array(); };

/**
 * Gets current value of property {@link #getContainerQuery containerQuery}.
 * 
 * defines if the mediaQuery or a ContainerResize will be used for layout update.
 * When the <code>P13nConditionPanel</code> is used on a dialog the property should be set to <code>true</code>!
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>containerQuery</code>
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getContainerQuery = function() { return false; };

/**
 * Gets current value of property {@link #getDisableFirstRemoveIcon disableFirstRemoveIcon}.
 * 
 * makes the remove icon on the first condition row disabled when only one condition exist.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>disableFirstRemoveIcon</code>
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getDisableFirstRemoveIcon = function() { return false; };

/**
 * Gets current value of property {@link #getDisplayFormat displayFormat}.
 * 
 * This represents the displayFormat of the condition Values. With the value "UpperCase" the entered value of the condition will be
 * converted to upperCase.
 * 
 * @returns {string} Value of property <code>displayFormat</code>
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getDisplayFormat = function() { return ""; };

/**
 * Gets current value of property {@link #getExclude exclude}.
 * 
 * exclude options for filter
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>exclude</code>
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getExclude = function() { return false; };

/**
 * getter for KeyFields array
 * 
 * @public
 * @returns {object[]} array of KeyFields <code>[{key: "CompanyCode", text: "ID"}, {key:"CompanyName", text : "Name"}]</code>
 * 
 */
sap.m.P13nConditionPanel.prototype.getKeyFields = function() { return new Array(); };

/**
 * Gets current value of property {@link #getLayoutMode layoutMode}.
 * 
 * can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
 * or "Phone" you can set a fixed layout.
 * 
 * @returns {string} Value of property <code>layoutMode</code>
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getLayoutMode = function() { return ""; };

/**
 * Gets current value of property {@link #getMaxConditions maxConditions}.
 * 
 * defines the max number of conditions on the ConditionPanel
 * 
 * Default value is <code>-1</code>.
 * @returns {string} Value of property <code>maxConditions</code>
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getMaxConditions = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nConditionPanel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.P13nConditionPanel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * returns the default array of operations
 * 
 * @public
 * @param {string} sType defines the type for which the operations should be returned.
 * @returns {sap.m.P13nConditionOperation[]} array of operations
 * 
 */
sap.m.P13nConditionPanel.prototype.getOperations = function(sType) { return new Array(); };

/**
 * Gets current value of property {@link #getShowLabel showLabel}.
 * 
 * show additional labels in the condition
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showLabel</code>
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getShowLabel = function() { return false; };

/**
 * Gets current value of property {@link #getUsePrevConditionSetting usePrevConditionSetting}.
 * 
 * new added condition use the settings from the previous condition as default.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>usePrevConditionSetting</code>
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getUsePrevConditionSetting = function() { return false; };

/**
 * Gets current value of property {@link #getValidationExecutor validationExecutor}.
 * 
 * Calls the validation listener tbd...
 * 
 * @returns {object} Value of property <code>validationExecutor</code>
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.getValidationExecutor = function() { return new Object(); };

/**
 * insert a single condition.
 * 
 * @param {object} oCondition the new condition of type <code>{ "key": "007", "operation": sap.m.P13nConditionOperation.Ascending, "keyField":
 *        "keyFieldKey", "value1": "", "value2": ""};</code>
 * @param {int} index of the new condition
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.insertCondition = function(oCondition,index) {  };

/**
 * remove all conditions.
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.removeAllConditions = function() {  };

/**
 * removes all KeyFields
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.removeAllKeyFields = function() {  };

/**
 * remove all operations
 * 
 * @public
 * @param {string} sType defines the type for which all operations should be removed
 * 
 */
sap.m.P13nConditionPanel.prototype.removeAllOperations = function(sType) {  };

/**
 * remove a single condition.
 * 
 * @param {object} vCondition is the condition which should be removed. can be either a string with the key of the condition of the condition
 *        object itself.
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.removeCondition = function(vCondition) {  };

/**
 * removes all invalid conditions.
 * 
 * @public
 * @since 1.28.0
 * 
 */
sap.m.P13nConditionPanel.prototype.removeInvalidConditions = function() {  };

/**
 * removes all errors/warning states from the value1/2 fields of all conditions.
 * 
 * @public
 * @since 1.28.0
 * 
 */
sap.m.P13nConditionPanel.prototype.removeValidationErrors = function() {  };

/**
 * Sets a new value for property {@link #getAutoAddNewRow autoAddNewRow}.
 * 
 * adds initial a new empty condition row
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bAutoAddNewRow New value for property <code>autoAddNewRow</code>
 * @returns {sap.m.P13nConditionPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setAutoAddNewRow = function(bAutoAddNewRow) { return new sap.m.P13nConditionPanel(); };

/**
 * Sets a new value for property {@link #getAutoReduceKeyFieldItems autoReduceKeyFieldItems}.
 * 
 * KeyField value can only be selected once. When you set the property to <code>true</code> the ConditionPanel will automatically offers on the
 * KeyField drop down only the keyFields which are not used. The default behavior is that in each keyField dropdown all keyfields are
 * listed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bAutoReduceKeyFieldItems New value for property <code>autoReduceKeyFieldItems</code>
 * @returns {sap.m.P13nConditionPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setAutoReduceKeyFieldItems = function(bAutoReduceKeyFieldItems) { return new sap.m.P13nConditionPanel(); };

/**
 * This method must be used to assign a list of conditions.
 * 
 * @param {object[]} aConditions array of Conditions.
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setConditions = function(aConditions) {  };

/**
 * Sets a new value for property {@link #getDisableFirstRemoveIcon disableFirstRemoveIcon}.
 * 
 * makes the remove icon on the first condition row disabled when only one condition exist.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bDisableFirstRemoveIcon New value for property <code>disableFirstRemoveIcon</code>
 * @returns {sap.m.P13nConditionPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setDisableFirstRemoveIcon = function(bDisableFirstRemoveIcon) { return new sap.m.P13nConditionPanel(); };

/**
 * Sets a new value for property {@link #getDisplayFormat displayFormat}.
 * 
 * This represents the displayFormat of the condition Values. With the value "UpperCase" the entered value of the condition will be
 * converted to upperCase.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sDisplayFormat New value for property <code>displayFormat</code>
 * @returns {sap.m.P13nConditionPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setDisplayFormat = function(sDisplayFormat) { return new sap.m.P13nConditionPanel(); };

/**
 * Sets a new value for property {@link #getExclude exclude}.
 * 
 * exclude options for filter
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bExclude New value for property <code>exclude</code>
 * @returns {sap.m.P13nConditionPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setExclude = function(bExclude) { return new sap.m.P13nConditionPanel(); };

/**
 * This method allows you to specify the KeyFields for the conditions. You can set an array of object with Key and Text properties to define the
 * keyfields.
 * 
 * @public
 * @param {array} aKeyFields array of KeyFields <code>[{key: "CompanyCode", text: "ID"}, {key:"CompanyName", text : "Name"}]</code>
 * 
 */
sap.m.P13nConditionPanel.prototype.setKeyFields = function(aKeyFields) {  };

/**
 * Sets a new value for property {@link #getMaxConditions maxConditions}.
 * 
 * defines the max number of conditions on the ConditionPanel
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>-1</code>.
 * @param {string} sMaxConditions New value for property <code>maxConditions</code>
 * @returns {sap.m.P13nConditionPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setMaxConditions = function(sMaxConditions) { return new sap.m.P13nConditionPanel(); };

/**
 * setter for the supported operations which we show per condition row. This array of "default" operations will only be used when we do not have
 * on the keyfield itself some specific operations and a keyfield is of not of type date or numeric.
 * 
 * @public
 * @param {sap.m.P13nConditionOperation[]} aOperations array of operations <code>[sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]</code>
 * @param {string} sType defines the type for which this operations will be used. is <code>sType</code> is not defined the operations will be used as default
 *        operations.
 * 
 */
sap.m.P13nConditionPanel.prototype.setOperations = function(aOperations,sType) {  };

/**
 * Sets a new value for property {@link #getShowLabel showLabel}.
 * 
 * show additional labels in the condition
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowLabel New value for property <code>showLabel</code>
 * @returns {sap.m.P13nConditionPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setShowLabel = function(bShowLabel) { return new sap.m.P13nConditionPanel(); };

/**
 * Sets a new value for property {@link #getUsePrevConditionSetting usePrevConditionSetting}.
 * 
 * new added condition use the settings from the previous condition as default.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUsePrevConditionSetting New value for property <code>usePrevConditionSetting</code>
 * @returns {sap.m.P13nConditionPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setUsePrevConditionSetting = function(bUsePrevConditionSetting) { return new sap.m.P13nConditionPanel(); };

/**
 * Sets a new value for property {@link #getValidationExecutor validationExecutor}.
 * 
 * Calls the validation listener tbd...
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oValidationExecutor New value for property <code>validationExecutor</code>
 * @returns {sap.m.P13nConditionPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nConditionPanel.prototype.setValidationExecutor = function(oValidationExecutor) { return new sap.m.P13nConditionPanel(); };


// ---- sap.m.P13nDialog --------------------------------------------------------------------------

/**
 * Constructor for a new P13nDialog.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getInitialVisiblePanelType initialVisiblePanelType} : string</li>
 * <li>{@link #getShowReset showReset} : boolean (default: false)</li>
 * <li>{@link #getShowResetEnabled showResetEnabled} : boolean (default: false)</li>
 * <li>{@link #getValidationExecutor validationExecutor} : object</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPanels panels} : sap.m.P13nPanel[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:ok ok} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:reset reset} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Dialog#constructor sap.m.Dialog}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The P13nDialog control provides a dialog that contains one or more panels. On each of the panels, one or more changes with regards to a
 *        table can be processed. For example, a panel to set a column to invisible, change the order of the columns or a panel to sort or filter
 *        tables.
 * @extends sap.m.Dialog
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nDialog = function(sId,mSettings) {};
/**
 * Event fired if the 'cancel' button in <code>P13nDialog</code> is clicked.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nDialog.prototype.cancel = function(oControlEvent) {  };

/**
 * Event fired if the 'ok' button in <code>P13nDialog</code> is clicked.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nDialog.prototype.ok = function(oControlEvent) {  };

/**
 * Event fired if the 'reset' button in <code>P13nDialog</code> is clicked.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nDialog.prototype.reset = function(oControlEvent) {  };

/**
 * Adds some panel to the aggregation {@link #getPanels panels}.
 * @param {sap.m.P13nPanel}
 *            oPanel the panel to add; if empty, nothing is inserted
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.addPanel = function(oPanel) { return new sap.m.P13nDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:cancel cancel} event of this <code>sap.m.P13nDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nDialog</code> itself.
 * 
 * Event fired if the 'cancel' button in <code>P13nDialog</code> is clicked.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nDialog</code> itself
 * 
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.P13nDialog.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.m.P13nDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:ok ok} event of this <code>sap.m.P13nDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nDialog</code> itself.
 * 
 * Event fired if the 'ok' button in <code>P13nDialog</code> is clicked.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nDialog</code> itself
 * 
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.P13nDialog.prototype.attachOk = function(oData,fnFunction,oListener) { return new sap.m.P13nDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:reset reset} event of this <code>sap.m.P13nDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nDialog</code> itself.
 * 
 * Event fired if the 'reset' button in <code>P13nDialog</code> is clicked.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nDialog</code> itself
 * 
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.P13nDialog.prototype.attachReset = function(oData,fnFunction,oListener) { return new sap.m.P13nDialog(); };

/**
 * Binds aggregation {@link #getPanels panels} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.bindPanels = function(oBindingInfo) { return new sap.m.P13nDialog(); };

/**
 * Destroys all the panels in the aggregation {@link #getPanels panels}.
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.destroyPanels = function() { return new sap.m.P13nDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:cancel cancel} event of this <code>sap.m.P13nDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.detachCancel = function(fnFunction,oListener) { return new sap.m.P13nDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:ok ok} event of this <code>sap.m.P13nDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.detachOk = function(fnFunction,oListener) { return new sap.m.P13nDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:reset reset} event of this <code>sap.m.P13nDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.detachReset = function(fnFunction,oListener) { return new sap.m.P13nDialog(); };

/**
 * Creates a new subclass of class sap.m.P13nDialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Dialog.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:cancel cancel} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.P13nDialog.prototype.fireCancel = function(mParameters) { return new sap.m.P13nDialog(); };

/**
 * Fires event {@link #event:ok ok} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.P13nDialog.prototype.fireOk = function(mParameters) { return new sap.m.P13nDialog(); };

/**
 * Fires event {@link #event:reset reset} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.P13nDialog.prototype.fireReset = function(mParameters) { return new sap.m.P13nDialog(); };

/**
 * Gets current value of property {@link #getInitialVisiblePanelType initialVisiblePanelType}.
 * 
 * This property determines which panel is initially shown when dialog is opened. Due to extensibility reason the type should be
 * <code>string</code>. So it is feasible to add a custom panel without expanding the type.
 * 
 * @returns {string} Value of property <code>initialVisiblePanelType</code>
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.getInitialVisiblePanelType = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nDialog.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.P13nDialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getPanels panels}.
 * 
 * The dialog panels displayed in the dialog.
 * 
 * @returns {sap.m.P13nPanel[]}
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.getPanels = function() { return new Array(); };

/**
 * Gets current value of property {@link #getShowReset showReset}.
 * 
 * This property determines whether the 'Restore' button is shown inside the dialog. If this property is set to true, clicking the
 * 'Reset' button will trigger the <code>reset</code> event sending a notification that model data must be reset.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showReset</code>
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.getShowReset = function() { return false; };

/**
 * Gets current value of property {@link #getShowResetEnabled showResetEnabled}.
 * 
 * This property determines whether the 'Restore' button is enabled and is taken into account only if <code>showReset</code> is set
 * to <code>true</code>.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showResetEnabled</code>
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.getShowResetEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getValidationExecutor validationExecutor}.
 * 
 * Calls the validation listener once all panel-relevant validation checks have been done. This callback function is called in order
 * to perform cross-model validation checks.
 * 
 * @returns {object} Value of property <code>validationExecutor</code>
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.getValidationExecutor = function() { return new Object(); };

/**
 * Returns visible panel.
 * 
 * @returns {sap.m.P13nPanel | null} panel
 * @public
 * 
 */
sap.m.P13nDialog.prototype.getVisiblePanel = function() { return new sap.m.P13nPanel(); };

/**
 * Checks for the provided <code>sap.m.P13nPanel</code> in the aggregation {@link #getPanels panels}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.P13nPanel}
 *           oPanel The panel whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.indexOfPanel = function(oPanel) { return 0; };

/**
 * Inserts a panel into the aggregation {@link #getPanels panels}.
 * 
 * @param {sap.m.P13nPanel}
 *            oPanel the panel to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the panel should be inserted at; for
 *              a negative value of <code>iIndex</code>, the panel is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the panel is inserted at
 *              the last position
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.insertPanel = function(oPanel,iIndex) { return new sap.m.P13nDialog(); };

/**
 * Removes all the controls from the aggregation {@link #getPanels panels}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.P13nPanel[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.removeAllPanels = function() { return new Array(); };

/**
 * Removes a panel from the aggregation {@link #getPanels panels}.
 * 
 * @param {int | string | sap.m.P13nPanel} vPanel The panel to remove or its index or id
 * @returns {sap.m.P13nPanel} The removed panel or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.removePanel = function(vPanel) { return new sap.m.P13nPanel(); };

/**
 * Sets a new value for property {@link #getInitialVisiblePanelType initialVisiblePanelType}.
 * 
 * This property determines which panel is initially shown when dialog is opened. Due to extensibility reason the type should be
 * <code>string</code>. So it is feasible to add a custom panel without expanding the type.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sInitialVisiblePanelType New value for property <code>initialVisiblePanelType</code>
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.setInitialVisiblePanelType = function(sInitialVisiblePanelType) { return new sap.m.P13nDialog(); };

/**
 * Sets a new value for property {@link #getShowReset showReset}.
 * 
 * This property determines whether the 'Restore' button is shown inside the dialog. If this property is set to true, clicking the
 * 'Reset' button will trigger the <code>reset</code> event sending a notification that model data must be reset.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowReset New value for property <code>showReset</code>
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.setShowReset = function(bShowReset) { return new sap.m.P13nDialog(); };

/**
 * Sets a new value for property {@link #getShowResetEnabled showResetEnabled}.
 * 
 * This property determines whether the 'Restore' button is enabled and is taken into account only if <code>showReset</code> is set
 * to <code>true</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowResetEnabled New value for property <code>showResetEnabled</code>
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.setShowResetEnabled = function(bShowResetEnabled) { return new sap.m.P13nDialog(); };

/**
 * Sets a new value for property {@link #getValidationExecutor validationExecutor}.
 * 
 * Calls the validation listener once all panel-relevant validation checks have been done. This callback function is called in order
 * to perform cross-model validation checks.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oValidationExecutor New value for property <code>validationExecutor</code>
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.setValidationExecutor = function(oValidationExecutor) { return new sap.m.P13nDialog(); };

/**
 * Unbinds aggregation {@link #getPanels panels} from model data.
 * @returns {sap.m.P13nDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDialog.prototype.unbindPanels = function() { return new sap.m.P13nDialog(); };


// ---- sap.m.P13nDimMeasureItem --------------------------------------------------------------------------

/**
 * Constructor for a new P13nDimMeasureItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColumnKey columnKey} : string</li>
 * <li>{@link #getIndex index} : int (default: -1)</li>
 * <li>{@link #getVisible visible} : boolean</li>
 * <li>{@link #getRole role} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class Type for <code>columnsItems</code> aggregation in <code>P13nDimMeasurePanel</code> control.
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.34.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nDimMeasureItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.P13nDimMeasureItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nDimMeasureItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getColumnKey columnKey}.
 * 
 * Specifies the unique chart column key. In this context a column refers to dimensions or measures of a chart.
 * 
 * @returns {string} Value of property <code>columnKey</code>
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasureItem.prototype.getColumnKey = function() { return ""; };

/**
 * Gets current value of property {@link #getIndex index}.
 * 
 * Specifies the order of visible dimensions or measures of a chart.
 * 
 * Default value is <code>-1</code>.
 * @returns {int} Value of property <code>index</code>
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasureItem.prototype.getIndex = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.P13nDimMeasureItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.P13nDimMeasureItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getRole role}.
 * 
 * Specifies the role of dimensions or measures. The role determines how dimensions and measures influence the chart.
 * 
 * @returns {string} Value of property <code>role</code>
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasureItem.prototype.getRole = function() { return ""; };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Specifies the visibility of dimensions or measures.
 * 
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasureItem.prototype.getVisible = function() { return false; };

/**
 * Sets a new value for property {@link #getColumnKey columnKey}.
 * 
 * Specifies the unique chart column key. In this context a column refers to dimensions or measures of a chart.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sColumnKey New value for property <code>columnKey</code>
 * @returns {sap.m.P13nDimMeasureItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasureItem.prototype.setColumnKey = function(sColumnKey) { return new sap.m.P13nDimMeasureItem(); };

/**
 * Sets a new value for property {@link #getIndex index}.
 * 
 * Specifies the order of visible dimensions or measures of a chart.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>-1</code>.
 * @param {int} iIndex New value for property <code>index</code>
 * @returns {sap.m.P13nDimMeasureItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasureItem.prototype.setIndex = function(iIndex) { return new sap.m.P13nDimMeasureItem(); };

/**
 * Sets a new value for property {@link #getRole role}.
 * 
 * Specifies the role of dimensions or measures. The role determines how dimensions and measures influence the chart.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sRole New value for property <code>role</code>
 * @returns {sap.m.P13nDimMeasureItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasureItem.prototype.setRole = function(sRole) { return new sap.m.P13nDimMeasureItem(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Specifies the visibility of dimensions or measures.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.P13nDimMeasureItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasureItem.prototype.setVisible = function(bVisible) { return new sap.m.P13nDimMeasureItem(); };


// ---- sap.m.P13nDimMeasurePanel --------------------------------------------------------------------------

/**
 * Constructor for a new P13nDimMeasurePanel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getChartTypeKey chartTypeKey} : string (default: )</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getDimMeasureItems dimMeasureItems} : sap.m.P13nDimMeasureItem[]</li>
 * <li>{@link #getAvailableChartTypes availableChartTypes} : sap.ui.core.Item[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.P13nPanel#constructor sap.m.P13nPanel}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The P13nDimMeasurePanel control is used to define chart-specific settings like chart type, the visibility, the order and roles of
 *        dimensions and measures for table personalization.
 * @extends sap.m.P13nPanel
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.34.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nDimMeasurePanel = function(sId,mSettings) {};
/**
 * Adds some availableChartType to the aggregation {@link #getAvailableChartTypes availableChartTypes}.
 * @param {sap.ui.core.Item}
 *            oAvailableChartType the availableChartType to add; if empty, nothing is inserted
 * @returns {sap.m.P13nDimMeasurePanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.addAvailableChartType = function(oAvailableChartType) { return new sap.m.P13nDimMeasurePanel(); };

/**
 * Adds some dimMeasureItem to the aggregation {@link #getDimMeasureItems dimMeasureItems}.
 * @param {sap.m.P13nDimMeasureItem}
 *            oDimMeasureItem the dimMeasureItem to add; if empty, nothing is inserted
 * @returns {sap.m.P13nDimMeasurePanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.addDimMeasureItem = function(oDimMeasureItem) { return new sap.m.P13nDimMeasurePanel(); };

/**
 * Binds aggregation {@link #getDimMeasureItems dimMeasureItems} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.P13nDimMeasurePanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.bindDimMeasureItems = function(oBindingInfo) { return new sap.m.P13nDimMeasurePanel(); };

/**
 * Destroys all the availableChartTypes in the aggregation {@link #getAvailableChartTypes availableChartTypes}.
 * @returns {sap.m.P13nDimMeasurePanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.destroyAvailableChartTypes = function() { return new sap.m.P13nDimMeasurePanel(); };

/**
 * Destroys all the dimMeasureItems in the aggregation {@link #getDimMeasureItems dimMeasureItems}.
 * @returns {sap.m.P13nDimMeasurePanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.destroyDimMeasureItems = function() { return new sap.m.P13nDimMeasurePanel(); };

/**
 * Creates a new subclass of class sap.m.P13nDimMeasurePanel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nDimMeasurePanel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getAvailableChartTypes availableChartTypes}.
 * 
 * Specifies available chart types.
 * 
 * @returns {sap.ui.core.Item[]}
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.getAvailableChartTypes = function() { return new Array(); };

/**
 * Gets current value of property {@link #getChartTypeKey chartTypeKey}.
 * 
 * Specifies a chart type key.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>chartTypeKey</code>
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.getChartTypeKey = function() { return ""; };

/**
 * Gets content of aggregation {@link #getDimMeasureItems dimMeasureItems}.
 * 
 * List of columns that has been changed.
 * 
 * @returns {sap.m.P13nDimMeasureItem[]}
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.getDimMeasureItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.P13nDimMeasurePanel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.P13nDimMeasurePanel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation {@link #getAvailableChartTypes availableChartTypes}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oAvailableChartType The availableChartType whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.indexOfAvailableChartType = function(oAvailableChartType) { return 0; };

/**
 * Checks for the provided <code>sap.m.P13nDimMeasureItem</code> in the aggregation {@link #getDimMeasureItems dimMeasureItems}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.P13nDimMeasureItem}
 *           oDimMeasureItem The dimMeasureItem whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.indexOfDimMeasureItem = function(oDimMeasureItem) { return 0; };

/**
 * Inserts a availableChartType into the aggregation {@link #getAvailableChartTypes availableChartTypes}.
 * 
 * @param {sap.ui.core.Item}
 *            oAvailableChartType the availableChartType to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the availableChartType should be inserted at; for
 *              a negative value of <code>iIndex</code>, the availableChartType is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the availableChartType is inserted at
 *              the last position
 * @returns {sap.m.P13nDimMeasurePanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.insertAvailableChartType = function(oAvailableChartType,iIndex) { return new sap.m.P13nDimMeasurePanel(); };

/**
 * Inserts a dimMeasureItem into the aggregation {@link #getDimMeasureItems dimMeasureItems}.
 * 
 * @param {sap.m.P13nDimMeasureItem}
 *            oDimMeasureItem the dimMeasureItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the dimMeasureItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the dimMeasureItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the dimMeasureItem is inserted at
 *              the last position
 * @returns {sap.m.P13nDimMeasurePanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.insertDimMeasureItem = function(oDimMeasureItem,iIndex) { return new sap.m.P13nDimMeasurePanel(); };

/**
 * Removes all the controls from the aggregation {@link #getAvailableChartTypes availableChartTypes}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Item[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.removeAllAvailableChartTypes = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getDimMeasureItems dimMeasureItems}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.P13nDimMeasureItem[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.removeAllDimMeasureItems = function() { return new Array(); };

/**
 * Removes a availableChartType from the aggregation {@link #getAvailableChartTypes availableChartTypes}.
 * 
 * @param {int | string | sap.ui.core.Item} vAvailableChartType The availableChartType to remove or its index or id
 * @returns {sap.ui.core.Item} The removed availableChartType or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.removeAvailableChartType = function(vAvailableChartType) { return new sap.ui.core.Item(); };

/**
 * Removes a dimMeasureItem from the aggregation {@link #getDimMeasureItems dimMeasureItems}.
 * 
 * @param {int | string | sap.m.P13nDimMeasureItem} vDimMeasureItem The dimMeasureItem to remove or its index or id
 * @returns {sap.m.P13nDimMeasureItem} The removed dimMeasureItem or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.removeDimMeasureItem = function(vDimMeasureItem) { return new sap.m.P13nDimMeasureItem(); };

/**
 * Sets a new value for property {@link #getChartTypeKey chartTypeKey}.
 * 
 * Specifies a chart type key.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sChartTypeKey New value for property <code>chartTypeKey</code>
 * @returns {sap.m.P13nDimMeasurePanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.setChartTypeKey = function(sChartTypeKey) { return new sap.m.P13nDimMeasurePanel(); };

/**
 * Unbinds aggregation {@link #getDimMeasureItems dimMeasureItems} from model data.
 * @returns {sap.m.P13nDimMeasurePanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nDimMeasurePanel.prototype.unbindDimMeasureItems = function() { return new sap.m.P13nDimMeasurePanel(); };


// ---- sap.m.P13nFilterItem --------------------------------------------------------------------------

/**
 * Constructor for a new P13nFilterItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOperation operation} : string</li>
 * <li>{@link #getValue1 value1} : string</li>
 * <li>{@link #getValue2 value2} : string</li>
 * <li>{@link #getColumnKey columnKey} : string</li>
 * <li>{@link #getExclude exclude} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class Type for <code>filterItems</code> aggregation in P13nFilterPanel control.
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nFilterItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.P13nFilterItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nFilterItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getColumnKey columnKey}.
 * 
 * key of the column
 * 
 * @returns {string} Value of property <code>columnKey</code>
 * 
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.getColumnKey = function() { return ""; };

/**
 * Gets current value of property {@link #getExclude exclude}.
 * 
 * defines if the filter is an include or exclude filter item
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>exclude</code>
 * 
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.getExclude = function() { return false; };

/**
 * Returns a metadata object for class sap.m.P13nFilterItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.P13nFilterItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getOperation operation}.
 * 
 * sap.m.P13nConditionOperation
 * 
 * @returns {string} Value of property <code>operation</code>
 * 
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.getOperation = function() { return ""; };

/**
 * Gets current value of property {@link #getValue1 value1}.
 * 
 * value of the filter
 * 
 * @returns {string} Value of property <code>value1</code>
 * 
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.getValue1 = function() { return ""; };

/**
 * Gets current value of property {@link #getValue2 value2}.
 * 
 * to value of the between filter
 * 
 * @returns {string} Value of property <code>value2</code>
 * 
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.getValue2 = function() { return ""; };

/**
 * Sets a new value for property {@link #getColumnKey columnKey}.
 * 
 * key of the column
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sColumnKey New value for property <code>columnKey</code>
 * @returns {sap.m.P13nFilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.setColumnKey = function(sColumnKey) { return new sap.m.P13nFilterItem(); };

/**
 * Sets a new value for property {@link #getExclude exclude}.
 * 
 * defines if the filter is an include or exclude filter item
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bExclude New value for property <code>exclude</code>
 * @returns {sap.m.P13nFilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.setExclude = function(bExclude) { return new sap.m.P13nFilterItem(); };

/**
 * Sets a new value for property {@link #getOperation operation}.
 * 
 * sap.m.P13nConditionOperation
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sOperation New value for property <code>operation</code>
 * @returns {sap.m.P13nFilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.setOperation = function(sOperation) { return new sap.m.P13nFilterItem(); };

/**
 * Sets a new value for property {@link #getValue1 value1}.
 * 
 * value of the filter
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sValue1 New value for property <code>value1</code>
 * @returns {sap.m.P13nFilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.setValue1 = function(sValue1) { return new sap.m.P13nFilterItem(); };

/**
 * Sets a new value for property {@link #getValue2 value2}.
 * 
 * to value of the between filter
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sValue2 New value for property <code>value2</code>
 * @returns {sap.m.P13nFilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterItem.prototype.setValue2 = function(sValue2) { return new sap.m.P13nFilterItem(); };


// ---- sap.m.P13nFilterPanel --------------------------------------------------------------------------

/**
 * Constructor for a new P13nFilterPanel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMaxIncludes maxIncludes} : string (default: -1)</li>
 * <li>{@link #getMaxExcludes maxExcludes} : string (default: -1)</li>
 * <li>{@link #getContainerQuery containerQuery} : boolean (default: false)</li>
 * <li>{@link #getLayoutMode layoutMode} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getFilterItems filterItems} : sap.m.P13nFilterItem[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:addFilterItem addFilterItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:removeFilterItem removeFilterItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:updateFilterItem updateFilterItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.P13nPanel#constructor sap.m.P13nPanel}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The P13nFilterPanel control is used to define filter-specific settings for table personalization.
 * @extends sap.m.P13nPanel
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nFilterPanel = function(sId,mSettings) {};
/**
 * Event raised if a filter item has been added.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.addFilterItem = function(oControlEvent) {  };

/**
 * Event raised if a filter item has been removed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.removeFilterItem = function(oControlEvent) {  };

/**
 * Event raised if a filter item has been updated.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.updateFilterItem = function(oControlEvent) {  };

/**
 * Adds some filterItem to the aggregation {@link #getFilterItems filterItems}.
 * @param {sap.m.P13nFilterItem}
 *            oFilterItem the filterItem to add; if empty, nothing is inserted
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.addFilterItem = function(oFilterItem) { return new sap.m.P13nFilterPanel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:addFilterItem addFilterItem} event of this <code>sap.m.P13nFilterPanel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nFilterPanel</code> itself.
 * 
 * Event raised if a filter item has been added.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nFilterPanel</code> itself
 * 
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.attachAddFilterItem = function(oData,fnFunction,oListener) { return new sap.m.P13nFilterPanel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:removeFilterItem removeFilterItem} event of this <code>sap.m.P13nFilterPanel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nFilterPanel</code> itself.
 * 
 * Event raised if a filter item has been removed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nFilterPanel</code> itself
 * 
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.attachRemoveFilterItem = function(oData,fnFunction,oListener) { return new sap.m.P13nFilterPanel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:updateFilterItem updateFilterItem} event of this <code>sap.m.P13nFilterPanel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nFilterPanel</code> itself.
 * 
 * Event raised if a filter item has been updated.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nFilterPanel</code> itself
 * 
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.attachUpdateFilterItem = function(oData,fnFunction,oListener) { return new sap.m.P13nFilterPanel(); };

/**
 * Binds aggregation {@link #getFilterItems filterItems} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.bindFilterItems = function(oBindingInfo) { return new sap.m.P13nFilterPanel(); };

/**
 * Destroys all the filterItems in the aggregation {@link #getFilterItems filterItems}.
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.destroyFilterItems = function() { return new sap.m.P13nFilterPanel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:addFilterItem addFilterItem} event of this <code>sap.m.P13nFilterPanel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.detachAddFilterItem = function(fnFunction,oListener) { return new sap.m.P13nFilterPanel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:removeFilterItem removeFilterItem} event of this <code>sap.m.P13nFilterPanel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.detachRemoveFilterItem = function(fnFunction,oListener) { return new sap.m.P13nFilterPanel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:updateFilterItem updateFilterItem} event of this <code>sap.m.P13nFilterPanel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.detachUpdateFilterItem = function(fnFunction,oListener) { return new sap.m.P13nFilterPanel(); };

/**
 * Creates a new subclass of class sap.m.P13nFilterPanel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nFilterPanel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:addFilterItem addFilterItem} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.P13nFilterPanel.prototype.fireAddFilterItem = function(mParameters) { return new sap.m.P13nFilterPanel(); };

/**
 * Fires event {@link #event:removeFilterItem removeFilterItem} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.P13nFilterPanel.prototype.fireRemoveFilterItem = function(mParameters) { return new sap.m.P13nFilterPanel(); };

/**
 * Fires event {@link #event:updateFilterItem updateFilterItem} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.P13nFilterPanel.prototype.fireUpdateFilterItem = function(mParameters) { return new sap.m.P13nFilterPanel(); };

/**
 * Returns the array of conditions.
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.getConditions = function() {  };

/**
 * Gets current value of property {@link #getContainerQuery containerQuery}.
 * 
 * Defines if the <code>mediaQuery</code> or a <code>ContainerResize</code> is used for layout update. If the
 * <code>ConditionPanel</code> is used in a dialog, the property must be set to <code>true</code>.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>containerQuery</code>
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.getContainerQuery = function() { return false; };

/**
 * Getter for the exclude operations.
 * 
 * @public
 * @param {string} the type for which the operations are defined
 * @returns {sap.m.P13nConditionOperation[]} array of operations [<code>sap.m.P13nConditionOperation.BT</code>,
 *          <code>sap.m.P13nConditionOperation.EQ</code>]
 * 
 */
sap.m.P13nFilterPanel.prototype.getExcludeOperations = function(the) { return new Array(); };

/**
 * Gets content of aggregation {@link #getFilterItems filterItems}.
 * 
 * Defines filter items.
 * 
 * @returns {sap.m.P13nFilterItem[]}
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.getFilterItems = function() { return new Array(); };

/**
 * Getter for the include operations.
 * 
 * @public
 * @param {string} the type for which the operations are defined
 * @returns {sap.m.P13nConditionOperation} array of operations [<code>sap.m.P13nConditionOperation.BT</code>,
 *          <code>sap.m.P13nConditionOperation.EQ</code>]
 * 
 */
sap.m.P13nFilterPanel.prototype.getIncludeOperations = function(the) { return new sap.m.P13nConditionOperation(); };

/**
 * Gets current value of property {@link #getLayoutMode layoutMode}.
 * 
 * Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
 * or"Phone" you can set a fixed layout.
 * 
 * @returns {string} Value of property <code>layoutMode</code>
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.getLayoutMode = function() { return ""; };

/**
 * Gets current value of property {@link #getMaxExcludes maxExcludes}.
 * 
 * Defines the maximum number of exclude filters.
 * 
 * Default value is <code>-1</code>.
 * @returns {string} Value of property <code>maxExcludes</code>
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.getMaxExcludes = function() { return ""; };

/**
 * Gets current value of property {@link #getMaxIncludes maxIncludes}.
 * 
 * Defines the maximum number of include filters.
 * 
 * Default value is <code>-1</code>.
 * @returns {string} Value of property <code>maxIncludes</code>
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.getMaxIncludes = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nFilterPanel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.P13nFilterPanel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.m.P13nFilterItem</code> in the aggregation {@link #getFilterItems filterItems}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.P13nFilterItem}
 *           oFilterItem The filterItem whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.indexOfFilterItem = function(oFilterItem) { return 0; };

/**
 * Inserts a filterItem into the aggregation {@link #getFilterItems filterItems}.
 * 
 * @param {sap.m.P13nFilterItem}
 *            oFilterItem the filterItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the filterItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the filterItem is inserted at
 *              the last position
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.insertFilterItem = function(oFilterItem,iIndex) { return new sap.m.P13nFilterPanel(); };

/**
 * Removes all the controls from the aggregation {@link #getFilterItems filterItems}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.P13nFilterItem[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.removeAllFilterItems = function() { return new Array(); };

/**
 * Removes a filterItem from the aggregation {@link #getFilterItems filterItems}.
 * 
 * @param {int | string | sap.m.P13nFilterItem} vFilterItem The filterItem to remove or its index or id
 * @returns {sap.m.P13nFilterItem} The removed filterItem or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.removeFilterItem = function(vFilterItem) { return new sap.m.P13nFilterItem(); };

/**
 * Removes all invalid conditions.
 * 
 * @public
 * @since 1.28
 * 
 */
sap.m.P13nFilterPanel.prototype.removeInvalidConditions = function() {  };

/**
 * Removes all errors and warnings states from of all filter conditions.
 * 
 * @public
 * @since 1.28
 * 
 */
sap.m.P13nFilterPanel.prototype.removeValidationErrors = function() {  };

/**
 * Sets the array of conditions.
 * 
 * @public
 * @param {object[]} aConditions the complete list of conditions
 * @returns {sap.m.P13nFilterPanel} this for chaining
 * 
 */
sap.m.P13nFilterPanel.prototype.setConditions = function(aConditions) { return new sap.m.P13nFilterPanel(); };

/**
 * Sets a new value for property {@link #getContainerQuery containerQuery}.
 * 
 * Defines if the <code>mediaQuery</code> or a <code>ContainerResize</code> is used for layout update. If the
 * <code>ConditionPanel</code> is used in a dialog, the property must be set to <code>true</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bContainerQuery New value for property <code>containerQuery</code>
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.setContainerQuery = function(bContainerQuery) { return new sap.m.P13nFilterPanel(); };

/**
 * Setter for the supported exclude operations array.
 * 
 * @public
 * @param {sap.m.P13nConditionOperation[]} array of operations [<code>sap.m.P13nConditionOperation.BT</code>,
 *        <code>sap.m.P13nConditionOperation.EQ</code>]
 * @param {string} the type for which the operations are defined
 * 
 */
sap.m.P13nFilterPanel.prototype.setExcludeOperations = function(array,the) {  };

/**
 * Setter for the supported Include operations array.
 * 
 * @public
 * @param {sap.m.P13nConditionOperation[]} array of operations [<code>sap.m.P13nConditionOperation.BT</code>,
 *        <code>sap.m.P13nConditionOperation.EQ</code>]
 * @param {string} the type for which the operations are defined
 * 
 */
sap.m.P13nFilterPanel.prototype.setIncludeOperations = function(array,the) {  };

/**
 * Sets a new value for property {@link #getLayoutMode layoutMode}.
 * 
 * Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
 * or"Phone" you can set a fixed layout.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sLayoutMode New value for property <code>layoutMode</code>
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.setLayoutMode = function(sLayoutMode) { return new sap.m.P13nFilterPanel(); };

/**
 * Sets a new value for property {@link #getMaxExcludes maxExcludes}.
 * 
 * Defines the maximum number of exclude filters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>-1</code>.
 * @param {string} sMaxExcludes New value for property <code>maxExcludes</code>
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.setMaxExcludes = function(sMaxExcludes) { return new sap.m.P13nFilterPanel(); };

/**
 * Sets a new value for property {@link #getMaxIncludes maxIncludes}.
 * 
 * Defines the maximum number of include filters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>-1</code>.
 * @param {string} sMaxIncludes New value for property <code>maxIncludes</code>
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.setMaxIncludes = function(sMaxIncludes) { return new sap.m.P13nFilterPanel(); };

/**
 * Unbinds aggregation {@link #getFilterItems filterItems} from model data.
 * @returns {sap.m.P13nFilterPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nFilterPanel.prototype.unbindFilterItems = function() { return new sap.m.P13nFilterPanel(); };

/**
 * Checks if the entered and modified conditions are correct, marks invalid fields in yellow (warning).
 * 
 * @public
 * @returns {boolean} <code>True</code> if all conditions are valid, <code>false</code> otherwise.
 * 
 */
sap.m.P13nFilterPanel.prototype.validateConditions = function() { return false; };


// ---- sap.m.P13nGroupItem --------------------------------------------------------------------------

/**
 * Constructor for a new P13nGroupItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOperation operation} : string</li>
 * <li>{@link #getColumnKey columnKey} : string</li>
 * <li>{@link #getShowIfGrouped showIfGrouped} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class Type for <code>groupItems</code> aggregation in P13nGroupPanel control.
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.28.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nGroupItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.P13nGroupItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nGroupItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getColumnKey columnKey}.
 * 
 * key of the column
 * 
 * @returns {string} Value of property <code>columnKey</code>
 * 
 * @public
 * 
 */
sap.m.P13nGroupItem.prototype.getColumnKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nGroupItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.P13nGroupItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getOperation operation}.
 * 
 * sap.m.P13nConditionOperation
 * 
 * @returns {string} Value of property <code>operation</code>
 * 
 * @public
 * 
 */
sap.m.P13nGroupItem.prototype.getOperation = function() { return ""; };

/**
 * Gets current value of property {@link #getShowIfGrouped showIfGrouped}.
 * 
 * make the grouped column as normalcolumn visible
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showIfGrouped</code>
 * 
 * @public
 * 
 */
sap.m.P13nGroupItem.prototype.getShowIfGrouped = function() { return false; };

/**
 * Sets a new value for property {@link #getColumnKey columnKey}.
 * 
 * key of the column
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sColumnKey New value for property <code>columnKey</code>
 * @returns {sap.m.P13nGroupItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nGroupItem.prototype.setColumnKey = function(sColumnKey) { return new sap.m.P13nGroupItem(); };

/**
 * Sets a new value for property {@link #getOperation operation}.
 * 
 * sap.m.P13nConditionOperation
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sOperation New value for property <code>operation</code>
 * @returns {sap.m.P13nGroupItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nGroupItem.prototype.setOperation = function(sOperation) { return new sap.m.P13nGroupItem(); };

/**
 * Sets a new value for property {@link #getShowIfGrouped showIfGrouped}.
 * 
 * make the grouped column as normalcolumn visible
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowIfGrouped New value for property <code>showIfGrouped</code>
 * @returns {sap.m.P13nGroupItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nGroupItem.prototype.setShowIfGrouped = function(bShowIfGrouped) { return new sap.m.P13nGroupItem(); };


// ---- sap.m.P13nGroupPanel --------------------------------------------------------------------------

/**
 * Constructor for a new P13nGroupPanel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMaxGroups maxGroups} : string (default: -1)</li>
 * <li>{@link #getContainerQuery containerQuery} : boolean (default: false)</li>
 * <li>{@link #getLayoutMode layoutMode} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGroupItems groupItems} : sap.m.P13nGroupItem[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:addGroupItem addGroupItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:removeGroupItem removeGroupItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:updateGroupItem updateGroupItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.P13nPanel#constructor sap.m.P13nPanel}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The P13nGroupPanel control is used to define group-specific settings for table personalization.
 * @extends sap.m.P13nPanel
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nGroupPanel = function(sId,mSettings) {};
/**
 * Event raised if a <code>GroupItem</code> has been added.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.addGroupItem = function(oControlEvent) {  };

/**
 * Event raised if a <code>GroupItem</code> has been removed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.removeGroupItem = function(oControlEvent) {  };

/**
 * Event raised if a <code>GroupItem</code> has been updated.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.updateGroupItem = function(oControlEvent) {  };

/**
 * Adds some groupItem to the aggregation {@link #getGroupItems groupItems}.
 * @param {sap.m.P13nGroupItem}
 *            oGroupItem the groupItem to add; if empty, nothing is inserted
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.addGroupItem = function(oGroupItem) { return new sap.m.P13nGroupPanel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:addGroupItem addGroupItem} event of this <code>sap.m.P13nGroupPanel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nGroupPanel</code> itself.
 * 
 * Event raised if a <code>GroupItem</code> has been added.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nGroupPanel</code> itself
 * 
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.attachAddGroupItem = function(oData,fnFunction,oListener) { return new sap.m.P13nGroupPanel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:removeGroupItem removeGroupItem} event of this <code>sap.m.P13nGroupPanel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nGroupPanel</code> itself.
 * 
 * Event raised if a <code>GroupItem</code> has been removed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nGroupPanel</code> itself
 * 
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.attachRemoveGroupItem = function(oData,fnFunction,oListener) { return new sap.m.P13nGroupPanel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:updateGroupItem updateGroupItem} event of this <code>sap.m.P13nGroupPanel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nGroupPanel</code> itself.
 * 
 * Event raised if a <code>GroupItem</code> has been updated.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nGroupPanel</code> itself
 * 
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.attachUpdateGroupItem = function(oData,fnFunction,oListener) { return new sap.m.P13nGroupPanel(); };

/**
 * Binds aggregation {@link #getGroupItems groupItems} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.bindGroupItems = function(oBindingInfo) { return new sap.m.P13nGroupPanel(); };

/**
 * Destroys all the groupItems in the aggregation {@link #getGroupItems groupItems}.
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.destroyGroupItems = function() { return new sap.m.P13nGroupPanel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:addGroupItem addGroupItem} event of this <code>sap.m.P13nGroupPanel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.detachAddGroupItem = function(fnFunction,oListener) { return new sap.m.P13nGroupPanel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:removeGroupItem removeGroupItem} event of this <code>sap.m.P13nGroupPanel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.detachRemoveGroupItem = function(fnFunction,oListener) { return new sap.m.P13nGroupPanel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:updateGroupItem updateGroupItem} event of this <code>sap.m.P13nGroupPanel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.detachUpdateGroupItem = function(fnFunction,oListener) { return new sap.m.P13nGroupPanel(); };

/**
 * Creates a new subclass of class sap.m.P13nGroupPanel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nGroupPanel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:addGroupItem addGroupItem} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.P13nGroupPanel.prototype.fireAddGroupItem = function(mParameters) { return new sap.m.P13nGroupPanel(); };

/**
 * Fires event {@link #event:removeGroupItem removeGroupItem} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.P13nGroupPanel.prototype.fireRemoveGroupItem = function(mParameters) { return new sap.m.P13nGroupPanel(); };

/**
 * Fires event {@link #event:updateGroupItem updateGroupItem} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.P13nGroupPanel.prototype.fireUpdateGroupItem = function(mParameters) { return new sap.m.P13nGroupPanel(); };

/**
 * Gets current value of property {@link #getContainerQuery containerQuery}.
 * 
 * Defines if <code>mediaQuery</code> or <code>ContainerResize</code> is used for a layout update. If <code>ConditionPanel</code>
 * is used in a dialog, the property must be set to true.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>containerQuery</code>
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.getContainerQuery = function() { return false; };

/**
 * Gets content of aggregation {@link #getGroupItems groupItems}.
 * 
 * Defined group items.
 * 
 * @returns {sap.m.P13nGroupItem[]}
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.getGroupItems = function() { return new Array(); };

/**
 * Gets current value of property {@link #getLayoutMode layoutMode}.
 * 
 * Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
 * or "Phone" you can set a fixed layout.
 * 
 * @returns {string} Value of property <code>layoutMode</code>
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.getLayoutMode = function() { return ""; };

/**
 * Gets current value of property {@link #getMaxGroups maxGroups}.
 * 
 * Defines the maximum number of groups.
 * 
 * Default value is <code>-1</code>.
 * @returns {string} Value of property <code>maxGroups</code>
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.getMaxGroups = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nGroupPanel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.P13nGroupPanel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.m.P13nGroupItem</code> in the aggregation {@link #getGroupItems groupItems}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.P13nGroupItem}
 *           oGroupItem The groupItem whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.indexOfGroupItem = function(oGroupItem) { return 0; };

/**
 * Inserts a groupItem into the aggregation {@link #getGroupItems groupItems}.
 * 
 * @param {sap.m.P13nGroupItem}
 *            oGroupItem the groupItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the groupItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the groupItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the groupItem is inserted at
 *              the last position
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.insertGroupItem = function(oGroupItem,iIndex) { return new sap.m.P13nGroupPanel(); };

/**
 * Removes all the controls from the aggregation {@link #getGroupItems groupItems}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.P13nGroupItem[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.removeAllGroupItems = function() { return new Array(); };

/**
 * Removes a groupItem from the aggregation {@link #getGroupItems groupItems}.
 * 
 * @param {int | string | sap.m.P13nGroupItem} vGroupItem The groupItem to remove or its index or id
 * @returns {sap.m.P13nGroupItem} The removed groupItem or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.removeGroupItem = function(vGroupItem) { return new sap.m.P13nGroupItem(); };

/**
 * Removes all invalid group conditions.
 * 
 * @public
 * @since 1.28
 * 
 */
sap.m.P13nGroupPanel.prototype.removeInvalidConditions = function() {  };

/**
 * Removes all errors/warning states from of all group conditions.
 * 
 * @public
 * @since 1.28
 * 
 */
sap.m.P13nGroupPanel.prototype.removeValidationErrors = function() {  };

/**
 * Sets a new value for property {@link #getContainerQuery containerQuery}.
 * 
 * Defines if <code>mediaQuery</code> or <code>ContainerResize</code> is used for a layout update. If <code>ConditionPanel</code>
 * is used in a dialog, the property must be set to true.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bContainerQuery New value for property <code>containerQuery</code>
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.setContainerQuery = function(bContainerQuery) { return new sap.m.P13nGroupPanel(); };

/**
 * Sets a new value for property {@link #getLayoutMode layoutMode}.
 * 
 * Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
 * or "Phone" you can set a fixed layout.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sLayoutMode New value for property <code>layoutMode</code>
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.setLayoutMode = function(sLayoutMode) { return new sap.m.P13nGroupPanel(); };

/**
 * Sets a new value for property {@link #getMaxGroups maxGroups}.
 * 
 * Defines the maximum number of groups.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>-1</code>.
 * @param {string} sMaxGroups New value for property <code>maxGroups</code>
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.setMaxGroups = function(sMaxGroups) { return new sap.m.P13nGroupPanel(); };

/**
 * Setter for the supported operations array.
 * 
 * @public
 * @param {array} aOperations array of operations <code>[sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]</code>
 * 
 */
sap.m.P13nGroupPanel.prototype.setOperations = function(aOperations) {  };

/**
 * Unbinds aggregation {@link #getGroupItems groupItems} from model data.
 * @returns {sap.m.P13nGroupPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nGroupPanel.prototype.unbindGroupItems = function() { return new sap.m.P13nGroupPanel(); };

/**
 * Checks if the entered or modified conditions are correct, marks invalid fields yellow (Warning) and opens a popup message dialog to let the
 * user know that some values are not correct or missing.
 * 
 * @public
 * @returns {boolean} <code>True</code> if all conditions are valid, <code>false</code> otherwise.
 * 
 */
sap.m.P13nGroupPanel.prototype.validateConditions = function() { return false; };


// ---- sap.m.P13nItem --------------------------------------------------------------------------

/**
 * Constructor for a new P13nItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColumnKey columnKey} : string</li>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getVisible visible} : boolean</li>
 * <li>{@link #getType type} : string (default: text)</li>
 * <li>{@link #getPrecision precision} : string</li>
 * <li>{@link #getScale scale} : string</li>
 * <li>{@link #getMaxLength maxLength} : string</li>
 * <li>{@link #getWidth width} : string</li>
 * <li>{@link #getIsDefault isDefault} : boolean (default: false)</li>
 * <li>{@link #getValues values} : string[]</li>
 * <li>{@link #getRole role} : string</li>
 * <li>{@link #getAggregationRole aggregationRole} : string</li>
 * <li>{@link #getHref href} : string</li>
 * <li>{@link #getTarget target} : string</li>
 * <li>{@link #getPress press} : object</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class Base type for <code>items</code> aggregation in <code>P13nPanel</code> control.
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.P13nItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getAggregationRole aggregationRole}.
 * 
 * Defines aggregation role
 * 
 * @returns {string} Value of property <code>aggregationRole</code>
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getAggregationRole = function() { return ""; };

/**
 * Gets current value of property {@link #getColumnKey columnKey}.
 * 
 * Can be used as input for subsequent actions.
 * 
 * @returns {string} Value of property <code>columnKey</code>
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getColumnKey = function() { return ""; };

/**
 * Gets current value of property {@link #getHref href}.
 * 
 * Defines href of a link.
 * 
 * @returns {string} Value of property <code>href</code>
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getHref = function() { return ""; };

/**
 * Gets current value of property {@link #getIsDefault isDefault}.
 * 
 * the column with isDefault==true will be used as the selected column item on the conditionPanel
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>isDefault</code>
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getIsDefault = function() { return false; };

/**
 * Gets current value of property {@link #getMaxLength maxLength}.
 * 
 * specifies the number of characters which can be entered in the value fields of the condition panel
 * 
 * @returns {string} Value of property <code>maxLength</code>
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getMaxLength = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.P13nItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPrecision precision}.
 * 
 * if type==numeric the precision will be used to format the entered value (maxIntegerDigits of the used Formatter)
 * 
 * @returns {string} Value of property <code>precision</code>
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getPrecision = function() { return ""; };

/**
 * Gets current value of property {@link #getPress press}.
 * 
 * Defines press handler of a link.
 * 
 * @returns {object} Value of property <code>press</code>
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getPress = function() { return new Object(); };

/**
 * Gets current value of property {@link #getRole role}.
 * 
 * Defines role. The role is reflected in the manner how the dimension will influence the chart layout.
 * 
 * @returns {string} Value of property <code>role</code>
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getRole = function() { return ""; };

/**
 * Gets current value of property {@link #getScale scale}.
 * 
 * if type==numeric the scale will be used to format the entered value (maxFractionDigits of the used Formatter)
 * 
 * @returns {string} Value of property <code>scale</code>
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getScale = function() { return ""; };

/**
 * Gets current value of property {@link #getTarget target}.
 * 
 * Defines target of a link.
 * 
 * @returns {string} Value of property <code>target</code>
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getTarget = function() { return ""; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * The text to be displayed for the item.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * data type of the column (text, numeric or date is supported)
 * 
 * Default value is <code>text</code>.
 * @returns {string} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getType = function() { return ""; };

/**
 * Gets current value of property {@link #getValues values}.
 * 
 * the array of values for type bool. e.g. ["", "Off", "On"]. The first entry can be empty (used to blank the value field). Next value
 * represent the false value, last entry the true value.
 * 
 * @returns {string[]} Value of property <code>values</code>
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getValues = function() { return new Array(); };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Defines visibility of column
 * 
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getVisible = function() { return false; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines column width
 * 
 * @returns {string} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.getWidth = function() { return ""; };

/**
 * Sets a new value for property {@link #getAggregationRole aggregationRole}.
 * 
 * Defines aggregation role
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sAggregationRole New value for property <code>aggregationRole</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setAggregationRole = function(sAggregationRole) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getColumnKey columnKey}.
 * 
 * Can be used as input for subsequent actions.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sColumnKey New value for property <code>columnKey</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setColumnKey = function(sColumnKey) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getHref href}.
 * 
 * Defines href of a link.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sHref New value for property <code>href</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setHref = function(sHref) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getIsDefault isDefault}.
 * 
 * the column with isDefault==true will be used as the selected column item on the conditionPanel
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bIsDefault New value for property <code>isDefault</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setIsDefault = function(bIsDefault) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getMaxLength maxLength}.
 * 
 * specifies the number of characters which can be entered in the value fields of the condition panel
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sMaxLength New value for property <code>maxLength</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setMaxLength = function(sMaxLength) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getPrecision precision}.
 * 
 * if type==numeric the precision will be used to format the entered value (maxIntegerDigits of the used Formatter)
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sPrecision New value for property <code>precision</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setPrecision = function(sPrecision) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getPress press}.
 * 
 * Defines press handler of a link.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oPress New value for property <code>press</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setPress = function(oPress) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getRole role}.
 * 
 * Defines role. The role is reflected in the manner how the dimension will influence the chart layout.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sRole New value for property <code>role</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setRole = function(sRole) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getScale scale}.
 * 
 * if type==numeric the scale will be used to format the entered value (maxFractionDigits of the used Formatter)
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sScale New value for property <code>scale</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setScale = function(sScale) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getTarget target}.
 * 
 * Defines target of a link.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTarget New value for property <code>target</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setTarget = function(sTarget) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * The text to be displayed for the item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setText = function(sText) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getType type}.
 * 
 * data type of the column (text, numeric or date is supported)
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>text</code>.
 * @param {string} sType New value for property <code>type</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setType = function(sType) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getValues values}.
 * 
 * the array of values for type bool. e.g. ["", "Off", "On"]. The first entry can be empty (used to blank the value field). Next value
 * represent the false value, last entry the true value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string[]} sValues New value for property <code>values</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setValues = function(sValues) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Defines visibility of column
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setVisible = function(bVisible) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines column width
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sWidth New value for property <code>width</code>
 * @returns {sap.m.P13nItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nItem.prototype.setWidth = function(sWidth) { return new sap.m.P13nItem(); };


// ---- sap.m.P13nPanel --------------------------------------------------------------------------

/**
 * Constructor for a new P13nPanel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getTitleLarge titleLarge} : string</li>
 * <li>{@link #getType type} : string</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : boolean (default: true)</li>
 * <li>{@link #getValidationExecutor validationExecutor} : object</li>
 * <li>{@link #getValidationListener validationListener} : object</li>
 * <li>{@link #getChangeNotifier changeNotifier} : object</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.P13nItem[] (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:beforeNavigationTo beforeNavigationTo} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class Base type for <code>panels</code> aggregation in <code>P13nDialog</code> control.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nPanel = function(sId,mSettings) {};
/**
 * Due to performance the data of the panel can be requested in lazy mode e.g. when the panel is displayed
 * @event
 * @since 1.28.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nPanel.prototype.beforeNavigationTo = function(oControlEvent) {  };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.m.P13nItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.addItem = function(oItem) { return new sap.m.P13nPanel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeNavigationTo beforeNavigationTo} event of this <code>sap.m.P13nPanel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nPanel</code> itself.
 * 
 * Due to performance the data of the panel can be requested in lazy mode e.g. when the panel is displayed
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nPanel</code> itself
 * 
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * 
 */
sap.m.P13nPanel.prototype.attachBeforeNavigationTo = function(oData,fnFunction,oListener) { return new sap.m.P13nPanel(); };

/**
 * This method defines the point in time before the panel becomes active.
 * 
 * @public
 * @since 1.28.0
 * 
 */
sap.m.P13nPanel.prototype.beforeNavigationTo = function() {  };

/**
 * Binds aggregation {@link #getItems items} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.bindItems = function(oBindingInfo) { return new sap.m.P13nPanel(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.destroyItems = function() { return new sap.m.P13nPanel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeNavigationTo beforeNavigationTo} event of this <code>sap.m.P13nPanel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.detachBeforeNavigationTo = function(fnFunction,oListener) { return new sap.m.P13nPanel(); };

/**
 * Creates a new subclass of class sap.m.P13nPanel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nPanel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:beforeNavigationTo beforeNavigationTo} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * 
 */
sap.m.P13nPanel.prototype.fireBeforeNavigationTo = function(mParameters) { return new sap.m.P13nPanel(); };

/**
 * Gets current value of property {@link #getChangeNotifier changeNotifier}.
 * 
 * Callback which notifies a change on this panel.
 * 
 * @returns {object} Value of property <code>changeNotifier</code>
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.getChangeNotifier = function() { return new Object(); };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * Defines personalization items (e.g. columns in the <code>P13nColumnsPanel</code>).
 * 
 * @returns {sap.m.P13nItem[]}
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.P13nPanel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.P13nPanel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * This method can be overwritten by subclass in order to return a payload for Ok action
 * 
 * @returns {object} Object which describes the state after Ok has been pressed
 * @public
 * @since 1.26.7
 * 
 */
sap.m.P13nPanel.prototype.getOkPayload = function() { return new Object(); };

/**
 * This method can be overwritten by subclass in order to return a payload for Reset action
 * 
 * @public
 * @since 1.28.0
 * 
 */
sap.m.P13nPanel.prototype.getResetPayload = function() {  };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Title text appears in the panel.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getTitleLarge titleLarge}.
 * 
 * Large title text appears e.g. in dialog header in case that only one panel is shown.
 * 
 * @returns {string} Value of property <code>titleLarge</code>
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.getTitleLarge = function() { return ""; };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * Panel type for generic use. Due to extensibility reason the type of <code>type</code> property should be <code>string</code>.
 * So it is feasible to add a custom panel without expanding the type.
 * 
 * @returns {string} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.getType = function() { return ""; };

/**
 * Gets current value of property {@link #getValidationExecutor validationExecutor}.
 * 
 * Callback method which is called in order to validate end user entry.
 * 
 * @returns {object} Value of property <code>validationExecutor</code>
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.getValidationExecutor = function() { return new Object(); };

/**
 * Gets current value of property {@link #getValidationListener validationListener}.
 * 
 * Callback method which is called in order to register for validation result.
 * 
 * @returns {object} Value of property <code>validationListener</code>
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.getValidationListener = function() { return new Object(); };

/**
 * Gets current value of property {@link #getVerticalScrolling verticalScrolling}.
 * 
 * Enables the vertical Scrolling on the <code>P13nDialog</code> when the panel is shown.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>verticalScrolling</code>
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.getVerticalScrolling = function() { return false; };

/**
 * Checks for the provided <code>sap.m.P13nItem</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.P13nItem}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.m.P13nItem}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.insertItem = function(oItem,iIndex) { return new sap.m.P13nPanel(); };

/**
 * This method can be overwritten by subclass in order to cleanup after navigation, e.g. to remove invalid content on the panel.
 * 
 * @public
 * @since 1.28.0
 * 
 */
sap.m.P13nPanel.prototype.onAfterNavigationFrom = function() {  };

/**
 * This method can be overwritten by subclass in order to prevent navigation to another panel. This could be the case if some content on the panel
 * is considered 'invalid'.
 * 
 * @returns {boolean} true if it is allowed to navigate away from this panel, false if it is not allowed
 * @public
 * @since 1.28.0
 * 
 */
sap.m.P13nPanel.prototype.onBeforeNavigationFrom = function() { return false; };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.P13nItem[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.m.P13nItem} vItem The item to remove or its index or id
 * @returns {sap.m.P13nItem} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.removeItem = function(vItem) { return new sap.m.P13nItem(); };

/**
 * Sets a new value for property {@link #getChangeNotifier changeNotifier}.
 * 
 * Callback which notifies a change on this panel.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oChangeNotifier New value for property <code>changeNotifier</code>
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.setChangeNotifier = function(oChangeNotifier) { return new sap.m.P13nPanel(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Title text appears in the panel.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.setTitle = function(sTitle) { return new sap.m.P13nPanel(); };

/**
 * Sets a new value for property {@link #getTitleLarge titleLarge}.
 * 
 * Large title text appears e.g. in dialog header in case that only one panel is shown.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitleLarge New value for property <code>titleLarge</code>
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.setTitleLarge = function(sTitleLarge) { return new sap.m.P13nPanel(); };

/**
 * Sets a new value for property {@link #getType type}.
 * 
 * Panel type for generic use. Due to extensibility reason the type of <code>type</code> property should be <code>string</code>.
 * So it is feasible to add a custom panel without expanding the type.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sType New value for property <code>type</code>
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.setType = function(sType) { return new sap.m.P13nPanel(); };

/**
 * Sets a new value for property {@link #getValidationExecutor validationExecutor}.
 * 
 * Callback method which is called in order to validate end user entry.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oValidationExecutor New value for property <code>validationExecutor</code>
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.setValidationExecutor = function(oValidationExecutor) { return new sap.m.P13nPanel(); };

/**
 * Sets a new value for property {@link #getValidationListener validationListener}.
 * 
 * Callback method which is called in order to register for validation result.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oValidationListener New value for property <code>validationListener</code>
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.setValidationListener = function(oValidationListener) { return new sap.m.P13nPanel(); };

/**
 * Sets a new value for property {@link #getVerticalScrolling verticalScrolling}.
 * 
 * Enables the vertical Scrolling on the <code>P13nDialog</code> when the panel is shown.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVerticalScrolling New value for property <code>verticalScrolling</code>
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.setVerticalScrolling = function(bVerticalScrolling) { return new sap.m.P13nPanel(); };

/**
 * Unbinds aggregation {@link #getItems items} from model data.
 * @returns {sap.m.P13nPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nPanel.prototype.unbindItems = function() { return new sap.m.P13nPanel(); };


// ---- sap.m.P13nPanelType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.P13nPanelType.toString = function() { return ""; };

// ---- sap.m.P13nSortItem --------------------------------------------------------------------------

/**
 * Constructor for a new P13nSortItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOperation operation} : string</li>
 * <li>{@link #getColumnKey columnKey} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class Type for <code>sortItems</code> aggregation in P13nSortPanel control.
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nSortItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.P13nSortItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nSortItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getColumnKey columnKey}.
 * 
 * key of the column
 * 
 * @returns {string} Value of property <code>columnKey</code>
 * 
 * @public
 * 
 */
sap.m.P13nSortItem.prototype.getColumnKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nSortItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.P13nSortItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getOperation operation}.
 * 
 * sap.m.P13nConditionOperation
 * 
 * @returns {string} Value of property <code>operation</code>
 * 
 * @public
 * 
 */
sap.m.P13nSortItem.prototype.getOperation = function() { return ""; };

/**
 * Sets a new value for property {@link #getColumnKey columnKey}.
 * 
 * key of the column
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sColumnKey New value for property <code>columnKey</code>
 * @returns {sap.m.P13nSortItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nSortItem.prototype.setColumnKey = function(sColumnKey) { return new sap.m.P13nSortItem(); };

/**
 * Sets a new value for property {@link #getOperation operation}.
 * 
 * sap.m.P13nConditionOperation
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sOperation New value for property <code>operation</code>
 * @returns {sap.m.P13nSortItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nSortItem.prototype.setOperation = function(sOperation) { return new sap.m.P13nSortItem(); };


// ---- sap.m.P13nSortPanel --------------------------------------------------------------------------

/**
 * Constructor for a new P13nSortPanel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContainerQuery containerQuery} : boolean (default: false)</li>
 * <li>{@link #getLayoutMode layoutMode} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSortItems sortItems} : sap.m.P13nSortItem[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:addSortItem addSortItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:removeSortItem removeSortItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:updateSortItem updateSortItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.P13nPanel#constructor sap.m.P13nPanel}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The P13nSortPanel control is used to define settings for sorting in table personalization.
 * @extends sap.m.P13nPanel
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.P13nSortPanel = function(sId,mSettings) {};
/**
 * event raised when a SortItem was added
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.addSortItem = function(oControlEvent) {  };

/**
 * event raised when a SortItem was removed
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.removeSortItem = function(oControlEvent) {  };

/**
 * event raised when a SortItem was updated
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.updateSortItem = function(oControlEvent) {  };

/**
 * Adds some sortItem to the aggregation {@link #getSortItems sortItems}.
 * @param {sap.m.P13nSortItem}
 *            oSortItem the sortItem to add; if empty, nothing is inserted
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.addSortItem = function(oSortItem) { return new sap.m.P13nSortPanel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:addSortItem addSortItem} event of this <code>sap.m.P13nSortPanel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nSortPanel</code> itself.
 * 
 * event raised when a SortItem was added
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nSortPanel</code> itself
 * 
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.attachAddSortItem = function(oData,fnFunction,oListener) { return new sap.m.P13nSortPanel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:removeSortItem removeSortItem} event of this <code>sap.m.P13nSortPanel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nSortPanel</code> itself.
 * 
 * event raised when a SortItem was removed
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nSortPanel</code> itself
 * 
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.attachRemoveSortItem = function(oData,fnFunction,oListener) { return new sap.m.P13nSortPanel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:updateSortItem updateSortItem} event of this <code>sap.m.P13nSortPanel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.P13nSortPanel</code> itself.
 * 
 * event raised when a SortItem was updated
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.P13nSortPanel</code> itself
 * 
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.attachUpdateSortItem = function(oData,fnFunction,oListener) { return new sap.m.P13nSortPanel(); };

/**
 * Binds aggregation {@link #getSortItems sortItems} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.bindSortItems = function(oBindingInfo) { return new sap.m.P13nSortPanel(); };

/**
 * Destroys all the sortItems in the aggregation {@link #getSortItems sortItems}.
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.destroySortItems = function() { return new sap.m.P13nSortPanel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:addSortItem addSortItem} event of this <code>sap.m.P13nSortPanel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.detachAddSortItem = function(fnFunction,oListener) { return new sap.m.P13nSortPanel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:removeSortItem removeSortItem} event of this <code>sap.m.P13nSortPanel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.detachRemoveSortItem = function(fnFunction,oListener) { return new sap.m.P13nSortPanel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:updateSortItem updateSortItem} event of this <code>sap.m.P13nSortPanel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.detachUpdateSortItem = function(fnFunction,oListener) { return new sap.m.P13nSortPanel(); };

/**
 * Creates a new subclass of class sap.m.P13nSortPanel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.P13nSortPanel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:addSortItem addSortItem} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.P13nSortPanel.prototype.fireAddSortItem = function(mParameters) { return new sap.m.P13nSortPanel(); };

/**
 * Fires event {@link #event:removeSortItem removeSortItem} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.P13nSortPanel.prototype.fireRemoveSortItem = function(mParameters) { return new sap.m.P13nSortPanel(); };

/**
 * Fires event {@link #event:updateSortItem updateSortItem} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.P13nSortPanel.prototype.fireUpdateSortItem = function(mParameters) { return new sap.m.P13nSortPanel(); };

/**
 * Gets current value of property {@link #getContainerQuery containerQuery}.
 * 
 * defines if the mediaQuery or a ContainerResize will be used for layout update. When the ConditionPanel is used on a dialog the
 * property should be set to true!
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>containerQuery</code>
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.getContainerQuery = function() { return false; };

/**
 * Gets current value of property {@link #getLayoutMode layoutMode}.
 * 
 * can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
 * or "Phone" you can set a fixed layout.
 * 
 * @returns {string} Value of property <code>layoutMode</code>
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.getLayoutMode = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.P13nSortPanel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.P13nSortPanel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getSortItems sortItems}.
 * 
 * defined Sort Items
 * 
 * @returns {sap.m.P13nSortItem[]}
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.getSortItems = function() { return new Array(); };

/**
 * Checks for the provided <code>sap.m.P13nSortItem</code> in the aggregation {@link #getSortItems sortItems}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.P13nSortItem}
 *           oSortItem The sortItem whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.indexOfSortItem = function(oSortItem) { return 0; };

/**
 * Inserts a sortItem into the aggregation {@link #getSortItems sortItems}.
 * 
 * @param {sap.m.P13nSortItem}
 *            oSortItem the sortItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the sortItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the sortItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the sortItem is inserted at
 *              the last position
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.insertSortItem = function(oSortItem,iIndex) { return new sap.m.P13nSortPanel(); };

/**
 * Removes all the controls from the aggregation {@link #getSortItems sortItems}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.P13nSortItem[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.removeAllSortItems = function() { return new Array(); };

/**
 * removes all invalid sort conditions.
 * 
 * @public
 * @since 1.28
 * 
 */
sap.m.P13nSortPanel.prototype.removeInvalidConditions = function() {  };

/**
 * Removes a sortItem from the aggregation {@link #getSortItems sortItems}.
 * 
 * @param {int | string | sap.m.P13nSortItem} vSortItem The sortItem to remove or its index or id
 * @returns {sap.m.P13nSortItem} The removed sortItem or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.removeSortItem = function(vSortItem) { return new sap.m.P13nSortItem(); };

/**
 * removes all errors/warning states from of all sort conditions.
 * 
 * @public
 * @since 1.28
 * 
 */
sap.m.P13nSortPanel.prototype.removeValidationErrors = function() {  };

/**
 * Sets a new value for property {@link #getContainerQuery containerQuery}.
 * 
 * defines if the mediaQuery or a ContainerResize will be used for layout update. When the ConditionPanel is used on a dialog the
 * property should be set to true!
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bContainerQuery New value for property <code>containerQuery</code>
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.setContainerQuery = function(bContainerQuery) { return new sap.m.P13nSortPanel(); };

/**
 * Sets a new value for property {@link #getLayoutMode layoutMode}.
 * 
 * can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
 * or "Phone" you can set a fixed layout.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sLayoutMode New value for property <code>layoutMode</code>
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.setLayoutMode = function(sLayoutMode) { return new sap.m.P13nSortPanel(); };

/**
 * setter for the supported operations array
 * 
 * @public
 * @param {array} array of operations <code>[sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]</code>
 * @returns {sap.m.P13nSortPanel} this for chaining
 * 
 */
sap.m.P13nSortPanel.prototype.setOperations = function(array) { return new sap.m.P13nSortPanel(); };

/**
 * Unbinds aggregation {@link #getSortItems sortItems} from model data.
 * @returns {sap.m.P13nSortPanel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.P13nSortPanel.prototype.unbindSortItems = function() { return new sap.m.P13nSortPanel(); };

/**
 * check if the entered/modified conditions are correct, marks invalid fields yellow (Warning state) and opens a popup message dialog to give the
 * user the feedback that some values are wrong or missing.
 * 
 * @public
 * @returns {boolean} <code>True</code> if all conditions are valid, <code>false</code> otherwise.
 * 
 */
sap.m.P13nSortPanel.prototype.validateConditions = function() { return false; };


// ---- sap.m.Page --------------------------------------------------------------------------

/**
 * Constructor for a new Page.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getTitleLevel titleLevel} : sap.ui.core.TitleLevel (default: Auto)</li>
 * <li>{@link #getShowNavButton showNavButton} : boolean (default: false)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getShowSubHeader showSubHeader} : boolean (default: true)</li>
 * <li>{@link #getNavButtonText navButtonText} : string</li>
 * <li>{@link #getNavButtonTooltip navButtonTooltip} : string</li>
 * <li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.PageBackgroundDesign (default: Standard)</li>
 * <li>{@link #getNavButtonType navButtonType} : sap.m.ButtonType (default: Back)</li>
 * <li>{@link #getShowFooter showFooter} : boolean (default: true)</li>
 * <li>{@link #getContentOnlyBusy contentOnlyBusy} : boolean (default: false)</li>
 * <li>{@link #getFloatingFooter floatingFooter} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[] (default)</li>
 * <li>{@link #getCustomHeader customHeader} : sap.m.IBar</li>
 * <li>{@link #getFooter footer} : sap.m.IBar</li>
 * <li>{@link #getSubHeader subHeader} : sap.m.IBar</li>
 * <li>{@link #getHeaderContent headerContent} : sap.ui.core.Control[]</li>
 * <li>{@link #getLandmarkInfo landmarkInfo} : sap.m.PageAccessibleLandmarkInfo</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:navButtonTap navButtonTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:navButtonPress navButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A container control that holds one whole screen of an application.
 * 
 * <h3>Overview</h3>
 * The sap.m.Page is a container control that holds one whole screen of an application.
 * The page has three distinct areas that can hold content - a header, content area and a footer.
 * <h3>Structure</h3>
 * <h4>Header</h4>
 * The top most area of the page is occupied by the header. The standard header includes a navigation button and a title.
 * Alternatively, you can create your own custom header, which is defined in the <code>customHeader</code> aggregation.
 * <h4>Content</h4>
 * The content occupies the main part of the page. Only the content area is scrollable by default.
 * This can be prevented by setting  <code>enableScrolling</code> to <code>false</code>.
 * <h4>Footer</h4>
 * The footer is optional and occupies the fixed bottom part of the page. Alternatively, the footer can be floating above the bottom part of the content.
 * This is enabled with the <code>floatingFooter</code> property.
 * 
 * <b>Note:</b> All accessibility information for the different areas and their corresponding ARIA roles is set in the aggregation <code>landmarkInfo</code> of type {@link sap.m.PageAccessibleLandmarkInfo}
 * 
 * @extends sap.ui.core.Control
 * @mixes sap.ui.core.ContextMenuSupport
 * @version 1.48.4
 * 
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Page = function(sId,mSettings) {};
/**
 * this event is fired when Nav Button is pressed
 * @event
 * @since 1.12.2
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Page.prototype.navButtonPress = function(oControlEvent) {  };

/**
 * this event is fired when Nav Button is tapped
 * @event
 * 
 * @deprecated Since version 1.12.2.
 * the navButtonPress event is replacing this event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Page.prototype.navButtonTap = function(oControlEvent) {  };

/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.addContent = function(oContent) { return new sap.m.Page(); };

/**
 * Adds some headerContent to the aggregation {@link #getHeaderContent headerContent}.
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent to add; if empty, nothing is inserted
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.addHeaderContent = function(oHeaderContent) { return new sap.m.Page(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:navButtonPress navButtonPress} event of this <code>sap.m.Page</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Page</code> itself.
 * 
 * this event is fired when Nav Button is pressed
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Page</code> itself
 * 
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.12.2
 * 
 */
sap.m.Page.prototype.attachNavButtonPress = function(oData,fnFunction,oListener) { return new sap.m.Page(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:navButtonTap navButtonTap} event of this <code>sap.m.Page</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Page</code> itself.
 * 
 * this event is fired when Nav Button is tapped
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Page</code> itself
 * 
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 * @deprecated Since version 1.12.2.
 * the navButtonPress event is replacing this event
 * 
 */
sap.m.Page.prototype.attachNavButtonTap = function(oData,fnFunction,oListener) { return new sap.m.Page(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.destroyContent = function() { return new sap.m.Page(); };

/**
 * Destroys the customHeader in the aggregation {@link #getCustomHeader customHeader}.
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.destroyCustomHeader = function() { return new sap.m.Page(); };

/**
 * Destroys the footer in the aggregation {@link #getFooter footer}.
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.destroyFooter = function() { return new sap.m.Page(); };

/**
 * Destroys all the headerContent in the aggregation {@link #getHeaderContent headerContent}.
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.destroyHeaderContent = function() { return new sap.m.Page(); };

/**
 * Destroys the landmarkInfo in the aggregation {@link #getLandmarkInfo landmarkInfo}.
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.destroyLandmarkInfo = function() { return new sap.m.Page(); };

/**
 * Destroys the subHeader in the aggregation {@link #getSubHeader subHeader}.
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.destroySubHeader = function() { return new sap.m.Page(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:navButtonPress navButtonPress} event of this <code>sap.m.Page</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * @since 1.12.2
 * 
 * @public
 * 
 */
sap.m.Page.prototype.detachNavButtonPress = function(fnFunction,oListener) { return new sap.m.Page(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:navButtonTap navButtonTap} event of this <code>sap.m.Page</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.12.2.
 * the navButtonPress event is replacing this event
 * 
 * @public
 * 
 */
sap.m.Page.prototype.detachNavButtonTap = function(fnFunction,oListener) { return new sap.m.Page(); };

/**
 * Creates a new subclass of class sap.m.Page with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Page.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:navButtonPress navButtonPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.12.2
 * 
 */
sap.m.Page.prototype.fireNavButtonPress = function(mParameters) { return new sap.m.Page(); };

/**
 * Fires event {@link #event:navButtonTap navButtonTap} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 * @deprecated Since version 1.12.2.
 * the navButtonPress event is replacing this event
 * 
 */
sap.m.Page.prototype.fireNavButtonTap = function(mParameters) { return new sap.m.Page(); };

/**
 * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the value white, is used as default if not specified.
 * 
 * Default value is <code>Standard</code>.
 * @returns {sap.m.PageBackgroundDesign} Value of property <code>backgroundDesign</code>
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getBackgroundDesign = function() { return new sap.m.PageBackgroundDesign(); };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * The content of this page
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getContentOnlyBusy contentOnlyBusy}.
 * 
 * Decides which area is covered by the local BusyIndicator when <code>page.setBusy()</code> is called. By default the entire page is covered, including headers and footer. When this property is set to "true", only the content area is covered (not header/sub header and footer), which is useful e.g. when there is a SearchField in the sub header and live search continuously updates the content area while the user is still able to type.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>contentOnlyBusy</code>
 * @since 1.29.0
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getContentOnlyBusy = function() { return false; };

/**
 * Gets content of aggregation {@link #getCustomHeader customHeader}.
 * 
 * The (optional) custom header of this page.
 * Use this aggregation only when a custom header is constructed where the default header consisting of title text + nav button is not sufficient.
 * If this aggregation is set, the simple properties "title", "showNavButton", "NavButtonText" and "icon" are not used.
 * 
 * @returns {sap.m.IBar}
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getCustomHeader = function() { return new sap.m.IBar(); };

/**
 * Gets current value of property {@link #getEnableScrolling enableScrolling}.
 * 
 * Enable vertical scrolling of page contents. Page headers and footers are fixed and do not scroll.
 * If set to false, there will be no scrolling at all.
 * 
 * The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enableScrolling</code>
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getEnableScrolling = function() { return false; };

/**
 * Gets current value of property {@link #getFloatingFooter floatingFooter}.
 * 
 * Decides whether the floating footer behavior should be enabled.
 * When the floating footer behavior is used, the content is visible when it's underneath the footer.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>floatingFooter</code>
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getFloatingFooter = function() { return false; };

/**
 * Gets content of aggregation {@link #getFooter footer}.
 * 
 * The (optional) footer of this page. It is always located at the bottom of the page
 * 
 * @returns {sap.m.IBar}
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getFooter = function() { return new sap.m.IBar(); };

/**
 * Gets content of aggregation {@link #getHeaderContent headerContent}.
 * 
 * Controls to be added to the right side of the page header. Usually an application would use Button controls and limit the number to one when the application needs to run on smartphones. There is no automatic overflow handling when the space is insufficient.
 * When a customHeader is used, this aggregation will be ignored.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getHeaderContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * the icon that is rendered in the page header bar in non-iOS phone/tablet platforms. This property is theme-dependent and only has an effect in the MVI theme.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @deprecated Since version 1.20.
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets content of aggregation {@link #getLandmarkInfo landmarkInfo}.
 * 
 * Accessible landmark settings to be applied on the containers of the <code>sap.m.Page</code> control.
 * 
 * If not set, no landmarks will be written.
 * 
 * @returns {sap.m.PageAccessibleLandmarkInfo}
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getLandmarkInfo = function() { return new sap.m.PageAccessibleLandmarkInfo(); };

/**
 * Returns a metadata object for class sap.m.Page.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Page.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getNavButtonText navButtonText}.
 * 
 * The text of the nav button when running in iOS (if shown) in case it deviates from the default, which is "Back". This property is mvi-theme-dependent and will not have any effect in other themes.
 * 
 * @returns {string} Value of property <code>navButtonText</code>
 * 
 * @deprecated Since version 1.20.
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getNavButtonText = function() { return ""; };

/**
 * Gets current value of property {@link #getNavButtonTooltip navButtonTooltip}.
 * 
 * The tooltip of the nav button
 * 
 * Since version 1.34
 * 
 * @returns {string} Value of property <code>navButtonTooltip</code>
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getNavButtonTooltip = function() { return ""; };

/**
 * Gets current value of property {@link #getNavButtonType navButtonType}.
 * 
 * This property is used to set the appearance of the NavButton. By default when showNavButton is set to true, a back button will be shown in iOS and an up button in other platforms. In case you want to show a normal button in the left header area, you can set the value to "Default".
 * 
 * Default value is <code>Back</code>.
 * @returns {sap.m.ButtonType} Value of property <code>navButtonType</code>
 * @since 1.12
 * @deprecated Since version 1.20.
 * Deprecated since the MVI theme is removed now. This property is only usable with a Button text in that theme.
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getNavButtonType = function() { return new sap.m.ButtonType(); };

/**
 * Gets current value of property {@link #getShowFooter showFooter}.
 * 
 * Whether this page shall have a footer
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showFooter</code>
 * @since 1.13.1
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getShowFooter = function() { return false; };

/**
 * Gets current value of property {@link #getShowHeader showHeader}.
 * 
 * Whether this page shall have a header.
 * If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showHeader</code>
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getShowHeader = function() { return false; };

/**
 * Gets current value of property {@link #getShowNavButton showNavButton}.
 * 
 * A nav button will be rendered on the left area of header bar if this property is set to true.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showNavButton</code>
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getShowNavButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowSubHeader showSubHeader}.
 * 
 * Whether this page shall show the subheader.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showSubHeader</code>
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getShowSubHeader = function() { return false; };

/**
 * Gets content of aggregation {@link #getSubHeader subHeader}.
 * 
 * a subHeader will be rendered directly under the header
 * 
 * @returns {sap.m.IBar}
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getSubHeader = function() { return new sap.m.IBar(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * The title text appearing in the page header bar.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getTitleLevel titleLevel}.
 * 
 * Defines the semantic level of the title. Using "Auto" no explicit level information is written.
 * Used for accessibility purposes only.
 * 
 * Default value is <code>Auto</code>.
 * @returns {sap.ui.core.TitleLevel} Value of property <code>titleLevel</code>
 * 
 * @public
 * 
 */
sap.m.Page.prototype.getTitleLevel = function() { return new sap.ui.core.TitleLevel(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Page.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getHeaderContent headerContent}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oHeaderContent The headerContent whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Page.prototype.indexOfHeaderContent = function(oHeaderContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Page(); };

/**
 * Inserts a headerContent into the aggregation {@link #getHeaderContent headerContent}.
 * 
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the headerContent should be inserted at; for
 *              a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the headerContent is inserted at
 *              the last position
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.insertHeaderContent = function(oHeaderContent,iIndex) { return new sap.m.Page(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Page.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getHeaderContent headerContent}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Page.prototype.removeAllHeaderContent = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Page.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Removes a headerContent from the aggregation {@link #getHeaderContent headerContent}.
 * 
 * @param {int | string | sap.ui.core.Control} vHeaderContent The headerContent to remove or its index or id
 * @returns {sap.ui.core.Control} The removed headerContent or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Page.prototype.removeHeaderContent = function(vHeaderContent) { return new sap.ui.core.Control(); };

/**
 * Scrolls to the given position. Only available if enableScrolling is set to "true".
 * 
 * @param {int} y The vertical pixel position to scroll to. Scrolling down happens with positive values.
 * @param {int} time The duration of animated scrolling. To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.
 * @type sap.m.Page
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Page.prototype.scrollTo = function(y,time) { return new sap.m.Page(); };

/**
 * Scrolls to an element(DOM or sap.ui.core.Element) within the page if the element is rendered.
 * @param {HTMLElement | sap.ui.core.Element} oElement The element to which should be scrolled.
 * @param {int} [iTime=0] The duration of animated scrolling. To scroll immediately without animation, give 0 as value or leave it default.
 * @returns {sap.m.Page} <code>this</code> to facilitate method chaining.
 * @since 1.30
 * @public
 * 
 */
sap.m.Page.prototype.scrollToElement = function(oElement,iTime) { return new sap.m.Page(); };

/**
 * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the value white, is used as default if not specified.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Standard</code>.
 * @param {sap.m.PageBackgroundDesign} sBackgroundDesign New value for property <code>backgroundDesign</code>
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.Page(); };

/**
 * Sets a new value for property {@link #getContentOnlyBusy contentOnlyBusy}.
 * 
 * Decides which area is covered by the local BusyIndicator when <code>page.setBusy()</code> is called. By default the entire page is covered, including headers and footer. When this property is set to "true", only the content area is covered (not header/sub header and footer), which is useful e.g. when there is a SearchField in the sub header and live search continuously updates the content area while the user is still able to type.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bContentOnlyBusy New value for property <code>contentOnlyBusy</code>
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * @since 1.29.0
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setContentOnlyBusy = function(bContentOnlyBusy) { return new sap.m.Page(); };

/**
 * Sets a new value for property {@link #getEnableScrolling enableScrolling}.
 * 
 * Enable vertical scrolling of page contents. Page headers and footers are fixed and do not scroll.
 * If set to false, there will be no scrolling at all.
 * 
 * The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableScrolling New value for property <code>enableScrolling</code>
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setEnableScrolling = function(bEnableScrolling) { return new sap.m.Page(); };

/**
 * Sets a new value for property {@link #getFloatingFooter floatingFooter}.
 * 
 * Decides whether the floating footer behavior should be enabled.
 * When the floating footer behavior is used, the content is visible when it's underneath the footer.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bFloatingFooter New value for property <code>floatingFooter</code>
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setFloatingFooter = function(bFloatingFooter) { return new sap.m.Page(); };

/**
 * Sets the aggregated {@link #getFooter footer}.
 * @param {sap.m.IBar} oFooter The footer to set
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setFooter = function(oFooter) { return new sap.m.Page(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * the icon that is rendered in the page header bar in non-iOS phone/tablet platforms. This property is theme-dependent and only has an effect in the MVI theme.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.20.
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setIcon = function(sIcon) { return new sap.m.Page(); };

/**
 * Sets the aggregated {@link #getLandmarkInfo landmarkInfo}.
 * @param {sap.m.PageAccessibleLandmarkInfo} oLandmarkInfo The landmarkInfo to set
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setLandmarkInfo = function(oLandmarkInfo) { return new sap.m.Page(); };

/**
 * Sets a new value for property {@link #getNavButtonText navButtonText}.
 * 
 * The text of the nav button when running in iOS (if shown) in case it deviates from the default, which is "Back". This property is mvi-theme-dependent and will not have any effect in other themes.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sNavButtonText New value for property <code>navButtonText</code>
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.20.
 * Deprecated since the MVI theme is removed now. This property only affected the NavButton in that theme.
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setNavButtonText = function(sNavButtonText) { return new sap.m.Page(); };

/**
 * Sets a new value for property {@link #getNavButtonTooltip navButtonTooltip}.
 * 
 * The tooltip of the nav button
 * 
 * Since version 1.34
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sNavButtonTooltip New value for property <code>navButtonTooltip</code>
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setNavButtonTooltip = function(sNavButtonTooltip) { return new sap.m.Page(); };

/**
 * Sets a new value for property {@link #getNavButtonType navButtonType}.
 * 
 * This property is used to set the appearance of the NavButton. By default when showNavButton is set to true, a back button will be shown in iOS and an up button in other platforms. In case you want to show a normal button in the left header area, you can set the value to "Default".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Back</code>.
 * @param {sap.m.ButtonType} sNavButtonType New value for property <code>navButtonType</code>
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * @since 1.12
 * @deprecated Since version 1.20.
 * Deprecated since the MVI theme is removed now. This property is only usable with a Button text in that theme.
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setNavButtonType = function(sNavButtonType) { return new sap.m.Page(); };

/**
 * Sets a new value for property {@link #getShowFooter showFooter}.
 * 
 * Whether this page shall have a footer
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowFooter New value for property <code>showFooter</code>
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * @since 1.13.1
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setShowFooter = function(bShowFooter) { return new sap.m.Page(); };

/**
 * Sets a new value for property {@link #getShowHeader showHeader}.
 * 
 * Whether this page shall have a header.
 * If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowHeader New value for property <code>showHeader</code>
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setShowHeader = function(bShowHeader) { return new sap.m.Page(); };

/**
 * Sets a new value for property {@link #getShowNavButton showNavButton}.
 * 
 * A nav button will be rendered on the left area of header bar if this property is set to true.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowNavButton New value for property <code>showNavButton</code>
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setShowNavButton = function(bShowNavButton) { return new sap.m.Page(); };

/**
 * Sets a new value for property {@link #getShowSubHeader showSubHeader}.
 * 
 * Whether this page shall show the subheader.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowSubHeader New value for property <code>showSubHeader</code>
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setShowSubHeader = function(bShowSubHeader) { return new sap.m.Page(); };

/**
 * Sets the aggregated {@link #getSubHeader subHeader}.
 * @param {sap.m.IBar} oSubHeader The subHeader to set
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setSubHeader = function(oSubHeader) { return new sap.m.Page(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * The title text appearing in the page header bar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setTitle = function(sTitle) { return new sap.m.Page(); };

/**
 * Sets a new value for property {@link #getTitleLevel titleLevel}.
 * 
 * Defines the semantic level of the title. Using "Auto" no explicit level information is written.
 * Used for accessibility purposes only.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Auto</code>.
 * @param {sap.ui.core.TitleLevel} sTitleLevel New value for property <code>titleLevel</code>
 * @returns {sap.m.Page} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Page.prototype.setTitleLevel = function(sTitleLevel) { return new sap.m.Page(); };


// ---- sap.m.PageAccessibleLandmarkInfo --------------------------------------------------------------------------

/**
 * Constructor for a new <code>sap.m.PageAccessibleLandmarkInfo</code> element.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRootRole rootRole} : sap.ui.core.AccessibleLandmarkRole (default: Region)</li>
 * <li>{@link #getRootLabel rootLabel} : string</li>
 * <li>{@link #getContentRole contentRole} : sap.ui.core.AccessibleLandmarkRole (default: Main)</li>
 * <li>{@link #getContentLabel contentLabel} : string</li>
 * <li>{@link #getHeaderRole headerRole} : sap.ui.core.AccessibleLandmarkRole (default: Region)</li>
 * <li>{@link #getHeaderLabel headerLabel} : string</li>
 * <li>{@link #getSubHeaderRole subHeaderRole} : sap.ui.core.AccessibleLandmarkRole</li>
 * <li>{@link #getSubHeaderLabel subHeaderLabel} : string</li>
 * <li>{@link #getFooterRole footerRole} : sap.ui.core.AccessibleLandmarkRole (default: Region)</li>
 * <li>{@link #getFooterLabel footerLabel} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] Id for the new element, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new element
 * 
 * @class
 * Settings for accessible landmarks which can be applied to the container elements of a <code>sap.m.Page</code> control.
 * These landmarks are e.g. used by assistive technologies (like screenreaders) to provide a meaningful page overview.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.PageAccessibleLandmarkInfo = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.PageAccessibleLandmarkInfo with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.PageAccessibleLandmarkInfo.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getContentLabel contentLabel}.
 * 
 * Texts which describes the landmark of the content container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
 * is used.
 * 
 * @returns {string} Value of property <code>contentLabel</code>
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.getContentLabel = function() { return ""; };

/**
 * Gets current value of property {@link #getContentRole contentRole}.
 * 
 * Landmark role of the content container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
 * 
 * Default value is <code>Main</code>.
 * @returns {sap.ui.core.AccessibleLandmarkRole} Value of property <code>contentRole</code>
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.getContentRole = function() { return new sap.ui.core.AccessibleLandmarkRole(); };

/**
 * Gets current value of property {@link #getFooterLabel footerLabel}.
 * 
 * Texts which describes the landmark of the header container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
 * is used.
 * 
 * @returns {string} Value of property <code>footerLabel</code>
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.getFooterLabel = function() { return ""; };

/**
 * Gets current value of property {@link #getFooterRole footerRole}.
 * 
 * Landmark role of the footer container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
 * 
 * Default value is <code>Region</code>.
 * @returns {sap.ui.core.AccessibleLandmarkRole} Value of property <code>footerRole</code>
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.getFooterRole = function() { return new sap.ui.core.AccessibleLandmarkRole(); };

/**
 * Gets current value of property {@link #getHeaderLabel headerLabel}.
 * 
 * Texts which describes the landmark of the header container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
 * is used.
 * 
 * @returns {string} Value of property <code>headerLabel</code>
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.getHeaderLabel = function() { return ""; };

/**
 * Gets current value of property {@link #getHeaderRole headerRole}.
 * 
 * Landmark role of the header container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
 * 
 * Default value is <code>Region</code>.
 * @returns {sap.ui.core.AccessibleLandmarkRole} Value of property <code>headerRole</code>
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.getHeaderRole = function() { return new sap.ui.core.AccessibleLandmarkRole(); };

/**
 * Returns a metadata object for class sap.m.PageAccessibleLandmarkInfo.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.PageAccessibleLandmarkInfo.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getRootLabel rootLabel}.
 * 
 * Texts which describes the landmark of the root container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
 * is used.
 * 
 * @returns {string} Value of property <code>rootLabel</code>
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.getRootLabel = function() { return ""; };

/**
 * Gets current value of property {@link #getRootRole rootRole}.
 * 
 * Landmark role of the root container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
 * 
 * Default value is <code>Region</code>.
 * @returns {sap.ui.core.AccessibleLandmarkRole} Value of property <code>rootRole</code>
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.getRootRole = function() { return new sap.ui.core.AccessibleLandmarkRole(); };

/**
 * Gets current value of property {@link #getSubHeaderLabel subHeaderLabel}.
 * 
 * Texts which describes the landmark of the subheader container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
 * is used.
 * 
 * @returns {string} Value of property <code>subHeaderLabel</code>
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.getSubHeaderLabel = function() { return ""; };

/**
 * Gets current value of property {@link #getSubHeaderRole subHeaderRole}.
 * 
 * Landmark role of the subheader container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
 * 
 * @returns {sap.ui.core.AccessibleLandmarkRole} Value of property <code>subHeaderRole</code>
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.getSubHeaderRole = function() { return new sap.ui.core.AccessibleLandmarkRole(); };

/**
 * Sets a new value for property {@link #getContentLabel contentLabel}.
 * 
 * Texts which describes the landmark of the content container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
 * is used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sContentLabel New value for property <code>contentLabel</code>
 * @returns {sap.m.PageAccessibleLandmarkInfo} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.setContentLabel = function(sContentLabel) { return new sap.m.PageAccessibleLandmarkInfo(); };

/**
 * Sets a new value for property {@link #getContentRole contentRole}.
 * 
 * Landmark role of the content container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Main</code>.
 * @param {sap.ui.core.AccessibleLandmarkRole} sContentRole New value for property <code>contentRole</code>
 * @returns {sap.m.PageAccessibleLandmarkInfo} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.setContentRole = function(sContentRole) { return new sap.m.PageAccessibleLandmarkInfo(); };

/**
 * Sets a new value for property {@link #getFooterLabel footerLabel}.
 * 
 * Texts which describes the landmark of the header container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
 * is used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sFooterLabel New value for property <code>footerLabel</code>
 * @returns {sap.m.PageAccessibleLandmarkInfo} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.setFooterLabel = function(sFooterLabel) { return new sap.m.PageAccessibleLandmarkInfo(); };

/**
 * Sets a new value for property {@link #getFooterRole footerRole}.
 * 
 * Landmark role of the footer container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Region</code>.
 * @param {sap.ui.core.AccessibleLandmarkRole} sFooterRole New value for property <code>footerRole</code>
 * @returns {sap.m.PageAccessibleLandmarkInfo} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.setFooterRole = function(sFooterRole) { return new sap.m.PageAccessibleLandmarkInfo(); };

/**
 * Sets a new value for property {@link #getHeaderLabel headerLabel}.
 * 
 * Texts which describes the landmark of the header container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
 * is used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sHeaderLabel New value for property <code>headerLabel</code>
 * @returns {sap.m.PageAccessibleLandmarkInfo} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.setHeaderLabel = function(sHeaderLabel) { return new sap.m.PageAccessibleLandmarkInfo(); };

/**
 * Sets a new value for property {@link #getHeaderRole headerRole}.
 * 
 * Landmark role of the header container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Region</code>.
 * @param {sap.ui.core.AccessibleLandmarkRole} sHeaderRole New value for property <code>headerRole</code>
 * @returns {sap.m.PageAccessibleLandmarkInfo} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.setHeaderRole = function(sHeaderRole) { return new sap.m.PageAccessibleLandmarkInfo(); };

/**
 * Sets a new value for property {@link #getRootLabel rootLabel}.
 * 
 * Texts which describes the landmark of the root container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
 * is used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sRootLabel New value for property <code>rootLabel</code>
 * @returns {sap.m.PageAccessibleLandmarkInfo} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.setRootLabel = function(sRootLabel) { return new sap.m.PageAccessibleLandmarkInfo(); };

/**
 * Sets a new value for property {@link #getRootRole rootRole}.
 * 
 * Landmark role of the root container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Region</code>.
 * @param {sap.ui.core.AccessibleLandmarkRole} sRootRole New value for property <code>rootRole</code>
 * @returns {sap.m.PageAccessibleLandmarkInfo} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.setRootRole = function(sRootRole) { return new sap.m.PageAccessibleLandmarkInfo(); };

/**
 * Sets a new value for property {@link #getSubHeaderLabel subHeaderLabel}.
 * 
 * Texts which describes the landmark of the subheader container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
 * is used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSubHeaderLabel New value for property <code>subHeaderLabel</code>
 * @returns {sap.m.PageAccessibleLandmarkInfo} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.setSubHeaderLabel = function(sSubHeaderLabel) { return new sap.m.PageAccessibleLandmarkInfo(); };

/**
 * Sets a new value for property {@link #getSubHeaderRole subHeaderRole}.
 * 
 * Landmark role of the subheader container of the corresponding <code>sap.m.Page</code> control.
 * 
 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.AccessibleLandmarkRole} sSubHeaderRole New value for property <code>subHeaderRole</code>
 * @returns {sap.m.PageAccessibleLandmarkInfo} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PageAccessibleLandmarkInfo.prototype.setSubHeaderRole = function(sSubHeaderRole) { return new sap.m.PageAccessibleLandmarkInfo(); };


// ---- sap.m.PageBackgroundDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.PageBackgroundDesign.toString = function() { return ""; };

// ---- sap.m.PagingButton --------------------------------------------------------------------------

/**
 * Constructor for a new PagingButton.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getCount count} : int (default: 1)</li>
 * <li>{@link #getPosition position} : int (default: 1)</li>
 * <li>{@link #getNextButtonTooltip nextButtonTooltip} : string (default: )</li>
 * <li>{@link #getPreviousButtonTooltip previousButtonTooltip} : string (default: )</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:positionChange positionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Enables users to navigate between items/entities.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.PagingButton = function(sId,mSettings) {};
/**
 * Fired when the current position is changed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.newPosition The number of the new position.
 * @param {int} oControlEvent.getParameters.oldPosition The number of the old position.
 * @public
 * 
 */
sap.m.PagingButton.prototype.positionChange = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:positionChange positionChange} event of this <code>sap.m.PagingButton</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.PagingButton</code> itself.
 * 
 * Fired when the current position is changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.PagingButton</code> itself
 * 
 * @returns {sap.m.PagingButton} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.PagingButton.prototype.attachPositionChange = function(oData,fnFunction,oListener) { return new sap.m.PagingButton(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:positionChange positionChange} event of this <code>sap.m.PagingButton</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.PagingButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PagingButton.prototype.detachPositionChange = function(fnFunction,oListener) { return new sap.m.PagingButton(); };

/**
 * Creates a new subclass of class sap.m.PagingButton with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.PagingButton.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:positionChange positionChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {int} [mParameters.newPosition] The number of the new position.
 * @param {int} [mParameters.oldPosition] The number of the old position.
 * 
 * @returns {sap.m.PagingButton} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.PagingButton.prototype.firePositionChange = function(mParameters) { return new sap.m.PagingButton(); };

/**
 * Gets current value of property {@link #getCount count}.
 * 
 * Determines the total count of items/entities that the control navigates through.
 * The minimum number of items/entities is 1.
 * 
 * Default value is <code>1</code>.
 * @returns {int} Value of property <code>count</code>
 * 
 * @public
 * 
 */
sap.m.PagingButton.prototype.getCount = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.PagingButton.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.PagingButton.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getNextButtonTooltip nextButtonTooltip}.
 * 
 * Determines the tooltip of the next button.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>nextButtonTooltip</code>
 * @since 1.36
 * 
 * @public
 * 
 */
sap.m.PagingButton.prototype.getNextButtonTooltip = function() { return ""; };

/**
 * Gets current value of property {@link #getPosition position}.
 * 
 * Determines the current position in the items/entities that the control navigates through.
 * Starting (minimum) number is 1.
 * 
 * Default value is <code>1</code>.
 * @returns {int} Value of property <code>position</code>
 * 
 * @public
 * 
 */
sap.m.PagingButton.prototype.getPosition = function() { return 0; };

/**
 * Gets current value of property {@link #getPreviousButtonTooltip previousButtonTooltip}.
 * 
 * Determines the tooltip of the previous button.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>previousButtonTooltip</code>
 * @since 1.36
 * 
 * @public
 * 
 */
sap.m.PagingButton.prototype.getPreviousButtonTooltip = function() { return ""; };


// ---- sap.m.Panel --------------------------------------------------------------------------

/**
 * Constructor for a new Panel.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeaderText headerText} : string (default: )</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: auto)</li>
 * <li>{@link #getExpandable expandable} : boolean (default: false)</li>
 * <li>{@link #getExpanded expanded} : boolean (default: false)</li>
 * <li>{@link #getExpandAnimation expandAnimation} : boolean (default: true)</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: Translucent)</li>
 * <li>{@link #getAccessibleRole accessibleRole} : sap.m.PanelAccessibleRole (default: Form)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[] (default)</li>
 * <li>{@link #getHeaderToolbar headerToolbar} : sap.m.Toolbar</li>
 * <li>{@link #getInfoToolbar infoToolbar} : sap.m.Toolbar</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:expand expand} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A container control which has a header and content.
 * <h3>Overview</h3>
 * The panel is a container for grouping and displaying information. It can be collapsed to save space on the screen.
 * <h4>Guidelines:</h4>
 * <ul>
 * <li>Nesting two or more panels is not recommended.</li>
 * <li>Do not stack too many panels on one page.</li>
 * </ul>
 * <h3>Structure</h3>
 * A panel consists of a title bar with a header text or header toolbar, an info toolbar (optional), and a content area.
 * Using the <code>headerToolbar</code> aggregation, you can add a toolbar with any toolbar content (i.e. custom buttons, spacers, titles) inside the title bar.
 * 
 * There are two types of panels: fixed and expandable. Expendable panels are enabled by the <code>expandable</code> property.
 * Furthermore you can define an expand animation with the property <code>expandAnimation</code>.
 * <h3>Usage</h3>
 * <h4>When to use:</h4>
 * <ul>
 * <li>You need to group or display information and want to give users the option of hiding this information.</li>
 * <li>You want to show additional information on demand (for example, a panel could show optional input fields for an advanced search).</li>
 * <li>You want to create a panel with controls that do not require user interaction and are not part of a form. Depending on the usage, change the <code>accessibleRole</code> property from the default <code>{@link sap.m.PanelAccessibleRole Form}</code> to <code>{@link sap.m.PanelAccessibleRole Region}</code> or <code>{@link sap.m.PanelAccessibleRole Complementary}</code>.</li>
 * </ul>
 * <h3>Responsive Behavior</h3>
 * <ul>
 * <li>If the width of the panel is set to 100% (default), the panel and its children are resized responsively, depending on its parent container.</li>
 * <li>If the panel has a fixed defined height, it will take up the space, even if the panel is collapsed.</li>
 * <li>When the panel is expandable, an arrow icon (pointing to the right) appears in front of the header.</li>
 * <li>When the animation is activated, expand/collapse uses a smooth animation to open or close the content area.</li>
 * <li>When the panel expands/collapses, the arrow icon rotates 90 degrees clockwise/counter-clockwise.</li>
 * <li>When the height uses the default property <code>auto</code>, the height of the content area is automatically adjusted to match the height of its content.</li>
 * <li>When the height of the panel is set to a fixed size, the content area can be scrolled through.</li>
 * </ul>
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Panel = function(sId,mSettings) {};
/**
 * Indicates that the panel will expand or collapse.
 * @event
 * @since 1.22
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.expand If the panel will expand, this is true.
 * If the panel will collapse, this is false.
 * @public
 * 
 */
sap.m.Panel.prototype.expand = function(oControlEvent) {  };

/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.Panel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.addContent = function(oContent) { return new sap.m.Panel(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:expand expand} event of this <code>sap.m.Panel</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Panel</code> itself.
 * 
 * Indicates that the panel will expand or collapse.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Panel</code> itself
 * 
 * @returns {sap.m.Panel} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.22
 * 
 */
sap.m.Panel.prototype.attachExpand = function(oData,fnFunction,oListener) { return new sap.m.Panel(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.Panel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.destroyContent = function() { return new sap.m.Panel(); };

/**
 * Destroys the headerToolbar in the aggregation {@link #getHeaderToolbar headerToolbar}.
 * @returns {sap.m.Panel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.destroyHeaderToolbar = function() { return new sap.m.Panel(); };

/**
 * Destroys the infoToolbar in the aggregation {@link #getInfoToolbar infoToolbar}.
 * @returns {sap.m.Panel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.destroyInfoToolbar = function() { return new sap.m.Panel(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:expand expand} event of this <code>sap.m.Panel</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Panel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.detachExpand = function(fnFunction,oListener) { return new sap.m.Panel(); };

/**
 * Creates a new subclass of class sap.m.Panel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Panel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:expand expand} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.expand] If the panel will expand, this is true.
 * If the panel will collapse, this is false.
 * 
 * @returns {sap.m.Panel} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.22
 * 
 */
sap.m.Panel.prototype.fireExpand = function(mParameters) { return new sap.m.Panel(); };

/**
 * Gets current value of property {@link #getAccessibleRole accessibleRole}.
 * 
 * This property is used to set the accessible aria role of the Panel.
 * Depending on the usage you can change the role from the default <code>Form</code> to <code>Region</code> or <code>Complementary</code>.
 * 
 * Default value is <code>Form</code>.
 * @returns {sap.m.PanelAccessibleRole} Value of property <code>accessibleRole</code>
 * @since 1.46
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.getAccessibleRole = function() { return new sap.m.PanelAccessibleRole(); };

/**
 * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * This property is used to set the background color of the Panel.
 * Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".
 * 
 * Default value is <code>Translucent</code>.
 * @returns {sap.m.BackgroundDesign} Value of property <code>backgroundDesign</code>
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * Determines the content of the Panel.
 * The content will be visible only when the Panel is expanded.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.getContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getExpandable expandable}.
 * 
 * Specifies whether the control is expandable.
 * This allows for collapsing or expanding the infoToolbar (if available) and content of the Panel.
 * Note: If expandable is set to false, the Panel will always be rendered expanded.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>expandable</code>
 * @since 1.22
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.getExpandable = function() { return false; };

/**
 * Gets current value of property {@link #getExpandAnimation expandAnimation}.
 * 
 * Indicates whether the transition between the expanded and the collapsed state of the control is animated.
 * By default the animation is enabled.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>expandAnimation</code>
 * @since 1.26
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.getExpandAnimation = function() { return false; };

/**
 * Gets current value of property {@link #getExpanded expanded}.
 * 
 * Indicates whether the Panel is expanded or not.
 * If expanded is set to true, then both the infoToolbar (if available) and the content are rendered.
 * If expanded is set to false, then only the headerText or headerToolbar is rendered.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>expanded</code>
 * @since 1.22
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.getExpanded = function() { return false; };

/**
 * Gets current value of property {@link #getHeaderText headerText}.
 * 
 * This property is used to set the header text of the Panel.
 * The "headerText" is visible in both expanded and collapsed state.
 * Note: This property is overwritten by the "headerToolbar" aggregation.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>headerText</code>
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.getHeaderText = function() { return ""; };

/**
 * Gets content of aggregation {@link #getHeaderToolbar headerToolbar}.
 * 
 * This aggregation allows the use of a custom Toolbar as header for the Panel.
 * The "headerToolbar" is visible in both expanded and collapsed state.
 * Use it when you want to add extra controls for user interactions in the header.
 * Note: This aggregation overwrites "headerText" property.
 * 
 * @returns {sap.m.Toolbar}
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.getHeaderToolbar = function() { return new sap.m.Toolbar(); };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * Determines the Panel height.
 * 
 * Default value is <code>auto</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets content of aggregation {@link #getInfoToolbar infoToolbar}.
 * 
 * This aggregation allows the use of a custom Toolbar as information bar for the Panel.
 * The "infoToolbar" is placed below the header and is visible only in expanded state.
 * Use it when you want to show extra information to the user.
 * 
 * @returns {sap.m.Toolbar}
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.getInfoToolbar = function() { return new sap.m.Toolbar(); };

/**
 * Returns a metadata object for class sap.m.Panel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Panel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Determines the Panel width.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.Panel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Panel(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Sets the accessibleRole property of the control.
 * @param {sap.m.PanelAccessibleRole} sRole Defines the aria role of the control.
 * @returns {sap.m.Panel} Pointer to the control instance to allow method chaining.
 * @public
 * 
 */
sap.m.Panel.prototype.setAccessibleRole = function(sRole) { return new sap.m.Panel(); };

/**
 * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * This property is used to set the background color of the Panel.
 * Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Translucent</code>.
 * @param {sap.m.BackgroundDesign} sBackgroundDesign New value for property <code>backgroundDesign</code>
 * @returns {sap.m.Panel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.Panel(); };

/**
 * Sets the expandable property of the control.
 * @param {boolean} bExpandable Defines whether the control is expandable or not.
 * @returns {sap.m.Panel} Pointer to the control instance to allow method chaining.
 * @public
 * 
 */
sap.m.Panel.prototype.setExpandable = function(bExpandable) { return new sap.m.Panel(); };

/**
 * Sets a new value for property {@link #getExpandAnimation expandAnimation}.
 * 
 * Indicates whether the transition between the expanded and the collapsed state of the control is animated.
 * By default the animation is enabled.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bExpandAnimation New value for property <code>expandAnimation</code>
 * @returns {sap.m.Panel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.setExpandAnimation = function(bExpandAnimation) { return new sap.m.Panel(); };

/**
 * Sets the expanded property of the control.
 * @param {boolean} bExpanded Defines whether control is expanded or not.
 * @returns {sap.m.Panel} Pointer to the control instance to allow method chaining.
 * @public
 * 
 */
sap.m.Panel.prototype.setExpanded = function(bExpanded) { return new sap.m.Panel(); };

/**
 * Sets a new value for property {@link #getHeaderText headerText}.
 * 
 * This property is used to set the header text of the Panel.
 * The "headerText" is visible in both expanded and collapsed state.
 * Note: This property is overwritten by the "headerToolbar" aggregation.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sHeaderText New value for property <code>headerText</code>
 * @returns {sap.m.Panel} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.setHeaderText = function(sHeaderText) { return new sap.m.Panel(); };

/**
 * Sets the aggregated {@link #getHeaderToolbar headerToolbar}.
 * @param {sap.m.Toolbar} oHeaderToolbar The headerToolbar to set
 * @returns {sap.m.Panel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.setHeaderToolbar = function(oHeaderToolbar) { return new sap.m.Panel(); };

/**
 * Sets the height of the panel.
 * @param {sap.ui.core.CSSSize} sHeight The height of the panel as CSS size.
 * @returns {sap.m.Panel} Pointer to the control instance to allow method chaining.
 * @public
 * 
 */
sap.m.Panel.prototype.setHeight = function(sHeight) { return new sap.m.Panel(); };

/**
 * Sets the aggregated {@link #getInfoToolbar infoToolbar}.
 * @param {sap.m.Toolbar} oInfoToolbar The infoToolbar to set
 * @returns {sap.m.Panel} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Panel.prototype.setInfoToolbar = function(oInfoToolbar) { return new sap.m.Panel(); };

/**
 * Sets the width of the panel.
 * @param {sap.ui.core.CSSSize} sWidth The width of the Panel as CSS size.
 * @returns {sap.m.Panel} Pointer to the control instance to allow method chaining.
 * @public
 * 
 */
sap.m.Panel.prototype.setWidth = function(sWidth) { return new sap.m.Panel(); };


// ---- sap.m.PanelAccessibleRole --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.PanelAccessibleRole.toString = function() { return ""; };

// ---- sap.m.PDFViewer --------------------------------------------------------------------------

/**
 * Definition of PDFViewer control
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getSource source} : sap.ui.core.URI</li>
 * <li>{@link #getErrorMessage errorMessage} : string</li>
 * <li>{@link #getErrorPlaceholderMessage errorPlaceholderMessage} : string</li>
 * <li>{@link #getPopupHeaderTitle popupHeaderTitle} : string</li>
 * <li>{@link #getTitle title} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getErrorPlaceholder errorPlaceholder} : sap.ui.core.Control</li>
 * <li>{@link #getPopupButtons popupButtons} : sap.m.Button[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:loaded loaded} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:error error} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:sourceValidationFailed sourceValidationFailed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Allow displaying of pdf files and provides useful API.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.PDFViewer = function(sId,mSettings) {};
/**
 * This event is fired when there is an error loading the PDF file.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.PDFViewer.prototype.error = function(oControlEvent) {  };

/**
 * This event is fired when a PDF file is loaded. If the PDF is loaded in smaller chunks,
 * this event is fired as often as defined by the browser's plugin. This may happen after
 * a couple chunks are processed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.PDFViewer.prototype.loaded = function(oControlEvent) {  };

/**
 * This event is fired when the PDF viewer control cannot check the loaded content. For
 * example, the default configuration of the Mozilla Firefox browser may not allow checking
 * the loaded content. This may also happen when the source PDF file is stored in a different
 * domain.
 * If you want no error message to be displayed when this event is fired, call the
 * preventDefault() method inside the event handler.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.PDFViewer.prototype.sourceValidationFailed = function(oControlEvent) {  };

/**
 * Adds some popupButton to the aggregation {@link #getPopupButtons popupButtons}.
 * @param {sap.m.Button}
 *            oPopupButton the popupButton to add; if empty, nothing is inserted
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.addPopupButton = function(oPopupButton) { return new sap.m.PDFViewer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:error error} event of this <code>sap.m.PDFViewer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.PDFViewer</code> itself.
 * 
 * This event is fired when there is an error loading the PDF file.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.PDFViewer</code> itself
 * 
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.PDFViewer.prototype.attachError = function(oData,fnFunction,oListener) { return new sap.m.PDFViewer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:loaded loaded} event of this <code>sap.m.PDFViewer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.PDFViewer</code> itself.
 * 
 * This event is fired when a PDF file is loaded. If the PDF is loaded in smaller chunks,
 * this event is fired as often as defined by the browser's plugin. This may happen after
 * a couple chunks are processed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.PDFViewer</code> itself
 * 
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.PDFViewer.prototype.attachLoaded = function(oData,fnFunction,oListener) { return new sap.m.PDFViewer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:sourceValidationFailed sourceValidationFailed} event of this <code>sap.m.PDFViewer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.PDFViewer</code> itself.
 * 
 * This event is fired when the PDF viewer control cannot check the loaded content. For
 * example, the default configuration of the Mozilla Firefox browser may not allow checking
 * the loaded content. This may also happen when the source PDF file is stored in a different
 * domain.
 * If you want no error message to be displayed when this event is fired, call the
 * preventDefault() method inside the event handler.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.PDFViewer</code> itself
 * 
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.PDFViewer.prototype.attachSourceValidationFailed = function(oData,fnFunction,oListener) { return new sap.m.PDFViewer(); };

/**
 * Destroys the errorPlaceholder in the aggregation {@link #getErrorPlaceholder errorPlaceholder}.
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.destroyErrorPlaceholder = function() { return new sap.m.PDFViewer(); };

/**
 * Destroys all the popupButtons in the aggregation {@link #getPopupButtons popupButtons}.
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.destroyPopupButtons = function() { return new sap.m.PDFViewer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:error error} event of this <code>sap.m.PDFViewer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.detachError = function(fnFunction,oListener) { return new sap.m.PDFViewer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:loaded loaded} event of this <code>sap.m.PDFViewer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.detachLoaded = function(fnFunction,oListener) { return new sap.m.PDFViewer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:sourceValidationFailed sourceValidationFailed} event of this <code>sap.m.PDFViewer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.detachSourceValidationFailed = function(fnFunction,oListener) { return new sap.m.PDFViewer(); };

/**
 * Creates a new subclass of class sap.m.PDFViewer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.PDFViewer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:error error} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.PDFViewer.prototype.fireError = function(mParameters) { return new sap.m.PDFViewer(); };

/**
 * Fires event {@link #event:loaded loaded} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.PDFViewer.prototype.fireLoaded = function(mParameters) { return new sap.m.PDFViewer(); };

/**
 * Fires event {@link #event:sourceValidationFailed sourceValidationFailed} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.PDFViewer.prototype.fireSourceValidationFailed = function(mParameters) { return new sap.m.PDFViewer(); };

/**
 * Gets current value of property {@link #getErrorMessage errorMessage}.
 * 
 * A custom error message that is displayed when the PDF file cannot be loaded.
 * 
 * @returns {string} Value of property <code>errorMessage</code>
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.getErrorMessage = function() { return ""; };

/**
 * Gets content of aggregation {@link #getErrorPlaceholder errorPlaceholder}.
 * 
 * A custom control that can be used instead of the error message specified by the
 * errorPlaceholderMessage property.
 * 
 * @returns {sap.ui.core.Control}
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.getErrorPlaceholder = function() { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getErrorPlaceholderMessage errorPlaceholderMessage}.
 * 
 * A custom text that is displayed instead of the PDF file content when the PDF
 * file cannot be loaded.
 * 
 * @returns {string} Value of property <code>errorPlaceholderMessage</code>
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.getErrorPlaceholderMessage = function() { return ""; };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * Defines the height of the PDF viewer control, respective to the height of
 * the parent container. Can be set to a percent, pixel, or em value.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.PDFViewer.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.PDFViewer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getPopupButtons popupButtons}.
 * 
 * A multiple aggregation for buttons that can be added to the footer of the popup
 * dialog. Works only if the PDF viewer is set to open in a popup dialog.
 * 
 * @returns {sap.m.Button[]}
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.getPopupButtons = function() { return new Array(); };

/**
 * Gets current value of property {@link #getPopupHeaderTitle popupHeaderTitle}.
 * 
 * A custom title for the PDF viewer popup dialog. Works only if the PDF viewer
 * is set to open in a popup dialog.
 * 
 * @returns {string} Value of property <code>popupHeaderTitle</code>
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.getPopupHeaderTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getSource source}.
 * 
 * Specifies the path to the PDF file to display. Can be set to a relative or
 * an absolute path.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>source</code>
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.getSource = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * A custom title for the PDF viewer. Works only if the PDF viewer is embedded in
 * the layout.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the PDF viewer control, respective to the width of the
 * parent container. Can be set to a percent, pixel, or em value.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation {@link #getPopupButtons popupButtons}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Button}
 *           oPopupButton The popupButton whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.indexOfPopupButton = function(oPopupButton) { return 0; };

/**
 * Inserts a popupButton into the aggregation {@link #getPopupButtons popupButtons}.
 * 
 * @param {sap.m.Button}
 *            oPopupButton the popupButton to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the popupButton should be inserted at; for
 *              a negative value of <code>iIndex</code>, the popupButton is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the popupButton is inserted at
 *              the last position
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.insertPopupButton = function(oPopupButton,iIndex) { return new sap.m.PDFViewer(); };

/**
 * Opens up the dialog with pdf viewer inside it
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.open = function() {  };

/**
 * Removes all the controls from the aggregation {@link #getPopupButtons popupButtons}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Button[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.removeAllPopupButtons = function() { return new Array(); };

/**
 * Removes a popupButton from the aggregation {@link #getPopupButtons popupButtons}.
 * 
 * @param {int | string | sap.m.Button} vPopupButton The popupButton to remove or its index or id
 * @returns {sap.m.Button} The removed popupButton or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.removePopupButton = function(vPopupButton) { return new sap.m.Button(); };

/**
 * Sets a new value for property {@link #getErrorMessage errorMessage}.
 * 
 * A custom error message that is displayed when the PDF file cannot be loaded.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sErrorMessage New value for property <code>errorMessage</code>
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.setErrorMessage = function(sErrorMessage) { return new sap.m.PDFViewer(); };

/**
 * Sets the aggregated {@link #getErrorPlaceholder errorPlaceholder}.
 * @param {sap.ui.core.Control} oErrorPlaceholder The errorPlaceholder to set
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.setErrorPlaceholder = function(oErrorPlaceholder) { return new sap.m.PDFViewer(); };

/**
 * Sets a new value for property {@link #getErrorPlaceholderMessage errorPlaceholderMessage}.
 * 
 * A custom text that is displayed instead of the PDF file content when the PDF
 * file cannot be loaded.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sErrorPlaceholderMessage New value for property <code>errorPlaceholderMessage</code>
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.setErrorPlaceholderMessage = function(sErrorPlaceholderMessage) { return new sap.m.PDFViewer(); };

/**
 * @param sHeight
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.setHeight = function(sHeight) {  };

/**
 * Sets a new value for property {@link #getPopupHeaderTitle popupHeaderTitle}.
 * 
 * A custom title for the PDF viewer popup dialog. Works only if the PDF viewer
 * is set to open in a popup dialog.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sPopupHeaderTitle New value for property <code>popupHeaderTitle</code>
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.setPopupHeaderTitle = function(sPopupHeaderTitle) { return new sap.m.PDFViewer(); };

/**
 * Sets a new value for property {@link #getSource source}.
 * 
 * Specifies the path to the PDF file to display. Can be set to a relative or
 * an absolute path.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sSource New value for property <code>source</code>
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.setSource = function(sSource) { return new sap.m.PDFViewer(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * A custom title for the PDF viewer. Works only if the PDF viewer is embedded in
 * the layout.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.PDFViewer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.setTitle = function(sTitle) { return new sap.m.PDFViewer(); };

/**
 * @param sWidth
 * 
 * @public
 * 
 */
sap.m.PDFViewer.prototype.setWidth = function(sWidth) {  };


// ---- sap.m.PlacementType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.PlacementType.toString = function() { return ""; };

// ---- sap.m.PlanningCalendar --------------------------------------------------------------------------

/**
 * Constructor for a new <code>PlanningCalendar</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getStartDate startDate} : object</li>
 * <li>{@link #getViewKey viewKey} : string (default: sap.ui.unified.CalendarIntervalType.Hour)</li>
 * <li>{@link #getSingleSelection singleSelection} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getShowIntervalHeaders showIntervalHeaders} : boolean (default: true)</li>
 * <li>{@link #getShowEmptyIntervalHeaders showEmptyIntervalHeaders} : boolean (default: true)</li>
 * <li>{@link #getShowRowHeaders showRowHeaders} : boolean (default: true)</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getGroupAppointmentsMode groupAppointmentsMode} : sap.ui.unified.GroupAppointmentsMode (default: Collapsed)</li>
 * <li>{@link #getAppointmentsReducedHeight appointmentsReducedHeight} : boolean (default: false)</li>
 * <li>{@link #getAppointmentsVisualization appointmentsVisualization} : sap.ui.unified.CalendarAppointmentVisualization (default: Standard)</li>
 * <li>{@link #getMinDate minDate} : object</li>
 * <li>{@link #getMaxDate maxDate} : object</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getRows rows} : sap.m.PlanningCalendarRow[]</li>
 * <li>{@link #getViews views} : sap.m.PlanningCalendarView[]</li>
 * <li>{@link #getSpecialDates specialDates} : sap.ui.unified.DateTypeRange[]</li>
 * <li>{@link #getToolbarContent toolbarContent} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getLegend legend} : (sap.ui.core.ID | sap.ui.unified.CalendarLegend)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:appointmentSelect appointmentSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:intervalSelect intervalSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:rowSelectionChange rowSelectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:startDateChange startDateChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:viewChange viewChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:rowHeaderClick rowHeaderClick} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sID] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Displays rows with appointments for different entities (such as persons or teams) for the selected time interval.
 * 
 * <h3>Overview</h3>
 * 
 * You can use the <code>PlanningCalendar</code> to represent a calendar containing multiple rows with
 * appointments, where each row represents a different person.
 * 
 * You can configure different time-interval views that the user can switch between, such as hours or days, and even
 * a whole week/month. The available navigation allows the user to select a specific interval using a picker, or
 * move to the previous/next interval using arrows.
 * 
 * <b>Note:</b> The <code>PlanningCalendar</code> uses parts of the <code>sap.ui.unified</code> library.
 * This library will be loaded after the <code>PlanningCalendar</code>, if it wasn't loaded first.
 * This could lead to a waiting time when a <code>PlanningCalendar</code> is used for the first time.
 * To prevent this, apps that use the <code>PlanningCalendar</code> should also load the
 * <code>sap.ui.unified</code> library.
 * 
 * <h3>Usage</h3>
 * 
 * The <code>PlanningCalendar</code> has the following structure from top to bottom:
 * 
 * <ul>
 * <li>A toolbar where you can add your own buttons or other controls using the <code>toolbarContent</code> aggregation.</li>
 * <li>A header containing a drop-down menu for selecting the {@link sap.m.PlanningCalendarView PlanningCalendarViews},
 * and navigation for moving through the intervals using arrows or selecting a specific interval with a picker.
 * Custom views can be configured using the <code>views</code> aggregation. If not configured, the following set of default
 * built-in views is available - Hours, Days, 1 Week, 1 Month, and Months. Setting a custom view(s) replaces the built-in ones.</li>
 * <li>The rows of the <code>PlanningCalendar</code> that contain the the assigned appointments.
 * They can be configured with the <code>rows</code> aggregation, which is of type
 * {@link sap.m.PlanningCalendarRow PlanningCalendarRow}.</li>
 * </ul>
 * 
 * Since 1.48 the empty space in the cell that is below an appointment can be removed by adding
 * the <code>sapUiCalendarAppFitVertically</code> CSS class to the <code>PlanningCalendar</code>.
 * Please note that it should be used only for a <code>PlanningCalendar</code> with one appointment per day
 * for a row that doesn't have interval headers set.
 * 
 * Since 1.44 alternating row colors can be suppressed by adding the <code>sapMPlanCalSuppressAlternatingRowColors</code>
 * CSS class to the <code>PlanningCalendar</code>.
 * 
 * <h3>Responsive behavior</h3>
 * 
 * You can define the number of displayed intervals based on the size of the <code>PlanningCalendar</code> using the
 * {@link sap.m.PlanningCalendarView PlanningCalendarView}'s properties.
 * 
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.34
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.PlanningCalendar = function(sID,mSettings) {};
/**
 * Fired if an appointment is selected.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.unified.CalendarAppointment} oControlEvent.getParameters.appointment The selected appointment.
 * @param {sap.ui.unified.CalendarAppointment[]} oControlEvent.getParameters.appointments The selected appointments in case a group appointment is selected.
 * @param {boolean} oControlEvent.getParameters.multiSelect If set, the appointment was selected using multiple selection (e.g. Shift + single mouse click),
 * meaning more than the current appointment could be selected.
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.appointmentSelect = function(oControlEvent) {  };

/**
 * Fired if an interval was selected in the calendar header or in the row.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.startDate Start date of the selected interval, as a JavaScript date object.
 * @param {object} oControlEvent.getParameters.endDate Interval end date as a JavaScript date object.
 * @param {boolean} oControlEvent.getParameters.subInterval If set, the selected interval is a subinterval.
 * @param {sap.m.PlanningCalendarRow} oControlEvent.getParameters.row Row of the selected interval.
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.intervalSelect = function(oControlEvent) {  };

/**
 * Fires when a row header is clicked.
 * @event
 * @since 1.46.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.rowHeaderClick = function(oControlEvent) {  };

/**
 * Fires when row selection is changed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.PlanningCalendarRow[]} oControlEvent.getParameters.rows Array of rows whose selection has changed.
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.rowSelectionChange = function(oControlEvent) {  };

/**
 * <code>startDate</code> was changed while navigating in the <code>PlanningCalendar</code>.
 * The new value can be obtained using the <code>sap.m.PlanningCalendar#getStartDate()</code> method.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.startDateChange = function(oControlEvent) {  };

/**
 * <code>viewKey</code> was changed by user interaction.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.viewChange = function(oControlEvent) {  };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.PlanningCalendar(); };

/**
 * Adds some row to the aggregation {@link #getRows rows}.
 * @param {sap.m.PlanningCalendarRow}
 *            oRow the row to add; if empty, nothing is inserted
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.addRow = function(oRow) { return new sap.m.PlanningCalendar(); };

/**
 * Adds some specialDate to the aggregation {@link #getSpecialDates specialDates}.
 * @param {sap.ui.unified.DateTypeRange}
 *            oSpecialDate the specialDate to add; if empty, nothing is inserted
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.addSpecialDate = function(oSpecialDate) { return new sap.m.PlanningCalendar(); };

/**
 * Adds some toolbarContent to the aggregation {@link #getToolbarContent toolbarContent}.
 * @param {sap.ui.core.Control}
 *            oToolbarContent the toolbarContent to add; if empty, nothing is inserted
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.addToolbarContent = function(oToolbarContent) { return new sap.m.PlanningCalendar(); };

/**
 * Adds some view to the aggregation {@link #getViews views}.
 * @param {sap.m.PlanningCalendarView}
 *            oView the view to add; if empty, nothing is inserted
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.addView = function(oView) { return new sap.m.PlanningCalendar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:appointmentSelect appointmentSelect} event of this <code>sap.m.PlanningCalendar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.
 * 
 * Fired if an appointment is selected.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself
 * 
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.attachAppointmentSelect = function(oData,fnFunction,oListener) { return new sap.m.PlanningCalendar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:intervalSelect intervalSelect} event of this <code>sap.m.PlanningCalendar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.
 * 
 * Fired if an interval was selected in the calendar header or in the row.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself
 * 
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.attachIntervalSelect = function(oData,fnFunction,oListener) { return new sap.m.PlanningCalendar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:rowHeaderClick rowHeaderClick} event of this <code>sap.m.PlanningCalendar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.
 * 
 * Fires when a row header is clicked.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself
 * 
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.46.0
 * 
 */
sap.m.PlanningCalendar.prototype.attachRowHeaderClick = function(oData,fnFunction,oListener) { return new sap.m.PlanningCalendar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:rowSelectionChange rowSelectionChange} event of this <code>sap.m.PlanningCalendar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.
 * 
 * Fires when row selection is changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself
 * 
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.attachRowSelectionChange = function(oData,fnFunction,oListener) { return new sap.m.PlanningCalendar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:startDateChange startDateChange} event of this <code>sap.m.PlanningCalendar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.
 * 
 * <code>startDate</code> was changed while navigating in the <code>PlanningCalendar</code>.
 * The new value can be obtained using the <code>sap.m.PlanningCalendar#getStartDate()</code> method.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself
 * 
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.attachStartDateChange = function(oData,fnFunction,oListener) { return new sap.m.PlanningCalendar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:viewChange viewChange} event of this <code>sap.m.PlanningCalendar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.
 * 
 * <code>viewKey</code> was changed by user interaction.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself
 * 
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.attachViewChange = function(oData,fnFunction,oListener) { return new sap.m.PlanningCalendar(); };

/**
 * Destroys all the rows in the aggregation {@link #getRows rows}.
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.destroyRows = function() { return new sap.m.PlanningCalendar(); };

/**
 * Destroys all the specialDates in the aggregation {@link #getSpecialDates specialDates}.
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.destroySpecialDates = function() { return new sap.m.PlanningCalendar(); };

/**
 * Destroys all the toolbarContent in the aggregation {@link #getToolbarContent toolbarContent}.
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.destroyToolbarContent = function() { return new sap.m.PlanningCalendar(); };

/**
 * Destroys all the views in the aggregation {@link #getViews views}.
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.destroyViews = function() { return new sap.m.PlanningCalendar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:appointmentSelect appointmentSelect} event of this <code>sap.m.PlanningCalendar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.detachAppointmentSelect = function(fnFunction,oListener) { return new sap.m.PlanningCalendar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:intervalSelect intervalSelect} event of this <code>sap.m.PlanningCalendar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.detachIntervalSelect = function(fnFunction,oListener) { return new sap.m.PlanningCalendar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:rowHeaderClick rowHeaderClick} event of this <code>sap.m.PlanningCalendar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.detachRowHeaderClick = function(fnFunction,oListener) { return new sap.m.PlanningCalendar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:rowSelectionChange rowSelectionChange} event of this <code>sap.m.PlanningCalendar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.detachRowSelectionChange = function(fnFunction,oListener) { return new sap.m.PlanningCalendar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:startDateChange startDateChange} event of this <code>sap.m.PlanningCalendar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.detachStartDateChange = function(fnFunction,oListener) { return new sap.m.PlanningCalendar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:viewChange viewChange} event of this <code>sap.m.PlanningCalendar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.detachViewChange = function(fnFunction,oListener) { return new sap.m.PlanningCalendar(); };

/**
 * Creates a new subclass of class sap.m.PlanningCalendar with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.PlanningCalendar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:appointmentSelect appointmentSelect} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.unified.CalendarAppointment} [mParameters.appointment] The selected appointment.
 * @param {sap.ui.unified.CalendarAppointment[]} [mParameters.appointments] The selected appointments in case a group appointment is selected.
 * @param {boolean} [mParameters.multiSelect] If set, the appointment was selected using multiple selection (e.g. Shift + single mouse click),
 * meaning more than the current appointment could be selected.
 * 
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.PlanningCalendar.prototype.fireAppointmentSelect = function(mParameters) { return new sap.m.PlanningCalendar(); };

/**
 * Fires event {@link #event:intervalSelect intervalSelect} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {object} [mParameters.startDate] Start date of the selected interval, as a JavaScript date object.
 * @param {object} [mParameters.endDate] Interval end date as a JavaScript date object.
 * @param {boolean} [mParameters.subInterval] If set, the selected interval is a subinterval.
 * @param {sap.m.PlanningCalendarRow} [mParameters.row] Row of the selected interval.
 * 
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.PlanningCalendar.prototype.fireIntervalSelect = function(mParameters) { return new sap.m.PlanningCalendar(); };

/**
 * Fires event {@link #event:rowHeaderClick rowHeaderClick} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.46.0
 * 
 */
sap.m.PlanningCalendar.prototype.fireRowHeaderClick = function(mParameters) { return new sap.m.PlanningCalendar(); };

/**
 * Fires event {@link #event:rowSelectionChange rowSelectionChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.PlanningCalendarRow[]} [mParameters.rows] Array of rows whose selection has changed.
 * 
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.PlanningCalendar.prototype.fireRowSelectionChange = function(mParameters) { return new sap.m.PlanningCalendar(); };

/**
 * Fires event {@link #event:startDateChange startDateChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.PlanningCalendar.prototype.fireStartDateChange = function(mParameters) { return new sap.m.PlanningCalendar(); };

/**
 * Fires event {@link #event:viewChange viewChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.PlanningCalendar.prototype.fireViewChange = function(mParameters) { return new sap.m.PlanningCalendar(); };

/**
 * Gets current value of property {@link #getAppointmentsReducedHeight appointmentsReducedHeight}.
 * 
 * Determines whether the appointments that have only title without text are rendered with smaller height.
 * 
 * <b>Note:</b> On phone devices this property is ignored, appointments are always rendered in full height
 * to facilitate touching.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>appointmentsReducedHeight</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getAppointmentsReducedHeight = function() { return false; };

/**
 * Gets current value of property {@link #getAppointmentsVisualization appointmentsVisualization}.
 * 
 * Determines how the appointments are visualized depending on the used theme.
 * 
 * Default value is <code>Standard</code>.
 * @returns {sap.ui.unified.CalendarAppointmentVisualization} Value of property <code>appointmentsVisualization</code>
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getAppointmentsVisualization = function() { return new sap.ui.unified.CalendarAppointmentVisualization(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getGroupAppointmentsMode groupAppointmentsMode}.
 * 
 * Defines the mode in which the overlapping appointments are displayed.
 * 
 * <b>Note:</b> This property takes effect, only if the <code>intervalType</code> of the current calendar view
 * is set to <code>sap.ui.unified.CalendarIntervalType.Month</code>. On phone devices this property is ignored,
 * and the default value is applied.
 * 
 * Default value is <code>Collapsed</code>.
 * @returns {sap.ui.unified.GroupAppointmentsMode} Value of property <code>groupAppointmentsMode</code>
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getGroupAppointmentsMode = function() { return new sap.ui.unified.GroupAppointmentsMode(); };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * Specifies the height of the <code>PlanningCalendar</code>.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * ID of the element which is the current target of the association {@link #getLegend legend}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getLegend = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getMaxDate maxDate}.
 * 
 * Defines the maximum date that can be displayed and selected in the <code>PlanningCalendar</code>.
 * This must be a JavaScript date object.
 * 
 * <b>Note:</b> If the <code>maxDate</code> is set to be before the current <code>minDate</code>,
 * the <code>minDate</code> is set to the first date of the month in which the <code>maxDate</code> belongs.
 * 
 * @returns {object} Value of property <code>maxDate</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getMaxDate = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.m.PlanningCalendar.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.PlanningCalendar.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMinDate minDate}.
 * 
 * Defines the minimum date that can be displayed and selected in the <code>PlanningCalendar</code>.
 * This must be a JavaScript date object.
 * 
 * <b>Note:</b> If the <code>minDate</code> is set to be after the current <code>maxDate</code>,
 * the <code>maxDate</code> is set to the last date of the month in which the <code>minDate</code> belongs.
 * 
 * @returns {object} Value of property <code>minDate</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getMinDate = function() { return new Object(); };

/**
 * Gets current value of property {@link #getNoDataText noDataText}.
 * 
 * Defines the text that is displayed when no {@link sap.m.PlanningCalendarRow PlanningCalendarRows} are assigned.
 * 
 * @returns {string} Value of property <code>noDataText</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getNoDataText = function() { return ""; };

/**
 * Gets content of aggregation {@link #getRows rows}.
 * 
 * Rows of the <code>PlanningCalendar</code>.
 * 
 * @returns {sap.m.PlanningCalendarRow[]}
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getRows = function() { return new Array(); };

/**
 * Returns an array containing the selected rows. If no row is selected, an empty array is returned.
 * 
 * @returns {sap.m.PlanningCalendarRow[]} selected rows
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.PlanningCalendar.prototype.getSelectedRows = function() { return new Array(); };

/**
 * Gets current value of property {@link #getShowEmptyIntervalHeaders showEmptyIntervalHeaders}.
 * 
 * Determines whether the space (at the top of the intervals), where the assigned interval headers appear, should remain
 * visible even when no interval headers are present in the visible time frame. If set to <code>false</code>, this
 * space would collapse/disappear when no interval headers are assigned.
 * 
 * <b>Note:</b> This property takes effect, only if <code>showIntervalHeaders</code> is also set to <code>true</code>.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showEmptyIntervalHeaders</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getShowEmptyIntervalHeaders = function() { return false; };

/**
 * Gets current value of property {@link #getShowIntervalHeaders showIntervalHeaders}.
 * 
 * Determines whether the assigned interval headers are displayed. You can assign them using the
 * <code>intervalHeaders</code> aggregation of the {@link sap.m.PlanningCalendarRow PlanningCalendarRow}.
 * 
 * <b>Note:</b> If you set both <code>showIntervalHeaders</code> and <code>showEmptyIntervalHeaders</code>
 * properties to <code>true</code>, the space (at the top of the intervals) where the assigned interval
 * headers appear, will remain visible even if no interval headers are assigned.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showIntervalHeaders</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getShowIntervalHeaders = function() { return false; };

/**
 * Gets current value of property {@link #getShowRowHeaders showRowHeaders}.
 * 
 * Determines whether the column containing the headers of the {@link sap.m.PlanningCalendarRow PlanningCalendarRows}
 * is displayed.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showRowHeaders</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getShowRowHeaders = function() { return false; };

/**
 * Gets current value of property {@link #getSingleSelection singleSelection}.
 * 
 * Determines whether only a single row can be selected.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>singleSelection</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getSingleSelection = function() { return false; };

/**
 * Gets content of aggregation {@link #getSpecialDates specialDates}.
 * 
 * Special days in the header calendar visualized as date range with a type.
 * 
 * <b>Note:</b> If one day is assigned to more than one type, only the first type will be used.
 * 
 * @returns {sap.ui.unified.DateTypeRange[]}
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getSpecialDates = function() { return new Array(); };

/**
 * Gets current value of property {@link #getStartDate startDate}.
 * 
 * Determines the start date of the row, as a JavaScript date object. The current date is used as default.
 * 
 * @returns {object} Value of property <code>startDate</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getStartDate = function() { return new Object(); };

/**
 * Gets content of aggregation {@link #getToolbarContent toolbarContent}.
 * 
 * The content of the toolbar.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getToolbarContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getViewKey viewKey}.
 * 
 * Defines the key of the <code>PlanningCalendarView</code> used for the output.
 * 
 * <b>Note:</b> The default value is set <code>Hour</code>. If you are using your own views, the keys of these
 * views should be used instead.
 * 
 * Default value is <code>sap.ui.unified.CalendarIntervalType.Hour</code>.
 * @returns {string} Value of property <code>viewKey</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getViewKey = function() { return ""; };

/**
 * Gets content of aggregation {@link #getViews views}.
 * 
 * Views of the <code>PlanningCalendar</code>.
 * 
 * <b>Note:</b> If not set, all the default views are available. Their keys are defined in
 * {@link sap.ui.unified.CalendarIntervalType}.
 * 
 * @returns {sap.m.PlanningCalendarView[]}
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getViews = function() { return new Array(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Specifies the width of the <code>PlanningCalendar</code>.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.m.PlanningCalendarRow</code> in the aggregation {@link #getRows rows}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.PlanningCalendarRow}
 *           oRow The row whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.indexOfRow = function(oRow) { return 0; };

/**
 * Checks for the provided <code>sap.ui.unified.DateTypeRange</code> in the aggregation {@link #getSpecialDates specialDates}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.unified.DateTypeRange}
 *           oSpecialDate The specialDate whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.indexOfSpecialDate = function(oSpecialDate) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getToolbarContent toolbarContent}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oToolbarContent The toolbarContent whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.indexOfToolbarContent = function(oToolbarContent) { return 0; };

/**
 * Checks for the provided <code>sap.m.PlanningCalendarView</code> in the aggregation {@link #getViews views}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.PlanningCalendarView}
 *           oView The view whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.indexOfView = function(oView) { return 0; };

/**
 * Inserts a row into the aggregation {@link #getRows rows}.
 * 
 * @param {sap.m.PlanningCalendarRow}
 *            oRow the row to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the row should be inserted at; for
 *              a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the row is inserted at
 *              the last position
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.insertRow = function(oRow,iIndex) { return new sap.m.PlanningCalendar(); };

/**
 * Inserts a specialDate into the aggregation {@link #getSpecialDates specialDates}.
 * 
 * @param {sap.ui.unified.DateTypeRange}
 *            oSpecialDate the specialDate to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the specialDate should be inserted at; for
 *              a negative value of <code>iIndex</code>, the specialDate is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the specialDate is inserted at
 *              the last position
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.insertSpecialDate = function(oSpecialDate,iIndex) { return new sap.m.PlanningCalendar(); };

/**
 * Inserts a toolbarContent into the aggregation {@link #getToolbarContent toolbarContent}.
 * 
 * @param {sap.ui.core.Control}
 *            oToolbarContent the toolbarContent to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the toolbarContent should be inserted at; for
 *              a negative value of <code>iIndex</code>, the toolbarContent is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the toolbarContent is inserted at
 *              the last position
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.insertToolbarContent = function(oToolbarContent,iIndex) { return new sap.m.PlanningCalendar(); };

/**
 * Inserts a view into the aggregation {@link #getViews views}.
 * 
 * @param {sap.m.PlanningCalendarView}
 *            oView the view to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the view should be inserted at; for
 *              a negative value of <code>iIndex</code>, the view is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the view is inserted at
 *              the last position
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.insertView = function(oView,iIndex) { return new sap.m.PlanningCalendar(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getRows rows}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.PlanningCalendarRow[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.removeAllRows = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getSpecialDates specialDates}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.unified.DateTypeRange[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.removeAllSpecialDates = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getToolbarContent toolbarContent}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.removeAllToolbarContent = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getViews views}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.PlanningCalendarView[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.removeAllViews = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Removes a row from the aggregation {@link #getRows rows}.
 * 
 * @param {int | string | sap.m.PlanningCalendarRow} vRow The row to remove or its index or id
 * @returns {sap.m.PlanningCalendarRow} The removed row or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.removeRow = function(vRow) { return new sap.m.PlanningCalendarRow(); };

/**
 * Removes a specialDate from the aggregation {@link #getSpecialDates specialDates}.
 * 
 * @param {int | string | sap.ui.unified.DateTypeRange} vSpecialDate The specialDate to remove or its index or id
 * @returns {sap.ui.unified.DateTypeRange} The removed specialDate or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.removeSpecialDate = function(vSpecialDate) { return new sap.ui.unified.DateTypeRange(); };

/**
 * Removes a toolbarContent from the aggregation {@link #getToolbarContent toolbarContent}.
 * 
 * @param {int | string | sap.ui.core.Control} vToolbarContent The toolbarContent to remove or its index or id
 * @returns {sap.ui.core.Control} The removed toolbarContent or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.removeToolbarContent = function(vToolbarContent) { return new sap.ui.core.Control(); };

/**
 * Removes a view from the aggregation {@link #getViews views}.
 * 
 * @param {int | string | sap.m.PlanningCalendarView} vView The view to remove or its index or id
 * @returns {sap.m.PlanningCalendarView} The removed view or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.removeView = function(vView) { return new sap.m.PlanningCalendarView(); };

/**
 * Selects or deselects all <code>PlanningCalendarRows</code>.
 * 
 * <b>Note:</b> Selection only works if <code>singleSelection</code> is set to <code>false</code>.
 * 
 * @param {boolean} bSelect Indicator showing whether <code>PlanningCalendarRows</code> should be selected or deselected
 * @returns {sap.m.PlanningCalendar} <code>this</code> to allow method chaining
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.PlanningCalendar.prototype.selectAllRows = function(bSelect) { return new sap.m.PlanningCalendar(); };

/**
 * Sets a new value for property {@link #getAppointmentsReducedHeight appointmentsReducedHeight}.
 * 
 * Determines whether the appointments that have only title without text are rendered with smaller height.
 * 
 * <b>Note:</b> On phone devices this property is ignored, appointments are always rendered in full height
 * to facilitate touching.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bAppointmentsReducedHeight New value for property <code>appointmentsReducedHeight</code>
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.setAppointmentsReducedHeight = function(bAppointmentsReducedHeight) { return new sap.m.PlanningCalendar(); };

/**
 * Sets a new value for property {@link #getAppointmentsVisualization appointmentsVisualization}.
 * 
 * Determines how the appointments are visualized depending on the used theme.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Standard</code>.
 * @param {sap.ui.unified.CalendarAppointmentVisualization} sAppointmentsVisualization New value for property <code>appointmentsVisualization</code>
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.setAppointmentsVisualization = function(sAppointmentsVisualization) { return new sap.m.PlanningCalendar(); };

/**
 * Sets a new value for property {@link #getGroupAppointmentsMode groupAppointmentsMode}.
 * 
 * Defines the mode in which the overlapping appointments are displayed.
 * 
 * <b>Note:</b> This property takes effect, only if the <code>intervalType</code> of the current calendar view
 * is set to <code>sap.ui.unified.CalendarIntervalType.Month</code>. On phone devices this property is ignored,
 * and the default value is applied.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Collapsed</code>.
 * @param {sap.ui.unified.GroupAppointmentsMode} sGroupAppointmentsMode New value for property <code>groupAppointmentsMode</code>
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.setGroupAppointmentsMode = function(sGroupAppointmentsMode) { return new sap.m.PlanningCalendar(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * Specifies the height of the <code>PlanningCalendar</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.setHeight = function(sHeight) { return new sap.m.PlanningCalendar(); };

/**
 * Sets the associated {@link #getLegend legend}.
 * @param {sap.ui.core.ID | sap.ui.unified.CalendarLegend} oLegend ID of an element which becomes the new target of this legend association; alternatively, an element instance may be given
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.setLegend = function(oLegend) { return new sap.m.PlanningCalendar(); };

/**
 * Sets a new value for property {@link #getMaxDate maxDate}.
 * 
 * Defines the maximum date that can be displayed and selected in the <code>PlanningCalendar</code>.
 * This must be a JavaScript date object.
 * 
 * <b>Note:</b> If the <code>maxDate</code> is set to be before the current <code>minDate</code>,
 * the <code>minDate</code> is set to the first date of the month in which the <code>maxDate</code> belongs.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oMaxDate New value for property <code>maxDate</code>
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.setMaxDate = function(oMaxDate) { return new sap.m.PlanningCalendar(); };

/**
 * Sets a new value for property {@link #getMinDate minDate}.
 * 
 * Defines the minimum date that can be displayed and selected in the <code>PlanningCalendar</code>.
 * This must be a JavaScript date object.
 * 
 * <b>Note:</b> If the <code>minDate</code> is set to be after the current <code>maxDate</code>,
 * the <code>maxDate</code> is set to the last date of the month in which the <code>minDate</code> belongs.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oMinDate New value for property <code>minDate</code>
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.setMinDate = function(oMinDate) { return new sap.m.PlanningCalendar(); };

/**
 * Sets a new value for property {@link #getNoDataText noDataText}.
 * 
 * Defines the text that is displayed when no {@link sap.m.PlanningCalendarRow PlanningCalendarRows} are assigned.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sNoDataText New value for property <code>noDataText</code>
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.setNoDataText = function(sNoDataText) { return new sap.m.PlanningCalendar(); };

/**
 * Sets a new value for property {@link #getShowEmptyIntervalHeaders showEmptyIntervalHeaders}.
 * 
 * Determines whether the space (at the top of the intervals), where the assigned interval headers appear, should remain
 * visible even when no interval headers are present in the visible time frame. If set to <code>false</code>, this
 * space would collapse/disappear when no interval headers are assigned.
 * 
 * <b>Note:</b> This property takes effect, only if <code>showIntervalHeaders</code> is also set to <code>true</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowEmptyIntervalHeaders New value for property <code>showEmptyIntervalHeaders</code>
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.setShowEmptyIntervalHeaders = function(bShowEmptyIntervalHeaders) { return new sap.m.PlanningCalendar(); };

/**
 * Sets a new value for property {@link #getShowIntervalHeaders showIntervalHeaders}.
 * 
 * Determines whether the assigned interval headers are displayed. You can assign them using the
 * <code>intervalHeaders</code> aggregation of the {@link sap.m.PlanningCalendarRow PlanningCalendarRow}.
 * 
 * <b>Note:</b> If you set both <code>showIntervalHeaders</code> and <code>showEmptyIntervalHeaders</code>
 * properties to <code>true</code>, the space (at the top of the intervals) where the assigned interval
 * headers appear, will remain visible even if no interval headers are assigned.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowIntervalHeaders New value for property <code>showIntervalHeaders</code>
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.setShowIntervalHeaders = function(bShowIntervalHeaders) { return new sap.m.PlanningCalendar(); };

/**
 * Sets a new value for property {@link #getShowRowHeaders showRowHeaders}.
 * 
 * Determines whether the column containing the headers of the {@link sap.m.PlanningCalendarRow PlanningCalendarRows}
 * is displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowRowHeaders New value for property <code>showRowHeaders</code>
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.setShowRowHeaders = function(bShowRowHeaders) { return new sap.m.PlanningCalendar(); };

/**
 * Sets a new value for property {@link #getSingleSelection singleSelection}.
 * 
 * Determines whether only a single row can be selected.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bSingleSelection New value for property <code>singleSelection</code>
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.setSingleSelection = function(bSingleSelection) { return new sap.m.PlanningCalendar(); };

/**
 * Sets a new value for property {@link #getViewKey viewKey}.
 * 
 * Defines the key of the <code>PlanningCalendarView</code> used for the output.
 * 
 * <b>Note:</b> The default value is set <code>Hour</code>. If you are using your own views, the keys of these
 * views should be used instead.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>sap.ui.unified.CalendarIntervalType.Hour</code>.
 * @param {string} sViewKey New value for property <code>viewKey</code>
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.setViewKey = function(sViewKey) { return new sap.m.PlanningCalendar(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Specifies the width of the <code>PlanningCalendar</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.PlanningCalendar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendar.prototype.setWidth = function(sWidth) { return new sap.m.PlanningCalendar(); };


// ---- sap.m.PlanningCalendarRow --------------------------------------------------------------------------

/**
 * Constructor for a new <code>PlanningCalendarRow</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getNonWorkingDays nonWorkingDays} : int[]</li>
 * <li>{@link #getNonWorkingHours nonWorkingHours} : int[]</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getKey key} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAppointments appointments} : sap.ui.unified.CalendarAppointment[]</li>
 * <li>{@link #getIntervalHeaders intervalHeaders} : sap.ui.unified.CalendarAppointment[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Row in the @link sap.m.PlanningCalendar}.
 * 
 * This element holds the data of one row in the @link sap.m.PlanningCalendar}. Once the header information (e.g. person information)
 * is assigned, the appointments are assigned.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.34.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.PlanningCalendarRow = function(sId,mSettings) {};
/**
 * Adds some appointment to the aggregation {@link #getAppointments appointments}.
 * @param {sap.ui.unified.CalendarAppointment}
 *            oAppointment the appointment to add; if empty, nothing is inserted
 * @returns {sap.m.PlanningCalendarRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.addAppointment = function(oAppointment) { return new sap.m.PlanningCalendarRow(); };

/**
 * Adds some intervalHeader to the aggregation {@link #getIntervalHeaders intervalHeaders}.
 * @param {sap.ui.unified.CalendarAppointment}
 *            oIntervalHeader the intervalHeader to add; if empty, nothing is inserted
 * @returns {sap.m.PlanningCalendarRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.addIntervalHeader = function(oIntervalHeader) { return new sap.m.PlanningCalendarRow(); };

/**
 * Destroys all the appointments in the aggregation {@link #getAppointments appointments}.
 * @returns {sap.m.PlanningCalendarRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.destroyAppointments = function() { return new sap.m.PlanningCalendarRow(); };

/**
 * Destroys all the intervalHeaders in the aggregation {@link #getIntervalHeaders intervalHeaders}.
 * @returns {sap.m.PlanningCalendarRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.destroyIntervalHeaders = function() { return new sap.m.PlanningCalendarRow(); };

/**
 * Creates a new subclass of class sap.m.PlanningCalendarRow with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.PlanningCalendarRow.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getAppointments appointments}.
 * 
 * The appointments to be displayed in the row. Appointments that outside the visible time frame are not rendered.
 * 
 * <b>Note:</b> For performance reasons, only appointments in the visible time range or nearby should be assigned.
 * 
 * @returns {sap.ui.unified.CalendarAppointment[]}
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.getAppointments = function() { return new Array(); };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Specifies the URI of an image or an icon registered in <code>sap.ui.core.IconPool</code>.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets content of aggregation {@link #getIntervalHeaders intervalHeaders}.
 * 
 * The appointments to be displayed at the top of the intervals (for example, for public holidays).
 * Appointments outside the visible time frame are not rendered.
 * 
 * Keep in mind that the <code>intervalHeaders</code> should always fill whole intervals. If they are shorter or longer
 * than one interval, they are not displayed.
 * 
 * <b>Note:</b> For performance reasons, only appointments in the visible time range or nearby should be assigned.
 * 
 * @returns {sap.ui.unified.CalendarAppointment[]}
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.getIntervalHeaders = function() { return new Array(); };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * Defines the identifier of the row.
 * 
 * @returns {string} Value of property <code>key</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.PlanningCalendarRow.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.PlanningCalendarRow.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getNonWorkingDays nonWorkingDays}.
 * 
 * Determines whether the provided weekdays are displayed as non-working days.
 * Valid values inside the array are from 0 to 6 (other values are ignored).
 * If not set, the weekend defined in the locale settings is displayed as non-working days.
 * 
 * <b>Note:</b> The non-working days are visualized if the <code>intervalType</code>
 * property of the {@link sap.m.PlanningCalendarView} is set to <code>Day</code>.
 * 
 * @returns {int[]} Value of property <code>nonWorkingDays</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.getNonWorkingDays = function() { return new Array(); };

/**
 * Gets current value of property {@link #getNonWorkingHours nonWorkingHours}.
 * 
 * Determines whether the provided hours are displayed as non-working hours.
 * Valid values inside the array are from 0 to 23 (other values are ignored).
 * 
 * <b>Note:</b> The non-working hours are visualized if <code>intervalType</code>
 * property of the {@link sap.m.PlanningCalendarView} is set to <code>Hour</code>.
 * 
 * @returns {int[]} Value of property <code>nonWorkingHours</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.getNonWorkingHours = function() { return new Array(); };

/**
 * Gets current value of property {@link #getSelected selected}.
 * 
 * Defines the selected state of the <code>PlanningCalendarRow</code>.
 * 
 * <b>Note:</b> Binding the <code>selected</code> property in single selection modes may
 * cause unwanted results if you have more than one selected row in your binding.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>selected</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.getSelected = function() { return false; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Defines the text of the header (for example, the department of the person).
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Defines the title of the header (for example, the name of the person).
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.getTitle = function() { return ""; };

/**
 * Checks for the provided <code>sap.ui.unified.CalendarAppointment</code> in the aggregation {@link #getAppointments appointments}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.unified.CalendarAppointment}
 *           oAppointment The appointment whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.indexOfAppointment = function(oAppointment) { return 0; };

/**
 * Checks for the provided <code>sap.ui.unified.CalendarAppointment</code> in the aggregation {@link #getIntervalHeaders intervalHeaders}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.unified.CalendarAppointment}
 *           oIntervalHeader The intervalHeader whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.indexOfIntervalHeader = function(oIntervalHeader) { return 0; };

/**
 * Inserts a appointment into the aggregation {@link #getAppointments appointments}.
 * 
 * @param {sap.ui.unified.CalendarAppointment}
 *            oAppointment the appointment to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the appointment should be inserted at; for
 *              a negative value of <code>iIndex</code>, the appointment is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the appointment is inserted at
 *              the last position
 * @returns {sap.m.PlanningCalendarRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.insertAppointment = function(oAppointment,iIndex) { return new sap.m.PlanningCalendarRow(); };

/**
 * Inserts a intervalHeader into the aggregation {@link #getIntervalHeaders intervalHeaders}.
 * 
 * @param {sap.ui.unified.CalendarAppointment}
 *            oIntervalHeader the intervalHeader to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the intervalHeader should be inserted at; for
 *              a negative value of <code>iIndex</code>, the intervalHeader is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the intervalHeader is inserted at
 *              the last position
 * @returns {sap.m.PlanningCalendarRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.insertIntervalHeader = function(oIntervalHeader,iIndex) { return new sap.m.PlanningCalendarRow(); };

/**
 * Removes all the controls from the aggregation {@link #getAppointments appointments}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.unified.CalendarAppointment[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.removeAllAppointments = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getIntervalHeaders intervalHeaders}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.unified.CalendarAppointment[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.removeAllIntervalHeaders = function() { return new Array(); };

/**
 * Removes a appointment from the aggregation {@link #getAppointments appointments}.
 * 
 * @param {int | string | sap.ui.unified.CalendarAppointment} vAppointment The appointment to remove or its index or id
 * @returns {sap.ui.unified.CalendarAppointment} The removed appointment or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.removeAppointment = function(vAppointment) { return new sap.ui.unified.CalendarAppointment(); };

/**
 * Removes a intervalHeader from the aggregation {@link #getIntervalHeaders intervalHeaders}.
 * 
 * @param {int | string | sap.ui.unified.CalendarAppointment} vIntervalHeader The intervalHeader to remove or its index or id
 * @returns {sap.ui.unified.CalendarAppointment} The removed intervalHeader or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.removeIntervalHeader = function(vIntervalHeader) { return new sap.ui.unified.CalendarAppointment(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Specifies the URI of an image or an icon registered in <code>sap.ui.core.IconPool</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.PlanningCalendarRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.setIcon = function(sIcon) { return new sap.m.PlanningCalendarRow(); };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * Defines the identifier of the row.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.m.PlanningCalendarRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.setKey = function(sKey) { return new sap.m.PlanningCalendarRow(); };

/**
 * Sets a new value for property {@link #getNonWorkingDays nonWorkingDays}.
 * 
 * Determines whether the provided weekdays are displayed as non-working days.
 * Valid values inside the array are from 0 to 6 (other values are ignored).
 * If not set, the weekend defined in the locale settings is displayed as non-working days.
 * 
 * <b>Note:</b> The non-working days are visualized if the <code>intervalType</code>
 * property of the {@link sap.m.PlanningCalendarView} is set to <code>Day</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int[]} sNonWorkingDays New value for property <code>nonWorkingDays</code>
 * @returns {sap.m.PlanningCalendarRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.setNonWorkingDays = function(sNonWorkingDays) { return new sap.m.PlanningCalendarRow(); };

/**
 * Sets a new value for property {@link #getNonWorkingHours nonWorkingHours}.
 * 
 * Determines whether the provided hours are displayed as non-working hours.
 * Valid values inside the array are from 0 to 23 (other values are ignored).
 * 
 * <b>Note:</b> The non-working hours are visualized if <code>intervalType</code>
 * property of the {@link sap.m.PlanningCalendarView} is set to <code>Hour</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int[]} sNonWorkingHours New value for property <code>nonWorkingHours</code>
 * @returns {sap.m.PlanningCalendarRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.setNonWorkingHours = function(sNonWorkingHours) { return new sap.m.PlanningCalendarRow(); };

/**
 * Sets a new value for property {@link #getSelected selected}.
 * 
 * Defines the selected state of the <code>PlanningCalendarRow</code>.
 * 
 * <b>Note:</b> Binding the <code>selected</code> property in single selection modes may
 * cause unwanted results if you have more than one selected row in your binding.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSelected New value for property <code>selected</code>
 * @returns {sap.m.PlanningCalendarRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.setSelected = function(bSelected) { return new sap.m.PlanningCalendarRow(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Defines the text of the header (for example, the department of the person).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.PlanningCalendarRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.setText = function(sText) { return new sap.m.PlanningCalendarRow(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Defines the title of the header (for example, the name of the person).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.PlanningCalendarRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarRow.prototype.setTitle = function(sTitle) { return new sap.m.PlanningCalendarRow(); };


// ---- sap.m.PlanningCalendarView --------------------------------------------------------------------------

/**
 * Constructor for a new <code>PlanningCalendarView</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getIntervalType intervalType} : sap.ui.unified.CalendarIntervalType (default: Hour)</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getIntervalsS intervalsS} : int (default: 6)</li>
 * <li>{@link #getIntervalsM intervalsM} : int (default: 8)</li>
 * <li>{@link #getIntervalsL intervalsL} : int (default: 12)</li>
 * <li>{@link #getShowSubIntervals showSubIntervals} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * View of the {@link sap.m.PlanningCalendar}.
 * 
 * The <code>PlanningCalendarView</code> defines the type of the intervals (hours, days, months)
 * and how many intervals are displayed.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.34.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.PlanningCalendarView = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.PlanningCalendarView with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.PlanningCalendarView.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getDescription description}.
 * 
 * Defines the description of the <code>PlanningCalendarView</code>.
 * 
 * @returns {string} Value of property <code>description</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarView.prototype.getDescription = function() { return ""; };

/**
 * Gets current value of property {@link #getIntervalsL intervalsL}.
 * 
 * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is more than 1024 pixels wide.
 * 
 * Default value is <code>12</code>.
 * @returns {int} Value of property <code>intervalsL</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarView.prototype.getIntervalsL = function() { return 0; };

/**
 * Gets current value of property {@link #getIntervalsM intervalsM}.
 * 
 * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is between 600 and 1024 pixels wide.
 * 
 * Default value is <code>8</code>.
 * @returns {int} Value of property <code>intervalsM</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarView.prototype.getIntervalsM = function() { return 0; };

/**
 * Gets current value of property {@link #getIntervalsS intervalsS}.
 * 
 * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is less than 600 pixels wide.
 * 
 * Default value is <code>6</code>.
 * @returns {int} Value of property <code>intervalsS</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarView.prototype.getIntervalsS = function() { return 0; };

/**
 * Gets current value of property {@link #getIntervalType intervalType}.
 * 
 * Determines the type of the intervals of the row.
 * 
 * <b>Note:</b> Not all predefined interval types are supported for this property. For more information, see the
 * descriptions in the {@link sap.ui.unified.CalendarIntervalType CalendarIntervalType} enumeration.
 * 
 * Default value is <code>Hour</code>.
 * @returns {sap.ui.unified.CalendarIntervalType} Value of property <code>intervalType</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarView.prototype.getIntervalType = function() { return new sap.ui.unified.CalendarIntervalType(); };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * Defines the key of the view. This must be set to identify the used view in the
 * {@link sap.m.PlanningCalendar}.
 * 
 * @returns {string} Value of property <code>key</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarView.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.PlanningCalendarView.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.PlanningCalendarView.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowSubIntervals showSubIntervals}.
 * 
 * If set, subintervals are displayed as lines in the rows.
 * 
 * <ul>
 * <li>Quarter hour subintervals for interval type <code>Hour</code>.</li>
 * <li>Hour subintervals for interval types <code>Day</code>, <code>Week</code> and <code>OneMonth</code>.</li>
 * <li>Day subintervals for interval type <code>Month</code>.</li>
 * </ul>
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showSubIntervals</code>
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarView.prototype.getShowSubIntervals = function() { return false; };

/**
 * Sets a new value for property {@link #getDescription description}.
 * 
 * Defines the description of the <code>PlanningCalendarView</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sDescription New value for property <code>description</code>
 * @returns {sap.m.PlanningCalendarView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarView.prototype.setDescription = function(sDescription) { return new sap.m.PlanningCalendarView(); };

/**
 * Sets a new value for property {@link #getIntervalsL intervalsL}.
 * 
 * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is more than 1024 pixels wide.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>12</code>.
 * @param {int} iIntervalsL New value for property <code>intervalsL</code>
 * @returns {sap.m.PlanningCalendarView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarView.prototype.setIntervalsL = function(iIntervalsL) { return new sap.m.PlanningCalendarView(); };

/**
 * Sets a new value for property {@link #getIntervalsM intervalsM}.
 * 
 * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is between 600 and 1024 pixels wide.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>8</code>.
 * @param {int} iIntervalsM New value for property <code>intervalsM</code>
 * @returns {sap.m.PlanningCalendarView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarView.prototype.setIntervalsM = function(iIntervalsM) { return new sap.m.PlanningCalendarView(); };

/**
 * Sets a new value for property {@link #getIntervalsS intervalsS}.
 * 
 * Defines the number of intervals that are displayed for a {@link sap.m.PlanningCalendar} that is less than 600 pixels wide.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>6</code>.
 * @param {int} iIntervalsS New value for property <code>intervalsS</code>
 * @returns {sap.m.PlanningCalendarView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarView.prototype.setIntervalsS = function(iIntervalsS) { return new sap.m.PlanningCalendarView(); };

/**
 * Sets a new value for property {@link #getIntervalType intervalType}.
 * 
 * Determines the type of the intervals of the row.
 * 
 * <b>Note:</b> Not all predefined interval types are supported for this property. For more information, see the
 * descriptions in the {@link sap.ui.unified.CalendarIntervalType CalendarIntervalType} enumeration.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Hour</code>.
 * @param {sap.ui.unified.CalendarIntervalType} sIntervalType New value for property <code>intervalType</code>
 * @returns {sap.m.PlanningCalendarView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarView.prototype.setIntervalType = function(sIntervalType) { return new sap.m.PlanningCalendarView(); };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * Defines the key of the view. This must be set to identify the used view in the
 * {@link sap.m.PlanningCalendar}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.m.PlanningCalendarView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarView.prototype.setKey = function(sKey) { return new sap.m.PlanningCalendarView(); };

/**
 * Sets a new value for property {@link #getShowSubIntervals showSubIntervals}.
 * 
 * If set, subintervals are displayed as lines in the rows.
 * 
 * <ul>
 * <li>Quarter hour subintervals for interval type <code>Hour</code>.</li>
 * <li>Hour subintervals for interval types <code>Day</code>, <code>Week</code> and <code>OneMonth</code>.</li>
 * <li>Day subintervals for interval type <code>Month</code>.</li>
 * </ul>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowSubIntervals New value for property <code>showSubIntervals</code>
 * @returns {sap.m.PlanningCalendarView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PlanningCalendarView.prototype.setShowSubIntervals = function(bShowSubIntervals) { return new sap.m.PlanningCalendarView(); };


// ---- sap.m.PopinDisplay --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.PopinDisplay.toString = function() { return ""; };

// ---- sap.m.Popover --------------------------------------------------------------------------

/**
 * Constructor for a new Popover.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType (default: Right)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getModal modal} : boolean (default: false)</li>
 * <li>{@link #getOffsetX offsetX} : int (default: 0)</li>
 * <li>{@link #getOffsetY offsetY} : int (default: 0)</li>
 * <li>{@link #getShowArrow showArrow} : boolean (default: true)</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentMinWidth contentMinWidth} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : boolean (default: true)</li>
 * <li>{@link #getHorizontalScrolling horizontalScrolling} : boolean (default: true)</li>
 * <li>{@link #getBounce bounce} : boolean</li>
 * <li>{@link #getResizable resizable} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[] (default)</li>
 * <li>{@link #getCustomHeader customHeader} : sap.ui.core.Control</li>
 * <li>{@link #getSubHeader subHeader} : sap.ui.core.Control</li>
 * <li>{@link #getFooter footer} : sap.ui.core.Control</li>
 * <li>{@link #getBeginButton beginButton} : sap.ui.core.Control</li>
 * <li>{@link #getEndButton endButton} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLeftButton leftButton} : (sap.ui.core.ID | sap.m.Button)</li>
 * <li>{@link #getRightButton rightButton} : (sap.ui.core.ID | sap.m.Button)</li>
 * <li>{@link #getInitialFocus initialFocus} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Displays additional information for an object in a compact way.
 * 
 * <h3>Overview</h3>
 * The popover displays additional information for an object in a compact way and without leaving the page. The popover can contain various UI elements such as fields, tables, images, and charts. It can also include actions in the footer.
 * <h3>Structure</h3>
 * The popover has three main areas:
 * <ul>
 * <li>Header (optional) - with a back button and a title</li>
 * <li>Content - holds all the controls</li>
 * <li>Footer (optional) - with additional action buttons</li>
 * </ul>
 * <h4>Guidelines</h4>
 * <ul>
 * <li>Do not overlap popovers.</li>
 * <li>You can determine the {@link sap.m.PlacementType placement} of the popover relative to the control that opens it.</li>
 * <li>Ensure that the content has a basic design and shows only the most important information.</li>
 * </ul>
 * <h3>Usage</h3>
 * <h4>When to use:</h4>
 * <ul>
 * <li>You need to define your own structure of controls within the popover.</li>
 * </ul>
 * <h4>When not to use:</h4>
 * <ul>
 * <li>The {@link sap.m.QuickView QuickView} is more appropriate for your use case.</li>
 * </ul>
 * <h3>Responsive Behavior</h3>
 * The popover is closed when the user clicks or taps outside the popover or selects an action within the popover. You can prevent this with the <code>modal</code> property.
 * The popover can be resized when the <code>resizable</code> property is enabled.
 * 
 * <ul>
 * <li>{@link sap.m.Popover} is <u>not</u> responsive on mobile devices - it will always be rendered as a popover and you have to take care of its size and position.</li>
 * <li>{@link sap.m.ResponsivePopover} is adaptive and responsive. It renders as a dialog with a close button in the header on phones, and as a popover on tablets.</li>
 * </ul>
 * 
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.PopupInterface
 * @version 1.48.4
 * 
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Popover = function(sId,mSettings) {};
/**
 * This event will be fired after the popover is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 * 
 */
sap.m.Popover.prototype.afterClose = function(oControlEvent) {  };

/**
 * This event will be fired after the popover is opened.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 * 
 */
sap.m.Popover.prototype.afterOpen = function(oControlEvent) {  };

/**
 * This event will be fired before the popover is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 * 
 */
sap.m.Popover.prototype.beforeClose = function(oControlEvent) {  };

/**
 * This event will be fired before the popover is opened.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 * 
 */
sap.m.Popover.prototype.beforeOpen = function(oControlEvent) {  };

/**
 * Hook called after adjusment of the Popover position.
 * 
 * @protected
 * 
 */
sap.m.Popover.prototype._afterAdjustPositionAndArrowHook = function() {  };

/**
 * If customHeader is set, this will return the customHeaer. Otherwise it creates a header and put the
 * title and buttons if needed inside, and finally return this newly create header.
 * 
 * @protected
 * 
 */
sap.m.Popover.prototype._getAnyHeader = function() {  };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.Popover(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.Popover(); };

/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.addContent = function(oContent) { return new sap.m.Popover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterClose afterClose} event of this <code>sap.m.Popover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Popover</code> itself.
 * 
 * This event will be fired after the popover is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code> itself
 * 
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.attachAfterClose = function(oData,fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterOpen afterOpen} event of this <code>sap.m.Popover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Popover</code> itself.
 * 
 * This event will be fired after the popover is opened.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code> itself
 * 
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeClose beforeClose} event of this <code>sap.m.Popover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Popover</code> itself.
 * 
 * This event will be fired before the popover is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code> itself
 * 
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.Popover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Popover</code> itself.
 * 
 * This event will be fired before the popover is opened.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code> itself
 * 
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Popover.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Closes the popover when it's already opened.
 * 
 * @return {sap.m.Popover} Reference to the control instance for chaining
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Popover.prototype.close = function() { return new sap.m.Popover(); };

/**
 * Destroys the beginButton in the aggregation {@link #getBeginButton beginButton}.
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.destroyBeginButton = function() { return new sap.m.Popover(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.destroyContent = function() { return new sap.m.Popover(); };

/**
 * Destroys the customHeader in the aggregation {@link #getCustomHeader customHeader}.
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.destroyCustomHeader = function() { return new sap.m.Popover(); };

/**
 * Destroys the endButton in the aggregation {@link #getEndButton endButton}.
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.destroyEndButton = function() { return new sap.m.Popover(); };

/**
 * Destroys the footer in the aggregation {@link #getFooter footer}.
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.destroyFooter = function() { return new sap.m.Popover(); };

/**
 * Destroys the subHeader in the aggregation {@link #getSubHeader subHeader}.
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.destroySubHeader = function() { return new sap.m.Popover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterClose afterClose} event of this <code>sap.m.Popover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.detachAfterClose = function(fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterOpen afterOpen} event of this <code>sap.m.Popover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeClose beforeClose} event of this <code>sap.m.Popover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.Popover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.Popover(); };

/**
 * Creates a new subclass of class sap.m.Popover with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Popover.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterClose afterClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] This refers to the control which opens the popover.
 * 
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.fireAfterClose = function(mParameters) { return new sap.m.Popover(); };

/**
 * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] This refers to the control which opens the popover.
 * 
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.fireAfterOpen = function(mParameters) { return new sap.m.Popover(); };

/**
 * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] This refers to the control which opens the popover.
 * 
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.fireBeforeClose = function(mParameters) { return new sap.m.Popover(); };

/**
 * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] This refers to the control which opens the popover.
 * 
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.fireBeforeOpen = function(mParameters) { return new sap.m.Popover(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getBeginButton beginButton}.
 * 
 * BeginButton is shown at the left side (right side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.
 * 
 * @returns {sap.ui.core.Control}
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getBeginButton = function() { return new sap.ui.core.Control(); };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * The content inside the popover.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getContentHeight contentHeight}.
 * 
 * Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>contentHeight</code>
 * @since 1.9.0
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getContentMinWidth contentMinWidth}.
 * 
 * Sets the minimum width of the content area inside popover.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>contentMinWidth</code>
 * @since 1.36
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getContentMinWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getContentWidth contentWidth}.
 * 
 * Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>contentWidth</code>
 * @since 1.9.0
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets content of aggregation {@link #getCustomHeader customHeader}.
 * 
 * Any control that needed to be displayed in the header area. When this is set, the showHeader property is ignored, and only this customHeader is shown on the top of popover.
 * 
 * @returns {sap.ui.core.Control}
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getCustomHeader = function() { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getEnableScrolling enableScrolling}.
 * 
 * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enableScrolling</code>
 * 
 * @deprecated Since version 1.15.0.
 * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getEnableScrolling = function() { return false; };

/**
 * Gets content of aggregation {@link #getEndButton endButton}.
 * 
 * EndButton is always shown at the right side (left side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.
 * 
 * @returns {sap.ui.core.Control}
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getEndButton = function() { return new sap.ui.core.Control(); };

/**
 * Gets content of aggregation {@link #getFooter footer}.
 * 
 * This is optional footer which is shown on the bottom of the popover.
 * 
 * @returns {sap.ui.core.Control}
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getFooter = function() { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getHorizontalScrolling horizontalScrolling}.
 * 
 * This property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>horizontalScrolling</code>
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getHorizontalScrolling = function() { return false; };

/**
 * ID of the element which is the current target of the association {@link #getInitialFocus initialFocus}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getInitialFocus = function() { return new sap.ui.core.ID(); };

/**
 * ID of the element which is the current target of the association {@link #getLeftButton leftButton}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @deprecated Since version 1.15.1.
 * 
 * This property has been deprecated since 1.15.1. Please use the beginButton instead.
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getLeftButton = function() { return new sap.ui.core.ID(); };

/**
 * Returns a metadata object for class sap.m.Popover.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Popover.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getModal modal}.
 * 
 * If the popover will not be closed when tapping outside the popover. It also blocks any interaction with the background. The default value is false.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>modal</code>
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getModal = function() { return false; };

/**
 * Gets current value of property {@link #getOffsetX offsetX}.
 * 
 * The offset for the popover placement in the x axis. It's with unit pixel.
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>offsetX</code>
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getOffsetX = function() { return 0; };

/**
 * Gets current value of property {@link #getOffsetY offsetY}.
 * 
 * The offset for the popover placement in the y axis. It's with unit pixel.
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>offsetY</code>
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getOffsetY = function() { return 0; };

/**
 * Gets current value of property {@link #getPlacement placement}.
 * 
 * This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferredLeft, sap.m.PlacementType.HorizontalPreferredRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferredTop, sap.m.PlacementType.VerticalPreferredBottom, sap.m.PlacementType.Auto. The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause any rerendering of the popover, but it will take effect when it's opened again.
 * 
 * Default value is <code>Right</code>.
 * @returns {sap.m.PlacementType} Value of property <code>placement</code>
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getPlacement = function() { return new sap.m.PlacementType(); };

/**
 * Gets current value of property {@link #getResizable resizable}.
 * 
 * Whether resize option is enabled.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>resizable</code>
 * @since 1.36.4
 * 
 * @experimental since 1.36.4 Do not use directly on Popover while in experimental mode!
 * @public
 * 
 */
sap.m.Popover.prototype.getResizable = function() { return false; };

/**
 * ID of the element which is the current target of the association {@link #getRightButton rightButton}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @deprecated Since version 1.15.1.
 * 
 * This property has been deprecated since 1.15.1. Please use the endButton instead.
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getRightButton = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getShowArrow showArrow}.
 * 
 * Whether Popover arrow should be visible
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showArrow</code>
 * @since 1.31
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getShowArrow = function() { return false; };

/**
 * Gets current value of property {@link #getShowHeader showHeader}.
 * 
 * If a header should be shown at the top of the popover.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showHeader</code>
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getShowHeader = function() { return false; };

/**
 * Gets content of aggregation {@link #getSubHeader subHeader}.
 * 
 * When subHeader is assigned to Popover, it's rendered directly after the main header if there is, or at the beginning of Popover when there's no main header. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.
 * 
 * @returns {sap.ui.core.Control}
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getSubHeader = function() { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Title text appears in the header. This property will be ignored when showHeader is set to false.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getVerticalScrolling verticalScrolling}.
 * 
 * This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>verticalScrolling</code>
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.getVerticalScrolling = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Popover(); };

/**
 * The method checks if the Popover is open. It returns true when the Popover is currently open (this includes opening and closing animations), otherwise it returns false.
 * 
 * @return {boolean} whether the Popover is currently opened
 * @public
 * @since 1.9.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Popover.prototype.isOpen = function() { return false; };

/**
 * Opens the Popover and set the Popover position according to the {@link #getPlacement() placement} property around the <code>oControl</code> parameter.
 * 
 * @param {object} oControl This is the control to which the Popover will be placed. It can be not only a UI5 control, but also an existing DOM reference. The side of the placement depends on the placement property set in the Popover.
 * @param {boolean} bSkipInstanceManager
 * @returns {sap.m.Popover} Reference to the control instance for chaining
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Popover.prototype.openBy = function(oControl,bSkipInstanceManager) { return new sap.m.Popover(); };

/**
 * Calculate outerHeight of the element; used as hook for SVG elements
 * @param {HTMLElement} oElement An Element for which outerHeight will be calculated.
 * @param {boolean} bIncludeMargin Determines if the margins should be included in the calculated outerHeight. Default value is false.
 * @protected
 * 
 */
sap.m.Popover.outerHeight = function(oElement,bIncludeMargin) {  };

/**
 * Calculate outerWidth of the element; used as hook for SVG elements
 * @param {HTMLElement} oElement An Element for which outerWidth will be calculated.
 * @param {boolean} bIncludeMargin Determines if the margins should be included in the calculated outerWidth. Default value is false.
 * @protected
 * 
 */
sap.m.Popover.outerWidth = function(oElement,bIncludeMargin) {  };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Sets the aggregated {@link #getBeginButton beginButton}.
 * @param {sap.ui.core.Control} oBeginButton The beginButton to set
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setBeginButton = function(oBeginButton) { return new sap.m.Popover(); };

/**
 * Setter for property <code>bounce</code>.
 * 
 * Default value is empty
 * 
 * @param {boolean} bBounce New value for property <code>bounce</code>
 * @return {sap.m.Popover} Reference to the control instance for chaining
 * @protected
 * 
 */
sap.m.Popover.prototype.setBounce = function(bBounce) { return new sap.m.Popover(); };

/**
 * Sets a new value for property {@link #getContentHeight contentHeight}.
 * 
 * Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sContentHeight New value for property <code>contentHeight</code>
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.9.0
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setContentHeight = function(sContentHeight) { return new sap.m.Popover(); };

/**
 * Sets a new value for property {@link #getContentMinWidth contentMinWidth}.
 * 
 * Sets the minimum width of the content area inside popover.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sContentMinWidth New value for property <code>contentMinWidth</code>
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setContentMinWidth = function(sContentMinWidth) { return new sap.m.Popover(); };

/**
 * Sets a new value for property {@link #getContentWidth contentWidth}.
 * 
 * Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sContentWidth New value for property <code>contentWidth</code>
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.9.0
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setContentWidth = function(sContentWidth) { return new sap.m.Popover(); };

/**
 * Sets the aggregated {@link #getCustomHeader customHeader}.
 * @param {sap.ui.core.Control} oCustomHeader The customHeader to set
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setCustomHeader = function(oCustomHeader) { return new sap.m.Popover(); };

/**
 * Sets a new value for property {@link #getEnableScrolling enableScrolling}.
 * 
 * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableScrolling New value for property <code>enableScrolling</code>
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.15.0.
 * This property is deprecated. Please use properties verticalScrolling and horizontalScrolling instead. If you still use this property it will be mapped on the new properties verticalScrolling and horizontalScrolling.
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setEnableScrolling = function(bEnableScrolling) { return new sap.m.Popover(); };

/**
 * Sets the aggregated {@link #getEndButton endButton}.
 * @param {sap.ui.core.Control} oEndButton The endButton to set
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setEndButton = function(oEndButton) { return new sap.m.Popover(); };

/**
 * The followOf feature closes the Popover when the position of the control that opened the Popover changes by at least  32 pixels (on desktop browsers). This may lead to unwanted closing of the Popover.
 * 
 * This function is for enabling/disabling the followOf feature.
 * 
 * @param {boolean} bValue Enables the followOf feature
 * @return {sap.m.Popover} Reference to the control instance for chaining
 * @protected
 * @since 1.16.8
 * 
 */
sap.m.Popover.prototype.setFollowOf = function(bValue) { return new sap.m.Popover(); };

/**
 * Sets the aggregated {@link #getFooter footer}.
 * @param {sap.ui.core.Control} oFooter The footer to set
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setFooter = function(oFooter) { return new sap.m.Popover(); };

/**
 * Sets a new value for property {@link #getHorizontalScrolling horizontalScrolling}.
 * 
 * This property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bHorizontalScrolling New value for property <code>horizontalScrolling</code>
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setHorizontalScrolling = function(bHorizontalScrolling) { return new sap.m.Popover(); };

/**
 * Sets the associated {@link #getInitialFocus initialFocus}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oInitialFocus ID of an element which becomes the new target of this initialFocus association; alternatively, an element instance may be given
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setInitialFocus = function(oInitialFocus) { return new sap.m.Popover(); };

/**
 * Sets the associated {@link #getLeftButton leftButton}.
 * @param {sap.ui.core.ID | sap.m.Button} oLeftButton ID of an element which becomes the new target of this leftButton association; alternatively, an element instance may be given
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.15.1.
 * 
 * This property has been deprecated since 1.15.1. Please use the beginButton instead.
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setLeftButton = function(oLeftButton) { return new sap.m.Popover(); };

/**
 * Setter for property <code>modal</code>.
 * This overwrites the default setter of the property <code>modal</code> to avoid rerendering the whole popover control.
 * 
 * Default value is <code>false</code>
 * 
 * @param {boolean} bModal New value for property <code>modal</code>.
 * @param {string} [sModalCSSClass] A CSS class (or space-separated list of classes) that should be added to the block layer.
 * @return {sap.m.Popover} Reference to the control instance for chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setModal = function(bModal,sModalCSSClass) { return new sap.m.Popover(); };

/**
 * Sets a new value for property {@link #getOffsetX offsetX}.
 * 
 * The offset for the popover placement in the x axis. It's with unit pixel.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {int} iOffsetX New value for property <code>offsetX</code>
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setOffsetX = function(iOffsetX) { return new sap.m.Popover(); };

/**
 * Sets a new value for property {@link #getOffsetY offsetY}.
 * 
 * The offset for the popover placement in the y axis. It's with unit pixel.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {int} iOffsetY New value for property <code>offsetY</code>
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setOffsetY = function(iOffsetY) { return new sap.m.Popover(); };

/**
 * Set the placement of the Popover.
 * 
 * @param {sap.m.PlacementType} sPlacement The position of the Popover
 * @returns {sap.m.Popover} Reference to the control instance for chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setPlacement = function(sPlacement) { return new sap.m.Popover(); };

/**
 * Sets a new value for property {@link #getResizable resizable}.
 * 
 * Whether resize option is enabled.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bResizable New value for property <code>resizable</code>
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.4
 * 
 * @experimental since 1.36.4 Do not use directly on Popover while in experimental mode!
 * @public
 * 
 */
sap.m.Popover.prototype.setResizable = function(bResizable) { return new sap.m.Popover(); };

/**
 * Sets the associated {@link #getRightButton rightButton}.
 * @param {sap.ui.core.ID | sap.m.Button} oRightButton ID of an element which becomes the new target of this rightButton association; alternatively, an element instance may be given
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.15.1.
 * 
 * This property has been deprecated since 1.15.1. Please use the endButton instead.
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setRightButton = function(oRightButton) { return new sap.m.Popover(); };

/**
 * Sets a new value for property {@link #getShowArrow showArrow}.
 * 
 * Whether Popover arrow should be visible
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowArrow New value for property <code>showArrow</code>
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.31
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setShowArrow = function(bShowArrow) { return new sap.m.Popover(); };

/**
 * Sets a new value for property {@link #getShowHeader showHeader}.
 * 
 * If a header should be shown at the top of the popover.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowHeader New value for property <code>showHeader</code>
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setShowHeader = function(bShowHeader) { return new sap.m.Popover(); };

/**
 * Sets the aggregated {@link #getSubHeader subHeader}.
 * @param {sap.ui.core.Control} oSubHeader The subHeader to set
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.1
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setSubHeader = function(oSubHeader) { return new sap.m.Popover(); };

/**
 * The setter of the title property.
 * 
 * If you want to show a header in the popover, don't forget to set the
 * {@link #setShowHeader showHeader} property to true.
 * @param {string} sTitle The title to be set
 * @returns {sap.m.Popover} Reference to the control instance for chaining
 * @public
 * 
 */
sap.m.Popover.prototype.setTitle = function(sTitle) { return new sap.m.Popover(); };

/**
 * Sets a new value for property {@link #getVerticalScrolling verticalScrolling}.
 * 
 * This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVerticalScrolling New value for property <code>verticalScrolling</code>
 * @returns {sap.m.Popover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.Popover.prototype.setVerticalScrolling = function(bVerticalScrolling) { return new sap.m.Popover(); };


// ---- sap.m.PopupHelper --------------------------------------------------------------------------

/**
 * This methods converts the percentage value to an absolute number based on the given base number.
 * 
 * @param {string} sPercentage A percentage value in string format, for example "25%"
 * @param {float} fBaseSize A float number which the calculation is based on.
 * @returns The calculated size string with "px" as unit or null when the format of given parameter is wrong.
 * 
 * @protected
 * 
 * @memberof sap.m.PopupHelper
 */
sap.m.PopupHelper.calcPercentageSize = function(sPercentage,fBaseSize) {  };


// ---- sap.m.ProgressIndicator --------------------------------------------------------------------------

/**
 * Constructor for a new ProgressIndicator.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getDisplayValue displayValue} : string</li>
 * <li>{@link #getPercentValue percentValue} : float (default: 0)</li>
 * <li>{@link #getShowValue showValue} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator is filled with a color.
 * Additionally, a user-defined string can be displayed on the ProgressIndicator.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.13.1
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ProgressIndicator = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ProgressIndicator with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ProgressIndicator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.ProgressIndicator.prototype.getAccessibilityInfo = function() {  };

/**
 * Gets current value of property {@link #getDisplayValue displayValue}.
 * 
 * Specifies the text value to be displayed in the bar.
 * 
 * @returns {string} Value of property <code>displayValue</code>
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getDisplayValue = function() { return ""; };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Switches enabled state of the control. Disabled fields have different colors, and cannot be focused.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * Specifies the height of the control. The default value depends on the theme. Suggested size for normal use is 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) is 1.375rem (22px).
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.ProgressIndicator.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ProgressIndicator.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPercentValue percentValue}.
 * 
 * Specifies the numerical value in percent for the length of the progress bar.
 * 
 * Default value is <code>0</code>.
 * @returns {float} Value of property <code>percentValue</code>
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getPercentValue = function() { return 0.0; };

/**
 * Gets current value of property {@link #getShowValue showValue}.
 * 
 * Indicates whether the displayValue should be shown in the ProgressIndicator.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showValue</code>
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getShowValue = function() { return false; };

/**
 * Gets current value of property {@link #getState state}.
 * 
 * Specifies the state of the bar. Enumeration sap.ui.core.ValueState provides Error (red), Warning (yellow), Success (green), None (blue) (default value).
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>state</code>
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Specifies the element's text directionality with enumerated options (RTL or LTR). By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Specifies the width of the control.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Sets a new value for property {@link #getDisplayValue displayValue}.
 * 
 * Specifies the text value to be displayed in the bar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sDisplayValue New value for property <code>displayValue</code>
 * @returns {sap.m.ProgressIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setDisplayValue = function(sDisplayValue) { return new sap.m.ProgressIndicator(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Switches enabled state of the control. Disabled fields have different colors, and cannot be focused.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.ProgressIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setEnabled = function(bEnabled) { return new sap.m.ProgressIndicator(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * Specifies the height of the control. The default value depends on the theme. Suggested size for normal use is 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) is 1.375rem (22px).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.m.ProgressIndicator} Reference to <code>this</code> in order to allow method chaining
 * @since 1.15.0
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setHeight = function(sHeight) { return new sap.m.ProgressIndicator(); };

/**
 * Sets a new value for property {@link #getPercentValue percentValue}.
 * 
 * Specifies the numerical value in percent for the length of the progress bar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {float} fPercentValue New value for property <code>percentValue</code>
 * @returns {sap.m.ProgressIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setPercentValue = function(fPercentValue) { return new sap.m.ProgressIndicator(); };

/**
 * Sets a new value for property {@link #getShowValue showValue}.
 * 
 * Indicates whether the displayValue should be shown in the ProgressIndicator.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowValue New value for property <code>showValue</code>
 * @returns {sap.m.ProgressIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setShowValue = function(bShowValue) { return new sap.m.ProgressIndicator(); };

/**
 * Sets a new value for property {@link #getState state}.
 * 
 * Specifies the state of the bar. Enumeration sap.ui.core.ValueState provides Error (red), Warning (yellow), Success (green), None (blue) (default value).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.core.ValueState} sState New value for property <code>state</code>
 * @returns {sap.m.ProgressIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setState = function(sState) { return new sap.m.ProgressIndicator(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Specifies the element's text directionality with enumerated options (RTL or LTR). By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.ProgressIndicator} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setTextDirection = function(sTextDirection) { return new sap.m.ProgressIndicator(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Specifies the width of the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.ProgressIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ProgressIndicator.prototype.setWidth = function(sWidth) { return new sap.m.ProgressIndicator(); };


// ---- sap.m.PullToRefresh --------------------------------------------------------------------------

/**
 * Constructor for a new PullToRefresh.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getShowIcon showIcon} : boolean (default: false)</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:refresh refresh} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * PullToRefresh control. Put it as the first control in contents of a scroll container or a scrollable page. Do not place it into a page with disabled scrolling.
 * On touch devices it gets hidden by default and when the user pulls down the page far enough, it gets visible and triggers the "refresh" event.
 * In non-touch browsers where scrollbars are used for scrolling, it is always visible and triggers the "refresh" event when clicked.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.9.2
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.PullToRefresh = function(sId,mSettings) {};
/**
 * Event indicates that the user has requested new data
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.refresh = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:refresh refresh} event of this <code>sap.m.PullToRefresh</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.PullToRefresh</code> itself.
 * 
 * Event indicates that the user has requested new data
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.PullToRefresh</code> itself
 * 
 * @returns {sap.m.PullToRefresh} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.attachRefresh = function(oData,fnFunction,oListener) { return new sap.m.PullToRefresh(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:refresh refresh} event of this <code>sap.m.PullToRefresh</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.PullToRefresh} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.detachRefresh = function(fnFunction,oListener) { return new sap.m.PullToRefresh(); };

/**
 * Creates a new subclass of class sap.m.PullToRefresh with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.PullToRefresh.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:refresh refresh} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.PullToRefresh} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.PullToRefresh.prototype.fireRefresh = function(mParameters) { return new sap.m.PullToRefresh(); };

/**
 * Gets current value of property {@link #getCustomIcon customIcon}.
 * 
 * Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>customIcon</code>
 * 
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.getCustomIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getDescription description}.
 * 
 * Optional description. May be used to inform a user, for example, when the list has been updated last time.
 * 
 * @returns {string} Value of property <code>description</code>
 * 
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.getDescription = function() { return ""; };

/**
 * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconDensityAware</code>
 * 
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.getIconDensityAware = function() { return false; };

/**
 * Returns a metadata object for class sap.m.PullToRefresh.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.PullToRefresh.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowIcon showIcon}.
 * 
 * Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showIcon</code>
 * 
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.getShowIcon = function() { return false; };

/**
 * Hides the control and resets it to the normal state. In non-touch environments the control is not hidden.
 * 
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.PullToRefresh.prototype.hide = function() { return null; };

/**
 * Sets a new value for property {@link #getCustomIcon customIcon}.
 * 
 * Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sCustomIcon New value for property <code>customIcon</code>
 * @returns {sap.m.PullToRefresh} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.setCustomIcon = function(sCustomIcon) { return new sap.m.PullToRefresh(); };

/**
 * Sets a new value for property {@link #getDescription description}.
 * 
 * Optional description. May be used to inform a user, for example, when the list has been updated last time.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sDescription New value for property <code>description</code>
 * @returns {sap.m.PullToRefresh} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.setDescription = function(sDescription) { return new sap.m.PullToRefresh(); };

/**
 * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware New value for property <code>iconDensityAware</code>
 * @returns {sap.m.PullToRefresh} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.PullToRefresh(); };

/**
 * Sets a new value for property {@link #getShowIcon showIcon}.
 * 
 * Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowIcon New value for property <code>showIcon</code>
 * @returns {sap.m.PullToRefresh} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.PullToRefresh.prototype.setShowIcon = function(bShowIcon) { return new sap.m.PullToRefresh(); };


// ---- sap.m.QuickView --------------------------------------------------------------------------

/**
 * Constructor for a new QuickView.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType (default: Right)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 320px)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.QuickViewBase#constructor sap.m.QuickViewBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class The QuickView control renders a responsive popover (sap.m.Popover or sap.m.Dialog)
 * and displays information of an object in a business-card format. It also allows this object to be linked to
 * another object using one of the links in the responsive popover. Clicking that link updates the information in the
 * popover with the data of the linked object. Unlimited number of objects can be linked.
 * 
 * @extends sap.m.QuickViewBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.28.11
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.QuickView = function(sId,mSettings) {};
/**
 * This event fires after the QuickView is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This parameter refers to the control, which opens the QuickView.
 * @param {sap.m.Button} oControlEvent.getParameters.origin This parameter contains the control,
 * which triggers the close of the QuickView.
 * It is undefined when running on desktop or tablet.
 * @public
 * 
 */
sap.m.QuickView.prototype.afterClose = function(oControlEvent) {  };

/**
 * This event fires after the QuickView is opened.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This parameter refers to the control, which opens the QuickView.
 * @public
 * 
 */
sap.m.QuickView.prototype.afterOpen = function(oControlEvent) {  };

/**
 * This event fires before the QuickView is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This parameter refers to the control, which opens the QuickView.
 * @param {sap.m.Button} oControlEvent.getParameters.origin This parameter contains the control,
 * which triggers the close of the QuickView.
 * It is undefined when running on desktop or tablet.
 * @public
 * 
 */
sap.m.QuickView.prototype.beforeClose = function(oControlEvent) {  };

/**
 * This event fires before the QuickView is opened.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This parameter refers to the control, which opens the QuickView.
 * @public
 * 
 */
sap.m.QuickView.prototype.beforeOpen = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterClose afterClose} event of this <code>sap.m.QuickView</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.QuickView</code> itself.
 * 
 * This event fires after the QuickView is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.QuickView</code> itself
 * 
 * @returns {sap.m.QuickView} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.QuickView.prototype.attachAfterClose = function(oData,fnFunction,oListener) { return new sap.m.QuickView(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterOpen afterOpen} event of this <code>sap.m.QuickView</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.QuickView</code> itself.
 * 
 * This event fires after the QuickView is opened.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.QuickView</code> itself
 * 
 * @returns {sap.m.QuickView} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.QuickView.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.QuickView(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeClose beforeClose} event of this <code>sap.m.QuickView</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.QuickView</code> itself.
 * 
 * This event fires before the QuickView is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.QuickView</code> itself
 * 
 * @returns {sap.m.QuickView} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.QuickView.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.QuickView(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.QuickView</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.QuickView</code> itself.
 * 
 * This event fires before the QuickView is opened.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.QuickView</code> itself
 * 
 * @returns {sap.m.QuickView} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.QuickView.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.QuickView(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterClose afterClose} event of this <code>sap.m.QuickView</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.QuickView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickView.prototype.detachAfterClose = function(fnFunction,oListener) { return new sap.m.QuickView(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterOpen afterOpen} event of this <code>sap.m.QuickView</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.QuickView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickView.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.QuickView(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeClose beforeClose} event of this <code>sap.m.QuickView</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.QuickView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickView.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.QuickView(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.QuickView</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.QuickView} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickView.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.QuickView(); };

/**
 * Creates a new subclass of class sap.m.QuickView with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.QuickViewBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.QuickView.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterClose afterClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] This parameter refers to the control, which opens the QuickView.
 * @param {sap.m.Button} [mParameters.origin] This parameter contains the control,
 * which triggers the close of the QuickView.
 * It is undefined when running on desktop or tablet.
 * 
 * @returns {sap.m.QuickView} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.QuickView.prototype.fireAfterClose = function(mParameters) { return new sap.m.QuickView(); };

/**
 * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] This parameter refers to the control, which opens the QuickView.
 * 
 * @returns {sap.m.QuickView} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.QuickView.prototype.fireAfterOpen = function(mParameters) { return new sap.m.QuickView(); };

/**
 * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] This parameter refers to the control, which opens the QuickView.
 * @param {sap.m.Button} [mParameters.origin] This parameter contains the control,
 * which triggers the close of the QuickView.
 * It is undefined when running on desktop or tablet.
 * 
 * @returns {sap.m.QuickView} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.QuickView.prototype.fireBeforeClose = function(mParameters) { return new sap.m.QuickView(); };

/**
 * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] This parameter refers to the control, which opens the QuickView.
 * 
 * @returns {sap.m.QuickView} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.QuickView.prototype.fireBeforeOpen = function(mParameters) { return new sap.m.QuickView(); };

/**
 * Returns a metadata object for class sap.m.QuickView.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.QuickView.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPlacement placement}.
 * 
 * This property is reused from sap.m.Popover and only takes effect when running on desktop or tablet. Please refer the documentation of the placement property of sap.m.Popover.
 * 
 * Default value is <code>Right</code>.
 * @returns {sap.m.PlacementType} Value of property <code>placement</code>
 * 
 * @public
 * 
 */
sap.m.QuickView.prototype.getPlacement = function() { return new sap.m.PlacementType(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * The width of the QuickView. The property takes effect only when running on desktop or tablet.
 * 
 * Default value is <code>320px</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.QuickView.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Opens the QuickView.
 * @param {sap.ui.core.Control} oControl The control which opens the QuickView.
 * @returns {sap.m.QuickView} Pointer to the control instance for chaining
 * @public
 * 
 */
sap.m.QuickView.prototype.openBy = function(oControl) { return new sap.m.QuickView(); };

/**
 * The method sets placement position of the QuickView.
 * 
 * @param {sap.m.PlacementType} sPlacement The side from which the QuickView appears relative to the control that opens it.
 * @returns {sap.m.QuickView} Pointer to the control instance for chaining.
 * @public
 * 
 */
sap.m.QuickView.prototype.setPlacement = function(sPlacement) { return new sap.m.QuickView(); };

/**
 * The method sets the width of the QuickView.
 * Works only on desktop or tablet.
 * @param {sap.ui.core.CSSSize} sWidth The new width of the QuickView.
 * @returns {sap.m.QuickView} Pointer to the control instance for chaining
 * @public
 * 
 */
sap.m.QuickView.prototype.setWidth = function(sWidth) { return new sap.m.QuickView(); };


// ---- sap.m.QuickViewBase --------------------------------------------------------------------------

/**
 * Constructor for a new QuickViewBase.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPages pages} : sap.m.QuickViewPage[] (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterNavigate afterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class QuickViewBase class provides base functionality for QuickView and QuickViewCard.
 * Do not use it directly.
 * 
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.28.11
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.QuickViewBase = function(sId,mSettings) {};
/**
 * The event is fired when navigation between two pages has completed.
 * In case of animated transitions this event is fired with some delay
 * after the "navigate" event.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from Determines the page, which has been displayed before navigation.
 * @param {string} oControlEvent.getParameters.fromId Determines the ID of the page, which has been displayed before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to Determines the page, which is now displayed after navigation.
 * @param {string} oControlEvent.getParameters.toId Determines the ID of the page, which is now displayed after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Determines whether the "to" page (a control with the ID of the page, which has been navigated to) has not been displayed/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Determines whether this was a forward navigation.
 * @param {boolean} oControlEvent.getParameters.isBack Determines whether this was a back navigation.
 * @param {boolean} oControlEvent.getParameters.isBackToTop Determines whether this was a navigation to the root page.
 * @param {boolean} oControlEvent.getParameters.isBackToPage Determines whether this was a navigation to a specific page.
 * @param {string} oControlEvent.getParameters.direction Determines  how the navigation was triggered, possible values are
 * "to", "back", "backToPage", and "backToTop".
 * @param {boolean} oControlEvent.getParameters.isTopPage Determines whether this is a navigation to the top page.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.navOrigin Determines which link initiated the navigation.
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.afterNavigate = function(oControlEvent) {  };

/**
 * The event is fired when navigation between two pages has been triggered.
 * The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(),
 * which means that there will be no navigation.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was displayed before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was displayed before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be displayed after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be displayed after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Determines whether the "to" page (a control with the ID of the page
 * which is currently navigated to) has not been displayed/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Determines whether this is a forward navigation.
 * @param {boolean} oControlEvent.getParameters.isBack Determines whether this is a back navigation.
 * @param {boolean} oControlEvent.getParameters.isBackToTop Determines  whether this is a navigation to the root page.
 * @param {boolean} oControlEvent.getParameters.isBackToPage Determines whether this was a navigation to a specific page.
 * @param {string} oControlEvent.getParameters.direction Determines how the navigation was triggered, possible values are
 * "to", "back", "backToPage", and "backToTop".
 * @param {sap.ui.core.Control} oControlEvent.getParameters.navOrigin Determines which link initiated the navigation.
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.navigate = function(oControlEvent) {  };

/**
 * Adds some page to the aggregation {@link #getPages pages}.
 * @param {sap.m.QuickViewPage}
 *            oPage the page to add; if empty, nothing is inserted
 * @returns {sap.m.QuickViewBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.addPage = function(oPage) { return new sap.m.QuickViewBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterNavigate afterNavigate} event of this <code>sap.m.QuickViewBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.QuickViewBase</code> itself.
 * 
 * The event is fired when navigation between two pages has completed.
 * In case of animated transitions this event is fired with some delay
 * after the "navigate" event.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.QuickViewBase</code> itself
 * 
 * @returns {sap.m.QuickViewBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.attachAfterNavigate = function(oData,fnFunction,oListener) { return new sap.m.QuickViewBase(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:navigate navigate} event of this <code>sap.m.QuickViewBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.QuickViewBase</code> itself.
 * 
 * The event is fired when navigation between two pages has been triggered.
 * The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(),
 * which means that there will be no navigation.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.QuickViewBase</code> itself
 * 
 * @returns {sap.m.QuickViewBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.attachNavigate = function(oData,fnFunction,oListener) { return new sap.m.QuickViewBase(); };

/**
 * Binds aggregation {@link #getPages pages} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.QuickViewBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.bindPages = function(oBindingInfo) { return new sap.m.QuickViewBase(); };

/**
 * Destroys all the pages in the aggregation {@link #getPages pages}.
 * @returns {sap.m.QuickViewBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.destroyPages = function() { return new sap.m.QuickViewBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterNavigate afterNavigate} event of this <code>sap.m.QuickViewBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.QuickViewBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.detachAfterNavigate = function(fnFunction,oListener) { return new sap.m.QuickViewBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:navigate navigate} event of this <code>sap.m.QuickViewBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.QuickViewBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.detachNavigate = function(fnFunction,oListener) { return new sap.m.QuickViewBase(); };

/**
 * Creates a new subclass of class sap.m.QuickViewBase with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.QuickViewBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterNavigate afterNavigate} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.from] Determines the page, which has been displayed before navigation.
 * @param {string} [mParameters.fromId] Determines the ID of the page, which has been displayed before navigation.
 * @param {sap.ui.core.Control} [mParameters.to] Determines the page, which is now displayed after navigation.
 * @param {string} [mParameters.toId] Determines the ID of the page, which is now displayed after navigation.
 * @param {boolean} [mParameters.firstTime] Determines whether the "to" page (a control with the ID of the page, which has been navigated to) has not been displayed/navigated to before.
 * @param {boolean} [mParameters.isTo] Determines whether this was a forward navigation.
 * @param {boolean} [mParameters.isBack] Determines whether this was a back navigation.
 * @param {boolean} [mParameters.isBackToTop] Determines whether this was a navigation to the root page.
 * @param {boolean} [mParameters.isBackToPage] Determines whether this was a navigation to a specific page.
 * @param {string} [mParameters.direction] Determines  how the navigation was triggered, possible values are
 * "to", "back", "backToPage", and "backToTop".
 * @param {boolean} [mParameters.isTopPage] Determines whether this is a navigation to the top page.
 * @param {sap.ui.core.Control} [mParameters.navOrigin] Determines which link initiated the navigation.
 * 
 * @returns {sap.m.QuickViewBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.QuickViewBase.prototype.fireAfterNavigate = function(mParameters) { return new sap.m.QuickViewBase(); };

/**
 * Fires event {@link #event:navigate navigate} to attached listeners.
 * 
 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.from] The page which was displayed before the current navigation.
 * @param {string} [mParameters.fromId] The ID of the page which was displayed before the current navigation.
 * @param {sap.ui.core.Control} [mParameters.to] The page which will be displayed after the current navigation.
 * @param {string} [mParameters.toId] The ID of the page which will be displayed after the current navigation.
 * @param {boolean} [mParameters.firstTime] Determines whether the "to" page (a control with the ID of the page
 * which is currently navigated to) has not been displayed/navigated to before.
 * @param {boolean} [mParameters.isTo] Determines whether this is a forward navigation.
 * @param {boolean} [mParameters.isBack] Determines whether this is a back navigation.
 * @param {boolean} [mParameters.isBackToTop] Determines  whether this is a navigation to the root page.
 * @param {boolean} [mParameters.isBackToPage] Determines whether this was a navigation to a specific page.
 * @param {string} [mParameters.direction] Determines how the navigation was triggered, possible values are
 * "to", "back", "backToPage", and "backToTop".
 * @param {sap.ui.core.Control} [mParameters.navOrigin] Determines which link initiated the navigation.
 * 
 * @returns {boolean} Whether or not to prevent the default action
 * @protected
 * 
 */
sap.m.QuickViewBase.prototype.fireNavigate = function(mParameters) { return false; };

/**
 * Returns a metadata object for class sap.m.QuickViewBase.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.QuickViewBase.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getPages pages}.
 * 
 * Displays a page header, object icon or image, object name with short description,
 * and object information divided in groups
 * 
 * @returns {sap.m.QuickViewPage[]}
 * 
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.getPages = function() { return new Array(); };

/**
 * Checks for the provided <code>sap.m.QuickViewPage</code> in the aggregation {@link #getPages pages}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.QuickViewPage}
 *           oPage The page whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.indexOfPage = function(oPage) { return 0; };

/**
 * Inserts a page into the aggregation {@link #getPages pages}.
 * 
 * @param {sap.m.QuickViewPage}
 *            oPage the page to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the page should be inserted at; for
 *              a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the page is inserted at
 *              the last position
 * @returns {sap.m.QuickViewBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.insertPage = function(oPage,iIndex) { return new sap.m.QuickViewBase(); };

/**
 * Navigates to the previous page if there is such.
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.navigateBack = function() {  };

/**
 * Removes all the controls from the aggregation {@link #getPages pages}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.QuickViewPage[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.removeAllPages = function() { return new Array(); };

/**
 * Removes a page from the aggregation {@link #getPages pages}.
 * 
 * @param {int | string | sap.m.QuickViewPage} vPage The page to remove or its index or id
 * @returns {sap.m.QuickViewPage} The removed page or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.removePage = function(vPage) { return new sap.m.QuickViewPage(); };

/**
 * Unbinds aggregation {@link #getPages pages} from model data.
 * @returns {sap.m.QuickViewBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewBase.prototype.unbindPages = function() { return new sap.m.QuickViewBase(); };


// ---- sap.m.QuickViewCard --------------------------------------------------------------------------

/**
 * Constructor for a new QuickViewCard.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowVerticalScrollBar showVerticalScrollBar} : boolean (default: true)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.QuickViewBase#constructor sap.m.QuickViewBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class The QuickViewCard control displays information of an object in a business-card format.
 * It also allows this object to be linked to another object using one of the links.
 * Clicking that link updates the information with the data of the linked object.
 * Unlimited number of objects can be linked.
 * 
 * @extends sap.m.QuickViewBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.28.11
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.QuickViewCard = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.QuickViewCard with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.QuickViewBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.QuickViewCard.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.QuickViewCard.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.QuickViewCard.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowVerticalScrollBar showVerticalScrollBar}.
 * 
 * Determines whether the browser displays the vertical scroll bar or simply cuts the content of the QuickViewCard.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showVerticalScrollBar</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewCard.prototype.getShowVerticalScrollBar = function() { return false; };

/**
 * Sets a new value for property {@link #getShowVerticalScrollBar showVerticalScrollBar}.
 * 
 * Determines whether the browser displays the vertical scroll bar or simply cuts the content of the QuickViewCard.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowVerticalScrollBar New value for property <code>showVerticalScrollBar</code>
 * @returns {sap.m.QuickViewCard} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewCard.prototype.setShowVerticalScrollBar = function(bShowVerticalScrollBar) { return new sap.m.QuickViewCard(); };


// ---- sap.m.QuickViewGroup --------------------------------------------------------------------------

/**
 * Constructor for a new QuickViewGroup.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getHeading heading} : string (default: )</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getElements elements} : sap.m.QuickViewGroupElement[] (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class QuickViewGroup consists of a title (optional) and an entity of group elements.
 * 
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.28.11
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.QuickViewGroup = function(sId,mSettings) {};
/**
 * Adds some element to the aggregation {@link #getElements elements}.
 * @param {sap.m.QuickViewGroupElement}
 *            oElement the element to add; if empty, nothing is inserted
 * @returns {sap.m.QuickViewGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroup.prototype.addElement = function(oElement) { return new sap.m.QuickViewGroup(); };

/**
 * Binds aggregation {@link #getElements elements} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.QuickViewGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroup.prototype.bindElements = function(oBindingInfo) { return new sap.m.QuickViewGroup(); };

/**
 * Destroys all the elements in the aggregation {@link #getElements elements}.
 * @returns {sap.m.QuickViewGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroup.prototype.destroyElements = function() { return new sap.m.QuickViewGroup(); };

/**
 * Creates a new subclass of class sap.m.QuickViewGroup with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.QuickViewGroup.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getElements elements}.
 * 
 * A combination of one label and another control (Link or Text) associated to this label.
 * 
 * @returns {sap.m.QuickViewGroupElement[]}
 * 
 * @public
 * 
 */
sap.m.QuickViewGroup.prototype.getElements = function() { return new Array(); };

/**
 * Gets current value of property {@link #getHeading heading}.
 * 
 * The title of the group
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>heading</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewGroup.prototype.getHeading = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.QuickViewGroup.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.QuickViewGroup.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Determines whether the group is visible on the screen.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewGroup.prototype.getVisible = function() { return false; };

/**
 * Checks for the provided <code>sap.m.QuickViewGroupElement</code> in the aggregation {@link #getElements elements}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.QuickViewGroupElement}
 *           oElement The element whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.QuickViewGroup.prototype.indexOfElement = function(oElement) { return 0; };

/**
 * Inserts a element into the aggregation {@link #getElements elements}.
 * 
 * @param {sap.m.QuickViewGroupElement}
 *            oElement the element to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the element should be inserted at; for
 *              a negative value of <code>iIndex</code>, the element is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the element is inserted at
 *              the last position
 * @returns {sap.m.QuickViewGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroup.prototype.insertElement = function(oElement,iIndex) { return new sap.m.QuickViewGroup(); };

/**
 * Removes all the controls from the aggregation {@link #getElements elements}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.QuickViewGroupElement[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.QuickViewGroup.prototype.removeAllElements = function() { return new Array(); };

/**
 * Removes a element from the aggregation {@link #getElements elements}.
 * 
 * @param {int | string | sap.m.QuickViewGroupElement} vElement The element to remove or its index or id
 * @returns {sap.m.QuickViewGroupElement} The removed element or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewGroup.prototype.removeElement = function(vElement) { return new sap.m.QuickViewGroupElement(); };

/**
 * Sets a new value for property {@link #getHeading heading}.
 * 
 * The title of the group
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sHeading New value for property <code>heading</code>
 * @returns {sap.m.QuickViewGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroup.prototype.setHeading = function(sHeading) { return new sap.m.QuickViewGroup(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Determines whether the group is visible on the screen.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.QuickViewGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroup.prototype.setVisible = function(bVisible) { return new sap.m.QuickViewGroup(); };

/**
 * Unbinds aggregation {@link #getElements elements} from model data.
 * @returns {sap.m.QuickViewGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroup.prototype.unbindElements = function() { return new sap.m.QuickViewGroup(); };


// ---- sap.m.QuickViewGroupElement --------------------------------------------------------------------------

/**
 * Constructor for a new QuickViewGroupElement.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getLabel label} : string (default: )</li>
 * <li>{@link #getValue value} : string (default: )</li>
 * <li>{@link #getUrl url} : string (default: )</li>
 * <li>{@link #getTarget target} : string (default: _blank)</li>
 * <li>{@link #getType type} : sap.m.QuickViewGroupElementType (default: GroupElementType.text)</li>
 * <li>{@link #getPageLinkId pageLinkId} : string (default: )</li>
 * <li>{@link #getEmailSubject emailSubject} : string (default: )</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class QuickViewGroupElement is a combination of one label and another control (Link or Text) associated to this label.
 * 
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.28.11
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.QuickViewGroupElement = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.QuickViewGroupElement with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.QuickViewGroupElement.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getEmailSubject emailSubject}.
 * 
 * The subject of the email.
 * Works only with QuickViewGroupElement of type email.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>emailSubject</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.getEmailSubject = function() { return ""; };

/**
 * Gets current value of property {@link #getLabel label}.
 * 
 * Specifies the text displayed below the associated label.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>label</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.getLabel = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.QuickViewGroupElement.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.QuickViewGroupElement.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPageLinkId pageLinkId}.
 * 
 * Specifies the ID of the QuickViewPage, which is opened from the link in the QuickViewGroupElement.
 * Works only with QuickViewGroupElement of type pageLink.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>pageLinkId</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.getPageLinkId = function() { return ""; };

/**
 * Gets current value of property {@link #getTarget target}.
 * 
 * Specifies the target of the link – it works like the target property of the HTML <a> tag. Works only with QuickViewGroupElement of type link.
 * 
 * Default value is <code>_blank</code>.
 * @returns {string} Value of property <code>target</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.getTarget = function() { return ""; };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * Specifies the type of the displayed information – phone number, mobile number, e-mail, link, text or a link to another QuickViewPage. Default value is ‘text’.
 * 
 * Default value is <code>GroupElementType.text</code>.
 * @returns {sap.m.QuickViewGroupElementType} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.getType = function() { return new sap.m.QuickViewGroupElementType(); };

/**
 * Gets current value of property {@link #getUrl url}.
 * 
 * Specifies the address of the QuickViewGroupElement link. Works only with QuickViewGroupElement of type link.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>url</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.getUrl = function() { return ""; };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * Specifies the text of the control that associates with the label.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.getValue = function() { return ""; };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Determines whether the element should be visible on the screen.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.getVisible = function() { return false; };

/**
 * Sets a new value for property {@link #getEmailSubject emailSubject}.
 * 
 * The subject of the email.
 * Works only with QuickViewGroupElement of type email.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sEmailSubject New value for property <code>emailSubject</code>
 * @returns {sap.m.QuickViewGroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.setEmailSubject = function(sEmailSubject) { return new sap.m.QuickViewGroupElement(); };

/**
 * Sets a new value for property {@link #getLabel label}.
 * 
 * Specifies the text displayed below the associated label.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sLabel New value for property <code>label</code>
 * @returns {sap.m.QuickViewGroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.setLabel = function(sLabel) { return new sap.m.QuickViewGroupElement(); };

/**
 * Sets a new value for property {@link #getPageLinkId pageLinkId}.
 * 
 * Specifies the ID of the QuickViewPage, which is opened from the link in the QuickViewGroupElement.
 * Works only with QuickViewGroupElement of type pageLink.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sPageLinkId New value for property <code>pageLinkId</code>
 * @returns {sap.m.QuickViewGroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.setPageLinkId = function(sPageLinkId) { return new sap.m.QuickViewGroupElement(); };

/**
 * Sets a new value for property {@link #getTarget target}.
 * 
 * Specifies the target of the link – it works like the target property of the HTML <a> tag. Works only with QuickViewGroupElement of type link.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>_blank</code>.
 * @param {string} sTarget New value for property <code>target</code>
 * @returns {sap.m.QuickViewGroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.setTarget = function(sTarget) { return new sap.m.QuickViewGroupElement(); };

/**
 * Sets a new value for property {@link #getType type}.
 * 
 * Specifies the type of the displayed information – phone number, mobile number, e-mail, link, text or a link to another QuickViewPage. Default value is ‘text’.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>GroupElementType.text</code>.
 * @param {sap.m.QuickViewGroupElementType} sType New value for property <code>type</code>
 * @returns {sap.m.QuickViewGroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.setType = function(sType) { return new sap.m.QuickViewGroupElement(); };

/**
 * Sets a new value for property {@link #getUrl url}.
 * 
 * Specifies the address of the QuickViewGroupElement link. Works only with QuickViewGroupElement of type link.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sUrl New value for property <code>url</code>
 * @returns {sap.m.QuickViewGroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.setUrl = function(sUrl) { return new sap.m.QuickViewGroupElement(); };

/**
 * Sets a new value for property {@link #getValue value}.
 * 
 * Specifies the text of the control that associates with the label.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sValue New value for property <code>value</code>
 * @returns {sap.m.QuickViewGroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.setValue = function(sValue) { return new sap.m.QuickViewGroupElement(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Determines whether the element should be visible on the screen.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.QuickViewGroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewGroupElement.prototype.setVisible = function(bVisible) { return new sap.m.QuickViewGroupElement(); };


// ---- sap.m.QuickViewGroupElementType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.QuickViewGroupElementType.toString = function() { return ""; };

// ---- sap.m.QuickViewPage --------------------------------------------------------------------------

/**
 * Constructor for a new QuickViewPage.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPageId pageId} : string (default: )</li>
 * <li>{@link #getHeader header} : string (default: )</li>
 * <li>{@link #getTitle title} : string (default: )</li>
 * <li>{@link #getTitleUrl titleUrl} : string (default: )</li>
 * <li>{@link #getCrossAppNavCallback crossAppNavCallback} : object</li>
 * <li>{@link #getDescription description} : string (default: )</li>
 * <li>{@link #getIcon icon} : string (default: )</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGroups groups} : sap.m.QuickViewGroup[] (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class QuickViewPage consists of  a page header, an object icon or image,
 * an object name with short description, and an object information divided in groups.
 * The control uses the sap.m.SimpleForm control to display information.
 * 
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.28.11
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.QuickViewPage = function(sId,mSettings) {};
/**
 * Adds some group to the aggregation {@link #getGroups groups}.
 * @param {sap.m.QuickViewGroup}
 *            oGroup the group to add; if empty, nothing is inserted
 * @returns {sap.m.QuickViewPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.addGroup = function(oGroup) { return new sap.m.QuickViewPage(); };

/**
 * Binds aggregation {@link #getGroups groups} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.QuickViewPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.bindGroups = function(oBindingInfo) { return new sap.m.QuickViewPage(); };

/**
 * Destroys all the groups in the aggregation {@link #getGroups groups}.
 * @returns {sap.m.QuickViewPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.destroyGroups = function() { return new sap.m.QuickViewPage(); };

/**
 * Creates a new subclass of class sap.m.QuickViewPage with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.QuickViewPage.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getCrossAppNavCallback crossAppNavCallback}.
 * 
 * Specifies the application which provides target and param configuration  for cross-application navigation from the 'page header'.
 * 
 * @returns {object} Value of property <code>crossAppNavCallback</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.getCrossAppNavCallback = function() { return new Object(); };

/**
 * Gets current value of property {@link #getDescription description}.
 * 
 * Specifies the text displayed under the header of the content section
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>description</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.getDescription = function() { return ""; };

/**
 * Gets content of aggregation {@link #getGroups groups}.
 * 
 * QuickViewGroup consists of a title (optional) and an entity of group elements.
 * 
 * @returns {sap.m.QuickViewGroup[]}
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.getGroups = function() { return new Array(); };

/**
 * Gets current value of property {@link #getHeader header}.
 * 
 * Specifies the text displayed in the header of the control.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>header</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.getHeader = function() { return ""; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Specifies the URL of the icon displayed under the header of the page
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.getIcon = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.QuickViewPage.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.QuickViewPage.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPageId pageId}.
 * 
 * Page id
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>pageId</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.getPageId = function() { return ""; };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Specifies the text displayed in the header of the content section of the control.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getTitleUrl titleUrl}.
 * 
 * Specifies the URL which opens when the title or the thumbnail is clicked.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>titleUrl</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.getTitleUrl = function() { return ""; };

/**
 * Checks for the provided <code>sap.m.QuickViewGroup</code> in the aggregation {@link #getGroups groups}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.QuickViewGroup}
 *           oGroup The group whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.indexOfGroup = function(oGroup) { return 0; };

/**
 * Inserts a group into the aggregation {@link #getGroups groups}.
 * 
 * @param {sap.m.QuickViewGroup}
 *            oGroup the group to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the group should be inserted at; for
 *              a negative value of <code>iIndex</code>, the group is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the group is inserted at
 *              the last position
 * @returns {sap.m.QuickViewPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.insertGroup = function(oGroup,iIndex) { return new sap.m.QuickViewPage(); };

/**
 * Removes all the controls from the aggregation {@link #getGroups groups}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.QuickViewGroup[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.removeAllGroups = function() { return new Array(); };

/**
 * Removes a group from the aggregation {@link #getGroups groups}.
 * 
 * @param {int | string | sap.m.QuickViewGroup} vGroup The group to remove or its index or id
 * @returns {sap.m.QuickViewGroup} The removed group or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.removeGroup = function(vGroup) { return new sap.m.QuickViewGroup(); };

/**
 * Sets a new value for property {@link #getCrossAppNavCallback crossAppNavCallback}.
 * 
 * Specifies the application which provides target and param configuration  for cross-application navigation from the 'page header'.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oCrossAppNavCallback New value for property <code>crossAppNavCallback</code>
 * @returns {sap.m.QuickViewPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.setCrossAppNavCallback = function(oCrossAppNavCallback) { return new sap.m.QuickViewPage(); };

/**
 * Sets a new value for property {@link #getDescription description}.
 * 
 * Specifies the text displayed under the header of the content section
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sDescription New value for property <code>description</code>
 * @returns {sap.m.QuickViewPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.setDescription = function(sDescription) { return new sap.m.QuickViewPage(); };

/**
 * Sets a new value for property {@link #getHeader header}.
 * 
 * Specifies the text displayed in the header of the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sHeader New value for property <code>header</code>
 * @returns {sap.m.QuickViewPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.setHeader = function(sHeader) { return new sap.m.QuickViewPage(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Specifies the URL of the icon displayed under the header of the page
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sIcon New value for property <code>icon</code>
 * @returns {sap.m.QuickViewPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.setIcon = function(sIcon) { return new sap.m.QuickViewPage(); };

/**
 * Sets a new value for property {@link #getPageId pageId}.
 * 
 * Page id
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sPageId New value for property <code>pageId</code>
 * @returns {sap.m.QuickViewPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.setPageId = function(sPageId) { return new sap.m.QuickViewPage(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Specifies the text displayed in the header of the content section of the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.QuickViewPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.setTitle = function(sTitle) { return new sap.m.QuickViewPage(); };

/**
 * Sets a new value for property {@link #getTitleUrl titleUrl}.
 * 
 * Specifies the URL which opens when the title or the thumbnail is clicked.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sTitleUrl New value for property <code>titleUrl</code>
 * @returns {sap.m.QuickViewPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.setTitleUrl = function(sTitleUrl) { return new sap.m.QuickViewPage(); };

/**
 * Unbinds aggregation {@link #getGroups groups} from model data.
 * @returns {sap.m.QuickViewPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.QuickViewPage.prototype.unbindGroups = function() { return new sap.m.QuickViewPage(); };


// ---- sap.m.RadioButton --------------------------------------------------------------------------

/**
 * Constructor for a new RadioButton.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getGroupName groupName} : string (default: sapMRbDefaultGroup)</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getUseEntireWidth useEntireWidth} : boolean (default: false)</li>
 * <li>{@link #getActiveHandling activeHandling} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: Begin)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * Enables users to select a single option from a set of options.
 * @class
 * RadioButton is a control similar to a {@link sap.m.CheckBox checkbox}, but it allows you to choose only one of the predefined set of options.
 * Multiple radio buttons have to belong to the same group (have the same value for <code>groupName</code>) in order to be mutually exclusive.
 * A wrapper control {@link sap.m.RadioButtonGroup RadioButtonGroup} can be used instead of individual radio buttons.
 * <h3>Structure</h3>
 * <ul>
 * <li>Radio buttons can have a value state like Error or Warning.</li>
 * <li>Radio buttons can be arranged vertically by setting the <code>column</code> to a number higher than 1.</li>
 * <li>Radio button options need to have a {@link sap.m.Label label}.</li>
 * </ul>
 * <h3>Usage</h3>
 * <h4>When to use:</h4>
 * <ul>
 * <li>You quickly need to choose between at least two alternatives.</li>
 * <li>You need to place other controls between the radio button options.</li>
 * </ul>
 * <h4>When not to use:</h4>
 * <ul>
 * <li>You want to select multiple values for the same option. Use {@link sap.m.CheckBox checkboxes} instead.</li>
 * <li>When the default value is recommended for most users in most situations. Use a {@link sap.m.Select drop-down} instead as is saves space by not showing all the alternatives.</li>
 * <li>You want have more than 8 options. Use a {@link sap.m.Select drop-down} instead.</li>
 * <li>When the options are mutually exclusive e.g. ON/OFF. Use a {@link sap.m.Switch switch} instead.</li>
 * <li>Avoid using horizontally aligned radio buttons as they will be cut off on phones.</li>
 * </ul>
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.RadioButton = function(sId,mSettings) {};
/**
 * Event is triggered when the user makes a change on the radio button (selecting or unselecting it).
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.selected Checks whether the RadioButton is active or not.
 * @public
 * 
 */
sap.m.RadioButton.prototype.select = function(oControlEvent) {  };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.RadioButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.RadioButton(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.RadioButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.RadioButton(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:select select} event of this <code>sap.m.RadioButton</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.RadioButton</code> itself.
 * 
 * Event is triggered when the user makes a change on the radio button (selecting or unselecting it).
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.RadioButton</code> itself
 * 
 * @returns {sap.m.RadioButton} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.RadioButton(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:select select} event of this <code>sap.m.RadioButton</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.RadioButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.RadioButton(); };

/**
 * Destroys all related objects to the RadioButton
 * @public
 * 
 */
sap.m.RadioButton.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.m.RadioButton with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.RadioButton.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:select select} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.selected] Checks whether the RadioButton is active or not.
 * 
 * @returns {sap.m.RadioButton} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.RadioButton.prototype.fireSelect = function(mParameters) { return new sap.m.RadioButton(); };

/**
 * Gets current value of property {@link #getActiveHandling activeHandling}.
 * 
 * This is a flag to switch on activeHandling. When it is switched off,
 * there will not be visual changes on active state. Default value is 'true'
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>activeHandling</code>
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.getActiveHandling = function() { return false; };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEditable editable}.
 * 
 * Specifies whether the user can select the radio button.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>editable</code>
 * @since 1.25
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.getEditable = function() { return false; };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Specifies if the radio button is disabled.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.getEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getGroupName groupName}.
 * 
 * Name of the radio button group the current radio button belongs to. You can define a new name for the group.
 * If no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default. Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected, all others are unselected.
 * 
 * Default value is <code>sapMRbDefaultGroup</code>.
 * @returns {string} Value of property <code>groupName</code>
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.getGroupName = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.RadioButton.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.RadioButton.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSelected selected}.
 * 
 * Specifies the select state of the radio button
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>selected</code>
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.getSelected = function() { return false; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Specifies the text displayed next to the RadioButton
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextAlign textAlign}.
 * 
 * Specifies the alignment of the radio button. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * Default value is <code>Begin</code>.
 * @returns {sap.ui.core.TextAlign} Value of property <code>textAlign</code>
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getUseEntireWidth useEntireWidth}.
 * 
 * Indicates if the given width will be applied for the whole RadioButton or only it's label.
 * By Default width is set only for the label.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>useEntireWidth</code>
 * @since 1.42
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.getUseEntireWidth = function() { return false; };

/**
 * Gets current value of property {@link #getValueState valueState}.
 * 
 * Enumeration sap.ui.core.ValueState provides state values Error, Success, Warning, None
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>valueState</code>
 * @since 1.25
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.getValueState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Width of the RadioButton or it's label depending on the useEntireWidth property.
 * By Default width is set only for the label.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)
 * @param {object} oEvent - provides information for the event
 * @public
 * 
 */
sap.m.RadioButton.prototype.onsapselect = function(oEvent) {  };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getActiveHandling activeHandling}.
 * 
 * This is a flag to switch on activeHandling. When it is switched off,
 * there will not be visual changes on active state. Default value is 'true'
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bActiveHandling New value for property <code>activeHandling</code>
 * @returns {sap.m.RadioButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.setActiveHandling = function(bActiveHandling) { return new sap.m.RadioButton(); };

/**
 * Method to set a RadioButton's state to active or inactive.
 * @param {boolean} bActive - Sets the active state to true or false
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.RadioButton.prototype.setActiveState = function(bActive) { return null; };

/**
 * Sets a new value for property {@link #getEditable editable}.
 * 
 * Specifies whether the user can select the radio button.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEditable New value for property <code>editable</code>
 * @returns {sap.m.RadioButton} Reference to <code>this</code> in order to allow method chaining
 * @since 1.25
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.setEditable = function(bEditable) { return new sap.m.RadioButton(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Specifies if the radio button is disabled.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.RadioButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.setEnabled = function(bEnabled) { return new sap.m.RadioButton(); };

/**
 * Sets RadioButton's groupName. Only one radioButton from the same group can be selected
 * @param {string} sGroupName - Name of the group to which the RadioButton will belong.
 * @returns {sap.m.RadioButton} Reference to the control instance for chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setGroupName = function(sGroupName) { return new sap.m.RadioButton(); };

/**
 * Sets the state of the RadioButton to selected.
 * @param {boolean} bSelected - defines if the radio button is selected
 * @returns {sap.m.RadioButton} Reference to the control instance for chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setSelected = function(bSelected) { return new sap.m.RadioButton(); };

/**
 * Sets the text for the RadioButton's label.
 * @param {string} sText - The text to be set
 * @returns {sap.m.RadioButton} Reference to the control instance for chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setText = function(sText) { return new sap.m.RadioButton(); };

/**
 * Sets a new value for property {@link #getTextAlign textAlign}.
 * 
 * Specifies the alignment of the radio button. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Begin</code>.
 * @param {sap.ui.core.TextAlign} sTextAlign New value for property <code>textAlign</code>
 * @returns {sap.m.RadioButton} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.setTextAlign = function(sTextAlign) { return new sap.m.RadioButton(); };

/**
 * Sets the text direction for the RadioButton's label.
 * @param {string} sDirection - Text direction to be set to RadioButton's label
 * @returns {sap.m.RadioButton} Reference to the control instance for chaining
 * @public
 * 
 */
sap.m.RadioButton.prototype.setTextDirection = function(sDirection) { return new sap.m.RadioButton(); };

/**
 * Sets a new value for property {@link #getUseEntireWidth useEntireWidth}.
 * 
 * Indicates if the given width will be applied for the whole RadioButton or only it's label.
 * By Default width is set only for the label.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bUseEntireWidth New value for property <code>useEntireWidth</code>
 * @returns {sap.m.RadioButton} Reference to <code>this</code> in order to allow method chaining
 * @since 1.42
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.setUseEntireWidth = function(bUseEntireWidth) { return new sap.m.RadioButton(); };

/**
 * Sets a new value for property {@link #getValueState valueState}.
 * 
 * Enumeration sap.ui.core.ValueState provides state values Error, Success, Warning, None
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.core.ValueState} sValueState New value for property <code>valueState</code>
 * @returns {sap.m.RadioButton} Reference to <code>this</code> in order to allow method chaining
 * @since 1.25
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.setValueState = function(sValueState) { return new sap.m.RadioButton(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Width of the RadioButton or it's label depending on the useEntireWidth property.
 * By Default width is set only for the label.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.RadioButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RadioButton.prototype.setWidth = function(sWidth) { return new sap.m.RadioButton(); };


// ---- sap.m.RadioButtonGroup --------------------------------------------------------------------------

/**
 * Constructor for a new RadioButtonGroup.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getColumns columns} : int (default: 1)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getSelectedIndex selectedIndex} : int (default: 0)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.m.RadioButton[] (default)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * A wrapper control for a group of radio buttons.
 * @class
 * This control is used as a wrapper for a group of {@link sap.m.RadioButton} controls, which can be used as a single UI element.
 * You can select only one of the grouped radio buttons at a time.
 * <h3>Structure</h3>
 * <ul>
 * <li>The radio buttons are stored in the <code>buttons</code> aggregation.</li>
 * <li>By setting the <code>columns</code> property, you can create layouts like a 'matrix', 'vertical' or 'horizontal'.</li>
 * <li><b>Note:</b>For proper display on all devices, we recommend creating radio button groups with only one row or only one column.</li>
 * </ul>
 * <h3>Usage</h3>
 * <h4>When to use:</h4>
 * <ul>
 * <li>You want to attach a single event handler on a group of buttons, rather than on each individual button.</li>
 * </ul>
 * <h4>When not to use:</h4>
 * <ul>
 * <li>Do not put two radio button groups right next to each other as it is difficult to determine which buttons belong to which group.</li>
 * </ul>
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.25.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.RadioButtonGroup = function(sId,mSettings) {};
/**
 * Fires when selection is changed by user interaction.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.selectedIndex Index of the selected RadioButton.
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.select = function(oControlEvent) {  };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.RadioButtonGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.RadioButtonGroup(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.RadioButtonGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.RadioButtonGroup(); };

/**
 * Adds a new radio button to the group.
 * @param {sap.m.RadioButton} oButton The button which will be added to the group
 * @returns {sap.m.RadioButtonGroup} Pointer to the control instance for chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.addButton = function(oButton) { return new sap.m.RadioButtonGroup(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:select select} event of this <code>sap.m.RadioButtonGroup</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.RadioButtonGroup</code> itself.
 * 
 * Fires when selection is changed by user interaction.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.RadioButtonGroup</code> itself
 * 
 * @returns {sap.m.RadioButtonGroup} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.RadioButtonGroup(); };

/**
 * Binds aggregation {@link #getButtons buttons} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.RadioButtonGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.bindButtons = function(oBindingInfo) { return new sap.m.RadioButtonGroup(); };

/**
 * Creates a new instance of RadioButtonGroup, with the same settings as the RadioButtonGroup
 * on which the method is called.
 * Event handlers are not cloned.
 * @returns {sap.m.RadioButtonGroup} New instance of RadioButtonGroup
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.clone = function() { return new sap.m.RadioButtonGroup(); };

/**
 * Destroys all radio buttons.
 * @returns {sap.m.RadioButtonGroup} Pointer to the control instance for chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.destroyButtons = function() { return new sap.m.RadioButtonGroup(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:select select} event of this <code>sap.m.RadioButtonGroup</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.RadioButtonGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.RadioButtonGroup(); };

/**
 * Creates a new subclass of class sap.m.RadioButtonGroup with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.RadioButtonGroup.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:select select} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {int} [mParameters.selectedIndex] Index of the selected RadioButton.
 * 
 * @returns {sap.m.RadioButtonGroup} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.RadioButtonGroup.prototype.fireSelect = function(mParameters) { return new sap.m.RadioButtonGroup(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getButtons buttons}.
 * 
 * Returns a list of the RadioButtons in a RadioButtonGroup
 * 
 * @returns {sap.m.RadioButton[]}
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getButtons = function() { return new Array(); };

/**
 * Gets current value of property {@link #getColumns columns}.
 * 
 * Specifies the maximum number of radio buttons displayed in one line.
 * 
 * Default value is <code>1</code>.
 * @returns {int} Value of property <code>columns</code>
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getColumns = function() { return 0; };

/**
 * Gets current value of property {@link #getEditable editable}.
 * 
 * Specifies whether the user can change the selected value of the RadioButtonGroup.
 * When the property is set to false, the control obtains visual styles
 * different from its visual styles for the normal and the disabled state.
 * Additionally, the control is no longer interactive, but can receive focus.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>editable</code>
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getEditable = function() { return false; };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Switches the enabled state of the control. All Radio Buttons inside a disabled group are disabled. Default value is “true”.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getEnabled = function() { return false; };

/**
 * Returns a metadata object for class sap.m.RadioButtonGroup.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.RadioButtonGroup.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the selected radio button.
 * @returns {sap.m.RadioButton} The selected radio button
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getSelectedButton = function() { return new sap.m.RadioButton(); };

/**
 * Gets current value of property {@link #getSelectedIndex selectedIndex}.
 * 
 * Determines the index of the selected/checked RadioButton. Default is 0.
 * If no radio button is selected, the selectedIndex property will return -1.
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>selectedIndex</code>
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getSelectedIndex = function() { return 0; };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getValueState valueState}.
 * 
 * Тhe value state to be displayed for the radio button. Possible values are: sap.ui.core.ValueState.Error,
 * sap.ui.core.ValueState.Warning, sap.ui.core.ValueState.Success and sap.ui.core.ValueState.None.
 * Note: Setting this attribute to sap.ui.core.ValueState.Error when the accessibility feature is enabled,
 * sets the value of the invalid propery for the whole RadioButtonGroup to “true”.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>valueState</code>
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getValueState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Specifies the width of the RadioButtonGroup.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.m.RadioButton</code> in the aggregation {@link #getButtons buttons}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.RadioButton}
 *           oButton The button whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.indexOfButton = function(oButton) { return 0; };

/**
 * Adds a new radio button to the group at a specified index.
 * @param {sap.m.RadioButton} oButton The radio button which will be added to the group
 * @param {int} iIndex The index, at which the radio button will be added
 * @returns {sap.m.RadioButtonGroup} Pointer to the control instance for chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.insertButton = function(oButton,iIndex) { return new sap.m.RadioButtonGroup(); };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all radio buttons.
 * @returns {Array} Array of removed buttons or null
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.removeAllButtons = function() { return null; };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Removes a radio button from the group.
 * @returns {sap.m.RadioButton} The removed radio button
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.removeButton = function() { return new sap.m.RadioButton(); };

/**
 * Sets a new value for property {@link #getColumns columns}.
 * 
 * Specifies the maximum number of radio buttons displayed in one line.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>1</code>.
 * @param {int} iColumns New value for property <code>columns</code>
 * @returns {sap.m.RadioButtonGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setColumns = function(iColumns) { return new sap.m.RadioButtonGroup(); };

/**
 * Sets the editable property of the RadioButtonGroup. Single buttons preserve the value of their editable property.
 * If the group is set to editable=false the buttons are also displayed and function as read only.
 * Non editable radio buttons can still obtain focus.
 * 
 * @param {boolean} bEditable Defines whether the radio buttons should be interactive.
 * @returns {sap.m.RadioButtonGroup} Pointer to the control instance for chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setEditable = function(bEditable) { return new sap.m.RadioButtonGroup(); };

/**
 * Sets the enabled property of the RadioButtonGroup. Single buttons preserve internally the value of their enabled property.
 * If the group is set to enabled=false the buttons are also displayed as disabled and getEnabled returns false.
 * 
 * @param {boolean} bEnabled Defines whether the radio buttons should be interactive.
 * @returns {sap.m.RadioButtonGroup} Pointer to the control instance for chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setEnabled = function(bEnabled) { return new sap.m.RadioButtonGroup(); };

/**
 * Sets the selected sap.m.RadioButton using sap.m.RadioButton.
 * @param {sap.m.RadioButton} oSelectedButton The item to be selected
 * @returns {sap.m.RadioButtonGroup} Pointer to the control instance for chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setSelectedButton = function(oSelectedButton) { return new sap.m.RadioButtonGroup(); };

/**
 * Sets the selected sap.m.RadioButton using index.
 * @param {int} iSelectedIndex The index of the radio button which has to be selected
 * @returns {sap.m.RadioButtonGroup} Pointer to the control instance for chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setSelectedIndex = function(iSelectedIndex) { return new sap.m.RadioButtonGroup(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.RadioButtonGroup} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setTextDirection = function(sTextDirection) { return new sap.m.RadioButtonGroup(); };

/**
 * Sets ValueState of all radio buttons in the group.
 * @param {string} sValueState The value state of the radio group - none, success, warning, error.
 * @returns {sap.m.RadioButtonGroup} Pointer to the control instance for chaining
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setValueState = function(sValueState) { return new sap.m.RadioButtonGroup(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Specifies the width of the RadioButtonGroup.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.RadioButtonGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.setWidth = function(sWidth) { return new sap.m.RadioButtonGroup(); };

/**
 * Unbinds aggregation {@link #getButtons buttons} from model data.
 * @returns {sap.m.RadioButtonGroup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RadioButtonGroup.prototype.unbindButtons = function() { return new sap.m.RadioButtonGroup(); };


// ---- sap.m.RangeSlider --------------------------------------------------------------------------

/**
 * Constructor for a new <code>RangeSlider</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue2 value2} : float (default: 100)</li>
 * <li>{@link #getRange range} : float[] (default: [0,100])</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Slider#constructor sap.m.Slider}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <strong><i>Overview</i></strong>
 * 
 * A {@link sap.m.RangeSlider} control represents a numerical interval and two handles to select a sub-range within it.
 * The purpose of the control is to enable visual selection of sub-ranges within a given interval.
 * 
 * <strong>Notes:</strong>
 * <ul>
 * <li>The RangeSlider extends the functionality of the {@link sap.m.Slider Slider}</li>
 * <li>The right and left handle can be moved individually and their positions could therefore switch.</li>
 * <li>The entire range can be moved along the interval.</li>
 * <li>The right and left handle can select the same value</li>
 * </ul>
 * <strong><i>Usage</i></strong>
 * 
 * The most common usecase is to select and move sub-ranges on a continuous numerical scale.
 * 
 * <strong><i>Responsive Behavior</i></strong>
 * 
 * You can move the currently selected range by clicking on it and dragging it along the interval.
 * @extends sap.m.Slider
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.38
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.RangeSlider = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.RangeSlider with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Slider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.RangeSlider.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.RangeSlider.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.RangeSlider.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getRange range}.
 * 
 * Determines the currently selected range on the slider.
 * 
 * If the value is lower/higher than the allowed minimum/maximum, a warning message will be output to the console.
 * 
 * Default value is <code>[0,100]</code>.
 * @returns {float[]} Value of property <code>range</code>
 * 
 * @public
 * 
 */
sap.m.RangeSlider.prototype.getRange = function() { return new Array(); };

/**
 * Gets current value of property {@link #getValue2 value2}.
 * 
 * Current second value of the slider. (Position of the second handle.)
 * 
 * <b>Note:</b> If the value is not in the valid range (between <code>min</code> and <code>max</code>) it will be changed to be in the valid range.
 * If it is smaller than <code>value</code> it will be set to the same value.
 * 
 * Default value is <code>100</code>.
 * @returns {float} Value of property <code>value2</code>
 * 
 * @public
 * 
 */
sap.m.RangeSlider.prototype.getValue2 = function() { return 0.0; };

/**
 * Sets a new value for property {@link #getRange range}.
 * 
 * Determines the currently selected range on the slider.
 * 
 * If the value is lower/higher than the allowed minimum/maximum, a warning message will be output to the console.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>[0,100]</code>.
 * @param {float[]} sRange New value for property <code>range</code>
 * @returns {sap.m.RangeSlider} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RangeSlider.prototype.setRange = function(sRange) { return new sap.m.RangeSlider(); };

/**
 * Sets a new value for property {@link #getValue2 value2}.
 * 
 * Current second value of the slider. (Position of the second handle.)
 * 
 * <b>Note:</b> If the value is not in the valid range (between <code>min</code> and <code>max</code>) it will be changed to be in the valid range.
 * If it is smaller than <code>value</code> it will be set to the same value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100</code>.
 * @param {float} fValue2 New value for property <code>value2</code>
 * @returns {sap.m.RangeSlider} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RangeSlider.prototype.setValue2 = function(fValue2) { return new sap.m.RangeSlider(); };


// ---- sap.m.RatingIndicator --------------------------------------------------------------------------

/**
 * Constructor for a new RatingIndicator.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getMaxValue maxValue} : int (default: 5)</li>
 * <li>{@link #getValue value} : float (default: 0)</li>
 * <li>{@link #getIconSize iconSize} : sap.ui.core.CSSSize</li>
 * <li>{@link #getIconSelected iconSelected} : sap.ui.core.URI</li>
 * <li>{@link #getIconUnselected iconUnselected} : sap.ui.core.URI</li>
 * <li>{@link #getIconHovered iconHovered} : sap.ui.core.URI</li>
 * <li>{@link #getVisualMode visualMode} : sap.m.RatingIndicatorVisualMode (default: Half)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * Enables users to rate an item on a numeric scale.
 * @class
 * The rating indicator is used to display a specific number of icons that are used to rate an item. Additionally it is also used to display the average over all ratings.
 * <h3>Structure</h3>
 * <ul>
 * <li>The rating indicator can use different icons (default: stars) which are defined as URIs in the properties <code>iconHovered</code>, <code>iconSelected</code> and <code>iconUnselected</code>.</li>
 * <li>The rating indicator can display half-values ({@link sap.m.RatingIndicatorVisualMode visualMode} = Half) when it is used to show the average. Half-values can't be selected by the user.</li>
 * </ul>
 * <h3>Usage</h3>
 * The preferred number of icons is between 5 (default) and 7.
 * <h3>Responsive Behavior</h3>
 * You can display icons in 4 recommended sizes:
 * <ul>
 * <li>large - 32px</li>
 * <li>medium(default) - 22px</li>
 * <li>small - 16px</li>
 * <li>XS - 12px</li>
 * </ul>
 * <b>Note:</b> If no icon size is set, the rating indicator will set it according to the content density.</h4>
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.14
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.RatingIndicator = function(sId,mSettings) {};
/**
 * The event is fired when the user has done a rating.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.value The rated value
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.change = function(oControlEvent) {  };

/**
 * This event is triggered during the dragging period, each time the rating value changes.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {float} oControlEvent.getParameters.value The current value of the rating after a live change event.
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.liveChange = function(oControlEvent) {  };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.RatingIndicator(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.RatingIndicator(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.m.RatingIndicator</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.RatingIndicator</code> itself.
 * 
 * The event is fired when the user has done a rating.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.RatingIndicator</code> itself
 * 
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.RatingIndicator(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:liveChange liveChange} event of this <code>sap.m.RatingIndicator</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.RatingIndicator</code> itself.
 * 
 * This event is triggered during the dragging period, each time the rating value changes.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.RatingIndicator</code> itself
 * 
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.RatingIndicator(); };

/**
 * Binds property {@link #getValue value} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.bindValue = function(oBindingInfo) { return new sap.m.RatingIndicator(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.m.RatingIndicator</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.RatingIndicator(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:liveChange liveChange} event of this <code>sap.m.RatingIndicator</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.RatingIndicator(); };

/**
 * Creates a new subclass of class sap.m.RatingIndicator with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.RatingIndicator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:change change} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {int} [mParameters.value] The rated value
 * 
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.RatingIndicator.prototype.fireChange = function(mParameters) { return new sap.m.RatingIndicator(); };

/**
 * Fires event {@link #event:liveChange liveChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {float} [mParameters.value] The current value of the rating after a live change event.
 * 
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.RatingIndicator.prototype.fireLiveChange = function(mParameters) { return new sap.m.RatingIndicator(); };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.RatingIndicator.prototype.getAccessibilityInfo = function() {  };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Value "true" is required to let the user rate with this control. It is recommended to set this parameter to "false" for the "Small" size which is meant for indicating a value only
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getIconHovered iconHovered}.
 * 
 * The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon will be used if the property is not set
 * 
 * @returns {sap.ui.core.URI} Value of property <code>iconHovered</code>
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getIconHovered = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIconSelected iconSelected}.
 * 
 * The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon will be used if the property is not set
 * 
 * @returns {sap.ui.core.URI} Value of property <code>iconSelected</code>
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getIconSelected = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIconSize iconSize}.
 * 
 * The Size of the image or icon to be displayed. The default value depends on the theme. Please be sure that the size is corresponding to a full pixel value as some browsers don't support subpixel calculations. Recommended size is 1.375rem (22px) for normal, 1rem (16px) for small, and 2rem (32px) for large icons correspondingly.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>iconSize</code>
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getIconSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getIconUnselected iconUnselected}.
 * 
 * The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star icon will be used if the property is not set
 * 
 * @returns {sap.ui.core.URI} Value of property <code>iconUnselected</code>
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getIconUnselected = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getMaxValue maxValue}.
 * 
 * The number of displayed rating symbols
 * 
 * Default value is <code>5</code>.
 * @returns {int} Value of property <code>maxValue</code>
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getMaxValue = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.RatingIndicator.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.RatingIndicator.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * The indicated value of the rating
 * 
 * Default value is <code>0</code>.
 * @returns {float} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getValue = function() { return 0.0; };

/**
 * Gets current value of property {@link #getVisualMode visualMode}.
 * 
 * Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)
 * 
 * Default value is <code>Half</code>.
 * @returns {sap.m.RatingIndicatorVisualMode} Value of property <code>visualMode</code>
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.getVisualMode = function() { return new sap.m.RatingIndicatorVisualMode(); };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Value "true" is required to let the user rate with this control. It is recommended to set this parameter to "false" for the "Small" size which is meant for indicating a value only
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setEnabled = function(bEnabled) { return new sap.m.RatingIndicator(); };

/**
 * Sets a new value for property {@link #getIconHovered iconHovered}.
 * 
 * The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon will be used if the property is not set
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIconHovered New value for property <code>iconHovered</code>
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setIconHovered = function(sIconHovered) { return new sap.m.RatingIndicator(); };

/**
 * Sets a new value for property {@link #getIconSelected iconSelected}.
 * 
 * The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon will be used if the property is not set
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIconSelected New value for property <code>iconSelected</code>
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setIconSelected = function(sIconSelected) { return new sap.m.RatingIndicator(); };

/**
 * Sets the icon size value. The method is automatically updating the UI components if the control has been rendered before.
 * 
 * @param {sap.ui.core.CSSSize} sIconSize
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @override
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setIconSize = function(sIconSize) { return new sap.m.RatingIndicator(); };

/**
 * Sets a new value for property {@link #getIconUnselected iconUnselected}.
 * 
 * The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star icon will be used if the property is not set
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIconUnselected New value for property <code>iconUnselected</code>
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setIconUnselected = function(sIconUnselected) { return new sap.m.RatingIndicator(); };

/**
 * Sets a new value for property {@link #getMaxValue maxValue}.
 * 
 * The number of displayed rating symbols
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>5</code>.
 * @param {int} iMaxValue New value for property <code>maxValue</code>
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setMaxValue = function(iMaxValue) { return new sap.m.RatingIndicator(); };

/**
 * Sets the rating value. The method is automatically checking whether the value is in the valid range of 0-{@link #getMaxValue maxValue} and if it is a valid number. Calling the setter with null or undefined will reset the value to it's default.
 * 
 * @param {float} fValue The rating value to be set.
 * @returns {sap.m.RatingIndicator} Returns <code>this</code> to facilitate method chaining.
 * @override
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setValue = function(fValue) { return new sap.m.RatingIndicator(); };

/**
 * Sets a new value for property {@link #getVisualMode visualMode}.
 * 
 * Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Half</code>.
 * @param {sap.m.RatingIndicatorVisualMode} sVisualMode New value for property <code>visualMode</code>
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.setVisualMode = function(sVisualMode) { return new sap.m.RatingIndicator(); };

/**
 * Unbinds property {@link #getValue value} from model data.
 * @returns {sap.m.RatingIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.RatingIndicator.prototype.unbindValue = function() { return new sap.m.RatingIndicator(); };


// ---- sap.m.RatingIndicatorVisualMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.RatingIndicatorVisualMode.toString = function() { return ""; };

// ---- sap.m.ResponsivePopover --------------------------------------------------------------------------

/**
 * Constructor for a new ResponsivePopover.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType (default: Right)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getModal modal} : boolean</li>
 * <li>{@link #getOffsetX offsetX} : int</li>
 * <li>{@link #getOffsetY offsetY} : int</li>
 * <li>{@link #getShowArrow showArrow} : boolean (default: true)</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHorizontalScrolling horizontalScrolling} : boolean (default: true)</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : boolean (default: true)</li>
 * <li>{@link #getShowCloseButton showCloseButton} : boolean (default: true)</li>
 * <li>{@link #getResizable resizable} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getCustomHeader customHeader} : sap.m.IBar</li>
 * <li>{@link #getSubHeader subHeader} : sap.m.IBar</li>
 * <li>{@link #getBeginButton beginButton} : sap.m.Button</li>
 * <li>{@link #getEndButton endButton} : sap.m.Button</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getInitialFocus initialFocus} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * A popover-based control that behaves differently according to the device it is on.
 * @class
 * The responsive popover acts as a {@link sap.m.Popover popover} on desktop and tablet,
 * while on phone it acts as a {@ link sap.m.Dialog dialog} with <code>stretch</code> set to true.
 * <h3>Usage</h3>
 * When you want to make sure that all content is visible on any device.
 * 
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.15.1
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ResponsivePopover = function(sId,mSettings) {};
/**
 * Event is fired after popover or dialog is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * @param {sap.m.Button} oControlEvent.getParameters.origin This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.afterClose = function(oControlEvent) {  };

/**
 * Event is fired after popover or dialog is open.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.afterOpen = function(oControlEvent) {  };

/**
 * Event is fired before popover or dialog is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * @param {sap.m.Button} oControlEvent.getParameters.origin This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.beforeClose = function(oControlEvent) {  };

/**
 * Event is fired before popover or dialog is open.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.beforeOpen = function(oControlEvent) {  };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.ResponsivePopover(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.ResponsivePopover(); };

/**
 * Adds content to the ResponsivePopover
 * @param {sap.ui.core.Control} oControl - The control to be added to the content
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.addContent = function(oControl) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterClose afterClose} event of this <code>sap.m.ResponsivePopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ResponsivePopover</code> itself.
 * 
 * Event is fired after popover or dialog is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code> itself
 * 
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.attachAfterClose = function(oData,fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterOpen afterOpen} event of this <code>sap.m.ResponsivePopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ResponsivePopover</code> itself.
 * 
 * Event is fired after popover or dialog is open.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code> itself
 * 
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.attachAfterOpen = function(oData,fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeClose beforeClose} event of this <code>sap.m.ResponsivePopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ResponsivePopover</code> itself.
 * 
 * Event is fired before popover or dialog is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code> itself
 * 
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.ResponsivePopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ResponsivePopover</code> itself.
 * 
 * Event is fired before popover or dialog is open.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code> itself
 * 
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Creates a new instance of ResponsivePopover with the same settings as the ResponsivePopover on which the method is called
 * @returns {sap.m.ResponsivePopover} New instance of ResponsivePopover
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.clone = function() { return new sap.m.ResponsivePopover(); };

/**
 * Closes the ResponsivePopover.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ResponsivePopover.prototype.close = function() { return new sap.ui.core.Control(); };

/**
 * Destroys the beginButton in the aggregation {@link #getBeginButton beginButton}.
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroyBeginButton = function() { return new sap.m.ResponsivePopover(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroyContent = function() { return new sap.m.ResponsivePopover(); };

/**
 * Destroys the customHeader in the aggregation {@link #getCustomHeader customHeader}.
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroyCustomHeader = function() { return new sap.m.ResponsivePopover(); };

/**
 * Destroys the endButton in the aggregation {@link #getEndButton endButton}.
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroyEndButton = function() { return new sap.m.ResponsivePopover(); };

/**
 * Destroys the subHeader in the aggregation {@link #getSubHeader subHeader}.
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.destroySubHeader = function() { return new sap.m.ResponsivePopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterClose afterClose} event of this <code>sap.m.ResponsivePopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.detachAfterClose = function(fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterOpen afterOpen} event of this <code>sap.m.ResponsivePopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.detachAfterOpen = function(fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeClose beforeClose} event of this <code>sap.m.ResponsivePopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.ResponsivePopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.ResponsivePopover(); };

/**
 * Creates a new subclass of class sap.m.ResponsivePopover with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ResponsivePopover.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterClose afterClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * @param {sap.m.Button} [mParameters.origin] This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
 * 
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ResponsivePopover.prototype.fireAfterClose = function(mParameters) { return new sap.m.ResponsivePopover(); };

/**
 * Fires event {@link #event:afterOpen afterOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * 
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ResponsivePopover.prototype.fireAfterOpen = function(mParameters) { return new sap.m.ResponsivePopover(); };

/**
 * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * @param {sap.m.Button} [mParameters.origin] This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
 * 
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ResponsivePopover.prototype.fireBeforeClose = function(mParameters) { return new sap.m.ResponsivePopover(); };

/**
 * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.openBy] This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
 * 
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ResponsivePopover.prototype.fireBeforeOpen = function(mParameters) { return new sap.m.ResponsivePopover(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Getter for beginButton aggregation
 * @returns {sap.m.Button} The button that is set as a beginButton aggregation
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getBeginButton = function() { return new sap.m.Button(); };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * Content is supported by both variants. Please see the documentation on sap.m.Popover#content and sap.m.Dialog#content
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getContentHeight contentHeight}.
 * 
 * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentHeight and sap.m.Dialog#contentHeight
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>contentHeight</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getContentWidth contentWidth}.
 * 
 * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentWidth and sap.m.Dialog#contentWidth
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>contentWidth</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets content of aggregation {@link #getCustomHeader customHeader}.
 * 
 * CustomHeader is supported by both variants. Please see the documentation on sap.m.Popover#customHeader and sap.m.Dialog#customHeader
 * 
 * @returns {sap.m.IBar}
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getCustomHeader = function() { return new sap.m.IBar(); };

/**
 * Getter for endButton aggregation
 * @returns {sap.m.Button} The button that is set as an endButton aggregation
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getEndButton = function() { return new sap.m.Button(); };

/**
 * Gets current value of property {@link #getHorizontalScrolling horizontalScrolling}.
 * 
 * This property is supported by both variants. Please see the documentation on sap.m.Popover#horizontalScrolling and sap.m.Dialog#horizontalScrolling
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>horizontalScrolling</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getHorizontalScrolling = function() { return false; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * This property only takes effect  on phone. Please see the documentation sap.m.Dialog#icon.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * ID of the element which is the current target of the association {@link #getInitialFocus initialFocus}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getInitialFocus = function() { return new sap.ui.core.ID(); };

/**
 * Returns a metadata object for class sap.m.ResponsivePopover.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ResponsivePopover.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getModal modal}.
 * 
 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#modal.
 * 
 * @returns {boolean} Value of property <code>modal</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getModal = function() { return false; };

/**
 * Gets current value of property {@link #getOffsetX offsetX}.
 * 
 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetX.
 * 
 * @returns {int} Value of property <code>offsetX</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getOffsetX = function() { return 0; };

/**
 * Gets current value of property {@link #getOffsetY offsetY}.
 * 
 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetY.
 * 
 * @returns {int} Value of property <code>offsetY</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getOffsetY = function() { return 0; };

/**
 * Gets current value of property {@link #getPlacement placement}.
 * 
 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#placement.
 * 
 * Default value is <code>Right</code>.
 * @returns {sap.m.PlacementType} Value of property <code>placement</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getPlacement = function() { return new sap.m.PlacementType(); };

/**
 * Gets current value of property {@link #getResizable resizable}.
 * 
 * Whether resize option is enabled.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>resizable</code>
 * @since 1.36.4
 * 
 * @experimental since 1.36.4 Do not use directly on ResponsivePopover while in experimental mode!
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getResizable = function() { return false; };

/**
 * Gets current value of property {@link #getShowArrow showArrow}.
 * 
 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#showArrow.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showArrow</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getShowArrow = function() { return false; };

/**
 * Gets current value of property {@link #getShowCloseButton showCloseButton}.
 * 
 * Determines if a close button should be inserted into the dialog's header dynamically to close the dialog. This property only takes effect on phone.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showCloseButton</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getShowCloseButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowHeader showHeader}.
 * 
 * This property is supported by both variants. Please see the documentation on sap.m.Popover#showHeader and sap.m.Dialog#showHeader
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showHeader</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getShowHeader = function() { return false; };

/**
 * Gets content of aggregation {@link #getSubHeader subHeader}.
 * 
 * SubHeader is supported by both variants. Please see the documentation on sap.m.Popover#subHeader and sap.m.Dialog#subHeader
 * 
 * @returns {sap.m.IBar}
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getSubHeader = function() { return new sap.m.IBar(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * This property is supported by both variants. Please see the documentation on sap.m.Popover#title and sap.m.Dialog#title
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getVerticalScrolling verticalScrolling}.
 * 
 * This property is supported by both variants. Please see the documentation on sap.m.Popover#verticalScrolling and sap.m.Dialog#verticalScrolling
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>verticalScrolling</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.getVerticalScrolling = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.insertContent = function(oContent,iIndex) { return new sap.m.ResponsivePopover(); };

/**
 * Checks whether the ResponsivePopover is currently open.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ResponsivePopover.prototype.isOpen = function() { return new sap.ui.core.Control(); };

/**
 * Opens the ResponsivePopover. The ResponsivePopover is positioned relatively to the control parameter on tablet or desktop and is full screen on phone. Therefore the control parameter is only used on tablet or desktop and is ignored on phone.
 * 
 * @param {object} oControl
 * 
 *         When this control is displayed on tablet or desktop, the ResponsivePopover is positioned relatively to this control.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ResponsivePopover.prototype.openBy = function(oControl) { return new sap.ui.core.Control(); };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Setter for beginButton aggregation
 * @param {sap.m.Button} oButton - The button that will be set as an aggregation
 * @returns {sap.m.ResponsivePopover} Pointer to the control instance for chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setBeginButton = function(oButton) { return new sap.m.ResponsivePopover(); };

/**
 * Sets a new value for property {@link #getContentHeight contentHeight}.
 * 
 * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentHeight and sap.m.Dialog#contentHeight
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sContentHeight New value for property <code>contentHeight</code>
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setContentHeight = function(sContentHeight) { return new sap.m.ResponsivePopover(); };

/**
 * Sets a new value for property {@link #getContentWidth contentWidth}.
 * 
 * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentWidth and sap.m.Dialog#contentWidth
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sContentWidth New value for property <code>contentWidth</code>
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setContentWidth = function(sContentWidth) { return new sap.m.ResponsivePopover(); };

/**
 * Sets the aggregated {@link #getCustomHeader customHeader}.
 * @param {sap.m.IBar} oCustomHeader The customHeader to set
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setCustomHeader = function(oCustomHeader) { return new sap.m.ResponsivePopover(); };

/**
 * Setter for endButton aggregation
 * @param {sap.m.Button} oButton - The button that will be set as an aggregation
 * @returns {sap.m.ResponsivePopover} Pointer to the control instance for chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setEndButton = function(oButton) { return new sap.m.ResponsivePopover(); };

/**
 * Sets a new value for property {@link #getHorizontalScrolling horizontalScrolling}.
 * 
 * This property is supported by both variants. Please see the documentation on sap.m.Popover#horizontalScrolling and sap.m.Dialog#horizontalScrolling
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bHorizontalScrolling New value for property <code>horizontalScrolling</code>
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setHorizontalScrolling = function(bHorizontalScrolling) { return new sap.m.ResponsivePopover(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * This property only takes effect  on phone. Please see the documentation sap.m.Dialog#icon.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setIcon = function(sIcon) { return new sap.m.ResponsivePopover(); };

/**
 * Sets the associated {@link #getInitialFocus initialFocus}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oInitialFocus ID of an element which becomes the new target of this initialFocus association; alternatively, an element instance may be given
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setInitialFocus = function(oInitialFocus) { return new sap.m.ResponsivePopover(); };

/**
 * Sets a new value for property {@link #getModal modal}.
 * 
 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#modal.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bModal New value for property <code>modal</code>
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setModal = function(bModal) { return new sap.m.ResponsivePopover(); };

/**
 * Sets a new value for property {@link #getOffsetX offsetX}.
 * 
 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetX.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iOffsetX New value for property <code>offsetX</code>
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setOffsetX = function(iOffsetX) { return new sap.m.ResponsivePopover(); };

/**
 * Sets a new value for property {@link #getOffsetY offsetY}.
 * 
 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetY.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iOffsetY New value for property <code>offsetY</code>
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setOffsetY = function(iOffsetY) { return new sap.m.ResponsivePopover(); };

/**
 * Sets a new value for property {@link #getPlacement placement}.
 * 
 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#placement.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Right</code>.
 * @param {sap.m.PlacementType} sPlacement New value for property <code>placement</code>
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setPlacement = function(sPlacement) { return new sap.m.ResponsivePopover(); };

/**
 * Sets a new value for property {@link #getResizable resizable}.
 * 
 * Whether resize option is enabled.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bResizable New value for property <code>resizable</code>
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.4
 * 
 * @experimental since 1.36.4 Do not use directly on ResponsivePopover while in experimental mode!
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setResizable = function(bResizable) { return new sap.m.ResponsivePopover(); };

/**
 * Sets a new value for property {@link #getShowArrow showArrow}.
 * 
 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#showArrow.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowArrow New value for property <code>showArrow</code>
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setShowArrow = function(bShowArrow) { return new sap.m.ResponsivePopover(); };

/**
 * Determines if the close button to the ResponsivePopover is shown or not. Works only when ResponsivePopover is used as a dialog
 * @param {boolean} bShowCloseButton - Defines whether the close button is shown
 * @returns {sap.m.ResponsivePopover} Pointer to the control instance for chaining
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setShowCloseButton = function(bShowCloseButton) { return new sap.m.ResponsivePopover(); };

/**
 * Sets a new value for property {@link #getShowHeader showHeader}.
 * 
 * This property is supported by both variants. Please see the documentation on sap.m.Popover#showHeader and sap.m.Dialog#showHeader
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowHeader New value for property <code>showHeader</code>
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setShowHeader = function(bShowHeader) { return new sap.m.ResponsivePopover(); };

/**
 * Sets the aggregated {@link #getSubHeader subHeader}.
 * @param {sap.m.IBar} oSubHeader The subHeader to set
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setSubHeader = function(oSubHeader) { return new sap.m.ResponsivePopover(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * This property is supported by both variants. Please see the documentation on sap.m.Popover#title and sap.m.Dialog#title
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setTitle = function(sTitle) { return new sap.m.ResponsivePopover(); };

/**
 * Sets a new value for property {@link #getVerticalScrolling verticalScrolling}.
 * 
 * This property is supported by both variants. Please see the documentation on sap.m.Popover#verticalScrolling and sap.m.Dialog#verticalScrolling
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVerticalScrolling New value for property <code>verticalScrolling</code>
 * @returns {sap.m.ResponsivePopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsivePopover.prototype.setVerticalScrolling = function(bVerticalScrolling) { return new sap.m.ResponsivePopover(); };


// ---- sap.m.ResponsiveScale --------------------------------------------------------------------------

/**
 * Constructor for a new <code>ResponsiveScale</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTickmarksBetweenLabels tickmarksBetweenLabels} : int (default: 0)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <strong><i>Overview</i></strong>
 * 
 * A {@link sap.m.Slider} element represents a scale with tickmarks and labels.
 * The purpose of the element is to decouple the scale logic from other controls i.e. Slider / RangeSlider
 * 
 * 
 * The most important properties of the ResponsiveScale are:
 * <ul>
 * <li> tickmarksBetweenLabels - Puts a label on every N-th tickmark.</li>
 * </ul>
 * 
 * 
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.46
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ResponsiveScale = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ResponsiveScale with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ResponsiveScale.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.ResponsiveScale.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ResponsiveScale.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getTickmarksBetweenLabels tickmarksBetweenLabels}.
 * 
 * Put a label on every N-th tickmark.
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>tickmarksBetweenLabels</code>
 * 
 * @public
 * 
 */
sap.m.ResponsiveScale.prototype.getTickmarksBetweenLabels = function() { return 0; };

/**
 * Sets a new value for property {@link #getTickmarksBetweenLabels tickmarksBetweenLabels}.
 * 
 * Put a label on every N-th tickmark.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {int} iTickmarksBetweenLabels New value for property <code>tickmarksBetweenLabels</code>
 * @returns {sap.m.ResponsiveScale} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ResponsiveScale.prototype.setTickmarksBetweenLabels = function(iTickmarksBetweenLabels) { return new sap.m.ResponsiveScale(); };


// ---- sap.m.routing.RouteMatchedHandler --------------------------------------------------------------------------

/**
 * Instantiates a RouteMatchedHandler.
 * 
 * 
 * @class
 * This class will attach to the Events of a provided router and add the views created by it to a  {@link sap.m.SplitContainer} or a {@link sap.m.NavContainer} Control, if this is the target control of the route.</br>
 * If the targetControl is no {@link sap.m.SplitContainer} or a {@link sap.m.NavContainer}, It will only close the dialogs, according to the property value.</br>
 * </br>
 * When a navigation is triggered, this class will try to determine the transition of the pages based on the history.</br>
 * Eg: if a user presses browser back, it will show a backwards animation.</br>
 * </br>
 * The navigation on the container takes place in the RoutePatternMatched event of the Router. If you register on the RouteMatched event of the Router, the visual navigation did not take place yet.</br>
 * </br>
 * Since it is hard to detect if a user has pressed browser back, this transitions will not be reliable, for example if someone bookmarked a detail page, and wants to navigate to a masterPage.</br>
 * If you want this case to always show a backwards transition, you should specify a "viewLevel" property on your Route.</br>
 * The viewLevel has to be an integer. The Master should have a lower number than the detail.</br>
 * These levels should represent the user process of your application and they do not have to match the container structure of your Routes.</br>
 * If the user navigates between views with the same viewLevel, the history is asked for the direction.</br>
 * </br>
 * You can specify a property "transition" in a route to define which transition will be applied when navigating. If it is not defined, the nav container will take its default transition.
 * </br>
 * You can also specify "transitionParameters" on a Route, to give the transition parameters.</br>
 * </br>
 * preservePageInSplitContainer is deprecated since 1.28 since Targets make this parameter obsolete.
 * If you want to preserve the current view when navigating, but you want to navigate to it when nothing is displayed in the navContainer, you can set preservePageInSplitContainer = true</br>
 * When the route that has this flag directly matches the pattern, the view will still be switched by the splitContainer.
 * </br>
 * @see sap.m.NavContainer
 * 
 * 
 * @deprecated Since 1.28 use {@link sap.m.routing.Router} or {@link sap.m.routing.Targets} instead. The functionality of the routematched handler is built in into these two classes, there is no need to create this anymore.
 * @param {sap.ui.core.routing.Router} router - A router that creates views</br>
 * @param {boolean} closeDialogs - the default is true - will close all open dialogs before navigating, if set to true. If set to false it will just navigate without closing dialogs.
 * @public
 * 
 */
sap.m.routing.RouteMatchedHandler = function(router,closeDialogs) {};
/**
 * Removes the routeMatchedHandler from the Router
 * 
 * @public
 * @returns {sap.m.routing.RouteMatchedHandler} for chaining
 * 
 */
sap.m.routing.RouteMatchedHandler.prototype.destroy = function() { return new sap.m.routing.RouteMatchedHandler(); };

/**
 * Creates a new subclass of class sap.m.routing.RouteMatchedHandler with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.routing.RouteMatchedHandler.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets if a navigation should close dialogs
 * 
 * @public
 * @returns {boolean} a flag indication if dialogs will be closed
 * 
 */
sap.m.routing.RouteMatchedHandler.prototype.getCloseDialogs = function() { return false; };

/**
 * Returns a metadata object for class sap.m.routing.RouteMatchedHandler.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.routing.RouteMatchedHandler.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sets if a navigation should close dialogs
 * 
 * @param {boolean} bCloseDialogs close dialogs if true
 * @public
 * @returns {sap.m.routing.RouteMatchedHandler} for chaining
 * 
 */
sap.m.routing.RouteMatchedHandler.prototype.setCloseDialogs = function(bCloseDialogs) { return new sap.m.routing.RouteMatchedHandler(); };


// ---- sap.m.routing.Router --------------------------------------------------------------------------

/**
 * Instantiates an SAPUI5 mobile Router see {@link sap.ui.core.routing.Router} for the constructor arguments
 * The difference to the {@link sap.ui.core.routing.Router} are the properties viewLevel, transition and transitionParameters you can specify in every Route or Target created by this router.
 * 
 * 
 * @class
 * @extends sap.ui.core.routing.Router
 * @param {object|object[]} [oRoutes] may contain many Route configurations as {@link sap.ui.core.routing.Route#constructor}.<br/>
 * Each of the routes contained in the array/object will be added to the router.<br/>
 * 
 * One way of defining routes is an array:
 * <pre>
 * [
 *     //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
 *     {
 *         name: "firstRoute"
 *         pattern : "usefulPattern"
 *     },
 *     //Will create a route called 'anotherRoute'
 *     {
 *         name: "anotherRoute"
 *         pattern : "anotherPattern"
 *     }
 * ]
 * </pre>
 * 
 * The alternative way of defining routes is an Object.<br/>
 * If you choose this way, the name attribute is the name of the property.
 * <pre>
 * {
 *     //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
 *     firstRoute : {
 *         pattern : "usefulPattern"
 *     },
 *     //Will create a route called 'anotherRoute'
 *     anotherRoute : {
 *         pattern : "anotherPattern"
 *     }
 * }
 * </pre>
 * The values that may be provided are the same as in {@link sap.ui.core.routing.Route#constructor}
 * 
 * @param {object} [oConfig] Default values for route configuration - also takes the same parameters as {@link sap.ui.core.routing.Target#constructor}.<br/>
 * This config will be used for routes and for targets, used in the router<br/>
 * Eg: if the config object specifies :
 * <pre>
 * <code>
 * { viewType : "XML" }
 * </code>
 * </pre>
 * The targets look like this:
 * <pre>
 * {
 *     xmlTarget : {
 *         ...
 *     },
 *     jsTarget : {
 *         viewType : "JS"
 *         ...
 *     }
 * }
 * </pre>
 * Then the effective config will look like this:
 * <pre>
 * {
 *     xmlTarget : {
 *         viewType : "XML"
 *         ...
 *     },
 *     jsTarget : {
 *         viewType : "JS"
 *         ...
 *     }
 * }
 * </pre>
 * 
 * Since the xmlTarget does not specify its viewType, XML is taken from the config object. The jsTarget is specifying it, so the viewType will be JS.<br/>
 * @param {string|string[]} [oConfig.bypassed.target] One or multiple names of targets that will be displayed, if no route of the router is matched.<br/>
 * A typical use case is a not found page.<br/>
 * The current hash will be passed to the display event of the target.<br/>
 * <b>Example:</b>
 * <pre>
 * <code>
 *     new Router(
 *     // Routes
 *     [
 *         // Any route here
 *     ],
 *     {
 *         bypassed: {
 *             // you will find this name in the target config
 *             target: "notFound"
 *         }
 *     },
 *     // You should only use this constructor when you are not using a router with a component. Please use the metadata of a component to define your routes and targets. The documentation can be found here: {@link sap.ui.core.UIComponent.extend}.
 *     null,
 *     // Target config
 *     {
 *          //same name as in the config.bypassed.target
 *          notFound: {
 *              viewName: "notFound",
 *              ...
 *              // more properties to place the view in the correct container
 *          }
 *     });
 * </code>
 * </pre>
 * @param {boolean} [oConfig.async=false] @since 1.34. Whether the views which are loaded within this router instance asyncly. The default value is set to false.
 * @param {sap.ui.core.UIComponent} [oOwner] the Component of all the views that will be created by this Router,<br/>
 * will get forwarded to the {@link sap.ui.core.routing.Views#constructor}.<br/>
 * If you are using the componentMetadata to define your routes you should skip this parameter.<br/>
 * @param {object} [oTargetsConfig]
 * the target configuration, see {@link sap.m.routing.Targets#constructor} documentation (the options object).<br/>
 * You should use Targets to create and display views. The route should only contain routing relevant properties.<br/>
 * <b>Example:</b>
 * <pre>
 * <code>
 *     new Router(
 *     // Routes
 *     [
 *         {
 *             // no view creation related properties are in the route
 *             name: "startRoute",
 *             //no hash
 *             pattern: "",
 *             // you can find this target in the targetConfig
 *             target: "welcome"
 *         }
 *     ],
 *     // Default values shared by routes and Targets
 *     {
 *         viewNamespace: "my.application.namespace",
 *         viewType: "XML"
 *     },
 *     // You should only use this constructor when you are not using a router with a component.
 *     // Please use the metadata of a component to define your routes and targets.
 *     // The documentation can be found here: {@link sap.ui.core.UIComponent.extend}.
 *     null,
 *     // Target config
 *     {
 *          //same name as in the route called 'startRoute'
 *          welcome: {
 *              // All properties for creating and placing a view go here or in the config
 *              viewName: "Welcome",
 *              controlId: "app",
 *              controlAggregation: "pages"
 *          }
 *     })
 * </code>
 * </pre>
 * @public
 * @since 1.28.1
 * 
 */
sap.m.routing.Router = function(oRoutes,oConfig,oOwner,oTargetsConfig) {};
/**
 * Creates a new subclass of class sap.m.routing.Router with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.routing.Router.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.routing.Router.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.routing.Router.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.routing.Router.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the TargetHandler instance.
 * 
 * @return {sap.m.routing.TargetHandler} the TargetHandler instance
 * @public
 * 
 */
sap.m.routing.Router.prototype.getTargetHandler = function() { return new sap.m.routing.TargetHandler(); };


// ---- sap.m.routing.TargetHandler --------------------------------------------------------------------------

/**
 * Instantiates a TargetHandler, a class used for closing dialogs and showing transitions in NavContainers when targets are displayed.<br/>
 * <b>You should not create an own instance of this class.</b> It will be created when using {@link sap.m.routing.Router} or {@link sap.m.routing.Targets}.
 * You may use the {@link #setCloseDialogs} function to specify if dialogs should be closed on displaying other views.
 * 
 * 
 * @class
 * @param {boolean} closeDialogs - the default is true - will close all open dialogs before navigating, if set to true. If set to false it will just navigate without closing dialogs.
 * @public
 * @since 1.28.1
 * 
 */
sap.m.routing.TargetHandler = function(closeDialogs) {};
/**
 * Creates a new subclass of class sap.m.routing.TargetHandler with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.routing.TargetHandler.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets if a navigation should close dialogs
 * 
 * @public
 * @returns {boolean} a flag indication if dialogs will be closed
 * 
 */
sap.m.routing.TargetHandler.prototype.getCloseDialogs = function() { return false; };

/**
 * Returns a metadata object for class sap.m.routing.TargetHandler.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.routing.TargetHandler.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sets if a navigation should close dialogs
 * 
 * @param {boolean} bCloseDialogs close dialogs if true
 * @public
 * @returns {sap.m.routing.TargetHandler} for chaining
 * 
 */
sap.m.routing.TargetHandler.prototype.setCloseDialogs = function(bCloseDialogs) { return new sap.m.routing.TargetHandler(); };


// ---- sap.m.routing.Targets --------------------------------------------------------------------------

/**
 * Provides a convenient way for placing views into the correct containers of your application.
 * The mobile extension of Targets also handles the triggering of page navigation when the target control is a {@link sap.m.SplitContainer}, a {@link sap.m.NavContainer} or a control which extends one of these.
 * Other controls are also allowed, but the extra parameters viewLevel, transition and transitionParameters are ignored and it will behave like {@link sap.ui.core.routing.Targets}.
 * When a target is displayed, dialogs will be closed. To change this use {@link #getTargetHandler} and {@link sap.m.routing.TargetHandler#setCloseDialogs}.
 * 
 * 
 * @class
 * @extends sap.ui.core.routing.Targets
 * @param {object} oOptions
 * @param {sap.ui.core.routing.Views} oOptions.views the views instance will create the views of all the targets defined, so if 2 targets have the same viewName, the same instance of the view will be displayed.
 * @param {object} [oOptions.config] this config allows all the values oOptions.targets.anyName allows, these will be the default values for properties used in the target.<br/>
 * For example if you are only using xmlViews in your app you can specify viewType="XML" so you don't have to repeat this in every target.<br/>
 * If a target specifies viewType="JS", the JS will be stronger than the XML here is an example.
 * 
 * <pre>
 * <code>
 * {
 *     config: {
 *         viewType : "XML"
 *     }
 *     targets : {
 *         xmlTarget : {
 *             ...
 *         },
 *         jsTarget : {
 *             viewType : "JS"
 *             ...
 *         }
 *     }
 * }
 * </code>
 * </pre>
 * Then the effective config that will be used looks like this:
 * <pre>
 * <code>
 * {
 *     xmlTarget : {
 *         // coming from the defaults
 *         viewType : "XML"
 *         ...
 *     },
 *     jsTarget : {
 *        // XML is overwritten by the "JS" of the targets property
 *        viewType : "JS"
 *       ...
 *     }
 * }
 * </code>
 * </pre>
 * 
 * @param {string} [oOptions.config.rootView]
 * The id of the rootView - This should be the id of the view that contains the control with the controlId
 * since the control will be retrieved by calling the {@link sap.ui.core.mvc.View#byId} function of the rootView.
 * If you are using a component and add the routing.targets <b>do not set this parameter</b>,
 * since the component will set the rootView to the view created by the {@link sap.ui.core.UIComponent#createContent} function.
 * If you specify the "parent" property of a target, the control will not be searched in the root view but in the view Created by the parent (see parent documentation).
 * @param {boolean} [oOptions.config.async=false] @since 1.34 Whether the views which are created through this Targets are loaded asyncly. This option can be set only when the Targets
 * is used standalone without the involvement of a Router. Otherwise the async option is inherited from the Router.
 * @param {object} oOptions.targets One or multiple targets in a map.
 * @param {object} oOptions.targets.anyName a new target, the key severs as a name. An example:
 * <pre>
 * <code>
 * {
 *     targets: {
 *         welcome: {
 *             viewName: "Welcome",
 *             viewType: "XML",
 *             ....
 *             // Other target parameters
 *         },
 *         goodbye: {
 *             viewName: "Bye",
 *             viewType: "JS",
 *             ....
 *             // Other target parameters
 *         }
 *     }
 * }
 * </code>
 * </pre>
 * 
 * This will create two targets named 'welcome' and 'goodbye' you can display both of them or one of them using the {@link #display} function.
 * 
 * @param {string} oOptions.targets.anyName.viewName The name of a view that will be created.
 * To place the view into a Control use the controlAggregation and controlId. Views will only be created once per viewName.
 * <pre>
 * <code>
 * {
 *     targets: {
 *         // If display("masterWelcome") is called, the master view will be placed in the 'MasterPages' of a control with the id splitContainter
 *         masterWelcome: {
 *             viewName: "Welcome",
 *             controlId: "splitContainer",
 *             controlAggregation: "masterPages"
 *         },
 *         // If display("detailWelcome") is called after the masterWelcome, the view will be removed from the master pages and added to the detail pages, since the same instance is used. Also the controls inside of the view will have the same state.
 *         detailWelcome: {
 *             // same view here, that's why the same instance is used
 *             viewName: "Welcome",
 *             controlId: "splitContainer",
 *             controlAggregation: "detailPages"
 *         }
 *     }
 * }
 * </code>
 * </pre>
 * 
 * If you want to have a second instance of the welcome view you can use the following:
 * 
 * 
 * 
 * <pre>
 * <code>
 * // Some code you execute before you display the taget named 'detailWelcome':
 * var oView = sap.ui.view(({ viewName : "Welcome", type : sap.ui.core.mvc.ViewType.XML});
 * oTargets.getViews().setView("WelcomeWithAlias", oView)
 * 
 * {
 *     targets: {
 *         // If display("masterWelcome") is called, the master viewName will be placed in the 'MasterPages' of a control with the id splitContainter
 *         masterWelcome: {
 *             viewName: "Welcome",
 *             controlId: "splitContainer",
 *             controlAggregation: "masterPages"
 *         },
 *         // If display("detailWelcome") is called after the masterWelcome, a second instance with an own controller instance will be added in the detail pages.
 *         detailWelcome: {
 *             // same viewName here, that's why the same instance is used
 *             viewName: "WelcomeWithAlias",
 *             controlId: "splitContainer",
 *             controlAggregation: "detailPages"
 *         }
 *     }
 * }
 * </code>
 * </pre>
 * 
 * 
 * @param {string} [oOptions.targets.anyName.viewType]
 * The type of the view that is going to be created. These are the supported types: {@link sap.ui.core.mvc.ViewType}.
 * You always have to provide a viewType except if you are using {@link sap.ui.core.routing.Views#setView}.
 * @param {string} [oOptions.targets.anyName.viewPath]
 * A prefix that will be prepended in front of the viewName.<br/>
 * <b>Example:</b> viewName is set to "myView" and viewPath is set to "myApp" - the created viewName will be "myApp.myView".
 * @param {string} [oOptions.targets.anyName.viewId] The id of the created view.
 * This is will be prefixed with the id of the component set to the views instance provided in oOptions.views. For details see {@link sap.ui.core.routing.Views#getView}.
 * @param {string} [oOptions.targets.anyName.targetParent]
 * The id of the parent of the controlId - This should be the id of the view that contains your controlId,
 * since the target control will be retrieved by calling the {@link sap.ui.core.mvc.View#byId} function of the targetParent. By default,
 * this will be the view created by a component, so you do not have to provide this parameter.
 * If you are using children, the view created by the parent of the child is taken.
 * You only need to specify this, if you are not using a Targets instance created by a component
 * and you should give the id of root view of your application to this property.
 * @param {string} [oOptions.targets.anyName.controlId] The id of the control where you want to place the view created by this target.
 * The view of the target will be put into this container Control, using the controlAggregation property. You have to specify both properties or the target will not be able to place itself.
 * An example for containers are {@link sap.ui.ux3.Shell} with the aggregation 'content' or a {@link sap.m.NavContainer} with the aggregation 'pages'.
 * 
 * @param {string} [oOptions.targets.anyName.controlAggregation] The name of an aggregation of the controlId, that contains views.
 * Eg: a {@link sap.m.NavContainer} has an aggregation 'pages', another Example is the {@link sap.ui.ux3.Shell} it has 'content'.
 * @param {boolean} [oOptions.targets.anyName.clearControlAggregation] Defines a boolean that can be passed to specify if the aggregation should be cleared
 * - all items will be removed - before adding the View to it.
 * When using a {@link sap.ui.ux3.Shell} this should be true. For a {@link sap.m.NavContainer} it should be false. When you use the {@link sap.m.routing.Router} the default will be false.
 * @param {string} [oOptions.targets.anyName.parent] A reference to another target, using the name of the target.
 * If you display a target that has a parent, the parent will also be displayed.
 * Also the control you specify with the controlId parameter, will be searched inside of the view of the parent not in the rootView, provided in the config.
 * The control will be searched using the byId function of a view. When it is not found, the global id is checked.
 * <br/>
 * The main usecase for the parent property is placing a view inside a smaller container of a view, which is also created by targets.
 * This is useful for lazy loading views, only if the user really navigates to this part of your application.
 * <br/>
 * <b>Example:</b>
 * Our aim is to lazy load a tab of an IconTabBar (a control that displays a view initially and when a user clicks on it the view changes).
 * It's a perfect candidate to lazy load something inside of it.
 * <br/>
 * <b>Example app structure:</b><br/>
 * We have a rootView that is returned by the createContent function of our UIComponent. This view contains an sap.m.App control with the id 'myApp'
 * <pre>
 * <code>
 * &lt;View xmlns="sap.m"&gt;
 *     &lt;App id="myApp"/&gt;
 * &lt;/View&gt;
 * </code>
 * </pre>
 * an xml view called 'Detail'
 * <pre>
 * <code>
 * &lt;View xmlns="sap.m"&gt;
 *     &lt;IconTabBar&gt;
 *         &lt;items&gt;
 *             &lt;IconTabFilter&gt;
 *                 &lt;!-- content of our first tab --&gt;
 *             &lt;IconTabFilter&gt;
 *             &lt;IconTabFilter id="mySecondTab"&gt;
 *                 &lt;!-- nothing here, since we will lazy load this one with a target --&gt;
 *             &lt;IconTabFilter&gt;
 *         &lt;/items&gt;
 *     &lt;/IconTabBar&gt;
 * &lt;/View&gt;
 * </code>
 * </pre>
 * and a view called 'SecondTabContent', this one contains our content we want to have lazy loaded.
 * Now we need to create our Targets instance with a config matching our app:
 * <pre>
 * <code>
 *     new Targets({
 *         //Creates our views except for root, we created this one before - when using a component you
 *         views: new Views(),
 *         config: {
 *             // all of our views have that type
 *             viewType: 'XML',
 *             // a reference to the app control in the rootView created by our UIComponent
 *             controlId: 'myApp',
 *             // An app has a pages aggregation where the views need to be put into
 *             controlAggregation: 'pages'
 *         },
 *         targets: {
 *             detail: {
 *                 viewName: 'Detail'
 *             },
 *             secondTabContent: {
 *                 // A reference to the detail target defined above
 *                 parent: 'detail',
 *                 // A reference to the second Tab container in the Detail view. Here the target does not look in the rootView, it looks in the Parent view (Detail).
 *                 controlId: 'mySecondTab',
 *                 // An IconTabFilter has an aggregation called content so we need to overwrite the pages set in the config as default.
 *                 controlAggregation: 'content',
 *                 // A view containing the content
 *                 viewName: 'SecondTabContent'
 *             }
 *         }
 *     });
 * </code>
 * </pre>
 * 
 * Now if we call <code> oTargets.display("secondTabContent") </code>, 2 views will be created: Detail and SecondTabContent.
 * The 'Detail' view will be put into the pages aggregation of the App. And afterwards the 'SecondTabContent' view will be put into the content Aggregation of the second IconTabFilter.
 * So a parent will always be created before the target referencing it.
 * 
 * 
 * @param {int} [oOptions.targets.anyName.viewLevel]
 * If you are having an application that has a logical order of views (eg: a create account process, first provide user data, then review and confirm them).
 * You always want to always show a backwards transition if a navigation from the confirm to the userData page takes place.
 * Therefore you may use the viewLevel. The viewLevel has to be an integer. The user data page should have a lower number than the confirm page.
 * These levels should represent the user process of your application and they do not have to match the container structure of your Targets.
 * If the user navigates between views with the same viewLevel, a forward transition is taken. If you pass a direction into the display function, the viewLevel will be ignored.<br/>
 * <b>Example:</b></br>
 * <pre>
 * <code>
 *     {
 *         targets: {
 *             startPage: {
 *                 viewLevel: 0
 *                 // more properties
 *             },
 *             userData: {
 *                 viewLevel: 1
 *                 // more properties
 *             },
 *             confirmRegistration: {
 *                 viewLevel: 2
 *                 // more properties
 *             },
 *             settings: {
 *                 //no view level here
 *             }
 *         }
 *     }
 * </code>
 * </pre>
 * 
 * Currently the 'userData' target is displayed.
 * <ul>
 *     <li>
 *         If we navigate to 'startPage' the navContainer will show a backwards navigation, since the viewLevel is lower.
 *     </li>
 *     <li>
 *         If we navigate to 'userData' the navContainer will show a forwards navigation, since the viewLevel is higher.
 *     </li>
 *     <li>
 *         If we navigate to 'settings' the navContainer will show a forwards navigation, since the viewLevel is not defined and cannot be compared.
 *     </li>
 * </ul>
 * 
 * @param {string} [oOptions.targets.anyName.transition] define which transition of the {@link sap.m.NavContainer} will be applied when navigating. If it is not defined, the nav container will take its default transition.
 * @param {string} [oOptions.targets.anyName.transitionParameters] define the transitionParameters of the {@link sap.m.NavContainer}
 * 
 * @since 1.28.1
 * @public
 * 
 */
sap.m.routing.Targets = function(oOptions) {};
/**
 * Creates a new subclass of class sap.m.routing.Targets with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.routing.Targets.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.routing.Targets.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.routing.Targets.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.routing.Targets.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the TargetHandler instance.
 * 
 * @return {sap.m.routing.TargetHandler} the TargetHandler instance
 * @public
 * 
 */
sap.m.routing.Targets.prototype.getTargetHandler = function() { return new sap.m.routing.TargetHandler(); };


// ---- sap.m.ScreenSize --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ScreenSize.toString = function() { return ""; };

// ---- sap.m.ScrollContainer --------------------------------------------------------------------------

/**
 * Constructor for a new ScrollContainer.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: auto)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: auto)</li>
 * <li>{@link #getHorizontal horizontal} : boolean (default: true)</li>
 * <li>{@link #getVertical vertical} : boolean (default: false)</li>
 * <li>{@link #getFocusable focusable} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[] (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The ScrollContainer is a control that can display arbitrary content within a limited screen area and provides touch scrolling to make all content accessible.
 * 
 * Note that it is not recommended to have nested scrolling areas that scroll into the same direction (e.g. a ScrollContainer that scrolls vertically inside a Page control with scrolling enabled). This is currently not considered a valid use-case of a good UI and the behavior will feel wrong.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ScrollContainer = function(sId,mSettings) {};
/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.ScrollContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.addContent = function(oContent) { return new sap.m.ScrollContainer(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.ScrollContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.destroyContent = function() { return new sap.m.ScrollContainer(); };

/**
 * Creates a new subclass of class sap.m.ScrollContainer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ScrollContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * The content of the ScrollContainer.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getFocusable focusable}.
 * 
 * Whether the scroll container can be focused.
 * 
 * Note that it should be set to "true" when there are no focusable elements inside or when keyboard interaction requires an additional tab stop on the container.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>focusable</code>
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getFocusable = function() { return false; };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * The height of the ScrollContainer.
 * By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.
 * 
 * Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 * 
 * Default value is <code>auto</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getHorizontal horizontal}.
 * 
 * Whether horizontal scrolling should be possible.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>horizontal</code>
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getHorizontal = function() { return false; };

/**
 * Returns a metadata object for class sap.m.ScrollContainer.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ScrollContainer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getVertical vertical}.
 * 
 * Whether vertical scrolling should be possible.
 * 
 * Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true".
 * Important: it is not supported to have nested controls that both enable scrolling into the same dimension.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>vertical</code>
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getVertical = function() { return false; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * The width of the ScrollContainer.
 * If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.
 * 
 * Default value is <code>auto</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.ScrollContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.insertContent = function(oContent,iIndex) { return new sap.m.ScrollContainer(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Scrolls to the given position.
 * When called while the control is not rendered (yet), the scrolling position is still applied, but there is no animation.
 * 
 * @param {int} x
 *         The horizontal pixel position to scroll to.
 *         Scrolling to the right happens with positive values. In right-to-left mode scrolling starts at the right side and higher values scroll to the left.
 *         If only vertical scrolling is enabled, give 0 as value.
 * @param {int} y
 *         The vertical pixel position to scroll to.
 *         Scrolling down happens with positive values.
 *         If only horizontal scrolling is enabled, give 0 as value.
 * @param {int} time
 *         The duration of animated scrolling.
 *         To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.
 * @type sap.m.ScrollContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ScrollContainer.prototype.scrollTo = function(x,y,time) { return new sap.m.ScrollContainer(); };

/**
 * Scrolls to an element(DOM or sap.ui.core.Element) within the page if the element is rendered.
 * @param {HTMLElement | sap.ui.core.Element} element The element to which should be scrolled.
 * @param {int} [time=0] The duration of animated scrolling. To scroll immediately without animation, give 0 as value or leave it default.
 * @returns {sap.m.ScrollContainer} <code>this</code> to facilitate method chaining.
 * @since 1.30
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.scrollToElement = function(element,time) { return new sap.m.ScrollContainer(); };

/**
 * Sets a new value for property {@link #getFocusable focusable}.
 * 
 * Whether the scroll container can be focused.
 * 
 * Note that it should be set to "true" when there are no focusable elements inside or when keyboard interaction requires an additional tab stop on the container.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bFocusable New value for property <code>focusable</code>
 * @returns {sap.m.ScrollContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setFocusable = function(bFocusable) { return new sap.m.ScrollContainer(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * The height of the ScrollContainer.
 * By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.
 * 
 * Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.m.ScrollContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setHeight = function(sHeight) { return new sap.m.ScrollContainer(); };

/**
 * Sets a new value for property {@link #getHorizontal horizontal}.
 * 
 * Whether horizontal scrolling should be possible.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bHorizontal New value for property <code>horizontal</code>
 * @returns {sap.m.ScrollContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setHorizontal = function(bHorizontal) { return new sap.m.ScrollContainer(); };

/**
 * Sets a new value for property {@link #getVertical vertical}.
 * 
 * Whether vertical scrolling should be possible.
 * 
 * Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true".
 * Important: it is not supported to have nested controls that both enable scrolling into the same dimension.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bVertical New value for property <code>vertical</code>
 * @returns {sap.m.ScrollContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setVertical = function(bVertical) { return new sap.m.ScrollContainer(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * The width of the ScrollContainer.
 * If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.ScrollContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ScrollContainer.prototype.setWidth = function(sWidth) { return new sap.m.ScrollContainer(); };


// ---- sap.m.SearchField --------------------------------------------------------------------------

/**
 * Constructor for a new SearchField.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getShowMagnifier showMagnifier} : boolean (default: true)</li>
 * <li>{@link #getShowRefreshButton showRefreshButton} : boolean (default: false)</li>
 * <li>{@link #getRefreshButtonTooltip refreshButtonTooltip} : string</li>
 * <li>{@link #getShowSearchButton showSearchButton} : boolean (default: true)</li>
 * <li>{@link #getEnableSuggestions enableSuggestions} : boolean (default: false)</li>
 * <li>{@link #getSelectOnFocus selectOnFocus} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSuggestionItems suggestionItems} : sap.m.SuggestionItem[] (default)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:suggest suggest} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * An input field to search for a specific item.
 * <h3>Overview</h3>
 * A search field is needed when the user needs to find specific information in large amounts of data.
 * The search field is also the control of choice for filtering down
 * a given amount of information.
 * <h3>Structure</h3>
 * The search input field can be used in two ways:
 * <ul>
 * <li>Manual search - The search is triggered after the user presses the search button.
 * Manual search uses a “starts with” approach.</li>
 * <li>Live search (search-as-you-type) - The search is triggered after each button press.
 * A suggestion list is shown below the search field.  Live search uses a “contains” approach.</li>
 * </ul>
 * <h3>Usage</h3>
 * <h4>When to use:</h4>
 * <ul>
 * <li> Use live search whenever possible. </li>
 * <li> Use a manual search only if the amount of data is too large and if your app would otherwise run
 * into performance issues. </li>
 * </ul>
 * <h3>Responsive Behavior</h3>
 * On mobile devices, there is no refresh button in the search field. "Pull Down to Refresh" is used instead.
 * The "Pull Down to Refresh" arrow icon is animated and spins to signal that the user should release it.
 * 
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SearchField = function(sId,mSettings) {};
/**
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. Do not invalidate or re-render a focused search field, especially during the liveChange event.
 * @event
 * @since 1.9.1
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.newValue Current search string.
 * @public
 * 
 */
sap.m.SearchField.prototype.liveChange = function(oControlEvent) {  };

/**
 * Event which is fired when the user triggers a search.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.query The search query string.
 * @param {sap.m.SuggestionItem} oControlEvent.getParameters.suggestionItem Suggestion list item in case if the user has selected an item from the suggestions list.
 * @param {boolean} oControlEvent.getParameters.refreshButtonPressed Indicates if the user pressed the refresh icon.
 * @param {boolean} oControlEvent.getParameters.clearButtonPressed Indicates if the user pressed the clear icon.
 * @public
 * 
 */
sap.m.SearchField.prototype.search = function(oControlEvent) {  };

/**
 * This event is fired when the search field is initially focused or its value is changed by the user.
 * This event means that suggestion data should be updated, in case if suggestions are used.
 * Use the value parameter to create new suggestions for it.
 * @event
 * @since 1.34
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.suggestValue Current search string of the search field.
 * @public
 * 
 */
sap.m.SearchField.prototype.suggest = function(oControlEvent) {  };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.SearchField(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.SearchField(); };

/**
 * Adds some suggestionItem to the aggregation {@link #getSuggestionItems suggestionItems}.
 * @param {sap.m.SuggestionItem}
 *            oSuggestionItem the suggestionItem to add; if empty, nothing is inserted
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.addSuggestionItem = function(oSuggestionItem) { return new sap.m.SearchField(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:liveChange liveChange} event of this <code>sap.m.SearchField</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SearchField</code> itself.
 * 
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. Do not invalidate or re-render a focused search field, especially during the liveChange event.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code> itself
 * 
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.9.1
 * 
 */
sap.m.SearchField.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.SearchField(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:search search} event of this <code>sap.m.SearchField</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SearchField</code> itself.
 * 
 * Event which is fired when the user triggers a search.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code> itself
 * 
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SearchField.prototype.attachSearch = function(oData,fnFunction,oListener) { return new sap.m.SearchField(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:suggest suggest} event of this <code>sap.m.SearchField</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SearchField</code> itself.
 * 
 * This event is fired when the search field is initially focused or its value is changed by the user.
 * This event means that suggestion data should be updated, in case if suggestions are used.
 * Use the value parameter to create new suggestions for it.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code> itself
 * 
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.34
 * 
 */
sap.m.SearchField.prototype.attachSuggest = function(oData,fnFunction,oListener) { return new sap.m.SearchField(); };

/**
 * Binds property {@link #getValue value} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.bindValue = function(oBindingInfo) { return new sap.m.SearchField(); };

/**
 * Destroys all the suggestionItems in the aggregation {@link #getSuggestionItems suggestionItems}.
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.destroySuggestionItems = function() { return new sap.m.SearchField(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:liveChange liveChange} event of this <code>sap.m.SearchField</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.9.1
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.SearchField(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:search search} event of this <code>sap.m.SearchField</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.detachSearch = function(fnFunction,oListener) { return new sap.m.SearchField(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:suggest suggest} event of this <code>sap.m.SearchField</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.detachSuggest = function(fnFunction,oListener) { return new sap.m.SearchField(); };

/**
 * Creates a new subclass of class sap.m.SearchField with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SearchField.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:liveChange liveChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.newValue] Current search string.
 * 
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.9.1
 * 
 */
sap.m.SearchField.prototype.fireLiveChange = function(mParameters) { return new sap.m.SearchField(); };

/**
 * Fires event {@link #event:search search} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.query] The search query string.
 * @param {sap.m.SuggestionItem} [mParameters.suggestionItem] Suggestion list item in case if the user has selected an item from the suggestions list.
 * @param {boolean} [mParameters.refreshButtonPressed] Indicates if the user pressed the refresh icon.
 * @param {boolean} [mParameters.clearButtonPressed] Indicates if the user pressed the clear icon.
 * 
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SearchField.prototype.fireSearch = function(mParameters) { return new sap.m.SearchField(); };

/**
 * Fires event {@link #event:suggest suggest} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.suggestValue] Current search string of the search field.
 * 
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.34
 * 
 */
sap.m.SearchField.prototype.fireSuggest = function(mParameters) { return new sap.m.SearchField(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Boolean property to enable the control (default is true).
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getEnableSuggestions enableSuggestions}.
 * 
 * If true, a <code>suggest</code> event is fired when user types in the input and when the input is focused.
 * On a phone device, a full screen dialog with suggestions is always shown even if the suggestions list is empty.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableSuggestions</code>
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getEnableSuggestions = function() { return false; };

/**
 * Gets current value of property {@link #getMaxLength maxLength}.
 * 
 * Maximum number of characters. Value '0' means the feature is switched off.
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>maxLength</code>
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getMaxLength = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.SearchField.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.SearchField.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPlaceholder placeholder}.
 * 
 * Text shown when no value available. Default placeholder text is the word "Search" in the current local language (if supported) or in English.
 * 
 * @returns {string} Value of property <code>placeholder</code>
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getPlaceholder = function() { return ""; };

/**
 * Function returns DOM element which acts as reference point for the opening suggestion menu
 * 
 * @protected
 * @since 1.34
 * @returns {domRef} the DOM element at which to open the suggestion list
 * 
 */
sap.m.SearchField.prototype.getPopupAnchorDomRef = function() { return null; };

/**
 * Gets current value of property {@link #getRefreshButtonTooltip refreshButtonTooltip}.
 * 
 * Tooltip text of the refresh button. If it is not set, the tooltip of the SearchField (if any) is displayed. Tooltips are not displayed on touch devices.
 * 
 * @returns {string} Value of property <code>refreshButtonTooltip</code>
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getRefreshButtonTooltip = function() { return ""; };

/**
 * Gets current value of property {@link #getSelectOnFocus selectOnFocus}.
 * 
 * Normally, search text is selected for copy when the SearchField is focused by keyboard navigation. If an application re-renders the SearchField during the liveChange event, set this property to false to disable text selection by focus.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>selectOnFocus</code>
 * @since 1.20
 * @deprecated Since version 1.38.
 * This parameter is deprecated and has no effect in run time. The cursor position of a focused search field is restored after re-rendering automatically.
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getSelectOnFocus = function() { return false; };

/**
 * Gets current value of property {@link #getShowMagnifier showMagnifier}.
 * 
 * Set to false to hide the magnifier icon.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showMagnifier</code>
 * 
 * @deprecated Since version 1.16.0.
 * This parameter is deprecated. Use "showSearchButton" instead.
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getShowMagnifier = function() { return false; };

/**
 * Gets current value of property {@link #getShowRefreshButton showRefreshButton}.
 * 
 * Set to true to display a refresh button in place of the search icon. By pressing the refresh button or F5 key on keyboard, the user can reload the results list without changing the search string.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showRefreshButton</code>
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getShowRefreshButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowSearchButton showSearchButton}.
 * 
 * Set to true to show the search button with the magnifier icon.
 * If false, both the search and refresh buttons are not displayed even if the "showRefreshButton" property is true.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showSearchButton</code>
 * @since 1.23
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getShowSearchButton = function() { return false; };

/**
 * Gets content of aggregation {@link #getSuggestionItems suggestionItems}.
 * 
 * <code>SuggestionItems</code> are the items which will be shown in the suggestions list.
 * The following properties can be used:
 * <ul>
 * <li><code>key</code> is not displayed and may be used as internal technical field</li>
 * <li><code>text</code> is displayed as normal suggestion text</li>
 * <li><code>icon</code></li>
 * <li><code>description</code> - additional text may be used to visually display search item type or category</li>
 * </ul>
 * 
 * @returns {sap.m.SuggestionItem[]}
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getSuggestionItems = function() { return new Array(); };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * Input Value.
 * 
 * @returns {string} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getValue = function() { return ""; };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Invisible inputs are not rendered.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getVisible = function() { return false; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the CSS width of the input. If not set, width is 100%.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.m.SuggestionItem</code> in the aggregation {@link #getSuggestionItems suggestionItems}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.SuggestionItem}
 *           oSuggestionItem The suggestionItem whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.indexOfSuggestionItem = function(oSuggestionItem) { return 0; };

/**
 * Inserts a suggestionItem into the aggregation {@link #getSuggestionItems suggestionItems}.
 * 
 * @param {sap.m.SuggestionItem}
 *            oSuggestionItem the suggestionItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the suggestionItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the suggestionItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the suggestionItem is inserted at
 *              the last position
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.insertSuggestionItem = function(oSuggestionItem,iIndex) { return new sap.m.SearchField(); };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getSuggestionItems suggestionItems}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.SuggestionItem[]} An array of the removed elements (might be empty)
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.removeAllSuggestionItems = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Removes a suggestionItem from the aggregation {@link #getSuggestionItems suggestionItems}.
 * 
 * @param {int | string | sap.m.SuggestionItem} vSuggestionItem The suggestionItem to remove or its index or id
 * @returns {sap.m.SuggestionItem} The removed suggestionItem or <code>null</code>
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.removeSuggestionItem = function(vSuggestionItem) { return new sap.m.SuggestionItem(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Boolean property to enable the control (default is true).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.setEnabled = function(bEnabled) { return new sap.m.SearchField(); };

/**
 * Sets a new value for property {@link #getEnableSuggestions enableSuggestions}.
 * 
 * If true, a <code>suggest</code> event is fired when user types in the input and when the input is focused.
 * On a phone device, a full screen dialog with suggestions is always shown even if the suggestions list is empty.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableSuggestions New value for property <code>enableSuggestions</code>
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.setEnableSuggestions = function(bEnableSuggestions) { return new sap.m.SearchField(); };

/**
 * Sets a new value for property {@link #getMaxLength maxLength}.
 * 
 * Maximum number of characters. Value '0' means the feature is switched off.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {int} iMaxLength New value for property <code>maxLength</code>
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.setMaxLength = function(iMaxLength) { return new sap.m.SearchField(); };

/**
 * Sets a new value for property {@link #getPlaceholder placeholder}.
 * 
 * Text shown when no value available. Default placeholder text is the word "Search" in the current local language (if supported) or in English.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sPlaceholder New value for property <code>placeholder</code>
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.setPlaceholder = function(sPlaceholder) { return new sap.m.SearchField(); };

/**
 * Sets a new value for property {@link #getRefreshButtonTooltip refreshButtonTooltip}.
 * 
 * Tooltip text of the refresh button. If it is not set, the tooltip of the SearchField (if any) is displayed. Tooltips are not displayed on touch devices.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sRefreshButtonTooltip New value for property <code>refreshButtonTooltip</code>
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.setRefreshButtonTooltip = function(sRefreshButtonTooltip) { return new sap.m.SearchField(); };

/**
 * Sets a new value for property {@link #getSelectOnFocus selectOnFocus}.
 * 
 * Normally, search text is selected for copy when the SearchField is focused by keyboard navigation. If an application re-renders the SearchField during the liveChange event, set this property to false to disable text selection by focus.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bSelectOnFocus New value for property <code>selectOnFocus</code>
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.20
 * @deprecated Since version 1.38.
 * This parameter is deprecated and has no effect in run time. The cursor position of a focused search field is restored after re-rendering automatically.
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.setSelectOnFocus = function(bSelectOnFocus) { return new sap.m.SearchField(); };

/**
 * Sets a new value for property {@link #getShowMagnifier showMagnifier}.
 * 
 * Set to false to hide the magnifier icon.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowMagnifier New value for property <code>showMagnifier</code>
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.16.0.
 * This parameter is deprecated. Use "showSearchButton" instead.
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.setShowMagnifier = function(bShowMagnifier) { return new sap.m.SearchField(); };

/**
 * Sets a new value for property {@link #getShowRefreshButton showRefreshButton}.
 * 
 * Set to true to display a refresh button in place of the search icon. By pressing the refresh button or F5 key on keyboard, the user can reload the results list without changing the search string.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowRefreshButton New value for property <code>showRefreshButton</code>
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.setShowRefreshButton = function(bShowRefreshButton) { return new sap.m.SearchField(); };

/**
 * Sets a new value for property {@link #getShowSearchButton showSearchButton}.
 * 
 * Set to true to show the search button with the magnifier icon.
 * If false, both the search and refresh buttons are not displayed even if the "showRefreshButton" property is true.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowSearchButton New value for property <code>showSearchButton</code>
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.23
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.setShowSearchButton = function(bShowSearchButton) { return new sap.m.SearchField(); };

/**
 * Sets a new value for property {@link #getValue value}.
 * 
 * Input Value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sValue New value for property <code>value</code>
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.setValue = function(sValue) { return new sap.m.SearchField(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Invisible inputs are not rendered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.setVisible = function(bVisible) { return new sap.m.SearchField(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the CSS width of the input. If not set, width is 100%.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.setWidth = function(sWidth) { return new sap.m.SearchField(); };

/**
 * Toggle visibility of the suggestion list.
 * 
 * @param {boolean | undefined} bShow set to <code>true</code> to display suggestions and <code>false</code> to hide them. Default value is <code>true</code>.
 * An empty suggestion list is not shown on desktop and tablet devices.<br>
 * 
 * This method may be called only as a response to the <code>suggest</code> event to ensure that the suggestion list is shown
 * at the moment when the user expects it.
 * 
 * @returns {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.34
 * 
 */
sap.m.SearchField.prototype.suggest = function(bShow) { return new sap.m.SearchField(); };

/**
 * Unbinds property {@link #getValue value} from model data.
 * @returns {sap.m.SearchField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SearchField.prototype.unbindValue = function() { return new sap.m.SearchField(); };


// ---- sap.m.SegmentedButton --------------------------------------------------------------------------

/**
 * Constructor for a new SegmentedButton.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getSelectedKey selectedKey} : string (default: )</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.m.Button[] (default)</li>
 * <li>{@link #getItems items} : sap.m.SegmentedButtonItem[]</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedButton selectedButton} : (sap.ui.core.ID | sap.m.Button)</li>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * SegmentedButton is a horizontal control made of multiple buttons, which can display a title or an image. It automatically resizes the buttons to fit proportionally within the control. When no width is set, the control uses the available width.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SegmentedButton = function(sId,mSettings) {};
/**
 * Fires when the user selects a button, which returns the ID and button object.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Button} oControlEvent.getParameters.button Reference to the button, that has been selected.
 * @param {string} oControlEvent.getParameters.id ID of the button, which has been selected.
 * @param {string} oControlEvent.getParameters.key Key of the button, which has been selected. This property is only filled when the control is initiated with the items aggregation.
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.select = function(oControlEvent) {  };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.SegmentedButton(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.SegmentedButton(); };

/**
 * Adds some button to the aggregation {@link #getButtons buttons}.
 * @param {sap.m.Button}
 *            oButton the button to add; if empty, nothing is inserted
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since 1.28.0 Instead use the "items" aggregation.
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.addButton = function(oButton) { return new sap.m.SegmentedButton(); };

/**
 * Adds item to <code>items</code> aggregation
 * @param {sap.m.SegmentedButtonItem} oItem
 * @param {boolean} [bSuppressInvalidate=false] If <code>true</code> the control invalidation will be suppressed
 * @public
 * @override
 * 
 */
sap.m.SegmentedButton.prototype.addItem = function(oItem,bSuppressInvalidate) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:select select} event of this <code>sap.m.SegmentedButton</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SegmentedButton</code> itself.
 * 
 * Fires when the user selects a button, which returns the ID and button object.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SegmentedButton</code> itself
 * 
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.SegmentedButton(); };

/**
 * Binds aggregation {@link #getItems items} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.bindItems = function(oBindingInfo) { return new sap.m.SegmentedButton(); };

/**
 * Binds property {@link #getSelectedKey selectedKey} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.bindSelectedKey = function(oBindingInfo) { return new sap.m.SegmentedButton(); };

/**
 * Adds a Button with a text as title, a URI for an icon, enabled and textDirection.
 * Only one is allowed.
 * 
 * @param {string} sText
 *         Defines the title text of the newly created Button
 * @param {sap.ui.core.URI} sURI
 *         Icon to be displayed as graphical element within the Button.
 *         Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided.
 * @param {boolean} bEnabled
 *         Enables the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings.
 * @param {sap.ui.core.TextDirection} [sTextDirection]
 *         Element's text directionality with enumerated options
 *         @since 1.28.0
 * @return {sap.m.Button} The created Button
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SegmentedButton.prototype.createButton = function(sText,sURI,bEnabled,sTextDirection) { return new sap.m.Button(); };

/**
 * Destroys all the buttons in the aggregation {@link #getButtons buttons}.
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since 1.28.0 Instead use the "items" aggregation.
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.destroyButtons = function() { return new sap.m.SegmentedButton(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.destroyItems = function() { return new sap.m.SegmentedButton(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:select select} event of this <code>sap.m.SegmentedButton</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.SegmentedButton(); };

/**
 * Creates a new subclass of class sap.m.SegmentedButton with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SegmentedButton.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:select select} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.Button} [mParameters.button] Reference to the button, that has been selected.
 * @param {string} [mParameters.id] ID of the button, which has been selected.
 * @param {string} [mParameters.key] Key of the button, which has been selected. This property is only filled when the control is initiated with the items aggregation.
 * 
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SegmentedButton.prototype.fireSelect = function(mParameters) { return new sap.m.SegmentedButton(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getButtons buttons}.
 * 
 * The buttons of the SegmentedButton control. The items set in this aggregation are used as an interface for the buttons displayed by the control. Only the properties ID, icon, text, enabled and textDirections of the Button control are evaluated. Setting other properties of the button will have no effect. Alternatively, you can use the createButton method to add buttons.
 * 
 * @returns {sap.m.Button[]}
 * 
 * @deprecated Since 1.28.0 Instead use the "items" aggregation.
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getButtons = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Disables all the buttons in the SegmentedButton control. When disabled all the buttons look grey and you cannot focus or click on them.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getEnabled = function() { return false; };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * Aggregation of items to be displayed. The items set in this aggregation are used as an interface for the buttons displayed by the control.
 * The "items" and "buttons" aggregations should NOT be used simultaneously as it causes the control to work incorrectly.
 * 
 * @returns {sap.m.SegmentedButtonItem[]}
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.SegmentedButton.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.SegmentedButton.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * ID of the element which is the current target of the association {@link #getSelectedButton selectedButton}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getSelectedButton = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation {@link #getButtons buttons}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Button}
 *           oButton The button whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @deprecated Since 1.28.0 Instead use the "items" aggregation.
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.indexOfButton = function(oButton) { return 0; };

/**
 * Checks for the provided <code>sap.m.SegmentedButtonItem</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.SegmentedButtonItem}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a button into the aggregation {@link #getButtons buttons}.
 * 
 * @param {sap.m.Button}
 *            oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the button should be inserted at; for
 *              a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the button is inserted at
 *              the last position
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since 1.28.0 Instead use the "items" aggregation.
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.insertButton = function(oButton,iIndex) { return new sap.m.SegmentedButton(); };

/**
 * Inserts item into <code>items</code> aggregation
 * @param {sap.m.SegmentedButtonItem} oItem
 * @param {int} iIndex index the item should be inserted at
 * @param {boolean} [bSuppressInvalidate=false] If <code>true</code> the control invalidation will be suppressed
 * @public
 * @override
 * 
 */
sap.m.SegmentedButton.prototype.insertItem = function(oItem,iIndex,bSuppressInvalidate) {  };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getButtons buttons}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Button[]} An array of the removed elements (might be empty)
 * 
 * @deprecated Since 1.28.0 Instead use the "items" aggregation.
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.removeAllButtons = function() { return new Array(); };

/**
 * Removes all items from <code>items</code> aggregation
 * @param {boolean} [bSuppressInvalidate=false] If <code>true</code> the control invalidation will be suppressed
 * @public
 * @override
 * 
 */
sap.m.SegmentedButton.prototype.removeAllItems = function(bSuppressInvalidate) {  };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Removes a button from the aggregation {@link #getButtons buttons}.
 * 
 * @param {int | string | sap.m.Button} vButton The button to remove or its index or id
 * @returns {sap.m.Button} The removed button or <code>null</code>
 * 
 * @deprecated Since 1.28.0 Instead use the "items" aggregation.
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.removeButton = function(vButton) { return new sap.m.Button(); };

/**
 * Removes an item from <code>items</code> aggregation
 * @param {sap.m.SegmentedButtonItem} oItem
 * @param {boolean} [bSuppressInvalidate=false] If <code>true</code> the control invalidation will be suppressed
 * @public
 * @override
 * 
 */
sap.m.SegmentedButton.prototype.removeItem = function(oItem,bSuppressInvalidate) {  };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Disables all the buttons in the SegmentedButton control. When disabled all the buttons look grey and you cannot focus or click on them.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.setEnabled = function(bEnabled) { return new sap.m.SegmentedButton(); };

/**
 * Setter for association <code>selectedButton</code>.
 * 
 * @param {string | sap.m.Button | null | undefined} vButton New value for association <code>setSelectedButton</code>
 *    An sap.m.Button instance which becomes the new target of this <code>selectedButton</code> association.
 *    Alternatively, the ID of an sap.m.Button instance may be given as a string.
 *    If the value of null, undefined, or an empty string is provided the first item will be selected.
 * @returns {sap.m.SegmentedButton} <code>this</code> this pointer for chaining
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.setSelectedButton = function(vButton) { return new sap.m.SegmentedButton(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.setWidth = function(sWidth) { return new sap.m.SegmentedButton(); };

/**
 * Unbinds aggregation {@link #getItems items} from model data.
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.unbindItems = function() { return new sap.m.SegmentedButton(); };

/**
 * Unbinds property {@link #getSelectedKey selectedKey} from model data.
 * @returns {sap.m.SegmentedButton} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.SegmentedButton.prototype.unbindSelectedKey = function() { return new sap.m.SegmentedButton(); };


// ---- sap.m.SegmentedButtonItem --------------------------------------------------------------------------

/**
 * Constructor for a new SegmentedButtonItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The SegmentedButtonItem control is used for creating buttons for the sap.m.SegmentedButton.
 * It is derived from a core sap.ui.core.Item.
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.28
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SegmentedButtonItem = function(sId,mSettings) {};
/**
 * Fires when the user clicks on an individual button.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SegmentedButtonItem.prototype.press = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.SegmentedButtonItem</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SegmentedButtonItem</code> itself.
 * 
 * Fires when the user clicks on an individual button.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SegmentedButtonItem</code> itself
 * 
 * @returns {sap.m.SegmentedButtonItem} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SegmentedButtonItem.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.SegmentedButtonItem(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.SegmentedButtonItem</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SegmentedButtonItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SegmentedButtonItem.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.SegmentedButtonItem(); };

/**
 * Cleanup
 * @override
 * @protected
 * 
 */
sap.m.SegmentedButtonItem.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.m.SegmentedButtonItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SegmentedButtonItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.SegmentedButtonItem} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SegmentedButtonItem.prototype.firePress = function(mParameters) { return new sap.m.SegmentedButtonItem(); };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * The icon, which belongs to the button.
 * This can be a URI to an image or an icon font URI.
 * 
 * @returns {string} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.SegmentedButtonItem.prototype.getIcon = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.SegmentedButtonItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.SegmentedButtonItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Whether the button should be visible on the screen. If set to false, a placeholder is rendered instead of the real button.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.m.SegmentedButtonItem.prototype.getVisible = function() { return false; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Sets the width of the buttons.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.SegmentedButtonItem.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Called once during the element's initialization
 * @override
 * @protected
 * 
 */
sap.m.SegmentedButtonItem.prototype.init = function() {  };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * The icon, which belongs to the button.
 * This can be a URI to an image or an icon font URI.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIcon New value for property <code>icon</code>
 * @returns {sap.m.SegmentedButtonItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SegmentedButtonItem.prototype.setIcon = function(sIcon) { return new sap.m.SegmentedButtonItem(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Whether the button should be visible on the screen. If set to false, a placeholder is rendered instead of the real button.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.SegmentedButtonItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SegmentedButtonItem.prototype.setVisible = function(bVisible) { return new sap.m.SegmentedButtonItem(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Sets the width of the buttons.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.SegmentedButtonItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SegmentedButtonItem.prototype.setWidth = function(sWidth) { return new sap.m.SegmentedButtonItem(); };


// ---- sap.m.Select --------------------------------------------------------------------------

/**
 * Constructor for a new <code>sap.m.Select</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string (default: )</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: auto)</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getSelectedKey selectedKey} : string (default: )</li>
 * <li>{@link #getSelectedItemId selectedItemId} : string (default: )</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: )</li>
 * <li>{@link #getType type} : sap.m.SelectType (default: Default)</li>
 * <li>{@link #getAutoAdjustWidth autoAdjustWidth} : boolean (default: false)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: Initial)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getValueStateText valueStateText} : string (default: )</li>
 * <li>{@link #getShowSecondaryValues showSecondaryValues} : boolean (default: false)</li>
 * <li>{@link #getForceSelection forceSelection} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Item[] (default)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedItem selectedItem} : (sap.ui.core.ID | sap.ui.core.Item)</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given.
 * @param {object} [mSettings] Initial settings for the new control.
 * 
 * @class
 * The <code>sap.m.Select</code> control provides a list of items that allows users to select an item.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control will also be described in the UI5 (legacy) design time meta model.
 * 
 */
sap.m.Select = function(sId,mSettings) {};
/**
 * This event is fired when the value in the selection field is changed in combination with one of
 * the following actions:
 * <ul>
 * 	<li>The focus leaves the selection field</li>
 * 	<li>The <i>Enter</i> key is pressed</li>
 * 	<li>The item is pressed</li>
 * </ul>
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem The selected item.
 * @public
 * 
 */
sap.m.Select.prototype.change = function(oControlEvent) {  };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.Select.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.Select(); };

/**
 * Adds an item to the aggregation named <code>items</code>.
 * 
 * @param {sap.ui.core.Item} oItem The item to be added; if empty, nothing is added.
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.Select.prototype.addItem = function(oItem) { return new sap.m.Select(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.m.Select</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Select</code> itself.
 * 
 * This event is fired when the value in the selection field is changed in combination with one of
 * the following actions:
 * <ul>
 * 	<li>The focus leaves the selection field</li>
 * 	<li>The <i>Enter</i> key is pressed</li>
 * 	<li>The item is pressed</li>
 * </ul>
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Select</code> itself
 * 
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Select.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.Select(); };

/**
 * Binds aggregation {@link #getItems items} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Select.prototype.bindItems = function(oBindingInfo) { return new sap.m.Select(); };

/**
 * Closes the control's picker popup.
 * 
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.close = function() { return new sap.m.Select(); };

/**
 * Creates a picker popup container where the selection should take place.
 * 
 * @param {string} sPickerType
 * @returns {sap.m.Popover | sap.m.Dialog}
 * @protected
 * 
 */
sap.m.Select.prototype.createPicker = function(sPickerType) { return new sap.m.Popover(); };

/**
 * Destroys all the items in the aggregation named <code>items</code>.
 * 
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.Select.prototype.destroyItems = function() { return new sap.m.Select(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.m.Select</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Select.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.Select(); };

/**
 * Creates a new subclass of class sap.m.Select with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Select.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:change change} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Item} [mParameters.selectedItem] The selected item.
 * 
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Select.prototype.fireChange = function(mParameters) { return new sap.m.Select(); };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.Select.prototype.getAccessibilityInfo = function() {  };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getAutoAdjustWidth autoAdjustWidth}.
 * 
 * Indicates whether the width of the input field is determined by the selected item's content.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>autoAdjustWidth</code>
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getAutoAdjustWidth = function() { return false; };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Indicates whether the user can change the selection.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getEnabled = function() { return false; };

/**
 * Gets the enabled items from the aggregation named <code>items</code>.
 * 
 * @param {sap.ui.core.Item[]} [aItems=getItems()] Items to filter.
 * @return {sap.ui.core.Item[]} An array containing the enabled items.
 * @public
 * @since 1.22.0
 * 
 */
sap.m.Select.prototype.getEnabledItems = function(aItems) { return new Array(); };

/**
 * Gets the first item from the aggregation named <code>items</code>.
 * 
 * @returns {sap.ui.core.Item | null} The first item, or null if there are no items.
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getFirstItem = function() { return new sap.ui.core.Item(); };

/**
 * Gets current value of property {@link #getForceSelection forceSelection}.
 * 
 * Indicates whether the selection is restricted to one of the items in the list.
 * <b>Note:</b> We strongly recommend that you always set this property to <code>false</code> and bind
 * the <code>selectedKey</code> property to the desired value for better interoperability with data binding.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>forceSelection</code>
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getForceSelection = function() { return false; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * The URI to the icon that will be displayed only when using the <code>IconOnly</code> type.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets the item from the aggregation named <code>items</code> at the given 0-based index.
 * 
 * @param {int} iIndex Index of the item to return.
 * @returns {sap.ui.core.Item | null} Item at the given index, or null if none.
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getItemAt = function(iIndex) { return new sap.ui.core.Item(); };

/**
 * Gets the item with the given key from the aggregation named <code>items</code>.
 * 
 * <b>Note: </b> If duplicate keys exist, the first item matching the key is returned.
 * 
 * @param {string} sKey An item key that specifies the item to be retrieved.
 * @returns {sap.ui.core.Item | null}
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getItemByKey = function(sKey) { return new sap.ui.core.Item(); };

/**
 * Gets aggregation <code>items</code>.
 * 
 * <b>Note</b>: This is the default aggregation.
 * @return {sap.ui.core.Item[]}
 * @public
 * 
 */
sap.m.Select.prototype.getItems = function() { return new Array(); };

/**
 * Gets the last item from the aggregation named <code>items</code>.
 * 
 * @returns {sap.ui.core.Item | null} The last item, or null if there are no items.
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.getLastItem = function() { return new sap.ui.core.Item(); };

/**
 * Gets current value of property {@link #getMaxWidth maxWidth}.
 * 
 * Sets the maximum width of the control.
 * 
 * <b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>maxWidth</code>
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getMaxWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.Select.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Select.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * The name to be used in the HTML code (for example, for HTML forms that send data to the server via submit).
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getName = function() { return ""; };

/**
 * Gets the selected item object from the aggregation named <code>items</code>.
 * 
 * @returns {sap.ui.core.Item | null} The current target of the <code>selectedItem</code> association, or null.
 * @public
 * 
 */
sap.m.Select.prototype.getSelectedItem = function() { return new sap.ui.core.Item(); };

/**
 * Gets current value of property {@link #getSelectedItemId selectedItemId}.
 * 
 * ID of the selected item.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>selectedItemId</code>
 * @since 1.12
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getSelectedItemId = function() { return ""; };

/**
 * Gets current value of property {@link #getSelectedKey selectedKey}.
 * 
 * Key of the selected item.
 * 
 * <b>Note:</b> If duplicate keys exist, the first item matching the key is used.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>selectedKey</code>
 * @since 1.11
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getSelectedKey = function() { return ""; };

/**
 * Gets current value of property {@link #getShowSecondaryValues showSecondaryValues}.
 * 
 * Indicates whether the text values of the <code>additionalText</code> property of a
 * {@link sap.ui.core.ListItem} are shown.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showSecondaryValues</code>
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getShowSecondaryValues = function() { return false; };

/**
 * Gets current value of property {@link #getTextAlign textAlign}.
 * 
 * Sets the horizontal alignment of the text within the input field.
 * 
 * Default value is <code>Initial</code>.
 * @returns {sap.ui.core.TextAlign} Value of property <code>textAlign</code>
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Specifies the direction of the text within the input field with enumerated options.
 * By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * Type of a select. Possible values <code>Default</code>, <code>IconOnly</code>.
 * 
 * Default value is <code>Default</code>.
 * @returns {sap.m.SelectType} Value of property <code>type</code>
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getType = function() { return new sap.m.SelectType(); };

/**
 * Gets current value of property {@link #getValueState valueState}.
 * 
 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>,
 * <code>Success</code>.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>valueState</code>
 * @since 1.40.2
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getValueState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getValueStateText valueStateText}.
 * 
 * Defines the text of the value state message popup.
 * If this is not specified, a default text is shown from the resource bundle.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>valueStateText</code>
 * @since 1.40.5
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getValueStateText = function() { return ""; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Sets the width of the field. By default, the field width is automatically adjusted to the size
 * of its content and the default width of the field is calculated based on the widest list item
 * in the dropdown list.
 * If the width defined is smaller than its content, only the field width is changed whereas
 * the dropdown list keeps the width of its content.
 * If the dropdown list is wider than the visual viewport, it is truncated and an ellipsis is displayed
 * for each item.
 * For phones, the width of the dropdown list is always the same as the viewport.
 * 
 * <b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.
 * 
 * Default value is <code>auto</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.Select.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Select.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts an item into the aggregation named <code>items</code>.
 * 
 * @param {sap.ui.core.Item} oItem The item to be inserted; if empty, nothing is inserted.
 * @param {int} iIndex The <code>0</code>-based index the item should be inserted at; for
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *             greater than the current size of the aggregation, the item is inserted at the last position.
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.Select.prototype.insertItem = function(oItem,iIndex) { return new sap.m.Select(); };

/**
 * Indicates whether the control's picker popup is opened.
 * 
 * @returns {boolean} Indicates whether the picker popup is currently open (this includes opening and closing animations).
 * @public
 * @since 1.16
 * 
 */
sap.m.Select.prototype.isOpen = function() { return false; };

/**
 * Open the control's picker popup.
 * 
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @protected
 * @since 1.16
 * 
 */
sap.m.Select.prototype.open = function() { return new sap.m.Select(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.Select.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all the items in the aggregation named <code>items</code>.
 * Additionally unregisters them from the hosting UIArea.
 * 
 * @returns {sap.ui.core.Item[]} An array of the removed items (might be empty).
 * @public
 * 
 */
sap.m.Select.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.Select.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * 
 * @param {int | string | sap.ui.core.Item} vItem The item to be removed or its index or ID.
 * @returns {sap.ui.core.Item} The removed item or null.
 * @public
 * 
 */
sap.m.Select.prototype.removeItem = function(vItem) { return new sap.ui.core.Item(); };

/**
 * Sets a new value for property {@link #getAutoAdjustWidth autoAdjustWidth}.
 * 
 * Indicates whether the width of the input field is determined by the selected item's content.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bAutoAdjustWidth New value for property <code>autoAdjustWidth</code>
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Select.prototype.setAutoAdjustWidth = function(bAutoAdjustWidth) { return new sap.m.Select(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Indicates whether the user can change the selection.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Select.prototype.setEnabled = function(bEnabled) { return new sap.m.Select(); };

/**
 * Sets a new value for property {@link #getForceSelection forceSelection}.
 * 
 * Indicates whether the selection is restricted to one of the items in the list.
 * <b>Note:</b> We strongly recommend that you always set this property to <code>false</code> and bind
 * the <code>selectedKey</code> property to the desired value for better interoperability with data binding.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bForceSelection New value for property <code>forceSelection</code>
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.Select.prototype.setForceSelection = function(bForceSelection) { return new sap.m.Select(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * The URI to the icon that will be displayed only when using the <code>IconOnly</code> type.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Select.prototype.setIcon = function(sIcon) { return new sap.m.Select(); };

/**
 * Sets a new value for property {@link #getMaxWidth maxWidth}.
 * 
 * Sets the maximum width of the control.
 * 
 * <b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sMaxWidth New value for property <code>maxWidth</code>
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Select.prototype.setMaxWidth = function(sMaxWidth) { return new sap.m.Select(); };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * The name to be used in the HTML code (for example, for HTML forms that send data to the server via submit).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Select.prototype.setName = function(sName) { return new sap.m.Select(); };

/**
 * Sets the <code>selectedItem</code> association.
 * 
 * Default value is <code>null</code>.
 * 
 * @param {string | sap.ui.core.Item | null} vItem New value for the <code>selectedItem</code> association.
 * If an ID of a <code>sap.ui.core.Item</code> is given, the item with this ID becomes the <code>selectedItem</code> association.
 * Alternatively, a <code>sap.ui.core.Item</code> instance may be given or <code>null</code>.
 * If the value of <code>null</code> is provided, the first enabled item will be selected (if any items exist).
 * 
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.Select.prototype.setSelectedItem = function(vItem) { return new sap.m.Select(); };

/**
 * Sets the <code>selectedItemId</code> property.
 * 
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * 
 * @param {string | undefined} vItem New value for property <code>selectedItemId</code>.
 * If the provided <code>vItem</code> has a default value, the first enabled item will be selected (if any items exist).
 * 
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * @since 1.12
 * 
 */
sap.m.Select.prototype.setSelectedItemId = function(vItem) { return new sap.m.Select(); };

/**
 * Sets property <code>selectedKey</code>.
 * 
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * 
 * @param {string} sKey New value for property <code>selectedKey</code>.
 * If the <code>forceSelection</code> property is set to <code>true</code> and the provided <code>sKey</code> is
 * an empty string <code>""</code> or <code>undefined</code>, the value of <code>sKey</code> is changed to match
 * the <code>key</code> of the first enabled item and the first enabled item is selected (if any items exist).
 * 
 * In the case that an item has the default key value, it is selected instead.
 * If duplicate keys exist, the first item matching the key is selected.
 * 
 * @returns {sap.m.Select} <code>this</code> to allow method chaining.
 * @public
 * @since 1.11
 * 
 */
sap.m.Select.prototype.setSelectedKey = function(sKey) { return new sap.m.Select(); };

/**
 * Sets a new value for property {@link #getShowSecondaryValues showSecondaryValues}.
 * 
 * Indicates whether the text values of the <code>additionalText</code> property of a
 * {@link sap.ui.core.ListItem} are shown.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowSecondaryValues New value for property <code>showSecondaryValues</code>
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.Select.prototype.setShowSecondaryValues = function(bShowSecondaryValues) { return new sap.m.Select(); };

/**
 * Sets a new value for property {@link #getTextAlign textAlign}.
 * 
 * Sets the horizontal alignment of the text within the input field.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Initial</code>.
 * @param {sap.ui.core.TextAlign} sTextAlign New value for property <code>textAlign</code>
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.Select.prototype.setTextAlign = function(sTextAlign) { return new sap.m.Select(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Specifies the direction of the text within the input field with enumerated options.
 * By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28
 * 
 * @public
 * 
 */
sap.m.Select.prototype.setTextDirection = function(sTextDirection) { return new sap.m.Select(); };

/**
 * Sets a new value for property {@link #getType type}.
 * 
 * Type of a select. Possible values <code>Default</code>, <code>IconOnly</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Default</code>.
 * @param {sap.m.SelectType} sType New value for property <code>type</code>
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.Select.prototype.setType = function(sType) { return new sap.m.Select(); };

/**
 * Sets a new value for property {@link #getValueState valueState}.
 * 
 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>,
 * <code>Success</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.core.ValueState} sValueState New value for property <code>valueState</code>
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40.2
 * 
 * @public
 * 
 */
sap.m.Select.prototype.setValueState = function(sValueState) { return new sap.m.Select(); };

/**
 * Sets a new value for property {@link #getValueStateText valueStateText}.
 * 
 * Defines the text of the value state message popup.
 * If this is not specified, a default text is shown from the resource bundle.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sValueStateText New value for property <code>valueStateText</code>
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40.5
 * 
 * @public
 * 
 */
sap.m.Select.prototype.setValueStateText = function(sValueStateText) { return new sap.m.Select(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Sets the width of the field. By default, the field width is automatically adjusted to the size
 * of its content and the default width of the field is calculated based on the widest list item
 * in the dropdown list.
 * If the width defined is smaller than its content, only the field width is changed whereas
 * the dropdown list keeps the width of its content.
 * If the dropdown list is wider than the visual viewport, it is truncated and an ellipsis is displayed
 * for each item.
 * For phones, the width of the dropdown list is always the same as the viewport.
 * 
 * <b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Select.prototype.setWidth = function(sWidth) { return new sap.m.Select(); };

/**
 * Unbinds aggregation {@link #getItems items} from model data.
 * @returns {sap.m.Select} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Select.prototype.unbindItems = function() { return new sap.m.Select(); };


// ---- sap.m.SelectDialog --------------------------------------------------------------------------

/**
 * Constructor for a new SelectDialog.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: false)</li>
 * <li>{@link #getGrowingThreshold growingThreshold} : int</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getRememberSelections rememberSelections} : boolean (default: false)</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.ListItemBase[] (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * A dialog that enables users to select one or more items from a comprehensive list.
 * @class
 * <h3>Overview</h3>
 * A SelectDialog is a dialog containing a list, search functionality to filter it and a confirmation/cancel button.
 * The list used in the dialog is a growing list and can be filled with any kind of list item.
 * <h3>Structure</h3>
 * <h4>Dialog structure</h4>
 * The select dialog has the following components:
 * <ul>
 * <li>Header - title of the dialog</li>
 * <li>Search field - input field to enter search terms</li>
 * <li>Info toolbar (only in multi-select) - displays the number of currently selected items</li>
 * <li>Content - {@link sap.m.StandardListItem  standard list items}, {@link sap.m.DisplayListItem
 * display list items} or {@link sap.m.FeedListItem feed list items}</li>
 * <li>Button toolbar - for confirmation/cancellation buttons </li>
 * </ul>
 * <h4>List structure & selection</h4>
 * <ul>
 * <li> The search field triggers the events <code>search</code> and <code>liveChange</code>
 * where a filter function can be applied to the list binding. </li>
 * <li> The growing functionality of the list does not support two-way Binding, so if you use this control with a JSON model
 * make sure the binding mode is set to <code>OneWay</code> and that you update the selection model manually with
 * the items passed in the <code>confirm<code> event. </li>
 * <li> In the multi-select mode of the select dialog, checkboxes are provided for choosing multiple entries. </li>
 * <li> You can set <code>rememberSelections</code> to true to store the current selection and load this state
 * when the dialog is opened again. </li>
 * <li> When cancelling the selection, the event <code>change</code> will be fired and the selection is restored
 * to the state when the dialog was opened. </li>
 * </ul>
 * <h3>Usage</h3>
 * <h4>When to use:</h4>
 * <ul>
 * <li>You  need to select one or more entries from a comprehensive list that contains multiple attributes or values. </li>
 * </ul>
 * <h4>When not to use:</h4>
 * <ul>
 * <li> You need to pick one item from a predefined set of options. Use {@link sap.m.Select select}
 * or {@link sap.m.ComboBox combobox} instead. </li>
 * <li> You need to select a range of item. Use {@link sap.ui.comp.valuehelpdialog.ValueHelpDialog value help dialog instead. </li>
 * <li> You need to be able to add your own values to an existing list. Use a {@link sap.m.Dialog dialog} instead. </li>
 * </ul>
 * <h3>Responsive Behavior</h3>
 * <ul>
 * <li> On phones, the select dialog takes up the whole screen. </li>
 * <li> On desktop and tablet devices, the select dialog appears as a popover. </li>
 * </ul>
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SelectDialog = function(sId,mSettings) {};
/**
 * This event will be fired when the cancel button is clicked
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SelectDialog.prototype.cancel = function(oControlEvent) {  };

/**
 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.StandardListItem} oControlEvent.getParameters.selectedItem Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 * @param {sap.m.StandardListItem[]} oControlEvent.getParameters.selectedItems Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.
 * @param {string} oControlEvent.getParameters.selectedContexts Returns the binding contexts of the selected items including the non-visible items.
 * NOTE: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no data binding is used.
 * NOTE: When the list binding is pre-filtered and there are items in the selection that are not visible upon opening the dialog, these contexts are not loaded. Therefore, these items will not be included in the selectedContexts array unless they are displayed at least once.
 * @public
 * 
 */
sap.m.SelectDialog.prototype.confirm = function(oControlEvent) {  };

/**
 * This event will be fired when the value of the search field is changed by a user - e.g. at each key press
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The value to search for, which can change at any keypress
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Select Dialog. It will only be available if the items aggregation is bound to a model.
 * @public
 * 
 */
sap.m.SelectDialog.prototype.liveChange = function(oControlEvent) {  };

/**
 * This event will be fired when the search button has been clicked on the searchfield on the visual control
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The value entered in the search
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Select Dialog for search purposes. It will only be available if the items aggregation is bound to a model.
 * @public
 * 
 */
sap.m.SelectDialog.prototype.search = function(oControlEvent) {  };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.m.ListItemBase}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.addItem = function(oItem) { return new sap.m.SelectDialog(); };

/**
 * Forward method to the inner dialog: addStyleClass
 * @public
 * @override
 * @returns {sap.m.SelectDialog} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.addStyleClass = function() { return new sap.m.SelectDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:cancel cancel} event of this <code>sap.m.SelectDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SelectDialog</code> itself.
 * 
 * This event will be fired when the cancel button is clicked
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code> itself
 * 
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:confirm confirm} event of this <code>sap.m.SelectDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SelectDialog</code> itself.
 * 
 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code> itself
 * 
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.attachConfirm = function(oData,fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:liveChange liveChange} event of this <code>sap.m.SelectDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SelectDialog</code> itself.
 * 
 * This event will be fired when the value of the search field is changed by a user - e.g. at each key press
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code> itself
 * 
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:search search} event of this <code>sap.m.SelectDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SelectDialog</code> itself.
 * 
 * This event will be fired when the search button has been clicked on the searchfield on the visual control
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code> itself
 * 
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SelectDialog.prototype.attachSearch = function(oData,fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Forwards aggregations with the name of items to the internal list.
 * @override
 * @protected
 * @param {string} sAggregationName The name for the binding
 * @param {object} oBindingInfo The configuration parameters for the binding
 * @returns {sap.m.SelectDialog} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.bindAggregation = function(sAggregationName,oBindingInfo) { return new sap.m.SelectDialog(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.destroyItems = function() { return new sap.m.SelectDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:cancel cancel} event of this <code>sap.m.SelectDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.detachCancel = function(fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:confirm confirm} event of this <code>sap.m.SelectDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.detachConfirm = function(fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:liveChange liveChange} event of this <code>sap.m.SelectDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:search search} event of this <code>sap.m.SelectDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.detachSearch = function(fnFunction,oListener) { return new sap.m.SelectDialog(); };

/**
 * Creates a new subclass of class sap.m.SelectDialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SelectDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:cancel cancel} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SelectDialog.prototype.fireCancel = function(mParameters) { return new sap.m.SelectDialog(); };

/**
 * Fires event {@link #event:confirm confirm} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.StandardListItem} [mParameters.selectedItem] Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 * @param {sap.m.StandardListItem[]} [mParameters.selectedItems] Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.
 * @param {string} [mParameters.selectedContexts] Returns the binding contexts of the selected items including the non-visible items.
 * NOTE: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no data binding is used.
 * NOTE: When the list binding is pre-filtered and there are items in the selection that are not visible upon opening the dialog, these contexts are not loaded. Therefore, these items will not be included in the selectedContexts array unless they are displayed at least once.
 * 
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SelectDialog.prototype.fireConfirm = function(mParameters) { return new sap.m.SelectDialog(); };

/**
 * Fires event {@link #event:liveChange liveChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.value] The value to search for, which can change at any keypress
 * @param {any} [mParameters.itemsBinding] The Items binding of the Select Dialog. It will only be available if the items aggregation is bound to a model.
 * 
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SelectDialog.prototype.fireLiveChange = function(mParameters) { return new sap.m.SelectDialog(); };

/**
 * Fires event {@link #event:search search} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.value] The value entered in the search
 * @param {any} [mParameters.itemsBinding] The Items binding of the Select Dialog for search purposes. It will only be available if the items aggregation is bound to a model.
 * 
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SelectDialog.prototype.fireSearch = function(mParameters) { return new sap.m.SelectDialog(); };

/**
 * Get the internal Dialog's contentHeight property {@link sap.m.Dialog}
 * @override
 * @public
 * @returns {sap.ui.core.CSSSize} sHeight The content width of the internal dialog
 * 
 */
sap.m.SelectDialog.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Get the internal Dialog's contentWidth property {@link sap.m.Dialog}
 * @override
 * @public
 * @returns {sap.ui.core.CSSSize} sWidth The content width of the internal dialog
 * 
 */
sap.m.SelectDialog.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Forward method to the inner dialog: getDomRef
 * @public
 * @override
 * @return {Element} The Element's DOM Element sub DOM Element or null
 * 
 */
sap.m.SelectDialog.prototype.getDomRef = function() { return null; };

/**
 * Gets current value of property {@link #getGrowingThreshold growingThreshold}.
 * 
 * Determines the number of items initially displayed in the list. Also defines the number of items to be requested from the model for each grow.
 * 
 * @returns {int} Value of property <code>growingThreshold</code>
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.getGrowingThreshold = function() { return 0; };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * The items of the list shown in the search dialog. It is recommended to use a StandardListItem for the dialog but other combinations are also possible.
 * 
 * @returns {sap.m.ListItemBase[]}
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.SelectDialog.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.SelectDialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMultiSelect multiSelect}.
 * 
 * Determines if the user can select several options from the list
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>multiSelect</code>
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.getMultiSelect = function() { return false; };

/**
 * Get the internal List's no data text property
 * @override
 * @public
 * @returns {string} the current no data text
 * 
 */
sap.m.SelectDialog.prototype.getNoDataText = function() { return ""; };

/**
 * Gets current value of property {@link #getRememberSelections rememberSelections}.
 * 
 * This flag controls whether the dialog clears the selection after the confirm event has been fired. If the dialog needs to be opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true".
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>rememberSelections</code>
 * @since 1.18
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.getRememberSelections = function() { return false; };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Determines the title text that appears in the dialog header
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.getTitle = function() { return ""; };

/**
 * Forward method to the inner dialog: hasStyleClass
 * @public
 * @override
 * @returns {boolean} true if the class is set, false otherwise
 * 
 */
sap.m.SelectDialog.prototype.hasStyleClass = function() { return false; };

/**
 * Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ListItemBase}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.m.ListItemBase}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.insertItem = function(oItem,iIndex) { return new sap.m.SelectDialog(); };

/**
 * Opens the internal dialog with a searchfield and a list.
 * @param {string} sSearchValue
 *         A value for the search can be passed to match with the filter applied to the list binding.
 * @type sap.m.SelectDialog
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SelectDialog.prototype.open = function(sSearchValue) { return new sap.m.SelectDialog(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ListItemBase[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.m.ListItemBase} vItem The item to remove or its index or id
 * @returns {sap.m.ListItemBase} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.removeItem = function(vItem) { return new sap.m.ListItemBase(); };

/**
 * Forward method to the inner dialog: removeStyleClass
 * @public
 * @override
 * @returns {sap.m.SelectDialog} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.removeStyleClass = function() { return new sap.m.SelectDialog(); };

/**
 * Set the internal Dialog's contentHeight property {@link sap.m.Dialog}
 * @param {sap.ui.core.CSSSize} sHeight The new content width value for the dialog
 * @public
 * @override
 * @returns {sap.m.SelectDialog} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.setContentHeight = function(sHeight) { return new sap.m.SelectDialog(); };

/**
 * Set the internal Dialog's contentWidth property {@link sap.m.Dialog}
 * @param {sap.ui.core.CSSSize} sWidth The new content width value for the dialog
 * @public
 * @override
 * @returns {sap.m.SelectDialog} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.setContentWidth = function(sWidth) { return new sap.m.SelectDialog(); };

/**
 * Sets the growing threshold to the internal list
 * @public
 * @param {int} iValue Value for the list's growing threshold.
 * @returns {sap.m.SelectDialog} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.setGrowingThreshold = function(iValue) { return new sap.m.SelectDialog(); };

/**
 * Enable/Disable multi selection mode.
 * @override
 * @public
 * @param {boolean} bMulti Flag for multi selection mode
 * @returns {sap.m.SelectDialog} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.setMultiSelect = function(bMulti) { return new sap.m.SelectDialog(); };

/**
 * Set the internal List's no data text property
 * @override
 * @public
 * @param {string} sNoDataText The no data text for the list
 * @returns {sap.m.SelectDialog} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.setNoDataText = function(sNoDataText) { return new sap.m.SelectDialog(); };

/**
 * Sets a new value for property {@link #getRememberSelections rememberSelections}.
 * 
 * This flag controls whether the dialog clears the selection after the confirm event has been fired. If the dialog needs to be opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bRememberSelections New value for property <code>rememberSelections</code>
 * @returns {sap.m.SelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.18
 * 
 * @public
 * 
 */
sap.m.SelectDialog.prototype.setRememberSelections = function(bRememberSelections) { return new sap.m.SelectDialog(); };

/**
 * Set the title of the internal dialog
 * @override
 * @public
 * @param {string} sTitle The title text for the dialog
 * @returns {sap.m.SelectDialog} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.setTitle = function(sTitle) { return new sap.m.SelectDialog(); };

/**
 * Forward method to the inner dialog: toggleStyleClass
 * @public
 * @override
 * @returns {sap.m.SelectDialog} this pointer for chaining
 * 
 */
sap.m.SelectDialog.prototype.toggleStyleClass = function() { return new sap.m.SelectDialog(); };


// ---- sap.m.SelectionDetails --------------------------------------------------------------------------

/**
 * Constructor for a new SelectionDetails.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.SelectionDetailsItem[] (default)</li>
 * <li>{@link #getActions actions} : sap.ui.core.Item[]</li>
 * <li>{@link #getActionGroups actionGroups} : sap.ui.core.Item[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:actionPress actionPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The protected control provides a popover that displays the details of the items selected in the chart. This control should only be used in the suite.ui.commons.ChartContainer toolbar and sap.ui.comp.smartchart.SmartChart controls. Initially, the control is rendered as a button that opens the popup after clicking on it.
 * <b><i>Note:<i></b>It is protected and should ony be used within the framework itself.
 * @version 1.48.4
 * 
 * @extends sap.ui.core.Control
 * @constructor
 * @protected
 * @since 1.48.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SelectionDetails = function(sId,mSettings) {};
/**
 * Event is triggered when a custom action is pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.action The action that has to be processed once the action has been pressed
 * @param {sap.m.SelectionDetailsItem} oControlEvent.getParameters.items If the action is pressed on one of the {@link sap.m.SelectionDetailsItem items}, the parameter contains a reference to the pressed {@link sap.m.SelectionDetailsItem item}. If a custom action or action group of the SelectionDetails popover is pressed, this parameter refers to all {@link sap.m.SelectionDetailsItem items}
 * @param {sap.m.SelectionDetailsActionLevel} oControlEvent.getParameters.level The action level of action buttons. The available levels are Item, List and Group
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.actionPress = function(oControlEvent) {  };

/**
 * Event is triggered before the popover is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.beforeClose = function(oControlEvent) {  };

/**
 * Event is triggered before the popover is open.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.beforeOpen = function(oControlEvent) {  };

/**
 * Event is triggered after a list item of {@link sap.m.SelectionDetailsItem} is pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.SelectionDetailsItem} oControlEvent.getParameters.item The item on which the action has been pressed.
 * Can be null in case a navigation was done without item context, e.g. action press.
 * @param {string} oControlEvent.getParameters.direction Direction of the triggered navigation, possible values are "to" and "back".
 * @param {sap.ui.core.Control} oControlEvent.getParameters.content The content of the currently viewed page that was previously added via {@link sap.m.SelectionDetails#navTo}.
 * This contains the content of the page before the navigation was triggered.
 * Can be null in case of first event triggering.
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.navigate = function(oControlEvent) {  };

/**
 * Adds some action to the aggregation {@link #getActions actions}.
 * @param {sap.ui.core.Item}
 *            oAction the action to add; if empty, nothing is inserted
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.addAction = function(oAction) { return new sap.m.SelectionDetails(); };

/**
 * Adds some actionGroup to the aggregation {@link #getActionGroups actionGroups}.
 * @param {sap.ui.core.Item}
 *            oActionGroup the actionGroup to add; if empty, nothing is inserted
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.addActionGroup = function(oActionGroup) { return new sap.m.SelectionDetails(); };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.m.SelectionDetailsItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.addItem = function(oItem) { return new sap.m.SelectionDetails(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:actionPress actionPress} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.
 * 
 * Event is triggered when a custom action is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself
 * 
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.attachActionPress = function(oData,fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeClose beforeClose} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.
 * 
 * Event is triggered before the popover is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself
 * 
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.
 * 
 * Event is triggered before the popover is open.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself
 * 
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:navigate navigate} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.
 * 
 * Event is triggered after a list item of {@link sap.m.SelectionDetailsItem} is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself
 * 
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.attachNavigate = function(oData,fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Attaches an event handler to the given listener to react to user selection interaction.
 * @protected
 * @param {string} eventId The identifier of the event to listen for
 * @param {object} listener The object which triggers the event to register on
 * @returns {sap.m.SelectionDetails} this to allow method chaining
 * 
 */
sap.m.SelectionDetails.prototype.attachSelectionHandler = function(eventId,listener) { return new sap.m.SelectionDetails(); };

/**
 * Binds aggregation {@link #getItems items} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.bindItems = function(oBindingInfo) { return new sap.m.SelectionDetails(); };

/**
 * Destroys all the actionGroups in the aggregation {@link #getActionGroups actionGroups}.
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.destroyActionGroups = function() { return new sap.m.SelectionDetails(); };

/**
 * Destroys all the actions in the aggregation {@link #getActions actions}.
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.destroyActions = function() { return new sap.m.SelectionDetails(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.destroyItems = function() { return new sap.m.SelectionDetails(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:actionPress actionPress} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.detachActionPress = function(fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeClose beforeClose} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:navigate navigate} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.detachNavigate = function(fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Detaches the event which was attached by <code>attachSelectionHandler</code>.
 * @protected
 * @returns {sap.m.SelectionDetails} this to allow method chaining
 * 
 */
sap.m.SelectionDetails.prototype.detachSelectionHandler = function() { return new sap.m.SelectionDetails(); };

/**
 * Creates a new subclass of class sap.m.SelectionDetails with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SelectionDetails.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:actionPress actionPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Item} [mParameters.action] The action that has to be processed once the action has been pressed
 * @param {sap.m.SelectionDetailsItem} [mParameters.items] If the action is pressed on one of the {@link sap.m.SelectionDetailsItem items}, the parameter contains a reference to the pressed {@link sap.m.SelectionDetailsItem item}. If a custom action or action group of the SelectionDetails popover is pressed, this parameter refers to all {@link sap.m.SelectionDetailsItem items}
 * @param {sap.m.SelectionDetailsActionLevel} [mParameters.level] The action level of action buttons. The available levels are Item, List and Group
 * 
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SelectionDetails.prototype.fireActionPress = function(mParameters) { return new sap.m.SelectionDetails(); };

/**
 * Fires event {@link #event:beforeClose beforeClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SelectionDetails.prototype.fireBeforeClose = function(mParameters) { return new sap.m.SelectionDetails(); };

/**
 * Fires event {@link #event:beforeOpen beforeOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SelectionDetails.prototype.fireBeforeOpen = function(mParameters) { return new sap.m.SelectionDetails(); };

/**
 * Fires event {@link #event:navigate navigate} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.SelectionDetailsItem} [mParameters.item] The item on which the action has been pressed.
 * Can be null in case a navigation was done without item context, e.g. action press.
 * @param {string} [mParameters.direction] Direction of the triggered navigation, possible values are "to" and "back".
 * @param {sap.ui.core.Control} [mParameters.content] The content of the currently viewed page that was previously added via {@link sap.m.SelectionDetails#navTo}.
 * This contains the content of the page before the navigation was triggered.
 * Can be null in case of first event triggering.
 * 
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SelectionDetails.prototype.fireNavigate = function(mParameters) { return new sap.m.SelectionDetails(); };

/**
 * Gets content of aggregation {@link #getActionGroups actionGroups}.
 * 
 * Contains actions that are rendered as a dedicated {@link sap.m.StandardListItem item}.
 * In case an action group is pressed, a navigation should be triggered via <code>navTo</code> method.
 * A maximum of 5 actionGroups is displayed inside the popover, though more can be added to the aggregation.
 * 
 * @returns {sap.ui.core.Item[]}
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.getActionGroups = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getActions actions}.
 * 
 * Contains custom actions shown in the responsive toolbar below items on the first page.
 * 
 * @returns {sap.ui.core.Item[]}
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.getActions = function() { return new Array(); };

/**
 * Returns the public facade of the SelectionDetails control for non inner framework usages.
 * @returns {sap.ui.base.Interface} The reduced facade for outer framework usages.
 * @protected
 * 
 */
sap.m.SelectionDetails.prototype.getFacade = function() { return new sap.ui.base.Interface(); };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * Contains {@link sap.m.SelectionDetailsItem items} that are displayed on the first page.
 * 
 * @returns {sap.m.SelectionDetailsItem[]}
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.SelectionDetails.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.SelectionDetails.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation {@link #getActions actions}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oAction The action whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.indexOfAction = function(oAction) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation {@link #getActionGroups actionGroups}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oActionGroup The actionGroup whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.indexOfActionGroup = function(oActionGroup) { return 0; };

/**
 * Checks for the provided <code>sap.m.SelectionDetailsItem</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.SelectionDetailsItem}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a action into the aggregation {@link #getActions actions}.
 * 
 * @param {sap.ui.core.Item}
 *            oAction the action to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the action should be inserted at; for
 *              a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the action is inserted at
 *              the last position
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.insertAction = function(oAction,iIndex) { return new sap.m.SelectionDetails(); };

/**
 * Inserts a actionGroup into the aggregation {@link #getActionGroups actionGroups}.
 * 
 * @param {sap.ui.core.Item}
 *            oActionGroup the actionGroup to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the actionGroup should be inserted at; for
 *              a negative value of <code>iIndex</code>, the actionGroup is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the actionGroup is inserted at
 *              the last position
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.insertActionGroup = function(oActionGroup,iIndex) { return new sap.m.SelectionDetails(); };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.m.SelectionDetailsItem}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.insertItem = function(oItem,iIndex) { return new sap.m.SelectionDetails(); };

/**
 * Method to register the factory function that creates the SelectionDetailsItems.
 * The factory function is called for every selected entry separately with three parameters.
 * First parameter is the display data array for each item out of the selection.
 * Second parameter is the data array for each item out of the selection.
 * Third parameter is the binding context for each item in the selection. This is undefined if no binding is used.
 * Fourth parameter is <code>oData</code>. Can be undefined.
 * @protected
 * @param {any} data Data to be passed to the factory function
 * @param {function} factory The item factory function that returns SelectionDetailsItems
 * @returns {sap.m.SelectionDetails} this to allow method chaining
 * 
 */
sap.m.SelectionDetails.prototype.registerSelectionDetailsItemFactory = function(data,factory) { return new sap.m.SelectionDetails(); };

/**
 * Removes a action from the aggregation {@link #getActions actions}.
 * 
 * @param {int | string | sap.ui.core.Item} vAction The action to remove or its index or id
 * @returns {sap.ui.core.Item} The removed action or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.removeAction = function(vAction) { return new sap.ui.core.Item(); };

/**
 * Removes a actionGroup from the aggregation {@link #getActionGroups actionGroups}.
 * 
 * @param {int | string | sap.ui.core.Item} vActionGroup The actionGroup to remove or its index or id
 * @returns {sap.ui.core.Item} The removed actionGroup or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.removeActionGroup = function(vActionGroup) { return new sap.ui.core.Item(); };

/**
 * Removes all the controls from the aggregation {@link #getActionGroups actionGroups}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Item[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.removeAllActionGroups = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getActions actions}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Item[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.removeAllActions = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.SelectionDetailsItem[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.m.SelectionDetailsItem} vItem The item to remove or its index or id
 * @returns {sap.m.SelectionDetailsItem} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.removeItem = function(vItem) { return new sap.m.SelectionDetailsItem(); };

/**
 * Sets the popover to modal or non-modal based on the given parameter. This only takes effect on desktop or tablet.
 * Please see the documentation {@link sap.m.ResponsivePopover#modal}.
 * @param {boolean} modal New value for property modal of the internally used popover.
 * @returns {sap.m.SelectionDetails} To ensure method chaining, return the SelectionDetails.
 * @protected
 * 
 */
sap.m.SelectionDetails.prototype.setPopoverModal = function(modal) { return new sap.m.SelectionDetails(); };

/**
 * Unbinds aggregation {@link #getItems items} from model data.
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetails.prototype.unbindItems = function() { return new sap.m.SelectionDetails(); };


// ---- sap.m.SelectionDetailsActionLevel --------------------------------------------------------------------------


// ---- sap.m.SelectionDetailsFacade --------------------------------------------------------------------------

/**
 * Describes the public facade of the {@link sap.m.SelectionDetails} control.
 * @class The public facade of the {@link sap.m.SelectionDetails} control
 * @extends sap.ui.base.Interface
 * @since 1.48.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * @public
 * @version 1.48.4
 * @borrows sap.ui.core.Element#addCustomData as addCustomData
 * @borrows sap.ui.core.Element#getCustomData as getCustomData
 * @borrows sap.ui.core.Element#indexOfCustomData as indexOfCustomData
 * @borrows sap.ui.core.Element#insertCustomData as insertCustomData
 * @borrows sap.ui.core.Element#removeCustomData as removeCustomData
 * @borrows sap.ui.core.Element#removeAllCustomData as removeAllCustomData
 * @borrows sap.ui.core.Element#destroyCustomData as destroyCustomData
 * @borrows sap.ui.core.Element#data as data
 * @borrows sap.ui.core.Element#addEventDelegate as addEventDelegate
 * @borrows sap.ui.core.Element#removeEventDelegate as removeEventDelegate
 * @borrows sap.m.SelectionDetails#attachBeforeOpen as attachBeforeOpen
 * @borrows sap.m.SelectionDetails#detachBeforeOpen as detachBeforeOpen
 * @borrows sap.m.SelectionDetails#attachBeforeClose as attachBeforeClose
 * @borrows sap.m.SelectionDetails#detachBeforeClose as detachBeforeClose
 * @borrows sap.m.SelectionDetails#attachNavigate as attachNavigate
 * @borrows sap.m.SelectionDetails#detachNavigate as detachNavigate
 * @borrows sap.m.SelectionDetails#attachActionPress as attachActionPress
 * @borrows sap.m.SelectionDetails#detachActionPress as detachActionPress
 * @borrows sap.m.SelectionDetails#addAction as addAction
 * @borrows sap.m.SelectionDetails#removeAction as removeAction
 * @borrows sap.m.SelectionDetails#removeAllActions as removeAllActions
 * @borrows sap.m.SelectionDetails#addActionGroup as addActionGroup
 * @borrows sap.m.SelectionDetails#removeActionGroup as removeActionGroup
 * @borrows sap.m.SelectionDetails#removeAllActionGroups as removeAllActionGroups
 * 
 */
sap.m.SelectionDetailsFacade = function() {};
/**
 * Adds some action to the aggregation {@link #getActions actions}.
 * @param {sap.ui.core.Item}
 *            oAction the action to add; if empty, nothing is inserted
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.addAction = function(oAction) { return new sap.m.SelectionDetails(); };

/**
 * Adds some actionGroup to the aggregation {@link #getActionGroups actionGroups}.
 * @param {sap.ui.core.Item}
 *            oActionGroup the actionGroup to add; if empty, nothing is inserted
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.addActionGroup = function(oActionGroup) { return new sap.m.SelectionDetails(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:actionPress actionPress} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.
 * 
 * Event is triggered when a custom action is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself
 * 
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.attachActionPress = function(oData,fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeClose beforeClose} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.
 * 
 * Event is triggered before the popover is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself
 * 
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.attachBeforeClose = function(oData,fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.
 * 
 * Event is triggered before the popover is open.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself
 * 
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.attachBeforeOpen = function(oData,fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:navigate navigate} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SelectionDetails</code> itself.
 * 
 * Event is triggered after a list item of {@link sap.m.SelectionDetailsItem} is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectionDetails</code> itself
 * 
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.attachNavigate = function(oData,fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Closes SelectionDetails if open.
 * @returns {sap.m.SelectionDetails} To ensure method chaining, return the SelectionDetails.
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.prototype.close = function() { return new sap.m.SelectionDetails(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:actionPress actionPress} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.detachActionPress = function(fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeClose beforeClose} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.detachBeforeClose = function(fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeOpen beforeOpen} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.detachBeforeOpen = function(fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:navigate navigate} event of this <code>sap.m.SelectionDetails</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SelectionDetails} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.detachNavigate = function(fnFunction,oListener) { return new sap.m.SelectionDetails(); };

/**
 * Returns true if the SelectionDetails is enabled, otherwise false.
 * @returns {boolean} True if the SelectionDetails contains items, otherwise false.
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.prototype.isEnabled = function() { return false; };

/**
 * Returns true if the SelectionDetails is open, otherwise false.
 * @returns {boolean} True if the SelectionDetails is open, otherwise false.
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.prototype.isOpen = function() { return false; };

/**
 * Wraps the given content in {@link sap.m.Page page}, adds it to existing {@link sap.m.NavContainer NavContainer} and navigates to this newly created page.
 * Has no effect if the SelectionDetails is closed.
 * Lazily processes dependencies for the navigation event.
 * 
 * @param {string} title The title property of the {@link sap.m.Page page} control to which the navigation should occur.
 * @param {sap.ui.core.Control} content The content of the control to which the navigation should occur.
 * @returns {sap.m.SelectionDetails} To ensure method chaining, return the SelectionDetails.
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.prototype.navTo = function(title,content) { return new sap.m.SelectionDetails(); };

/**
 * Removes a action from the aggregation {@link #getActions actions}.
 * 
 * @param {int | string | sap.ui.core.Item} vAction The action to remove or its index or id
 * @returns {sap.ui.core.Item} The removed action or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.removeAction = function(vAction) { return new sap.ui.core.Item(); };

/**
 * Removes a actionGroup from the aggregation {@link #getActionGroups actionGroups}.
 * 
 * @param {int | string | sap.ui.core.Item} vActionGroup The actionGroup to remove or its index or id
 * @returns {sap.ui.core.Item} The removed actionGroup or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.removeActionGroup = function(vActionGroup) { return new sap.ui.core.Item(); };

/**
 * Removes all the controls from the aggregation {@link #getActionGroups actionGroups}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Item[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.removeAllActionGroups = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getActions actions}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Item[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsFacade.removeAllActions = function() { return new Array(); };


// ---- sap.m.SelectionDetailsItem --------------------------------------------------------------------------

/**
 * Constructor for a new SelectionDetailsItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnableNav enableNav} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getLines lines} : sap.m.SelectionDetailsItemLine[]</li>
 * <li>{@link #getActions actions} : sap.ui.core.Item[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] Id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * This protected Element provides an item for {@link sap.m.SelectionDetails} that is shown inside a list.
 * The item includes SelectionDetailsItemLine as its lines that are displayed in one block above the optional actions.
 * <b><i>Note:<i></b>It is protected and should ony be used within the framework itself.
 * 
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @protected
 * @since 1.48.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SelectionDetailsItem = function(sId,mSettings) {};
/**
 * Adds some action to the aggregation {@link #getActions actions}.
 * @param {sap.ui.core.Item}
 *            oAction the action to add; if empty, nothing is inserted
 * @returns {sap.m.SelectionDetailsItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.addAction = function(oAction) { return new sap.m.SelectionDetailsItem(); };

/**
 * Adds some line to the aggregation {@link #getLines lines}.
 * @param {sap.m.SelectionDetailsItemLine}
 *            oLine the line to add; if empty, nothing is inserted
 * @returns {sap.m.SelectionDetailsItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.addLine = function(oLine) { return new sap.m.SelectionDetailsItem(); };

/**
 * Binds aggregation {@link #getLines lines} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.SelectionDetailsItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.bindLines = function(oBindingInfo) { return new sap.m.SelectionDetailsItem(); };

/**
 * Destroys all the actions in the aggregation {@link #getActions actions}.
 * @returns {sap.m.SelectionDetailsItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.destroyActions = function() { return new sap.m.SelectionDetailsItem(); };

/**
 * Destroys all the lines in the aggregation {@link #getLines lines}.
 * @returns {sap.m.SelectionDetailsItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.destroyLines = function() { return new sap.m.SelectionDetailsItem(); };

/**
 * Creates a new subclass of class sap.m.SelectionDetailsItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SelectionDetailsItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getActions actions}.
 * 
 * Contains custom actions shown below the main content of the item.
 * 
 * @returns {sap.ui.core.Item[]}
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.getActions = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEnableNav enableNav}.
 * 
 * Determines whether or not the item is active and a navigation event is triggered on press.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableNav</code>
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.getEnableNav = function() { return false; };

/**
 * Returns the public facade of the SelectionDetailsItem for non inner framework usages.
 * @returns {sap.ui.base.Interface} The reduced facade for outer framework usages.
 * @protected
 * 
 */
sap.m.SelectionDetailsItem.prototype.getFacade = function() { return new sap.ui.base.Interface(); };

/**
 * Gets content of aggregation {@link #getLines lines}.
 * 
 * Contains a record of information about, for example, measures and dimensions.
 * These entries are usually obtained via selection in chart controls.
 * 
 * @returns {sap.m.SelectionDetailsItemLine[]}
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.getLines = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.SelectionDetailsItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.SelectionDetailsItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation {@link #getActions actions}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oAction The action whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.indexOfAction = function(oAction) { return 0; };

/**
 * Checks for the provided <code>sap.m.SelectionDetailsItemLine</code> in the aggregation {@link #getLines lines}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.SelectionDetailsItemLine}
 *           oLine The line whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.indexOfLine = function(oLine) { return 0; };

/**
 * Inserts a action into the aggregation {@link #getActions actions}.
 * 
 * @param {sap.ui.core.Item}
 *            oAction the action to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the action should be inserted at; for
 *              a negative value of <code>iIndex</code>, the action is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the action is inserted at
 *              the last position
 * @returns {sap.m.SelectionDetailsItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.insertAction = function(oAction,iIndex) { return new sap.m.SelectionDetailsItem(); };

/**
 * Inserts a line into the aggregation {@link #getLines lines}.
 * 
 * @param {sap.m.SelectionDetailsItemLine}
 *            oLine the line to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the line should be inserted at; for
 *              a negative value of <code>iIndex</code>, the line is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the line is inserted at
 *              the last position
 * @returns {sap.m.SelectionDetailsItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.insertLine = function(oLine,iIndex) { return new sap.m.SelectionDetailsItem(); };

/**
 * Removes a action from the aggregation {@link #getActions actions}.
 * 
 * @param {int | string | sap.ui.core.Item} vAction The action to remove or its index or id
 * @returns {sap.ui.core.Item} The removed action or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.removeAction = function(vAction) { return new sap.ui.core.Item(); };

/**
 * Removes all the controls from the aggregation {@link #getActions actions}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Item[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.removeAllActions = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getLines lines}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.SelectionDetailsItemLine[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.removeAllLines = function() { return new Array(); };

/**
 * Removes a line from the aggregation {@link #getLines lines}.
 * 
 * @param {int | string | sap.m.SelectionDetailsItemLine} vLine The line to remove or its index or id
 * @returns {sap.m.SelectionDetailsItemLine} The removed line or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.removeLine = function(vLine) { return new sap.m.SelectionDetailsItemLine(); };

/**
 * Sets a new value for property {@link #getEnableNav enableNav}.
 * 
 * Determines whether or not the item is active and a navigation event is triggered on press.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableNav New value for property <code>enableNav</code>
 * @returns {sap.m.SelectionDetailsItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.setEnableNav = function(bEnableNav) { return new sap.m.SelectionDetailsItem(); };

/**
 * Unbinds aggregation {@link #getLines lines} from model data.
 * @returns {sap.m.SelectionDetailsItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItem.prototype.unbindLines = function() { return new sap.m.SelectionDetailsItem(); };


// ---- sap.m.SelectionDetailsItemFacade --------------------------------------------------------------------------

/**
 * Describes the public facade of the {@link SelectionDetailsItems} element.
 * @class The public facade of the {@link SelectionDetailsItems} element
 * @extends sap.ui.base.Interface
 * @since 1.48.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * @public
 * @version 1.48.4
 * @borrows sap.ui.core.Element#addCustomData as addCustomData
 * @borrows sap.ui.core.Element#getCustomData as getCustomData
 * @borrows sap.ui.core.Element#indexOfCustomData as indexOfCustomData
 * @borrows sap.ui.core.Element#insertCustomData as insertCustomData
 * @borrows sap.ui.core.Element#removeCustomData as removeCustomData
 * @borrows sap.ui.core.Element#removeAllCustomData as removeAllCustomData
 * @borrows sap.ui.core.Element#destroyCustomData as destroyCustomData
 * @borrows sap.ui.core.Element#data as data
 * @borrows sap.ui.core.Element#addEventDelegate as addEventDelegate
 * @borrows sap.ui.core.Element#removeEventDelegate as removeEventDelegate
 * @borrows sap.m.SelectionDetailsItem#setEnableNav as setEnableNav
 * @borrows sap.m.SelectionDetailsItem#getEnableNav as getEnableNav
 * @borrows sap.m.SelectionDetailsItem#addAction as addAction
 * @borrows sap.m.SelectionDetailsItem#removeAction as removeAction
 * 
 */
sap.m.SelectionDetailsItemFacade = function() {};
/**
 * Adds some action to the aggregation {@link #getActions actions}.
 * @param {sap.ui.core.Item}
 *            oAction the action to add; if empty, nothing is inserted
 * @returns {sap.m.SelectionDetailsItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItemFacade.addAction = function(oAction) { return new sap.m.SelectionDetailsItem(); };

/**
 * Gets current value of property {@link #getEnableNav enableNav}.
 * 
 * Determines whether or not the item is active and a navigation event is triggered on press.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableNav</code>
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItemFacade.getEnableNav = function() { return false; };

/**
 * Removes a action from the aggregation {@link #getActions actions}.
 * 
 * @param {int | string | sap.ui.core.Item} vAction The action to remove or its index or id
 * @returns {sap.ui.core.Item} The removed action or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItemFacade.removeAction = function(vAction) { return new sap.ui.core.Item(); };

/**
 * Sets a new value for property {@link #getEnableNav enableNav}.
 * 
 * Determines whether or not the item is active and a navigation event is triggered on press.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableNav New value for property <code>enableNav</code>
 * @returns {sap.m.SelectionDetailsItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItemFacade.setEnableNav = function(bEnableNav) { return new sap.m.SelectionDetailsItem(); };


// ---- sap.m.SelectionDetailsItemLine --------------------------------------------------------------------------

/**
 * Constructor for a new SelectionDetailsItemLine.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getDisplayValue displayValue} : string</li>
 * <li>{@link #getUnit unit} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] Id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * This Element provides a means to fill an {@link sap.m.SelectionDetailsItem} with content.
 * It is used for a form-like display of a label followed by a value with an optional unit.
 * If the unit is used, the value is displayed bold.
 * <b><i>Note:<i></b>It is protected and should ony be used within the framework itself.
 * 
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @protected
 * @since 1.48.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SelectionDetailsItemLine = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.SelectionDetailsItemLine with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SelectionDetailsItemLine.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getDisplayValue displayValue}.
 * 
 * The display value of the line. If this property is set, it overrides the value property and is displayed as is.
 * 
 * @returns {string} Value of property <code>displayValue</code>
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItemLine.prototype.getDisplayValue = function() { return ""; };

/**
 * Gets current value of property {@link #getLabel label}.
 * 
 * The label that is shown as the first part of the line.
 * It may contain the name of the currently selected dimension or measure.
 * 
 * @returns {string} Value of property <code>label</code>
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItemLine.prototype.getLabel = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.SelectionDetailsItemLine.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.SelectionDetailsItemLine.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getUnit unit}.
 * 
 * The unit of the given value. If this unit is given, the line is displayed bold.
 * 
 * @returns {string} Value of property <code>unit</code>
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItemLine.prototype.getUnit = function() { return ""; };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * The value of the line, for example the value of the currently selected measure.
 * 
 * @returns {string} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItemLine.prototype.getValue = function() { return ""; };

/**
 * Sets a new value for property {@link #getDisplayValue displayValue}.
 * 
 * The display value of the line. If this property is set, it overrides the value property and is displayed as is.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sDisplayValue New value for property <code>displayValue</code>
 * @returns {sap.m.SelectionDetailsItemLine} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItemLine.prototype.setDisplayValue = function(sDisplayValue) { return new sap.m.SelectionDetailsItemLine(); };

/**
 * Sets a new value for property {@link #getLabel label}.
 * 
 * The label that is shown as the first part of the line.
 * It may contain the name of the currently selected dimension or measure.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sLabel New value for property <code>label</code>
 * @returns {sap.m.SelectionDetailsItemLine} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItemLine.prototype.setLabel = function(sLabel) { return new sap.m.SelectionDetailsItemLine(); };

/**
 * Sets a new value for property {@link #getUnit unit}.
 * 
 * The unit of the given value. If this unit is given, the line is displayed bold.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sUnit New value for property <code>unit</code>
 * @returns {sap.m.SelectionDetailsItemLine} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItemLine.prototype.setUnit = function(sUnit) { return new sap.m.SelectionDetailsItemLine(); };

/**
 * Sets a new value for property {@link #getValue value}.
 * 
 * The value of the line, for example the value of the currently selected measure.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sValue New value for property <code>value</code>
 * @returns {sap.m.SelectionDetailsItemLine} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectionDetailsItemLine.prototype.setValue = function(sValue) { return new sap.m.SelectionDetailsItemLine(); };


// ---- sap.m.SelectList --------------------------------------------------------------------------

/**
 * Constructor for a new <code>sap.m.SelectList</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: auto)</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getSelectedKey selectedKey} : string (default: )</li>
 * <li>{@link #getSelectedItemId selectedItemId} : string (default: )</li>
 * <li>{@link #getShowSecondaryValues showSecondaryValues} : boolean (default: false)</li>
 * <li>{@link #getKeyboardNavigationMode keyboardNavigationMode} : sap.m.SelectListKeyboardNavigationMode (default: Delimited)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Item[] (default)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedItem selectedItem} : (sap.ui.core.ID | sap.ui.core.Item)</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:selectionChange selectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:itemPress itemPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given.
 * @param {object} [mSettings] Initial settings for the new control.
 * 
 * @class
 * The <code>sap.m.SelectList</code> displays a list of items that allows the user to select an item.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.26.0
 * @ui5-metamodel This control will also be described in the UI5 (legacy) design time meta model.
 * 
 */
sap.m.SelectList = function(sId,mSettings) {};
/**
 * This event is fired when an item is pressed.
 * @event
 * @since 1.32.4
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.item The pressed item.
 * @public
 * 
 */
sap.m.SelectList.prototype.itemPress = function(oControlEvent) {  };

/**
 * This event is fired when the selection has changed.
 * 
 * <b>Note: </b> The selection can be changed by pressing a non-selected item or
 * via keyboard and after the enter or space key is pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem The selected item.
 * @public
 * 
 */
sap.m.SelectList.prototype.selectionChange = function(oControlEvent) {  };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.SelectList(); };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.ui.core.Item}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.addItem = function(oItem) { return new sap.m.SelectList(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:itemPress itemPress} event of this <code>sap.m.SelectList</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SelectList</code> itself.
 * 
 * This event is fired when an item is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectList</code> itself
 * 
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.32.4
 * 
 */
sap.m.SelectList.prototype.attachItemPress = function(oData,fnFunction,oListener) { return new sap.m.SelectList(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:selectionChange selectionChange} event of this <code>sap.m.SelectList</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SelectList</code> itself.
 * 
 * This event is fired when the selection has changed.
 * 
 * <b>Note: </b> The selection can be changed by pressing a non-selected item or
 * via keyboard and after the enter or space key is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SelectList</code> itself
 * 
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SelectList.prototype.attachSelectionChange = function(oData,fnFunction,oListener) { return new sap.m.SelectList(); };

/**
 * Binds aggregation {@link #getItems items} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.bindItems = function(oBindingInfo) { return new sap.m.SelectList(); };

/**
 * Clear the selection.
 * 
 * @protected
 * 
 */
sap.m.SelectList.prototype.clearSelection = function() {  };

/**
 * Destroys all the items in the aggregation named <code>items</code>.
 * 
 * @returns {sap.m.SelectList} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.SelectList.prototype.destroyItems = function() { return new sap.m.SelectList(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:itemPress itemPress} event of this <code>sap.m.SelectList</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.4
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.detachItemPress = function(fnFunction,oListener) { return new sap.m.SelectList(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:selectionChange selectionChange} event of this <code>sap.m.SelectList</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.detachSelectionChange = function(fnFunction,oListener) { return new sap.m.SelectList(); };

/**
 * Creates a new subclass of class sap.m.SelectList with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SelectList.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:itemPress itemPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Item} [mParameters.item] The pressed item.
 * 
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.32.4
 * 
 */
sap.m.SelectList.prototype.fireItemPress = function(mParameters) { return new sap.m.SelectList(); };

/**
 * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Item} [mParameters.selectedItem] The selected item.
 * 
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SelectList.prototype.fireSelectionChange = function(mParameters) { return new sap.m.SelectList(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Retrieves the default selected item from the aggregation named <code>items</code>.
 * 
 * @param {sap.ui.core.Item[]} [aItems]
 * @returns {sap.ui.core.Item | null}
 * @protected
 * 
 */
sap.m.SelectList.prototype.getDefaultSelectedItem = function(aItems) { return new sap.ui.core.Item(); };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Indicates whether the user can change the selection.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.getEnabled = function() { return false; };

/**
 * Gets the enabled items from the aggregation named <code>items</code>.
 * 
 * @param {sap.ui.core.Item[]} [aItems=getItems()] items to filter
 * @return {sap.ui.core.Item[]} An array containing the enabled items.
 * @public
 * 
 */
sap.m.SelectList.prototype.getEnabledItems = function(aItems) { return new Array(); };

/**
 * Gets the first item from the aggregation named <code>items</code>.
 * 
 * @returns {sap.ui.core.Item | null} The first item, or null if there are no items.
 * @public
 * 
 */
sap.m.SelectList.prototype.getFirstItem = function() { return new sap.ui.core.Item(); };

/**
 * Gets the item from the aggregation named <code>items</code> at the given 0-based index.
 * 
 * @param {int} iIndex Index of the item to return.
 * @returns {sap.ui.core.Item | null} Item at the given index, or null if none.
 * @public
 * 
 */
sap.m.SelectList.prototype.getItemAt = function(iIndex) { return new sap.ui.core.Item(); };

/**
 * Gets the item with the given key from the aggregation named <code>items</code>.
 * 
 * <b>Note: </b> If duplicate keys exists, the first item matching the key is returned.
 * 
 * @param {string} sKey An item key that specifies the item to retrieve.
 * @returns {sap.ui.core.Item | null}
 * @public
 * 
 */
sap.m.SelectList.prototype.getItemByKey = function(sKey) { return new sap.ui.core.Item(); };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * Defines the items contained within this control.
 * 
 * @returns {sap.ui.core.Item[]}
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.getItems = function() { return new Array(); };

/**
 * Gets current value of property {@link #getKeyboardNavigationMode keyboardNavigationMode}.
 * 
 * Defines the keyboard navigation mode.
 * 
 * <b>Note:</b> The <code>sap.m.SelectListKeyboardNavigationMode.None</code> enumeration value,
 * is only intended for use in some composite controls that handles keyboard navigation by themselves.
 * 
 * Default value is <code>Delimited</code>.
 * @returns {sap.m.SelectListKeyboardNavigationMode} Value of property <code>keyboardNavigationMode</code>
 * @since 1.38
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.getKeyboardNavigationMode = function() { return new sap.m.SelectListKeyboardNavigationMode(); };

/**
 * Gets the enabled items from the aggregation named <code>items</code>.
 * 
 * @returns {sap.ui.core.Item | null} The last item, or null if there are no items.
 * @public
 * 
 */
sap.m.SelectList.prototype.getLastItem = function() { return new sap.ui.core.Item(); };

/**
 * Gets current value of property {@link #getMaxWidth maxWidth}.
 * 
 * Sets the maximum width of the control.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>maxWidth</code>
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.getMaxWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.SelectList.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.SelectList.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets the selected item object from the aggregation named <code>items</code>.
 * 
 * @returns {sap.ui.core.Item | null} The current target of the <code>selectedItem</code> association, or null.
 * @public
 * 
 */
sap.m.SelectList.prototype.getSelectedItem = function() { return new sap.ui.core.Item(); };

/**
 * Gets current value of property {@link #getSelectedItemId selectedItemId}.
 * 
 * ID of the selected item.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>selectedItemId</code>
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.getSelectedItemId = function() { return ""; };

/**
 * Gets current value of property {@link #getSelectedKey selectedKey}.
 * 
 * Key of the selected item.
 * 
 * <b>Note: </b> If duplicate keys exist, the first item matching the key is used.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>selectedKey</code>
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.getSelectedKey = function() { return ""; };

/**
 * Gets current value of property {@link #getShowSecondaryValues showSecondaryValues}.
 * 
 * Indicates whether the text values of the <code>additionalText</code> property of a
 * {@link sap.ui.core.ListItem} are shown.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showSecondaryValues</code>
 * @since 1.32.3
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.getShowSecondaryValues = function() { return false; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Sets the width of the control.
 * 
 * Default value is <code>auto</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.ui.core.Item}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.insertItem = function(oItem,iIndex) { return new sap.m.SelectList(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all the items in the aggregation named <code>items</code>.
 * Additionally unregisters them from the hosting UIArea.
 * 
 * @returns {sap.ui.core.Item[]} An array of the removed items (might be empty).
 * @public
 * 
 */
sap.m.SelectList.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * 
 * @param {int | string | sap.ui.core.Item} vItem The item to remove or its index or id.
 * @returns {sap.ui.core.Item} The removed item or null.
 * @public
 * 
 */
sap.m.SelectList.prototype.removeItem = function(vItem) { return new sap.ui.core.Item(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Indicates whether the user can change the selection.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.setEnabled = function(bEnabled) { return new sap.m.SelectList(); };

/**
 * Sets a new value for property {@link #getKeyboardNavigationMode keyboardNavigationMode}.
 * 
 * Defines the keyboard navigation mode.
 * 
 * <b>Note:</b> The <code>sap.m.SelectListKeyboardNavigationMode.None</code> enumeration value,
 * is only intended for use in some composite controls that handles keyboard navigation by themselves.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Delimited</code>.
 * @param {sap.m.SelectListKeyboardNavigationMode} sKeyboardNavigationMode New value for property <code>keyboardNavigationMode</code>
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.setKeyboardNavigationMode = function(sKeyboardNavigationMode) { return new sap.m.SelectList(); };

/**
 * Sets a new value for property {@link #getMaxWidth maxWidth}.
 * 
 * Sets the maximum width of the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sMaxWidth New value for property <code>maxWidth</code>
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.setMaxWidth = function(sMaxWidth) { return new sap.m.SelectList(); };

/**
 * Sets the <code>selectedItem</code> association.
 * 
 * @param {string | sap.ui.core.Item | null} vItem New value for the <code>selectedItem</code> association.
 * If an ID of a <code>sap.ui.core.Item</code> is given, the item with this ID becomes the <code>selectedItem</code> association.
 * Alternatively, a <code>sap.ui.core.Item</code> instance may be given or <code>null</code> to clear the selection.
 * 
 * @returns {sap.m.SelectList} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.SelectList.prototype.setSelectedItem = function(vItem) { return new sap.m.SelectList(); };

/**
 * Sets property <code>selectedItemId</code>.
 * 
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * 
 * @param {string | undefined} vItem New value for property <code>selectedItemId</code>.
 * @returns {sap.m.SelectList} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.SelectList.prototype.setSelectedItemId = function(vItem) { return new sap.m.SelectList(); };

/**
 * Sets property <code>selectedKey</code>.
 * 
 * Default value is an empty string <code>""</code> or <code>undefined</code>.
 * 
 * @param {string} sKey New value for property <code>selectedKey</code>.
 * @returns {sap.m.SelectList} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.SelectList.prototype.setSelectedKey = function(sKey) { return new sap.m.SelectList(); };

/**
 * Updates and synchronizes <code>selectedItem</code> association, <code>selectedItemId</code> and <code>selectedKey</code> properties.
 * 
 * @param {string | sap.ui.core.Item | null} vItem
 * @protected
 * 
 */
sap.m.SelectList.prototype.setSelection = function(vItem) {  };

/**
 * Sets a new value for property {@link #getShowSecondaryValues showSecondaryValues}.
 * 
 * Indicates whether the text values of the <code>additionalText</code> property of a
 * {@link sap.ui.core.ListItem} are shown.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowSecondaryValues New value for property <code>showSecondaryValues</code>
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.3
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.setShowSecondaryValues = function(bShowSecondaryValues) { return new sap.m.SelectList(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Sets the width of the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.setWidth = function(sWidth) { return new sap.m.SelectList(); };

/**
 * Unbinds aggregation {@link #getItems items} from model data.
 * @returns {sap.m.SelectList} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SelectList.prototype.unbindItems = function() { return new sap.m.SelectList(); };


// ---- sap.m.SelectListKeyboardNavigationMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.SelectListKeyboardNavigationMode.toString = function() { return ""; };

// ---- sap.m.SelectType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.SelectType.toString = function() { return ""; };

// ---- sap.m.semantic.AddAction --------------------------------------------------------------------------

/**
 * Constructor for a new AddAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * An AddAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * See {@link sap.m.semantic.MasterPage#addAction}, {@link sap.m.semantic.FullscreenPage#addAction}, {@link sap.m.semantic.DetailPage#addAction}
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.AddAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.AddAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.AddAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.AddAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.AddAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.CancelAction --------------------------------------------------------------------------

/**
 * Constructor for a new CancelAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A CancelAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.CancelAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.CancelAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.CancelAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.CancelAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.CancelAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.DeleteAction --------------------------------------------------------------------------

/**
 * Constructor for a new DeleteAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A DeleteAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.36
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.DeleteAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.DeleteAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.DeleteAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.DeleteAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.DeleteAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.DetailPage --------------------------------------------------------------------------

/**
 * Constructor for a new DetailPage
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAddAction addAction} : sap.m.semantic.AddAction</li>
 * <li>{@link #getMainAction mainAction} : sap.m.semantic.MainAction</li>
 * <li>{@link #getPositiveAction positiveAction} : sap.m.semantic.PositiveAction</li>
 * <li>{@link #getNegativeAction negativeAction} : sap.m.semantic.NegativeAction</li>
 * <li>{@link #getForwardAction forwardAction} : sap.m.semantic.ForwardAction</li>
 * <li>{@link #getEditAction editAction} : sap.m.semantic.EditAction</li>
 * <li>{@link #getSaveAction saveAction} : sap.m.semantic.SaveAction</li>
 * <li>{@link #getDeleteAction deleteAction} : sap.m.semantic.DeleteAction</li>
 * <li>{@link #getCancelAction cancelAction} : sap.m.semantic.CancelAction</li>
 * <li>{@link #getFlagAction flagAction} : sap.m.semantic.FlagAction</li>
 * <li>{@link #getFavoriteAction favoriteAction} : sap.m.semantic.FavoriteAction</li>
 * <li>{@link #getOpenInAction openInAction} : sap.m.semantic.OpenInAction</li>
 * <li>{@link #getDiscussInJamAction discussInJamAction} : sap.m.semantic.DiscussInJamAction</li>
 * <li>{@link #getShareInJamAction shareInJamAction} : sap.m.semantic.ShareInJamAction</li>
 * <li>{@link #getSendEmailAction sendEmailAction} : sap.m.semantic.SendEmailAction</li>
 * <li>{@link #getSendMessageAction sendMessageAction} : sap.m.semantic.SendMessageAction</li>
 * <li>{@link #getPrintAction printAction} : sap.m.semantic.PrintAction</li>
 * <li>{@link #getMessagesIndicator messagesIndicator} : sap.m.semantic.MessagesIndicator</li>
 * <li>{@link #getSaveAsTileAction saveAsTileAction} : sap.m.Button</li>
 * <li>{@link #getPagingAction pagingAction} : sap.m.PagingButton</li>
 * <li>{@link #getDraftIndicator draftIndicator} : sap.m.DraftIndicator</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.semantic.ShareMenuPage#constructor sap.m.semantic.ShareMenuPage}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A DetailPage is a {@link sap.m.semantic.ShareMenuPage} that supports semantic content of the following types:
 * 
 * <ul>
 * 	<li>{@link sap.m.semantic.AddAction}</li>
 * 	<li>{@link sap.m.semantic.MainAction}</li>
 * 	<li>{@link sap.m.semantic.PositiveAction}</li>
 * 	<li>{@link sap.m.semantic.NegativeAction}</li>
 * 	<li>{@link sap.m.semantic.ForwardAction}</li>
 * 	<li>{@link sap.m.semantic.EditAction}</li>
 * 	<li>{@link sap.m.semantic.SaveAction}</li>
 * 	<li>{@link sap.m.semantic.DeleteAction}</li>
 * 	<li>{@link sap.m.semantic.CancelAction}</li>
 * 	<li>{@link sap.m.semantic.FlagAction}</li>
 * 	<li>{@link sap.m.semantic.FavoriteAction}</li>
 * 	<li>{@link sap.m.semantic.OpenInAction}</li>
 * 	<li>{@link sap.m.semantic.DiscussInJamAction}</li>
 * 	<li>{@link sap.m.semantic.ShareInJamAction}</li>
 * 	<li>{@link sap.m.semantic.SendEmailAction}</li>
 * 	<li>{@link sap.m.semantic.SendMessageAction}</li>
 * 	<li>{@link sap.m.semantic.PrintAction}</li>
 * 	<li>{@link sap.m.semantic.MessagesIndicator}</li>
 * 	<li>{@link sap.m.DraftIndicator}</li>
 * </ul>
 * 
 * 
 * @extends sap.m.semantic.ShareMenuPage
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.DetailPage = function(sId,mSettings) {};
/**
 * Destroys the addAction in the aggregation {@link #getAddAction addAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyAddAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the cancelAction in the aggregation {@link #getCancelAction cancelAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyCancelAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the deleteAction in the aggregation {@link #getDeleteAction deleteAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyDeleteAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the discussInJamAction in the aggregation {@link #getDiscussInJamAction discussInJamAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyDiscussInJamAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the draftIndicator in the aggregation {@link #getDraftIndicator draftIndicator}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyDraftIndicator = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the editAction in the aggregation {@link #getEditAction editAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyEditAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the favoriteAction in the aggregation {@link #getFavoriteAction favoriteAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyFavoriteAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the flagAction in the aggregation {@link #getFlagAction flagAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyFlagAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the forwardAction in the aggregation {@link #getForwardAction forwardAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyForwardAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the mainAction in the aggregation {@link #getMainAction mainAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyMainAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the messagesIndicator in the aggregation {@link #getMessagesIndicator messagesIndicator}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyMessagesIndicator = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the negativeAction in the aggregation {@link #getNegativeAction negativeAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyNegativeAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the openInAction in the aggregation {@link #getOpenInAction openInAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyOpenInAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the pagingAction in the aggregation {@link #getPagingAction pagingAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyPagingAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the positiveAction in the aggregation {@link #getPositiveAction positiveAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyPositiveAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the printAction in the aggregation {@link #getPrintAction printAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyPrintAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the saveAction in the aggregation {@link #getSaveAction saveAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroySaveAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the saveAsTileAction in the aggregation {@link #getSaveAsTileAction saveAsTileAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroySaveAsTileAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the sendEmailAction in the aggregation {@link #getSendEmailAction sendEmailAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroySendEmailAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the sendMessageAction in the aggregation {@link #getSendMessageAction sendMessageAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroySendMessageAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Destroys the shareInJamAction in the aggregation {@link #getShareInJamAction shareInJamAction}.
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.destroyShareInJamAction = function() { return new sap.m.semantic.DetailPage(); };

/**
 * Creates a new subclass of class sap.m.semantic.DetailPage with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.ShareMenuPage.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.DetailPage.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getAddAction addAction}.
 * 
 * Add action
 * 
 * @returns {sap.m.semantic.AddAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getAddAction = function() { return new sap.m.semantic.AddAction(); };

/**
 * Gets content of aggregation {@link #getCancelAction cancelAction}.
 * 
 * Cancel action
 * 
 * @returns {sap.m.semantic.CancelAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getCancelAction = function() { return new sap.m.semantic.CancelAction(); };

/**
 * Gets content of aggregation {@link #getDeleteAction deleteAction}.
 * 
 * Delete action
 * 
 * @returns {sap.m.semantic.DeleteAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getDeleteAction = function() { return new sap.m.semantic.DeleteAction(); };

/**
 * Gets content of aggregation {@link #getDiscussInJamAction discussInJamAction}.
 * 
 * DiscussInJam action
 * 
 * @returns {sap.m.semantic.DiscussInJamAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getDiscussInJamAction = function() { return new sap.m.semantic.DiscussInJamAction(); };

/**
 * Gets content of aggregation {@link #getDraftIndicator draftIndicator}.
 * 
 * DraftIndicator
 * 
 * @returns {sap.m.DraftIndicator}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getDraftIndicator = function() { return new sap.m.DraftIndicator(); };

/**
 * Gets content of aggregation {@link #getEditAction editAction}.
 * 
 * Edit action
 * 
 * @returns {sap.m.semantic.EditAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getEditAction = function() { return new sap.m.semantic.EditAction(); };

/**
 * Gets content of aggregation {@link #getFavoriteAction favoriteAction}.
 * 
 * Favorite action
 * 
 * @returns {sap.m.semantic.FavoriteAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getFavoriteAction = function() { return new sap.m.semantic.FavoriteAction(); };

/**
 * Gets content of aggregation {@link #getFlagAction flagAction}.
 * 
 * Flag action
 * 
 * @returns {sap.m.semantic.FlagAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getFlagAction = function() { return new sap.m.semantic.FlagAction(); };

/**
 * Gets content of aggregation {@link #getForwardAction forwardAction}.
 * 
 * Negative action
 * 
 * @returns {sap.m.semantic.ForwardAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getForwardAction = function() { return new sap.m.semantic.ForwardAction(); };

/**
 * Gets content of aggregation {@link #getMainAction mainAction}.
 * 
 * Main action
 * 
 * @returns {sap.m.semantic.MainAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getMainAction = function() { return new sap.m.semantic.MainAction(); };

/**
 * Gets content of aggregation {@link #getMessagesIndicator messagesIndicator}.
 * 
 * MessagesIndicator
 * 
 * @returns {sap.m.semantic.MessagesIndicator}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getMessagesIndicator = function() { return new sap.m.semantic.MessagesIndicator(); };

/**
 * Returns a metadata object for class sap.m.semantic.DetailPage.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.DetailPage.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getNegativeAction negativeAction}.
 * 
 * Negative action
 * 
 * @returns {sap.m.semantic.NegativeAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getNegativeAction = function() { return new sap.m.semantic.NegativeAction(); };

/**
 * Gets content of aggregation {@link #getOpenInAction openInAction}.
 * 
 * OpenIn action
 * 
 * @returns {sap.m.semantic.OpenInAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getOpenInAction = function() { return new sap.m.semantic.OpenInAction(); };

/**
 * Gets content of aggregation {@link #getPagingAction pagingAction}.
 * 
 * Paging action
 * 
 * @returns {sap.m.PagingButton}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getPagingAction = function() { return new sap.m.PagingButton(); };

/**
 * Gets content of aggregation {@link #getPositiveAction positiveAction}.
 * 
 * Positive action
 * 
 * @returns {sap.m.semantic.PositiveAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getPositiveAction = function() { return new sap.m.semantic.PositiveAction(); };

/**
 * Gets content of aggregation {@link #getPrintAction printAction}.
 * 
 * Print action
 * 
 * @returns {sap.m.semantic.PrintAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getPrintAction = function() { return new sap.m.semantic.PrintAction(); };

/**
 * Gets content of aggregation {@link #getSaveAction saveAction}.
 * 
 * Save action
 * 
 * @returns {sap.m.semantic.SaveAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getSaveAction = function() { return new sap.m.semantic.SaveAction(); };

/**
 * Gets content of aggregation {@link #getSaveAsTileAction saveAsTileAction}.
 * 
 * SaveAsTile button
 * 
 * @returns {sap.m.Button}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getSaveAsTileAction = function() { return new sap.m.Button(); };

/**
 * Gets content of aggregation {@link #getSendEmailAction sendEmailAction}.
 * 
 * SendEmail action
 * 
 * @returns {sap.m.semantic.SendEmailAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getSendEmailAction = function() { return new sap.m.semantic.SendEmailAction(); };

/**
 * Gets content of aggregation {@link #getSendMessageAction sendMessageAction}.
 * 
 * SendMessage action
 * 
 * @returns {sap.m.semantic.SendMessageAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getSendMessageAction = function() { return new sap.m.semantic.SendMessageAction(); };

/**
 * Gets content of aggregation {@link #getShareInJamAction shareInJamAction}.
 * 
 * ShareInJam action
 * 
 * @returns {sap.m.semantic.ShareInJamAction}
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.getShareInJamAction = function() { return new sap.m.semantic.ShareInJamAction(); };

/**
 * Sets the aggregated {@link #getAddAction addAction}.
 * @param {sap.m.semantic.AddAction} oAddAction The addAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setAddAction = function(oAddAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getCancelAction cancelAction}.
 * @param {sap.m.semantic.CancelAction} oCancelAction The cancelAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setCancelAction = function(oCancelAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getDeleteAction deleteAction}.
 * @param {sap.m.semantic.DeleteAction} oDeleteAction The deleteAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setDeleteAction = function(oDeleteAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getDiscussInJamAction discussInJamAction}.
 * @param {sap.m.semantic.DiscussInJamAction} oDiscussInJamAction The discussInJamAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setDiscussInJamAction = function(oDiscussInJamAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getDraftIndicator draftIndicator}.
 * @param {sap.m.DraftIndicator} oDraftIndicator The draftIndicator to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setDraftIndicator = function(oDraftIndicator) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getEditAction editAction}.
 * @param {sap.m.semantic.EditAction} oEditAction The editAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setEditAction = function(oEditAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getFavoriteAction favoriteAction}.
 * @param {sap.m.semantic.FavoriteAction} oFavoriteAction The favoriteAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setFavoriteAction = function(oFavoriteAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getFlagAction flagAction}.
 * @param {sap.m.semantic.FlagAction} oFlagAction The flagAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setFlagAction = function(oFlagAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getForwardAction forwardAction}.
 * @param {sap.m.semantic.ForwardAction} oForwardAction The forwardAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setForwardAction = function(oForwardAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getMainAction mainAction}.
 * @param {sap.m.semantic.MainAction} oMainAction The mainAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setMainAction = function(oMainAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getMessagesIndicator messagesIndicator}.
 * @param {sap.m.semantic.MessagesIndicator} oMessagesIndicator The messagesIndicator to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setMessagesIndicator = function(oMessagesIndicator) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getNegativeAction negativeAction}.
 * @param {sap.m.semantic.NegativeAction} oNegativeAction The negativeAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setNegativeAction = function(oNegativeAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getOpenInAction openInAction}.
 * @param {sap.m.semantic.OpenInAction} oOpenInAction The openInAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setOpenInAction = function(oOpenInAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getPagingAction pagingAction}.
 * @param {sap.m.PagingButton} oPagingAction The pagingAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setPagingAction = function(oPagingAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getPositiveAction positiveAction}.
 * @param {sap.m.semantic.PositiveAction} oPositiveAction The positiveAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setPositiveAction = function(oPositiveAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getPrintAction printAction}.
 * @param {sap.m.semantic.PrintAction} oPrintAction The printAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setPrintAction = function(oPrintAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getSaveAction saveAction}.
 * @param {sap.m.semantic.SaveAction} oSaveAction The saveAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setSaveAction = function(oSaveAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getSaveAsTileAction saveAsTileAction}.
 * @param {sap.m.Button} oSaveAsTileAction The saveAsTileAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setSaveAsTileAction = function(oSaveAsTileAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getSendEmailAction sendEmailAction}.
 * @param {sap.m.semantic.SendEmailAction} oSendEmailAction The sendEmailAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setSendEmailAction = function(oSendEmailAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getSendMessageAction sendMessageAction}.
 * @param {sap.m.semantic.SendMessageAction} oSendMessageAction The sendMessageAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setSendMessageAction = function(oSendMessageAction) { return new sap.m.semantic.DetailPage(); };

/**
 * Sets the aggregated {@link #getShareInJamAction shareInJamAction}.
 * @param {sap.m.semantic.ShareInJamAction} oShareInJamAction The shareInJamAction to set
 * @returns {sap.m.semantic.DetailPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.DetailPage.prototype.setShareInJamAction = function(oShareInJamAction) { return new sap.m.semantic.DetailPage(); };


// ---- sap.m.semantic.DiscussInJamAction --------------------------------------------------------------------------

/**
 * Constructor for a new DiscussInJamAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A DiscussInJamAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.DiscussInJamAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.DiscussInJamAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.DiscussInJamAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.DiscussInJamAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.DiscussInJamAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.EditAction --------------------------------------------------------------------------

/**
 * Constructor for a new EditAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * An EditAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.EditAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.EditAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.EditAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.EditAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.EditAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.FavoriteAction --------------------------------------------------------------------------

/**
 * Constructor for a new FavoriteAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A FavoriteAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticToggleButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.FavoriteAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.FavoriteAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticToggleButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.FavoriteAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.FavoriteAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.FavoriteAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.FilterAction --------------------------------------------------------------------------

/**
 * Constructor for a new FilterAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A FilterAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.FilterAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.FilterAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.FilterAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.FilterAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.FilterAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.FilterSelect --------------------------------------------------------------------------

/**
 * Constructor for a new FilterSelect.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A FilterSelect button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticSelect
 * @implements sap.m.semantic.ISort
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.FilterSelect = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.FilterSelect with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticSelect.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.FilterSelect.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.FilterSelect.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.FilterSelect.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.FlagAction --------------------------------------------------------------------------

/**
 * Constructor for a new FlagAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A FlagAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticToggleButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.FlagAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.FlagAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticToggleButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.FlagAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.FlagAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.FlagAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.ForwardAction --------------------------------------------------------------------------

/**
 * Constructor for a new ForwardAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A ForwardAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.ForwardAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.ForwardAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.ForwardAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.ForwardAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.ForwardAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.FullscreenPage --------------------------------------------------------------------------

/**
 * Constructor for a new FullscreenPage
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAddAction addAction} : sap.m.semantic.AddAction</li>
 * <li>{@link #getMainAction mainAction} : sap.m.semantic.MainAction</li>
 * <li>{@link #getPositiveAction positiveAction} : sap.m.semantic.PositiveAction</li>
 * <li>{@link #getNegativeAction negativeAction} : sap.m.semantic.NegativeAction</li>
 * <li>{@link #getForwardAction forwardAction} : sap.m.semantic.ForwardAction</li>
 * <li>{@link #getEditAction editAction} : sap.m.semantic.EditAction</li>
 * <li>{@link #getSaveAction saveAction} : sap.m.semantic.SaveAction</li>
 * <li>{@link #getDeleteAction deleteAction} : sap.m.semantic.DeleteAction</li>
 * <li>{@link #getCancelAction cancelAction} : sap.m.semantic.CancelAction</li>
 * <li>{@link #getFlagAction flagAction} : sap.m.semantic.FlagAction</li>
 * <li>{@link #getFavoriteAction favoriteAction} : sap.m.semantic.FavoriteAction</li>
 * <li>{@link #getOpenInAction openInAction} : sap.m.semantic.OpenInAction</li>
 * <li>{@link #getDiscussInJamAction discussInJamAction} : sap.m.semantic.DiscussInJamAction</li>
 * <li>{@link #getShareInJamAction shareInJamAction} : sap.m.semantic.ShareInJamAction</li>
 * <li>{@link #getSendEmailAction sendEmailAction} : sap.m.semantic.SendEmailAction</li>
 * <li>{@link #getSendMessageAction sendMessageAction} : sap.m.semantic.SendMessageAction</li>
 * <li>{@link #getPrintAction printAction} : sap.m.semantic.PrintAction</li>
 * <li>{@link #getMessagesIndicator messagesIndicator} : sap.m.semantic.MessagesIndicator</li>
 * <li>{@link #getSaveAsTileAction saveAsTileAction} : sap.m.Button</li>
 * <li>{@link #getPagingAction pagingAction} : sap.m.PagingButton</li>
 * <li>{@link #getDraftIndicator draftIndicator} : sap.m.DraftIndicator</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.semantic.ShareMenuPage#constructor sap.m.semantic.ShareMenuPage}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A FullscreenPage is a {@link sap.m.semantic.ShareMenuPage} that supports semantic content of the following types:
 * 
 * <ul>
 *  <li>{@link sap.m.semantic.AddAction}</li>
 * 	<li>{@link sap.m.semantic.MainAction}</li>
 * 	<li>{@link sap.m.semantic.PositiveAction}</li>
 * 	<li>{@link sap.m.semantic.NegativeAction}</li>
 * 	<li>{@link sap.m.semantic.ForwardAction}</li>
 * 	<li>{@link sap.m.semantic.EditAction}</li>
 * 	<li>{@link sap.m.semantic.SaveAction}</li>
 * 	<li>{@link sap.m.semantic.DeleteAction}</li>
 * 	<li>{@link sap.m.semantic.CancelAction}</li>
 * 	<li>{@link sap.m.semantic.FlagAction}</li>
 * 	<li>{@link sap.m.semantic.FavoriteAction}</li>
 * 	<li>{@link sap.m.semantic.OpenInAction}</li>
 * 	<li>{@link sap.m.semantic.DiscussInJamAction}</li>
 * 	<li>{@link sap.m.semantic.ShareInJamAction}</li>
 * 	<li>{@link sap.m.semantic.SendEmailAction}</li>
 * 	<li>{@link sap.m.semantic.SendMessageAction}</li>
 * 	<li>{@link sap.m.semantic.PrintAction}</li>
 * 	<li>{@link sap.m.semantic.MessagesIndicator}</li>
 * 	<li>{@link sap.m.DraftIndicator}</li>
 * </ul>
 * 
 * @extends sap.m.semantic.ShareMenuPage
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.FullscreenPage = function(sId,mSettings) {};
/**
 * Destroys the addAction in the aggregation {@link #getAddAction addAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyAddAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the cancelAction in the aggregation {@link #getCancelAction cancelAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyCancelAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the deleteAction in the aggregation {@link #getDeleteAction deleteAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyDeleteAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the discussInJamAction in the aggregation {@link #getDiscussInJamAction discussInJamAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyDiscussInJamAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the draftIndicator in the aggregation {@link #getDraftIndicator draftIndicator}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyDraftIndicator = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the editAction in the aggregation {@link #getEditAction editAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyEditAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the favoriteAction in the aggregation {@link #getFavoriteAction favoriteAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyFavoriteAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the flagAction in the aggregation {@link #getFlagAction flagAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyFlagAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the forwardAction in the aggregation {@link #getForwardAction forwardAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyForwardAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the mainAction in the aggregation {@link #getMainAction mainAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyMainAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the messagesIndicator in the aggregation {@link #getMessagesIndicator messagesIndicator}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyMessagesIndicator = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the negativeAction in the aggregation {@link #getNegativeAction negativeAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyNegativeAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the openInAction in the aggregation {@link #getOpenInAction openInAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyOpenInAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the pagingAction in the aggregation {@link #getPagingAction pagingAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyPagingAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the positiveAction in the aggregation {@link #getPositiveAction positiveAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyPositiveAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the printAction in the aggregation {@link #getPrintAction printAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyPrintAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the saveAction in the aggregation {@link #getSaveAction saveAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroySaveAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the saveAsTileAction in the aggregation {@link #getSaveAsTileAction saveAsTileAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroySaveAsTileAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the sendEmailAction in the aggregation {@link #getSendEmailAction sendEmailAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroySendEmailAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the sendMessageAction in the aggregation {@link #getSendMessageAction sendMessageAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroySendMessageAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Destroys the shareInJamAction in the aggregation {@link #getShareInJamAction shareInJamAction}.
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.destroyShareInJamAction = function() { return new sap.m.semantic.FullscreenPage(); };

/**
 * Creates a new subclass of class sap.m.semantic.FullscreenPage with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.ShareMenuPage.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.FullscreenPage.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getAddAction addAction}.
 * 
 * Add action
 * 
 * @returns {sap.m.semantic.AddAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getAddAction = function() { return new sap.m.semantic.AddAction(); };

/**
 * Gets content of aggregation {@link #getCancelAction cancelAction}.
 * 
 * Cancel action
 * 
 * @returns {sap.m.semantic.CancelAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getCancelAction = function() { return new sap.m.semantic.CancelAction(); };

/**
 * Gets content of aggregation {@link #getDeleteAction deleteAction}.
 * 
 * Delete action
 * 
 * @returns {sap.m.semantic.DeleteAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getDeleteAction = function() { return new sap.m.semantic.DeleteAction(); };

/**
 * Gets content of aggregation {@link #getDiscussInJamAction discussInJamAction}.
 * 
 * DiscussInJam action
 * 
 * @returns {sap.m.semantic.DiscussInJamAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getDiscussInJamAction = function() { return new sap.m.semantic.DiscussInJamAction(); };

/**
 * Gets content of aggregation {@link #getDraftIndicator draftIndicator}.
 * 
 * DraftIndicator
 * 
 * @returns {sap.m.DraftIndicator}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getDraftIndicator = function() { return new sap.m.DraftIndicator(); };

/**
 * Gets content of aggregation {@link #getEditAction editAction}.
 * 
 * Edit action
 * 
 * @returns {sap.m.semantic.EditAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getEditAction = function() { return new sap.m.semantic.EditAction(); };

/**
 * Gets content of aggregation {@link #getFavoriteAction favoriteAction}.
 * 
 * Favorite action
 * 
 * @returns {sap.m.semantic.FavoriteAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getFavoriteAction = function() { return new sap.m.semantic.FavoriteAction(); };

/**
 * Gets content of aggregation {@link #getFlagAction flagAction}.
 * 
 * Flag action
 * 
 * @returns {sap.m.semantic.FlagAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getFlagAction = function() { return new sap.m.semantic.FlagAction(); };

/**
 * Gets content of aggregation {@link #getForwardAction forwardAction}.
 * 
 * Negative action
 * 
 * @returns {sap.m.semantic.ForwardAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getForwardAction = function() { return new sap.m.semantic.ForwardAction(); };

/**
 * Gets content of aggregation {@link #getMainAction mainAction}.
 * 
 * Main action
 * 
 * @returns {sap.m.semantic.MainAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getMainAction = function() { return new sap.m.semantic.MainAction(); };

/**
 * Gets content of aggregation {@link #getMessagesIndicator messagesIndicator}.
 * 
 * MessagesIndicator
 * 
 * @returns {sap.m.semantic.MessagesIndicator}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getMessagesIndicator = function() { return new sap.m.semantic.MessagesIndicator(); };

/**
 * Returns a metadata object for class sap.m.semantic.FullscreenPage.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.FullscreenPage.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getNegativeAction negativeAction}.
 * 
 * Negative action
 * 
 * @returns {sap.m.semantic.NegativeAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getNegativeAction = function() { return new sap.m.semantic.NegativeAction(); };

/**
 * Gets content of aggregation {@link #getOpenInAction openInAction}.
 * 
 * OpenIn action
 * 
 * @returns {sap.m.semantic.OpenInAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getOpenInAction = function() { return new sap.m.semantic.OpenInAction(); };

/**
 * Gets content of aggregation {@link #getPagingAction pagingAction}.
 * 
 * Paging action
 * 
 * @returns {sap.m.PagingButton}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getPagingAction = function() { return new sap.m.PagingButton(); };

/**
 * Gets content of aggregation {@link #getPositiveAction positiveAction}.
 * 
 * Positive action
 * 
 * @returns {sap.m.semantic.PositiveAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getPositiveAction = function() { return new sap.m.semantic.PositiveAction(); };

/**
 * Gets content of aggregation {@link #getPrintAction printAction}.
 * 
 * Print action
 * 
 * @returns {sap.m.semantic.PrintAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getPrintAction = function() { return new sap.m.semantic.PrintAction(); };

/**
 * Gets content of aggregation {@link #getSaveAction saveAction}.
 * 
 * Save action
 * 
 * @returns {sap.m.semantic.SaveAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getSaveAction = function() { return new sap.m.semantic.SaveAction(); };

/**
 * Gets content of aggregation {@link #getSaveAsTileAction saveAsTileAction}.
 * 
 * SaveAsTile button
 * 
 * @returns {sap.m.Button}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getSaveAsTileAction = function() { return new sap.m.Button(); };

/**
 * Gets content of aggregation {@link #getSendEmailAction sendEmailAction}.
 * 
 * SendEmail action
 * 
 * @returns {sap.m.semantic.SendEmailAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getSendEmailAction = function() { return new sap.m.semantic.SendEmailAction(); };

/**
 * Gets content of aggregation {@link #getSendMessageAction sendMessageAction}.
 * 
 * SendMessage action
 * 
 * @returns {sap.m.semantic.SendMessageAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getSendMessageAction = function() { return new sap.m.semantic.SendMessageAction(); };

/**
 * Gets content of aggregation {@link #getShareInJamAction shareInJamAction}.
 * 
 * ShareInJam action
 * 
 * @returns {sap.m.semantic.ShareInJamAction}
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.getShareInJamAction = function() { return new sap.m.semantic.ShareInJamAction(); };

/**
 * Sets the aggregated {@link #getAddAction addAction}.
 * @param {sap.m.semantic.AddAction} oAddAction The addAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setAddAction = function(oAddAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getCancelAction cancelAction}.
 * @param {sap.m.semantic.CancelAction} oCancelAction The cancelAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setCancelAction = function(oCancelAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getDeleteAction deleteAction}.
 * @param {sap.m.semantic.DeleteAction} oDeleteAction The deleteAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setDeleteAction = function(oDeleteAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getDiscussInJamAction discussInJamAction}.
 * @param {sap.m.semantic.DiscussInJamAction} oDiscussInJamAction The discussInJamAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setDiscussInJamAction = function(oDiscussInJamAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getDraftIndicator draftIndicator}.
 * @param {sap.m.DraftIndicator} oDraftIndicator The draftIndicator to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setDraftIndicator = function(oDraftIndicator) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getEditAction editAction}.
 * @param {sap.m.semantic.EditAction} oEditAction The editAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setEditAction = function(oEditAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getFavoriteAction favoriteAction}.
 * @param {sap.m.semantic.FavoriteAction} oFavoriteAction The favoriteAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setFavoriteAction = function(oFavoriteAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getFlagAction flagAction}.
 * @param {sap.m.semantic.FlagAction} oFlagAction The flagAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setFlagAction = function(oFlagAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getForwardAction forwardAction}.
 * @param {sap.m.semantic.ForwardAction} oForwardAction The forwardAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setForwardAction = function(oForwardAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getMainAction mainAction}.
 * @param {sap.m.semantic.MainAction} oMainAction The mainAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setMainAction = function(oMainAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getMessagesIndicator messagesIndicator}.
 * @param {sap.m.semantic.MessagesIndicator} oMessagesIndicator The messagesIndicator to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setMessagesIndicator = function(oMessagesIndicator) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getNegativeAction negativeAction}.
 * @param {sap.m.semantic.NegativeAction} oNegativeAction The negativeAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setNegativeAction = function(oNegativeAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getOpenInAction openInAction}.
 * @param {sap.m.semantic.OpenInAction} oOpenInAction The openInAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setOpenInAction = function(oOpenInAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getPagingAction pagingAction}.
 * @param {sap.m.PagingButton} oPagingAction The pagingAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setPagingAction = function(oPagingAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getPositiveAction positiveAction}.
 * @param {sap.m.semantic.PositiveAction} oPositiveAction The positiveAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setPositiveAction = function(oPositiveAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getPrintAction printAction}.
 * @param {sap.m.semantic.PrintAction} oPrintAction The printAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setPrintAction = function(oPrintAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getSaveAction saveAction}.
 * @param {sap.m.semantic.SaveAction} oSaveAction The saveAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setSaveAction = function(oSaveAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getSaveAsTileAction saveAsTileAction}.
 * @param {sap.m.Button} oSaveAsTileAction The saveAsTileAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setSaveAsTileAction = function(oSaveAsTileAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getSendEmailAction sendEmailAction}.
 * @param {sap.m.semantic.SendEmailAction} oSendEmailAction The sendEmailAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setSendEmailAction = function(oSendEmailAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getSendMessageAction sendMessageAction}.
 * @param {sap.m.semantic.SendMessageAction} oSendMessageAction The sendMessageAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setSendMessageAction = function(oSendMessageAction) { return new sap.m.semantic.FullscreenPage(); };

/**
 * Sets the aggregated {@link #getShareInJamAction shareInJamAction}.
 * @param {sap.m.semantic.ShareInJamAction} oShareInJamAction The shareInJamAction to set
 * @returns {sap.m.semantic.FullscreenPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.FullscreenPage.prototype.setShareInJamAction = function(oShareInJamAction) { return new sap.m.semantic.FullscreenPage(); };


// ---- sap.m.semantic.GroupAction --------------------------------------------------------------------------

/**
 * Constructor for a new GroupAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A GroupAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.GroupAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.GroupAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.GroupAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.GroupAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.GroupAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.GroupSelect --------------------------------------------------------------------------

/**
 * Constructor for a new GroupSelect.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A GroupSelect button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticSelect
 * @implements sap.m.semantic.ISort
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.GroupSelect = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.GroupSelect with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticSelect.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.GroupSelect.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.GroupSelect.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.GroupSelect.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.IFilter --------------------------------------------------------------------------


// ---- sap.m.semantic.IGroup --------------------------------------------------------------------------


// ---- sap.m.semantic.ISort --------------------------------------------------------------------------


// ---- sap.m.semantic.MainAction --------------------------------------------------------------------------

/**
 * Constructor for a new MainAction.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor sap.m.semantic.SemanticButton}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A MainAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.MainAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.MainAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.MainAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.MainAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.MainAction.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Button text
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.semantic.MainAction.prototype.getText = function() { return ""; };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Button text
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.semantic.MainAction} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MainAction.prototype.setText = function(sText) { return new sap.m.semantic.MainAction(); };


// ---- sap.m.semantic.MasterPage --------------------------------------------------------------------------

/**
 * Constructor for a new MasterPage
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAddAction addAction} : sap.m.semantic.AddAction</li>
 * <li>{@link #getMainAction mainAction} : sap.m.semantic.MainAction</li>
 * <li>{@link #getPositiveAction positiveAction} : sap.m.semantic.PositiveAction</li>
 * <li>{@link #getNegativeAction negativeAction} : sap.m.semantic.NegativeAction</li>
 * <li>{@link #getMultiSelectAction multiSelectAction} : sap.m.semantic.MultiSelectAction</li>
 * <li>{@link #getForwardAction forwardAction} : sap.m.semantic.ForwardAction</li>
 * <li>{@link #getEditAction editAction} : sap.m.semantic.EditAction</li>
 * <li>{@link #getSaveAction saveAction} : sap.m.semantic.SaveAction</li>
 * <li>{@link #getDeleteAction deleteAction} : sap.m.semantic.DeleteAction</li>
 * <li>{@link #getCancelAction cancelAction} : sap.m.semantic.CancelAction</li>
 * <li>{@link #getSort sort} : sap.m.semantic.ISort</li>
 * <li>{@link #getFilter filter} : sap.m.semantic.IFilter</li>
 * <li>{@link #getGroup group} : sap.m.semantic.IGroup</li>
 * <li>{@link #getMessagesIndicator messagesIndicator} : sap.m.semantic.MessagesIndicator</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.semantic.SemanticPage#constructor sap.m.semantic.SemanticPage}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A MasterPage is a {@link sap.m.semantic.SemanticPage} that supports semantic content of the following types:
 * 
 * <ul>
 * 	<li>{@link sap.m.semantic.AddAction}</li>
 * 	<li>{@link sap.m.semantic.MainAction}</li>
 * 	<li>{@link sap.m.semantic.PositiveAction}</li>
 * 	<li>{@link sap.m.semantic.NegativeAction}</li>
 * 	<li>{@link sap.m.semantic.ForwardAction}</li>
 * 	<li>{@link sap.m.semantic.EditAction}</li>
 * 	<li>{@link sap.m.semantic.SaveAction}</li>
 * 	<li>{@link sap.m.semantic.DeleteAction}</li>
 * 	<li>{@link sap.m.semantic.CancelAction}</li>
 * 	<li>{@link sap.m.semantic.MultiSelectAction}</li>
 * 	<li>{@link sap.m.semantic.FlagAction}</li>
 * 	<li>{@link sap.m.semantic.FavoriteAction}</li>
 * 	<li>{@link sap.m.semantic.SortAction}</li>
 * 	<li>{@link sap.m.semantic.SortSelect}</li>
 * 	<li>{@link sap.m.semantic.FilterAction}</li>
 * 	<li>{@link sap.m.semantic.FilterSelect}</li>
 * 	<li>{@link sap.m.semantic.GroupAction}</li>
 * 	<li>{@link sap.m.semantic.GroupSelect}</li>
 * 	<li>{@link sap.m.semantic.MessagesIndicator}</li>
 * </ul>
 * 
 * @extends sap.m.semantic.SemanticPage
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.MasterPage = function(sId,mSettings) {};
/**
 * Destroys the addAction in the aggregation {@link #getAddAction addAction}.
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.destroyAddAction = function() { return new sap.m.semantic.MasterPage(); };

/**
 * Destroys the cancelAction in the aggregation {@link #getCancelAction cancelAction}.
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.destroyCancelAction = function() { return new sap.m.semantic.MasterPage(); };

/**
 * Destroys the deleteAction in the aggregation {@link #getDeleteAction deleteAction}.
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.destroyDeleteAction = function() { return new sap.m.semantic.MasterPage(); };

/**
 * Destroys the editAction in the aggregation {@link #getEditAction editAction}.
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.destroyEditAction = function() { return new sap.m.semantic.MasterPage(); };

/**
 * Destroys the filter in the aggregation {@link #getFilter filter}.
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.destroyFilter = function() { return new sap.m.semantic.MasterPage(); };

/**
 * Destroys the forwardAction in the aggregation {@link #getForwardAction forwardAction}.
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.destroyForwardAction = function() { return new sap.m.semantic.MasterPage(); };

/**
 * Destroys the group in the aggregation {@link #getGroup group}.
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.destroyGroup = function() { return new sap.m.semantic.MasterPage(); };

/**
 * Destroys the mainAction in the aggregation {@link #getMainAction mainAction}.
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.destroyMainAction = function() { return new sap.m.semantic.MasterPage(); };

/**
 * Destroys the messagesIndicator in the aggregation {@link #getMessagesIndicator messagesIndicator}.
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.destroyMessagesIndicator = function() { return new sap.m.semantic.MasterPage(); };

/**
 * Destroys the multiSelectAction in the aggregation {@link #getMultiSelectAction multiSelectAction}.
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.destroyMultiSelectAction = function() { return new sap.m.semantic.MasterPage(); };

/**
 * Destroys the negativeAction in the aggregation {@link #getNegativeAction negativeAction}.
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.destroyNegativeAction = function() { return new sap.m.semantic.MasterPage(); };

/**
 * Destroys the positiveAction in the aggregation {@link #getPositiveAction positiveAction}.
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.destroyPositiveAction = function() { return new sap.m.semantic.MasterPage(); };

/**
 * Destroys the saveAction in the aggregation {@link #getSaveAction saveAction}.
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.destroySaveAction = function() { return new sap.m.semantic.MasterPage(); };

/**
 * Destroys the sort in the aggregation {@link #getSort sort}.
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.destroySort = function() { return new sap.m.semantic.MasterPage(); };

/**
 * Creates a new subclass of class sap.m.semantic.MasterPage with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticPage.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.MasterPage.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getAddAction addAction}.
 * 
 * Add action
 * 
 * @returns {sap.m.semantic.AddAction}
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.getAddAction = function() { return new sap.m.semantic.AddAction(); };

/**
 * Gets content of aggregation {@link #getCancelAction cancelAction}.
 * 
 * Cancel action
 * 
 * @returns {sap.m.semantic.CancelAction}
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.getCancelAction = function() { return new sap.m.semantic.CancelAction(); };

/**
 * Gets content of aggregation {@link #getDeleteAction deleteAction}.
 * 
 * Delete action
 * 
 * @returns {sap.m.semantic.DeleteAction}
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.getDeleteAction = function() { return new sap.m.semantic.DeleteAction(); };

/**
 * Gets content of aggregation {@link #getEditAction editAction}.
 * 
 * Edit action
 * 
 * @returns {sap.m.semantic.EditAction}
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.getEditAction = function() { return new sap.m.semantic.EditAction(); };

/**
 * Gets content of aggregation {@link #getFilter filter}.
 * 
 * Filter action
 * 
 * @returns {sap.m.semantic.IFilter}
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.getFilter = function() { return new sap.m.semantic.IFilter(); };

/**
 * Gets content of aggregation {@link #getForwardAction forwardAction}.
 * 
 * Forward action
 * 
 * @returns {sap.m.semantic.ForwardAction}
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.getForwardAction = function() { return new sap.m.semantic.ForwardAction(); };

/**
 * Gets content of aggregation {@link #getGroup group}.
 * 
 * Group action
 * 
 * @returns {sap.m.semantic.IGroup}
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.getGroup = function() { return new sap.m.semantic.IGroup(); };

/**
 * Gets content of aggregation {@link #getMainAction mainAction}.
 * 
 * Main action
 * 
 * @returns {sap.m.semantic.MainAction}
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.getMainAction = function() { return new sap.m.semantic.MainAction(); };

/**
 * Gets content of aggregation {@link #getMessagesIndicator messagesIndicator}.
 * 
 * MessagesIndicator
 * 
 * @returns {sap.m.semantic.MessagesIndicator}
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.getMessagesIndicator = function() { return new sap.m.semantic.MessagesIndicator(); };

/**
 * Returns a metadata object for class sap.m.semantic.MasterPage.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.MasterPage.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getMultiSelectAction multiSelectAction}.
 * 
 * MultiSelect action
 * 
 * @returns {sap.m.semantic.MultiSelectAction}
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.getMultiSelectAction = function() { return new sap.m.semantic.MultiSelectAction(); };

/**
 * Gets content of aggregation {@link #getNegativeAction negativeAction}.
 * 
 * Negative action
 * 
 * @returns {sap.m.semantic.NegativeAction}
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.getNegativeAction = function() { return new sap.m.semantic.NegativeAction(); };

/**
 * Gets content of aggregation {@link #getPositiveAction positiveAction}.
 * 
 * Positive action
 * 
 * @returns {sap.m.semantic.PositiveAction}
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.getPositiveAction = function() { return new sap.m.semantic.PositiveAction(); };

/**
 * Gets content of aggregation {@link #getSaveAction saveAction}.
 * 
 * Save action
 * 
 * @returns {sap.m.semantic.SaveAction}
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.getSaveAction = function() { return new sap.m.semantic.SaveAction(); };

/**
 * Gets content of aggregation {@link #getSort sort}.
 * 
 * Sort action
 * 
 * @returns {sap.m.semantic.ISort}
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.getSort = function() { return new sap.m.semantic.ISort(); };

/**
 * Sets the aggregated {@link #getAddAction addAction}.
 * @param {sap.m.semantic.AddAction} oAddAction The addAction to set
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.setAddAction = function(oAddAction) { return new sap.m.semantic.MasterPage(); };

/**
 * Sets the aggregated {@link #getCancelAction cancelAction}.
 * @param {sap.m.semantic.CancelAction} oCancelAction The cancelAction to set
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.setCancelAction = function(oCancelAction) { return new sap.m.semantic.MasterPage(); };

/**
 * Sets the aggregated {@link #getDeleteAction deleteAction}.
 * @param {sap.m.semantic.DeleteAction} oDeleteAction The deleteAction to set
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.setDeleteAction = function(oDeleteAction) { return new sap.m.semantic.MasterPage(); };

/**
 * Sets the aggregated {@link #getEditAction editAction}.
 * @param {sap.m.semantic.EditAction} oEditAction The editAction to set
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.setEditAction = function(oEditAction) { return new sap.m.semantic.MasterPage(); };

/**
 * Sets the aggregated {@link #getFilter filter}.
 * @param {sap.m.semantic.IFilter} oFilter The filter to set
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.setFilter = function(oFilter) { return new sap.m.semantic.MasterPage(); };

/**
 * Sets the aggregated {@link #getForwardAction forwardAction}.
 * @param {sap.m.semantic.ForwardAction} oForwardAction The forwardAction to set
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.setForwardAction = function(oForwardAction) { return new sap.m.semantic.MasterPage(); };

/**
 * Sets the aggregated {@link #getGroup group}.
 * @param {sap.m.semantic.IGroup} oGroup The group to set
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.setGroup = function(oGroup) { return new sap.m.semantic.MasterPage(); };

/**
 * Sets the aggregated {@link #getMainAction mainAction}.
 * @param {sap.m.semantic.MainAction} oMainAction The mainAction to set
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.setMainAction = function(oMainAction) { return new sap.m.semantic.MasterPage(); };

/**
 * Sets the aggregated {@link #getMessagesIndicator messagesIndicator}.
 * @param {sap.m.semantic.MessagesIndicator} oMessagesIndicator The messagesIndicator to set
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.setMessagesIndicator = function(oMessagesIndicator) { return new sap.m.semantic.MasterPage(); };

/**
 * Sets the aggregated {@link #getMultiSelectAction multiSelectAction}.
 * @param {sap.m.semantic.MultiSelectAction} oMultiSelectAction The multiSelectAction to set
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.setMultiSelectAction = function(oMultiSelectAction) { return new sap.m.semantic.MasterPage(); };

/**
 * Sets the aggregated {@link #getNegativeAction negativeAction}.
 * @param {sap.m.semantic.NegativeAction} oNegativeAction The negativeAction to set
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.setNegativeAction = function(oNegativeAction) { return new sap.m.semantic.MasterPage(); };

/**
 * Sets the aggregated {@link #getPositiveAction positiveAction}.
 * @param {sap.m.semantic.PositiveAction} oPositiveAction The positiveAction to set
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.setPositiveAction = function(oPositiveAction) { return new sap.m.semantic.MasterPage(); };

/**
 * Sets the aggregated {@link #getSaveAction saveAction}.
 * @param {sap.m.semantic.SaveAction} oSaveAction The saveAction to set
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.setSaveAction = function(oSaveAction) { return new sap.m.semantic.MasterPage(); };

/**
 * Sets the aggregated {@link #getSort sort}.
 * @param {sap.m.semantic.ISort} oSort The sort to set
 * @returns {sap.m.semantic.MasterPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.MasterPage.prototype.setSort = function(oSort) { return new sap.m.semantic.MasterPage(); };


// ---- sap.m.semantic.MessagesIndicator --------------------------------------------------------------------------

/**
 * Constructor for a new MessagesIndicator.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A MessagesIndicator button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.MessagesIndicator = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.MessagesIndicator with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.MessagesIndicator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.MessagesIndicator.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.MessagesIndicator.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.MultiSelectAction --------------------------------------------------------------------------

/**
 * Constructor for a new MultiSelectAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A MultiSelectAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticToggleButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.MultiSelectAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.MultiSelectAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticToggleButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.MultiSelectAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.MultiSelectAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.MultiSelectAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.NegativeAction --------------------------------------------------------------------------

/**
 * Constructor for a new NegativeAction.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor sap.m.semantic.SemanticButton}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] custom initial settings for the new control
 * 
 * @class
 * A NegativeAction button has default semantic-specific properties and
 * is eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.NegativeAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.NegativeAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.NegativeAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.NegativeAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.NegativeAction.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Button text
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.semantic.NegativeAction.prototype.getText = function() { return ""; };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Button text
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.semantic.NegativeAction} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.NegativeAction.prototype.setText = function(sText) { return new sap.m.semantic.NegativeAction(); };


// ---- sap.m.semantic.OpenInAction --------------------------------------------------------------------------

/**
 * Constructor for a new OpenInAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * An OpenInAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.OpenInAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.OpenInAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.OpenInAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.OpenInAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.OpenInAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.PositiveAction --------------------------------------------------------------------------

/**
 * Constructor for a new PositiveAction.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor sap.m.semantic.SemanticButton}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] custom initial settings for the new control
 * 
 * @class
 * A PositiveAction button has default semantic-specific properties and
 * is eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.PositiveAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.PositiveAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.PositiveAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.PositiveAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.PositiveAction.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Button text
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.semantic.PositiveAction.prototype.getText = function() { return ""; };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Button text
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.semantic.PositiveAction} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.PositiveAction.prototype.setText = function(sText) { return new sap.m.semantic.PositiveAction(); };


// ---- sap.m.semantic.PrintAction --------------------------------------------------------------------------

/**
 * Constructor for a new PrintAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A PrintAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.PrintAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.PrintAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.PrintAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.PrintAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.PrintAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.SaveAction --------------------------------------------------------------------------

/**
 * Constructor for a new SaveAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A SaveAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.SaveAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.SaveAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.SaveAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.SaveAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.SaveAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.SemanticButton --------------------------------------------------------------------------

/**
 * Constructor for a new SemanticButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.semantic.SemanticControl#constructor sap.m.semantic.SemanticControl}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A semantic button is either a {@link sap.m.Button} or {@link sap.m.semantic.SemanticOverflowToolbarButton} ,
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticControl
 * @abstract
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.SemanticButton = function(sId,mSettings) {};
/**
 * See {@link sap.m.Button#press}
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.semantic.SemanticButton.prototype.press = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.semantic.SemanticButton</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.semantic.SemanticButton</code> itself.
 * 
 * See {@link sap.m.Button#press}
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.semantic.SemanticButton</code> itself
 * 
 * @returns {sap.m.semantic.SemanticButton} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.semantic.SemanticButton.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.semantic.SemanticButton(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.semantic.SemanticButton</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.semantic.SemanticButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticButton.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.semantic.SemanticButton(); };

/**
 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.SemanticButton.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.semantic.SemanticButton} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.semantic.SemanticButton.prototype.firePress = function(mParameters) { return new sap.m.semantic.SemanticButton(); };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * See {@link sap.m.Button#enabled}
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticButton.prototype.getEnabled = function() { return false; };

/**
 * Returns a metadata object for class sap.m.semantic.SemanticButton.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.SemanticButton.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * See {@link sap.m.Button#enabled}
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.semantic.SemanticButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticButton.prototype.setEnabled = function(bEnabled) { return new sap.m.semantic.SemanticButton(); };


// ---- sap.m.semantic.SemanticControl --------------------------------------------------------------------------

/**
 * Constructor for a new SemanticControl.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * A semantic control is an abstraction for either a {@link sap.m.semantic.SemanticButton} or {@link sap.m.semantic.SemanticSelect} ,
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.ui.core.Element
 * @abstract
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.SemanticControl = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.SemanticControl.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.SemanticControl.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.SemanticControl.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * See {@link sap.ui.core.Control#visible}
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticControl.prototype.getVisible = function() { return false; };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * See {@link sap.ui.core.Control#visible}
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.m.semantic.SemanticControl} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticControl.prototype.setVisible = function(bVisible) { return new sap.m.semantic.SemanticControl(); };


// ---- sap.m.semantic.SemanticPage --------------------------------------------------------------------------

/**
 * Constructor for a new SemanticPage
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getTitleLevel titleLevel} : sap.ui.core.TitleLevel (default: Auto)</li>
 * <li>{@link #getShowNavButton showNavButton} : boolean (default: false)</li>
 * <li>{@link #getShowSubHeader showSubHeader} : boolean (default: true)</li>
 * <li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li>
 * <li>{@link #getShowFooter showFooter} : boolean (default: true)</li>
 * <li>{@link #getFloatingFooter floatingFooter} : boolean (default: false)</li>
 * <li>{@link #getSemanticRuleSet semanticRuleSet} : sap.m.semantic.SemanticRuleSetType (default: Classic)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSubHeader subHeader} : sap.m.IBar</li>
 * <li>{@link #getContent content} : sap.ui.core.Control[] (default)</li>
 * <li>{@link #getCustomHeaderContent customHeaderContent} : sap.m.Button[]</li>
 * <li>{@link #getCustomFooterContent customFooterContent} : sap.m.Button[]</li>
 * <li>{@link #getLandmarkInfo landmarkInfo} : sap.m.PageAccessibleLandmarkInfo</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:navButtonPress navButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A semantic page is an enhanced {@link sap.m.Page}, that can contain controls with semantic meaning, see {@link sap.m.semantic.SemanticControl}.
 * 
 * <b>Note:</b> This control implements the SAP Fiori 1.0 design guidelines. For SAP Fiori 2.0, see the {@link sap.f.semantic.SemanticPage}.
 * 
 * Content specified in the {@link sap.m.semantic.SemanticPage#semanticControls} aggregations will be automatically positioned in dedicated sections of the footer or the header of the page, depending on the control's semantics.<br>
 * For example, a semantic button of type {@link sap.m.semantic.PositiveAction} will be positioned in the right side of the footer, and in logically correct sequence order with respect to any other included semantic controls.<br>
 * 
 * The full list of what we internally define for semantic content is:
 *  <ul>
 *      <li>Visual properties (e.g. AddAction will be styled as an icon button)</li>
 *      <li>Position in the page (UX guidelines specify that some buttons should be in the header only, while others are in the footer or the "share" menu, so we do the correct positioning)</li>
 *      <li>Sequence order (UX guidelines define a specific sequence order of semantic controls with respect to each other)</li>
 *      <li>Default localized tooltip for icon-only buttons</li>
 *      <li>Overflow behavior (UX quidelines define which buttons are allowed to go to the overflow of the toolbar when the screen gets narrower). For icon buttons, we ensure that the text label of the button appears when the button is in overflow, as specified by UX.</li>
 *      <li>Screen reader support (invisible text for reading the semantic type)</li>
 *  </ul>
 * 
 * In addition to the predefined semantic controls, the SemanticPage can host also custom application-provided controls. It preserves most of the API of {@link sap.m.Page} for specifying page content.<br>
 * 
 * @extends sap.ui.core.Control
 * @abstract
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.SemanticPage = function(sId,mSettings) {};
/**
 * See {@link sap.m.Page#navButtonPress}
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.navButtonPress = function(oControlEvent) {  };

/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.addContent = function(oContent) { return new sap.m.semantic.SemanticPage(); };

/**
 * Adds some customFooterContent to the aggregation {@link #getCustomFooterContent customFooterContent}.
 * @param {sap.m.Button}
 *            oCustomFooterContent the customFooterContent to add; if empty, nothing is inserted
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.addCustomFooterContent = function(oCustomFooterContent) { return new sap.m.semantic.SemanticPage(); };

/**
 * Adds some customHeaderContent to the aggregation {@link #getCustomHeaderContent customHeaderContent}.
 * @param {sap.m.Button}
 *            oCustomHeaderContent the customHeaderContent to add; if empty, nothing is inserted
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.addCustomHeaderContent = function(oCustomHeaderContent) { return new sap.m.semantic.SemanticPage(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:navButtonPress navButtonPress} event of this <code>sap.m.semantic.SemanticPage</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.semantic.SemanticPage</code> itself.
 * 
 * See {@link sap.m.Page#navButtonPress}
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.semantic.SemanticPage</code> itself
 * 
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.attachNavButtonPress = function(oData,fnFunction,oListener) { return new sap.m.semantic.SemanticPage(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.destroyContent = function() { return new sap.m.semantic.SemanticPage(); };

/**
 * Destroys all the customFooterContent in the aggregation {@link #getCustomFooterContent customFooterContent}.
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.destroyCustomFooterContent = function() { return new sap.m.semantic.SemanticPage(); };

/**
 * Destroys all the customHeaderContent in the aggregation {@link #getCustomHeaderContent customHeaderContent}.
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.destroyCustomHeaderContent = function() { return new sap.m.semantic.SemanticPage(); };

/**
 * Destroys the landmarkInfo in the aggregation {@link #getLandmarkInfo landmarkInfo}.
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.destroyLandmarkInfo = function() { return new sap.m.semantic.SemanticPage(); };

/**
 * Destroys the subHeader in the aggregation {@link #getSubHeader subHeader}.
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.destroySubHeader = function() { return new sap.m.semantic.SemanticPage(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:navButtonPress navButtonPress} event of this <code>sap.m.semantic.SemanticPage</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.detachNavButtonPress = function(fnFunction,oListener) { return new sap.m.semantic.SemanticPage(); };

/**
 * Creates a new subclass of class sap.m.semantic.SemanticPage with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.SemanticPage.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:navButtonPress navButtonPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.semantic.SemanticPage.prototype.fireNavButtonPress = function(mParameters) { return new sap.m.semantic.SemanticPage(); };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * See {@link sap.m.Page#content}
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.getContent = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getCustomFooterContent customFooterContent}.
 * 
 * Custom footer buttons
 * 
 * @returns {sap.m.Button[]}
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.getCustomFooterContent = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getCustomHeaderContent customHeaderContent}.
 * 
 * Custom header buttons
 * 
 * @returns {sap.m.Button[]}
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.getCustomHeaderContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEnableScrolling enableScrolling}.
 * 
 * See {@link sap.m.Page#enableScrolling}
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enableScrolling</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.getEnableScrolling = function() { return false; };

/**
 * Gets current value of property {@link #getFloatingFooter floatingFooter}.
 * 
 * Determines whether the floating footer behavior is enabled.
 * If set to <code>true</code>, the content is visible when it's underneath the footer.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>floatingFooter</code>
 * @since 1.40.1
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.getFloatingFooter = function() { return false; };

/**
 * Gets content of aggregation {@link #getLandmarkInfo landmarkInfo}.
 * 
 * Accessible landmark settings to be applied to the containers of the <code>sap.m.Page</code> control.
 * 
 * If not set, no landmarks will be written.
 * 
 * @returns {sap.m.PageAccessibleLandmarkInfo}
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.getLandmarkInfo = function() { return new sap.m.PageAccessibleLandmarkInfo(); };

/**
 * Returns a metadata object for class sap.m.semantic.SemanticPage.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.SemanticPage.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSemanticRuleSet semanticRuleSet}.
 * 
 * Declares the type of semantic ruleset that will govern the styling and positioning of semantic content.
 * 
 * Default value is <code>Classic</code>.
 * @returns {sap.m.semantic.SemanticRuleSetType} Value of property <code>semanticRuleSet</code>
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.getSemanticRuleSet = function() { return new sap.m.semantic.SemanticRuleSetType(); };

/**
 * Gets current value of property {@link #getShowFooter showFooter}.
 * 
 * Hides or shows the page footer
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showFooter</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.getShowFooter = function() { return false; };

/**
 * Gets current value of property {@link #getShowNavButton showNavButton}.
 * 
 * See {@link sap.m.Page#showNavButton}
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showNavButton</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.getShowNavButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowSubHeader showSubHeader}.
 * 
 * See {@link sap.m.Page#showSubHeader}
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showSubHeader</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.getShowSubHeader = function() { return false; };

/**
 * Gets content of aggregation {@link #getSubHeader subHeader}.
 * 
 * See {@link sap.m.Page#subHeader}
 * 
 * @returns {sap.m.IBar}
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.getSubHeader = function() { return new sap.m.IBar(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * See {@link sap.m.Page#title}
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getTitleLevel titleLevel}.
 * 
 * See {@link sap.m.Page#titleLevel}
 * 
 * Default value is <code>Auto</code>.
 * @returns {sap.ui.core.TitleLevel} Value of property <code>titleLevel</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.getTitleLevel = function() { return new sap.ui.core.TitleLevel(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation {@link #getCustomFooterContent customFooterContent}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Button}
 *           oCustomFooterContent The customFooterContent whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.indexOfCustomFooterContent = function(oCustomFooterContent) { return 0; };

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation {@link #getCustomHeaderContent customHeaderContent}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Button}
 *           oCustomHeaderContent The customHeaderContent whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.indexOfCustomHeaderContent = function(oCustomHeaderContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.insertContent = function(oContent,iIndex) { return new sap.m.semantic.SemanticPage(); };

/**
 * Inserts a customFooterContent into the aggregation {@link #getCustomFooterContent customFooterContent}.
 * 
 * @param {sap.m.Button}
 *            oCustomFooterContent the customFooterContent to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the customFooterContent should be inserted at; for
 *              a negative value of <code>iIndex</code>, the customFooterContent is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the customFooterContent is inserted at
 *              the last position
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.insertCustomFooterContent = function(oCustomFooterContent,iIndex) { return new sap.m.semantic.SemanticPage(); };

/**
 * Inserts a customHeaderContent into the aggregation {@link #getCustomHeaderContent customHeaderContent}.
 * 
 * @param {sap.m.Button}
 *            oCustomHeaderContent the customHeaderContent to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the customHeaderContent should be inserted at; for
 *              a negative value of <code>iIndex</code>, the customHeaderContent is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the customHeaderContent is inserted at
 *              the last position
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.insertCustomHeaderContent = function(oCustomHeaderContent,iIndex) { return new sap.m.semantic.SemanticPage(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getCustomFooterContent customFooterContent}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Button[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.removeAllCustomFooterContent = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getCustomHeaderContent customHeaderContent}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Button[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.removeAllCustomHeaderContent = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Removes a customFooterContent from the aggregation {@link #getCustomFooterContent customFooterContent}.
 * 
 * @param {int | string | sap.m.Button} vCustomFooterContent The customFooterContent to remove or its index or id
 * @returns {sap.m.Button} The removed customFooterContent or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.removeCustomFooterContent = function(vCustomFooterContent) { return new sap.m.Button(); };

/**
 * Removes a customHeaderContent from the aggregation {@link #getCustomHeaderContent customHeaderContent}.
 * 
 * @param {int | string | sap.m.Button} vCustomHeaderContent The customHeaderContent to remove or its index or id
 * @returns {sap.m.Button} The removed customHeaderContent or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.removeCustomHeaderContent = function(vCustomHeaderContent) { return new sap.m.Button(); };

/**
 * Sets a new value for property {@link #getEnableScrolling enableScrolling}.
 * 
 * See {@link sap.m.Page#enableScrolling}
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableScrolling New value for property <code>enableScrolling</code>
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.setEnableScrolling = function(bEnableScrolling) { return new sap.m.semantic.SemanticPage(); };

/**
 * Sets a new value for property {@link #getFloatingFooter floatingFooter}.
 * 
 * Determines whether the floating footer behavior is enabled.
 * If set to <code>true</code>, the content is visible when it's underneath the footer.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bFloatingFooter New value for property <code>floatingFooter</code>
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40.1
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.setFloatingFooter = function(bFloatingFooter) { return new sap.m.semantic.SemanticPage(); };

/**
 * Sets the aggregated {@link #getLandmarkInfo landmarkInfo}.
 * @param {sap.m.PageAccessibleLandmarkInfo} oLandmarkInfo The landmarkInfo to set
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.setLandmarkInfo = function(oLandmarkInfo) { return new sap.m.semantic.SemanticPage(); };

/**
 * Sets a new value for property {@link #getSemanticRuleSet semanticRuleSet}.
 * 
 * Declares the type of semantic ruleset that will govern the styling and positioning of semantic content.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Classic</code>.
 * @param {sap.m.semantic.SemanticRuleSetType} sSemanticRuleSet New value for property <code>semanticRuleSet</code>
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.setSemanticRuleSet = function(sSemanticRuleSet) { return new sap.m.semantic.SemanticPage(); };

/**
 * Sets a new value for property {@link #getShowFooter showFooter}.
 * 
 * Hides or shows the page footer
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowFooter New value for property <code>showFooter</code>
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.setShowFooter = function(bShowFooter) { return new sap.m.semantic.SemanticPage(); };

/**
 * Sets a new value for property {@link #getShowNavButton showNavButton}.
 * 
 * See {@link sap.m.Page#showNavButton}
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowNavButton New value for property <code>showNavButton</code>
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.setShowNavButton = function(bShowNavButton) { return new sap.m.semantic.SemanticPage(); };

/**
 * Sets a new value for property {@link #getShowSubHeader showSubHeader}.
 * 
 * See {@link sap.m.Page#showSubHeader}
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowSubHeader New value for property <code>showSubHeader</code>
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.setShowSubHeader = function(bShowSubHeader) { return new sap.m.semantic.SemanticPage(); };

/**
 * Sets the aggregated {@link #getSubHeader subHeader}.
 * @param {sap.m.IBar} oSubHeader The subHeader to set
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.setSubHeader = function(oSubHeader) { return new sap.m.semantic.SemanticPage(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * See {@link sap.m.Page#title}
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.setTitle = function(sTitle) { return new sap.m.semantic.SemanticPage(); };

/**
 * Sets a new value for property {@link #getTitleLevel titleLevel}.
 * 
 * See {@link sap.m.Page#titleLevel}
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Auto</code>.
 * @param {sap.ui.core.TitleLevel} sTitleLevel New value for property <code>titleLevel</code>
 * @returns {sap.m.semantic.SemanticPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticPage.prototype.setTitleLevel = function(sTitleLevel) { return new sap.m.semantic.SemanticPage(); };


// ---- sap.m.semantic.SemanticRuleSetType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.semantic.SemanticRuleSetType.toString = function() { return ""; };

// ---- sap.m.semantic.SemanticSelect --------------------------------------------------------------------------

/**
 * Constructor for a new SemanticSelect.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getSelectedKey selectedKey} : string (default: )</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Item[] (default)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedItem selectedItem} : (sap.ui.core.ID | sap.ui.core.Item)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.semantic.SemanticControl#constructor sap.m.semantic.SemanticControl}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A semantic select is a {@link sap.m.Select} eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticControl
 * @abstract
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.SemanticSelect = function(sId,mSettings) {};
/**
 * See {@link sap.m.Select#event:change}
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem The selected item.
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.change = function(oControlEvent) {  };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.ui.core.Item}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.semantic.SemanticSelect} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.addItem = function(oItem) { return new sap.m.semantic.SemanticSelect(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.m.semantic.SemanticSelect</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.semantic.SemanticSelect</code> itself.
 * 
 * See {@link sap.m.Select#event:change}
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.semantic.SemanticSelect</code> itself
 * 
 * @returns {sap.m.semantic.SemanticSelect} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.semantic.SemanticSelect(); };

/**
 * Binds aggregation {@link #getItems items} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.semantic.SemanticSelect} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.bindItems = function(oBindingInfo) { return new sap.m.semantic.SemanticSelect(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.semantic.SemanticSelect} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.destroyItems = function() { return new sap.m.semantic.SemanticSelect(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.m.semantic.SemanticSelect</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.semantic.SemanticSelect} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.semantic.SemanticSelect(); };

/**
 * Creates a new subclass of class sap.m.semantic.SemanticSelect with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.SemanticSelect.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:change change} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Item} [mParameters.selectedItem] The selected item.
 * 
 * @returns {sap.m.semantic.SemanticSelect} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.semantic.SemanticSelect.prototype.fireChange = function(mParameters) { return new sap.m.semantic.SemanticSelect(); };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * See {@link sap.m.Select#getEnabled}
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.getEnabled = function() { return false; };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * See {@link sap.m.Select#getItems}
 * 
 * @returns {sap.ui.core.Item[]}
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.semantic.SemanticSelect.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.SemanticSelect.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * ID of the element which is the current target of the association {@link #getSelectedItem selectedItem}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.getSelectedItem = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getSelectedKey selectedKey}.
 * 
 * See {@link sap.m.Select#getSelectedKey}
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>selectedKey</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.getSelectedKey = function() { return ""; };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.ui.core.Item}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.semantic.SemanticSelect} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.insertItem = function(oItem,iIndex) { return new sap.m.semantic.SemanticSelect(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Item[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.ui.core.Item} vItem The item to remove or its index or id
 * @returns {sap.ui.core.Item} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.removeItem = function(vItem) { return new sap.ui.core.Item(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * See {@link sap.m.Select#getEnabled}
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.semantic.SemanticSelect} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.setEnabled = function(bEnabled) { return new sap.m.semantic.SemanticSelect(); };

/**
 * Sets the associated {@link #getSelectedItem selectedItem}.
 * @param {sap.ui.core.ID | sap.ui.core.Item} oSelectedItem ID of an element which becomes the new target of this selectedItem association; alternatively, an element instance may be given
 * @returns {sap.m.semantic.SemanticSelect} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.setSelectedItem = function(oSelectedItem) { return new sap.m.semantic.SemanticSelect(); };

/**
 * Sets a new value for property {@link #getSelectedKey selectedKey}.
 * 
 * See {@link sap.m.Select#getSelectedKey}
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sSelectedKey New value for property <code>selectedKey</code>
 * @returns {sap.m.semantic.SemanticSelect} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.setSelectedKey = function(sSelectedKey) { return new sap.m.semantic.SemanticSelect(); };

/**
 * Unbinds aggregation {@link #getItems items} from model data.
 * @returns {sap.m.semantic.SemanticSelect} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticSelect.prototype.unbindItems = function() { return new sap.m.semantic.SemanticSelect(); };


// ---- sap.m.semantic.SemanticToggleButton --------------------------------------------------------------------------

/**
 * Constructor for a new SemanticToggleButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPressed pressed} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.semantic.SemanticButton#constructor sap.m.semantic.SemanticButton}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A SemanticToggleButton is eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @abstract
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.SemanticToggleButton = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.SemanticToggleButton with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.SemanticToggleButton.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.SemanticToggleButton.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.SemanticToggleButton.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPressed pressed}.
 * 
 * The property is “true” when the control is toggled. The default state of this property is "false".
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>pressed</code>
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticToggleButton.prototype.getPressed = function() { return false; };

/**
 * Sets a new value for property {@link #getPressed pressed}.
 * 
 * The property is “true” when the control is toggled. The default state of this property is "false".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bPressed New value for property <code>pressed</code>
 * @returns {sap.m.semantic.SemanticToggleButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.SemanticToggleButton.prototype.setPressed = function(bPressed) { return new sap.m.semantic.SemanticToggleButton(); };


// ---- sap.m.semantic.SendEmailAction --------------------------------------------------------------------------

/**
 * Constructor for a new SendEmailAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A SendEmailAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.SendEmailAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.SendEmailAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.SendEmailAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.SendEmailAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.SendEmailAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.SendMessageAction --------------------------------------------------------------------------

/**
 * Constructor for a new SendMessageAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A SendMessageAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.SendMessageAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.SendMessageAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.SendMessageAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.SendMessageAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.SendMessageAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.ShareInJamAction --------------------------------------------------------------------------

/**
 * Constructor for a new ShareInJamAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A ShareInJamAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.ShareInJamAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.ShareInJamAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.ShareInJamAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.ShareInJamAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.ShareInJamAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.ShareMenuPage --------------------------------------------------------------------------

/**
 * Constructor for a new ShareMenuPage
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCustomShareMenuContent customShareMenuContent} : sap.m.Button[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.semantic.SemanticPage#constructor sap.m.semantic.SemanticPage}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * A ShareMenuPage is a {@link sap.m.semantic.SemanticPage} with support for "share" menu in the footer.
 * 
 * @extends sap.m.semantic.SemanticPage
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.ShareMenuPage = function(sId,mSettings) {};
/**
 * Adds some customShareMenuContent to the aggregation {@link #getCustomShareMenuContent customShareMenuContent}.
 * @param {sap.m.Button}
 *            oCustomShareMenuContent the customShareMenuContent to add; if empty, nothing is inserted
 * @returns {sap.m.semantic.ShareMenuPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.ShareMenuPage.prototype.addCustomShareMenuContent = function(oCustomShareMenuContent) { return new sap.m.semantic.ShareMenuPage(); };

/**
 * Destroys all the customShareMenuContent in the aggregation {@link #getCustomShareMenuContent customShareMenuContent}.
 * @returns {sap.m.semantic.ShareMenuPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.ShareMenuPage.prototype.destroyCustomShareMenuContent = function() { return new sap.m.semantic.ShareMenuPage(); };

/**
 * Creates a new subclass of class sap.m.semantic.ShareMenuPage with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticPage.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.ShareMenuPage.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getCustomShareMenuContent customShareMenuContent}.
 * 
 * Custom share menu buttons
 * 
 * @returns {sap.m.Button[]}
 * 
 * @public
 * 
 */
sap.m.semantic.ShareMenuPage.prototype.getCustomShareMenuContent = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.semantic.ShareMenuPage.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.ShareMenuPage.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation {@link #getCustomShareMenuContent customShareMenuContent}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Button}
 *           oCustomShareMenuContent The customShareMenuContent whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.semantic.ShareMenuPage.prototype.indexOfCustomShareMenuContent = function(oCustomShareMenuContent) { return 0; };

/**
 * Inserts a customShareMenuContent into the aggregation {@link #getCustomShareMenuContent customShareMenuContent}.
 * 
 * @param {sap.m.Button}
 *            oCustomShareMenuContent the customShareMenuContent to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the customShareMenuContent should be inserted at; for
 *              a negative value of <code>iIndex</code>, the customShareMenuContent is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the customShareMenuContent is inserted at
 *              the last position
 * @returns {sap.m.semantic.ShareMenuPage} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.semantic.ShareMenuPage.prototype.insertCustomShareMenuContent = function(oCustomShareMenuContent,iIndex) { return new sap.m.semantic.ShareMenuPage(); };

/**
 * Removes all the controls from the aggregation {@link #getCustomShareMenuContent customShareMenuContent}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Button[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.semantic.ShareMenuPage.prototype.removeAllCustomShareMenuContent = function() { return new Array(); };

/**
 * Removes a customShareMenuContent from the aggregation {@link #getCustomShareMenuContent customShareMenuContent}.
 * 
 * @param {int | string | sap.m.Button} vCustomShareMenuContent The customShareMenuContent to remove or its index or id
 * @returns {sap.m.Button} The removed customShareMenuContent or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.semantic.ShareMenuPage.prototype.removeCustomShareMenuContent = function(vCustomShareMenuContent) { return new sap.m.Button(); };


// ---- sap.m.semantic.SortAction --------------------------------------------------------------------------

/**
 * Constructor for a new SortAction.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A SortAction button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticButton
 * @implements sap.m.semantic.ISort
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.SortAction = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.SortAction with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.SortAction.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.SortAction.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.SortAction.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.semantic.SortSelect --------------------------------------------------------------------------

/**
 * Constructor for a new SortSelect.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Custom initial settings for the new control
 * 
 * @class
 * A SortSelect button has default semantic-specific properties and is
 * eligible for aggregation content of a {@link sap.m.semantic.SemanticPage}.
 * 
 * @extends sap.m.semantic.SemanticSelect
 * @implements sap.m.semantic.ISort
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.semantic.SortSelect = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.semantic.SortSelect with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticSelect.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.semantic.SortSelect.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.semantic.SortSelect.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.semantic.SortSelect.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.Shell --------------------------------------------------------------------------

/**
 * Constructor for a new Shell.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getLogo logo} : sap.ui.core.URI</li>
 * <li>{@link #getShowLogout showLogout} : boolean (default: true)</li>
 * <li>{@link #getHeaderRightText headerRightText} : string</li>
 * <li>{@link #getAppWidthLimited appWidthLimited} : boolean (default: true)</li>
 * <li>{@link #getBackgroundColor backgroundColor} : sap.ui.core.CSSColor</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li>
 * <li>{@link #getHomeIcon homeIcon} : object</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getApp app} : sap.ui.core.Control (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:logout logout} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The Shell control can be used as root element of applications. It can contain an App or a <code>SplitApp</code> control.
 * The Shell provides some overarching functionality for the overall application and takes care of visual adaptation, such as a frame around the App, on desktop browser platforms.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Shell = function(sId,mSettings) {};
/**
 * Fires when the user presses the logout button/link.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Shell.prototype.logout = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:logout logout} event of this <code>sap.m.Shell</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Shell</code> itself.
 * 
 * Fires when the user presses the logout button/link.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Shell</code> itself
 * 
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Shell.prototype.attachLogout = function(oData,fnFunction,oListener) { return new sap.m.Shell(); };

/**
 * Destroys the app in the aggregation {@link #getApp app}.
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.destroyApp = function() { return new sap.m.Shell(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:logout logout} event of this <code>sap.m.Shell</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.detachLogout = function(fnFunction,oListener) { return new sap.m.Shell(); };

/**
 * Creates a new subclass of class sap.m.Shell with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Shell.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:logout logout} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Shell.prototype.fireLogout = function(mParameters) { return new sap.m.Shell(); };

/**
 * Gets content of aggregation {@link #getApp app}.
 * 
 * A Shell contains an App or a SplitApp (they may be wrapped in a View). Other control types are not allowed.
 * 
 * @returns {sap.ui.core.Control}
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.getApp = function() { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getAppWidthLimited appWidthLimited}.
 * 
 * Determines whether the width of the content (the aggregated App) should be limited or extended to the full screen width.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>appWidthLimited</code>
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.getAppWidthLimited = function() { return false; };

/**
 * Gets current value of property {@link #getBackgroundColor backgroundColor}.
 * 
 * Defines the background color of the Shell. If set, this color will override the default background defined by the theme. This should only be set when really required.
 * Any configured background image will be placed above this colored background.
 * Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
 * 
 * @returns {sap.ui.core.CSSColor} Value of property <code>backgroundColor</code>
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.getBackgroundColor = function() { return new sap.ui.core.CSSColor(); };

/**
 * Gets current value of property {@link #getBackgroundImage backgroundImage}.
 * 
 * Defines the background image of the Shell. If set, this image will override the default background defined by the theme. This should only be set when really required.
 * This background image will be placed above any color set for the background.
 * Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>backgroundImage</code>
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.getBackgroundImage = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getBackgroundOpacity backgroundOpacity}.
 * 
 * Defines the opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 (fully opaque).
 * This can be used to improve readability of the Shell content by making the background image partly transparent.
 * 
 * Default value is <code>1</code>.
 * @returns {float} Value of property <code>backgroundOpacity</code>
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.getBackgroundOpacity = function() { return 0.0; };

/**
 * Gets current value of property {@link #getBackgroundRepeat backgroundRepeat}.
 * 
 * Determines whether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>backgroundRepeat</code>
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.getBackgroundRepeat = function() { return false; };

/**
 * Gets current value of property {@link #getHeaderRightText headerRightText}.
 * 
 * Defines texts, such as the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all - this only happens on very tall screens (1568px height), otherwise, it is always hidden).
 * 
 * @returns {string} Value of property <code>headerRightText</code>
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.getHeaderRightText = function() { return ""; };

/**
 * Gets current value of property {@link #getHomeIcon homeIcon}.
 * 
 * Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.
 * 
 * This property should be only set once, and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.
 * 
 * Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers).
 * The <code>precomposed</code> flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this:
 * {
 * 'phone':'phone-icon_57x57.png',
 * 'phone@2':'phone-retina_114x114.png',
 * 'tablet':'tablet-icon_72x72.png',
 * 'tablet@2':'tablet-retina_144x144.png',
 * 'precomposed':true,
 * 'favicon':'favicon.ico'
 * }
 * 
 * See jQuery.sap.setIcons() for full documentation.
 * 
 * @returns {object} Value of property <code>homeIcon</code>
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.getHomeIcon = function() { return new Object(); };

/**
 * Gets current value of property {@link #getLogo logo}.
 * 
 * Defines the logo to be displayed next to the App when the screen is sufficiently large.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>logo</code>
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.getLogo = function() { return new sap.ui.core.URI(); };

/**
 * Returns a metadata object for class sap.m.Shell.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Shell.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowLogout showLogout}.
 * 
 * Determines whether the Logout button should be displayed. Currently, this only happens on very tall screens (1568px height), otherwise, it is always hidden.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showLogout</code>
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.getShowLogout = function() { return false; };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Defines the application title, which may or may not be displayed outside the actual application, depending on the available screen size.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.getTitle = function() { return ""; };

/**
 * Sets the aggregated {@link #getApp app}.
 * @param {sap.ui.core.Control} oApp The app to set
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.setApp = function(oApp) { return new sap.m.Shell(); };

/**
 * Sets a new value for property {@link #getAppWidthLimited appWidthLimited}.
 * 
 * Determines whether the width of the content (the aggregated App) should be limited or extended to the full screen width.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bAppWidthLimited New value for property <code>appWidthLimited</code>
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.setAppWidthLimited = function(bAppWidthLimited) { return new sap.m.Shell(); };

/**
 * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
 * 
 * Defines the background color of the Shell. If set, this color will override the default background defined by the theme. This should only be set when really required.
 * Any configured background image will be placed above this colored background.
 * Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSColor} sBackgroundColor New value for property <code>backgroundColor</code>
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.setBackgroundColor = function(sBackgroundColor) { return new sap.m.Shell(); };

/**
 * Sets a new value for property {@link #getBackgroundImage backgroundImage}.
 * 
 * Defines the background image of the Shell. If set, this image will override the default background defined by the theme. This should only be set when really required.
 * This background image will be placed above any color set for the background.
 * Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sBackgroundImage New value for property <code>backgroundImage</code>
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.setBackgroundImage = function(sBackgroundImage) { return new sap.m.Shell(); };

/**
 * Sets a new value for property {@link #getBackgroundOpacity backgroundOpacity}.
 * 
 * Defines the opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 (fully opaque).
 * This can be used to improve readability of the Shell content by making the background image partly transparent.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>1</code>.
 * @param {float} fBackgroundOpacity New value for property <code>backgroundOpacity</code>
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.setBackgroundOpacity = function(fBackgroundOpacity) { return new sap.m.Shell(); };

/**
 * Sets a new value for property {@link #getBackgroundRepeat backgroundRepeat}.
 * 
 * Determines whether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bBackgroundRepeat New value for property <code>backgroundRepeat</code>
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.setBackgroundRepeat = function(bBackgroundRepeat) { return new sap.m.Shell(); };

/**
 * Sets a new value for property {@link #getHeaderRightText headerRightText}.
 * 
 * Defines texts, such as the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all - this only happens on very tall screens (1568px height), otherwise, it is always hidden).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sHeaderRightText New value for property <code>headerRightText</code>
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.setHeaderRightText = function(sHeaderRightText) { return new sap.m.Shell(); };

/**
 * Sets a new value for property {@link #getHomeIcon homeIcon}.
 * 
 * Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.
 * 
 * This property should be only set once, and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.
 * 
 * Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers).
 * The <code>precomposed</code> flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this:
 * {
 * 'phone':'phone-icon_57x57.png',
 * 'phone@2':'phone-retina_114x114.png',
 * 'tablet':'tablet-icon_72x72.png',
 * 'tablet@2':'tablet-retina_144x144.png',
 * 'precomposed':true,
 * 'favicon':'favicon.ico'
 * }
 * 
 * See jQuery.sap.setIcons() for full documentation.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oHomeIcon New value for property <code>homeIcon</code>
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.setHomeIcon = function(oHomeIcon) { return new sap.m.Shell(); };

/**
 * Sets a new value for property {@link #getLogo logo}.
 * 
 * Defines the logo to be displayed next to the App when the screen is sufficiently large.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sLogo New value for property <code>logo</code>
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.setLogo = function(sLogo) { return new sap.m.Shell(); };

/**
 * Sets a new value for property {@link #getShowLogout showLogout}.
 * 
 * Determines whether the Logout button should be displayed. Currently, this only happens on very tall screens (1568px height), otherwise, it is always hidden.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowLogout New value for property <code>showLogout</code>
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.setShowLogout = function(bShowLogout) { return new sap.m.Shell(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Defines the application title, which may or may not be displayed outside the actual application, depending on the available screen size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.Shell} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Shell.prototype.setTitle = function(sTitle) { return new sap.m.Shell(); };


// ---- sap.m.Size --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.Size.toString = function() { return ""; };

// ---- sap.m.Slider --------------------------------------------------------------------------

/**
 * Constructor for a new <code>Slider</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getName name} : string (default: )</li>
 * <li>{@link #getMin min} : float (default: 0)</li>
 * <li>{@link #getMax max} : float (default: 100)</li>
 * <li>{@link #getStep step} : float (default: 1)</li>
 * <li>{@link #getProgress progress} : boolean (default: true)</li>
 * <li>{@link #getValue value} : float (default: 0)</li>
 * <li>{@link #getShowHandleTooltip showHandleTooltip} : boolean (default: true)</li>
 * <li>{@link #getShowAdvancedTooltip showAdvancedTooltip} : boolean (default: false)</li>
 * <li>{@link #getInputsAsTooltips inputsAsTooltips} : boolean (default: false)</li>
 * <li>{@link #getEnableTickmarks enableTickmarks} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getScale scale} : sap.m.IScale (default)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <strong><i>Overview</i></strong>
 * 
 * A {@link sap.m.Slider} control represents a numerical range and a handle.
 * The purpose of the control is to enable visual selection of a value in a continuous numerical range by moving an adjustable handle.
 * 
 * <strong>Notes:</strong>
 * <ul><li>Only horizontal sliders are possible. </li>
 * <li>The handle can be moved in steps of predefined size. This is done with the <code>step</code> property. </li>
 * <li>Setting the property <code>showAdvancedTooltips</code> shows an input field above the handle</li>
 * <li>Setting the property <code>inputsAsTooltips</code> enables the user to enter a specific value in the handle's tooltip. </li>
 * </ul>
 * <strong><i>Structure</i></strong>
 * 
 * The most important properties of the Slider are:
 * <ul>
 * <li> min - The minimum value of the slider range </li>
 * <li> max - The maximum value of the slider range </li>
 * <li> value - The current value of the slider</li>
 * <li> progress - Determines if a progress bar will be shown on the slider range</li>
 * <li> step - Determines the increments in which the slider will move</li>
 * </ul>
 * These properties determine the visualization of the tooltips:
 * <ul>
 * <li> showAdvancedTooltips - Determines if a tooltip should be displayed above the handle</li>
 * <li> inputsAsTooltips - Determines if the tooltip displayed above the slider's handle should include an input field</li>
 * </ul>
 * <strong><i>Usage</i></strong>
 * 
 * The most common usecase is to select values on a continuous numerical scale (e.g. temperature, volume, etc. ).
 * 
 * <strong><i>Responsive Behavior</i></strong>
 * 
 * The <code>sap.m.Slider</code> control adjusts to the size of its parent container by recalculating and resizing the width of the control.
 * You can move the slider handle in several different ways:
 * <ul>
 * <li> Drag and drop to the desired value</li>
 * <li> Click/tap on the range bar to move the handle to that location </li>
 * <li> Enter the desired value in the input field (if available) </li>
 * <li> Keyboard (Arrow keys, "+" and "-") </li>
 * </ul>
 * 
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Slider = function(sId,mSettings) {};
/**
 * This event is triggered after the end user finishes interacting, if there is any change.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {float} oControlEvent.getParameters.value The current value of the slider after a change.
 * @public
 * 
 */
sap.m.Slider.prototype.change = function(oControlEvent) {  };

/**
 * This event is triggered during the dragging period, each time the slider value changes.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {float} oControlEvent.getParameters.value The current value of the slider after a live change.
 * @public
 * 
 */
sap.m.Slider.prototype.liveChange = function(oControlEvent) {  };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.Slider(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.m.Slider</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Slider</code> itself.
 * 
 * This event is triggered after the end user finishes interacting, if there is any change.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code> itself
 * 
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.Slider(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:liveChange liveChange} event of this <code>sap.m.Slider</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Slider</code> itself.
 * 
 * This event is triggered during the dragging period, each time the slider value changes.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code> itself
 * 
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Slider.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.Slider(); };

/**
 * Destroys the scale in the aggregation {@link #getScale scale}.
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.destroyScale = function() { return new sap.m.Slider(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.m.Slider</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.Slider(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:liveChange liveChange} event of this <code>sap.m.Slider</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.Slider(); };

/**
 * Creates a new subclass of class sap.m.Slider with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Slider.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:change change} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {float} [mParameters.value] The current value of the slider after a change.
 * 
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Slider.prototype.fireChange = function(mParameters) { return new sap.m.Slider(); };

/**
 * Fires event {@link #event:liveChange liveChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {float} [mParameters.value] The current value of the slider after a live change.
 * 
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Slider.prototype.fireLiveChange = function(mParameters) { return new sap.m.Slider(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Indicates whether the user can change the value.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.getEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getEnableTickmarks enableTickmarks}.
 * 
 * Enables tickmarks visualisation
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableTickmarks</code>
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.getEnableTickmarks = function() { return false; };

/**
 * Gets current value of property {@link #getInputsAsTooltips inputsAsTooltips}.
 * 
 * Indicates whether input fields should be used as tooltips for the handles. <b>Note:</b> Setting this option to <code>true</code>
 * will only work if <code>showAdvancedTooltips</code> is set to <code>true</code>.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>inputsAsTooltips</code>
 * @since 1.42
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.getInputsAsTooltips = function() { return false; };

/**
 * Gets current value of property {@link #getMax max}.
 * 
 * The maximum value.
 * 
 * Default value is <code>100</code>.
 * @returns {float} Value of property <code>max</code>
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.getMax = function() { return 0.0; };

/**
 * Returns a metadata object for class sap.m.Slider.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Slider.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMin min}.
 * 
 * The minimum value.
 * 
 * Default value is <code>0</code>.
 * @returns {float} Value of property <code>min</code>
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.getMin = function() { return 0.0; };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.getName = function() { return ""; };

/**
 * Gets current value of property {@link #getProgress progress}.
 * 
 * Indicate whether a progress bar indicator is shown.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>progress</code>
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.getProgress = function() { return false; };

/**
 * Gets content of aggregation {@link #getScale scale}.
 * 
 * Scale for visualisation of tickmarks and labels
 * 
 * @returns {sap.m.IScale}
 * @since 1.46
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.getScale = function() { return new sap.m.IScale(); };

/**
 * Gets current value of property {@link #getShowAdvancedTooltip showAdvancedTooltip}.
 * 
 * Indicate whether the handle's advanced tooltip is shown. <b>Note:</b> Setting this option to <code>true</code>
 * will ignore the value set in <code>showHandleTooltips</code>. This will cause only the advanced tooltip to be shown.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showAdvancedTooltip</code>
 * @since 1.42
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.getShowAdvancedTooltip = function() { return false; };

/**
 * Gets current value of property {@link #getShowHandleTooltip showHandleTooltip}.
 * 
 * Indicate whether the handle tooltip is shown.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showHandleTooltip</code>
 * @since 1.31
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.getShowHandleTooltip = function() { return false; };

/**
 * Gets current value of property {@link #getStep step}.
 * 
 * Define the amount of units to change the slider when adjusting by drag and drop.
 * 
 * Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).
 * 
 * The step must be positive, if a negative number is provided, the default value will be used instead.
 * If the width of the slider converted to pixels is less than the range (max - min), the value will be rounded to multiples of the step size.
 * 
 * Default value is <code>1</code>.
 * @returns {float} Value of property <code>step</code>
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.getStep = function() { return 0.0; };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * Define the value.
 * 
 * If the value is lower/higher than the allowed minimum/maximum, the value of the properties <code>min</code>/<code>max</code> are used instead.
 * 
 * Default value is <code>0</code>.
 * @returns {float} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.getValue = function() { return 0.0; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the control.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Indicates whether the user can change the value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.setEnabled = function(bEnabled) { return new sap.m.Slider(); };

/**
 * Sets a new value for property {@link #getEnableTickmarks enableTickmarks}.
 * 
 * Enables tickmarks visualisation
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableTickmarks New value for property <code>enableTickmarks</code>
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.setEnableTickmarks = function(bEnableTickmarks) { return new sap.m.Slider(); };

/**
 * Sets a new value for property {@link #getInputsAsTooltips inputsAsTooltips}.
 * 
 * Indicates whether input fields should be used as tooltips for the handles. <b>Note:</b> Setting this option to <code>true</code>
 * will only work if <code>showAdvancedTooltips</code> is set to <code>true</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bInputsAsTooltips New value for property <code>inputsAsTooltips</code>
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * @since 1.42
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.setInputsAsTooltips = function(bInputsAsTooltips) { return new sap.m.Slider(); };

/**
 * Sets a new value for property {@link #getMax max}.
 * 
 * The maximum value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100</code>.
 * @param {float} fMax New value for property <code>max</code>
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.setMax = function(fMax) { return new sap.m.Slider(); };

/**
 * Sets a new value for property {@link #getMin min}.
 * 
 * The minimum value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {float} fMin New value for property <code>min</code>
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.setMin = function(fMin) { return new sap.m.Slider(); };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.setName = function(sName) { return new sap.m.Slider(); };

/**
 * Sets a new value for property {@link #getProgress progress}.
 * 
 * Indicate whether a progress bar indicator is shown.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bProgress New value for property <code>progress</code>
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.setProgress = function(bProgress) { return new sap.m.Slider(); };

/**
 * Sets the aggregated {@link #getScale scale}.
 * @param {sap.m.IScale} oScale The scale to set
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.setScale = function(oScale) { return new sap.m.Slider(); };

/**
 * Sets a new value for property {@link #getShowAdvancedTooltip showAdvancedTooltip}.
 * 
 * Indicate whether the handle's advanced tooltip is shown. <b>Note:</b> Setting this option to <code>true</code>
 * will ignore the value set in <code>showHandleTooltips</code>. This will cause only the advanced tooltip to be shown.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowAdvancedTooltip New value for property <code>showAdvancedTooltip</code>
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * @since 1.42
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.setShowAdvancedTooltip = function(bShowAdvancedTooltip) { return new sap.m.Slider(); };

/**
 * Sets a new value for property {@link #getShowHandleTooltip showHandleTooltip}.
 * 
 * Indicate whether the handle tooltip is shown.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowHandleTooltip New value for property <code>showHandleTooltip</code>
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * @since 1.31
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.setShowHandleTooltip = function(bShowHandleTooltip) { return new sap.m.Slider(); };

/**
 * Sets a new value for property {@link #getStep step}.
 * 
 * Define the amount of units to change the slider when adjusting by drag and drop.
 * 
 * Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).
 * 
 * The step must be positive, if a negative number is provided, the default value will be used instead.
 * If the width of the slider converted to pixels is less than the range (max - min), the value will be rounded to multiples of the step size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>1</code>.
 * @param {float} fStep New value for property <code>step</code>
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.setStep = function(fStep) { return new sap.m.Slider(); };

/**
 * Sets the property <code>value</code>.
 * 
 * Default value is <code>0</code>.
 * 
 * @param {float} fNewValue new value for property <code>value</code>.
 * @param {object} mOptions
 * @returns {sap.m.Slider} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.m.Slider.prototype.setValue = function(fNewValue,mOptions) { return new sap.m.Slider(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width of the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.Slider} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Slider.prototype.setWidth = function(sWidth) { return new sap.m.Slider(); };

/**
 * Decrements the value by multiplying the step the <code>step</code> with the given parameter.
 * 
 * @param {int} [iStep=1] The number of steps the slider goes down.
 * @returns {sap.m.Slider} <code>this</code> to allow method chaining.
 * @type sap.m.Slider
 * @public
 * 
 */
sap.m.Slider.prototype.stepDown = function(iStep) { return new sap.m.Slider(); };

/**
 * Increments the value by multiplying the <code>step</code> with the given parameter.
 * 
 * @param {int} [iStep=1] The number of steps the slider goes up.
 * @returns {sap.m.Slider} <code>this</code> to allow method chaining.
 * @type sap.m.Slider
 * @public
 * 
 */
sap.m.Slider.prototype.stepUp = function(iStep) { return new sap.m.Slider(); };


// ---- sap.m.SlideTile --------------------------------------------------------------------------

/**
 * Constructor for a new sap.m.SlideTile control.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDisplayTime displayTime} : int (default: 5000)</li>
 * <li>{@link #getTransitionTime transitionTime} : int (default: 500)</li>
 * <li>{@link #getScope scope} : sap.m.GenericTileScope (default: Display)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTiles tiles} : sap.m.GenericTile[] (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class The control that displays multiple GenericTile controls as changing slides.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * @since 1.34
 * 
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SlideTile = function(sId,mSettings) {};
/**
 * The event is fired when the user chooses the tile. The event is available only in Actions scope.
 * @event
 * @since 1.46.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.GenericTileScope} oControlEvent.getParameters.scope The current scope the SlideTile was in when the event occurred.
 * @param {string} oControlEvent.getParameters.action The action that was pressed on the tile. In the Actions scope, the available actions are Press and Remove.
 * @param {any} oControlEvent.getParameters.domRef The Element's DOM Element.
 * In Actions scope the domRef points to the DOM Element of the remove button (if pressed) or the more icon.
 * @public
 * 
 */
sap.m.SlideTile.prototype.press = function(oControlEvent) {  };

/**
 * Adds some tile to the aggregation {@link #getTiles tiles}.
 * @param {sap.m.GenericTile}
 *            oTile the tile to add; if empty, nothing is inserted
 * @returns {sap.m.SlideTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.addTile = function(oTile) { return new sap.m.SlideTile(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.SlideTile</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SlideTile</code> itself.
 * 
 * The event is fired when the user chooses the tile. The event is available only in Actions scope.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SlideTile</code> itself
 * 
 * @returns {sap.m.SlideTile} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.46.0
 * 
 */
sap.m.SlideTile.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.SlideTile(); };

/**
 * Binds aggregation {@link #getTiles tiles} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.SlideTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.bindTiles = function(oBindingInfo) { return new sap.m.SlideTile(); };

/**
 * Destroys all the tiles in the aggregation {@link #getTiles tiles}.
 * @returns {sap.m.SlideTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.destroyTiles = function() { return new sap.m.SlideTile(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.SlideTile</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SlideTile} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.SlideTile(); };

/**
 * Creates a new subclass of class sap.m.SlideTile with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SlideTile.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.GenericTileScope} [mParameters.scope] The current scope the SlideTile was in when the event occurred.
 * @param {string} [mParameters.action] The action that was pressed on the tile. In the Actions scope, the available actions are Press and Remove.
 * @param {any} [mParameters.domRef] The Element's DOM Element.
 * In Actions scope the domRef points to the DOM Element of the remove button (if pressed) or the more icon.
 * 
 * @returns {sap.m.SlideTile} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.46.0
 * 
 */
sap.m.SlideTile.prototype.firePress = function(mParameters) { return new sap.m.SlideTile(); };

/**
 * Gets current value of property {@link #getDisplayTime displayTime}.
 * 
 * The time of the slide display in milliseconds.
 * 
 * Default value is <code>5000</code>.
 * @returns {int} Value of property <code>displayTime</code>
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.getDisplayTime = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.SlideTile.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.SlideTile.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getScope scope}.
 * 
 * Changes the visualization in order to enable additional actions with the SlideTile control.
 * 
 * Default value is <code>Display</code>.
 * @returns {sap.m.GenericTileScope} Value of property <code>scope</code>
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.getScope = function() { return new sap.m.GenericTileScope(); };

/**
 * Gets content of aggregation {@link #getTiles tiles}.
 * 
 * The set of Generic Tiles to be shown in the control.
 * 
 * @returns {sap.m.GenericTile[]}
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.getTiles = function() { return new Array(); };

/**
 * Gets current value of property {@link #getTransitionTime transitionTime}.
 * 
 * The time of the slide changing in milliseconds.
 * 
 * Default value is <code>500</code>.
 * @returns {int} Value of property <code>transitionTime</code>
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.getTransitionTime = function() { return 0; };

/**
 * Checks for the provided <code>sap.m.GenericTile</code> in the aggregation {@link #getTiles tiles}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.GenericTile}
 *           oTile The tile whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.indexOfTile = function(oTile) { return 0; };

/**
 * Inserts a tile into the aggregation {@link #getTiles tiles}.
 * 
 * @param {sap.m.GenericTile}
 *            oTile the tile to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the tile should be inserted at; for
 *              a negative value of <code>iIndex</code>, the tile is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the tile is inserted at
 *              the last position
 * @returns {sap.m.SlideTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.insertTile = function(oTile,iIndex) { return new sap.m.SlideTile(); };

/**
 * Removes all the controls from the aggregation {@link #getTiles tiles}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.GenericTile[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.removeAllTiles = function() { return new Array(); };

/**
 * Removes a tile from the aggregation {@link #getTiles tiles}.
 * 
 * @param {int | string | sap.m.GenericTile} vTile The tile to remove or its index or id
 * @returns {sap.m.GenericTile} The removed tile or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.removeTile = function(vTile) { return new sap.m.GenericTile(); };

/**
 * Sets a new value for property {@link #getDisplayTime displayTime}.
 * 
 * The time of the slide display in milliseconds.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>5000</code>.
 * @param {int} iDisplayTime New value for property <code>displayTime</code>
 * @returns {sap.m.SlideTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.setDisplayTime = function(iDisplayTime) { return new sap.m.SlideTile(); };

/**
 * Sets a new value for property {@link #getScope scope}.
 * 
 * Changes the visualization in order to enable additional actions with the SlideTile control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Display</code>.
 * @param {sap.m.GenericTileScope} sScope New value for property <code>scope</code>
 * @returns {sap.m.SlideTile} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.setScope = function(sScope) { return new sap.m.SlideTile(); };

/**
 * Sets a new value for property {@link #getTransitionTime transitionTime}.
 * 
 * The time of the slide changing in milliseconds.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>500</code>.
 * @param {int} iTransitionTime New value for property <code>transitionTime</code>
 * @returns {sap.m.SlideTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.setTransitionTime = function(iTransitionTime) { return new sap.m.SlideTile(); };

/**
 * Unbinds aggregation {@link #getTiles tiles} from model data.
 * @returns {sap.m.SlideTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SlideTile.prototype.unbindTiles = function() { return new sap.m.SlideTile(); };


// ---- sap.m.SplitApp --------------------------------------------------------------------------

/**
 * Constructor for a new SplitApp.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHomeIcon homeIcon} : any</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:orientationChange orientationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.SplitContainer#constructor sap.m.SplitContainer}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * A container control that is used to display a master-detail view in an application.
 * @class
 * SplitApp is another possible root element of an SAPUI5 mobile application besides {@link sap.m.App}. It contains two NavContainers if running on tablet or desktop,  and one on phone.
 * The display of master NavContainer depends on the portrait/landscape mode of the device and the mode of SplitApp.
 * <h3>Structure</h3>
 * The SplitApp divides the screen into two areas:
 * <ul>
 * <li>Master area - contains a list of available items where the user can search and filter.</li>
 * <li>Details area - contains a control which shows further details on the item(s) selected from the master view.</li>
 * </ul>
 * Both areas have separate headers and footer bars with navigation and actions.
 * <h3>Usage</h3>
 * <h4>When to use</h4>
 * <ul>
 * <li>You need to review and process different items quickly with minimal navigation.</li>
 * </ul>
 * <h4>When not to use</h4>
 * <ul>
 * <li>You need to offer complex filters for the list of items.</li>
 * <li>You need to see different attributes for each item in the list, and compare these values across items.</li>
 * <li>You want to display a single object. Do not use the master list to display different facets of the same object.</li>
 * </ul>
 * <h3>Responsive Behavior</h3>
 * On narrow screens for phones (or tablet devices in portrait mode), the master list and the details are split into two separate pages.
 * 
 * The user can navigate between the list and details, and see all the available information for each area.
 * @extends sap.m.SplitContainer
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitApp = function(sId,mSettings) {};
/**
 * Fires when orientation (portrait/landscape) is changed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.landscape Returns true if the device is in landscape mode.
 * @public
 * 
 */
sap.m.SplitApp.prototype.orientationChange = function(oControlEvent) {  };

/**
 * Fires the orientationChange event after SplitApp has reacted to the browser orientationChange event.
 * 
 * @protected
 * 
 */
sap.m.SplitApp.prototype._onOrientationChange = function() {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:orientationChange orientationChange} event of this <code>sap.m.SplitApp</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SplitApp</code> itself.
 * 
 * Fires when orientation (portrait/landscape) is changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code> itself
 * 
 * @returns {sap.m.SplitApp} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SplitApp.prototype.attachOrientationChange = function(oData,fnFunction,oListener) { return new sap.m.SplitApp(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:orientationChange orientationChange} event of this <code>sap.m.SplitApp</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SplitApp} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitApp.prototype.detachOrientationChange = function(fnFunction,oListener) { return new sap.m.SplitApp(); };

/**
 * Creates a new subclass of class sap.m.SplitApp with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.SplitContainer.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SplitApp.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:orientationChange orientationChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.landscape] Returns true if the device is in landscape mode.
 * 
 * @returns {sap.m.SplitApp} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SplitApp.prototype.fireOrientationChange = function(mParameters) { return new sap.m.SplitApp(); };

/**
 * Gets current value of property {@link #getHomeIcon homeIcon}.
 * 
 * Represents the icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * Note that only the first attempt to set the homeIcon is executed, subsequent settings are ignored.
 * The icon must be in PNG format. The property can either store the URL of one single icon or an object holding icon URLs for the different required sizes.
 * Note that if single icon is used for all devices, when scaled, its quality can regress.
 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon.
 * For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting as the file can contain different images for different resolutions.
 * 
 * One example is:
 * 
 * app.setHomeIcon({
 * 'phone':'phone-icon.png',
 * 'phone@2':'phone-retina.png',
 * 'tablet':'tablet-icon.png',
 * 'tablet@2':'tablet-retina.png',
 * 'icon':'desktop.ico'
 * });
 * 
 * The image size is 57/114 px for the phone and 72/144 px for the tablet.
 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
 * 
 * On Android, these icons may or may not be used by the device. Chances can be improved by adding glare effect, rounded corners, setting the file name to end with "-precomposed.png", and setting the homeIconPrecomposed property to true.
 * 
 * @returns {any} Value of property <code>homeIcon</code>
 * 
 * @public
 * 
 */
sap.m.SplitApp.prototype.getHomeIcon = function() { return null; };

/**
 * Returns a metadata object for class sap.m.SplitApp.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.SplitApp.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sets a new value for property {@link #getHomeIcon homeIcon}.
 * 
 * Represents the icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * Note that only the first attempt to set the homeIcon is executed, subsequent settings are ignored.
 * The icon must be in PNG format. The property can either store the URL of one single icon or an object holding icon URLs for the different required sizes.
 * Note that if single icon is used for all devices, when scaled, its quality can regress.
 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon.
 * For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting as the file can contain different images for different resolutions.
 * 
 * One example is:
 * 
 * app.setHomeIcon({
 * 'phone':'phone-icon.png',
 * 'phone@2':'phone-retina.png',
 * 'tablet':'tablet-icon.png',
 * 'tablet@2':'tablet-retina.png',
 * 'icon':'desktop.ico'
 * });
 * 
 * The image size is 57/114 px for the phone and 72/144 px for the tablet.
 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
 * 
 * On Android, these icons may or may not be used by the device. Chances can be improved by adding glare effect, rounded corners, setting the file name to end with "-precomposed.png", and setting the homeIconPrecomposed property to true.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oHomeIcon New value for property <code>homeIcon</code>
 * @returns {sap.m.SplitApp} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitApp.prototype.setHomeIcon = function(oHomeIcon) { return new sap.m.SplitApp(); };


// ---- sap.m.SplitAppMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.SplitAppMode.toString = function() { return ""; };

// ---- sap.m.SplitContainer --------------------------------------------------------------------------

/**
 * Constructor for a new SplitContainer.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDefaultTransitionNameDetail defaultTransitionNameDetail} : string (default: slide)</li>
 * <li>{@link #getDefaultTransitionNameMaster defaultTransitionNameMaster} : string (default: slide)</li>
 * <li>{@link #getMode mode} : sap.m.SplitAppMode (default: ShowHideMode)</li>
 * <li>{@link #getMasterButtonText masterButtonText} : string</li>
 * <li>{@link #getMasterButtonTooltip masterButtonTooltip} : string</li>
 * <li>{@link #getBackgroundColor backgroundColor} : string</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMasterPages masterPages} : sap.ui.core.Control[]</li>
 * <li>{@link #getDetailPages detailPages} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getInitialDetail initialDetail} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * <li>{@link #getInitialMaster initialMaster} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:masterNavigate masterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterMasterNavigate afterMasterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:masterButton masterButton} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeMasterOpen beforeMasterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterMasterOpen afterMasterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeMasterClose beforeMasterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterMasterClose afterMasterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:detailNavigate detailNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterDetailNavigate afterDetailNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * SplitContainer maintains two NavContainers if running on tablet or desktop and one NavContainer - on phone.
 * The display of the master NavContainer depends on the portrait/landscape mode of the device and the mode of SplitContainer.
 * 
 * NOTE: This control must be rendered as a full screen control in order to make the show/hide master area work properly.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer = function(sId,mSettings) {};
/**
 * Fires when navigation between two pages in detail area has completed.
 * NOTE: In case of animated transitions this event is fired with some delay after the "navigate" event.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page, which had been displayed before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page, which had been displayed before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page, which is now displayed after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page, which is now displayed after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Determines whether the "to" page (more precisely: a control with the ID of the page,
 * which has been navigated to) has not been displayed/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Determines whether was a forward navigation, triggered by to().
 * @param {boolean} oControlEvent.getParameters.isBack Determines whether this was a back navigation, triggered by back().
 * @param {boolean} oControlEvent.getParameters.isBackToTop Determines whether this was a navigation to the root page, triggered by backToTop().
 * @param {boolean} oControlEvent.getParameters.isBackToPage Determines whether this was a navigation to a specific page, triggered by backToPage().
 * @param {string} oControlEvent.getParameters.direction Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
 * @public
 * 
 */
sap.m.SplitContainer.prototype.afterDetailNavigate = function(oControlEvent) {  };

/**
 * Fires when the master area is fully closed after the animation (if any).
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SplitContainer.prototype.afterMasterClose = function(oControlEvent) {  };

/**
 * Fires when navigation between two pages in master area has completed.
 * NOTE: In case of animated transitions this event is fired with some delay after the navigate event.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page, which had been displayed before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page, which had been displayed before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page, which is now displayed after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page, which is now displayed after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page, which has been navigated to)
 * has not been displayed/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Determines whether was a forward navigation, triggered by to().
 * @param {boolean} oControlEvent.getParameters.isBack Determines whether this was a back navigation, triggered by back().
 * @param {boolean} oControlEvent.getParameters.isBackToTop Determines whether this was a navigation to the root page, triggered by backToTop().
 * @param {boolean} oControlEvent.getParameters.isBackToPage Determines whether this was a navigation to a specific page, triggered by backToPage().
 * @param {string} oControlEvent.getParameters.direction Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
 * @public
 * 
 */
sap.m.SplitContainer.prototype.afterMasterNavigate = function(oControlEvent) {  };

/**
 * Fires when the master area is fully opened after animation if any.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SplitContainer.prototype.afterMasterOpen = function(oControlEvent) {  };

/**
 * Fires before the master area is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SplitContainer.prototype.beforeMasterClose = function(oControlEvent) {  };

/**
 * Fires before the master area is opened.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SplitContainer.prototype.beforeMasterOpen = function(oControlEvent) {  };

/**
 * Fires when navigation between two pages in detail area has been triggered.
 * The transition (if any) to the new page has not started yet.
 * NOTE: This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page, which was displayed before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page, which was displayed before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page, which will be displayed after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page, which will be displayed after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Determines whether the "to" page (more precisely: a control with the ID of the page,
 * which is currently navigated to) has not been displayed/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Determines whether this is a forward navigation, triggered by to().
 * @param {boolean} oControlEvent.getParameters.isBack Determines whether this is a back navigation, triggered by back().
 * @param {boolean} oControlEvent.getParameters.isBackToTop Determines whether this is a navigation to the root page, triggered by backToTop().
 * @param {boolean} oControlEvent.getParameters.isBackToPage Determines whether this was a navigation to a specific page, triggered by backToPage().
 * @param {string} oControlEvent.getParameters.direction Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detailNavigate = function(oControlEvent) {  };

/**
 * Fires when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.SplitContainer.prototype.masterButton = function(oControlEvent) {  };

/**
 * Fires when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page, which was displayed before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page, which was displayed before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page, which will be displayed after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page, which will be displayed after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Determines whether the "to" page (more precisely: a control with the ID of the page,
 * which is currently being navigated to) has not been displayed/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Determines whether this is a forward navigation, triggered by to().
 * @param {boolean} oControlEvent.getParameters.isBack Determines whether this is a back navigation, triggered by back().
 * @param {boolean} oControlEvent.getParameters.isBackToTop Determines whether this is a navigation to the root page, triggered by backToTop().
 * @param {boolean} oControlEvent.getParameters.isBackToPage Determines whether this was a navigation to a specific page, triggered by backToPage().
 * @param {string} oControlEvent.getParameters.direction Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
 * @public
 * 
 */
sap.m.SplitContainer.prototype.masterNavigate = function(oControlEvent) {  };

/**
 * Adds some detailPage to the aggregation {@link #getDetailPages detailPages}.
 * @param {sap.ui.core.Control}
 *            oDetailPage the detailPage to add; if empty, nothing is inserted
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.addDetailPage = function(oDetailPage) { return new sap.m.SplitContainer(); };

/**
 * Adds some masterPage to the aggregation {@link #getMasterPages masterPages}.
 * @param {sap.ui.core.Control}
 *            oMasterPage the masterPage to add; if empty, nothing is inserted
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.addMasterPage = function(oMasterPage) { return new sap.m.SplitContainer(); };

/**
 * Adds a content entity either to master area or detail area depending on the master parameter.
 * 
 * The method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App. So that the same code line can be reused.
 * 
 * @param {sap.ui.core.Control} oPage
 *         The content entities between which this SplitContainer navigates in either master area or detail area depending on the master parameter. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * @param {boolean} bMaster
 *         States if the page should be added to the master area. If it's set to false, the page is added to detail area.
 * @type sap.m.SplitContainer
 * @public
 * @since 1.11.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.addPage = function(oPage,bMaster) { return new sap.m.SplitContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterDetailNavigate afterDetailNavigate} event of this <code>sap.m.SplitContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
 * 
 * Fires when navigation between two pages in detail area has completed.
 * NOTE: In case of animated transitions this event is fired with some delay after the "navigate" event.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself
 * 
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachAfterDetailNavigate = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterMasterClose afterMasterClose} event of this <code>sap.m.SplitContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
 * 
 * Fires when the master area is fully closed after the animation (if any).
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself
 * 
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachAfterMasterClose = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterMasterNavigate afterMasterNavigate} event of this <code>sap.m.SplitContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
 * 
 * Fires when navigation between two pages in master area has completed.
 * NOTE: In case of animated transitions this event is fired with some delay after the navigate event.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself
 * 
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachAfterMasterNavigate = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterMasterOpen afterMasterOpen} event of this <code>sap.m.SplitContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
 * 
 * Fires when the master area is fully opened after animation if any.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself
 * 
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachAfterMasterOpen = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeMasterClose beforeMasterClose} event of this <code>sap.m.SplitContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
 * 
 * Fires before the master area is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself
 * 
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachBeforeMasterClose = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeMasterOpen beforeMasterOpen} event of this <code>sap.m.SplitContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
 * 
 * Fires before the master area is opened.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself
 * 
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachBeforeMasterOpen = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:detailNavigate detailNavigate} event of this <code>sap.m.SplitContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
 * 
 * Fires when navigation between two pages in detail area has been triggered.
 * The transition (if any) to the new page has not started yet.
 * NOTE: This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself
 * 
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachDetailNavigate = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:masterButton masterButton} event of this <code>sap.m.SplitContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
 * 
 * Fires when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself
 * 
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachMasterButton = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:masterNavigate masterNavigate} event of this <code>sap.m.SplitContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
 * 
 * Fires when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself
 * 
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.SplitContainer.prototype.attachMasterNavigate = function(oData,fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Navigates back to the previous detail page found in the history.
 * 
 * @param {object} oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as backData property. (The original data from the to() navigation will still be available as data property.)
 * 
 *         In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 *         For back navigation this can be used, for example, when returning from a detail page to transfer any settings done there.
 * 
 *         When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element, which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 *         In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.
 * 
 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.SplitContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.backDetail = function(oBackData,oTransitionParameter) { return new sap.m.SplitContainer(); };

/**
 * Navigates back to the previous master page which is found in the history.
 * 
 * @param {object} oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation.
 *         The event on the target page will contain this data object as backData property (the original data from the to() navigation will still be available as data property).
 * 
 *         In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 *         For back navigation this can be used, for example, when returning from a detail page to transfer any settings done there.
 * 
 *         When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element, which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 *         In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.
 * 
 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.SplitContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.backMaster = function(oBackData,oTransitionParameter) { return new sap.m.SplitContainer(); };

/**
 * Navigates back to the nearest previous page in the SplitContainer history with the given ID (if there is no such page among the previous pages, nothing happens).
 * The transition effect, which had been used to get to the current page is inverted and used for this navigation.
 * 
 * Calling this navigation method, first triggers the (cancelable) navigate event on the SplitContainer,
 * then the beforeHide pseudo event on the source page, beforeFirstShow (if applicable),
 * and beforeShow on the target page. Later, after the transition has completed,
 * the afterShow pseudo event is triggered on the target page and afterHide - on the page, which has been left.
 * The given backData object is available in the beforeFirstShow, beforeShow, and afterShow event objects as data
 * property. The original "data" object from the "to" navigation is also available in these event objects.
 * 
 * @param {string} sPageId
 *         The screen to which is being navigated to. The ID or the control itself can be given.
 * @param {object} oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation.
 *         The event on the target page will contain this data object as backData property. (the original data from the to() navigation will still be available as data property).
 * 
 *         In scenarios, where the entity triggering the navigation can't or shouldn't directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 *         For back navigation this can be used, for example, when returning from a detail page to transfer any settings done there.
 * 
 *         When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element, which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 *         In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.
 * 
 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.m.SplitContainer
 * @public
 * @since 1.10.0
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.backToPage = function(sPageId,oBackData,oTransitionParameters) { return new sap.m.SplitContainer(); };

/**
 * Navigates back to the initial/top level of Detail (this is the element aggregated as initialPage, or the first added element).
 * NOTE: If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * @param {object} oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as backData property (the original data from the to() navigation will still be available as data property).
 * 
 *         In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 *         For back navigation this can be used, for example, when returning from a detail page to transfer any settings done there.
 * 
 *         When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element, which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 *         In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.
 * 
 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.backToTopDetail = function(oBackData,oTransitionParameter) { return new sap.ui.core.Control(); };

/**
 * Navigates back to the initial/top level of Master (this is the element aggregated as "initialPage", or the first added element).
 * NOTE: If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * @param {object} oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 *         In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 *         For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 *         When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 *         In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.
 * 
 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.backToTopMaster = function(oBackData,oTransitionParameter) { return new sap.ui.core.Control(); };

/**
 * Destroys all the detailPages in the aggregation {@link #getDetailPages detailPages}.
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.destroyDetailPages = function() { return new sap.m.SplitContainer(); };

/**
 * Destroys all the masterPages in the aggregation {@link #getMasterPages masterPages}.
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.destroyMasterPages = function() { return new sap.m.SplitContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterDetailNavigate afterDetailNavigate} event of this <code>sap.m.SplitContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachAfterDetailNavigate = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterMasterClose afterMasterClose} event of this <code>sap.m.SplitContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachAfterMasterClose = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterMasterNavigate afterMasterNavigate} event of this <code>sap.m.SplitContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachAfterMasterNavigate = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterMasterOpen afterMasterOpen} event of this <code>sap.m.SplitContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachAfterMasterOpen = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeMasterClose beforeMasterClose} event of this <code>sap.m.SplitContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachBeforeMasterClose = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeMasterOpen beforeMasterOpen} event of this <code>sap.m.SplitContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachBeforeMasterOpen = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:detailNavigate detailNavigate} event of this <code>sap.m.SplitContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachDetailNavigate = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:masterButton masterButton} event of this <code>sap.m.SplitContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachMasterButton = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:masterNavigate masterNavigate} event of this <code>sap.m.SplitContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.detachMasterNavigate = function(fnFunction,oListener) { return new sap.m.SplitContainer(); };

/**
 * Creates a new subclass of class sap.m.SplitContainer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SplitContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterDetailNavigate afterDetailNavigate} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.from] The page, which had been displayed before navigation.
 * @param {string} [mParameters.fromId] The ID of the page, which had been displayed before navigation.
 * @param {sap.ui.core.Control} [mParameters.to] The page, which is now displayed after navigation.
 * @param {string} [mParameters.toId] The ID of the page, which is now displayed after navigation.
 * @param {boolean} [mParameters.firstTime] Determines whether the "to" page (more precisely: a control with the ID of the page,
 * which has been navigated to) has not been displayed/navigated to before.
 * @param {boolean} [mParameters.isTo] Determines whether was a forward navigation, triggered by to().
 * @param {boolean} [mParameters.isBack] Determines whether this was a back navigation, triggered by back().
 * @param {boolean} [mParameters.isBackToTop] Determines whether this was a navigation to the root page, triggered by backToTop().
 * @param {boolean} [mParameters.isBackToPage] Determines whether this was a navigation to a specific page, triggered by backToPage().
 * @param {string} [mParameters.direction] Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
 * 
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireAfterDetailNavigate = function(mParameters) { return new sap.m.SplitContainer(); };

/**
 * Fires event {@link #event:afterMasterClose afterMasterClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireAfterMasterClose = function(mParameters) { return new sap.m.SplitContainer(); };

/**
 * Fires event {@link #event:afterMasterNavigate afterMasterNavigate} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.from] The page, which had been displayed before navigation.
 * @param {string} [mParameters.fromId] The ID of the page, which had been displayed before navigation.
 * @param {sap.ui.core.Control} [mParameters.to] The page, which is now displayed after navigation.
 * @param {string} [mParameters.toId] The ID of the page, which is now displayed after navigation.
 * @param {boolean} [mParameters.firstTime] Whether the "to" page (more precisely: a control with the ID of the page, which has been navigated to)
 * has not been displayed/navigated to before.
 * @param {boolean} [mParameters.isTo] Determines whether was a forward navigation, triggered by to().
 * @param {boolean} [mParameters.isBack] Determines whether this was a back navigation, triggered by back().
 * @param {boolean} [mParameters.isBackToTop] Determines whether this was a navigation to the root page, triggered by backToTop().
 * @param {boolean} [mParameters.isBackToPage] Determines whether this was a navigation to a specific page, triggered by backToPage().
 * @param {string} [mParameters.direction] Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
 * 
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireAfterMasterNavigate = function(mParameters) { return new sap.m.SplitContainer(); };

/**
 * Fires event {@link #event:afterMasterOpen afterMasterOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireAfterMasterOpen = function(mParameters) { return new sap.m.SplitContainer(); };

/**
 * Fires event {@link #event:beforeMasterClose beforeMasterClose} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireBeforeMasterClose = function(mParameters) { return new sap.m.SplitContainer(); };

/**
 * Fires event {@link #event:beforeMasterOpen beforeMasterOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireBeforeMasterOpen = function(mParameters) { return new sap.m.SplitContainer(); };

/**
 * Fires event {@link #event:detailNavigate detailNavigate} to attached listeners.
 * 
 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.from] The page, which was displayed before the current navigation.
 * @param {string} [mParameters.fromId] The ID of the page, which was displayed before the current navigation.
 * @param {sap.ui.core.Control} [mParameters.to] The page, which will be displayed after the current navigation.
 * @param {string} [mParameters.toId] The ID of the page, which will be displayed after the current navigation.
 * @param {boolean} [mParameters.firstTime] Determines whether the "to" page (more precisely: a control with the ID of the page,
 * which is currently navigated to) has not been displayed/navigated to before.
 * @param {boolean} [mParameters.isTo] Determines whether this is a forward navigation, triggered by to().
 * @param {boolean} [mParameters.isBack] Determines whether this is a back navigation, triggered by back().
 * @param {boolean} [mParameters.isBackToTop] Determines whether this is a navigation to the root page, triggered by backToTop().
 * @param {boolean} [mParameters.isBackToPage] Determines whether this was a navigation to a specific page, triggered by backToPage().
 * @param {string} [mParameters.direction] Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
 * 
 * @returns {boolean} Whether or not to prevent the default action
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireDetailNavigate = function(mParameters) { return false; };

/**
 * Fires event {@link #event:masterButton masterButton} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireMasterButton = function(mParameters) { return new sap.m.SplitContainer(); };

/**
 * Fires event {@link #event:masterNavigate masterNavigate} to attached listeners.
 * 
 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.from] The page, which was displayed before the current navigation.
 * @param {string} [mParameters.fromId] The ID of the page, which was displayed before the current navigation.
 * @param {sap.ui.core.Control} [mParameters.to] The page, which will be displayed after the current navigation.
 * @param {string} [mParameters.toId] The ID of the page, which will be displayed after the current navigation.
 * @param {boolean} [mParameters.firstTime] Determines whether the "to" page (more precisely: a control with the ID of the page,
 * which is currently being navigated to) has not been displayed/navigated to before.
 * @param {boolean} [mParameters.isTo] Determines whether this is a forward navigation, triggered by to().
 * @param {boolean} [mParameters.isBack] Determines whether this is a back navigation, triggered by back().
 * @param {boolean} [mParameters.isBackToTop] Determines whether this is a navigation to the root page, triggered by backToTop().
 * @param {boolean} [mParameters.isBackToPage] Determines whether this was a navigation to a specific page, triggered by backToPage().
 * @param {string} [mParameters.direction] Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
 * 
 * @returns {boolean} Whether or not to prevent the default action
 * @protected
 * 
 */
sap.m.SplitContainer.prototype.fireMasterNavigate = function(mParameters) { return false; };

/**
 * Gets current value of property {@link #getBackgroundColor backgroundColor}.
 * 
 * Determines the background color of the SplitContainer. If set, this color overrides the default one,
 * which is defined by the theme (should only be used when really required).
 * Any configured background image will be placed above this colored background,
 * but any theme adaptation in the Theme Designer will override this setting.
 * Use the backgroundRepeat property to define whether this image should be stretched
 * to cover the complete SplitContainer or whether it should be tiled.
 * 
 * @returns {string} Value of property <code>backgroundColor</code>
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getBackgroundColor = function() { return ""; };

/**
 * Gets current value of property {@link #getBackgroundImage backgroundImage}.
 * 
 * Sets the background image of the SplitContainer. When set, this image overrides
 * the default background defined by the theme (should only be used when really required).
 * This background image will be placed above any color set for the background,
 * but any theme adaptation in the Theme Designer will override this image setting.
 * Use the backgroundRepeat property to define whether this image should be stretched
 * to cover the complete SplitContainer or whether it should be tiled.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>backgroundImage</code>
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getBackgroundImage = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getBackgroundOpacity backgroundOpacity}.
 * 
 * Defines the opacity of the background image - between 0 (fully transparent) and 1 (fully opaque).
 * This can be used to improve the content visibility by making the background image partly transparent.
 * 
 * Default value is <code>1</code>.
 * @returns {float} Value of property <code>backgroundOpacity</code>
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getBackgroundOpacity = function() { return 0.0; };

/**
 * Gets current value of property {@link #getBackgroundRepeat backgroundRepeat}.
 * 
 * Defines whether the background image (if configured) is proportionally stretched
 * to cover the whole SplitContainer (false) or whether it should be tiled (true).
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>backgroundRepeat</code>
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getBackgroundRepeat = function() { return false; };

/**
 * Returns the current displayed detail page.
 * 
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.getCurrentDetailPage = function() { return new sap.ui.core.Control(); };

/**
 * Returns the current displayed master page.
 * 
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.getCurrentMasterPage = function() { return new sap.ui.core.Control(); };

/**
 * Returns the currently displayed page either in master area or in detail area.
 * When the parameter is set to true, the current page in master area is returned, otherwise, the current page in detail area is returned.
 * 
 * This method is provided mainly for API consistency between sap.m.SplitContainer and sap.m.App, so that the same code line can be reused.
 * 
 * @param {boolean} bMaster
 *         States if this function returns the current page in master area. If it's set to false, the current page in detail area will be returned.
 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.getCurrentPage = function(bMaster) { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getDefaultTransitionNameDetail defaultTransitionNameDetail}.
 * 
 * Determines the type of the transition/animation to apply when to() is called without defining the
 * transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.
 * 
 * Default value is <code>slide</code>.
 * @returns {string} Value of property <code>defaultTransitionNameDetail</code>
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getDefaultTransitionNameDetail = function() { return ""; };

/**
 * Gets current value of property {@link #getDefaultTransitionNameMaster defaultTransitionNameMaster}.
 * 
 * Determines the type of the transition/animation to apply when to() is called, without defining the
 * transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.
 * 
 * Default value is <code>slide</code>.
 * @returns {string} Value of property <code>defaultTransitionNameMaster</code>
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getDefaultTransitionNameMaster = function() { return ""; };

/**
 * Returns the page with the given ID in detail area. If there's no page that has the given ID, null is returned.
 * 
 * @param {string} sId The ID of the page that needs to be fetched.
 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.getDetailPage = function(sId) { return new sap.ui.core.Control(); };

/**
 * Gets content of aggregation {@link #getDetailPages detailPages}.
 * 
 * Determines the content entities, between which the SplitContainer navigates in detail area.
 * These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * These aggregated controls receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow},
 * they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getDetailPages = function() { return new Array(); };

/**
 * ID of the element which is the current target of the association {@link #getInitialDetail initialDetail}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getInitialDetail = function() { return new sap.ui.core.ID(); };

/**
 * ID of the element which is the current target of the association {@link #getInitialMaster initialMaster}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getInitialMaster = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getMasterButtonText masterButtonText}.
 * 
 * Determines the text displayed in master button, which has a default value "Navigation".
 * This text is only displayed in iOS platform and the icon from the current page in detail area is
 * displayed in the master button for the other platforms.
 * The master button is shown/hidden depending on the orientation of the device and whether
 * the master area is opened or not. SplitContainer manages the show/hide of the master button by itself
 * only when the pages added to the detail area are sap.m.Page with built-in header or sap.m.Page
 * with built-in header, which is wrapped by one or several sap.ui.core.mvc.View.
 * Otherwise, the show/hide of master button needs to be managed by the application.
 * 
 * @returns {string} Value of property <code>masterButtonText</code>
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getMasterButtonText = function() { return ""; };

/**
 * Gets current value of property {@link #getMasterButtonTooltip masterButtonTooltip}.
 * 
 * Specifies the tooltip of the master button. If the tooltip is not specified,
 * the title of the page, which is displayed is the master part, is set as tooltip to the master button.
 * 
 * @returns {string} Value of property <code>masterButtonTooltip</code>
 * @since 1.48
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getMasterButtonTooltip = function() { return ""; };

/**
 * Returns the page with the given ID in master area (if there's no page that has the given ID, null is returned).
 * 
 * @param {string} sId
 *         The ID of the page that needs to be fetched
 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.getMasterPage = function(sId) { return new sap.ui.core.Control(); };

/**
 * Gets content of aggregation {@link #getMasterPages masterPages}.
 * 
 * Determines the content entities, between which the SplitContainer navigates in master area.
 * These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * These aggregated controls receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow},
 * they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getMasterPages = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.SplitContainer.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.SplitContainer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMode mode}.
 * 
 * Defines whether the master page will always be displayed (in portrait and landscape mode - StretchCompressMode),
 * or if it should be hidden when in portrait mode (ShowHideMode). Default is ShowHideMode.
 * Other possible values are Hide (Master is always hidden) and Popover (master is displayed in popover).
 * 
 * Default value is <code>ShowHideMode</code>.
 * @returns {sap.m.SplitAppMode} Value of property <code>mode</code>
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.getMode = function() { return new sap.m.SplitAppMode(); };

/**
 * Returns the page with the given ID from either master area, or detail area depending on the master parameter (if there's no page that has the given ID, null is returned).
 * 
 * @param {string} sId
 *         The ID of the page that needs to be fetched
 * @param {boolean} bMaster
 *         If the page with given ID should be fetched from the master area. If it's set to false, the page will be fetched from detail area.
 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.getPage = function(sId,bMaster) { return new sap.ui.core.Control(); };

/**
 * Returns the previous page (the page, from which the user drilled down to the current page with to()).
 * Note: this is not the page, which the user has seen before, but the page which is the target of the next back() navigation.
 * If there is no previous page, "undefined" is returned.
 * 
 * @param {boolean} bMaster
 *         States if this function returns the previous page in master area. If it's set to false, the previous page in detail area will be returned.
 * @type sap.ui.core.Control
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.getPreviousPage = function(bMaster) { return new sap.ui.core.Control(); };

/**
 * Used to hide the master page when in ShowHideMode and the device is in portrait mode.
 * 
 * @type sap.m.SplitContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.hideMaster = function() { return new sap.m.SplitContainer(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getDetailPages detailPages}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oDetailPage The detailPage whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.indexOfDetailPage = function(oDetailPage) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getMasterPages masterPages}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oMasterPage The masterPage whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.indexOfMasterPage = function(oMasterPage) { return 0; };

/**
 * Inserts a detailPage into the aggregation {@link #getDetailPages detailPages}.
 * 
 * @param {sap.ui.core.Control}
 *            oDetailPage the detailPage to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the detailPage should be inserted at; for
 *              a negative value of <code>iIndex</code>, the detailPage is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the detailPage is inserted at
 *              the last position
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.insertDetailPage = function(oDetailPage,iIndex) { return new sap.m.SplitContainer(); };

/**
 * Inserts a masterPage into the aggregation {@link #getMasterPages masterPages}.
 * 
 * @param {sap.ui.core.Control}
 *            oMasterPage the masterPage to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the masterPage should be inserted at; for
 *              a negative value of <code>iIndex</code>, the masterPage is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the masterPage is inserted at
 *              the last position
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.insertMasterPage = function(oMasterPage,iIndex) { return new sap.m.SplitContainer(); };

/**
 * Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.
 * 
 * This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark and then wants to navigate up in the drilldown hierarchy.
 * Normally, such a back navigation would not be possible as there is no previous page in the SplitContainer's history stack.
 * 
 * @param {string} sPageId
 *         The ID of the control/page/screen, which is inserted into the history stack. The respective control must be aggregated by the SplitContainer, otherwise this will cause an error.
 * @param {string} sTransitionName
 *         The type of the transition/animation, which would have been used to navigate from the (inserted) previous page to the current page. When navigating back, the inverse animation will be applied.
 *         This parameter can be omitted; then the default value is "slide" (horizontal movement from the right).
 * @param {object} oData
 *         This optional object can carry any payload data which would have been given to the inserted previous page if the user would have done a normal forward navigation to it.
 * @type sap.m.SplitContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.insertPreviousPage = function(sPageId,sTransitionName,oData) { return new sap.m.SplitContainer(); };

/**
 * 
 * Returns whether master area is currently displayed on the screen.
 * In desktop browser or tablet, this method returns true when master area is displayed on the screen, regardless if in portrait or landscape mode.
 * On mobile phone devices, this method returns true when the currently displayed page is from the pages, which are added to the master area, otherwise, it returns false.
 * 
 * @type boolean
 * @public
 * @since 1.16.5
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.isMasterShown = function() { return false; };

/**
 * Removes all the controls from the aggregation {@link #getDetailPages detailPages}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.removeAllDetailPages = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getMasterPages masterPages}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.removeAllMasterPages = function() { return new Array(); };

/**
 * Removes a detailPage from the aggregation {@link #getDetailPages detailPages}.
 * 
 * @param {int | string | sap.ui.core.Control} vDetailPage The detailPage to remove or its index or id
 * @returns {sap.ui.core.Control} The removed detailPage or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.removeDetailPage = function(vDetailPage) { return new sap.ui.core.Control(); };

/**
 * Removes a masterPage from the aggregation {@link #getMasterPages masterPages}.
 * 
 * @param {int | string | sap.ui.core.Control} vMasterPage The masterPage to remove or its index or id
 * @returns {sap.ui.core.Control} The removed masterPage or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.removeMasterPage = function(vMasterPage) { return new sap.ui.core.Control(); };

/**
 * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
 * 
 * Determines the background color of the SplitContainer. If set, this color overrides the default one,
 * which is defined by the theme (should only be used when really required).
 * Any configured background image will be placed above this colored background,
 * but any theme adaptation in the Theme Designer will override this setting.
 * Use the backgroundRepeat property to define whether this image should be stretched
 * to cover the complete SplitContainer or whether it should be tiled.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sBackgroundColor New value for property <code>backgroundColor</code>
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setBackgroundColor = function(sBackgroundColor) { return new sap.m.SplitContainer(); };

/**
 * Sets a new value for property {@link #getBackgroundImage backgroundImage}.
 * 
 * Sets the background image of the SplitContainer. When set, this image overrides
 * the default background defined by the theme (should only be used when really required).
 * This background image will be placed above any color set for the background,
 * but any theme adaptation in the Theme Designer will override this image setting.
 * Use the backgroundRepeat property to define whether this image should be stretched
 * to cover the complete SplitContainer or whether it should be tiled.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sBackgroundImage New value for property <code>backgroundImage</code>
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setBackgroundImage = function(sBackgroundImage) { return new sap.m.SplitContainer(); };

/**
 * Sets a new value for property {@link #getBackgroundOpacity backgroundOpacity}.
 * 
 * Defines the opacity of the background image - between 0 (fully transparent) and 1 (fully opaque).
 * This can be used to improve the content visibility by making the background image partly transparent.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>1</code>.
 * @param {float} fBackgroundOpacity New value for property <code>backgroundOpacity</code>
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setBackgroundOpacity = function(fBackgroundOpacity) { return new sap.m.SplitContainer(); };

/**
 * Sets a new value for property {@link #getBackgroundRepeat backgroundRepeat}.
 * 
 * Defines whether the background image (if configured) is proportionally stretched
 * to cover the whole SplitContainer (false) or whether it should be tiled (true).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bBackgroundRepeat New value for property <code>backgroundRepeat</code>
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.2
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setBackgroundRepeat = function(bBackgroundRepeat) { return new sap.m.SplitContainer(); };

/**
 * Sets a new value for property {@link #getDefaultTransitionNameDetail defaultTransitionNameDetail}.
 * 
 * Determines the type of the transition/animation to apply when to() is called without defining the
 * transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>slide</code>.
 * @param {string} sDefaultTransitionNameDetail New value for property <code>defaultTransitionNameDetail</code>
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setDefaultTransitionNameDetail = function(sDefaultTransitionNameDetail) { return new sap.m.SplitContainer(); };

/**
 * Sets a new value for property {@link #getDefaultTransitionNameMaster defaultTransitionNameMaster}.
 * 
 * Determines the type of the transition/animation to apply when to() is called, without defining the
 * transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>slide</code>.
 * @param {string} sDefaultTransitionNameMaster New value for property <code>defaultTransitionNameMaster</code>
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setDefaultTransitionNameMaster = function(sDefaultTransitionNameMaster) { return new sap.m.SplitContainer(); };

/**
 * Sets the associated {@link #getInitialDetail initialDetail}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oInitialDetail ID of an element which becomes the new target of this initialDetail association; alternatively, an element instance may be given
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setInitialDetail = function(oInitialDetail) { return new sap.m.SplitContainer(); };

/**
 * Sets the associated {@link #getInitialMaster initialMaster}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oInitialMaster ID of an element which becomes the new target of this initialMaster association; alternatively, an element instance may be given
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setInitialMaster = function(oInitialMaster) { return new sap.m.SplitContainer(); };

/**
 * Sets a new value for property {@link #getMasterButtonText masterButtonText}.
 * 
 * Determines the text displayed in master button, which has a default value "Navigation".
 * This text is only displayed in iOS platform and the icon from the current page in detail area is
 * displayed in the master button for the other platforms.
 * The master button is shown/hidden depending on the orientation of the device and whether
 * the master area is opened or not. SplitContainer manages the show/hide of the master button by itself
 * only when the pages added to the detail area are sap.m.Page with built-in header or sap.m.Page
 * with built-in header, which is wrapped by one or several sap.ui.core.mvc.View.
 * Otherwise, the show/hide of master button needs to be managed by the application.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sMasterButtonText New value for property <code>masterButtonText</code>
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setMasterButtonText = function(sMasterButtonText) { return new sap.m.SplitContainer(); };

/**
 * Sets a new value for property {@link #getMasterButtonTooltip masterButtonTooltip}.
 * 
 * Specifies the tooltip of the master button. If the tooltip is not specified,
 * the title of the page, which is displayed is the master part, is set as tooltip to the master button.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sMasterButtonTooltip New value for property <code>masterButtonTooltip</code>
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setMasterButtonTooltip = function(sMasterButtonTooltip) { return new sap.m.SplitContainer(); };

/**
 * Sets a new value for property {@link #getMode mode}.
 * 
 * Defines whether the master page will always be displayed (in portrait and landscape mode - StretchCompressMode),
 * or if it should be hidden when in portrait mode (ShowHideMode). Default is ShowHideMode.
 * Other possible values are Hide (Master is always hidden) and Popover (master is displayed in popover).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>ShowHideMode</code>.
 * @param {sap.m.SplitAppMode} sMode New value for property <code>mode</code>
 * @returns {sap.m.SplitContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SplitContainer.prototype.setMode = function(sMode) { return new sap.m.SplitContainer(); };

/**
 * Used to make the master page visible when in ShowHideMode and the device is in portrait mode.
 * 
 * @type sap.m.SplitContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.showMaster = function() { return new sap.m.SplitContainer(); };

/**
 * Navigates to the given page inside the SplitContainer.
 * The navigation is done inside the master area if the page has been added,
 * otherwise, it tries to do the page navigation in the detail area.
 * 
 * @param {string} sPageId
 *         The screen to which we are navigating to. The ID or the control itself can be given.
 * @param {string} sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default value is "slide" (horizontal movement from the right).
 *         Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 *         None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} oData
 *         This optional object can carry any payload data which should be made available to the target page. The beforeShow event on the target page will contain this data object as data property.
 * 
 *         Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 *         When the transitionParameters object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameters
 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 *         For a proper parameter order, the "data" parameter must be given when the transitionParameters parameter is used (it can be given as "null").
 * 
 *         NOTE: It depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 *         The "show", "slide" and "fade" transitions do not use any parameter.
 * @type sap.m.SplitContainer
 * @public
 * @since 1.10.0
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.to = function(sPageId,sTransitionName,oData,oTransitionParameters) { return new sap.m.SplitContainer(); };

/**
 * Navigates to a given detail page.
 * 
 * @param {string} sPageId
 * @param {string} sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 *         Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 *         None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} oData
 *         This optional object can carry any payload data which should be made available to the target page. The beforeShow event on the target page will contain this data object as data property.
 * 
 *         Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 *         When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameter
 *         This optional object can contain additional information for the transition function, like the DOM element, which triggered the transition or the desired transition duration.
 * 
 *         For a proper parameter order, the data parameter must be given when the transitionParameters parameter is used (it can be given as "null").
 * 
 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 *         The "show", "slide" and "fade" transitions do not use any parameter.
 * @type sap.m.SplitContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.toDetail = function(sPageId,sTransitionName,oData,oTransitionParameter) { return new sap.m.SplitContainer(); };

/**
 * Navigates to a given master page.
 * 
 * @param {string} sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default value is "slide" (horizontal movement from the right).
 *         Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 *         None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} oData
 *         Since version 1.7.1. This optional object can carry any payload data which should be made available to the target page. The beforeShow event on the target page will contain this data object as data property.
 * 
 *         Use case: in scenarios where the entity triggering the navigation can't or shouldn't directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 *         When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} oTransitionParameters
 *         Since version 1.7.1. This optional object can contain additional information for the transition function, like the DOM element, which triggered the transition or the desired transition duration.
 * 
 *         For a proper parameter order, the data parameter must be given when the transitionParameters parameter is used (it can be given as "null").
 * 
 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 *         The "show", "slide" and "fade" transitions do not use any parameter.
 * @type sap.m.SplitContainer
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SplitContainer.prototype.toMaster = function(sPageId,sTransitionName,oData,oTransitionParameters) { return new sap.m.SplitContainer(); };


// ---- sap.m.StandardListItem --------------------------------------------------------------------------

/**
 * Constructor for a new StandardListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconInset iconInset} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getAdaptTitleSize adaptTitleSize} : boolean (default: true)</li>
 * <li>{@link #getTitleTextDirection titleTextDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getInfoTextDirection infoTextDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 * 
 * @param {string} [sId] Id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <code>sap.m.StandardListItem</code> is a list item providing the most common use cases, e.g. image, title and description.
 * @extends sap.m.ListItemBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.StandardListItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.StandardListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.StandardListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getActiveIcon activeIcon}.
 * 
 * Defines the icon that is shown while the list item is pressed.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>activeIcon</code>
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getAdaptTitleSize adaptTitleSize}.
 * 
 * By default, the title size adapts to the available space and gets bigger if the description is empty. If you have list items with and without descriptions, this results in titles with different sizes. In this case, it can be better to switch the size adaption off by setting this property to <code>false</code>.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>adaptTitleSize</code>
 * @since 1.16.3
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getAdaptTitleSize = function() { return false; };

/**
 * Gets current value of property {@link #getDescription description}.
 * 
 * Defines the additional information for the title.
 * <b>Note:</b> This is only visible when the <code>title</code> property is not empty.
 * 
 * @returns {string} Value of property <code>description</code>
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getDescription = function() { return ""; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Defines the list item icon.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, one or more requests are sent to get the density perfect version of the icon if the given version of the icon doesn't exist on the server.
 * <b>Note:<b> If bandwidth is a key factor for the application, set this value to <code>false</code>.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconDensityAware</code>
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getIconDensityAware = function() { return false; };

/**
 * Gets current value of property {@link #getIconInset iconInset}.
 * 
 * Defines the indentation of the icon. If set to <code>false</code>, the icon will not be shown as embedded. Instead it will take the full height of the list item.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconInset</code>
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getIconInset = function() { return false; };

/**
 * Gets current value of property {@link #getInfo info}.
 * 
 * Defines an additional information text.
 * 
 * @returns {string} Value of property <code>info</code>
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getInfo = function() { return ""; };

/**
 * Gets current value of property {@link #getInfoState infoState}.
 * 
 * Defines the state of the information text, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>infoState</code>
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getInfoState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getInfoTextDirection infoTextDirection}.
 * 
 * Defines the <code>info</code> directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>infoTextDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getInfoTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Returns a metadata object for class sap.m.StandardListItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.StandardListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Defines the title of the list item.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getTitleTextDirection titleTextDirection}.
 * 
 * Defines the <code>title</code> text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>titleTextDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.getTitleTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Sets a new value for property {@link #getActiveIcon activeIcon}.
 * 
 * Defines the icon that is shown while the list item is pressed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sActiveIcon New value for property <code>activeIcon</code>
 * @returns {sap.m.StandardListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.StandardListItem(); };

/**
 * Sets a new value for property {@link #getAdaptTitleSize adaptTitleSize}.
 * 
 * By default, the title size adapts to the available space and gets bigger if the description is empty. If you have list items with and without descriptions, this results in titles with different sizes. In this case, it can be better to switch the size adaption off by setting this property to <code>false</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bAdaptTitleSize New value for property <code>adaptTitleSize</code>
 * @returns {sap.m.StandardListItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.3
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setAdaptTitleSize = function(bAdaptTitleSize) { return new sap.m.StandardListItem(); };

/**
 * Sets a new value for property {@link #getDescription description}.
 * 
 * Defines the additional information for the title.
 * <b>Note:</b> This is only visible when the <code>title</code> property is not empty.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sDescription New value for property <code>description</code>
 * @returns {sap.m.StandardListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setDescription = function(sDescription) { return new sap.m.StandardListItem(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Defines the list item icon.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.StandardListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setIcon = function(sIcon) { return new sap.m.StandardListItem(); };

/**
 * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, one or more requests are sent to get the density perfect version of the icon if the given version of the icon doesn't exist on the server.
 * <b>Note:<b> If bandwidth is a key factor for the application, set this value to <code>false</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware New value for property <code>iconDensityAware</code>
 * @returns {sap.m.StandardListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.StandardListItem(); };

/**
 * Sets a new value for property {@link #getIconInset iconInset}.
 * 
 * Defines the indentation of the icon. If set to <code>false</code>, the icon will not be shown as embedded. Instead it will take the full height of the list item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconInset New value for property <code>iconInset</code>
 * @returns {sap.m.StandardListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setIconInset = function(bIconInset) { return new sap.m.StandardListItem(); };

/**
 * Sets a new value for property {@link #getInfo info}.
 * 
 * Defines an additional information text.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sInfo New value for property <code>info</code>
 * @returns {sap.m.StandardListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setInfo = function(sInfo) { return new sap.m.StandardListItem(); };

/**
 * Sets a new value for property {@link #getInfoState infoState}.
 * 
 * Defines the state of the information text, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.core.ValueState} sInfoState New value for property <code>infoState</code>
 * @returns {sap.m.StandardListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setInfoState = function(sInfoState) { return new sap.m.StandardListItem(); };

/**
 * Sets a new value for property {@link #getInfoTextDirection infoTextDirection}.
 * 
 * Defines the <code>info</code> directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sInfoTextDirection New value for property <code>infoTextDirection</code>
 * @returns {sap.m.StandardListItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setInfoTextDirection = function(sInfoTextDirection) { return new sap.m.StandardListItem(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Defines the title of the list item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.StandardListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setTitle = function(sTitle) { return new sap.m.StandardListItem(); };

/**
 * Sets a new value for property {@link #getTitleTextDirection titleTextDirection}.
 * 
 * Defines the <code>title</code> text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTitleTextDirection New value for property <code>titleTextDirection</code>
 * @returns {sap.m.StandardListItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.StandardListItem.prototype.setTitleTextDirection = function(sTitleTextDirection) { return new sap.m.StandardListItem(); };


// ---- sap.m.StandardTile --------------------------------------------------------------------------

/**
 * Constructor for a new StandardTile.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getType type} : sap.m.StandardTileType (default: None)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Tile#constructor sap.m.Tile}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The StandardTile control is displayed in the tile container.
 * @extends sap.m.Tile
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.StandardTile = function(sId,mSettings) {};
/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.StandardTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.StandardTile(); };

/**
 * Creates a new subclass of class sap.m.StandardTile with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Tile.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.StandardTile.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getActiveIcon activeIcon}.
 * 
 * Defines the active icon of the StandardTile.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>activeIcon</code>
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.getActiveIcon = function() { return new sap.ui.core.URI(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Gets the icon of the StandardTile control.
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.getIcon = function() {  };

/**
 * Gets current value of property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is key for the application, set this value to false.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>iconDensityAware</code>
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.getIconDensityAware = function() { return false; };

/**
 * Gets current value of property {@link #getInfo info}.
 * 
 * Defines the description of the StandardTile.
 * 
 * @returns {string} Value of property <code>info</code>
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.getInfo = function() { return ""; };

/**
 * Gets current value of property {@link #getInfoState infoState}.
 * 
 * Defines the color of the info text. Possible values are Error, Warning, Success and so on.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>infoState</code>
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.getInfoState = function() { return new sap.ui.core.ValueState(); };

/**
 * Returns a metadata object for class sap.m.StandardTile.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.StandardTile.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getNumber number}.
 * 
 * Defines the number field of the StandardTile.
 * 
 * @returns {string} Value of property <code>number</code>
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.getNumber = function() { return ""; };

/**
 * Gets current value of property {@link #getNumberUnit numberUnit}.
 * 
 * Defines the number units qualifier of the StandardTile.
 * 
 * @returns {string} Value of property <code>numberUnit</code>
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.getNumberUnit = function() { return ""; };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Defines the title of the StandardTile.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * Defines the type of the StandardTile.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.m.StandardTileType} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.getType = function() { return new sap.m.StandardTileType(); };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getActiveIcon activeIcon}.
 * 
 * Defines the active icon of the StandardTile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sActiveIcon New value for property <code>activeIcon</code>
 * @returns {sap.m.StandardTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.setActiveIcon = function(sActiveIcon) { return new sap.m.StandardTile(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Defines the icon of the StandardTile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.StandardTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.setIcon = function(sIcon) { return new sap.m.StandardTile(); };

/**
 * Sets a new value for property {@link #getIconDensityAware iconDensityAware}.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is key for the application, set this value to false.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bIconDensityAware New value for property <code>iconDensityAware</code>
 * @returns {sap.m.StandardTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.setIconDensityAware = function(bIconDensityAware) { return new sap.m.StandardTile(); };

/**
 * Sets a new value for property {@link #getInfo info}.
 * 
 * Defines the description of the StandardTile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sInfo New value for property <code>info</code>
 * @returns {sap.m.StandardTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.setInfo = function(sInfo) { return new sap.m.StandardTile(); };

/**
 * Sets a new value for property {@link #getInfoState infoState}.
 * 
 * Defines the color of the info text. Possible values are Error, Warning, Success and so on.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.core.ValueState} sInfoState New value for property <code>infoState</code>
 * @returns {sap.m.StandardTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.setInfoState = function(sInfoState) { return new sap.m.StandardTile(); };

/**
 * Sets a new value for property {@link #getNumber number}.
 * 
 * Defines the number field of the StandardTile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sNumber New value for property <code>number</code>
 * @returns {sap.m.StandardTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.setNumber = function(sNumber) { return new sap.m.StandardTile(); };

/**
 * Sets a new value for property {@link #getNumberUnit numberUnit}.
 * 
 * Defines the number units qualifier of the StandardTile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sNumberUnit New value for property <code>numberUnit</code>
 * @returns {sap.m.StandardTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.setNumberUnit = function(sNumberUnit) { return new sap.m.StandardTile(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Defines the title of the StandardTile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.StandardTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.setTitle = function(sTitle) { return new sap.m.StandardTile(); };

/**
 * Sets a new value for property {@link #getType type}.
 * 
 * Defines the type of the StandardTile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.m.StandardTileType} sType New value for property <code>type</code>
 * @returns {sap.m.StandardTile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardTile.prototype.setType = function(sType) { return new sap.m.StandardTile(); };


// ---- sap.m.StandardTileType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.StandardTileType.toString = function() { return ""; };

// ---- sap.m.StandardTreeItem --------------------------------------------------------------------------

/**
 * Constructor for a new StandardTreeItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string (default: )</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.TreeItemBase#constructor sap.m.TreeItemBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>sap.m.StandardTreeItem</code> is a tree item providing a title, image, etc.
 * @extends sap.m.TreeItemBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.42.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.StandardTreeItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.StandardTreeItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.TreeItemBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.StandardTreeItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Defines the tree item icon.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.StandardTreeItem.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Returns a metadata object for class sap.m.StandardTreeItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.StandardTreeItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Defines the title of the item.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.StandardTreeItem.prototype.getTitle = function() { return ""; };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Defines the tree item icon.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.StandardTreeItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardTreeItem.prototype.setIcon = function(sIcon) { return new sap.m.StandardTreeItem(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Defines the title of the item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.StandardTreeItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StandardTreeItem.prototype.setTitle = function(sTitle) { return new sap.m.StandardTreeItem(); };


// ---- sap.m.StepInput --------------------------------------------------------------------------

/**
 * Constructor for a new StepInput.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMin min} : float</li>
 * <li>{@link #getMax max} : float</li>
 * <li>{@link #getStep step} : float (default: 1)</li>
 * <li>{@link #getLargerStep largerStep} : float (default: 2)</li>
 * <li>{@link #getValue value} : float (default: 0)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getRequired required} : boolean (default: false)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getDisplayValuePrecision displayValuePrecision} : int (default: 0)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>StepInput</code> control allows the user to change the input values with predefined increments (steps).
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.40
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.StepInput = function(sId,mSettings) {};
/**
 * Is fired when one of the following happens: <br>
 * <ol>
 *  <li>the text in the input has changed and the focus leaves the input field or the enter key
 *  is pressed.</li>
 *  <li>One of the decrement or increment buttons is pressed</li>
 * </ol>
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new <code>value</code> of the <code>control</code>.
 * @public
 * 
 */
sap.m.StepInput.prototype.change = function(oControlEvent) {  };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.StepInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.StepInput(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.StepInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.StepInput(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.m.StepInput</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.StepInput</code> itself.
 * 
 * Is fired when one of the following happens: <br>
 * <ol>
 *  <li>the text in the input has changed and the focus leaves the input field or the enter key
 *  is pressed.</li>
 *  <li>One of the decrement or increment buttons is pressed</li>
 * </ol>
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.StepInput</code> itself
 * 
 * @returns {sap.m.StepInput} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.StepInput.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.StepInput(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.m.StepInput</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.StepInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.StepInput(); };

/**
 * Creates a new subclass of class sap.m.StepInput with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.StepInput.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:change change} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.value] The new <code>value</code> of the <code>control</code>.
 * 
 * @returns {sap.m.StepInput} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.StepInput.prototype.fireChange = function(mParameters) { return new sap.m.StepInput(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getDisplayValuePrecision displayValuePrecision}.
 * 
 * Determines the number of digits after the decimal point.
 * 
 * The value should be between 0 (default) and 20.
 * In case the value is not valid it will be set to the default value.
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>displayValuePrecision</code>
 * @since 1.46
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getDisplayValuePrecision = function() { return 0; };

/**
 * Gets current value of property {@link #getEditable editable}.
 * 
 * Defines whether the control can be modified by the user or not.
 * <b>Note:</b> A user can tab to the non-editable control, highlight it, and copy the text from it.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>editable</code>
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getEditable = function() { return false; };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Indicates whether the user can interact with the control or not.
 * <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getLargerStep largerStep}.
 * 
 * Increases/decreases the value with a larger value than the set step only when using the PageUp/PageDown keys.
 * Default value is 2 times larger than the set step.
 * 
 * Default value is <code>2</code>.
 * @returns {float} Value of property <code>largerStep</code>
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getLargerStep = function() { return 0.0; };

/**
 * Gets current value of property {@link #getMax max}.
 * 
 * Sets the maximum possible value of the defined range.
 * 
 * @returns {float} Value of property <code>max</code>
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getMax = function() { return 0.0; };

/**
 * Returns a metadata object for class sap.m.StepInput.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.StepInput.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMin min}.
 * 
 * Sets the minimum possible value of the defined range.
 * 
 * @returns {float} Value of property <code>min</code>
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getMin = function() { return 0.0; };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * Defines the name of the control for the purposes of form submission.
 * 
 * @returns {string} Value of property <code>name</code>
 * @since 1.44.15
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getName = function() { return ""; };

/**
 * Gets current value of property {@link #getPlaceholder placeholder}.
 * 
 * Defines a short hint intended to aid the user with data entry when the control has no value.
 * 
 * @returns {string} Value of property <code>placeholder</code>
 * @since 1.44.15
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getPlaceholder = function() { return ""; };

/**
 * Gets current value of property {@link #getRequired required}.
 * 
 * Indicates that user input is required. This property is only needed for accessibility purposes when a single relationship between
 * the field and a label (see aggregation <code>labelFor</code> of <code>sap.m.Label</code>) cannot be established
 * (e.g. one label should label multiple fields).
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>required</code>
 * @since 1.44.15
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getRequired = function() { return false; };

/**
 * Gets current value of property {@link #getStep step}.
 * 
 * Increases/decreases the value of the input.
 * <ul><b>Note:</b> <li>The value of the <code>step</code> property should not contain more digits after the decimal point than what is set to the <code>displayValuePrecision</code> property, as it may lead to an increase/decrease that is not visible for the user. For example, if the <code>value</code> is set to 1.22 and the <code>displayValuePrecision</code> is set to one digit after the decimal, the user will see 1.2. In this case, if the the <code>value</code> of the <code>step</code> property is set to 1.005 and the user selects <code>increase</code>, the resulting value will increase to 1.2261 but the displayed value will remain as 1.2 as it will be rounded to the first digit after the decimal point.</li> <li>Depending on what is set for the <code>value</code> and the <code>displayValuePrecision</code> properties, it is possible the displayed value to be rounded to a higher number, for example to 3.0 when the actual value is 2.99.</li></ul>
 * 
 * Default value is <code>1</code>.
 * @returns {float} Value of property <code>step</code>
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getStep = function() { return 0.0; };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * Determines the value of the <code>StepInput</code> and can be set initially from the app developer.
 * 
 * Default value is <code>0</code>.
 * @returns {float} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getValue = function() { return 0.0; };

/**
 * Gets current value of property {@link #getValueState valueState}.
 * 
 * Accepts the core enumeration ValueState.type that supports <code>None</code>, <code>Error</code>, <code>Warning</code> and <code>Success</code>.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>valueState</code>
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getValueState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the control.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Indicates whether the user can interact with the control or not.
 * <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.StepInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.setEnabled = function(bEnabled) { return new sap.m.StepInput(); };

/**
 * Sets a new value for property {@link #getLargerStep largerStep}.
 * 
 * Increases/decreases the value with a larger value than the set step only when using the PageUp/PageDown keys.
 * Default value is 2 times larger than the set step.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>2</code>.
 * @param {float} fLargerStep New value for property <code>largerStep</code>
 * @returns {sap.m.StepInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.setLargerStep = function(fLargerStep) { return new sap.m.StepInput(); };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * Defines the name of the control for the purposes of form submission.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.m.StepInput} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.15
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.setName = function(sName) { return new sap.m.StepInput(); };

/**
 * Sets a new value for property {@link #getPlaceholder placeholder}.
 * 
 * Defines a short hint intended to aid the user with data entry when the control has no value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sPlaceholder New value for property <code>placeholder</code>
 * @returns {sap.m.StepInput} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.15
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.setPlaceholder = function(sPlaceholder) { return new sap.m.StepInput(); };

/**
 * Sets a new value for property {@link #getRequired required}.
 * 
 * Indicates that user input is required. This property is only needed for accessibility purposes when a single relationship between
 * the field and a label (see aggregation <code>labelFor</code> of <code>sap.m.Label</code>) cannot be established
 * (e.g. one label should label multiple fields).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bRequired New value for property <code>required</code>
 * @returns {sap.m.StepInput} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.15
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.setRequired = function(bRequired) { return new sap.m.StepInput(); };

/**
 * Sets a new value for property {@link #getStep step}.
 * 
 * Increases/decreases the value of the input.
 * <ul><b>Note:</b> <li>The value of the <code>step</code> property should not contain more digits after the decimal point than what is set to the <code>displayValuePrecision</code> property, as it may lead to an increase/decrease that is not visible for the user. For example, if the <code>value</code> is set to 1.22 and the <code>displayValuePrecision</code> is set to one digit after the decimal, the user will see 1.2. In this case, if the the <code>value</code> of the <code>step</code> property is set to 1.005 and the user selects <code>increase</code>, the resulting value will increase to 1.2261 but the displayed value will remain as 1.2 as it will be rounded to the first digit after the decimal point.</li> <li>Depending on what is set for the <code>value</code> and the <code>displayValuePrecision</code> properties, it is possible the displayed value to be rounded to a higher number, for example to 3.0 when the actual value is 2.99.</li></ul>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>1</code>.
 * @param {float} fStep New value for property <code>step</code>
 * @returns {sap.m.StepInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.setStep = function(fStep) { return new sap.m.StepInput(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width of the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.StepInput} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.StepInput.prototype.setWidth = function(sWidth) { return new sap.m.StepInput(); };


// ---- sap.m.StringFilterOperator --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.StringFilterOperator.toString = function() { return ""; };

// ---- sap.m.SuggestionItem --------------------------------------------------------------------------

/**
 * Constructor for a new SuggestionItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : string (default: )</li>
 * <li>{@link #getDescription description} : string (default: )</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Display suggestion list items.
 * 
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * @since 1.34
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.SuggestionItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.SuggestionItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.SuggestionItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getDescription description}.
 * 
 * Additional text of type string, optionally to be displayed along with this item.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>description</code>
 * 
 * @public
 * 
 */
sap.m.SuggestionItem.prototype.getDescription = function() { return ""; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * The icon belonging to this list item instance.
 * This can be a URI to an image or an icon font URI.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.SuggestionItem.prototype.getIcon = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.SuggestionItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.SuggestionItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Return suggestion text. By default, it is the value of the <code>text</code> property.
 * 
 * Subclasses may override this function.
 * 
 * @returns {string} suggestion text.
 * @protected
 * 
 */
sap.m.SuggestionItem.prototype.getSuggestionText = function() { return ""; };

/**
 * Produces the HTML of the suggestion item and writes it to render-output-buffer.
 * 
 * Subclasses may override this function.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager The <code>RenderManager</code>
 * @param {sap.m.SuggestionItem} oItem The item which should be rendered
 * @param {string} sSearch The search text that should be emphasized
 * @param {boolean} bSelected The item is selected
 * @protected
 * 
 */
sap.m.SuggestionItem.prototype.render = function(oRenderManager,oItem,sSearch,bSelected) {  };

/**
 * Sets a new value for property {@link #getDescription description}.
 * 
 * Additional text of type string, optionally to be displayed along with this item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sDescription New value for property <code>description</code>
 * @returns {sap.m.SuggestionItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SuggestionItem.prototype.setDescription = function(sDescription) { return new sap.m.SuggestionItem(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * The icon belonging to this list item instance.
 * This can be a URI to an image or an icon font URI.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sIcon New value for property <code>icon</code>
 * @returns {sap.m.SuggestionItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.SuggestionItem.prototype.setIcon = function(sIcon) { return new sap.m.SuggestionItem(); };


// ---- sap.m.SwipeDirection --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.SwipeDirection.toString = function() { return ""; };

// ---- sap.m.Switch --------------------------------------------------------------------------

/**
 * Constructor for a new Switch.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getState state} : boolean (default: false)</li>
 * <li>{@link #getCustomTextOn customTextOn} : string (default: )</li>
 * <li>{@link #getCustomTextOff customTextOff} : string (default: )</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getName name} : string (default: )</li>
 * <li>{@link #getType type} : sap.m.SwitchType (default: Default)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * A switch is a user interface control on mobile devices that is used for change between binary states. The user can also drag the button handle or tap to change the state.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Switch = function(sId,mSettings) {};
/**
 * Triggered when a switch changes the state.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.state The new state of the switch.
 * @public
 * 
 */
sap.m.Switch.prototype.change = function(oControlEvent) {  };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.Switch} Reference to <code>this</code> in order to allow method chaining
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.Switch(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.m.Switch</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Switch</code> itself.
 * 
 * Triggered when a switch changes the state.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Switch</code> itself
 * 
 * @returns {sap.m.Switch} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Switch.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.Switch(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.m.Switch</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Switch} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.Switch(); };

/**
 * Creates a new subclass of class sap.m.Switch with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Switch.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:change change} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.state] The new state of the switch.
 * 
 * @returns {sap.m.Switch} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Switch.prototype.fireChange = function(mParameters) { return new sap.m.Switch(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getCustomTextOff customTextOff}.
 * 
 * Custom text for the "OFF" state.
 * 
 * "OFF" translated to the current language is the default value.
 * Beware that the given text will be cut off after three characters.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>customTextOff</code>
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.getCustomTextOff = function() { return ""; };

/**
 * Gets current value of property {@link #getCustomTextOn customTextOn}.
 * 
 * Custom text for the "ON" state.
 * 
 * "ON" translated to the current language is the default value.
 * Beware that the given text will be cut off after three characters.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>customTextOn</code>
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.getCustomTextOn = function() { return ""; };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Whether the switch is enabled.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.getEnabled = function() { return false; };

/**
 * Returns a metadata object for class sap.m.Switch.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Switch.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.getName = function() { return ""; };

/**
 * Gets current value of property {@link #getState state}.
 * 
 * A boolean value indicating whether the switch is on or off.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>state</code>
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.getState = function() { return false; };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * Type of a Switch. Possibles values "Default", "AcceptReject".
 * 
 * Default value is <code>Default</code>.
 * @returns {sap.m.SwitchType} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.getType = function() { return new sap.m.SwitchType(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * @since 1.27.0
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getCustomTextOff customTextOff}.
 * 
 * Custom text for the "OFF" state.
 * 
 * "OFF" translated to the current language is the default value.
 * Beware that the given text will be cut off after three characters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sCustomTextOff New value for property <code>customTextOff</code>
 * @returns {sap.m.Switch} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.setCustomTextOff = function(sCustomTextOff) { return new sap.m.Switch(); };

/**
 * Sets a new value for property {@link #getCustomTextOn customTextOn}.
 * 
 * Custom text for the "ON" state.
 * 
 * "ON" translated to the current language is the default value.
 * Beware that the given text will be cut off after three characters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sCustomTextOn New value for property <code>customTextOn</code>
 * @returns {sap.m.Switch} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.setCustomTextOn = function(sCustomTextOn) { return new sap.m.Switch(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Whether the switch is enabled.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.Switch} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.setEnabled = function(bEnabled) { return new sap.m.Switch(); };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.m.Switch} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.setName = function(sName) { return new sap.m.Switch(); };

/**
 * Change the switch state between on and off.
 * 
 * @param {boolean} bState
 * @public
 * @return {sap.m.Switch} <code>this</code> to allow method chaining.
 * 
 */
sap.m.Switch.prototype.setState = function(bState) { return new sap.m.Switch(); };

/**
 * Sets a new value for property {@link #getType type}.
 * 
 * Type of a Switch. Possibles values "Default", "AcceptReject".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Default</code>.
 * @param {sap.m.SwitchType} sType New value for property <code>type</code>
 * @returns {sap.m.Switch} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Switch.prototype.setType = function(sType) { return new sap.m.Switch(); };


// ---- sap.m.SwitchType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.SwitchType.toString = function() { return ""; };

// ---- sap.m.TabContainer --------------------------------------------------------------------------

/**
 * Constructor for a new <code>TabContainer</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowAddNewButton showAddNewButton} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.TabContainerItem[]</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedItem selectedItem} : (sap.ui.core.ID | sap.m.TabContainerItem)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:itemClose itemClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:itemSelect itemSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:addNewButtonPress addNewButtonPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>TabContainer</code> control represents a collection of tabs with associated content.
 * 
 * The <code>TabContainer</code> is a full-page container that takes 100% of the parent width and height.
 * As the control is expected to occupy the the whole parent, it should be the only child of its parent.
 * 
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.34
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TabContainer = function(sId,mSettings) {};
/**
 * Fired when <code>Add New Tab</code> button is pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.TabContainer.prototype.addNewButtonPress = function(oControlEvent) {  };

/**
 * Fired when an item is closed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.TabContainerItem} oControlEvent.getParameters.item The item to be closed.
 * @public
 * 
 */
sap.m.TabContainer.prototype.itemClose = function(oControlEvent) {  };

/**
 * Fired when an item is pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.TabContainerItem} oControlEvent.getParameters.item The selected item.
 * @public
 * 
 */
sap.m.TabContainer.prototype.itemSelect = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:addNewButtonPress addNewButtonPress} event of this <code>sap.m.TabContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TabContainer</code> itself.
 * 
 * Fired when <code>Add New Tab</code> button is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TabContainer</code> itself
 * 
 * @returns {sap.m.TabContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TabContainer.prototype.attachAddNewButtonPress = function(oData,fnFunction,oListener) { return new sap.m.TabContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:itemClose itemClose} event of this <code>sap.m.TabContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TabContainer</code> itself.
 * 
 * Fired when an item is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TabContainer</code> itself
 * 
 * @returns {sap.m.TabContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TabContainer.prototype.attachItemClose = function(oData,fnFunction,oListener) { return new sap.m.TabContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:itemSelect itemSelect} event of this <code>sap.m.TabContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TabContainer</code> itself.
 * 
 * Fired when an item is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TabContainer</code> itself
 * 
 * @returns {sap.m.TabContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TabContainer.prototype.attachItemSelect = function(oData,fnFunction,oListener) { return new sap.m.TabContainer(); };

/**
 * Binds aggregation {@link #getItems items} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.TabContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TabContainer.prototype.bindItems = function(oBindingInfo) { return new sap.m.TabContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:addNewButtonPress addNewButtonPress} event of this <code>sap.m.TabContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TabContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TabContainer.prototype.detachAddNewButtonPress = function(fnFunction,oListener) { return new sap.m.TabContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:itemClose itemClose} event of this <code>sap.m.TabContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TabContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TabContainer.prototype.detachItemClose = function(fnFunction,oListener) { return new sap.m.TabContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:itemSelect itemSelect} event of this <code>sap.m.TabContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TabContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TabContainer.prototype.detachItemSelect = function(fnFunction,oListener) { return new sap.m.TabContainer(); };

/**
 * Creates a new subclass of class sap.m.TabContainer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TabContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:addNewButtonPress addNewButtonPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.TabContainer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.TabContainer.prototype.fireAddNewButtonPress = function(mParameters) { return new sap.m.TabContainer(); };

/**
 * Fires event {@link #event:itemClose itemClose} to attached listeners.
 * 
 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.TabContainerItem} [mParameters.item] The item to be closed.
 * 
 * @returns {boolean} Whether or not to prevent the default action
 * @protected
 * 
 */
sap.m.TabContainer.prototype.fireItemClose = function(mParameters) { return false; };

/**
 * Fires event {@link #event:itemSelect itemSelect} to attached listeners.
 * 
 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.TabContainerItem} [mParameters.item] The selected item.
 * 
 * @returns {boolean} Whether or not to prevent the default action
 * @protected
 * 
 */
sap.m.TabContainer.prototype.fireItemSelect = function(mParameters) { return false; };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * The items displayed in the <code>TabContainer</code>.
 * 
 * @returns {sap.m.TabContainerItem[]}
 * 
 * @public
 * 
 */
sap.m.TabContainer.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.TabContainer.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.TabContainer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * ID of the element which is the current target of the association {@link #getSelectedItem selectedItem}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.TabContainer.prototype.getSelectedItem = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getShowAddNewButton showAddNewButton}.
 * 
 * Defines whether an <code>Add New Tab</code> button is displayed in the TabStrip.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showAddNewButton</code>
 * 
 * @public
 * 
 */
sap.m.TabContainer.prototype.getShowAddNewButton = function() { return false; };

/**
 * Checks for the provided <code>sap.m.TabContainerItem</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.TabContainerItem}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.TabContainer.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Removes an item from the aggregation named <code>items</code>.
 * 
 * @param vItem {int | string | sap.m.TabContainerItem} The item to remove or its index or ID
 * @returns {sap.m.TabContainerItem} The removed item or null
 * @public
 * 
 */
sap.m.TabContainer.prototype.removeItem = function(vItem) { return new sap.m.TabContainerItem(); };

/**
 * Unbinds aggregation {@link #getItems items} from model data.
 * @returns {sap.m.TabContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TabContainer.prototype.unbindItems = function() { return new sap.m.TabContainer(); };


// ---- sap.m.TabContainerItem --------------------------------------------------------------------------

/**
 * Constructor for a new <code>TabContainerItem</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string (default: )</li>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getModified modified} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:itemPropertyChanged itemPropertyChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * An item to be used in a TabContainer.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.34
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TabContainerItem = function(sId,mSettings) {};
/**
 * Sends information that some of the properties have changed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.TabContainerItem} oControlEvent.getParameters.itemChanged The item changed.
 * @param {string} oControlEvent.getParameters.propertyKey The key of the property.
 * @param {any} oControlEvent.getParameters.propertyValue The value of the property.
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.itemPropertyChanged = function(oControlEvent) {  };

/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.TabContainerItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.addContent = function(oContent) { return new sap.m.TabContainerItem(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:itemPropertyChanged itemPropertyChanged} event of this <code>sap.m.TabContainerItem</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TabContainerItem</code> itself.
 * 
 * Sends information that some of the properties have changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TabContainerItem</code> itself
 * 
 * @returns {sap.m.TabContainerItem} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.attachItemPropertyChanged = function(oData,fnFunction,oListener) { return new sap.m.TabContainerItem(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.TabContainerItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.destroyContent = function() { return new sap.m.TabContainerItem(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:itemPropertyChanged itemPropertyChanged} event of this <code>sap.m.TabContainerItem</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TabContainerItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.detachItemPropertyChanged = function(fnFunction,oListener) { return new sap.m.TabContainerItem(); };

/**
 * Creates a new subclass of class sap.m.TabContainerItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TabContainerItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:itemPropertyChanged itemPropertyChanged} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.TabContainerItem} [mParameters.itemChanged] The item changed.
 * @param {string} [mParameters.propertyKey] The key of the property.
 * @param {any} [mParameters.propertyValue] The value of the property.
 * 
 * @returns {sap.m.TabContainerItem} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.TabContainerItem.prototype.fireItemPropertyChanged = function(mParameters) { return new sap.m.TabContainerItem(); };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * The content displayed for this item.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.getContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * Determines the name of the item. Can be used as input for subsequent actions.
 * 
 * @returns {string} Value of property <code>key</code>
 * 
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.TabContainerItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.TabContainerItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getModified modified}.
 * 
 * Shows if a control is edited (default is false). Items that are marked as modified have a * symbol to indicate that they haven't been saved.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>modified</code>
 * 
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.getModified = function() { return false; };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * Determines the text to be displayed for the item.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.getName = function() { return ""; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.TabContainerItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.insertContent = function(oContent,iIndex) { return new sap.m.TabContainerItem(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * Determines the name of the item. Can be used as input for subsequent actions.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.m.TabContainerItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.setKey = function(sKey) { return new sap.m.TabContainerItem(); };

/**
 * Sets a new value for property {@link #getModified modified}.
 * 
 * Shows if a control is edited (default is false). Items that are marked as modified have a * symbol to indicate that they haven't been saved.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bModified New value for property <code>modified</code>
 * @returns {sap.m.TabContainerItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.setModified = function(bModified) { return new sap.m.TabContainerItem(); };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * Determines the text to be displayed for the item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.m.TabContainerItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.setName = function(sName) { return new sap.m.TabContainerItem(); };

/**
 * Overwrites the method in order to suppress invalidation for some properties.
 * 
 * @param sName {string} Property name to be set
 * @param vValue {boolean | string | object} Property value to be set
 * @param bSuppressInvalidation {boolean} Whether invalidation to be suppressed
 * @return {sap.m.TabContainerItem} This instance for chaining
 * @public
 * 
 */
sap.m.TabContainerItem.prototype.setProperty = function(sName,vValue,bSuppressInvalidation) { return new sap.m.TabContainerItem(); };


// ---- sap.m.Table --------------------------------------------------------------------------

/**
 * Constructor for a new Table.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.BackgroundDesign (default: Translucent)</li>
 * <li>{@link #getFixedLayout fixedLayout} : boolean (default: true)</li>
 * <li>{@link #getShowOverlay showOverlay} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getColumns columns} : sap.m.Column[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListBase#constructor sap.m.ListBase}
 * can be used as well.
 * 
 * @param {string} [sId] Id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <code>sap.m.Table</code> control provides a set of sophisticated and convenience functions for responsive table design.
 * To render the <code>sap.m.Table</code> properly, the order of the <code>columns</code> aggregation should match with the order of the items <code>cells</code> aggregation. Also <code>sap.m.Table</code> requires at least one visible <code>sap.m.Column</code> in <code>columns</code> aggregation.
 * For mobile devices, the recommended limit of table rows is 100 (based on 4 columns) to assure proper performance. To improve initial rendering on large tables, use the <code>growing</code> feature.
 * @extends sap.m.ListBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Table = function(sId,mSettings) {};
/**
 * Adds some column to the aggregation {@link #getColumns columns}.
 * @param {sap.m.Column}
 *            oColumn the column to add; if empty, nothing is inserted
 * @returns {sap.m.Table} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Table.prototype.addColumn = function(oColumn) { return new sap.m.Table(); };

/**
 * Destroys all the columns in the aggregation {@link #getColumns columns}.
 * @returns {sap.m.Table} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Table.prototype.destroyColumns = function() { return new sap.m.Table(); };

/**
 * Creates a new subclass of class sap.m.Table with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Table.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Sets the background style of the table. Depending on the theme, you can change the state of the background from <code>Solid</code> to <code>Translucent</code> or to <code>Transparent</code>.
 * 
 * Default value is <code>Translucent</code>.
 * @returns {sap.m.BackgroundDesign} Value of property <code>backgroundDesign</code>
 * 
 * @public
 * 
 */
sap.m.Table.prototype.getBackgroundDesign = function() { return new sap.m.BackgroundDesign(); };

/**
 * Getter for aggregation columns.
 * 
 * @param {Boolean} [bSort] set true to get the columns in an order that respects personalization settings
 * @returns {sap.m.Column[]} columns of the Table
 * @public
 * 
 */
sap.m.Table.prototype.getColumns = function(bSort) { return new Array(); };

/**
 * Gets current value of property {@link #getFixedLayout fixedLayout}.
 * 
 * Defines the algorithm to be used to layout the table cells, rows, and columns.
 * By default, a table is rendered with fixed layout algorithm. This means the horizontal layout only depends on the table's width and the width of the columns, not the contents of the cells. Cells in subsequent rows do not affect column widths. This allows a browser to layout the table faster than the auto table layout since the browser can begin to display the table once the first row has been analyzed.
 * 
 * When this property is set to <code>false</code>, <code>sap.m.Table</code> is rendered with auto layout algorithm. This means, the width of the table and its cells depends on the contents of the cells. The column width is set by the widest unbreakable content inside the cells. This can make the rendering slow, since the browser needs to read through all the content in the table before determining the final layout.
 * <b>Note:</b> Since <code>sap.m.Table</code> does not have its own scrollbars, setting <code>fixedLayout</code> to false can force the table to overflow, which may cause visual problems. It is suggested to use this property when a table has a few columns in wide screens or within the horizontal scroll container (e.g <code>sap.m.Dialog</code>) to handle overflow.
 * In auto layout mode the <code>width</code> property of <code>sap.m.Column</code> is taken into account as a minimum width.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>fixedLayout</code>
 * @since 1.22
 * 
 * @public
 * 
 */
sap.m.Table.prototype.getFixedLayout = function() { return false; };

/**
 * Returns a metadata object for class sap.m.Table.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Table.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowOverlay showOverlay}.
 * 
 * Setting this property to <code>true</code> will show an overlay on top of the table content and prevents the user interaction with it.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showOverlay</code>
 * @since 1.22.1
 * 
 * @public
 * 
 */
sap.m.Table.prototype.getShowOverlay = function() { return false; };

/**
 * Checks for the provided <code>sap.m.Column</code> in the aggregation {@link #getColumns columns}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Column}
 *           oColumn The column whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Table.prototype.indexOfColumn = function(oColumn) { return 0; };

/**
 * Inserts a column into the aggregation {@link #getColumns columns}.
 * 
 * @param {sap.m.Column}
 *            oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the column should be inserted at; for
 *              a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the column is inserted at
 *              the last position
 * @returns {sap.m.Table} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Table.prototype.insertColumn = function(oColumn,iIndex) { return new sap.m.Table(); };

/**
 * Removes all the controls from the aggregation {@link #getColumns columns}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Column[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Table.prototype.removeAllColumns = function() { return new Array(); };

/**
 * Removes a column from the aggregation {@link #getColumns columns}.
 * 
 * @param {int | string | sap.m.Column} vColumn The column to remove or its index or id
 * @returns {sap.m.Column} The removed column or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Table.prototype.removeColumn = function(vColumn) { return new sap.m.Column(); };

/**
 * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
 * 
 * Sets the background style of the table. Depending on the theme, you can change the state of the background from <code>Solid</code> to <code>Translucent</code> or to <code>Transparent</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Translucent</code>.
 * @param {sap.m.BackgroundDesign} sBackgroundDesign New value for property <code>backgroundDesign</code>
 * @returns {sap.m.Table} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Table.prototype.setBackgroundDesign = function(sBackgroundDesign) { return new sap.m.Table(); };

/**
 * Sets a new value for property {@link #getFixedLayout fixedLayout}.
 * 
 * Defines the algorithm to be used to layout the table cells, rows, and columns.
 * By default, a table is rendered with fixed layout algorithm. This means the horizontal layout only depends on the table's width and the width of the columns, not the contents of the cells. Cells in subsequent rows do not affect column widths. This allows a browser to layout the table faster than the auto table layout since the browser can begin to display the table once the first row has been analyzed.
 * 
 * When this property is set to <code>false</code>, <code>sap.m.Table</code> is rendered with auto layout algorithm. This means, the width of the table and its cells depends on the contents of the cells. The column width is set by the widest unbreakable content inside the cells. This can make the rendering slow, since the browser needs to read through all the content in the table before determining the final layout.
 * <b>Note:</b> Since <code>sap.m.Table</code> does not have its own scrollbars, setting <code>fixedLayout</code> to false can force the table to overflow, which may cause visual problems. It is suggested to use this property when a table has a few columns in wide screens or within the horizontal scroll container (e.g <code>sap.m.Dialog</code>) to handle overflow.
 * In auto layout mode the <code>width</code> property of <code>sap.m.Column</code> is taken into account as a minimum width.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bFixedLayout New value for property <code>fixedLayout</code>
 * @returns {sap.m.Table} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22
 * 
 * @public
 * 
 */
sap.m.Table.prototype.setFixedLayout = function(bFixedLayout) { return new sap.m.Table(); };

/**
 * Sets a new value for property {@link #getShowOverlay showOverlay}.
 * 
 * Setting this property to <code>true</code> will show an overlay on top of the table content and prevents the user interaction with it.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowOverlay New value for property <code>showOverlay</code>
 * @returns {sap.m.Table} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22.1
 * 
 * @public
 * 
 */
sap.m.Table.prototype.setShowOverlay = function(bShowOverlay) { return new sap.m.Table(); };


// ---- sap.m.TablePersoController --------------------------------------------------------------------------

/**
 * The TablePersoController can be used to connect a table that you want to provide
 * a personalization dialog for, with a persistence service such as one provided by
 * the unified shell.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize (default: 20rem)</li>
 * <li>{@link #getComponentName componentName} : string</li>
 * <li>{@link #getHasGrouping hasGrouping} : boolean (default: false)</li>
 * <li>{@link #getShowSelectAll showSelectAll} : boolean (default: true)</li>
 * <li>{@link #getShowResetAll showResetAll} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPersoService persoService} : Object</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getTable table} : (sap.ui.core.ID | sap.m.Table)</li>
 * <li>{@link #getTables tables} : (sap.ui.core.ID | sap.m.Table)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:personalizationsDone personalizationsDone} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * 
 * @param {string}
 * 			[sId] optional id for the new control; generated automatically if
 * 			no non-empty id is given Note: this can be omitted, no matter
 * 			whether <code>mSettings</code> will be given or not!
 * @param {object}
 * 			[mSettings] optional map/JSON-object with initial settings for the
 * 			new component instance
 * @public
 * 
 * @class Table Personalization Controller
 * @extends sap.ui.base.ManagedObject
 * @version 1.48.4
 * 
 */
sap.m.TablePersoController = function(sId,mSettings) {};
/**
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.TablePersoController.prototype.personalizationsDone = function(oControlEvent) {  };

/**
 * Activates the controller, i.e. tries to retrieve existing persisted
 * personalizations, creates a TablePersoDialog for the associated
 * table and attaches a close handler to apply the personalizations to
 * the table and persist them.
 * 
 * This method should be called when the table to be personalized knows
 * its columns. Usually, this is when that table's view has set its model,
 * which is typically done in the corresponding controller's init method.
 * For example
 * <pre><code>
 *  onInit: function () {
 * 
 * 		// set explored app's demo model on this sample
 * 		var oModel = new JSONModel(jQuery.sap.getModulePath("sap.ui.demo.mock", "/products.json"));
 * 		var oGroupingModel = new JSONModel({ hasGrouping: false});
 * 		this.getView().setModel(oModel);
 * 		this.getView().setModel(oGroupingModel, 'Grouping');
 * 
 * 		// init and activate controller
 * 		this._oTPC = new TablePersoController({
 * 			table: this.getView().byId("productsTable"),
 * 			//specify the first part of persistence ids e.g. 'demoApp-productsTable-dimensionsCol'
 * 			componentName: "demoApp",
 * 			persoService: DemoPersoService,
 * 		}).activate();
 * 	}
 * </code></pre>
 * 
 * 
 * @public
 * @return {sap.m.TablePersoController} the TablePersoController instance.
 * 
 */
sap.m.TablePersoController.prototype.activate = function() { return new sap.m.TablePersoController(); };

/**
 * Adds some table into the association {@link #getTables tables}.
 * 
 * @param {sap.ui.core.ID | sap.m.Table} vTable the tables to add; if empty, nothing is inserted
 * @returns {sap.m.TablePersoController} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.addTable = function(vTable) { return new sap.m.TablePersoController(); };

/**
 * Applies the personalizations by getting the existing personalizations
 * and adjusting to the table.
 * 
 * @param {sap.m.Table} oTable the table to be personalized.
 * @public
 * 
 */
sap.m.TablePersoController.prototype.applyPersonalizations = function(oTable) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:personalizationsDone personalizationsDone} event of this <code>sap.m.TablePersoController</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TablePersoController</code> itself.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TablePersoController</code> itself
 * 
 * @returns {sap.m.TablePersoController} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoController.prototype.attachPersonalizationsDone = function(oData,fnFunction,oListener) { return new sap.m.TablePersoController(); };

/**
 * Destroys the persoService in the aggregation {@link #getPersoService persoService}.
 * @returns {sap.m.TablePersoController} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.destroyPersoService = function() { return new sap.m.TablePersoController(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:personalizationsDone personalizationsDone} event of this <code>sap.m.TablePersoController</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TablePersoController} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.detachPersonalizationsDone = function(fnFunction,oListener) { return new sap.m.TablePersoController(); };

/**
 * Do some clean up: remove event delegates, etc
 * 
 * @protected
 * 
 */
sap.m.TablePersoController.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.m.TablePersoController with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TablePersoController.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:personalizationsDone personalizationsDone} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.TablePersoController} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.TablePersoController.prototype.firePersonalizationsDone = function(mParameters) { return new sap.m.TablePersoController(); };

/**
 * Gets current value of property {@link #getComponentName componentName}.
 * 
 * Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.
 * 
 * @returns {string} Value of property <code>componentName</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getComponentName = function() { return ""; };

/**
 * Gets current value of property {@link #getContentHeight contentHeight}.
 * 
 * Default value is <code>20rem</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>contentHeight</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getContentWidth contentWidth}.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>contentWidth</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getHasGrouping hasGrouping}.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>hasGrouping</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getHasGrouping = function() { return false; };

/**
 * Returns a metadata object for class sap.m.TablePersoController.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.TablePersoController.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getPersoService persoService}.
 * 
 * @returns {Object}
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getPersoService = function() { return null; };

/**
 * Gets current value of property {@link #getShowResetAll showResetAll}.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showResetAll</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getShowResetAll = function() { return false; };

/**
 * Gets current value of property {@link #getShowSelectAll showSelectAll}.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showSelectAll</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getShowSelectAll = function() { return false; };

/**
 * ID of the element which is the current target of the association {@link #getTable table}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getTable = function() { return new sap.ui.core.ID(); };

/**
 * Returns a  _tablePersoDialog instance if available. It can be NULL if
 * the controller has not been activated yet.
 * 
 * This function makes a private aggregate publicly accessable. This is
 * necessary for downward compatibility reasons: in the first versions
 * of the tablePersoProvider developers still worked with the TablePersoDialog
 * directly, which is now not necessary any longer.
 * 
 * @public
 * @return {sap.m.TablePersoDialog} the TablePersoDialog instance.
 * 
 */
sap.m.TablePersoController.prototype.getTablePersoDialog = function() { return new sap.m.TablePersoDialog(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getTables tables}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.getTables = function() { return new Array(); };

/**
 * Initializes the TablePersoController instance after creation.
 * 
 * @protected
 * 
 */
sap.m.TablePersoController.prototype.init = function() {  };

/**
 * Opens the TablePersoDialog, stores the personalized settings on close,
 * modifies the table columns, and sends them to the persistence service
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.openDialog = function() {  };

/**
 * Refresh the personalizations: reloads the personalization information from the table perso
 * provider, applies it to the controller's table and updates the controller's table perso dialog.
 * 
 * Use case for a 'refresh' call would be that the table which si personalized changed its columns
 * during runtime, after personalization has been activated.
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.refresh = function() {  };

/**
 * Removes all the controls in the association named {@link #getTables tables}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.removeAllTables = function() { return new Array(); };

/**
 * Removes an table from the association named {@link #getTables tables}.
 * @param {int | sap.ui.core.ID | sap.m.Table} vTable The table to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed table or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.removeTable = function(vTable) { return new sap.ui.core.ID(); };

/**
 * Persist the personalizations
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.savePersonalizations = function() {  };

/**
 * Using this method, the first part of tablePerso persistence ids can be
 * provided, in case the table's app does not provide that part itself.
 * 
 * If a component name is set using this method, it will be used, regardless of
 * whether the table's app has a different component name or not.
 * 
 * @param {string} sCompName the new component name.
 * @return {sap.m.TablePersoController} the TablePersoController instance.
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setComponentName = function(sCompName) { return new sap.m.TablePersoController(); };

/**
 * Reflector for the controller's 'contentHeight' property.
 * @param {sap.ui.core.CSSSize} sHeight the new height of the TablePersoDialog.
 * @return {sap.m.TablePersoController} the TablePersoController instance.
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setContentHeight = function(sHeight) { return new sap.m.TablePersoController(); };

/**
 * Reflector for the controller's 'contentWidth' property.
 * @param {sap.ui.core.CSSSize} sWidth the new width of the tablePersoDialog
 * @return {sap.m.TablePersoController} the TablePersoController instance.
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setContentWidth = function(sWidth) { return new sap.m.TablePersoController(); };

/**
 * Reflector for the controller's 'hasGrouping' property.
 * @param {boolean} bHasGrouping is the tablePersoDialog displayed in grouping mode or not.
 * @return {sap.m.TablePersoController} the TablePersoController instance.
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setHasGrouping = function(bHasGrouping) { return new sap.m.TablePersoController(); };

/**
 * Sets the aggregated {@link #getPersoService persoService}.
 * @param {Object} oPersoService The persoService to set
 * @returns {sap.m.TablePersoController} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setPersoService = function(oPersoService) { return new sap.m.TablePersoController(); };

/**
 * Reflector for the controller's 'showResetAll' property.
 * @param {boolean} bShowResetAll is the tablePersoDialog's 'UndoPersonalization' button displayed or not.
 * @return {sap.m.TablePersoController} the TablePersoController instance.
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setShowResetAll = function(bShowResetAll) { return new sap.m.TablePersoController(); };

/**
 * Reflector for the controller's 'showSelectAll' property.
 * @param {boolean} bShowSelectAll is the tablePersoDialog's 'Display All' checkbox displayed or not.
 * @return {sap.m.TablePersoController} the TablePersoController instance.
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setShowSelectAll = function(bShowSelectAll) { return new sap.m.TablePersoController(); };

/**
 * Sets the associated {@link #getTable table}.
 * @param {sap.ui.core.ID | sap.m.Table} oTable ID of an element which becomes the new target of this table association; alternatively, an element instance may be given
 * @returns {sap.m.TablePersoController} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TablePersoController.prototype.setTable = function(oTable) { return new sap.m.TablePersoController(); };


// ---- sap.m.TablePersoDialog --------------------------------------------------------------------------

/**
 * The TablePersoDialog can be used to display and allow modification of personalization settings relating to a Table. It displays the columns of the table that it refers to by using
 * <ul><li>The result of calling sap.m.TablePersoProvider's 'getCaption' callback if it is implemented and delivers a non-null value for a column</li>
 * <li>the column header control's 'text' property if no caption property is available</li>
 * <li>the column header control's 'title' property if neither 'text' nor 'caption' property are available</li>
 * <li>the column id is displayed as last fallback, if none of the above is at hand. In that case, a warning is logged. </li></ul>
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getPersoMap persoMap} : object</li>
 * <li>{@link #getColumnInfoCallback columnInfoCallback} : object</li>
 * <li>{@link #getInitialColumnState initialColumnState} : object</li>
 * <li>{@link #getHasGrouping hasGrouping} : boolean</li>
 * <li>{@link #getShowSelectAll showSelectAll} : boolean</li>
 * <li>{@link #getShowResetAll showResetAll} : boolean</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPersoService persoService} : Object</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getPersoDialogFor persoDialogFor} : (sap.ui.core.ID | sap.m.Table)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * 
 * @param {string}
 * 			[sId] optional id for the new control; generated automatically if
 * 			no non-empty id is given Note: this can be omitted, no matter
 * 			whether <code>mSettings</code> will be given or not!
 * @param {object}
 * 			[mSettings] optional map/JSON-object with initial settings for the
 * 			new component instance
 * @public
 * 
 * @class Table Personalization Dialog
 * @extends sap.ui.base.ManagedObject
 * @version 1.48.4
 * 
 */
sap.m.TablePersoDialog = function(sId,mSettings) {};
/**
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.cancel = function(oControlEvent) {  };

/**
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.confirm = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:cancel cancel} event of this <code>sap.m.TablePersoDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TablePersoDialog</code> itself.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TablePersoDialog</code> itself
 * 
 * @returns {sap.m.TablePersoDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.m.TablePersoDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:confirm confirm} event of this <code>sap.m.TablePersoDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TablePersoDialog</code> itself.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TablePersoDialog</code> itself
 * 
 * @returns {sap.m.TablePersoDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.attachConfirm = function(oData,fnFunction,oListener) { return new sap.m.TablePersoDialog(); };

/**
 * Destroys the persoService in the aggregation {@link #getPersoService persoService}.
 * @returns {sap.m.TablePersoDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.30.1
 * This aggregate is no longer used. It collided with the TablePersoController's
 * persoService reference
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.destroyPersoService = function() { return new sap.m.TablePersoDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:cancel cancel} event of this <code>sap.m.TablePersoDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TablePersoDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.detachCancel = function(fnFunction,oListener) { return new sap.m.TablePersoDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:confirm confirm} event of this <code>sap.m.TablePersoDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TablePersoDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.detachConfirm = function(fnFunction,oListener) { return new sap.m.TablePersoDialog(); };

/**
 * Creates a new subclass of class sap.m.TablePersoDialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TablePersoDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:cancel cancel} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.TablePersoDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.TablePersoDialog.prototype.fireCancel = function(mParameters) { return new sap.m.TablePersoDialog(); };

/**
 * Fires event {@link #event:confirm confirm} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.TablePersoDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.TablePersoDialog.prototype.fireConfirm = function(mParameters) { return new sap.m.TablePersoDialog(); };

/**
 * Gets current value of property {@link #getColumnInfoCallback columnInfoCallback}.
 * 
 * @returns {object} Value of property <code>columnInfoCallback</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getColumnInfoCallback = function() { return new Object(); };

/**
 * Gets current value of property {@link #getContentHeight contentHeight}.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>contentHeight</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getContentWidth contentWidth}.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>contentWidth</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getHasGrouping hasGrouping}.
 * 
 * @returns {boolean} Value of property <code>hasGrouping</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getHasGrouping = function() { return false; };

/**
 * Gets current value of property {@link #getInitialColumnState initialColumnState}.
 * 
 * @returns {object} Value of property <code>initialColumnState</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getInitialColumnState = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.m.TablePersoDialog.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.TablePersoDialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * ID of the element which is the current target of the association {@link #getPersoDialogFor persoDialogFor}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getPersoDialogFor = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getPersoMap persoMap}.
 * 
 * @returns {object} Value of property <code>persoMap</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getPersoMap = function() { return new Object(); };

/**
 * Gets content of aggregation {@link #getPersoService persoService}.
 * 
 * Refers to the service for reading and writing the personalization.
 * 
 * @returns {Object}
 * 
 * @deprecated Since version 1.30.1
 * This aggregate is no longer used. It collided with the TablePersoController's
 * persoService reference
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getPersoService = function() { return null; };

/**
 * Gets current value of property {@link #getShowResetAll showResetAll}.
 * 
 * @returns {boolean} Value of property <code>showResetAll</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getShowResetAll = function() { return false; };

/**
 * Gets current value of property {@link #getShowSelectAll showSelectAll}.
 * 
 * @returns {boolean} Value of property <code>showSelectAll</code>
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.getShowSelectAll = function() { return false; };

/**
 * Initializes the TablePersoDialog instance after creation.
 * 
 * @protected
 * 
 */
sap.m.TablePersoDialog.prototype.init = function() {  };

/**
 * Sets the content of the dialog, being list items representing
 * the associated table's column settings, and opens the dialog
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.open = function() {  };

/**
 * Returns the personalizations made. Currently supports
 * a 'columns' property which holds an array of settings,
 * one element per column in the associated table. The element
 * contains column-specific information as follows: id: column id;
 * order: new order; text: the column's header text that was displayed
 * in the dialog; visible: visibility (true or false).
 * 
 * @return {object} the personalization data
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.retrievePersonalizations = function() { return new Object(); };

/**
 * Sets a new value for property {@link #getColumnInfoCallback columnInfoCallback}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oColumnInfoCallback New value for property <code>columnInfoCallback</code>
 * @returns {sap.m.TablePersoDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setColumnInfoCallback = function(oColumnInfoCallback) { return new sap.m.TablePersoDialog(); };

/**
 * Sets a new value for property {@link #getContentHeight contentHeight}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sContentHeight New value for property <code>contentHeight</code>
 * @returns {sap.m.TablePersoDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setContentHeight = function(sContentHeight) { return new sap.m.TablePersoDialog(); };

/**
 * Sets a new value for property {@link #getContentWidth contentWidth}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sContentWidth New value for property <code>contentWidth</code>
 * @returns {sap.m.TablePersoDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setContentWidth = function(sContentWidth) { return new sap.m.TablePersoDialog(); };

/**
 * Setter to turn on/ switch off TablePersoDialog's grouping mode.
 * @param {boolean} bHasGrouping groping mode on or off.
 * @return {sap.m.TablePersoDialog} the TablePersoDialog instance.
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setHasGrouping = function(bHasGrouping) { return new sap.m.TablePersoDialog(); };

/**
 * Sets a new value for property {@link #getInitialColumnState initialColumnState}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oInitialColumnState New value for property <code>initialColumnState</code>
 * @returns {sap.m.TablePersoDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setInitialColumnState = function(oInitialColumnState) { return new sap.m.TablePersoDialog(); };

/**
 * Sets the associated {@link #getPersoDialogFor persoDialogFor}.
 * @param {sap.ui.core.ID | sap.m.Table} oPersoDialogFor ID of an element which becomes the new target of this persoDialogFor association; alternatively, an element instance may be given
 * @returns {sap.m.TablePersoDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setPersoDialogFor = function(oPersoDialogFor) { return new sap.m.TablePersoDialog(); };

/**
 * Sets a new value for property {@link #getPersoMap persoMap}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oPersoMap New value for property <code>persoMap</code>
 * @returns {sap.m.TablePersoDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setPersoMap = function(oPersoMap) { return new sap.m.TablePersoDialog(); };

/**
 * Sets the aggregated {@link #getPersoService persoService}.
 * @param {Object} oPersoService The persoService to set
 * @returns {sap.m.TablePersoDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.30.1
 * This aggregate is no longer used. It collided with the TablePersoController's
 * persoService reference
 * 
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setPersoService = function(oPersoService) { return new sap.m.TablePersoDialog(); };

/**
 * Setter to show/hide TablePersoDialog's 'Undo Personalization' button.
 * @param {boolean} bShowResetAll 'undo Personalization' button visible or not.
 * @return {sap.m.TablePersoDialog} the TablePersoDialog instance.
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setShowResetAll = function(bShowResetAll) { return new sap.m.TablePersoDialog(); };

/**
 * Setter to show/hide TablePersoDialog's 'selectAll' checkbox.
 * @param {boolean} bShowSelectAll selectAll checkbox visible or not.
 * @return {sap.m.TablePersoDialog} the TablePersoDialog instance.
 * @public
 * 
 */
sap.m.TablePersoDialog.prototype.setShowSelectAll = function(bShowSelectAll) { return new sap.m.TablePersoDialog(); };


// ---- sap.m.TablePersoProvider --------------------------------------------------------------------------

/**
 * This is an abstract TablePersoProvider, describing the interface for a real
 * TablePersoProvider.
 * 
 * 
 * @public
 * 
 * @class Table Personalization Provider
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @version 1.48.4
 * 
 */
sap.m.TablePersoProvider = function() {};
/**
 * Removes the personalization bundle
 * This must return a jQuery promise (see http://api.jquery.com/promise/)
 * @public
 * 
 */
sap.m.TablePersoProvider.prototype.delPersData = function() {  };

/**
 * Creates a new subclass of class sap.m.TablePersoProvider with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TablePersoProvider.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Callback function which can be used to determine the title of a given column
 * within the TablePersoDialog. As a default, the column header controls are
 * asked for their 'text' or 'title' property. This works in most cases, for example
 * if the header control is an sap.m.Label (has 'text' property) or an sap.m.ObjectListItem
 * (has 'title' property).
 * 
 * If the header control used in a column has neither 'text' nor 'title' property, or if you would like to
 * display a modified column name for a certain column, this callback function can be used.
 * 
 * If the callback delivers null for a column (which is the default implementation), the default
 * texts described above are displayed for that column in the TablePersoDialog.
 * 
 * In case neither the callback delivers null and neither 'text' nor ' title' property are at hand,
 * the TablePersoDialog will display the column id and a warning message is logged.
 * 
 * @param {sap.m.Column} oColumn column whose caption shall be determined
 * @public
 * 
 */
sap.m.TablePersoProvider.prototype.getCaption = function(oColumn) {  };

/**
 * Callback function which can be used to determine the group of a given column
 * within the TablePersoDialog. As a default, the columns are not assigned to a group.
 * 
 * This information is used to group the columns within the TablePersoDialog if the TablePersoController's
 * 'group' flag is set, otherwise, the groups are ignored.
 * 
 * @param {sap.m.Column} oColumn column whose group shall be determined
 * @public
 * 
 */
sap.m.TablePersoProvider.prototype.getGroup = function(oColumn) {  };

/**
 * Returns a metadata object for class sap.m.TablePersoProvider.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.TablePersoProvider.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Retrieves the personalization bundle.
 * This must return a jQuery promise (see http://api.jquery.com/promise/)
 * @public
 * 
 */
sap.m.TablePersoProvider.prototype.getPersData = function() {  };

/**
 * Initializes the TablePersoProvider instance after creation.
 * 
 * @protected
 * 
 */
sap.m.TablePersoProvider.prototype.init = function() {  };

/**
 * Resets user’s personalization for a given table so that ‘getPersData’ will
 * deliver its initial state. If no table is specified, all personalizations
 * of the currently logged on user are reset.
 * 
 * This must return a jQuery promise (see http://api.jquery.com/promise/)
 * @public
 * 
 */
sap.m.TablePersoProvider.prototype.resetPersData = function() {  };

/**
 * Stores the personalization bundle, overwriting any
 * previous bundle completely
 * This must return a jQuery promise (see http://api.jquery.com/promise/)
 * @param {object} oBundle
 * @public
 * 
 */
sap.m.TablePersoProvider.prototype.setPersData = function(oBundle) {  };


// ---- sap.m.TableSelectDialog --------------------------------------------------------------------------

/**
 * Constructor for a new TableSelectDialog.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: false)</li>
 * <li>{@link #getGrowingThreshold growingThreshold} : int</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getRememberSelections rememberSelections} : boolean (default: false)</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.ColumnListItem[] (default)</li>
 * <li>{@link #getColumns columns} : sap.m.Column[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A dialog to select items in a table containing multiple values and attributes.
 * <h3>Overview</h3>
 * The table select dialog helps users select items in a table-like structure with several attributes and values per item. A search fields helps narrow down the results.
 * <h3>Structure</h3>
 * The table select dialog consists of the following elements:
 * <ul>
 * <li> Search field - used to search enter search terms for a specific item.</li>
 * <li> Infobar (optional) - shows additional information for the current selection (i.e. total number of selected items).</li>
 * <li> Content - the table with the items.</li>
 * <li> Footer (optional) - a toolbar for actions.</li>
 * </ul>
 * Table select dialog supports multi-selection when the <code>multiSelect</code> property is set.
 * 
 * The selected items can be stored for later editing when the <code>rememberSelections</code> property is set.
 * <b>Note:<b> This property has to be set before the dialog is opened.
 * <h3>Usage</h3>
 * <h4>When to use:</h4>
 * <ul>
 * <li>You need to select one or more items from a comprehensive list that contains multiple attributes or values.</li>
 * </ul>
 * <h4>When not to use:</h4>
 * <ul>
 * <li>You need to select one item from a predefined set of options that contains only one value. Use a {@link sap.m.Select switch} control instead.</li>
 * <li>You need to select items within a query-based range. Use a {@link sap.ui.comp.valuehelpdialog.ValueHelpDialog value help} control instead.</li>
 * <li>You need to only filter a set of items. Use a {@link sap.ui.comp.filterbar.FilterBar filter bar} control instead.</li>
 * </ul>
 * <h3>Responsive Behavior</h3>
 * <ul>
 * <li>On smaller screens, the columns of the table wrap and build a list that shows all the information.</li>
 * </ul>
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TableSelectDialog = function(sId,mSettings) {};
/**
 * Sets the binding context for the internal table AND the current control so that both controls can be used with the context.
 * @overwrite
 * @public
 * @param {sap.ui.model.Context} oContext the new context
 * @param {string} sModelName The optional model name
 * @returns {sap.m.TableSelectDialog} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype._setBindingContext = undefined

/**
 * Sets the model for the internal table and the current control, so that both controls can be used with data binding.
 * @overwrite
 * @public
 * @param {sap.ui.Model} oModel The model that holds the data for the table
 * @param {string} sName The optional model name
 * @returns {sap.m.TableSelectDialog} This pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype._setModel = undefined

/**
 * Fires when the Cancel button is clicked.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.cancel = function(oControlEvent) {  };

/**
 * Fires when the dialog is confirmed by selecting an item in single-selection mode or by pressing the confirmation button in multi-selection mode. The items being selected are returned as event parameters.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.StandardListItem} oControlEvent.getParameters.selectedItem Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 * @param {sap.m.StandardListItem[]} oControlEvent.getParameters.selectedItems Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.
 * @param {string} oControlEvent.getParameters.selectedContexts Returns the binding contexts of the selected items including the non-visible items.
 * Note: In contrast to the parameter "selectedItems", this parameter includes the selected but NOT visible items (due to list filtering). An empty array is set for this parameter if no Databinding is used.
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.confirm = function(oControlEvent) {  };

/**
 * Fires when the value of the search field is changed by a user (for example at each key press).
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value Specifies the value entered in the search field.
 * @param {any} oControlEvent.getParameters.itemsBinding The Items binding of the Table Select Dialog.
 * Only available if the items aggregation is bound to a model.
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.liveChange = function(oControlEvent) {  };

/**
 * Fires when the search button has been clicked on dialog.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value Specifies the value entered in the search field.
 * @param {any} oControlEvent.getParameters.itemsBinding Determines the Items binding of the Table Select Dialog. Only available if the items aggregation is bound to a model.
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.search = function(oControlEvent) {  };

/**
 * Adds some column to the aggregation {@link #getColumns columns}.
 * @param {sap.m.Column}
 *            oColumn the column to add; if empty, nothing is inserted
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.addColumn = function(oColumn) { return new sap.m.TableSelectDialog(); };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.m.ColumnListItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.addItem = function(oItem) { return new sap.m.TableSelectDialog(); };

/**
 * Transfers method to the inner dialog: addStyleClass
 * @public
 * @override
 * @returns {sap.m.TableSelectDialog} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.addStyleClass = function() { return new sap.m.TableSelectDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:cancel cancel} event of this <code>sap.m.TableSelectDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TableSelectDialog</code> itself.
 * 
 * Fires when the Cancel button is clicked.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code> itself
 * 
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:confirm confirm} event of this <code>sap.m.TableSelectDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TableSelectDialog</code> itself.
 * 
 * Fires when the dialog is confirmed by selecting an item in single-selection mode or by pressing the confirmation button in multi-selection mode. The items being selected are returned as event parameters.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code> itself
 * 
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.attachConfirm = function(oData,fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:liveChange liveChange} event of this <code>sap.m.TableSelectDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TableSelectDialog</code> itself.
 * 
 * Fires when the value of the search field is changed by a user (for example at each key press).
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code> itself
 * 
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:search search} event of this <code>sap.m.TableSelectDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TableSelectDialog</code> itself.
 * 
 * Fires when the search button has been clicked on dialog.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code> itself
 * 
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.attachSearch = function(oData,fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Forwards aggregations with the name of items or columns to the internal table.
 * @overwrite
 * @protected
 * @param {string} sAggregationName The name for the binding
 * @param {object} oBindingInfo The configuration parameters for the binding
 * @returns {sap.m.TableSelectDialog} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.bindAggregation = function(sAggregationName,oBindingInfo) { return new sap.m.TableSelectDialog(); };

/**
 * Binds aggregation {@link #getColumns columns} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.bindColumns = function(oBindingInfo) { return new sap.m.TableSelectDialog(); };

/**
 * Binds aggregation {@link #getItems items} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.bindItems = function(oBindingInfo) { return new sap.m.TableSelectDialog(); };

/**
 * Destroys all the columns in the aggregation {@link #getColumns columns}.
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.destroyColumns = function() { return new sap.m.TableSelectDialog(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.destroyItems = function() { return new sap.m.TableSelectDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:cancel cancel} event of this <code>sap.m.TableSelectDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.detachCancel = function(fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:confirm confirm} event of this <code>sap.m.TableSelectDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.detachConfirm = function(fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:liveChange liveChange} event of this <code>sap.m.TableSelectDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:search search} event of this <code>sap.m.TableSelectDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.detachSearch = function(fnFunction,oListener) { return new sap.m.TableSelectDialog(); };

/**
 * Creates a new subclass of class sap.m.TableSelectDialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TableSelectDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:cancel cancel} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.TableSelectDialog.prototype.fireCancel = function(mParameters) { return new sap.m.TableSelectDialog(); };

/**
 * Fires event {@link #event:confirm confirm} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.StandardListItem} [mParameters.selectedItem] Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 * @param {sap.m.StandardListItem[]} [mParameters.selectedItems] Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.
 * @param {string} [mParameters.selectedContexts] Returns the binding contexts of the selected items including the non-visible items.
 * Note: In contrast to the parameter "selectedItems", this parameter includes the selected but NOT visible items (due to list filtering). An empty array is set for this parameter if no Databinding is used.
 * 
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.TableSelectDialog.prototype.fireConfirm = function(mParameters) { return new sap.m.TableSelectDialog(); };

/**
 * Fires event {@link #event:liveChange liveChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.value] Specifies the value entered in the search field.
 * @param {any} [mParameters.itemsBinding] The Items binding of the Table Select Dialog.
 * Only available if the items aggregation is bound to a model.
 * 
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.TableSelectDialog.prototype.fireLiveChange = function(mParameters) { return new sap.m.TableSelectDialog(); };

/**
 * Fires event {@link #event:search search} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.value] Specifies the value entered in the search field.
 * @param {any} [mParameters.itemsBinding] Determines the Items binding of the Table Select Dialog. Only available if the items aggregation is bound to a model.
 * 
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.TableSelectDialog.prototype.fireSearch = function(mParameters) { return new sap.m.TableSelectDialog(); };

/**
 * Gets current busy state.
 * @overwrite
 * @public
 * @returns {boolean} value of currtent busy state.
 * 
 */
sap.m.TableSelectDialog.prototype.getBusy = function() { return false; };

/**
 * Gets content of aggregation {@link #getColumns columns}.
 * 
 * The columns bindings.
 * 
 * @returns {sap.m.Column[]}
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getColumns = function() { return new Array(); };

/**
 * Retrieves content height of the select dialog {@link sap.m.Dialog}
 * @overwrite
 * @public
 * @returns {sap.ui.core.CSSSize} sHeight the content height of the internal dialog
 * 
 */
sap.m.TableSelectDialog.prototype.getContentHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Retrieves content width of the select dialog {@link sap.m.Dialog}
 * @overwrite
 * @public
 * @returns {sap.ui.core.CSSSize} sWidth the content width of the internal dialog
 * 
 */
sap.m.TableSelectDialog.prototype.getContentWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Transfers method to the inner dialog: getDomRef
 * @public
 * @override
 * @return {Element} The Element's DOM Element sub DOM Element or null
 * 
 */
sap.m.TableSelectDialog.prototype.getDomRef = function() { return null; };

/**
 * Gets current value of property {@link #getGrowingThreshold growingThreshold}.
 * 
 * Determines the number of items initially displayed in the table.
 * 
 * @returns {int} Value of property <code>growingThreshold</code>
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getGrowingThreshold = function() { return 0; };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * The items of the table.
 * 
 * @returns {sap.m.ColumnListItem[]}
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.TableSelectDialog.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.TableSelectDialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMultiSelect multiSelect}.
 * 
 * Enables the user to select several options from the table.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>multiSelect</code>
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getMultiSelect = function() { return false; };

/**
 * Retrieves the internal List's no data text property
 * @overwrite
 * @public
 * @returns {string} the current no data text
 * 
 */
sap.m.TableSelectDialog.prototype.getNoDataText = function() { return ""; };

/**
 * Gets current value of property {@link #getRememberSelections rememberSelections}.
 * 
 * Controls whether the dialog clears the selection or not. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false"
 * Note: This property must be set before the Dialog is opened to have an effect.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>rememberSelections</code>
 * @since 1.18
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getRememberSelections = function() { return false; };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Specifies the title text in the dialog header.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.getTitle = function() { return ""; };

/**
 * Transfers method to the inner dialog: hasStyleClass
 * @public
 * @override
 * @returns {boolean} true if the class is set, false otherwise
 * 
 */
sap.m.TableSelectDialog.prototype.hasStyleClass = function() { return false; };

/**
 * Checks for the provided <code>sap.m.Column</code> in the aggregation {@link #getColumns columns}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Column}
 *           oColumn The column whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.indexOfColumn = function(oColumn) { return 0; };

/**
 * Checks for the provided <code>sap.m.ColumnListItem</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ColumnListItem}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a column into the aggregation {@link #getColumns columns}.
 * 
 * @param {sap.m.Column}
 *            oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the column should be inserted at; for
 *              a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the column is inserted at
 *              the last position
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.insertColumn = function(oColumn,iIndex) { return new sap.m.TableSelectDialog(); };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.m.ColumnListItem}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.insertItem = function(oItem,iIndex) { return new sap.m.TableSelectDialog(); };

/**
 * Invalidates the dialog instead of this control, as there is no renderer.
 * @overwrite
 * @protected
 * @returns {sap.m.TableSelectDialog} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.invalidate = function() { return new sap.m.TableSelectDialog(); };

/**
 * Shows the busy state and is called after the renderer is finished.
 * @overwrite
 * @protected
 * @returns {sap.m.TableSelectDialog} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.onAfterRendering = function() { return new sap.m.TableSelectDialog(); };

/**
 * Opens the internal dialog with a searchfield and a table.
 * @public
 * @param {string} sSearchValue
 *         Value for the search. The table will be automatically trigger the search event if this parameter is set.
 * @returns {sap.m.TableSelectDialog} <code>this</code> to allow method chaining
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TableSelectDialog.prototype.open = function(sSearchValue) { return new sap.m.TableSelectDialog(); };

/**
 * Removes all the controls from the aggregation {@link #getColumns columns}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Column[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.removeAllColumns = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ColumnListItem[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes a column from the aggregation {@link #getColumns columns}.
 * 
 * @param {int | string | sap.m.Column} vColumn The column to remove or its index or id
 * @returns {sap.m.Column} The removed column or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.removeColumn = function(vColumn) { return new sap.m.Column(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.m.ColumnListItem} vItem The item to remove or its index or id
 * @returns {sap.m.ColumnListItem} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.removeItem = function(vItem) { return new sap.m.ColumnListItem(); };

/**
 * Transfers method to the inner dialog: removeStyleClass
 * @public
 * @override
 * @returns {sap.m.TableSelectDialog} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.removeStyleClass = function() { return new sap.m.TableSelectDialog(); };

/**
 * Enables/Disables busy state.
 * @overwrite
 * @public
 * @param {boolean} flag for enabling busy indicator
 * @returns {sap.m.TableSelectDialog} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.setBusy = function(flag) { return new sap.m.TableSelectDialog(); };

/**
 * Sets the busyIndicatorDelay value to the internal table
 * @public
 * @param {int} iValue Value for the busyIndicatorDelay.
 * @returns {sap.m.TableSelectDialog} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.setBusyIndicatorDelay = function(iValue) { return new sap.m.TableSelectDialog(); };

/**
 * Sets content height of the select dialog {@link sap.m.Dialog}
 * @param {sap.ui.core.CSSSize} sHeight the new content height value for the dialog
 * @public
 * @overwrite
 * @returns {sap.m.TableSelectDialog} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.setContentHeight = function(sHeight) { return new sap.m.TableSelectDialog(); };

/**
 * Sets content width of the select dialog {@link sap.m.Dialog}
 * @param {sap.ui.core.CSSSize} sWidth the new content width value for the dialog
 * @public
 * @overwrite
 * @returns {sap.m.TableSelectDialog} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.setContentWidth = function(sWidth) { return new sap.m.TableSelectDialog(); };

/**
 * Sets the growing threshold to the internal table
 * @public
 * @param {int} iValue Value for the table's growing threshold.
 * @returns {sap.m.TableSelectDialog} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.setGrowingThreshold = function(iValue) { return new sap.m.TableSelectDialog(); };

/**
 * Enables/Disables multi selection mode.
 * @overwrite
 * @public
 * @param {boolean} bMulti flag for multi selection mode
 * @returns {sap.m.TableSelectDialog} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.setMultiSelect = function(bMulti) { return new sap.m.TableSelectDialog(); };

/**
 * Sets the no data text of the internal table
 * @overwrite
 * @public
 * @param {string} sNoDataText the no data text for the table
 * 
 */
sap.m.TableSelectDialog.prototype.setNoDataText = function(sNoDataText) {  };

/**
 * Sets a new value for property {@link #getRememberSelections rememberSelections}.
 * 
 * Controls whether the dialog clears the selection or not. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false"
 * Note: This property must be set before the Dialog is opened to have an effect.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bRememberSelections New value for property <code>rememberSelections</code>
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.18
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.setRememberSelections = function(bRememberSelections) { return new sap.m.TableSelectDialog(); };

/**
 * Sets the title of the internal dialog
 * @overwrite
 * @public
 * @param {string} sTitle the title text for the dialog
 * @returns {sap.m.TableSelectDialog} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.setTitle = function(sTitle) { return new sap.m.TableSelectDialog(); };

/**
 * Transfers method to the inner dialog: toggleStyleClass
 * @public
 * @override
 * @returns {sap.m.TableSelectDialog} this pointer for chaining
 * 
 */
sap.m.TableSelectDialog.prototype.toggleStyleClass = function() { return new sap.m.TableSelectDialog(); };

/**
 * Unbinds aggregation {@link #getColumns columns} from model data.
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.unbindColumns = function() { return new sap.m.TableSelectDialog(); };

/**
 * Unbinds aggregation {@link #getItems items} from model data.
 * @returns {sap.m.TableSelectDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TableSelectDialog.prototype.unbindItems = function() { return new sap.m.TableSelectDialog(); };


// ---- sap.m.TabStripSelectList --------------------------------------------------------------------------

/**
 * Constructor for a new <code>TabStripSelectList</code>.
 * 
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>sap.m.TabStripSelectList</code> displays a list of items that allows the user to select an item.
 * @extends sap.m.SelectList
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.34
 * @ui5-metamodel This control will also be described in the UI5 (legacy) design time meta model
 * 
 */
sap.m.TabStripSelectList = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.TabStripSelectList with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.SelectList.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TabStripSelectList.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.TabStripSelectList.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.TabStripSelectList.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Initializes the control.
 * 
 * @override
 * @public
 * 
 */
sap.m.TabStripSelectList.prototype.init = function() {  };


// ---- sap.m.Text --------------------------------------------------------------------------

/**
 * Constructor for a new Text.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getWrapping wrapping} : boolean (default: true)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: Begin)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxLines maxLines} : int</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>Text</code> control can be used for embedding longer text paragraphs, that need text wrapping, into your app.
 * If the configured text value contains HTML code or script tags, those will be escaped.<br>
 * <b>Note: </b>Line breaks (\r\n, \n\r, \r, \n) will always be visualized except when the <code>wrapping</code> property is set to <code>false</code>.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IShrinkable, sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Text = function(sId,mSettings) {};
/**
 * Determines per instance whether line height should be cached or not.
 * 
 * Default value is true.
 * 
 * @since 1.22
 * @protected
 * @type {boolean}
 * 
 */
sap.m.Text.prototype.cacheLineHeight = false

/**
 * Ellipsis(…) text to indicate more text when clampText function is used.
 * 
 * Can be overwritten with 3dots(...) if fonts do not support this UTF-8 character.
 * 
 * @since 1.13.2
 * @protected
 * @type {string}
 * 
 */
sap.m.Text.prototype.ellipsis = ""

/**
 * Default line height value as a number when line-height is normal.
 * 
 * This value is required during max-height calculation for the browsers that do not support line-clamping.
 * It is better to define line-height in CSS instead of "normal" to get consistent maxLines results since normal line-height
 * not only varies from browser to browser but they also vary from one font face to another and can also vary within a given face.
 * 
 * Default value is 1.2
 * 
 * @since 1.22
 * @protected
 * @type {number}
 * 
 */
sap.m.Text.prototype.normalLineHeight = 0.0

/**
 * Binds property {@link #getText text} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.Text} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Text.prototype.bindText = function(oBindingInfo) { return new sap.m.Text(); };

/**
 * Sets the max-height to support maxLines property.
 * 
 * @since 1.22
 * @protected
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @returns {Number} calculated max height value
 * 
 */
sap.m.Text.prototype.clampHeight = function(oDomRef) { return null; };

/**
 * Clamps the wrapping text according to max lines and returns the found ellipsis position.
 * 
 * Parameters can be used for better performance.
 * 
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @param {number} [iStartPos] Start point of the ellipsis search.
 * @param {number} [iEndPos] End point of the ellipsis search.
 * @returns {number|undefined} Returns found ellipsis position or undefined
 * @since 1.20
 * @protected
 * 
 */
sap.m.Text.prototype.clampText = function(oDomRef,iStartPos,iEndPos) { return 0.0; };

/**
 * Creates a new subclass of class sap.m.Text with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Text.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.Text.prototype.getAccessibilityInfo = function() {  };

/**
 * Returns the max height according to max lines and line height calculation.
 * 
 * This is not calculated max-height!
 * 
 * @since 1.22
 * @protected
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @returns {Number}
 * 
 */
sap.m.Text.prototype.getClampHeight = function(oDomRef) { return null; };

/**
 * Caches and returns the computed line height of the text.
 * 
 * @since 1.22
 * @protected
 * @see sap.m.Text#cacheLineHeight
 * @param {HTMLElement} [oDomRef] DOM reference of the text container.
 * @returns {Number} returns calculated line-height
 * 
 */
sap.m.Text.prototype.getLineHeight = function(oDomRef) { return null; };

/**
 * Gets current value of property {@link #getMaxLines maxLines}.
 * 
 * Limits the number of lines for wrapping texts.
 * 
 * Note: The multi-line overflow indicator depends on the browser line clamping support. For such browsers, this will be shown as ellipsis, for the other browsers the overflow will just be hidden.
 * 
 * @returns {int} Value of property <code>maxLines</code>
 * @since 1.13.2
 * 
 * @public
 * 
 */
sap.m.Text.prototype.getMaxLines = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.Text.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Text.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Determines the text to be displayed.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.Text.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextAlign textAlign}.
 * 
 * Sets the horizontal alignment of the text.
 * 
 * Default value is <code>Begin</code>.
 * @returns {sap.ui.core.TextAlign} Value of property <code>textAlign</code>
 * 
 * @public
 * 
 */
sap.m.Text.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * 
 * @public
 * 
 */
sap.m.Text.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Returns the text node container's DOM reference.
 * 
 * This can be different from getDomRef when inner wrapper is needed.
 * 
 * @since 1.22
 * @protected
 * @returns {HTMLElement|null}
 * 
 */
sap.m.Text.prototype.getTextDomRef = function() { return null; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Sets the width of the Text control. By default, the Text control uses the full width available. Set this property to restrict the width to a custom value.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.Text.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getWrapping wrapping}.
 * 
 * Enables text wrapping.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>wrapping</code>
 * 
 * @public
 * 
 */
sap.m.Text.prototype.getWrapping = function() { return false; };

/**
 * Determines whether max lines should be rendered or not.
 * 
 * @since 1.22
 * @protected
 * @returns {HTMLElement|null}
 * 
 */
sap.m.Text.prototype.hasMaxLines = function() { return null; };

/**
 * Sets a new value for property {@link #getMaxLines maxLines}.
 * 
 * Limits the number of lines for wrapping texts.
 * 
 * Note: The multi-line overflow indicator depends on the browser line clamping support. For such browsers, this will be shown as ellipsis, for the other browsers the overflow will just be hidden.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iMaxLines New value for property <code>maxLines</code>
 * @returns {sap.m.Text} Reference to <code>this</code> in order to allow method chaining
 * @since 1.13.2
 * 
 * @public
 * 
 */
sap.m.Text.prototype.setMaxLines = function(iMaxLines) { return new sap.m.Text(); };

/**
 * To prevent from the layout thrashing of the textContent call, this method
 * first tries to set the nodeValue of the first child if it exists.
 * 
 * @param {HTMLElement} oDomRef DOM reference of the text node container.
 * @param {String} [sNodeValue] new Node value.
 * @since 1.30.3
 * @protected
 * @static
 * 
 */
sap.m.Text.setNodeValue = function(oDomRef,sNodeValue) {  };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Determines the text to be displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.Text} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Text.prototype.setText = function(sText) { return new sap.m.Text(); };

/**
 * Sets a new value for property {@link #getTextAlign textAlign}.
 * 
 * Sets the horizontal alignment of the text.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Begin</code>.
 * @param {sap.ui.core.TextAlign} sTextAlign New value for property <code>textAlign</code>
 * @returns {sap.m.Text} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Text.prototype.setTextAlign = function(sTextAlign) { return new sap.m.Text(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.Text} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Text.prototype.setTextDirection = function(sTextDirection) { return new sap.m.Text(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Sets the width of the Text control. By default, the Text control uses the full width available. Set this property to restrict the width to a custom value.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.Text} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Text.prototype.setWidth = function(sWidth) { return new sap.m.Text(); };

/**
 * Sets a new value for property {@link #getWrapping wrapping}.
 * 
 * Enables text wrapping.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bWrapping New value for property <code>wrapping</code>
 * @returns {sap.m.Text} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Text.prototype.setWrapping = function(bWrapping) { return new sap.m.Text(); };

/**
 * Unbinds property {@link #getText text} from model data.
 * @returns {sap.m.Text} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Text.prototype.unbindText = function() { return new sap.m.Text(); };


// ---- sap.m.TextArea --------------------------------------------------------------------------

/**
 * Constructor for a new TextArea.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRows rows} : int (default: 2)</li>
 * <li>{@link #getCols cols} : int (default: 20)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getShowExceededText showExceededText} : boolean (default: false)</li>
 * <li>{@link #getWrapping wrapping} : sap.ui.core.Wrapping (default: None)</li>
 * <li>{@link #getValueLiveUpdate valueLiveUpdate} : boolean (default: false)</li>
 * <li>{@link #getGrowing growing} : boolean (default: false)</li>
 * <li>{@link #getGrowingMaxLines growingMaxLines} : int (default: 0)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>sap.m.TextArea</code> enables multi-line text input.
 * @extends sap.m.InputBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.9.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TextArea = function(sId,mSettings) {};
/**
 * Is fired whenever the user has modified the text shown on the text area.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new <code>value</code> of the control.
 * @public
 * 
 */
sap.m.TextArea.prototype.liveChange = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:liveChange liveChange} event of this <code>sap.m.TextArea</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TextArea</code> itself.
 * 
 * Is fired whenever the user has modified the text shown on the text area.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TextArea</code> itself
 * 
 * @returns {sap.m.TextArea} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TextArea.prototype.attachLiveChange = function(oData,fnFunction,oListener) { return new sap.m.TextArea(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:liveChange liveChange} event of this <code>sap.m.TextArea</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TextArea} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.detachLiveChange = function(fnFunction,oListener) { return new sap.m.TextArea(); };

/**
 * Creates a new subclass of class sap.m.TextArea with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TextArea.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:liveChange liveChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.value] The new <code>value</code> of the control.
 * 
 * @returns {sap.m.TextArea} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.TextArea.prototype.fireLiveChange = function(mParameters) { return new sap.m.TextArea(); };

/**
 * Gets current value of property {@link #getCols cols}.
 * 
 * Defines the visible width of the control, in average character widths.
 * <b>Note:</b> The <code>width</code> property wins over the <code>cols</code> property, if both are set.
 * 
 * Default value is <code>20</code>.
 * @returns {int} Value of property <code>cols</code>
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.getCols = function() { return 0; };

/**
 * Gets current value of property {@link #getGrowing growing}.
 * 
 * Indicates the ability of the control to automatically grow and shrink dynamically with its content.
 * <b>Note:</b> The <code>height</code> property is ignored, if this property set to <code>true</code>.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>growing</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.getGrowing = function() { return false; };

/**
 * Gets current value of property {@link #getGrowingMaxLines growingMaxLines}.
 * 
 * Defines the maximum number of lines that the control can grow.
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>growingMaxLines</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.getGrowingMaxLines = function() { return 0; };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * Defines the height of the control.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getMaxLength maxLength}.
 * 
 * Defines the maximum number of characters that the <code>value</code> can be.
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>maxLength</code>
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.getMaxLength = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.TextArea.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.TextArea.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getRows rows}.
 * 
 * Defines the number of visible text lines for the control.
 * <b>Note:</b> The <code>height</code> property wins over the <code>rows</code> property, if both are set.
 * 
 * Default value is <code>2</code>.
 * @returns {int} Value of property <code>rows</code>
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.getRows = function() { return 0; };

/**
 * Gets current value of property {@link #getShowExceededText showExceededText}.
 * 
 * Determines whether the characters, exceeding the maximum allowed character count, are visible in the input field.
 * 
 * If set to <code>false</code> the user is not allowed to enter more characters than what is set in the <code>maxLength</code> property.
 * If set to <code>true</code> the characters exceeding the <code>maxLength</code> value are selected on paste and the counter below
 * the input field displays their number.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showExceededText</code>
 * @since 1.48
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.getShowExceededText = function() { return false; };

/**
 * Gets current value of property {@link #getValueLiveUpdate valueLiveUpdate}.
 * 
 * Indicates when the <code>value</code> property gets updated with the user changes. Setting it to <code>true</code> updates the <code>value</code> property whenever the user has modified the text shown on the text area.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>valueLiveUpdate</code>
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.getValueLiveUpdate = function() { return false; };

/**
 * Gets current value of property {@link #getWrapping wrapping}.
 * 
 * Indicates how the control wraps the text, e.g. <code>Soft</code>, <code>Hard</code>, <code>Off</code>.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.Wrapping} Value of property <code>wrapping</code>
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.getWrapping = function() { return new sap.ui.core.Wrapping(); };

/**
 * Sets a new value for property {@link #getCols cols}.
 * 
 * Defines the visible width of the control, in average character widths.
 * <b>Note:</b> The <code>width</code> property wins over the <code>cols</code> property, if both are set.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>20</code>.
 * @param {int} iCols New value for property <code>cols</code>
 * @returns {sap.m.TextArea} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.setCols = function(iCols) { return new sap.m.TextArea(); };

/**
 * Sets a new value for property {@link #getGrowing growing}.
 * 
 * Indicates the ability of the control to automatically grow and shrink dynamically with its content.
 * <b>Note:</b> The <code>height</code> property is ignored, if this property set to <code>true</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bGrowing New value for property <code>growing</code>
 * @returns {sap.m.TextArea} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.setGrowing = function(bGrowing) { return new sap.m.TextArea(); };

/**
 * Sets a new value for property {@link #getGrowingMaxLines growingMaxLines}.
 * 
 * Defines the maximum number of lines that the control can grow.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {int} iGrowingMaxLines New value for property <code>growingMaxLines</code>
 * @returns {sap.m.TextArea} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.setGrowingMaxLines = function(iGrowingMaxLines) { return new sap.m.TextArea(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * Defines the height of the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.m.TextArea} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.setHeight = function(sHeight) { return new sap.m.TextArea(); };

/**
 * Sets a new value for property {@link #getMaxLength maxLength}.
 * 
 * Defines the maximum number of characters that the <code>value</code> can be.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {int} iMaxLength New value for property <code>maxLength</code>
 * @returns {sap.m.TextArea} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.setMaxLength = function(iMaxLength) { return new sap.m.TextArea(); };

/**
 * Sets a new value for property {@link #getRows rows}.
 * 
 * Defines the number of visible text lines for the control.
 * <b>Note:</b> The <code>height</code> property wins over the <code>rows</code> property, if both are set.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>2</code>.
 * @param {int} iRows New value for property <code>rows</code>
 * @returns {sap.m.TextArea} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.setRows = function(iRows) { return new sap.m.TextArea(); };

/**
 * Sets a new value for property {@link #getShowExceededText showExceededText}.
 * 
 * Determines whether the characters, exceeding the maximum allowed character count, are visible in the input field.
 * 
 * If set to <code>false</code> the user is not allowed to enter more characters than what is set in the <code>maxLength</code> property.
 * If set to <code>true</code> the characters exceeding the <code>maxLength</code> value are selected on paste and the counter below
 * the input field displays their number.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowExceededText New value for property <code>showExceededText</code>
 * @returns {sap.m.TextArea} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.setShowExceededText = function(bShowExceededText) { return new sap.m.TextArea(); };

/**
 * Sets a new value for property {@link #getValueLiveUpdate valueLiveUpdate}.
 * 
 * Indicates when the <code>value</code> property gets updated with the user changes. Setting it to <code>true</code> updates the <code>value</code> property whenever the user has modified the text shown on the text area.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bValueLiveUpdate New value for property <code>valueLiveUpdate</code>
 * @returns {sap.m.TextArea} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.setValueLiveUpdate = function(bValueLiveUpdate) { return new sap.m.TextArea(); };

/**
 * Sets a new value for property {@link #getWrapping wrapping}.
 * 
 * Indicates how the control wraps the text, e.g. <code>Soft</code>, <code>Hard</code>, <code>Off</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.core.Wrapping} sWrapping New value for property <code>wrapping</code>
 * @returns {sap.m.TextArea} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TextArea.prototype.setWrapping = function(sWrapping) { return new sap.m.TextArea(); };


// ---- sap.m.Tile --------------------------------------------------------------------------

/**
 * Constructor for a new Tile.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRemovable removable} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A tile to be displayed in the tile container. Use this
 * tile as the base class for specialized tile implementations.
 * Use the renderer _addOuterClass methods to add a style class to the main
 * surface of the Tile. In this class set the background color, gradients
 * or background images.
 * Instead of implementing the default render method in the renderer, implement
 * your content HTML in the _renderContent method of the specialized tile.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Tile = function(sId,mSettings) {};
/**
 * Tap event is raised if the user taps or clicks the control.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Tile.prototype.press = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.Tile</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Tile</code> itself.
 * 
 * Tap event is raised if the user taps or clicks the control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Tile</code> itself
 * 
 * @returns {sap.m.Tile} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Tile.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Tile(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.Tile</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Tile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Tile.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Tile(); };

/**
 * Creates a new subclass of class sap.m.Tile with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Tile.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Tile} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Tile.prototype.firePress = function(mParameters) { return new sap.m.Tile(); };

/**
 * Returns a metadata object for class sap.m.Tile.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Tile.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getRemovable removable}.
 * 
 * Determines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile container.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>removable</code>
 * 
 * @public
 * 
 */
sap.m.Tile.prototype.getRemovable = function() { return false; };

/**
 * Sets a new value for property {@link #getRemovable removable}.
 * 
 * Determines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile container.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bRemovable New value for property <code>removable</code>
 * @returns {sap.m.Tile} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Tile.prototype.setRemovable = function(bRemovable) { return new sap.m.Tile(); };


// ---- sap.m.TileContainer --------------------------------------------------------------------------

/**
 * Constructor for a new TileContainer.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getEditable editable} : boolean</li>
 * <li>{@link #getAllowAdd allowAdd} : boolean</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTiles tiles} : sap.m.Tile[] (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:tileMove tileMove} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:tileDelete tileDelete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:tileAdd tileAdd} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A container that arranges same-size tiles nicely on carousel pages.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.12
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TileContainer = function(sId,mSettings) {};
/**
 * Fires when a Tile is added.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.TileContainer.prototype.tileAdd = function(oControlEvent) {  };

/**
 * Fires if a Tile is deleted in Edit mode.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Tile} oControlEvent.getParameters.tile The deleted Tile.
 * @public
 * 
 */
sap.m.TileContainer.prototype.tileDelete = function(oControlEvent) {  };

/**
 * Fires if a Tile is moved.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Tile} oControlEvent.getParameters.tile The Tile that has been moved.
 * @param {int} oControlEvent.getParameters.newIndex The new index of the Tile in the tiles aggregation.
 * @public
 * 
 */
sap.m.TileContainer.prototype.tileMove = function(oControlEvent) {  };

/**
 * Adds a Tile to the end of the tiles collection.
 * 
 * @param {sap.m.Tile} oTile The tile to add
 * @returns {sap.m.TileContainer} this pointer for chaining
 * @override
 * @public
 * 
 */
sap.m.TileContainer.prototype.addTile = function(oTile) { return new sap.m.TileContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:tileAdd tileAdd} event of this <code>sap.m.TileContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TileContainer</code> itself.
 * 
 * Fires when a Tile is added.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code> itself
 * 
 * @returns {sap.m.TileContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.attachTileAdd = function(oData,fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:tileDelete tileDelete} event of this <code>sap.m.TileContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TileContainer</code> itself.
 * 
 * Fires if a Tile is deleted in Edit mode.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code> itself
 * 
 * @returns {sap.m.TileContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.attachTileDelete = function(oData,fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:tileMove tileMove} event of this <code>sap.m.TileContainer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.TileContainer</code> itself.
 * 
 * Fires if a Tile is moved.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code> itself
 * 
 * @returns {sap.m.TileContainer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.attachTileMove = function(oData,fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * Deletes a Tile.
 * 
 * @param {sap.m.Tile} oTile The tile to move
 * @returns {sap.m.TileContainer} this pointer for chaining
 * @override
 * @public
 * 
 */
sap.m.TileContainer.prototype.deleteTile = function(oTile) { return new sap.m.TileContainer(); };

/**
 * Destroys all the tiles in the aggregation {@link #getTiles tiles}.
 * @returns {sap.m.TileContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.destroyTiles = function() { return new sap.m.TileContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:tileAdd tileAdd} event of this <code>sap.m.TileContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TileContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.detachTileAdd = function(fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:tileDelete tileDelete} event of this <code>sap.m.TileContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TileContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.detachTileDelete = function(fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:tileMove tileMove} event of this <code>sap.m.TileContainer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.TileContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.detachTileMove = function(fnFunction,oListener) { return new sap.m.TileContainer(); };

/**
 * Creates a new subclass of class sap.m.TileContainer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TileContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:tileAdd tileAdd} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.TileContainer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.TileContainer.prototype.fireTileAdd = function(mParameters) { return new sap.m.TileContainer(); };

/**
 * Fires event {@link #event:tileDelete tileDelete} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.Tile} [mParameters.tile] The deleted Tile.
 * 
 * @returns {sap.m.TileContainer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.TileContainer.prototype.fireTileDelete = function(mParameters) { return new sap.m.TileContainer(); };

/**
 * Fires event {@link #event:tileMove tileMove} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.Tile} [mParameters.tile] The Tile that has been moved.
 * @param {int} [mParameters.newIndex] The new index of the Tile in the tiles aggregation.
 * 
 * @returns {sap.m.TileContainer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.TileContainer.prototype.fireTileMove = function(mParameters) { return new sap.m.TileContainer(); };

/**
 * Gets current value of property {@link #getAllowAdd allowAdd}.
 * 
 * Determines whether the user is allowed to add Tiles in Edit mode (editable = true).
 * 
 * @returns {boolean} Value of property <code>allowAdd</code>
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.getAllowAdd = function() { return false; };

/**
 * Gets current value of property {@link #getEditable editable}.
 * 
 * Determines whether the TileContainer is editable so you can move, delete or add tiles.
 * 
 * @returns {boolean} Value of property <code>editable</code>
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.getEditable = function() { return false; };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * Defines the height of the TileContainer in px.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.TileContainer.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.TileContainer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the index of the first Tile visible in the current page.
 * 
 * @returns {int} The index of the first Tile that is visible in the current page
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TileContainer.prototype.getPageFirstTileIndex = function() { return 0; };

/**
 * Gets content of aggregation {@link #getTiles tiles}.
 * 
 * The Tiles to be displayed by the TileContainer.
 * 
 * @returns {sap.m.Tile[]}
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.getTiles = function() { return new Array(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the TileContainer in px.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.m.Tile</code> in the aggregation {@link #getTiles tiles}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Tile}
 *           oTile The tile whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.indexOfTile = function(oTile) { return 0; };

/**
 * Inserts a Tile to the given index.
 * 
 * @param {sap.m.Tile} oTile The Tile to insert
 * @param {int} iIndex The new Tile position in the tiles aggregation
 * @returns {sap.m.TileContainer} this pointer for chaining
 * @override
 * @public
 * 
 */
sap.m.TileContainer.prototype.insertTile = function(oTile,iIndex) { return new sap.m.TileContainer(); };

/**
 * Moves a given Tile to the given index.
 * 
 * @param {sap.m.Tile} vTile The tile to move
 * @param {int} iNewIndex The new Tile position in the tiles aggregation
 * @returns {sap.m.TileContainer} this pointer for chaining
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TileContainer.prototype.moveTile = function(vTile,iNewIndex) { return new sap.m.TileContainer(); };

/**
 * Removes all the controls from the aggregation {@link #getTiles tiles}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Tile[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.removeAllTiles = function() { return new Array(); };

/**
 * Removes a tile from the aggregation {@link #getTiles tiles}.
 * 
 * @param {int | string | sap.m.Tile} vTile The tile to remove or its index or id
 * @returns {sap.m.Tile} The removed tile or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.removeTile = function(vTile) { return new sap.m.Tile(); };

/**
 * Scrolls to the page where the given Tile or tile index is included.
 * Optionally this can be done animated or not. With IE9 the scroll is never animated.
 * 
 * @param {sap.m.Tile|int} vTile The Tile or tile index to be scrolled into view
 * @param {boolean} bAnimated Whether the scroll should be animated
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TileContainer.prototype.scrollIntoView = function(vTile,bAnimated) {  };

/**
 * Scrolls one page to the left.
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.scrollLeft = function() {  };

/**
 * Scrolls one page to the right.
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.scrollRight = function() {  };

/**
 * Sets a new value for property {@link #getAllowAdd allowAdd}.
 * 
 * Determines whether the user is allowed to add Tiles in Edit mode (editable = true).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bAllowAdd New value for property <code>allowAdd</code>
 * @returns {sap.m.TileContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.setAllowAdd = function(bAllowAdd) { return new sap.m.TileContainer(); };

/**
 * Sets the editable property to the TileContainer, allowing to move icons.
 * This is currently also set with a long tap.
 * 
 * @param {boolean} bValue Whether the container is in edit mode or not
 * @returns {sap.m.TileContainer} this pointer for chaining
 * @public
 * 
 */
sap.m.TileContainer.prototype.setEditable = function(bValue) { return new sap.m.TileContainer(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * Defines the height of the TileContainer in px.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.m.TileContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.setHeight = function(sHeight) { return new sap.m.TileContainer(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width of the TileContainer in px.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.TileContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TileContainer.prototype.setWidth = function(sWidth) { return new sap.m.TileContainer(); };


// ---- sap.m.TileContent --------------------------------------------------------------------------

/**
 * Constructor for a new sap.m.TileContent control.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFooter footer} : string</li>
 * <li>{@link #getSize size} : sap.m.Size (default: Auto)</li>
 * <li>{@link #getUnit unit} : string</li>
 * <li>{@link #getDisabled disabled} : boolean (default: false)</li>
 * <li>{@link #getFrameType frameType} : sap.m.FrameType (default: Auto)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control (default)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class This control is used within the GenericTile control.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * @since 1.34
 * 
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TileContent = function(sId,mSettings) {};
/**
 * Binds aggregation {@link #getContent content} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.TileContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.bindContent = function(oBindingInfo) { return new sap.m.TileContent(); };

/**
 * Destroys the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.TileContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.destroyContent = function() { return new sap.m.TileContent(); };

/**
 * Creates a new subclass of class sap.m.TileContent with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TileContent.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * The switchable view that depends on the tile type.
 * 
 * @returns {sap.ui.core.Control}
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.getContent = function() { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getDisabled disabled}.
 * 
 * Disables control if true.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>disabled</code>
 * @since 1.23
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.getDisabled = function() { return false; };

/**
 * Gets current value of property {@link #getFooter footer}.
 * 
 * The footer text of the tile.
 * 
 * @returns {string} Value of property <code>footer</code>
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.getFooter = function() { return ""; };

/**
 * Gets current value of property {@link #getFrameType frameType}.
 * 
 * The frame type: 1x1 or 2x1.
 * 
 * Default value is <code>Auto</code>.
 * @returns {sap.m.FrameType} Value of property <code>frameType</code>
 * @since 1.25
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.getFrameType = function() { return new sap.m.FrameType(); };

/**
 * Returns a metadata object for class sap.m.TileContent.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.TileContent.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSize size}.
 * 
 * Updates the size of the tile. If it is not set, then the default size is applied based on the device tile.
 * 
 * Default value is <code>Auto</code>.
 * @returns {sap.m.Size} Value of property <code>size</code>
 * 
 * @deprecated Since version 1.38.0. The TileContent control has now a fixed size, depending on the used media (desktop, tablet or phone).
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.getSize = function() { return new sap.m.Size(); };

/**
 * Gets current value of property {@link #getUnit unit}.
 * 
 * The percent sign, the currency symbol, or the unit of measure.
 * 
 * @returns {string} Value of property <code>unit</code>
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.getUnit = function() { return ""; };

/**
 * Sets the aggregated {@link #getContent content}.
 * @param {sap.ui.core.Control} oContent The content to set
 * @returns {sap.m.TileContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.setContent = function(oContent) { return new sap.m.TileContent(); };

/**
 * Sets a new value for property {@link #getDisabled disabled}.
 * 
 * Disables control if true.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bDisabled New value for property <code>disabled</code>
 * @returns {sap.m.TileContent} Reference to <code>this</code> in order to allow method chaining
 * @since 1.23
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.setDisabled = function(bDisabled) { return new sap.m.TileContent(); };

/**
 * Sets a new value for property {@link #getFooter footer}.
 * 
 * The footer text of the tile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sFooter New value for property <code>footer</code>
 * @returns {sap.m.TileContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.setFooter = function(sFooter) { return new sap.m.TileContent(); };

/**
 * Sets a new value for property {@link #getFrameType frameType}.
 * 
 * The frame type: 1x1 or 2x1.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Auto</code>.
 * @param {sap.m.FrameType} sFrameType New value for property <code>frameType</code>
 * @returns {sap.m.TileContent} Reference to <code>this</code> in order to allow method chaining
 * @since 1.25
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.setFrameType = function(sFrameType) { return new sap.m.TileContent(); };

/**
 * Setter for protected property to enable or disable content rendering. This function does not invalidate the control.
 * @param {boolean} value Determines whether the control's content is rendered or not
 * @returns {sap.m.TileContent} this To allow method chaining
 * @protected
 * 
 */
sap.m.TileContent.prototype.setRenderContent = function(value) { return new sap.m.TileContent(); };

/**
 * Setter for protected property to enable or disable footer rendering. This function does not invalidate the control.
 * @param {boolean} value Determines whether the control's footer is rendered or not
 * @returns {sap.m.TileContent} this to allow method chaining
 * @protected
 * 
 */
sap.m.TileContent.prototype.setRenderFooter = function(value) { return new sap.m.TileContent(); };

/**
 * Sets a new value for property {@link #getSize size}.
 * 
 * Updates the size of the tile. If it is not set, then the default size is applied based on the device tile.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Auto</code>.
 * @param {sap.m.Size} sSize New value for property <code>size</code>
 * @returns {sap.m.TileContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.38.0. The TileContent control has now a fixed size, depending on the used media (desktop, tablet or phone).
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.setSize = function(sSize) { return new sap.m.TileContent(); };

/**
 * Sets a new value for property {@link #getUnit unit}.
 * 
 * The percent sign, the currency symbol, or the unit of measure.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sUnit New value for property <code>unit</code>
 * @returns {sap.m.TileContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.setUnit = function(sUnit) { return new sap.m.TileContent(); };

/**
 * Unbinds aggregation {@link #getContent content} from model data.
 * @returns {sap.m.TileContent} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.TileContent.prototype.unbindContent = function() { return new sap.m.TileContent(); };


// ---- sap.m.TimePicker --------------------------------------------------------------------------

/**
 * Constructor for a new <code>TimePicker</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDisplayFormat displayFormat} : string</li>
 * <li>{@link #getValueFormat valueFormat} : string</li>
 * <li>{@link #getLocaleId localeId} : string</li>
 * <li>{@link #getDateValue dateValue} : object</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getMinutesStep minutesStep} : int (default: 1)</li>
 * <li>{@link #getSecondsStep secondsStep} : int (default: 1)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.MaskInput#constructor sap.m.MaskInput}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A single-field input control that enables the users to fill time related input fields.
 * 
 * <h3>Overview</h3>
 * 
 * The <code>TimePicker</code> control enables the users to fill time related input
 * fields using touch, mouse, or keyboard input.
 * 
 * <h3>Usage</h3>
 * 
 * Use this control if you want the user to select a time. If you want the user to
 * select a duration (1 hour), use the {@link sap.m.Select} control instead.
 * 
 * The user can enter a date by:
 * 
 * <ul><li>Using the <code>TimePicker</code> dropdown that opens in a popup</li>
 * <li>Typing it in directly in the input field</li></ul>
 * 
 * On app level, there are two options to provide value for the
 * <code>TimePicker</code> - as a string to the <code>value</code> property or as a
 * JavaScript Date object to the <code>dateValue</code> property (only one of these
 * properties should be used at a time):
 * 
 * <ul><li>Use the <code>value</code> property if you want to bind the
 * <code>TimePicker</code> to a model using the
 * <code>sap.ui.model.type.Time</code></li>
 * <li>Use the <code>value</code> property if the date is provided as a string from
 * the backend or inside the app (for example, as ABAP type DATS field)</li>
 * <li>Use the <code>dateValue</code> property if the date is already provided as a
 * JavaScript Date object or you want to work with a JavaScript Date object</li></ul>
 * 
 * <h3>Formatting</h3>
 * 
 * All formatting and parsing of values from and to strings is done using the
 * {@link sap.ui.core.format.DateFormat}. If a value is entered by typing it into
 * the input field, it must fit to the used time format and locale.
 * 
 * Supported format options are pattern-based on Unicode LDML Date Format notation.
 * See {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
 * 
 * A time format must be specified, otherwise the default "HH:mm:ss a" will be
 * used. For example, if the <code>valueFormat</code> is "HH-mm-ss a", the
 * <code>displayFormat</code> is "HH:mm:ss a", and the used locale is English, a
 * valid value string is "10-30-15 AM", which leads to an output of "10:30:15 AM".
 * 
 * If no placeholder is set to the <code>TimePicker</code>, the used
 * <code>displayFormat</code> is displayed as a placeholder. If another placeholder
 * is needed, it must be set.
 * 
 * <b>Note:</b> If the string does NOT match the <code>displayFormat</code>
 * (from user input) or the <code>valueFormat</code> (on app level), the
 * {@link sap.ui.core.format.DateFormat} makes an attempt to parse it based on the
 * locale settings. For more information, see the respective documentation in the
 * API Reference.
 * 
 * <h3>Responsive behavior</h3>
 * 
 * The <code>TimePicker</code> is responsive and fully adapts to all device types.
 * For larger screens, such as tablet or desktop, it opens as a popover. For
 * mobile devices, it opens in full screen.
 * 
 * @extends sap.m.MaskInput
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.32
 * 
 */
sap.m.TimePicker = function(sId,mSettings) {};
/**
 * Fires when the input operation has finished and the value has changed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The new value of the input
 * @param {boolean} oControlEvent.getParameters.valid Indicator for a valid time
 * @public
 * 
 */
sap.m.TimePicker.prototype.change = function(oControlEvent) {  };

/**
 * Creates a new subclass of class sap.m.TimePicker with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.MaskInput.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TimePicker.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires change event to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>value parameter of type <code>string</code> - the new value of the input</li>
 * <li>valid parameter of type <code>boolean</code> - indicator for a valid time</li>
 * </ul>
 * 
 * @param {Map} [mArguments] The arguments to pass along with the event
 * @return {sap.m.TimePicker} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.m.TimePicker.prototype.fireChange = function(mArguments) { return new sap.m.TimePicker(); };

/**
 * Fires the change event for the listeners
 * 
 * @protected
 * @param {String} sValue value of the input.
 * @param {Object} [oParams] extra event parameters.
 * 
 */
sap.m.TimePicker.prototype.fireChangeEvent = function(sValue,oParams) {  };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.TimePicker.prototype.getAccessibilityInfo = function() {  };

/**
 * Gets current value of property {@link #getDateValue dateValue}.
 * 
 * Holds a reference to a JavaScript Date Object. The <code>value</code> (string)
 * property will be set according to it. Alternatively, if the <code>value</code>
 * and <code>valueFormat</code> pair properties are supplied instead,
 * the <code>dateValue</code> will be instantiated according to the parsed
 * <code>value</code>.
 * 
 * @returns {object} Value of property <code>dateValue</code>
 * 
 * @public
 * 
 */
sap.m.TimePicker.prototype.getDateValue = function() { return new Object(); };

/**
 * Gets current value of property {@link #getDisplayFormat displayFormat}.
 * 
 * Determines the format, displayed in the input field and the picker sliders.
 * 
 * The default value is the browser's medium time format locale setting
 * {@link sap.ui.core.LocaleData#getTimePattern}.
 * If data binding with type {@link sap.ui.model.type.Time} or {@link sap.ui.model.odata.type.Time}
 * is used for the <code>value</code> property, the <code>displayFormat</code> property
 * is ignored as the information is provided from the binding itself.
 * 
 * @returns {string} Value of property <code>displayFormat</code>
 * 
 * @public
 * 
 */
sap.m.TimePicker.prototype.getDisplayFormat = function() { return ""; };

/**
 * Gets current value of property {@link #getLocaleId localeId}.
 * 
 * Defines the locale used to parse string values representing time.
 * 
 * Determines the locale, used to interpret the string, supplied by the
 * <code>value</code> property.
 * Example: AM in the string "09:04 AM" is locale (language) dependent.
 * The format comes from the browser language settings if not set explicitly.
 * Used in combination with 12 hour <code>valueFormat</code> containing 'a', which
 * stands for day period string.
 * Default value is taken from browser's locale setting.
 * 
 * @returns {string} Value of property <code>localeId</code>
 * 
 * @public
 * 
 */
sap.m.TimePicker.prototype.getLocaleId = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.TimePicker.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.TimePicker.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMinutesStep minutesStep}.
 * 
 * Sets the minutes slider step.
 * The minutes slider is populated only by multiples of the step.
 * 
 * Default value is <code>1</code>.
 * @returns {int} Value of property <code>minutesStep</code>
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.TimePicker.prototype.getMinutesStep = function() { return 0; };

/**
 * Gets current value of property {@link #getSecondsStep secondsStep}.
 * 
 * Sets the seconds slider step.
 * The seconds slider is populated only by multiples of the step.
 * 
 * Default value is <code>1</code>.
 * @returns {int} Value of property <code>secondsStep</code>
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.TimePicker.prototype.getSecondsStep = function() { return 0; };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Displays the text of the general picker label and is read by screen readers.
 * It is visible only on phone.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.TimePicker.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getValueFormat valueFormat}.
 * 
 * Determines the format of the value property.
 * 
 * The default value is the browser's medium time format locale setting
 * {@link sap.ui.core.LocaleData#getTimePattern}.
 * If data binding with type {@link sap.ui.model.type.Time} or {@link sap.ui.model.odata.type.Time}
 * is used for the <code>value</code> property, the <code>valueFormat</code> property
 * is ignored as the information is provided from the binding itself.
 * 
 * @returns {string} Value of property <code>valueFormat</code>
 * 
 * @public
 * 
 */
sap.m.TimePicker.prototype.getValueFormat = function() { return ""; };

/**
 * Initializes the control.
 * 
 * @public
 * 
 */
sap.m.TimePicker.prototype.init = function() {  };

/**
 * Called after the picker closes.
 * 
 * @override
 * @public
 * 
 */
sap.m.TimePicker.prototype.onAfterClose = function() {  };

/**
 * Called after the picker appears.
 * 
 * @override
 * @public
 * 
 */
sap.m.TimePicker.prototype.onAfterOpen = function() {  };

/**
 * Called before the picker appears.
 * 
 * @override
 * @public
 * 
 */
sap.m.TimePicker.prototype.onBeforeOpen = function() {  };

/**
 * Sets the <code>dateValue</code> JavaScript date object.
 * 
 * Recommended usage is when <code>value</code> is not set, as they are mutually exclusive.
 * 
 * @override
 * @param {Date} oDate New date object
 * @returns {sap.m.TimePicker|Error} this instance, used for chaining
 * @public
 * 
 */
sap.m.TimePicker.prototype.setDateValue = function(oDate) { return new sap.m.TimePicker(); };

/**
 * Sets the <code>displayFormat</code>.
 * 
 * @override
 * @param {string} sDisplayFormat The format of the string inside the input
 * @returns {sap.m.TimePicker} this instance, used for chaining
 * @public
 * 
 */
sap.m.TimePicker.prototype.setDisplayFormat = function(sDisplayFormat) { return new sap.m.TimePicker(); };

/**
 * Sets the locale of the control.
 * 
 * Used for parsing and formatting the time values in languages different than English.
 * Necessary for translation and auto-complete of the day periods, such as AM and PM.
 * 
 * @param {string} sLocaleId A locale identifier like 'en_US'
 * @returns {sap.m.TimePicker} this instance, used for chaining
 * @public
 * 
 */
sap.m.TimePicker.prototype.setLocaleId = function(sLocaleId) { return new sap.m.TimePicker(); };

/**
 * Sets the minutes slider step.
 * @param iStep The step used to generate values for the minutes slider
 * @returns {*} this
 * @public
 * 
 */
sap.m.TimePicker.prototype.setMinutesStep = function(iStep) { return null; };

/**
 * Sets the seconds slider step.
 * @param iStep The step used to generate values for the seconds slider
 * @returns {*} this
 * @public
 * 
 */
sap.m.TimePicker.prototype.setSecondsStep = function(iStep) { return null; };

/**
 * Sets the <code>valueFormat</code> property.
 * 
 * @override
 * @param {string} sValueFormat The format of strings that are set as value to the control
 * @returns {sap.m.TimePicker} this instance, used for chaining
 * @public
 * 
 */
sap.m.TimePicker.prototype.setValueFormat = function(sValueFormat) { return new sap.m.TimePicker(); };


// ---- sap.m.Title --------------------------------------------------------------------------

/**
 * Constructor for a new Title control.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getLevel level} : sap.ui.core.TitleLevel (default: Auto)</li>
 * <li>{@link #getTitleStyle titleStyle} : sap.ui.core.TitleLevel (default: Auto)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: Initial)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getTitle title} : (sap.ui.core.ID | sap.ui.core.Title)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] Id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The Title control represents a single line of text with explicit header / title semantics.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IShrinkable
 * @version 1.48.4
 * @since 1.27.0
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Title = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.Title with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Title.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.Title.prototype.getAccessibilityInfo = function() {  };

/**
 * Gets current value of property {@link #getLevel level}.
 * 
 * Defines the semantic level of the title.
 * This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
 * Depending on this setting either an HTML h1-h6 element is used or when using level <code>Auto</code> no explicit level information is written (HTML5 header element).
 * This property does not influence the style of the control. Use the property <code>titleStyle</code> for this purpose instead.
 * 
 * Default value is <code>Auto</code>.
 * @returns {sap.ui.core.TitleLevel} Value of property <code>level</code>
 * 
 * @public
 * 
 */
sap.m.Title.prototype.getLevel = function() { return new sap.ui.core.TitleLevel(); };

/**
 * Returns a metadata object for class sap.m.Title.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Title.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Defines the text which should be displayed as a title.
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.Title.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextAlign textAlign}.
 * 
 * Defines the alignment of the text within the title. <b>Note:</b> This property only has an effect if the overall width of the title control is
 * larger than the displayed text.
 * 
 * Default value is <code>Initial</code>.
 * @returns {sap.ui.core.TextAlign} Value of property <code>textAlign</code>
 * 
 * @public
 * 
 */
sap.m.Title.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * ID of the element which is the current target of the association {@link #getTitle title}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.Title.prototype.getTitle = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getTitleStyle titleStyle}.
 * 
 * Defines the style of the title.
 * When using the <code>Auto</code> styling, the appearance of the title depends on the current position of the title (e.g. inside a <code>Toolbar</code>).
 * This default behavior can be overridden by setting a different style explicitly.
 * The actual appearance of the title and the different styles always depends on the theme being used.
 * 
 * Default value is <code>Auto</code>.
 * @returns {sap.ui.core.TitleLevel} Value of property <code>titleStyle</code>
 * 
 * @public
 * 
 */
sap.m.Title.prototype.getTitleStyle = function() { return new sap.ui.core.TitleLevel(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the title.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.Title.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Sets a new value for property {@link #getLevel level}.
 * 
 * Defines the semantic level of the title.
 * This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
 * Depending on this setting either an HTML h1-h6 element is used or when using level <code>Auto</code> no explicit level information is written (HTML5 header element).
 * This property does not influence the style of the control. Use the property <code>titleStyle</code> for this purpose instead.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Auto</code>.
 * @param {sap.ui.core.TitleLevel} sLevel New value for property <code>level</code>
 * @returns {sap.m.Title} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Title.prototype.setLevel = function(sLevel) { return new sap.m.Title(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Defines the text which should be displayed as a title.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.Title} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Title.prototype.setText = function(sText) { return new sap.m.Title(); };

/**
 * Sets a new value for property {@link #getTextAlign textAlign}.
 * 
 * Defines the alignment of the text within the title. <b>Note:</b> This property only has an effect if the overall width of the title control is
 * larger than the displayed text.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Initial</code>.
 * @param {sap.ui.core.TextAlign} sTextAlign New value for property <code>textAlign</code>
 * @returns {sap.m.Title} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Title.prototype.setTextAlign = function(sTextAlign) { return new sap.m.Title(); };

/**
 * Sets the associated {@link #getTitle title}.
 * @param {sap.ui.core.ID | sap.ui.core.Title} oTitle ID of an element which becomes the new target of this title association; alternatively, an element instance may be given
 * @returns {sap.m.Title} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Title.prototype.setTitle = function(oTitle) { return new sap.m.Title(); };

/**
 * Sets a new value for property {@link #getTitleStyle titleStyle}.
 * 
 * Defines the style of the title.
 * When using the <code>Auto</code> styling, the appearance of the title depends on the current position of the title (e.g. inside a <code>Toolbar</code>).
 * This default behavior can be overridden by setting a different style explicitly.
 * The actual appearance of the title and the different styles always depends on the theme being used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Auto</code>.
 * @param {sap.ui.core.TitleLevel} sTitleStyle New value for property <code>titleStyle</code>
 * @returns {sap.m.Title} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Title.prototype.setTitleStyle = function(sTitleStyle) { return new sap.m.Title(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width of the title.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.Title} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Title.prototype.setWidth = function(sWidth) { return new sap.m.Title(); };


// ---- sap.m.ToggleButton --------------------------------------------------------------------------

/**
 * Constructor for a new ToggleButton.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPressed pressed} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The ToggleButton Control is a Button that can be toggled between pressed and normal state
 * @extends sap.m.Button
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ToggleButton = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ToggleButton with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Button.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ToggleButton.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.m.ToggleButton.prototype.getAccessibilityInfo = function() {  };

/**
 * Returns a metadata object for class sap.m.ToggleButton.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ToggleButton.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPressed pressed}.
 * 
 * The property is “true” when the control is toggled. The default state of this property is "false".
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>pressed</code>
 * 
 * @public
 * 
 */
sap.m.ToggleButton.prototype.getPressed = function() { return false; };

/**
 * Sets a new value for property {@link #getPressed pressed}.
 * 
 * The property is “true” when the control is toggled. The default state of this property is "false".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bPressed New value for property <code>pressed</code>
 * @returns {sap.m.ToggleButton} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ToggleButton.prototype.setPressed = function(bPressed) { return new sap.m.ToggleButton(); };


// ---- sap.m.Token --------------------------------------------------------------------------

/**
 * Constructor for a new Token.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getKey key} : string (default: )</li>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:delete delete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:deselect deselect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <h3>Overview</h3>
 * Tokens are small items of information (similar to tags) that mainly serve to visualize previously selected items.
 * Tokens are manipulated by a {@link sap.m.Tokenizer Tokenizer}.
 * <h3>Structure</h3>
 * The tokens store single text items or sometimes key-value pairs, such as "John Miller (ID1234567)".
 * Each token also contains a delete icon, which is invisible if the token is in edit mode.
 * 
 * <h3>Usage</h3>
 * <h4>When to use:</h4>
 * Tokens can only be used with the Tokenizer as a container.
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Token = function(sId,mSettings) {};
/**
 * This event is fired when the token gets deselected.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Token.prototype.deselect = function(oControlEvent) {  };

/**
 * This event is fired when the user clicks on the token.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Token.prototype.press = function(oControlEvent) {  };

/**
 * This event is fired when the token gets selected.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Token.prototype.select = function(oControlEvent) {  };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Token.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.Token(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Token.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.Token(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:delete delete} event of this <code>sap.m.Token</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Token</code> itself.
 * 
 * This event is fired if the user clicks the token's delete icon.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Token</code> itself
 * 
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Token.prototype.attachDelete = function(oData,fnFunction,oListener) { return new sap.m.Token(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:deselect deselect} event of this <code>sap.m.Token</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Token</code> itself.
 * 
 * This event is fired when the token gets deselected.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Token</code> itself
 * 
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Token.prototype.attachDeselect = function(oData,fnFunction,oListener) { return new sap.m.Token(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.Token</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Token</code> itself.
 * 
 * This event is fired when the user clicks on the token.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Token</code> itself
 * 
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Token.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Token(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:select select} event of this <code>sap.m.Token</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Token</code> itself.
 * 
 * This event is fired when the token gets selected.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Token</code> itself
 * 
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Token.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.m.Token(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:delete delete} event of this <code>sap.m.Token</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Token.prototype.detachDelete = function(fnFunction,oListener) { return new sap.m.Token(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:deselect deselect} event of this <code>sap.m.Token</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Token.prototype.detachDeselect = function(fnFunction,oListener) { return new sap.m.Token(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.Token</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Token.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Token(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:select select} event of this <code>sap.m.Token</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Token.prototype.detachSelect = function(fnFunction,oListener) { return new sap.m.Token(); };

/**
 * Creates a new subclass of class sap.m.Token with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Token.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:delete delete} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Token.prototype.fireDelete = function(mParameters) { return new sap.m.Token(); };

/**
 * Fires event {@link #event:deselect deselect} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Token.prototype.fireDeselect = function(mParameters) { return new sap.m.Token(); };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Token.prototype.firePress = function(mParameters) { return new sap.m.Token(); };

/**
 * Fires event {@link #event:select select} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Token.prototype.fireSelect = function(mParameters) { return new sap.m.Token(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.Token.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.Token.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEditable editable}.
 * 
 * Indicates the editable status of the token. If it is set to <code>true</code>, token displays a delete icon.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>editable</code>
 * 
 * @public
 * 
 */
sap.m.Token.prototype.getEditable = function() { return false; };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * Key of the token.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>key</code>
 * 
 * @public
 * 
 */
sap.m.Token.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.m.Token.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Token.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSelected selected}.
 * 
 * Indicates the current selection status of the token.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>selected</code>
 * 
 * @public
 * 
 */
sap.m.Token.prototype.getSelected = function() { return false; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Displayed text of the token.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.m.Token.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * This property specifies the text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.Token.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Token.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Token.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Token.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Token.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets the editable status of the token.
 * 
 * @param {boolean} bEditable Indicates if the token is editable.
 * @return {sap.m.Token} this for chaining
 * @public
 * 
 */
sap.m.Token.prototype.setEditable = function(bEditable) { return new sap.m.Token(); };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * Key of the token.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Token.prototype.setKey = function(sKey) { return new sap.m.Token(); };

/**
 * Sets the selection status of the token.
 * 
 * @param {boolean} bSelected Indicates if the token is selected.
 * @return {sap.m.Token} this for chaining
 * @public
 * 
 */
sap.m.Token.prototype.setSelected = function(bSelected) { return new sap.m.Token(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Displayed text of the token.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Token.prototype.setText = function(sText) { return new sap.m.Token(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * This property specifies the text directionality with enumerated options. By default, the control inherits text direction from the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.m.Token} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.m.Token.prototype.setTextDirection = function(sTextDirection) { return new sap.m.Token(); };


// ---- sap.m.Tokenizer --------------------------------------------------------------------------

/**
 * Constructor for a new Tokenizer.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTokens tokens} : sap.m.Token[] (default)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:tokenChange tokenChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:tokenUpdate tokenUpdate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * <h3>Overview</h3>
 * A tokenizer is a container for {@link sap.m.Token Tokens}. It also handles all actions associated with the tokens like adding, deleting, selecting and editing.
 * <h3>Structure</h3>
 * The tokens are stored in the <code>tokens</code> aggregation.
 * The tokenizer can determine, by setting the <code>editable</code> property, whether the tokens in it are editable.
 * Still the Token itself can determine if it is <code>editable</code>. This allows you to have non-editable Tokens in an editable Tokenizer.
 * 
 * <h3>Usage</h3>
 * <h4>When to use:</h4>
 * The tokenizer can only be used as part of {@link sap.m.MultiComboBox MultiComboBox},{@link sap.m.MultiInput MultiInput} or {@link sap.ui.comp.valuehelpdialog.ValueHelpDialog ValueHelpDialog}
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Tokenizer = function(sId,mSettings) {};
/**
 * fired when the tokens aggregation changed (add / remove token)
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.type type of tokenChange event.
 * There are four TokenChange types: "added", "removed", "removedAll", "tokensChanged".
 * Use Tokenizer.TokenChangeType.Added for "added",	Tokenizer.TokenChangeType.Removed for "removed", Tokenizer.TokenChangeType.RemovedAll for "removedAll" and Tokenizer.TokenChangeType.TokensChanged for "tokensChanged".
 * @param {sap.m.Token} oControlEvent.getParameters.token the added token or removed token.
 * This parameter is used when tokenChange type is "added" or "removed".
 * @param {sap.m.Token[]} oControlEvent.getParameters.tokens the array of removed tokens.
 * This parameter is used when tokenChange type is "removedAll".
 * @param {sap.m.Token[]} oControlEvent.getParameters.addedTokens the array of tokens that are added.
 * This parameter is used when tokenChange type is "tokenChanged".
 * @param {sap.m.Token[]} oControlEvent.getParameters.removedTokens the array of tokens that are removed.
 * This parameter is used when tokenChange type is "tokenChanged".
 * @public
 * 
 */
sap.m.Tokenizer.prototype.tokenChange = function(oControlEvent) {  };

/**
 * Fired when the tokens aggregation changed (add / remove token)
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Tokenizer.prototype.tokenUpdate = function(oControlEvent) {  };

/**
 * Function removes all selected tokens
 * 
 * @public
 * @returns {sap.m.Tokenizer} - this for chaining
 * 
 */
sap.m.Tokenizer.prototype._removeSelectedTokens = function() { return new sap.m.Tokenizer(); };

/**
 * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
 * @returns {sap.m.Tokenizer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.addAriaDescribedBy = function(vAriaDescribedBy) { return new sap.m.Tokenizer(); };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.Tokenizer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.Tokenizer(); };

/**
 * Adds some token to the aggregation {@link #getTokens tokens}.
 * @param {sap.m.Token}
 *            oToken the token to add; if empty, nothing is inserted
 * @returns {sap.m.Tokenizer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.addToken = function(oToken) { return new sap.m.Tokenizer(); };

/**
 * Function validates the given text and adds a new token if validation was successful
 * 
 * @public
 * @param {object}
 *          oParameters - parameter bag containing following fields: {sap.m.String} text - the source text {sap.m.Token}
 *          [optional] token - a suggested token {object} [optional] suggestionObject - any object used to find the
 *          suggested token {function} [optional] validationCallback - callback which gets called after validation has
 *          finished
 * 
 */
sap.m.Tokenizer.prototype.addValidateToken = function(oParameters) {  };

/**
 * Function adds a validation callback called before any new token gets added to the tokens aggregation
 * 
 * @public
 * @param {function}
 *          fValidator
 * 
 */
sap.m.Tokenizer.prototype.addValidator = function(fValidator) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:tokenChange tokenChange} event of this <code>sap.m.Tokenizer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Tokenizer</code> itself.
 * 
 * fired when the tokens aggregation changed (add / remove token)
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Tokenizer</code> itself
 * 
 * @returns {sap.m.Tokenizer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Tokenizer.prototype.attachTokenChange = function(oData,fnFunction,oListener) { return new sap.m.Tokenizer(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:tokenUpdate tokenUpdate} event of this <code>sap.m.Tokenizer</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Tokenizer</code> itself.
 * 
 * Fired when the tokens aggregation changed (add / remove token)
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Tokenizer</code> itself
 * 
 * @returns {sap.m.Tokenizer} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Tokenizer.prototype.attachTokenUpdate = function(oData,fnFunction,oListener) { return new sap.m.Tokenizer(); };

/**
 * Destroys all the tokens in the aggregation {@link #getTokens tokens}.
 * @returns {sap.m.Tokenizer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.destroyTokens = function() { return new sap.m.Tokenizer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:tokenChange tokenChange} event of this <code>sap.m.Tokenizer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Tokenizer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.detachTokenChange = function(fnFunction,oListener) { return new sap.m.Tokenizer(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:tokenUpdate tokenUpdate} event of this <code>sap.m.Tokenizer</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Tokenizer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.detachTokenUpdate = function(fnFunction,oListener) { return new sap.m.Tokenizer(); };

/**
 * Creates a new subclass of class sap.m.Tokenizer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Tokenizer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:tokenChange tokenChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.type] type of tokenChange event.
 * There are four TokenChange types: "added", "removed", "removedAll", "tokensChanged".
 * Use Tokenizer.TokenChangeType.Added for "added",	Tokenizer.TokenChangeType.Removed for "removed", Tokenizer.TokenChangeType.RemovedAll for "removedAll" and Tokenizer.TokenChangeType.TokensChanged for "tokensChanged".
 * @param {sap.m.Token} [mParameters.token] the added token or removed token.
 * This parameter is used when tokenChange type is "added" or "removed".
 * @param {sap.m.Token[]} [mParameters.tokens] the array of removed tokens.
 * This parameter is used when tokenChange type is "removedAll".
 * @param {sap.m.Token[]} [mParameters.addedTokens] the array of tokens that are added.
 * This parameter is used when tokenChange type is "tokenChanged".
 * @param {sap.m.Token[]} [mParameters.removedTokens] the array of tokens that are removed.
 * This parameter is used when tokenChange type is "tokenChanged".
 * 
 * @returns {sap.m.Tokenizer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Tokenizer.prototype.fireTokenChange = function(mParameters) { return new sap.m.Tokenizer(); };

/**
 * Fires event {@link #event:tokenUpdate tokenUpdate} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Tokenizer} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Tokenizer.prototype.fireTokenUpdate = function(mParameters) { return new sap.m.Tokenizer(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy ariaDescribedBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.getAriaDescribedBy = function() { return new Array(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getEditable editable}.
 * 
 * true if tokens shall be editable otherwise false
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>editable</code>
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.getEditable = function() { return false; };

/**
 * Returns a metadata object for class sap.m.Tokenizer.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Tokenizer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Function returns the internally used scroll delegate
 * 
 * @public
 * @returns {sap.ui.core.delegate.ScrollEnablement}
 * 
 */
sap.m.Tokenizer.prototype.getScrollDelegate = function() { return new sap.ui.core.delegate.ScrollEnablement(); };

/**
 * Function returns the tokens' width
 * 
 * @public
 * 
 * @returns
 * 	the complete tokens' width
 * 
 */
sap.m.Tokenizer.prototype.getScrollWidth = function() {  };

/**
 * Function returns all currently selected tokens
 * 
 * @public
 * @returns {sap.m.Token[]} - array of selected tokens or empty array
 * 
 */
sap.m.Tokenizer.prototype.getSelectedTokens = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getTokens tokens}.
 * 
 * the currently displayed tokens
 * 
 * @returns {sap.m.Token[]}
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.getTokens = function() { return new Array(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the Tokenizer.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.m.Token</code> in the aggregation {@link #getTokens tokens}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.Token}
 *           oToken The token whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.indexOfToken = function(oToken) { return 0; };

/**
 * Inserts a token into the aggregation {@link #getTokens tokens}.
 * 
 * @param {sap.m.Token}
 *            oToken the token to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the token should be inserted at; for
 *              a negative value of <code>iIndex</code>, the token is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the token is inserted at
 *              the last position
 * @returns {sap.m.Tokenizer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.insertToken = function(oToken,iIndex) { return new sap.m.Tokenizer(); };

/**
 * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.removeAllAriaDescribedBy = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getTokens tokens}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.Token[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.removeAllTokens = function() { return new Array(); };

/**
 * Function removes all validation callbacks
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.removeAllValidators = function() {  };

/**
 * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaDescribedBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.removeAriaDescribedBy = function(vAriaDescribedBy) { return new sap.ui.core.ID(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Removes a token from the aggregation {@link #getTokens tokens}.
 * 
 * @param {int | string | sap.m.Token} vToken The token to remove or its index or id
 * @returns {sap.m.Token} The removed token or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.removeToken = function(vToken) { return new sap.m.Token(); };

/**
 * Function removes a validation callback
 * 
 * @public
 * @param {function}
 *          fValidator
 * 
 */
sap.m.Tokenizer.prototype.removeValidator = function(fValidator) {  };

/**
 * Function scrolls the tokens to the end
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.scrollToEnd = function() {  };

/**
 * Function scrolls the tokens to the start
 * 
 * @public
 * 
 * 
 */
sap.m.Tokenizer.prototype.scrollToStart = function() {  };

/**
 * Function selects all tokens
 * 
 * @public
 * @param {boolean}
 *          [optional] bSelect - true for selecting, false for deselecting
 * @returns {sap.m.Tokenizer} - this for chaining
 * 
 */
sap.m.Tokenizer.prototype.selectAllTokens = function(optional) { return new sap.m.Tokenizer(); };

/**
 * Sets a new value for property {@link #getEditable editable}.
 * 
 * true if tokens shall be editable otherwise false
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEditable New value for property <code>editable</code>
 * @returns {sap.m.Tokenizer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.setEditable = function(bEditable) { return new sap.m.Tokenizer(); };

/**
 * Function sets the tokenizer's width in pixels
 * 
 * @public
 * @param {number}
 *          nWidth - the new width in pixels
 * 
 */
sap.m.Tokenizer.prototype.setPixelWidth = function(nWidth) {  };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width of the Tokenizer.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.Tokenizer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Tokenizer.prototype.setWidth = function(sWidth) { return new sap.m.Tokenizer(); };


// ---- sap.m.Toolbar --------------------------------------------------------------------------

/**
 * Constructor for a new Toolbar.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getActive active} : boolean (default: false)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getDesign design} : sap.m.ToolbarDesign (default: Auto)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[] (default)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The Toolbar control is a horizontal container that is most commonly used to display buttons, labels, selects and various other input controls.
 * 
 * By default, Toolbar items are shrinkable if they have percent-based width (e.g. Input, Slider) or implement the {@link sap.ui.core.IShrinkable} interface (e.g. Text, Label). This behavior can be overridden by providing {@link sap.m.ToolbarLayoutData} for the Toolbar items.
 * 
 * Note: It is recommended that you use {@link sap.m.OverflowToolbar} over Toolbar, unless you want to avoid overflow in favor of shrinking.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.Toolbar,sap.m.IBar
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Toolbar = function(sId,mSettings) {};
/**
 * Sets classes and tag according to the context in the page. Possible contexts are header, footer, subheader
 * @returns {IBar} this for chaining
 * @protected
 * 
 */
sap.m.Toolbar.prototype.applyTagAndContextClassFor = undefined

/**
 * Gets the HTML tag of the root domref
 * @returns {IBarHTMLTag} the HTML-tag
 * @protected
 * 
 */
sap.m.Toolbar.prototype.getHTMLTag = undefined

/**
 * Returns if the bar is sensitive to the container context. Implementation of the IBar interface
 * @returns {boolean} isContextSensitive
 * @protected
 * 
 */
sap.m.Toolbar.prototype.isContextSensitive = undefined

/**
 * Sets the HTML tag of the root domref
 * @param {string} sTag
 * @returns {IBar} this for chaining
 * @protected
 * 
 */
sap.m.Toolbar.prototype.setHTMLTag = undefined

/**
 * Fired when the user clicks on the toolbar, if the Active property is set to "true".
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control} oControlEvent.getParameters.srcControl The toolbar item that was pressed
 * @public
 * 
 */
sap.m.Toolbar.prototype.press = function(oControlEvent) {  };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.m.Toolbar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.m.Toolbar(); };

/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.Toolbar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.addContent = function(oContent) { return new sap.m.Toolbar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.m.Toolbar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Toolbar</code> itself.
 * 
 * Fired when the user clicks on the toolbar, if the Active property is set to "true".
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Toolbar</code> itself
 * 
 * @returns {sap.m.Toolbar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Toolbar.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.m.Toolbar(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.Toolbar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.destroyContent = function() { return new sap.m.Toolbar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.m.Toolbar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Toolbar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.detachPress = function(fnFunction,oListener) { return new sap.m.Toolbar(); };

/**
 * Creates a new subclass of class sap.m.Toolbar with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Toolbar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control} [mParameters.srcControl] The toolbar item that was pressed
 * 
 * @returns {sap.m.Toolbar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Toolbar.prototype.firePress = function(mParameters) { return new sap.m.Toolbar(); };

/**
 * Gets current value of property {@link #getActive active}.
 * 
 * Indicates that the whole toolbar is clickable. The Press event is fired only if Active is set to true.
 * Note: This property should be used when there are no interactive controls inside the toolbar and the toolbar itself is meant to be interactive.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>active</code>
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.getActive = function() { return false; };

/**
 * Returns the currently applied design property of the Toolbar.
 * 
 * @returns {sap.m.ToolbarDesign}
 * @protected
 * 
 */
sap.m.Toolbar.prototype.getActiveDesign = function() { return new sap.m.ToolbarDesign(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * The content of the toolbar.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.getContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getDesign design}.
 * 
 * Defines the toolbar design.
 * Note: Design settings are theme-dependent. They also determine the default height of the toolbar.
 * 
 * Default value is <code>Auto</code>.
 * @returns {sap.m.ToolbarDesign} Value of property <code>design</code>
 * @since 1.16.8
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.getDesign = function() { return new sap.m.ToolbarDesign(); };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Sets the enabled property of all controls defined in the content aggregation.
 * Note: This property does not apply to the toolbar itself, but rather to its items.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.getEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * Defines the height of the control.
 * Note: By default, the Height property depends on the used theme and the Design property.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.Toolbar.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Toolbar.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the first sap.m.Title control instance inside the toolbar for the accessibility
 * 
 * @returns {sap.m.Title|undefined}
 * @since 1.44
 * @protected
 * 
 */
sap.m.Toolbar.prototype.getTitleControl = function() { return new sap.m.Title(); };

/**
 * Returns the first sap.m.Title control id inside the toolbar for the accessibility
 * 
 * @returns {String}
 * @since 1.28
 * @protected
 * 
 */
sap.m.Toolbar.prototype.getTitleId = function() { return null; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the control.
 * By default, Toolbar is a block element. If the the width is not explicitly set, the control will assume its natural size.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.Toolbar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.insertContent = function(oContent,iIndex) { return new sap.m.Toolbar(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Sets a new value for property {@link #getActive active}.
 * 
 * Indicates that the whole toolbar is clickable. The Press event is fired only if Active is set to true.
 * Note: This property should be used when there are no interactive controls inside the toolbar and the toolbar itself is meant to be interactive.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bActive New value for property <code>active</code>
 * @returns {sap.m.Toolbar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.setActive = function(bActive) { return new sap.m.Toolbar(); };

/**
 * Sets a new value for property {@link #getDesign design}.
 * 
 * Defines the toolbar design.
 * Note: Design settings are theme-dependent. They also determine the default height of the toolbar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Auto</code>.
 * @param {sap.m.ToolbarDesign} sDesign New value for property <code>design</code>
 * @returns {sap.m.Toolbar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.8
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.setDesign = function(sDesign) { return new sap.m.Toolbar(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Sets the enabled property of all controls defined in the content aggregation.
 * Note: This property does not apply to the toolbar itself, but rather to its items.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.m.Toolbar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.setEnabled = function(bEnabled) { return new sap.m.Toolbar(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * Defines the height of the control.
 * Note: By default, the Height property depends on the used theme and the Design property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.m.Toolbar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.setHeight = function(sHeight) { return new sap.m.Toolbar(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width of the control.
 * By default, Toolbar is a block element. If the the width is not explicitly set, the control will assume its natural size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.Toolbar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Toolbar.prototype.setWidth = function(sWidth) { return new sap.m.Toolbar(); };


// ---- sap.m.ToolbarDesign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ToolbarDesign.toString = function() { return ""; };

// ---- sap.m.ToolbarLayoutData --------------------------------------------------------------------------

/**
 * Constructor for a new ToolbarLayoutData.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShrinkable shrinkable} : boolean (default: false)</li>
 * <li>{@link #getMinWidth minWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Defines layout data for the toolbar items.
 * @extends sap.ui.core.LayoutData
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.20
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ToolbarLayoutData = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ToolbarLayoutData with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ToolbarLayoutData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getMaxWidth maxWidth}.
 * 
 * Sets the maximum width of the toolbar item.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>maxWidth</code>
 * 
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.getMaxWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.ToolbarLayoutData.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ToolbarLayoutData.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMinWidth minWidth}.
 * 
 * Sets the minimum width of the toolbar item.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>minWidth</code>
 * 
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.getMinWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getShrinkable shrinkable}.
 * 
 * Determines whether the control, when in a toolbar, is shrinkable or not. For controls with fixed width (100px, 5rem, etc...) this property is ignored.
 * 
 * Note: Nested layout controls should not be shrinkable.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>shrinkable</code>
 * 
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.getShrinkable = function() { return false; };

/**
 * Sets a new value for property {@link #getMaxWidth maxWidth}.
 * 
 * Sets the maximum width of the toolbar item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sMaxWidth New value for property <code>maxWidth</code>
 * @returns {sap.m.ToolbarLayoutData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.setMaxWidth = function(sMaxWidth) { return new sap.m.ToolbarLayoutData(); };

/**
 * Sets a new value for property {@link #getMinWidth minWidth}.
 * 
 * Sets the minimum width of the toolbar item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sMinWidth New value for property <code>minWidth</code>
 * @returns {sap.m.ToolbarLayoutData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.setMinWidth = function(sMinWidth) { return new sap.m.ToolbarLayoutData(); };

/**
 * Sets a new value for property {@link #getShrinkable shrinkable}.
 * 
 * Determines whether the control, when in a toolbar, is shrinkable or not. For controls with fixed width (100px, 5rem, etc...) this property is ignored.
 * 
 * Note: Nested layout controls should not be shrinkable.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShrinkable New value for property <code>shrinkable</code>
 * @returns {sap.m.ToolbarLayoutData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ToolbarLayoutData.prototype.setShrinkable = function(bShrinkable) { return new sap.m.ToolbarLayoutData(); };


// ---- sap.m.ToolbarSeparator --------------------------------------------------------------------------

/**
 * Constructor for a new ToolbarSeparator.
 * 
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Creates a visual separator (theme dependent: padding, margin, line) between the preceding and succeeding toolbar item.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.26
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ToolbarSeparator = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.ToolbarSeparator with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ToolbarSeparator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.ToolbarSeparator.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ToolbarSeparator.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.ToolbarSpacer --------------------------------------------------------------------------

/**
 * Constructor for a new ToolbarSpacer.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: )</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * This control can be used to add horizontal space between toolbar items.
 * Note: ToolbarLayoutData should not be used with this control.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ToolbarSpacer = function(sId,mSettings) {};
/**
 * Flexible Spacer Class Name
 * @protected
 * 
 */
sap.m.ToolbarSpacer.flexClass = undefined

/**
 * Creates a new subclass of class sap.m.ToolbarSpacer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ToolbarSpacer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.ToolbarSpacer.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ToolbarSpacer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the horizontal space.
 * Note: Empty("") value makes the space flexible which means it covers the remaining space between toolbar items.
 * This feature can be used to push next item to the edge of the toolbar.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.ToolbarSpacer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width of the horizontal space.
 * Note: Empty("") value makes the space flexible which means it covers the remaining space between toolbar items.
 * This feature can be used to push next item to the edge of the toolbar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.ToolbarSpacer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ToolbarSpacer.prototype.setWidth = function(sWidth) { return new sap.m.ToolbarSpacer(); };


// ---- sap.m.touch --------------------------------------------------------------------------

/**
 * Given a list of touches, count the number of touches related with the given element.
 * 
 * @param {TouchList} oTouchList The list of touch objects to search.
 * @param {jQuery | Element | string} vElement A jQuery element or an element reference or an element id.
 * @return {number} The number of touches related with the given element.
 * @public
 * 
 * @memberof sap.m.touch
 */
sap.m.touch.countContained = function(oTouchList,vElement) { return 0.0; };

/**
 * Given a list of touch objects, find the touch that matches the given one.
 * 
 * @param {TouchList} oTouchList The list of touch objects to search.
 * @param {Touch | number} oTouch A touch object to find or a Touch.identifier that uniquely identifies the current finger in the touch session.
 * @return {object | undefined} The touch matching if any.
 * @public
 * 
 * @memberof sap.m.touch
 */
sap.m.touch.find = function(oTouchList,oTouch) { return new Object(); };


// ---- sap.m.Tree --------------------------------------------------------------------------

/**
 * Constructor for a new Tree.
 * 
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>Tree</code> control provides a tree structure for displaying data in a hierarchy.
 * <b>Note:</b> Growing feature is not supported by <code>Tree</code>.
 * @extends sap.m.ListBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.42
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Tree = function(sId,mSettings) {};
/**
 * Collapses all nodes.
 * 
 * @return {sap.m.Tree} A reference to the Tree control
 * @public
 * @since 1.48.0
 * 
 */
sap.m.Tree.prototype.collapseAll = function() { return new sap.m.Tree(); };

/**
 * Defines the level to which the tree is expanded.
 * The function can be used to define the initial expanding state. An alternative way to define the initial expanding state is to set the parameter <code>numberOfExpandedLevels</code> of the binding.
 * 
 * Example:
 * <pre>
 *   oTree.bindItems({
 *      path: "...",
 *      parameters: {
 *         numberOfExpandedLevels: 1
 *      }
 *   });
 * </pre>
 * @return {sap.m.Tree} A reference to the Tree control
 * @public
 * @param {int} iLevel The level to which the data is expanded
 * @since 1.48.0
 * 
 */
sap.m.Tree.prototype.expandToLevel = function(iLevel) { return new sap.m.Tree(); };

/**
 * Creates a new subclass of class sap.m.Tree with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Tree.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.Tree.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Tree.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * The <code>enableBusyIndicator</code> property is not supported for control <code>Tree</code>.
 * @public
 * @deprecated
 * 
 */
sap.m.Tree.prototype.setEnableBusyIndicator = function() {  };

/**
 * The <code>growing</code> property is not supported for control <code>Tree</code>.
 * @public
 * @deprecated
 * 
 */
sap.m.Tree.prototype.setGrowing = function() {  };

/**
 * The <code>growingDirection</code> property is not supported for control <code>Tree</code>.
 * @public
 * @deprecated
 * 
 */
sap.m.Tree.prototype.setGrowingDirection = function() {  };

/**
 * The <code>growingScrollToLoad</code> property is not supported for control <code>Tree</code>.
 * @public
 * @deprecated
 * 
 */
sap.m.Tree.prototype.setGrowingScrollToLoad = function() {  };

/**
 * The <code>growingThreshold</code> property is not supported for control <code>Tree</code>.
 * @public
 * @deprecated
 * 
 */
sap.m.Tree.prototype.setGrowingThreshold = function() {  };

/**
 * The <code>growingTriggerText</code> property is not supported for control <code>Tree</code>.
 * @public
 * @deprecated
 * 
 */
sap.m.Tree.prototype.setGrowingTriggerText = function() {  };


// ---- sap.m.TreeItemBase --------------------------------------------------------------------------

/**
 * Constructor for a new TreeItemBase.
 * 
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The <code>sap.m.TreeItemBase</code> contains the basic features of all specific tree items.
 * @extends sap.m.ListItemBase
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.42.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.TreeItemBase = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.TreeItemBase with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.TreeItemBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets the expanding information of the node.
 * 
 * @returns {Boolean}
 * @public
 * @since 1.42.0
 * 
 */
sap.m.TreeItemBase.prototype.getExpanded = function() { return null; };

/**
 * Gets the context of the node.
 * 
 * @returns {Object}
 * @public
 * @since 1.42.0
 * 
 */
sap.m.TreeItemBase.prototype.getItemNodeContext = function() { return null; };

/**
 * Gets the node level in the hierarchy.
 * 
 * @returns {int}
 * @public
 * @since 1.42.0
 * 
 */
sap.m.TreeItemBase.prototype.getLevel = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.TreeItemBase.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.TreeItemBase.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets the parent node control.
 * 
 * @returns {sap.m.TreeItemBase | undefined}
 * @public
 * @since 1.42.0
 * 
 */
sap.m.TreeItemBase.prototype.getParentNode = function() { return new sap.m.TreeItemBase(); };

/**
 * Gets the context of the parent node control.
 * 
 * @returns {Object}
 * @public
 * @since 1.42.0
 * 
 */
sap.m.TreeItemBase.prototype.getParentNodeContext = function() { return null; };

/**
 * Determines if the node is a leaf.
 * 
 * @returns {boolean}
 * @public
 * @since 1.42.0
 * 
 */
sap.m.TreeItemBase.prototype.isLeaf = function() { return false; };

/**
 * Checks if the node is the top level node.
 * 
 * @returns {boolean}
 * @public
 * @since 1.42.0
 * 
 */
sap.m.TreeItemBase.prototype.isTopLevel = function() { return false; };


// ---- sap.m.UploadCollection --------------------------------------------------------------------------

/**
 * Constructor for a new UploadCollection.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFileType fileType} : string[]</li>
 * <li>{@link #getMaximumFilenameLength maximumFilenameLength} : int</li>
 * <li>{@link #getMaximumFileSize maximumFileSize} : float</li>
 * <li>{@link #getMimeType mimeType} : string[]</li>
 * <li>{@link #getMultiple multiple} : boolean (default: false)</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getNoDataDescription noDataDescription} : string</li>
 * <li>{@link #getSameFilenameAllowed sameFilenameAllowed} : boolean (default: false)</li>
 * <li>{@link #getShowSeparators showSeparators} : sap.m.ListSeparators (default: All)</li>
 * <li>{@link #getUploadEnabled uploadEnabled} : boolean (default: true)</li>
 * <li>{@link #getUploadUrl uploadUrl} : string (default: ../../../upload)</li>
 * <li>{@link #getInstantUpload instantUpload} : boolean (default: true)</li>
 * <li>{@link #getNumberOfAttachmentsText numberOfAttachmentsText} : string</li>
 * <li>{@link #getMode mode} : sap.m.ListMode (default: None)</li>
 * <li>{@link #getUploadButtonInvisible uploadButtonInvisible} : boolean (default: false)</li>
 * <li>{@link #getTerminationEnabled terminationEnabled} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.UploadCollectionItem[] (default)</li>
 * <li>{@link #getHeaderParameters headerParameters} : sap.m.UploadCollectionParameter[]</li>
 * <li>{@link #getParameters parameters} : sap.m.UploadCollectionParameter[]</li>
 * <li>{@link #getToolbar toolbar} : sap.m.OverflowToolbar</li>
 * <li>{@link #getInfoToolbar infoToolbar} : sap.m.Toolbar</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:fileDeleted fileDeleted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:filenameLengthExceed filenameLengthExceed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:fileRenamed fileRenamed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:fileSizeExceed fileSizeExceed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:typeMissmatch typeMissmatch} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:uploadComplete uploadComplete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:uploadTerminated uploadTerminated} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeUploadStarts beforeUploadStarts} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:selectionChange selectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * This control allows you to upload single or multiple files from your devices (desktop, tablet or phone) and attach them to the application.
 * 
 * The consuming application needs to take into account that the consistency checks of the model during the upload of the file need to be performed, for example, if the user is editing or deleting a file.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.26
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.UploadCollection = function(sId,mSettings) {};
/**
 * The event is triggered before the actual upload starts. An event is fired per file. All the necessary header parameters should be set here.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.fileName Specifies the name of the file to be uploaded.
 * @param {function} oControlEvent.getParameters.addHeaderParameter Adds a header parameter to the file that will be uploaded.
 * @param {function} oControlEvent.getParameters.getHeaderParameter Returns the corresponding header parameter (type sap.m.UploadCollectionParameter) if available.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.beforeUploadStarts = function(oControlEvent) {  };

/**
 * The event is triggered when files are selected in the FileUploader dialog. Applications can set parameters and headerParameters which will be dispatched to the embedded FileUploader control.
 * Limitation: parameters and headerParameters are not supported by Internet Explorer 9.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.documentId A unique Id of the attached document.
 * This parameter is deprecated since version 1.28.0, use parameter files instead.
 * @param {object[]} oControlEvent.getParameters.files A FileList of individually selected files from the underlying system. See www.w3.org for the FileList Interface definition.
 * Limitation: Internet Explorer 9 supports only single file with property file.name.
 * Since version 1.28.0.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.change = function(oControlEvent) {  };

/**
 * The event is triggered when an uploaded attachment is selected and the Delete button is pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.documentId A unique Id of the attached document.
 * This parameter is deprecated since version 1.28.0, use parameter item instead.
 * @param {sap.m.UploadCollectionItem} oControlEvent.getParameters.item An item to be deleted from the collection.
 * Since version 1.28.0.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.fileDeleted = function(oControlEvent) {  };

/**
 * The event is triggered when the name of a chosen file is longer than the value specified with the maximumFilenameLength property (only if provided by the application).
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.documentId A unique Id of the attached document.
 * This parameter is deprecated since version 1.28.0, use parameter files instead.
 * @param {object[]} oControlEvent.getParameters.files A FileList of individually selected files from the underlying system.
 * Limitation: Internet Explorer 9 supports only single file with property file.name.
 * Since version 1.28.0.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.filenameLengthExceed = function(oControlEvent) {  };

/**
 * The event is triggered when the file name is changed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.documentId A unique Id of the attached document.
 * This parameter is deprecated since version 1.28.0, use parameter item instead.
 * @param {string} oControlEvent.getParameters.fileName The new file name.
 * This parameter is deprecated since version 1.28.0, use parameter item instead.
 * @param {sap.m.UploadCollectionItem} oControlEvent.getParameters.item The renamed UI element as an UploadCollectionItem.
 * Since version 1.28.0.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.fileRenamed = function(oControlEvent) {  };

/**
 * The event is triggered when the file size of an uploaded file is exceeded (only if the maxFileSize property was provided by the application).
 * This event is not supported by Internet Explorer 9.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.documentId A unique Id of the attached document.
 * This parameter is deprecated since version 1.28.0, use parameter files instead.
 * @param {string} oControlEvent.getParameters.fileSize The size in MB of a file to be uploaded.
 * This parameter is deprecated since version 1.28.0, use parameter files instead.
 * @param {object[]} oControlEvent.getParameters.files A FileList of individually selected files from the underlying system.
 * Limitation: Internet Explorer 9 supports only single file with property file.name.
 * Since version 1.28.0.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.fileSizeExceed = function(oControlEvent) {  };

/**
 * Fires when selection is changed via user interaction inside the control.
 * @event
 * @since 1.36.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.UploadCollectionItem} oControlEvent.getParameters.selectedItem The item whose selection has changed. In <code>MultiSelect</code> mode, only the selected item upmost is returned. This parameter can be used for single-selection modes.
 * @param {sap.m.UploadCollectionItem[]} oControlEvent.getParameters.selectedItems Array of items whose selection has changed. This parameter can be used for <code>MultiSelect</code> mode.
 * @param {boolean} oControlEvent.getParameters.selected Indicates whether the <code>listItem</code> parameter is selected or not.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.selectionChange = function(oControlEvent) {  };

/**
 * The event is triggered when the file type or the MIME type don't match the permitted types (only if the fileType property or the mimeType property are provided by the application).
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.documentId A unique Id of the attached document.
 * This parameter is deprecated since version 1.28.0, use parameter files instead.
 * @param {string} oControlEvent.getParameters.fileType File type.
 * This parameter is deprecated since version 1.28.0, use parameter files instead.
 * @param {string} oControlEvent.getParameters.mimeType MIME type.
 * This parameter is deprecated since version 1.28.0, use parameter files instead.
 * @param {object[]} oControlEvent.getParameters.files A FileList of individually selected files from the underlying system.
 * Limitation: Internet Explorer 9 supports only single file.
 * Since version 1.28.0.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.typeMissmatch = function(oControlEvent) {  };

/**
 * The event is triggered as soon as the upload request is completed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.readyStateXHR Ready state XHR. This parameter is deprecated since version 1.28.0., use parameter files instead.
 * @param {string} oControlEvent.getParameters.response Response of the completed upload request. This parameter is deprecated since version 1.28.0., use parameter files instead.
 * @param {string} oControlEvent.getParameters.status Status Code of the completed upload event. This parameter is deprecated since version 1.28.0., use parameter files instead.
 * @param {object[]} oControlEvent.getParameters.files A list of uploaded files. Each entry contains the following members.
 * fileName	: The name of a file to be uploaded.
 * response	: Response message which comes from the server. On the server side, this response has to be put within the 'body' tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.
 * reponse	: deprecated Since version 1.48.0. This parameter is deprecated, use parameter response instead.
 * responseRaw : HTTP-Response which comes from the server. This property is not supported by Internet Explorer Versions lower than 9.
 * status	: Status of the XHR request. This property is not supported by Internet Explorer 9 and lower.
 * headers : HTTP-Response-Headers which come from the server. Provided as a JSON-map, i.e. each header-field is reflected by a property in the header-object, with the property value reflecting the header-field's content. This property is not supported by Internet Explorer 9 and lower.
 * Since version 1.28.0.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.uploadComplete = function(oControlEvent) {  };

/**
 * The event is triggered as soon as the upload request was terminated by the user.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.fileName Specifies the name of the file of which the upload is to be terminated.
 * @param {function} oControlEvent.getParameters.getHeaderParameter This callback function returns the corresponding header parameter (type sap.m.UploadCollectionParameter) if available.
 * @public
 * 
 */
sap.m.UploadCollection.prototype.uploadTerminated = function(oControlEvent) {  };

/**
 * Adds some headerParameter to the aggregation {@link #getHeaderParameters headerParameters}.
 * @param {sap.m.UploadCollectionParameter}
 *            oHeaderParameter the headerParameter to add; if empty, nothing is inserted
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.addHeaderParameter = function(oHeaderParameter) { return new sap.m.UploadCollection(); };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.m.UploadCollectionItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.addItem = function(oItem) { return new sap.m.UploadCollection(); };

/**
 * Adds some parameter to the aggregation {@link #getParameters parameters}.
 * @param {sap.m.UploadCollectionParameter}
 *            oParameter the parameter to add; if empty, nothing is inserted
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.addParameter = function(oParameter) { return new sap.m.UploadCollection(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeUploadStarts beforeUploadStarts} event of this <code>sap.m.UploadCollection</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
 * 
 * The event is triggered before the actual upload starts. An event is fired per file. All the necessary header parameters should be set here.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachBeforeUploadStarts = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.m.UploadCollection</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
 * 
 * The event is triggered when files are selected in the FileUploader dialog. Applications can set parameters and headerParameters which will be dispatched to the embedded FileUploader control.
 * Limitation: parameters and headerParameters are not supported by Internet Explorer 9.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:fileDeleted fileDeleted} event of this <code>sap.m.UploadCollection</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
 * 
 * The event is triggered when an uploaded attachment is selected and the Delete button is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachFileDeleted = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:filenameLengthExceed filenameLengthExceed} event of this <code>sap.m.UploadCollection</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
 * 
 * The event is triggered when the name of a chosen file is longer than the value specified with the maximumFilenameLength property (only if provided by the application).
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachFilenameLengthExceed = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:fileRenamed fileRenamed} event of this <code>sap.m.UploadCollection</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
 * 
 * The event is triggered when the file name is changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachFileRenamed = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:fileSizeExceed fileSizeExceed} event of this <code>sap.m.UploadCollection</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
 * 
 * The event is triggered when the file size of an uploaded file is exceeded (only if the maxFileSize property was provided by the application).
 * This event is not supported by Internet Explorer 9.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachFileSizeExceed = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:selectionChange selectionChange} event of this <code>sap.m.UploadCollection</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
 * 
 * Fires when selection is changed via user interaction inside the control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.36.0
 * 
 */
sap.m.UploadCollection.prototype.attachSelectionChange = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:typeMissmatch typeMissmatch} event of this <code>sap.m.UploadCollection</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
 * 
 * The event is triggered when the file type or the MIME type don't match the permitted types (only if the fileType property or the mimeType property are provided by the application).
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachTypeMissmatch = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:uploadComplete uploadComplete} event of this <code>sap.m.UploadCollection</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
 * 
 * The event is triggered as soon as the upload request is completed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachUploadComplete = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:uploadTerminated uploadTerminated} event of this <code>sap.m.UploadCollection</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
 * 
 * The event is triggered as soon as the upload request was terminated by the user.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.UploadCollection.prototype.attachUploadTerminated = function(oData,fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Binds aggregation {@link #getItems items} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.bindItems = function(oBindingInfo) { return new sap.m.UploadCollection(); };

/**
 * Destroys all the headerParameters in the aggregation {@link #getHeaderParameters headerParameters}.
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.destroyHeaderParameters = function() { return new sap.m.UploadCollection(); };

/**
 * Destroys the infoToolbar in the aggregation {@link #getInfoToolbar infoToolbar}.
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.destroyInfoToolbar = function() { return new sap.m.UploadCollection(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.destroyItems = function() { return new sap.m.UploadCollection(); };

/**
 * Destroys all the parameters in the aggregation {@link #getParameters parameters}.
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.destroyParameters = function() { return new sap.m.UploadCollection(); };

/**
 * Destroys the toolbar in the aggregation {@link #getToolbar toolbar}.
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.destroyToolbar = function() { return new sap.m.UploadCollection(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeUploadStarts beforeUploadStarts} event of this <code>sap.m.UploadCollection</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachBeforeUploadStarts = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.m.UploadCollection</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachChange = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:fileDeleted fileDeleted} event of this <code>sap.m.UploadCollection</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachFileDeleted = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:filenameLengthExceed filenameLengthExceed} event of this <code>sap.m.UploadCollection</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachFilenameLengthExceed = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:fileRenamed fileRenamed} event of this <code>sap.m.UploadCollection</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachFileRenamed = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:fileSizeExceed fileSizeExceed} event of this <code>sap.m.UploadCollection</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachFileSizeExceed = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:selectionChange selectionChange} event of this <code>sap.m.UploadCollection</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachSelectionChange = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:typeMissmatch typeMissmatch} event of this <code>sap.m.UploadCollection</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachTypeMissmatch = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:uploadComplete uploadComplete} event of this <code>sap.m.UploadCollection</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachUploadComplete = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:uploadTerminated uploadTerminated} event of this <code>sap.m.UploadCollection</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.detachUploadTerminated = function(fnFunction,oListener) { return new sap.m.UploadCollection(); };

/**
 * Downloads the given item.
 * This function delegates to {sap.m.UploadCollectionItem.download}.
 * @param {sap.m.UploadCollectionItem} uploadCollectionItem The item to download. This parameter is mandatory.
 * @param {boolean} askForLocation Decides whether to ask for a location to download or not.
 * @returns {boolean} True if the download has started successfully. False if the download couldn't be started.
 * @since 1.36.0
 * @public
 * 
 */
sap.m.UploadCollection.prototype.downloadItem = function(uploadCollectionItem,askForLocation) { return false; };

/**
 * Creates a new subclass of class sap.m.UploadCollection with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.UploadCollection.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:beforeUploadStarts beforeUploadStarts} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.fileName] Specifies the name of the file to be uploaded.
 * @param {function} [mParameters.addHeaderParameter] Adds a header parameter to the file that will be uploaded.
 * @param {function} [mParameters.getHeaderParameter] Returns the corresponding header parameter (type sap.m.UploadCollectionParameter) if available.
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireBeforeUploadStarts = function(mParameters) { return new sap.m.UploadCollection(); };

/**
 * Fires event {@link #event:change change} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.documentId] A unique Id of the attached document.
 * This parameter is deprecated since version 1.28.0, use parameter files instead.
 * @param {object[]} [mParameters.files] A FileList of individually selected files from the underlying system. See www.w3.org for the FileList Interface definition.
 * Limitation: Internet Explorer 9 supports only single file with property file.name.
 * Since version 1.28.0.
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireChange = function(mParameters) { return new sap.m.UploadCollection(); };

/**
 * Fires event {@link #event:fileDeleted fileDeleted} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.documentId] A unique Id of the attached document.
 * This parameter is deprecated since version 1.28.0, use parameter item instead.
 * @param {sap.m.UploadCollectionItem} [mParameters.item] An item to be deleted from the collection.
 * Since version 1.28.0.
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireFileDeleted = function(mParameters) { return new sap.m.UploadCollection(); };

/**
 * Fires event {@link #event:filenameLengthExceed filenameLengthExceed} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.documentId] A unique Id of the attached document.
 * This parameter is deprecated since version 1.28.0, use parameter files instead.
 * @param {object[]} [mParameters.files] A FileList of individually selected files from the underlying system.
 * Limitation: Internet Explorer 9 supports only single file with property file.name.
 * Since version 1.28.0.
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireFilenameLengthExceed = function(mParameters) { return new sap.m.UploadCollection(); };

/**
 * Fires event {@link #event:fileRenamed fileRenamed} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.documentId] A unique Id of the attached document.
 * This parameter is deprecated since version 1.28.0, use parameter item instead.
 * @param {string} [mParameters.fileName] The new file name.
 * This parameter is deprecated since version 1.28.0, use parameter item instead.
 * @param {sap.m.UploadCollectionItem} [mParameters.item] The renamed UI element as an UploadCollectionItem.
 * Since version 1.28.0.
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireFileRenamed = function(mParameters) { return new sap.m.UploadCollection(); };

/**
 * Fires event {@link #event:fileSizeExceed fileSizeExceed} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.documentId] A unique Id of the attached document.
 * This parameter is deprecated since version 1.28.0, use parameter files instead.
 * @param {string} [mParameters.fileSize] The size in MB of a file to be uploaded.
 * This parameter is deprecated since version 1.28.0, use parameter files instead.
 * @param {object[]} [mParameters.files] A FileList of individually selected files from the underlying system.
 * Limitation: Internet Explorer 9 supports only single file with property file.name.
 * Since version 1.28.0.
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireFileSizeExceed = function(mParameters) { return new sap.m.UploadCollection(); };

/**
 * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.UploadCollectionItem} [mParameters.selectedItem] The item whose selection has changed. In <code>MultiSelect</code> mode, only the selected item upmost is returned. This parameter can be used for single-selection modes.
 * @param {sap.m.UploadCollectionItem[]} [mParameters.selectedItems] Array of items whose selection has changed. This parameter can be used for <code>MultiSelect</code> mode.
 * @param {boolean} [mParameters.selected] Indicates whether the <code>listItem</code> parameter is selected or not.
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.36.0
 * 
 */
sap.m.UploadCollection.prototype.fireSelectionChange = function(mParameters) { return new sap.m.UploadCollection(); };

/**
 * Fires event {@link #event:typeMissmatch typeMissmatch} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.documentId] A unique Id of the attached document.
 * This parameter is deprecated since version 1.28.0, use parameter files instead.
 * @param {string} [mParameters.fileType] File type.
 * This parameter is deprecated since version 1.28.0, use parameter files instead.
 * @param {string} [mParameters.mimeType] MIME type.
 * This parameter is deprecated since version 1.28.0, use parameter files instead.
 * @param {object[]} [mParameters.files] A FileList of individually selected files from the underlying system.
 * Limitation: Internet Explorer 9 supports only single file.
 * Since version 1.28.0.
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireTypeMissmatch = function(mParameters) { return new sap.m.UploadCollection(); };

/**
 * Fires event {@link #event:uploadComplete uploadComplete} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.readyStateXHR] Ready state XHR. This parameter is deprecated since version 1.28.0., use parameter files instead.
 * @param {string} [mParameters.response] Response of the completed upload request. This parameter is deprecated since version 1.28.0., use parameter files instead.
 * @param {string} [mParameters.status] Status Code of the completed upload event. This parameter is deprecated since version 1.28.0., use parameter files instead.
 * @param {object[]} [mParameters.files] A list of uploaded files. Each entry contains the following members.
 * fileName	: The name of a file to be uploaded.
 * response	: Response message which comes from the server. On the server side, this response has to be put within the 'body' tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.
 * reponse	: deprecated Since version 1.48.0. This parameter is deprecated, use parameter response instead.
 * responseRaw : HTTP-Response which comes from the server. This property is not supported by Internet Explorer Versions lower than 9.
 * status	: Status of the XHR request. This property is not supported by Internet Explorer 9 and lower.
 * headers : HTTP-Response-Headers which come from the server. Provided as a JSON-map, i.e. each header-field is reflected by a property in the header-object, with the property value reflecting the header-field's content. This property is not supported by Internet Explorer 9 and lower.
 * Since version 1.28.0.
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireUploadComplete = function(mParameters) { return new sap.m.UploadCollection(); };

/**
 * Fires event {@link #event:uploadTerminated uploadTerminated} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.fileName] Specifies the name of the file of which the upload is to be terminated.
 * @param {function} [mParameters.getHeaderParameter] This callback function returns the corresponding header parameter (type sap.m.UploadCollectionParameter) if available.
 * 
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.UploadCollection.prototype.fireUploadTerminated = function(mParameters) { return new sap.m.UploadCollection(); };

/**
 * Gets current value of property {@link #getFileType fileType}.
 * 
 * Defines the allowed file types for the upload.
 * The chosen files will be checked against an array of file types.
 * If at least one file does not fit the file type requirements, the upload is prevented.  Example: ["jpg", "png", "bmp"].
 * 
 * @returns {string[]} Value of property <code>fileType</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getFileType = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getHeaderParameters headerParameters}.
 * 
 * Specifies the header parameters for the FileUploader that are submitted only with XHR requests.
 * Header parameters are not supported by Internet Explorer 8 and 9.
 * 
 * @returns {sap.m.UploadCollectionParameter[]}
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getHeaderParameters = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getInfoToolbar infoToolbar}.
 * 
 * Specifies the info toolbar for filtering information. Sorting information will not displayed.
 * 
 * @returns {sap.m.Toolbar}
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getInfoToolbar = function() { return new sap.m.Toolbar(); };

/**
 * Gets current value of property {@link #getInstantUpload instantUpload}.
 * 
 * If false, no upload is triggered when a file is selected. In addition, if a file was selected, a new FileUploader instance is created to ensure that multiple files from multiple folders can be chosen.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>instantUpload</code>
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getInstantUpload = function() { return false; };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * Uploaded items.
 * 
 * @returns {sap.m.UploadCollectionItem[]}
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getItems = function() { return new Array(); };

/**
 * Gets current value of property {@link #getMaximumFilenameLength maximumFilenameLength}.
 * 
 * Specifies the maximum length of a file name.
 * If the maximum file name length is exceeded, the corresponding event 'filenameLengthExceed' is triggered.
 * 
 * @returns {int} Value of property <code>maximumFilenameLength</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getMaximumFilenameLength = function() { return 0; };

/**
 * Gets current value of property {@link #getMaximumFileSize maximumFileSize}.
 * 
 * Specifies a file size limit in megabytes that prevents the upload if at least one file exceeds the limit.
 * This property is not supported by Internet Explorer 8 and 9.
 * 
 * @returns {float} Value of property <code>maximumFileSize</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getMaximumFileSize = function() { return 0.0; };

/**
 * Returns a metadata object for class sap.m.UploadCollection.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.UploadCollection.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMimeType mimeType}.
 * 
 * Defines the allowed MIME types of files to be uploaded.
 * The chosen files will be checked against an array of MIME types.
 * If at least one file does not fit the MIME type requirements, the upload is prevented.
 * This property is not supported by Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].
 * 
 * @returns {string[]} Value of property <code>mimeType</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getMimeType = function() { return new Array(); };

/**
 * Gets current value of property {@link #getMode mode}.
 * 
 * Defines the selection mode of the control (e.g. None, SingleSelect, MultiSelect, SingleSelectLeft, SingleSelectMaster).
 * Since the UploadCollection reacts like a list for attachments, the API is close to the ListBase Interface.
 * sap.m.ListMode.Delete mode is not supported and will be automatically set to sap.m.ListMode.None.
 * In addition, if instant upload is set to false the mode sap.m.ListMode.MultiSelect is not supported and will be automatically set to sap.m.ListMode.None.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.m.ListMode} Value of property <code>mode</code>
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getMode = function() { return new sap.m.ListMode(); };

/**
 * Gets current value of property {@link #getMultiple multiple}.
 * 
 * Lets the user select multiple files from the same folder and then upload them.
 * Internet Explorer 8 and 9 do not support this property.
 * Please note that the various operating systems for mobile devices can react differently to the property so that fewer upload functions may be available in some cases.
 * 
 * If multiple property is set to false, the control shows an error message if more than one file is chosen for drag & drop.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>multiple</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getMultiple = function() { return false; };

/**
 * Gets current value of property {@link #getNoDataDescription noDataDescription}.
 * 
 * Allows you to set your own text for the 'No data' description label.
 * 
 * @returns {string} Value of property <code>noDataDescription</code>
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getNoDataDescription = function() { return ""; };

/**
 * Gets current value of property {@link #getNoDataText noDataText}.
 * 
 * Allows you to set your own text for the 'No data' text label.
 * 
 * @returns {string} Value of property <code>noDataText</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getNoDataText = function() { return ""; };

/**
 * Gets current value of property {@link #getNumberOfAttachmentsText numberOfAttachmentsText}.
 * 
 * Sets the title text in the toolbar of the list of attachments.
 * To show as well the number of attachments in brackets like the default text does. The number of attachments could be retrieved via "getItems().length".
 * If a new title is set, the default is deactivated.
 * The default value is set to language-dependent "Attachments (n)".
 * 
 * @returns {string} Value of property <code>numberOfAttachmentsText</code>
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getNumberOfAttachmentsText = function() { return ""; };

/**
 * Gets content of aggregation {@link #getParameters parameters}.
 * 
 * Specifies the parameters for the FileUploader that are rendered as a hidden input field.
 * 
 * @returns {sap.m.UploadCollectionParameter[]}
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getParameters = function() { return new Array(); };

/**
 * Gets current value of property {@link #getSameFilenameAllowed sameFilenameAllowed}.
 * 
 * Allows the user to use the same name for a file when editing the file name. 'Same name' refers to an already existing file name in the list.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>sameFilenameAllowed</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getSameFilenameAllowed = function() { return false; };

/**
 * ription Returns selected UploadCollectionItem.
 * @returns {sap.m.UploadCollectionItem} selected item
 * @since 1.34
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getSelectedItem = function() { return new sap.m.UploadCollectionItem(); };

/**
 * ription Returns an array containing the selected UploadCollectionItems.
 * @returns {sap.m.UploadCollectionItem[]} array with selected items
 * @public
 * @since 1.34
 * 
 */
sap.m.UploadCollection.prototype.getSelectedItems = function() { return new Array(); };

/**
 * Gets current value of property {@link #getShowSeparators showSeparators}.
 * 
 * Defines whether separators are shown between list items.
 * 
 * Default value is <code>All</code>.
 * @returns {sap.m.ListSeparators} Value of property <code>showSeparators</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getShowSeparators = function() { return new sap.m.ListSeparators(); };

/**
 * Gets current value of property {@link #getTerminationEnabled terminationEnabled}.
 * 
 * If true, the button that is used to terminate the instant file upload gets visible.
 * The button normally appears when a file is being uploaded.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>terminationEnabled</code>
 * @since 1.42.0
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getTerminationEnabled = function() { return false; };

/**
 * Gets content of aggregation {@link #getToolbar toolbar}.
 * 
 * Specifies the toolbar.
 * 
 * @returns {sap.m.OverflowToolbar}
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getToolbar = function() { return new sap.m.OverflowToolbar(); };

/**
 * Gets current value of property {@link #getUploadButtonInvisible uploadButtonInvisible}.
 * 
 * If true, the button used for uploading files is invisible.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>uploadButtonInvisible</code>
 * @since 1.42.0
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getUploadButtonInvisible = function() { return false; };

/**
 * Gets current value of property {@link #getUploadEnabled uploadEnabled}.
 * 
 * Enables the upload of a file.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>uploadEnabled</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getUploadEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getUploadUrl uploadUrl}.
 * 
 * Specifies the URL where the uploaded files have to be stored.
 * 
 * Default value is <code>../../../upload</code>.
 * @returns {string} Value of property <code>uploadUrl</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.getUploadUrl = function() { return ""; };

/**
 * Checks for the provided <code>sap.m.UploadCollectionParameter</code> in the aggregation {@link #getHeaderParameters headerParameters}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.UploadCollectionParameter}
 *           oHeaderParameter The headerParameter whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.indexOfHeaderParameter = function(oHeaderParameter) { return 0; };

/**
 * Checks for the provided <code>sap.m.UploadCollectionItem</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.UploadCollectionItem}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Checks for the provided <code>sap.m.UploadCollectionParameter</code> in the aggregation {@link #getParameters parameters}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.UploadCollectionParameter}
 *           oParameter The parameter whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.indexOfParameter = function(oParameter) { return 0; };

/**
 * Inserts a headerParameter into the aggregation {@link #getHeaderParameters headerParameters}.
 * 
 * @param {sap.m.UploadCollectionParameter}
 *            oHeaderParameter the headerParameter to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the headerParameter should be inserted at; for
 *              a negative value of <code>iIndex</code>, the headerParameter is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the headerParameter is inserted at
 *              the last position
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.insertHeaderParameter = function(oHeaderParameter,iIndex) { return new sap.m.UploadCollection(); };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.m.UploadCollectionItem}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.insertItem = function(oItem,iIndex) { return new sap.m.UploadCollection(); };

/**
 * Inserts a parameter into the aggregation {@link #getParameters parameters}.
 * 
 * @param {sap.m.UploadCollectionParameter}
 *            oParameter the parameter to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the parameter should be inserted at; for
 *              a negative value of <code>iIndex</code>, the parameter is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the parameter is inserted at
 *              the last position
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.insertParameter = function(oParameter,iIndex) { return new sap.m.UploadCollection(); };

/**
 * Opens the FileUploader dialog. When an UploadCollectionItem is provided, this method can be used to update a file with a new version.
 * In this case, the upload progress can be sequenced using the events: beforeUploadStarts, uploadComplete and uploadTerminated. For this use,
 * multiple properties from the UploadCollection have to be set to false. If no UploadCollectionItem is provided, only the dialog opens
 * and no further configuration of the UploadCollection is needed.
 * @param {sap.m.UploadCollectionItem} item The item to update with a new version. This parameter is mandatory.
 * @returns {sap.m.UploadCollection} To ensure method chaining, return the UploadCollection.
 * @since 1.38.0
 * @public
 * 
 */
sap.m.UploadCollection.prototype.openFileDialog = function(item) { return new sap.m.UploadCollection(); };

/**
 * Removes all the controls from the aggregation {@link #getHeaderParameters headerParameters}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.UploadCollectionParameter[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.removeAllHeaderParameters = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.UploadCollectionItem[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getParameters parameters}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.UploadCollectionParameter[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.removeAllParameters = function() { return new Array(); };

/**
 * Removes a headerParameter from the aggregation {@link #getHeaderParameters headerParameters}.
 * 
 * @param {int | string | sap.m.UploadCollectionParameter} vHeaderParameter The headerParameter to remove or its index or id
 * @returns {sap.m.UploadCollectionParameter} The removed headerParameter or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.removeHeaderParameter = function(vHeaderParameter) { return new sap.m.UploadCollectionParameter(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.m.UploadCollectionItem} vItem The item to remove or its index or id
 * @returns {sap.m.UploadCollectionItem} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.removeItem = function(vItem) { return new sap.m.UploadCollectionItem(); };

/**
 * Removes a parameter from the aggregation {@link #getParameters parameters}.
 * 
 * @param {int | string | sap.m.UploadCollectionParameter} vParameter The parameter to remove or its index or id
 * @returns {sap.m.UploadCollectionParameter} The removed parameter or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.removeParameter = function(vParameter) { return new sap.m.UploadCollectionParameter(); };

/**
 * ription Select all items in "MultiSelection" mode.
 * @returns {sap.m.UploadCollection} The current UploadCollection
 * @since 1.34
 * @public
 * 
 */
sap.m.UploadCollection.prototype.selectAll = function() { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getFileType fileType}.
 * 
 * Defines the allowed file types for the upload.
 * The chosen files will be checked against an array of file types.
 * If at least one file does not fit the file type requirements, the upload is prevented.  Example: ["jpg", "png", "bmp"].
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string[]} sFileType New value for property <code>fileType</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setFileType = function(sFileType) { return new sap.m.UploadCollection(); };

/**
 * Sets the aggregated {@link #getInfoToolbar infoToolbar}.
 * @param {sap.m.Toolbar} oInfoToolbar The infoToolbar to set
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setInfoToolbar = function(oInfoToolbar) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getInstantUpload instantUpload}.
 * 
 * If false, no upload is triggered when a file is selected. In addition, if a file was selected, a new FileUploader instance is created to ensure that multiple files from multiple folders can be chosen.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bInstantUpload New value for property <code>instantUpload</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setInstantUpload = function(bInstantUpload) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getMaximumFilenameLength maximumFilenameLength}.
 * 
 * Specifies the maximum length of a file name.
 * If the maximum file name length is exceeded, the corresponding event 'filenameLengthExceed' is triggered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iMaximumFilenameLength New value for property <code>maximumFilenameLength</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setMaximumFilenameLength = function(iMaximumFilenameLength) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getMaximumFileSize maximumFileSize}.
 * 
 * Specifies a file size limit in megabytes that prevents the upload if at least one file exceeds the limit.
 * This property is not supported by Internet Explorer 8 and 9.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {float} fMaximumFileSize New value for property <code>maximumFileSize</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setMaximumFileSize = function(fMaximumFileSize) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getMimeType mimeType}.
 * 
 * Defines the allowed MIME types of files to be uploaded.
 * The chosen files will be checked against an array of MIME types.
 * If at least one file does not fit the MIME type requirements, the upload is prevented.
 * This property is not supported by Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string[]} sMimeType New value for property <code>mimeType</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setMimeType = function(sMimeType) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getMode mode}.
 * 
 * Defines the selection mode of the control (e.g. None, SingleSelect, MultiSelect, SingleSelectLeft, SingleSelectMaster).
 * Since the UploadCollection reacts like a list for attachments, the API is close to the ListBase Interface.
 * sap.m.ListMode.Delete mode is not supported and will be automatically set to sap.m.ListMode.None.
 * In addition, if instant upload is set to false the mode sap.m.ListMode.MultiSelect is not supported and will be automatically set to sap.m.ListMode.None.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.m.ListMode} sMode New value for property <code>mode</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setMode = function(sMode) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getMultiple multiple}.
 * 
 * Lets the user select multiple files from the same folder and then upload them.
 * Internet Explorer 8 and 9 do not support this property.
 * Please note that the various operating systems for mobile devices can react differently to the property so that fewer upload functions may be available in some cases.
 * 
 * If multiple property is set to false, the control shows an error message if more than one file is chosen for drag & drop.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bMultiple New value for property <code>multiple</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setMultiple = function(bMultiple) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getNoDataDescription noDataDescription}.
 * 
 * Allows you to set your own text for the 'No data' description label.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sNoDataDescription New value for property <code>noDataDescription</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setNoDataDescription = function(sNoDataDescription) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getNoDataText noDataText}.
 * 
 * Allows you to set your own text for the 'No data' text label.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sNoDataText New value for property <code>noDataText</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setNoDataText = function(sNoDataText) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getNumberOfAttachmentsText numberOfAttachmentsText}.
 * 
 * Sets the title text in the toolbar of the list of attachments.
 * To show as well the number of attachments in brackets like the default text does. The number of attachments could be retrieved via "getItems().length".
 * If a new title is set, the default is deactivated.
 * The default value is set to language-dependent "Attachments (n)".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sNumberOfAttachmentsText New value for property <code>numberOfAttachmentsText</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setNumberOfAttachmentsText = function(sNumberOfAttachmentsText) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getSameFilenameAllowed sameFilenameAllowed}.
 * 
 * Allows the user to use the same name for a file when editing the file name. 'Same name' refers to an already existing file name in the list.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSameFilenameAllowed New value for property <code>sameFilenameAllowed</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setSameFilenameAllowed = function(bSameFilenameAllowed) { return new sap.m.UploadCollection(); };

/**
 * ription Selects or deselects the given list item.
 * @param {sap.m.UploadCollectionItem} uploadCollectionItem The item whose selection to be changed. This parameter is mandatory.
 * @param {boolean} select Sets selected status of the item. Default value is true.
 * @returns {sap.m.UploadCollection} The current UploadCollection
 * @since 1.34
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setSelectedItem = function(uploadCollectionItem,select) { return new sap.m.UploadCollection(); };

/**
 * ription Sets an UploadCollectionItem to be selected by id. In single mode, the method removes the previous selection.
 * @param {string} id The id of the item whose selection to be changed.
 * @param {boolean} select Sets selected status of the item. Default value is true.
 * @returns {sap.m.UploadCollection} The current UploadCollection
 * @since 1.34
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setSelectedItemById = function(id,select) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getShowSeparators showSeparators}.
 * 
 * Defines whether separators are shown between list items.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>All</code>.
 * @param {sap.m.ListSeparators} sShowSeparators New value for property <code>showSeparators</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setShowSeparators = function(sShowSeparators) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getTerminationEnabled terminationEnabled}.
 * 
 * If true, the button that is used to terminate the instant file upload gets visible.
 * The button normally appears when a file is being uploaded.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bTerminationEnabled New value for property <code>terminationEnabled</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @since 1.42.0
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setTerminationEnabled = function(bTerminationEnabled) { return new sap.m.UploadCollection(); };

/**
 * Sets the aggregated {@link #getToolbar toolbar}.
 * @param {sap.m.OverflowToolbar} oToolbar The toolbar to set
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setToolbar = function(oToolbar) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getUploadButtonInvisible uploadButtonInvisible}.
 * 
 * If true, the button used for uploading files is invisible.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bUploadButtonInvisible New value for property <code>uploadButtonInvisible</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * @since 1.42.0
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setUploadButtonInvisible = function(bUploadButtonInvisible) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getUploadEnabled uploadEnabled}.
 * 
 * Enables the upload of a file.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUploadEnabled New value for property <code>uploadEnabled</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setUploadEnabled = function(bUploadEnabled) { return new sap.m.UploadCollection(); };

/**
 * Sets a new value for property {@link #getUploadUrl uploadUrl}.
 * 
 * Specifies the URL where the uploaded files have to be stored.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>../../../upload</code>.
 * @param {string} sUploadUrl New value for property <code>uploadUrl</code>
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.setUploadUrl = function(sUploadUrl) { return new sap.m.UploadCollection(); };

/**
 * Unbinds aggregation {@link #getItems items} from model data.
 * @returns {sap.m.UploadCollection} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollection.prototype.unbindItems = function() { return new sap.m.UploadCollection(); };

/**
 * ription Starts the upload for all selected files.
 * @type {void}
 * @public
 * @since 1.30
 * 
 */
sap.m.UploadCollection.prototype.upload = function() { return null; };


// ---- sap.m.UploadCollectionItem --------------------------------------------------------------------------

/**
 * Constructor for a new UploadCollectionItem
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContributor contributor} : string</li>
 * <li>{@link #getDocumentId documentId} : string</li>
 * <li>{@link #getFileName fileName} : string</li>
 * <li>{@link #getFileSize fileSize} : float</li>
 * <li>{@link #getMimeType mimeType} : string</li>
 * <li>{@link #getThumbnailUrl thumbnailUrl} : string</li>
 * <li>{@link #getUploadedDate uploadedDate} : string</li>
 * <li>{@link #getUrl url} : string</li>
 * <li>{@link #getEnableEdit enableEdit} : boolean (default: true)</li>
 * <li>{@link #getEnableDelete enableDelete} : boolean (default: true)</li>
 * <li>{@link #getVisibleEdit visibleEdit} : boolean (default: true)</li>
 * <li>{@link #getVisibleDelete visibleDelete} : boolean (default: true)</li>
 * <li>{@link #getAriaLabelForPicture ariaLabelForPicture} : string</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} : sap.m.ObjectAttribute[] (default)</li>
 * <li>{@link #getStatuses statuses} : sap.m.ObjectStatus[]</li>
 * <li>{@link #getMarkers markers} : sap.m.ObjectMarker[]</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getFileUploader fileUploader} : (sap.ui.core.ID | sap.ui.unified.FileUploader)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, will be generated automatically if no ID is provided.
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Items provide information about the uploaded files.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.26
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.UploadCollectionItem = function(sId,mSettings) {};
/**
 * Adds some attribute to the aggregation {@link #getAttributes attributes}.
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.addAttribute = function(oAttribute) { return new sap.m.UploadCollectionItem(); };

/**
 * Adds some marker to the aggregation {@link #getMarkers markers}.
 * @param {sap.m.ObjectMarker}
 *            oMarker the marker to add; if empty, nothing is inserted
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.addMarker = function(oMarker) { return new sap.m.UploadCollectionItem(); };

/**
 * Adds some status to the aggregation {@link #getStatuses statuses}.
 * @param {sap.m.ObjectStatus}
 *            oStatus the status to add; if empty, nothing is inserted
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.addStatus = function(oStatus) { return new sap.m.UploadCollectionItem(); };

/**
 * Binds aggregation {@link #getAttributes attributes} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.bindAttributes = function(oBindingInfo) { return new sap.m.UploadCollectionItem(); };

/**
 * Binds aggregation {@link #getMarkers markers} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.bindMarkers = function(oBindingInfo) { return new sap.m.UploadCollectionItem(); };

/**
 * Binds aggregation {@link #getStatuses statuses} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.bindStatuses = function(oBindingInfo) { return new sap.m.UploadCollectionItem(); };

/**
 * Destroys all the attributes in the aggregation {@link #getAttributes attributes}.
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.destroyAttributes = function() { return new sap.m.UploadCollectionItem(); };

/**
 * Destroys all the markers in the aggregation {@link #getMarkers markers}.
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.destroyMarkers = function() { return new sap.m.UploadCollectionItem(); };

/**
 * Destroys all the statuses in the aggregation {@link #getStatuses statuses}.
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.destroyStatuses = function() { return new sap.m.UploadCollectionItem(); };

/**
 * Downloads the item.
 * The sap.ui.core.util.File method is used here. For further details on this method, see {sap.ui.core.util.File.save}.
 * @param {boolean} askForLocation Decides whether to ask for a location to download or not.
 * @since 1.36.0
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.download = function(askForLocation) {  };

/**
 * Creates a new subclass of class sap.m.UploadCollectionItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.UploadCollectionItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getAriaLabelForPicture ariaLabelForPicture}.
 * 
 * Aria label for the icon (or for the image).
 * 
 * @returns {string} Value of property <code>ariaLabelForPicture</code>
 * 
 * @experimental since version 1.30. The behavior of the property might change in the next version.
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getAriaLabelForPicture = function() { return ""; };

/**
 * Gets content of aggregation {@link #getAttributes attributes}.
 * 
 * Attributes of an uploaded item, for example, 'Uploaded By', 'Uploaded On', 'File Size'
 * attributes are displayed after an item has been uploaded.
 * Additionally, the Active property of sap.m.ObjectAttribute is supported.<br>
 * Note that if one of the deprecated properties contributor, fileSize or UploadedDate is filled in addition to this attribute, two attributes with the same title
 * are displayed as these properties get displayed as an attribute.
 * Example: An application passes the property ‘contributor’ with the value ‘A’ and the aggregation attributes ‘contributor’: ‘B’. As a result, the attributes
 * ‘contributor’:’A’ and ‘contributor’:’B’ are displayed. To make sure the title does not appear twice, check if one of the properties is filled.
 * 
 * @returns {sap.m.ObjectAttribute[]}
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getAttributes = function() { return new Array(); };

/**
 * Gets current value of property {@link #getContributor contributor}.
 * 
 * Specifies the name of the user who uploaded the file.
 * 
 * @returns {string} Value of property <code>contributor</code>
 * 
 * @deprecated since version 1.30. This property is deprecated; use the aggregation attributes instead.
 * However, if the property is filled, it is displayed as an attribute. To make sure the title does not appear twice, do not use the property.
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getContributor = function() { return ""; };

/**
 * Gets current value of property {@link #getDocumentId documentId}.
 * 
 * Specifies a unique identifier of the file (created by the application).
 * 
 * @returns {string} Value of property <code>documentId</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getDocumentId = function() { return ""; };

/**
 * Gets current value of property {@link #getEnableDelete enableDelete}.
 * 
 * Enables/Disables the Delete button.
 * If the value is true, the Delete button is enabled and the delete function can be used.
 * If the value is false, the delete function is not available.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enableDelete</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getEnableDelete = function() { return false; };

/**
 * Gets current value of property {@link #getEnableEdit enableEdit}.
 * 
 * Enables/Disables the Edit button.
 * If the value is true, the Edit button is enabled and the edit function can be used.
 * If the value is false, the edit function is not available.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enableEdit</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getEnableEdit = function() { return false; };

/**
 * Gets current value of property {@link #getFileName fileName}.
 * 
 * Specifies the name of the uploaded file.
 * 
 * @returns {string} Value of property <code>fileName</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getFileName = function() { return ""; };

/**
 * Gets current value of property {@link #getFileSize fileSize}.
 * 
 * Specifies the size of the uploaded file (in megabytes).
 * 
 * @returns {float} Value of property <code>fileSize</code>
 * 
 * @deprecated since version 1.30. This property is deprecated; use the aggregation attributes instead.
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getFileSize = function() { return 0.0; };

/**
 * ID of the element which is the current target of the association {@link #getFileUploader fileUploader}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getFileUploader = function() { return new sap.ui.core.ID(); };

/**
 * Gets content of aggregation {@link #getMarkers markers}.
 * 
 * Markers of an uploaded item
 * Markers will be displayed after an item has been uploaded
 * But not in Edit mode
 * 
 * @returns {sap.m.ObjectMarker[]}
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getMarkers = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.UploadCollectionItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.UploadCollectionItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMimeType mimeType}.
 * 
 * Specifies the MIME type of the file.
 * 
 * @returns {string} Value of property <code>mimeType</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getMimeType = function() { return ""; };

/**
 * Gets current value of property {@link #getSelected selected}.
 * 
 * Defines the selected state of the UploadCollectionItem.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>selected</code>
 * @since 1.34
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getSelected = function() { return false; };

/**
 * Gets content of aggregation {@link #getStatuses statuses}.
 * 
 * Statuses of an uploaded item
 * Statuses will be displayed after an item has been uploaded
 * 
 * @returns {sap.m.ObjectStatus[]}
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getStatuses = function() { return new Array(); };

/**
 * Gets current value of property {@link #getThumbnailUrl thumbnailUrl}.
 * 
 * Specifies the URL where the thumbnail of the file is located.
 * 
 * @returns {string} Value of property <code>thumbnailUrl</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getThumbnailUrl = function() { return ""; };

/**
 * Gets current value of property {@link #getUploadedDate uploadedDate}.
 * 
 * Specifies the date on which the file was uploaded.
 * The application has to define the date format.
 * 
 * @returns {string} Value of property <code>uploadedDate</code>
 * 
 * @deprecated since version 1.30. This property is deprecated; use the aggregation attributes instead.
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getUploadedDate = function() { return ""; };

/**
 * Gets current value of property {@link #getUrl url}.
 * 
 * Specifies the URL where the file is located.
 * If the application doesn't provide a value for this property, the icon and the file name of the UploadCollectionItem are not clickable.
 * 
 * @returns {string} Value of property <code>url</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getUrl = function() { return ""; };

/**
 * Gets current value of property {@link #getVisibleDelete visibleDelete}.
 * 
 * Show/Hide the Delete button.
 * If the value is true, the Delete button is visible.
 * If the value is false, the Delete button is not visible.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visibleDelete</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getVisibleDelete = function() { return false; };

/**
 * Gets current value of property {@link #getVisibleEdit visibleEdit}.
 * 
 * Show/Hide the Edit button.
 * If the value is true, the Edit button is visible.
 * If the value is false, the Edit button is not visible.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visibleEdit</code>
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.getVisibleEdit = function() { return false; };

/**
 * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation {@link #getAttributes attributes}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ObjectAttribute}
 *           oAttribute The attribute whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.indexOfAttribute = function(oAttribute) { return 0; };

/**
 * Checks for the provided <code>sap.m.ObjectMarker</code> in the aggregation {@link #getMarkers markers}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ObjectMarker}
 *           oMarker The marker whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.indexOfMarker = function(oMarker) { return 0; };

/**
 * Checks for the provided <code>sap.m.ObjectStatus</code> in the aggregation {@link #getStatuses statuses}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ObjectStatus}
 *           oStatus The status whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.indexOfStatus = function(oStatus) { return 0; };

/**
 * Inserts a attribute into the aggregation {@link #getAttributes attributes}.
 * 
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the attribute should be inserted at; for
 *              a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the attribute is inserted at
 *              the last position
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.insertAttribute = function(oAttribute,iIndex) { return new sap.m.UploadCollectionItem(); };

/**
 * Inserts a marker into the aggregation {@link #getMarkers markers}.
 * 
 * @param {sap.m.ObjectMarker}
 *            oMarker the marker to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the marker should be inserted at; for
 *              a negative value of <code>iIndex</code>, the marker is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the marker is inserted at
 *              the last position
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.insertMarker = function(oMarker,iIndex) { return new sap.m.UploadCollectionItem(); };

/**
 * Inserts a status into the aggregation {@link #getStatuses statuses}.
 * 
 * @param {sap.m.ObjectStatus}
 *            oStatus the status to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the status should be inserted at; for
 *              a negative value of <code>iIndex</code>, the status is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the status is inserted at
 *              the last position
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.insertStatus = function(oStatus,iIndex) { return new sap.m.UploadCollectionItem(); };

/**
 * Removes all the controls from the aggregation {@link #getAttributes attributes}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ObjectAttribute[]} An array of the removed elements (might be empty)
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.removeAllAttributes = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getMarkers markers}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ObjectMarker[]} An array of the removed elements (might be empty)
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.removeAllMarkers = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getStatuses statuses}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ObjectStatus[]} An array of the removed elements (might be empty)
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.removeAllStatuses = function() { return new Array(); };

/**
 * Removes a attribute from the aggregation {@link #getAttributes attributes}.
 * 
 * @param {int | string | sap.m.ObjectAttribute} vAttribute The attribute to remove or its index or id
 * @returns {sap.m.ObjectAttribute} The removed attribute or <code>null</code>
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.removeAttribute = function(vAttribute) { return new sap.m.ObjectAttribute(); };

/**
 * Removes a marker from the aggregation {@link #getMarkers markers}.
 * 
 * @param {int | string | sap.m.ObjectMarker} vMarker The marker to remove or its index or id
 * @returns {sap.m.ObjectMarker} The removed marker or <code>null</code>
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.removeMarker = function(vMarker) { return new sap.m.ObjectMarker(); };

/**
 * Removes a status from the aggregation {@link #getStatuses statuses}.
 * 
 * @param {int | string | sap.m.ObjectStatus} vStatus The status to remove or its index or id
 * @returns {sap.m.ObjectStatus} The removed status or <code>null</code>
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.removeStatus = function(vStatus) { return new sap.m.ObjectStatus(); };

/**
 * Sets a new value for property {@link #getAriaLabelForPicture ariaLabelForPicture}.
 * 
 * Aria label for the icon (or for the image).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sAriaLabelForPicture New value for property <code>ariaLabelForPicture</code>
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @experimental since version 1.30. The behavior of the property might change in the next version.
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setAriaLabelForPicture = function(sAriaLabelForPicture) { return new sap.m.UploadCollectionItem(); };

/**
 * ription Setter of the deprecated contributor property. The property is mapped to the aggregation attributes.
 * @deprecated since version 1.30
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setContributor = function() {  };

/**
 * Sets a new value for property {@link #getDocumentId documentId}.
 * 
 * Specifies a unique identifier of the file (created by the application).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sDocumentId New value for property <code>documentId</code>
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setDocumentId = function(sDocumentId) { return new sap.m.UploadCollectionItem(); };

/**
 * Sets a new value for property {@link #getEnableDelete enableDelete}.
 * 
 * Enables/Disables the Delete button.
 * If the value is true, the Delete button is enabled and the delete function can be used.
 * If the value is false, the delete function is not available.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableDelete New value for property <code>enableDelete</code>
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setEnableDelete = function(bEnableDelete) { return new sap.m.UploadCollectionItem(); };

/**
 * Sets a new value for property {@link #getEnableEdit enableEdit}.
 * 
 * Enables/Disables the Edit button.
 * If the value is true, the Edit button is enabled and the edit function can be used.
 * If the value is false, the edit function is not available.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableEdit New value for property <code>enableEdit</code>
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setEnableEdit = function(bEnableEdit) { return new sap.m.UploadCollectionItem(); };

/**
 * Sets a new value for property {@link #getFileName fileName}.
 * 
 * Specifies the name of the uploaded file.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sFileName New value for property <code>fileName</code>
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setFileName = function(sFileName) { return new sap.m.UploadCollectionItem(); };

/**
 * ription Setter of the deprecated fileSize property. The property is mapped to the aggregation attributes.
 * @deprecated since version 1.30
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setFileSize = function() {  };

/**
 * Sets the associated {@link #getFileUploader fileUploader}.
 * @param {sap.ui.core.ID | sap.ui.unified.FileUploader} oFileUploader ID of an element which becomes the new target of this fileUploader association; alternatively, an element instance may be given
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setFileUploader = function(oFileUploader) { return new sap.m.UploadCollectionItem(); };

/**
 * Sets a new value for property {@link #getMimeType mimeType}.
 * 
 * Specifies the MIME type of the file.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sMimeType New value for property <code>mimeType</code>
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setMimeType = function(sMimeType) { return new sap.m.UploadCollectionItem(); };

/**
 * ription Setter of the selected property.
 * @param {boolean} selected value to set on Selected property
 * @since 1.34
 * @public
 * @returns {sap.m.UploadCollectionItem} The current UploadCollectionItem
 * 
 */
sap.m.UploadCollectionItem.prototype.setSelected = function(selected) { return new sap.m.UploadCollectionItem(); };

/**
 * Sets a new value for property {@link #getThumbnailUrl thumbnailUrl}.
 * 
 * Specifies the URL where the thumbnail of the file is located.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sThumbnailUrl New value for property <code>thumbnailUrl</code>
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setThumbnailUrl = function(sThumbnailUrl) { return new sap.m.UploadCollectionItem(); };

/**
 * ription Setter of the deprecated uploadedDate property. The property is mapped to the aggregation attributes.
 * @deprecated since version 1.30
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setUploadedDate = function() {  };

/**
 * Sets a new value for property {@link #getUrl url}.
 * 
 * Specifies the URL where the file is located.
 * If the application doesn't provide a value for this property, the icon and the file name of the UploadCollectionItem are not clickable.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sUrl New value for property <code>url</code>
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setUrl = function(sUrl) { return new sap.m.UploadCollectionItem(); };

/**
 * Sets a new value for property {@link #getVisibleDelete visibleDelete}.
 * 
 * Show/Hide the Delete button.
 * If the value is true, the Delete button is visible.
 * If the value is false, the Delete button is not visible.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisibleDelete New value for property <code>visibleDelete</code>
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setVisibleDelete = function(bVisibleDelete) { return new sap.m.UploadCollectionItem(); };

/**
 * Sets a new value for property {@link #getVisibleEdit visibleEdit}.
 * 
 * Show/Hide the Edit button.
 * If the value is true, the Edit button is visible.
 * If the value is false, the Edit button is not visible.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisibleEdit New value for property <code>visibleEdit</code>
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.setVisibleEdit = function(bVisibleEdit) { return new sap.m.UploadCollectionItem(); };

/**
 * Unbinds aggregation {@link #getAttributes attributes} from model data.
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.unbindAttributes = function() { return new sap.m.UploadCollectionItem(); };

/**
 * Unbinds aggregation {@link #getMarkers markers} from model data.
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.unbindMarkers = function() { return new sap.m.UploadCollectionItem(); };

/**
 * Unbinds aggregation {@link #getStatuses statuses} from model data.
 * @returns {sap.m.UploadCollectionItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.UploadCollectionItem.prototype.unbindStatuses = function() { return new sap.m.UploadCollectionItem(); };


// ---- sap.m.UploadCollectionParameter --------------------------------------------------------------------------

/**
 * Constructor for a new UploadCollectionParameter.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getValue value} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Represents a parameter for the UploadCollection.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.UploadCollectionParameter = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.UploadCollectionParameter with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.UploadCollectionParameter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.UploadCollectionParameter.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.UploadCollectionParameter.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * Specifies the name of the parameter.
 * 
 * @returns {string} Value of property <code>name</code>
 * @since 1.12.2
 * 
 * @public
 * 
 */
sap.m.UploadCollectionParameter.prototype.getName = function() { return ""; };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * Specifies the value of the parameter.
 * 
 * @returns {string} Value of property <code>value</code>
 * @since 1.12.2
 * 
 * @public
 * 
 */
sap.m.UploadCollectionParameter.prototype.getValue = function() { return ""; };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * Specifies the name of the parameter.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.m.UploadCollectionParameter} Reference to <code>this</code> in order to allow method chaining
 * @since 1.12.2
 * 
 * @public
 * 
 */
sap.m.UploadCollectionParameter.prototype.setName = function(sName) { return new sap.m.UploadCollectionParameter(); };

/**
 * Sets a new value for property {@link #getValue value}.
 * 
 * Specifies the value of the parameter.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sValue New value for property <code>value</code>
 * @returns {sap.m.UploadCollectionParameter} Reference to <code>this</code> in order to allow method chaining
 * @since 1.12.2
 * 
 * @public
 * 
 */
sap.m.UploadCollectionParameter.prototype.setValue = function(sValue) { return new sap.m.UploadCollectionParameter(); };


// ---- sap.m.UploadCollectionToolbarPlaceholder --------------------------------------------------------------------------

/**
 * Constructor for a new UploadCollectionToolbarPlaceholder.
 * 
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * This control needs to be used when you would like to create a customizable toolbar for the UploadCollection. Always a FileUploader instance is
 * required in the toolbar, the FileUploader will be placed in the position defined by the application.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.34
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.UploadCollectionToolbarPlaceholder = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.UploadCollectionToolbarPlaceholder with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.UploadCollectionToolbarPlaceholder.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.UploadCollectionToolbarPlaceholder.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.UploadCollectionToolbarPlaceholder.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.URLHelper --------------------------------------------------------------------------

/**
 * Adds an event registration for redirect.
 * 
 * @param {Function} fnFunction The function to call, when the event occurs.
 * @param {Object} [oListener] The object, that wants to be notified, when the event occurs.
 * @return {Object} sap.m.URLHelper instance
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.attachRedirect = function(fnFunction,oListener) { return null; };

/**
 * Detach already registered redirect event.
 * 
 * @param {Function} fnFunction The function to call, when the event occurs.
 * @param {Object} [oListener] The object, that wants to be notified, when the event occurs.
 * @return {Object} sap.m.URLHelper instance
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.detachRedirect = function(fnFunction,oListener) { return null; };

/**
 * Builds Email URI from given parameter.
 * Trims spaces from email addresses.
 * 
 * @param {String} [sEmail] Destination email address
 * @param {String} [sSubject] Subject of the email address
 * @param {String} [sBody] Default message text
 * @param {String} [sCC] Carbon Copy email address
 * @param {String} [sBCC] Blind carbon copy email address
 * @return {String} Email URI scheme
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.normalizeEmail = function(sEmail,sSubject,sBody,sCC,sBCC) { return null; };

/**
 * Sanitizes the given telephone number and returns SMS URI scheme.
 * 
 * @param {String} [sTel] Telephone number
 * @return {String} SMS URI scheme
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.normalizeSms = function(sTel) { return null; };

/**
 * Sanitizes the given telephone number and returns a telephone URI scheme.
 * 
 * @param {String} [sTel] Telephone number
 * @return {String} Telephone URI scheme
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.normalizeTel = function(sTel) { return null; };

/**
 * Redirects to the given URL.
 * This method fires "redirect" event before opening the URL.
 * 
 * @param {String} sURL Uniform resource locator
 * @param {boolean} [bNewWindow] Opens URL in a new browser window or tab. Please note that, opening a new window/tab can be ignored by browsers(e.g. on Windows Phone) or by popup blockers.
 * NOTE: On Windows Phone the URL will be enforced to open in the same window if opening in a new window/tab fails (because of a known system restriction on cross-window communications). Use sap.m.Link instead (with blank target) if you necessarily need to open URL in a new window.
 * 
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.redirect = function(sURL,bNewWindow) {  };

/**
 * Trigger email application to send email.
 * Trims spaces from email addresses.
 * 
 * @param {String} [sEmail] Destination email address
 * @param {String} [sSubject] Subject of the email address
 * @param {String} [sBody] Default message text
 * @param {String} [sCC] Carbon Copy email address
 * @param {String} [sBCC] Blind carbon copy email address
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.triggerEmail = function(sEmail,sSubject,sBody,sCC,sBCC) {  };

/**
 * Trigger SMS application to send SMS to given telephone number.
 * 
 * @param {String} [sTel] Telephone number
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.triggerSms = function(sTel) {  };

/**
 * Trigger telephone to call given telephone number.
 * 
 * @param {String} [sTel] Telephone number
 * @public
 * 
 * @memberof sap.m.URLHelper
 */
sap.m.URLHelper.prototype.triggerTel = function(sTel) {  };


// ---- sap.m.ValueColor --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.ValueColor.toString = function() { return ""; };

// ---- sap.m.ValueCSSColor --------------------------------------------------------------------------


// ---- sap.m.VBox --------------------------------------------------------------------------

/**
 * Constructor for a new VBox.
 * 
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The VBox control builds the container for a vertical flexible box layout. VBox is a convenience control, as it is just a specialized FlexBox control.<br>
 * <br>
 * <b>Note:</b> Be sure to check the <code>renderType</code> setting to avoid issues due to browser inconsistencies.
 * 
 * @extends sap.m.FlexBox
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.VBox = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.m.VBox with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.FlexBox.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.VBox.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.m.VBox.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.VBox.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.m.VerticalPlacementType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.m.VerticalPlacementType.toString = function() { return ""; };

// ---- sap.m.ViewSettingsCustomItem --------------------------------------------------------------------------

/**
 * Constructor for a new ViewSettingsCustomItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFilterCount filterCount} : int (default: 0)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCustomControl customControl} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ViewSettingsItem#constructor sap.m.ViewSettingsItem}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The ViewSettingsCustomItem control is used for modelling custom filters in the ViewSettingsDialog.
 * @extends sap.m.ViewSettingsItem
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ViewSettingsCustomItem = function(sId,mSettings) {};
/**
 * Creates a clone of the ViewSettingsCustomItem instance.
 * 
 * @param {string} [sIdSuffix] a suffix to be appended to the cloned object id
 * @param {string[]} [aLocalIds] an array of local IDs within the cloned hierarchy (internally used)
 * @param {Object} [oOptions] configuration object
 * @return {sap.ui.base.ManagedObject} reference to the newly created clone
 * @protected
 * @override
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.clone = function(sIdSuffix,aLocalIds,oOptions) { return new sap.ui.base.ManagedObject(); };

/**
 * Destroys the customControl in the aggregation {@link #getCustomControl customControl}.
 * @returns {sap.m.ViewSettingsCustomItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.destroyCustomControl = function() { return new sap.m.ViewSettingsCustomItem(); };

/**
 * Creates a new subclass of class sap.m.ViewSettingsCustomItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ViewSettingsItem.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsCustomItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Internally the control is handled as a managed object instead of an aggregation
 * because this control is sometimes aggregated in other controls like a popover or a dialog.
 * @override
 * @public
 * @return {sap.ui.core.Control} oControl a control used for filtering purposes
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.getCustomControl = function() { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getFilterCount filterCount}.
 * 
 * The number of currently active filters for this custom filter item. It will be displayed in the filter list of the ViewSettingsDialog to represent the filter state of the custom control.
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>filterCount</code>
 * 
 * @public
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.getFilterCount = function() { return 0; };

/**
 * Returns a metadata object for class sap.m.ViewSettingsCustomItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsCustomItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Internally the control is handled as a managed object instead of an aggregation
 * as this control is sometimes aggregated in other controls like a popover or a dialog.
 * @override
 * @public
 * @param {sap.ui.core.Control} oControl A control used for filtering purposes
 * @return {sap.m.ViewSettingsCustomItem} this pointer for chaining
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.setCustomControl = function(oControl) { return new sap.m.ViewSettingsCustomItem(); };

/**
 * Sets the filterCount without invalidating the control as it is never rendered directly.
 * @override
 * @param {int} iValue The new value for property filterCount
 * @public
 * @return {sap.m.ViewSettingsItem} this pointer for chaining
 * 
 */
sap.m.ViewSettingsCustomItem.prototype.setFilterCount = function(iValue) { return new sap.m.ViewSettingsItem(); };


// ---- sap.m.ViewSettingsCustomTab --------------------------------------------------------------------------

/**
 * Constructor for a new ViewSettingsCustomTab.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: sap-icon://competitor)</li>
 * <li>{@link #getTitle title} : string (default: )</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * The ViewSettingsCustomTab control is used for adding custom tabs in the ViewSettingsDialog.
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ViewSettingsCustomTab = function(sId,mSettings) {};
/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.ViewSettingsCustomTab} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsCustomTab.prototype.addContent = function(oContent) { return new sap.m.ViewSettingsCustomTab(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.ViewSettingsCustomTab} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsCustomTab.prototype.destroyContent = function() { return new sap.m.ViewSettingsCustomTab(); };

/**
 * Creates a new subclass of class sap.m.ViewSettingsCustomTab with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsCustomTab.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * The content of this Custom tab
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.ViewSettingsCustomTab.prototype.getContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Custom tab button icon
 * 
 * Default value is <code>sap-icon://competitor</code>.
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.ViewSettingsCustomTab.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Returns a metadata object for class sap.m.ViewSettingsCustomTab.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsCustomTab.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets or creates the sap.m.Button instance for the custom tab.
 * @public
 * @param   {object} oOptions
 * @returns {sap.m.Button}
 * 
 */
sap.m.ViewSettingsCustomTab.prototype.getTabButton = function(oOptions) { return new sap.m.Button(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Custom tab title
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.ViewSettingsCustomTab.prototype.getTitle = function() { return ""; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.ViewSettingsCustomTab.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.ViewSettingsCustomTab} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsCustomTab.prototype.insertContent = function(oContent,iIndex) { return new sap.m.ViewSettingsCustomTab(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ViewSettingsCustomTab.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ViewSettingsCustomTab.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Custom tab button icon
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>sap-icon://competitor</code>.
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.ViewSettingsCustomTab} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsCustomTab.prototype.setIcon = function(sIcon) { return new sap.m.ViewSettingsCustomTab(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Custom tab title
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.ViewSettingsCustomTab} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsCustomTab.prototype.setTitle = function(sTitle) { return new sap.m.ViewSettingsCustomTab(); };


// ---- sap.m.ViewSettingsDialog --------------------------------------------------------------------------

/**
 * Constructor for a new <code>ViewSettingsDialog</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getSortDescending sortDescending} : boolean (default: false)</li>
 * <li>{@link #getGroupDescending groupDescending} : boolean (default: false)</li>
 * <li>{@link #getFilterSearchOperator filterSearchOperator} : sap.m.StringFilterOperator (default: StartsWith)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSortItems sortItems} : sap.m.ViewSettingsItem[]</li>
 * <li>{@link #getGroupItems groupItems} : sap.m.ViewSettingsItem[]</li>
 * <li>{@link #getFilterItems filterItems} : sap.m.ViewSettingsItem[]</li>
 * <li>{@link #getPresetFilterItems presetFilterItems} : sap.m.ViewSettingsItem[]</li>
 * <li>{@link #getCustomTabs customTabs} : sap.m.ViewSettingsCustomTab[]</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedSortItem selectedSortItem} : (sap.ui.core.ID | sap.m.ViewSettingsItem)</li>
 * <li>{@link #getSelectedGroupItem selectedGroupItem} : (sap.ui.core.ID | sap.m.ViewSettingsItem)</li>
 * <li>{@link #getSelectedPresetFilterItem selectedPresetFilterItem} : (sap.ui.core.ID | sap.m.ViewSettingsItem)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:confirm confirm} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:resetFilters resetFilters} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:filterDetailPageOpened filterDetailPageOpened} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Helps the user to sort, filter, or group data within a (master) {@link sap.m.List} or a
 * {@link sap.m.Table}. The dialog is triggered by icon buttons in the table toolbar. Each
 * button shows a dropdown list icon.
 * 
 * <h3>Overview</h3>
 * 
 * The <code>ViewSettingsDialog</code> is a composite control,
 * consisting of a modal {@link sap.m.Popover} and several internal lists.
 * There are three different tabs (Sort, Group, Filter) in the dialog that can be
 * activated by filling the respective associations. If only one association is
 * filled, the other tabs are automatically hidden. The selected options can be used
 * to create sorters and filters for the table.
 * 
 * <b>Note:</b> If the app does not offer all three sorting, filtering, and grouping
 * functionalities, but only one of these (such as sort), we recommend placing the
 * icon button directly in the toolbar. Do not place sort, filter, or group buttons in
 * the footer toolbar if they refer to a table. Place group, sort, and filter buttons
 * in the footer toolbar if they refer to a master list.
 * 
 * <h3>Usage</h3>
 * 
 * <i>When to use?</i>
 * <ul><li>If you need to allow the user to sort line items in a manageable list or
 * table (up to 20 columns)</li>
 * <li>If you need to offer custom filter settings in a manageable list or table
 * (up to 20 columns)</li>
 * <li>If you need to allow the user to group line items in a manageable list or
 * table (up to 20 columns)</li></ul>
 * 
 * <i>When not to use?</i>
 * <ul><li>If you have complex tables (more than 20 columns)</li>
 * <li>If you need to rearrange columns within your table (use the
 * {@link sap.m.TablePersoDialog} instead)</li>
 * <li>If you need very specific sort, filter, or column sorting options within
 * complex tables (use the {@link sap.m.P13nDialog} instead)</li></ul>
 * 
 * <h3>Responsive behavior</h3>
 * 
 * The popover dialog appears as a modal window on desktop and tablet screen sizes,
 * but full screen on smartphones.
 * 
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ViewSettingsDialog = function(sId,mSettings) {};
/**
 * Called when the Cancel button is pressed. It can be used to set the state of custom filter controls.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.cancel = function(oControlEvent) {  };

/**
 * Indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page.
 * </br></br><b>Note:</b> Custom tabs are not converted to event parameters automatically. For custom tabs, you have to read the state of your controls inside the callback of this event.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ViewSettingsItem} oControlEvent.getParameters.sortItem The selected sort item.
 * @param {boolean} oControlEvent.getParameters.sortDescending The selected sort order (true = descending, false = ascending).
 * @param {sap.m.ViewSettingsItem} oControlEvent.getParameters.groupItem The selected group item.
 * @param {boolean} oControlEvent.getParameters.groupDescending The selected group order (true = descending, false = ascending).
 * @param {sap.m.ViewSettingsItem} oControlEvent.getParameters.presetFilterItem The selected preset filter item.
 * @param {sap.m.ViewSettingsItem[]} oControlEvent.getParameters.filterItems The selected filters in an array of ViewSettingsItem.
 * @param {object} oControlEvent.getParameters.filterKeys The selected filter items in an object notation format: { key: boolean }. If a custom control filter was displayed (for example, the user clicked on the filter item), the value for its key is set to true to indicate that there has been an interaction with the control.
 * @param {object} oControlEvent.getParameters.filterCompoundKeys The selected filter items in an object notation format: { parentKey: { key: boolean, key2: boolean, ...  }, ...}. If a custom control filter was displayed (for example, the user clicked on the filter item), the value for its key is set to true to indicate that there has been an interaction with the control.
 * @param {string} oControlEvent.getParameters.filterString The selected filter items in a string format to display in the control's header bar in format "Filtered by: key (subkey1, subkey2, subkey3)".
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.confirm = function(oControlEvent) {  };

/**
 * Fired when the filter detail page is opened.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ViewSettingsFilterItem} oControlEvent.getParameters.parentFilterItem The filter item for which the details are opened.
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.filterDetailPageOpened = function(oControlEvent) {  };

/**
 * Called when the reset filters button is pressed. It can be used to clear the state of custom filter controls.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.resetFilters = function(oControlEvent) {  };

/**
 * Overwrites the aggregation setter in order to have ID validation logic as some strings
 * are reserved for the predefined tabs.
 * 
 * @overwrite
 * @public
 * @param {object} oCustomTab The custom tab to be added
 * @returns {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.addCustomTab = function(oCustomTab) { return new sap.m.ViewSettingsDialog(); };

/**
 * Adds some filterItem to the aggregation {@link #getFilterItems filterItems}.
 * @param {sap.m.ViewSettingsItem}
 *            oFilterItem the filterItem to add; if empty, nothing is inserted
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.addFilterItem = function(oFilterItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * Adds a group item and sets the association to reflect the selected state.
 * 
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem} oItem The item to be added to the group items
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.addGroupItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * Adds a preset filter item and sets the association to reflect the selected state.
 * 
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem} oItem The selected item or a string with the key
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.addPresetFilterItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * Adds a sort item and sets the association to reflect the selected state.
 * 
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem} oItem The item to be added to the aggregation
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.addSortItem = function(oItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * Forward method to the inner dialog method: addStyleClass.
 * @public
 * @override
 * @returns {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.addStyleClass = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:cancel cancel} event of this <code>sap.m.ViewSettingsDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ViewSettingsDialog</code> itself.
 * 
 * Called when the Cancel button is pressed. It can be used to set the state of custom filter controls.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code> itself
 * 
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:confirm confirm} event of this <code>sap.m.ViewSettingsDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ViewSettingsDialog</code> itself.
 * 
 * Indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page.
 * </br></br><b>Note:</b> Custom tabs are not converted to event parameters automatically. For custom tabs, you have to read the state of your controls inside the callback of this event.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code> itself
 * 
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.attachConfirm = function(oData,fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:filterDetailPageOpened filterDetailPageOpened} event of this <code>sap.m.ViewSettingsDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ViewSettingsDialog</code> itself.
 * 
 * Fired when the filter detail page is opened.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code> itself
 * 
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.attachFilterDetailPageOpened = function(oData,fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:resetFilters resetFilters} event of this <code>sap.m.ViewSettingsDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ViewSettingsDialog</code> itself.
 * 
 * Called when the reset filters button is pressed. It can be used to clear the state of custom filter controls.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code> itself
 * 
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.attachResetFilters = function(oData,fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * Binds aggregation {@link #getCustomTabs customTabs} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.bindCustomTabs = function(oBindingInfo) { return new sap.m.ViewSettingsDialog(); };

/**
 * Binds aggregation {@link #getFilterItems filterItems} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.bindFilterItems = function(oBindingInfo) { return new sap.m.ViewSettingsDialog(); };

/**
 * Binds aggregation {@link #getGroupItems groupItems} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.bindGroupItems = function(oBindingInfo) { return new sap.m.ViewSettingsDialog(); };

/**
 * Binds aggregation {@link #getPresetFilterItems presetFilterItems} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.bindPresetFilterItems = function(oBindingInfo) { return new sap.m.ViewSettingsDialog(); };

/**
 * Binds aggregation {@link #getSortItems sortItems} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.bindSortItems = function(oBindingInfo) { return new sap.m.ViewSettingsDialog(); };

/**
 * Destroys all the customTabs in the aggregation {@link #getCustomTabs customTabs}.
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.destroyCustomTabs = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Destroys all the filterItems in the aggregation {@link #getFilterItems filterItems}.
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.destroyFilterItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Destroys all the groupItems in the aggregation {@link #getGroupItems groupItems}.
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.destroyGroupItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Destroys all the presetFilterItems in the aggregation {@link #getPresetFilterItems presetFilterItems}.
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.destroyPresetFilterItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Destroys all the sortItems in the aggregation {@link #getSortItems sortItems}.
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.destroySortItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:cancel cancel} event of this <code>sap.m.ViewSettingsDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.detachCancel = function(fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:confirm confirm} event of this <code>sap.m.ViewSettingsDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.detachConfirm = function(fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:filterDetailPageOpened filterDetailPageOpened} event of this <code>sap.m.ViewSettingsDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.detachFilterDetailPageOpened = function(fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:resetFilters resetFilters} event of this <code>sap.m.ViewSettingsDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.detachResetFilters = function(fnFunction,oListener) { return new sap.m.ViewSettingsDialog(); };

/**
 * Creates a new subclass of class sap.m.ViewSettingsDialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:cancel cancel} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ViewSettingsDialog.prototype.fireCancel = function(mParameters) { return new sap.m.ViewSettingsDialog(); };

/**
 * Fires event {@link #event:confirm confirm} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.ViewSettingsItem} [mParameters.sortItem] The selected sort item.
 * @param {boolean} [mParameters.sortDescending] The selected sort order (true = descending, false = ascending).
 * @param {sap.m.ViewSettingsItem} [mParameters.groupItem] The selected group item.
 * @param {boolean} [mParameters.groupDescending] The selected group order (true = descending, false = ascending).
 * @param {sap.m.ViewSettingsItem} [mParameters.presetFilterItem] The selected preset filter item.
 * @param {sap.m.ViewSettingsItem[]} [mParameters.filterItems] The selected filters in an array of ViewSettingsItem.
 * @param {object} [mParameters.filterKeys] The selected filter items in an object notation format: { key: boolean }. If a custom control filter was displayed (for example, the user clicked on the filter item), the value for its key is set to true to indicate that there has been an interaction with the control.
 * @param {object} [mParameters.filterCompoundKeys] The selected filter items in an object notation format: { parentKey: { key: boolean, key2: boolean, ...  }, ...}. If a custom control filter was displayed (for example, the user clicked on the filter item), the value for its key is set to true to indicate that there has been an interaction with the control.
 * @param {string} [mParameters.filterString] The selected filter items in a string format to display in the control's header bar in format "Filtered by: key (subkey1, subkey2, subkey3)".
 * 
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ViewSettingsDialog.prototype.fireConfirm = function(mParameters) { return new sap.m.ViewSettingsDialog(); };

/**
 * Fires event {@link #event:filterDetailPageOpened filterDetailPageOpened} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.ViewSettingsFilterItem} [mParameters.parentFilterItem] The filter item for which the details are opened.
 * 
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ViewSettingsDialog.prototype.fireFilterDetailPageOpened = function(mParameters) { return new sap.m.ViewSettingsDialog(); };

/**
 * Fires event {@link #event:resetFilters resetFilters} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ViewSettingsDialog.prototype.fireResetFilters = function(mParameters) { return new sap.m.ViewSettingsDialog(); };

/**
 * Gets content of aggregation {@link #getCustomTabs customTabs}.
 * 
 * The list of all the custom tabs.
 * 
 * @returns {sap.m.ViewSettingsCustomTab[]}
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getCustomTabs = function() { return new Array(); };

/**
 * Forward method to the inner dialog method: getDomRef.
 * @public
 * @override
 * @return {Element} The Element's DOM Element sub DOM Element or null
 * 
 */
sap.m.ViewSettingsDialog.prototype.getDomRef = function() { return null; };

/**
 * Gets content of aggregation {@link #getFilterItems filterItems}.
 * 
 * The list of items with key and value that can be filtered on (for example, a list of columns for a table). A filterItem is associated with one or more detail filters.
 * 
 * @returns {sap.m.ViewSettingsItem[]}
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getFilterItems = function() { return new Array(); };

/**
 * Gets current value of property {@link #getFilterSearchOperator filterSearchOperator}.
 * 
 * Provides a string filter operator which is used when the user searches items in filter details page.
 * Possible operators are: <code>AnyWordStartsWith</code>, <code>Contains</code>, <code>StartsWith</code>, <code>Equals</code>.
 * This property will be ignored if a custom callback is provided through <code>setFilterSearchCallback</code> method.
 * 
 * Default value is <code>StartsWith</code>.
 * @returns {sap.m.StringFilterOperator} Value of property <code>filterSearchOperator</code>
 * @since 1.42
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getFilterSearchOperator = function() { return new sap.m.StringFilterOperator(); };

/**
 * Gets current value of property {@link #getGroupDescending groupDescending}.
 * 
 * Determines whether the group order is descending or ascending (default).
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>groupDescending</code>
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getGroupDescending = function() { return false; };

/**
 * Gets content of aggregation {@link #getGroupItems groupItems}.
 * 
 * The list of items with key and value that can be grouped on (for example, a list of columns for a table).
 * 
 * @returns {sap.m.ViewSettingsItem[]}
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getGroupItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.ViewSettingsDialog.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsDialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getPresetFilterItems presetFilterItems}.
 * 
 * The list of preset filter items that allows the selection of more complex or custom filters. These entries are displayed at the top of the filter tab.
 * 
 * @returns {sap.m.ViewSettingsItem[]}
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getPresetFilterItems = function() { return new Array(); };

/**
 * Gets the selected filter object in format { parent_key: { key: boolean, key2: boolean, ...}, ... }.
 * 
 * @public
 * @return {object} An object with item and sub-item keys
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * @since 1.42
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilterCompoundKeys = function() { return new Object(); };

/**
 * Returns the selected filters as an array of ViewSettingsItems.
 * 
 * It can be used to create matching sorters and filters to apply the selected settings to the data.
 * @overwrite
 * @public
 * @return {sap.m.ViewSettingsItem[]} An array of selected filter items
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilterItems = function() { return new Array(); };

/**
 * Gets the selected filter object in format {key: boolean}.
 * 
 * It can be used to create matching sorters and filters to apply the selected settings to the data.
 * 
 * @public
 * @return {object} An object with item and sub-item keys
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * @deprecated As of version 1.42, replaced by getSelectedFilterCompoundKeys
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilterKeys = function() { return new Object(); };

/**
 * Gets the filter string in format: "filter name (subfilter1 name, subfilter2
 * name, ...), ...".
 * For custom and preset filters it will only add the filter name to the resulting string.
 * 
 * @public
 * @return {string} The selected filter string
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedFilterString = function() { return ""; };

/**
 * ID of the element which is the current target of the association {@link #getSelectedGroupItem selectedGroupItem}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedGroupItem = function() { return new sap.ui.core.ID(); };

/**
 * ID of the element which is the current target of the association {@link #getSelectedPresetFilterItem selectedPresetFilterItem}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedPresetFilterItem = function() { return new sap.ui.core.ID(); };

/**
 * ID of the element which is the current target of the association {@link #getSelectedSortItem selectedSortItem}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSelectedSortItem = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getSortDescending sortDescending}.
 * 
 * Determines whether the sort order is descending or ascending (default).
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>sortDescending</code>
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSortDescending = function() { return false; };

/**
 * Gets content of aggregation {@link #getSortItems sortItems}.
 * 
 * The list of items with key and value that can be sorted over (for example, a list of columns for a table).
 * 
 * @returns {sap.m.ViewSettingsItem[]}
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getSortItems = function() { return new Array(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Defines the title of the dialog. If not set and there is only one active tab, the dialog uses the default "View" or "Sort", "Group", "Filter" respectively.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.getTitle = function() { return ""; };

/**
 * Forward method to the inner dialog method: hasStyleClass.
 * @public
 * @override
 * @returns {boolean} true if the class is set, false otherwise
 * 
 */
sap.m.ViewSettingsDialog.prototype.hasStyleClass = function() { return false; };

/**
 * Checks for the provided <code>sap.m.ViewSettingsCustomTab</code> in the aggregation {@link #getCustomTabs customTabs}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsCustomTab}
 *           oCustomTab The customTab whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.indexOfCustomTab = function(oCustomTab) { return 0; };

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation {@link #getFilterItems filterItems}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *           oFilterItem The filterItem whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.indexOfFilterItem = function(oFilterItem) { return 0; };

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation {@link #getGroupItems groupItems}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *           oGroupItem The groupItem whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.indexOfGroupItem = function(oGroupItem) { return 0; };

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation {@link #getPresetFilterItems presetFilterItems}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *           oPresetFilterItem The presetFilterItem whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.indexOfPresetFilterItem = function(oPresetFilterItem) { return 0; };

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation {@link #getSortItems sortItems}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *           oSortItem The sortItem whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.indexOfSortItem = function(oSortItem) { return 0; };

/**
 * Inserts a customTab into the aggregation {@link #getCustomTabs customTabs}.
 * 
 * @param {sap.m.ViewSettingsCustomTab}
 *            oCustomTab the customTab to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the customTab should be inserted at; for
 *              a negative value of <code>iIndex</code>, the customTab is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the customTab is inserted at
 *              the last position
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.insertCustomTab = function(oCustomTab,iIndex) { return new sap.m.ViewSettingsDialog(); };

/**
 * Inserts a filterItem into the aggregation {@link #getFilterItems filterItems}.
 * 
 * @param {sap.m.ViewSettingsItem}
 *            oFilterItem the filterItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the filterItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the filterItem is inserted at
 *              the last position
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.insertFilterItem = function(oFilterItem,iIndex) { return new sap.m.ViewSettingsDialog(); };

/**
 * Inserts a groupItem into the aggregation {@link #getGroupItems groupItems}.
 * 
 * @param {sap.m.ViewSettingsItem}
 *            oGroupItem the groupItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the groupItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the groupItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the groupItem is inserted at
 *              the last position
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.insertGroupItem = function(oGroupItem,iIndex) { return new sap.m.ViewSettingsDialog(); };

/**
 * Inserts a presetFilterItem into the aggregation {@link #getPresetFilterItems presetFilterItems}.
 * 
 * @param {sap.m.ViewSettingsItem}
 *            oPresetFilterItem the presetFilterItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the presetFilterItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the presetFilterItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the presetFilterItem is inserted at
 *              the last position
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.insertPresetFilterItem = function(oPresetFilterItem,iIndex) { return new sap.m.ViewSettingsDialog(); };

/**
 * Inserts a sortItem into the aggregation {@link #getSortItems sortItems}.
 * 
 * @param {sap.m.ViewSettingsItem}
 *            oSortItem the sortItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the sortItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the sortItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the sortItem is inserted at
 *              the last position
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.insertSortItem = function(oSortItem,iIndex) { return new sap.m.ViewSettingsDialog(); };

/**
 * Opens the ViewSettingsDialog relative to the parent control.
 * 
 * @public
 * @param {string} [sPageId] The ID of the initial page to be opened in the dialog.
 * 	The available values are "sort", "group", "filter" or IDs of custom tabs.
 * 
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ViewSettingsDialog.prototype.open = function(sPageId) { return new sap.m.ViewSettingsDialog(); };

/**
 * Removes all the controls from the aggregation {@link #getCustomTabs customTabs}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ViewSettingsCustomTab[]} An array of the removed elements (might be empty)
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeAllCustomTabs = function() { return new Array(); };

/**
 * Removes all filter Items and resets the remembered page if it was a filter detail page and all of its filter items are being removed.
 * 
 * @overwrite
 * @public
 * @returns {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeAllFilterItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Removes all the controls from the aggregation {@link #getGroupItems groupItems}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ViewSettingsItem[]} An array of the removed elements (might be empty)
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeAllGroupItems = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getPresetFilterItems presetFilterItems}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ViewSettingsItem[]} An array of the removed elements (might be empty)
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeAllPresetFilterItems = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getSortItems sortItems}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ViewSettingsItem[]} An array of the removed elements (might be empty)
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeAllSortItems = function() { return new Array(); };

/**
 * Removes a customTab from the aggregation {@link #getCustomTabs customTabs}.
 * 
 * @param {int | string | sap.m.ViewSettingsCustomTab} vCustomTab The customTab to remove or its index or id
 * @returns {sap.m.ViewSettingsCustomTab} The removed customTab or <code>null</code>
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeCustomTab = function(vCustomTab) { return new sap.m.ViewSettingsCustomTab(); };

/**
 * Removes a filter Item and resets the remembered page if it was the filter detail page of the removed filter.
 * 
 * @overwrite
 * @public
 * @param { int| sap.m.ViewSettingsFilterItem | string } vFilterItem The filter item's index, or the item itself, or its id
 * @returns {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeFilterItem = function(vFilterItem) { return new sap.m.ViewSettingsDialog(); };

/**
 * Removes a groupItem from the aggregation {@link #getGroupItems groupItems}.
 * 
 * @param {int | string | sap.m.ViewSettingsItem} vGroupItem The groupItem to remove or its index or id
 * @returns {sap.m.ViewSettingsItem} The removed groupItem or <code>null</code>
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeGroupItem = function(vGroupItem) { return new sap.m.ViewSettingsItem(); };

/**
 * Removes a presetFilterItem from the aggregation {@link #getPresetFilterItems presetFilterItems}.
 * 
 * @param {int | string | sap.m.ViewSettingsItem} vPresetFilterItem The presetFilterItem to remove or its index or id
 * @returns {sap.m.ViewSettingsItem} The removed presetFilterItem or <code>null</code>
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removePresetFilterItem = function(vPresetFilterItem) { return new sap.m.ViewSettingsItem(); };

/**
 * Removes a sortItem from the aggregation {@link #getSortItems sortItems}.
 * 
 * @param {int | string | sap.m.ViewSettingsItem} vSortItem The sortItem to remove or its index or id
 * @returns {sap.m.ViewSettingsItem} The removed sortItem or <code>null</code>
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeSortItem = function(vSortItem) { return new sap.m.ViewSettingsItem(); };

/**
 * Forward method to the inner dialog method: removeStyleClass.
 * @public
 * @override
 * @returns {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.removeStyleClass = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Forward the busy state setting to the internal dialog instance.
 * Needed because of the not-bullet proof implementation of setBusy in sap.ui.core.Control
 * @public
 * @param {boolean} bBusy The busy state flag
 * @return {sap.m.ViewSettingsDialog} this Instance for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.setBusy = function(bBusy) { return new sap.m.ViewSettingsDialog(); };

/**
 * Sets a callback that will check the ViewSettingsItem's text against the search query.
 * If a callback is set, <code>filterSearchOperator</code> property will be ignored, as it serves the same purpose.
 * @param {function} fnTest A function that accepts two parameters fnTest({string} query, {string} value) and returns boolean if the value satisfies the query.
 * @returns {sap.m.ViewSettingsDialog} this instance for chaining
 * @public
 * @since 1.42
 * 
 */
sap.m.ViewSettingsDialog.prototype.setFilterSearchCallback = function(fnTest) { return new sap.m.ViewSettingsDialog(); };

/**
 * Sets a new value for property {@link #getFilterSearchOperator filterSearchOperator}.
 * 
 * Provides a string filter operator which is used when the user searches items in filter details page.
 * Possible operators are: <code>AnyWordStartsWith</code>, <code>Contains</code>, <code>StartsWith</code>, <code>Equals</code>.
 * This property will be ignored if a custom callback is provided through <code>setFilterSearchCallback</code> method.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>StartsWith</code>.
 * @param {sap.m.StringFilterOperator} sFilterSearchOperator New value for property <code>filterSearchOperator</code>
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.42
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.setFilterSearchOperator = function(sFilterSearchOperator) { return new sap.m.ViewSettingsDialog(); };

/**
 * Sets a new value for property {@link #getGroupDescending groupDescending}.
 * 
 * Determines whether the group order is descending or ascending (default).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bGroupDescending New value for property <code>groupDescending</code>
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.setGroupDescending = function(bGroupDescending) { return new sap.m.ViewSettingsDialog(); };

/**
 * Sets the selected filter object in format { parent_key: { key: boolean, key2: boolean, ...}, ... }.
 * 
 * @public
 * @param {object} oSelectedFilterKeys
 *         A configuration object with filter item and sub item keys in the format: { parent_key: { key: boolean, key2: boolean, ...}, ... }.
 *         Setting boolean to true will set the filter to true, false or omitting an entry will set the filter to false.
 *         It can be used to set the dialog state based on presets.
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * @since 1.42
 * 
 */
sap.m.ViewSettingsDialog.prototype.setSelectedFilterCompoundKeys = function(oSelectedFilterKeys) { return new sap.m.ViewSettingsDialog(); };

/**
 * Sets the selected filter object in format {key: boolean}.
 * <b>Note:</b> Do not use duplicated item keys with this method.
 * 
 * @public
 * @param {object} oSelectedFilterKeys
 *         A configuration object with filter item and sub item keys in the format: { key: boolean }.
 *         Setting boolean to true will set the filter to true, false or omitting an entry will set the filter to false.
 *         It can be used to set the dialog state based on presets.
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * @deprecated As of version 1.42, replaced by setSelectedFilterCompoundKeys
 * 
 */
sap.m.ViewSettingsDialog.prototype.setSelectedFilterKeys = function(oSelectedFilterKeys) { return new sap.m.ViewSettingsDialog(); };

/**
 * Sets the selected group item (either by key or by item).
 * 
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem|string} vItemOrKey The selected item or the item's key string
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.setSelectedGroupItem = function(vItemOrKey) { return new sap.m.ViewSettingsDialog(); };

/**
 * Sets the selected preset filter item.
 * 
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem|string} vItemOrKey The selected item or the item's key string
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.setSelectedPresetFilterItem = function(vItemOrKey) { return new sap.m.ViewSettingsDialog(); };

/**
 * Sets the selected sort item (either by key or by item).
 * 
 * @overwrite
 * @public
 * @param {sap.m.ViewSettingsItem|string} vItemOrKey The selected item or the item's key string
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.setSelectedSortItem = function(vItemOrKey) { return new sap.m.ViewSettingsDialog(); };

/**
 * Sets a new value for property {@link #getSortDescending sortDescending}.
 * 
 * Determines whether the sort order is descending or ascending (default).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSortDescending New value for property <code>sortDescending</code>
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.setSortDescending = function(bSortDescending) { return new sap.m.ViewSettingsDialog(); };

/**
 * Sets the title of the internal dialog.
 * 
 * @overwrite
 * @public
 * @param {string} sTitle The title text for the dialog
 * @return {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.setTitle = function(sTitle) { return new sap.m.ViewSettingsDialog(); };

/**
 * Forward method to the inner dialog method: toggleStyleClass.
 * @public
 * @override
 * @returns {sap.m.ViewSettingsDialog} this pointer for chaining
 * 
 */
sap.m.ViewSettingsDialog.prototype.toggleStyleClass = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Unbinds aggregation {@link #getCustomTabs customTabs} from model data.
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.unbindCustomTabs = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Unbinds aggregation {@link #getFilterItems filterItems} from model data.
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.unbindFilterItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Unbinds aggregation {@link #getGroupItems groupItems} from model data.
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.unbindGroupItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Unbinds aggregation {@link #getPresetFilterItems presetFilterItems} from model data.
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.unbindPresetFilterItems = function() { return new sap.m.ViewSettingsDialog(); };

/**
 * Unbinds aggregation {@link #getSortItems sortItems} from model data.
 * @returns {sap.m.ViewSettingsDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16
 * 
 * @public
 * 
 */
sap.m.ViewSettingsDialog.prototype.unbindSortItems = function() { return new sap.m.ViewSettingsDialog(); };


// ---- sap.m.ViewSettingsFilterItem --------------------------------------------------------------------------

/**
 * Constructor for a new ViewSettingsFilterItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMultiSelect multiSelect} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.ViewSettingsItem[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:filterDetailItemsAggregationChange filterDetailItemsAggregationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ViewSettingsItem#constructor sap.m.ViewSettingsItem}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A ViewSettingsFilterItem control is used for modelling filter behaviour in the ViewSettingsDialog.
 * It is derived from a core Item, but does not support the base class properties like textDirection and enabled.
 * Setting these properties will not have any effects.
 * @extends sap.m.ViewSettingsItem
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ViewSettingsFilterItem = function(sId,mSettings) {};
/**
 * Let the outside world know that the filter detail aggregation was changed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.filterDetailItemsAggregationChange = function(oControlEvent) {  };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.m.ViewSettingsItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.m.ViewSettingsFilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.addItem = function(oItem) { return new sap.m.ViewSettingsFilterItem(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:filterDetailItemsAggregationChange filterDetailItemsAggregationChange} event of this <code>sap.m.ViewSettingsFilterItem</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ViewSettingsFilterItem</code> itself.
 * 
 * Let the outside world know that the filter detail aggregation was changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsFilterItem</code> itself
 * 
 * @returns {sap.m.ViewSettingsFilterItem} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.attachFilterDetailItemsAggregationChange = function(oData,fnFunction,oListener) { return new sap.m.ViewSettingsFilterItem(); };

/**
 * Binds aggregation {@link #getItems items} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.m.ViewSettingsFilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.bindItems = function(oBindingInfo) { return new sap.m.ViewSettingsFilterItem(); };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.m.ViewSettingsFilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.destroyItems = function() { return new sap.m.ViewSettingsFilterItem(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:filterDetailItemsAggregationChange filterDetailItemsAggregationChange} event of this <code>sap.m.ViewSettingsFilterItem</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ViewSettingsFilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.detachFilterDetailItemsAggregationChange = function(fnFunction,oListener) { return new sap.m.ViewSettingsFilterItem(); };

/**
 * Creates a new subclass of class sap.m.ViewSettingsFilterItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ViewSettingsItem.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsFilterItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:filterDetailItemsAggregationChange filterDetailItemsAggregationChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.ViewSettingsFilterItem} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.fireFilterDetailItemsAggregationChange = function(mParameters) { return new sap.m.ViewSettingsFilterItem(); };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * Items that are logically grouped under this filter item. They are used to display filter details in the ViewSettingsDialog.
 * 
 * @returns {sap.m.ViewSettingsItem[]}
 * 
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.getItems = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.m.ViewSettingsFilterItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsFilterItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMultiSelect multiSelect}.
 * 
 * If set to (true), multi selection will be allowed for the items aggregation.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>multiSelect</code>
 * 
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.getMultiSelect = function() { return false; };

/**
 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.ViewSettingsItem}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.m.ViewSettingsItem}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.m.ViewSettingsFilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.insertItem = function(oItem,iIndex) { return new sap.m.ViewSettingsFilterItem(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.m.ViewSettingsItem[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.m.ViewSettingsItem} vItem The item to remove or its index or id
 * @returns {sap.m.ViewSettingsItem} The removed item or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.removeItem = function(vItem) { return new sap.m.ViewSettingsItem(); };

/**
 * Sets a new value for property {@link #getMultiSelect multiSelect}.
 * 
 * If set to (true), multi selection will be allowed for the items aggregation.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bMultiSelect New value for property <code>multiSelect</code>
 * @returns {sap.m.ViewSettingsFilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.setMultiSelect = function(bMultiSelect) { return new sap.m.ViewSettingsFilterItem(); };

/**
 * Unbinds aggregation {@link #getItems items} from model data.
 * @returns {sap.m.ViewSettingsFilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsFilterItem.prototype.unbindItems = function() { return new sap.m.ViewSettingsFilterItem(); };


// ---- sap.m.ViewSettingsItem --------------------------------------------------------------------------

/**
 * Constructor for a new ViewSettingsItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:itemPropertyChanged itemPropertyChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * ViewSettingsItem is used for modelling filter behaviour in the ViewSettingsDialog.
 * It is derived from a core Item, but does not support the base class properties "textDirection" and "enabled", setting these properties will not have any effects.
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.16
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.ViewSettingsItem = function(sId,mSettings) {};
/**
 * Let the outside world know that some of its properties has changed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.ViewSettingsItem} oControlEvent.getParameters.changedItem Instance of the item that changed.
 * @param {string} oControlEvent.getParameters.propertyKey Key of the changed property.
 * @param {any} oControlEvent.getParameters.propertyValue Value of the changed property.
 * @public
 * 
 */
sap.m.ViewSettingsItem.prototype.itemPropertyChanged = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:itemPropertyChanged itemPropertyChanged} event of this <code>sap.m.ViewSettingsItem</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.ViewSettingsItem</code> itself.
 * 
 * Let the outside world know that some of its properties has changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsItem</code> itself
 * 
 * @returns {sap.m.ViewSettingsItem} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.ViewSettingsItem.prototype.attachItemPropertyChanged = function(oData,fnFunction,oListener) { return new sap.m.ViewSettingsItem(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:itemPropertyChanged itemPropertyChanged} event of this <code>sap.m.ViewSettingsItem</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.ViewSettingsItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsItem.prototype.detachItemPropertyChanged = function(fnFunction,oListener) { return new sap.m.ViewSettingsItem(); };

/**
 * Creates a new subclass of class sap.m.ViewSettingsItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:itemPropertyChanged itemPropertyChanged} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.ViewSettingsItem} [mParameters.changedItem] Instance of the item that changed.
 * @param {string} [mParameters.propertyKey] Key of the changed property.
 * @param {any} [mParameters.propertyValue] Value of the changed property.
 * 
 * @returns {sap.m.ViewSettingsItem} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.ViewSettingsItem.prototype.fireItemPropertyChanged = function(mParameters) { return new sap.m.ViewSettingsItem(); };

/**
 * Returns a metadata object for class sap.m.ViewSettingsItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.ViewSettingsItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSelected selected}.
 * 
 * Selected state of the item. If set to "true", the item will be displayed as selected in the view settings dialog.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>selected</code>
 * 
 * @public
 * 
 */
sap.m.ViewSettingsItem.prototype.getSelected = function() { return false; };

/**
 * Sets a new value for property {@link #getSelected selected}.
 * 
 * Selected state of the item. If set to "true", the item will be displayed as selected in the view settings dialog.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSelected New value for property <code>selected</code>
 * @returns {sap.m.ViewSettingsItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.ViewSettingsItem.prototype.setSelected = function(bSelected) { return new sap.m.ViewSettingsItem(); };


// ---- sap.m.Wizard --------------------------------------------------------------------------

/**
 * Constructor for a new Wizard.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: auto)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getShowNextButton showNextButton} : boolean (default: true)</li>
 * <li>{@link #getFinishButtonText finishButtonText} : string (default: Review)</li>
 * <li>{@link #getEnableBranching enableBranching} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSteps steps} : sap.m.WizardStep[] (default)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getCurrentStep currentStep} : (sap.ui.core.ID | sap.m.WizardStep)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:stepActivate stepActivate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:complete complete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * Enables users to accomplish a single goal which consists of multiple dependable sub-tasks.
 * <h3>Overview</h3>
 * The sap.m.Wizard helps users complete a complex and unfamiliar task by dividing it into sections and guiding the user through it.
 * The wizard has two main areas - a navigation area at the top showing the step sequence and a content area below it.
 * <h3>Structure</h3>
 * <h4>Navigation Area</h4>
 * The top most area of the wizard is occupied by the navigation area. It shows the sequence of {@link sap.m.WizardStep wizard steps}.
 * <ul>
 * <li>The minimum number of steps is 3 and the maximum is 8 and are stored in the <code>steps</code> aggregation.</li>
 * <li>Steps can be branching depending on choices the user made in their input - this is set by the <code>enableBranching</code> property. </li>
 * <li>Steps can have different visual representations - numbers or icons. You can add labels for better readability </li>
 * </ul>
 * <h4>Content</h4>
 * The content occupies the main part of the page. It can hold any type of input controls. The content is kept in {@link sap.m.WizardStep wizard steps}.
 * <h4>Next Step Button</h4>
 * The next step button is displayed below the content. It can be hidden by setting <code>showNextButton</code> to <code>false</code> and displayed, for example,
 * only after the user has filled all mandatory fields.
 * <h3>Usage</h3>
 * <h4>When to use:</h4>
 * When the user has to accomplish a long or unfamiliar task.
 * <h4>When not to use:</h4>
 * When the user has to accomplish a routine task that is clear and familiar.
 * When the task has only two steps or less.
 * <h3>Responsive Behavior</h3>
 * On mobile devices the steps in the StepNavigator are grouped together and overlap. Tapping on them will show a popover to select the step to navigate to.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.Wizard = function(sId,mSettings) {};
/**
 * The complete event is fired when the user clicks the finish button of the Wizard.
 * The finish button is only available on the last step of the Wizard.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.Wizard.prototype.complete = function(oControlEvent) {  };

/**
 * The StepActivated event is fired every time a new step is activated.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {int} oControlEvent.getParameters.index The index of the activated step as a parameter. One-based.
 * @public
 * 
 */
sap.m.Wizard.prototype.stepActivate = function(oControlEvent) {  };

/**
 * Adds a new step to the Wizard.
 * @param {sap.m.WizardStep} wizardStep New WizardStep to add to the Wizard
 * @returns {sap.m.Wizard} Pointer to the control instance for chaining
 * @public
 * 
 */
sap.m.Wizard.prototype.addStep = function(wizardStep) { return new sap.m.Wizard(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:complete complete} event of this <code>sap.m.Wizard</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Wizard</code> itself.
 * 
 * The complete event is fired when the user clicks the finish button of the Wizard.
 * The finish button is only available on the last step of the Wizard.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Wizard</code> itself
 * 
 * @returns {sap.m.Wizard} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Wizard.prototype.attachComplete = function(oData,fnFunction,oListener) { return new sap.m.Wizard(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:stepActivate stepActivate} event of this <code>sap.m.Wizard</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.Wizard</code> itself.
 * 
 * The StepActivated event is fired every time a new step is activated.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.Wizard</code> itself
 * 
 * @returns {sap.m.Wizard} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.Wizard.prototype.attachStepActivate = function(oData,fnFunction,oListener) { return new sap.m.Wizard(); };

/**
 * Destroys all aggregated steps in the Wizard.
 * @returns {sap.m.Wizard} Pointer to the control instance for chaining.
 * @public
 * 
 */
sap.m.Wizard.prototype.destroySteps = function() { return new sap.m.Wizard(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:complete complete} event of this <code>sap.m.Wizard</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Wizard} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Wizard.prototype.detachComplete = function(fnFunction,oListener) { return new sap.m.Wizard(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:stepActivate stepActivate} event of this <code>sap.m.Wizard</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.Wizard} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Wizard.prototype.detachStepActivate = function(fnFunction,oListener) { return new sap.m.Wizard(); };

/**
 * Discards all progress done from the given step(incl.) to the end of the wizard.
 * The verified state of the steps is returned to the initial provided.
 * @param {sap.m.WizardStep} step The step after which the progress is discarded.
 * @returns {sap.m.Wizard} Pointer to the control instance for chaining.
 * @public
 * 
 */
sap.m.Wizard.prototype.discardProgress = function(step) { return new sap.m.Wizard(); };

/**
 * Creates a new subclass of class sap.m.Wizard with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.Wizard.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:complete complete} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.Wizard} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Wizard.prototype.fireComplete = function(mParameters) { return new sap.m.Wizard(); };

/**
 * Fires event {@link #event:stepActivate stepActivate} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {int} [mParameters.index] The index of the activated step as a parameter. One-based.
 * 
 * @returns {sap.m.Wizard} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.Wizard.prototype.fireStepActivate = function(mParameters) { return new sap.m.Wizard(); };

/**
 * ID of the element which is the current target of the association {@link #getCurrentStep currentStep}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.Wizard.prototype.getCurrentStep = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getEnableBranching enableBranching}.
 * 
 * Enables the branching functionality of the Wizard.
 * Branching gives the developer the ability to define multiple routes a user
 * is able to take based on the input in the current step.
 * It is up to the developer to programatically check for what is the input in the
 * current step and set a concrete next step amongs the available subsequent steps.
 * Note: If this property is set to false, <code>next</code> and <code>subSequentSteps</code>
 * associations of the WizardStep control are ignored.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableBranching</code>
 * 
 * @public
 * 
 */
sap.m.Wizard.prototype.getEnableBranching = function() { return false; };

/**
 * Returns the finish button text which will be rendered.
 * @returns {string} The text which will be rendered in the finish button.
 * @public
 * 
 */
sap.m.Wizard.prototype.getFinishButtonText = function() { return ""; };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * Determines the height of the Wizard.
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.m.Wizard.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.m.Wizard.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.Wizard.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the number of the last activated step in the Wizard.
 * @returns {number} The last activated step.
 * @public
 * 
 */
sap.m.Wizard.prototype.getProgress = function() { return 0.0; };

/**
 * Returns the last activated step in the Wizard.
 * @returns {sap.m.WizardStep} Pointer to the control instance for chaining.
 * @public
 * 
 */
sap.m.Wizard.prototype.getProgressStep = function() { return new sap.m.WizardStep(); };

/**
 * Gets current value of property {@link #getShowNextButton showNextButton}.
 * 
 * Controls the visibility of the next button. The developers can choose to control the flow of the
 * steps either through the API (with <code>nextStep</code> and <code>previousStep</code> methods) or let the user click
 * the next button, and control it with <code>validateStep</code> or <code>invalidateStep</code> methods.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showNextButton</code>
 * 
 * @public
 * 
 */
sap.m.Wizard.prototype.getShowNextButton = function() { return false; };

/**
 * Gets content of aggregation {@link #getSteps steps}.
 * 
 * The wizard steps to be included in the content of the control.
 * 
 * @returns {sap.m.WizardStep[]}
 * 
 * @public
 * 
 */
sap.m.Wizard.prototype.getSteps = function() { return new Array(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Determines the width of the Wizard.
 * 
 * Default value is <code>auto</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.m.Wizard.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Goes to the given step. The step must already be activated and visible. You can't use this method on steps
 * that haven't been reached yet.
 * @param {sap.m.WizardStep} step The step to go to.
 * @param {boolean} focusFirstStepElement Defines whether the focus should be changed to the first element.
 * @returns {sap.m.Wizard} Pointer to the control instance for chaining.
 * @public
 * 
 */
sap.m.Wizard.prototype.goToStep = function(step,focusFirstStepElement) { return new sap.m.Wizard(); };

/**
 * Checks for the provided <code>sap.m.WizardStep</code> in the aggregation {@link #getSteps steps}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.m.WizardStep}
 *           oStep The step whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.Wizard.prototype.indexOfStep = function(oStep) { return 0; };

/**
 * Dynamic step insertion is not yet supported.
 * @experimental
 * @public
 * 
 */
sap.m.Wizard.prototype.insertStep = function() {  };

/**
 * Invalidates the given step.
 * @param {sap.m.WizardStep} step The step to be invalidated.
 * @returns {sap.m.Wizard} Pointer to the control instance for chaining.
 * @public
 * 
 */
sap.m.Wizard.prototype.invalidateStep = function(step) { return new sap.m.Wizard(); };

/**
 * Validates the current step, and moves one step further.
 * @returns {sap.m.Wizard} Pointer to the control instance for chaining.
 * @public
 * 
 */
sap.m.Wizard.prototype.nextStep = function() { return new sap.m.Wizard(); };

/**
 * Discards the current step and goes one step back.
 * @returns {sap.m.Wizard} Pointer to the control instance for chaining.
 * @public
 * 
 */
sap.m.Wizard.prototype.previousStep = function() { return new sap.m.Wizard(); };

/**
 * Removes all steps from the Wizard.
 * @returns {sap.m.WizardStep[]} Pointer to the Steps that were removed.
 * @public
 * 
 */
sap.m.Wizard.prototype.removeAllSteps = function() { return new Array(); };

/**
 * Dynamic step removal is not yet supported.
 * @experimental
 * @public
 * 
 */
sap.m.Wizard.prototype.removeStep = function() {  };

/**
 * Sets the associated {@link #getCurrentStep currentStep}.
 * @param {sap.ui.core.ID | sap.m.WizardStep} oCurrentStep ID of an element which becomes the new target of this currentStep association; alternatively, an element instance may be given
 * @returns {sap.m.Wizard} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Wizard.prototype.setCurrentStep = function(oCurrentStep) { return new sap.m.Wizard(); };

/**
 * Sets a new value for property {@link #getEnableBranching enableBranching}.
 * 
 * Enables the branching functionality of the Wizard.
 * Branching gives the developer the ability to define multiple routes a user
 * is able to take based on the input in the current step.
 * It is up to the developer to programatically check for what is the input in the
 * current step and set a concrete next step amongs the available subsequent steps.
 * Note: If this property is set to false, <code>next</code> and <code>subSequentSteps</code>
 * associations of the WizardStep control are ignored.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableBranching New value for property <code>enableBranching</code>
 * @returns {sap.m.Wizard} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Wizard.prototype.setEnableBranching = function(bEnableBranching) { return new sap.m.Wizard(); };

/**
 * Sets the text for the finish button. By default it is "Review".
 * @param {string} value The text of the finish button.
 * @returns {sap.m.Wizard} Reference to the control instance for chaining.
 * @public
 * 
 */
sap.m.Wizard.prototype.setFinishButtonText = function(value) { return new sap.m.Wizard(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * Determines the height of the Wizard.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.m.Wizard} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Wizard.prototype.setHeight = function(sHeight) { return new sap.m.Wizard(); };

/**
 * Sets the visiblity of the next button.
 * @param {boolean} value True to show the button or false to hide it.
 * @returns {sap.m.Wizard} Reference to the control instance for chaining.
 * @public
 * 
 */
sap.m.Wizard.prototype.setShowNextButton = function(value) { return new sap.m.Wizard(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Determines the width of the Wizard.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.m.Wizard} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.Wizard.prototype.setWidth = function(sWidth) { return new sap.m.Wizard(); };

/**
 * Validates the given step.
 * @param {sap.m.WizardStep} step The step to be validated.
 * @returns {sap.m.Wizard} Pointer to the control instance for chaining.
 * @public
 * 
 */
sap.m.Wizard.prototype.validateStep = function(step) { return new sap.m.Wizard(); };


// ---- sap.m.WizardStep --------------------------------------------------------------------------

/**
 * Constructor for a new WizardStep.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string (default: )</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: )</li>
 * <li>{@link #getValidated validated} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[] (default)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSubsequentSteps subsequentSteps} : (sap.ui.core.ID | sap.m.WizardStep)[]</li>
 * <li>{@link #getNextStep nextStep} : (sap.ui.core.ID | sap.m.WizardStep)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:complete complete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:activate activate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * 
 * @class
 * A container control used to aggregate user input controls as part of an sap.m.Wizard.
 * <h3>Overview</h3>
 * WizardStep gives the developer the ability to validate, invalidate the step and define subsequent steps.
 * The WizardStep control control is supposed to be used only as an aggregation of the {@link sap.m.Wizard Wizard} control,
 * and should not be used as a standalone one.
 * <h3>Structure</h3>
 * <ul>
 * <li>Each wizard step has a title. Additionally it can have an icon.</li>
 * <li>Each wizard step can be validated by setting the <code>validated</code> property. This action will trigger the rendering of the Next step button.</li>
 * <li>If the execution needs to branch after a given step, you should set all possible next steps in the <code>subsequentSteps</code> aggregation.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.30
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.m.WizardStep = function(sId,mSettings) {};
/**
 * This event is fired on next step activation from the Wizard.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.WizardStep.prototype.activate = function(oControlEvent) {  };

/**
 * This event is fired after the user presses the Next button in the Wizard,
 * or on <code>nextStep</code> method call from the app developer.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.m.WizardStep.prototype.complete = function(oControlEvent) {  };

/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.m.WizardStep} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.addContent = function(oContent) { return new sap.m.WizardStep(); };

/**
 * Adds some subsequentStep into the association {@link #getSubsequentSteps subsequentSteps}.
 * 
 * @param {sap.ui.core.ID | sap.m.WizardStep} vSubsequentStep the subsequentSteps to add; if empty, nothing is inserted
 * @returns {sap.m.WizardStep} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.addSubsequentStep = function(vSubsequentStep) { return new sap.m.WizardStep(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:activate activate} event of this <code>sap.m.WizardStep</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.WizardStep</code> itself.
 * 
 * This event is fired on next step activation from the Wizard.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.WizardStep</code> itself
 * 
 * @returns {sap.m.WizardStep} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.WizardStep.prototype.attachActivate = function(oData,fnFunction,oListener) { return new sap.m.WizardStep(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:complete complete} event of this <code>sap.m.WizardStep</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.m.WizardStep</code> itself.
 * 
 * This event is fired after the user presses the Next button in the Wizard,
 * or on <code>nextStep</code> method call from the app developer.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.m.WizardStep</code> itself
 * 
 * @returns {sap.m.WizardStep} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.m.WizardStep.prototype.attachComplete = function(oData,fnFunction,oListener) { return new sap.m.WizardStep(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.m.WizardStep} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.destroyContent = function() { return new sap.m.WizardStep(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:activate activate} event of this <code>sap.m.WizardStep</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.WizardStep} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.detachActivate = function(fnFunction,oListener) { return new sap.m.WizardStep(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:complete complete} event of this <code>sap.m.WizardStep</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.m.WizardStep} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.detachComplete = function(fnFunction,oListener) { return new sap.m.WizardStep(); };

/**
 * Creates a new subclass of class sap.m.WizardStep with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.m.WizardStep.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:activate activate} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.WizardStep} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.WizardStep.prototype.fireActivate = function(mParameters) { return new sap.m.WizardStep(); };

/**
 * Fires event {@link #event:complete complete} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.m.WizardStep} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.m.WizardStep.prototype.fireComplete = function(mParameters) { return new sap.m.WizardStep(); };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * The content of the Wizard Step.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.getContent = function() { return new Array(); };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Determines the icon that is displayed for this step.
 * The icon is visualized in the progress navigation part of the Wizard control.
 * <b>Note:</b> In order for the icon to be displayed, each step in the Wizard should have
 * this property defined, otherwise the default numbering will be displayed.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Returns a metadata object for class sap.m.WizardStep.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.m.WizardStep.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * ID of the element which is the current target of the association {@link #getNextStep nextStep}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.getNextStep = function() { return new sap.ui.core.ID(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getSubsequentSteps subsequentSteps}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.getSubsequentSteps = function() { return new Array(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Determines the title of the step.
 * The title is visualized in the Wizard control.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getValidated validated}.
 * 
 * Indicates whether or not the step is validated.
 * When a step is validated a Next button is visualized in the Wizard control.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>validated</code>
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.getValidated = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.m.WizardStep} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.insertContent = function(oContent,iIndex) { return new sap.m.WizardStep(); };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes all the controls in the association named {@link #getSubsequentSteps subsequentSteps}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.removeAllSubsequentSteps = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Removes an subsequentStep from the association named {@link #getSubsequentSteps subsequentSteps}.
 * @param {int | sap.ui.core.ID | sap.m.WizardStep} vSubsequentStep The subsequentStep to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed subsequentStep or <code>null</code>
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.removeSubsequentStep = function(vSubsequentStep) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Determines the icon that is displayed for this step.
 * The icon is visualized in the progress navigation part of the Wizard control.
 * <b>Note:</b> In order for the icon to be displayed, each step in the Wizard should have
 * this property defined, otherwise the default numbering will be displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.m.WizardStep} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.setIcon = function(sIcon) { return new sap.m.WizardStep(); };

/**
 * Sets the associated {@link #getNextStep nextStep}.
 * @param {sap.ui.core.ID | sap.m.WizardStep} oNextStep ID of an element which becomes the new target of this nextStep association; alternatively, an element instance may be given
 * @returns {sap.m.WizardStep} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.setNextStep = function(oNextStep) { return new sap.m.WizardStep(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Determines the title of the step.
 * The title is visualized in the Wizard control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.m.WizardStep} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.setTitle = function(sTitle) { return new sap.m.WizardStep(); };

/**
 * Sets a new value for property {@link #getValidated validated}.
 * 
 * Indicates whether or not the step is validated.
 * When a step is validated a Next button is visualized in the Wizard control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bValidated New value for property <code>validated</code>
 * @returns {sap.m.WizardStep} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.m.WizardStep.prototype.setValidated = function(bValidated) { return new sap.m.WizardStep(); };

// ---- static fields of namespaces ---------------------------------------------------------------------

// ---- sap.m --------------------------------------------------------------------------

/**
 * Hide the soft keyboard.
 * @public
 * @since 1.20
 * 
 * @memberof sap.m
 */
sap.m.prototype.closeKeyboard = undefined;

/**
 * Search given control's parents and try to find iScroll.
 * 
 * @param {sap.ui.core.Control} oControl
 * @return {iScroll|undefined} iScroll reference or undefined if cannot find
 * @public
 * @since 1.11
 * 
 * @memberof sap.m
 */
sap.m.prototype.getIScroll = undefined;

/**
 * Search given control's parents and try to find ScrollDelegate.
 * 
 * @param {sap.ui.core.Control} oControl
 * @return {Object|undefined} ScrollDelegate or undefined if cannot find
 * @public
 * @since 1.11
 * 
 * @memberof sap.m
 */
sap.m.prototype.getScrollDelegate = undefined;

/**
 * <pre>
 * <code>sap.m.Support</code> shows the technical information for SAPUI5 Mobile Applications.
 * This technical information includes
 *    * SAPUI5 Version
 *    * User Agent
 *    * Configurations (Bootstrap and Computed)
 *    * URI parameters
 *    * All loaded module names
 * 
 * In order to show the device information, the user must follow the following gestures.
 *    1 - Hold two finger for 3 seconds minimum.
 *    2 - Tab with a third finger while holding the first two fingers.
 * 
 * NOTE: This class is internal and all its functions must not be used by an application
 * 
 * As <code>sap.m.Support</code> is a static class, a <code>jQuery.sap.require("sap.m.Support");</code>
 * statement must be implicitly executed before the class is used.
 * 
 * 
 * Enable Support:
 * --------------------------------------------------
 * //import library
 * jQuery.sap.require("sap.m.Support");
 * 
 * //By default after require, support is enabled but implicitly we can call
 * sap.m.Support.on();
 * 
 * Disable Support:
 * --------------------------------------------------
 * sap.m.Support.off();
 * </pre>
 * @since 1.11.0
 * 
 * @static
 * @protected
 * 
 * @memberof sap.m
 */
sap.m.Support = undefined;


// ---- sap.m.BackgroundDesign --------------------------------------------------------------------------

/**
 * A solid background color dependent on the theme.
 * @public
 * 
 */
sap.m.BackgroundDesign.Solid = "";

/**
 * A translucent background depending on the opacity value of the theme.
 * @public
 * 
 */
sap.m.BackgroundDesign.Translucent = "";

/**
 * Transparent background.
 * @public
 * 
 */
sap.m.BackgroundDesign.Transparent = "";


// ---- sap.m.BarDesign --------------------------------------------------------------------------

/**
 * The Bar can be inserted into other controls and if the design is "Auto" then it inherits the design from parent control.
 * @public
 * 
 */
sap.m.BarDesign.Auto = "";

/**
 * The bar will be styled like a footer of the page.
 * @public
 * 
 */
sap.m.BarDesign.Footer = "";

/**
 * The bar will be styled like a header of the page.
 * @public
 * 
 */
sap.m.BarDesign.Header = "";

/**
 * The bar will be styled like a subheader of the page.
 * @public
 * 
 */
sap.m.BarDesign.SubHeader = "";


// ---- sap.m.ButtonType --------------------------------------------------------------------------

/**
 * accept type (green button)
 * @public
 * 
 */
sap.m.ButtonType.Accept = "";

/**
 * back type (back navigation button for header)
 * @public
 * 
 */
sap.m.ButtonType.Back = "";

/**
 * default type (no special styling)
 * @public
 * 
 */
sap.m.ButtonType.Default = "";

/**
 * emphasized type
 * @public
 * 
 */
sap.m.ButtonType.Emphasized = "";

/**
 * reject style (red button)
 * @public
 * 
 */
sap.m.ButtonType.Reject = "";

/**
 * transparent type
 * @public
 * 
 */
sap.m.ButtonType.Transparent = "";

/**
 * Unstyled type (no styling)
 * @public
 * 
 */
sap.m.ButtonType.Unstyled = "";

/**
 * up type (up navigation button for header)
 * @public
 * 
 */
sap.m.ButtonType.Up = "";


// ---- sap.m.CarouselArrowsPlacement --------------------------------------------------------------------------

/**
 * Carousel arrows are placed on the sides of the current Carousel page.
 * @public
 * 
 */
sap.m.CarouselArrowsPlacement.Content = "";

/**
 * Carousel arrows are placed on the sides of the page indicator of the Carousel.
 * @public
 * 
 */
sap.m.CarouselArrowsPlacement.PageIndicator = "";


// ---- sap.m.DateTimeInputType --------------------------------------------------------------------------

/**
 * An input control for specifying a date value. The user can select a month, day of the month, and year.
 * @public
 * @deprecated Since version 1.22.0. Instead, use dedicated <code>sap.m.DatePicker</code> control.
 * 
 */
sap.m.DateTimeInputType.Date = "";

/**
 * An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.
 * @public
 * @deprecated Since version 1.32.8. Instead, use dedicated <code>sap.m.DatePicker</code> and <code>sap.m.TimePicker</code> controls.
 * 
 */
sap.m.DateTimeInputType.DateTime = "";

/**
 * An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.
 * @public
 * @deprecated Since version 1.32.8. Instead, use dedicated <code>sap.m.TimePicker</code> control.
 * 
 */
sap.m.DateTimeInputType.Time = "";


// ---- sap.m.DeviationIndicator --------------------------------------------------------------------------

/**
 * The actual value is less than the target value.
 * @public
 * 
 */
sap.m.DeviationIndicator.Down = "";

/**
 * No value.
 * @public
 * 
 */
sap.m.DeviationIndicator.None = "";

/**
 * The actual value is more than the target value.
 * @public
 * 
 */
sap.m.DeviationIndicator.Up = "";


// ---- sap.m.DialogType --------------------------------------------------------------------------

/**
 * Dialog with type Message looks the same as the Stardard Dialog in Android. And it puts the left, right buttons to the bottom of the Dialog in iOS.
 * @public
 * 
 */
sap.m.DialogType.Message = "";

/**
 * This is the default value for Dialog type. Stardard dialog in iOS has a header on the top and the left, right buttons are put inside the header. In android, the left, right buttons are put to the bottom of the Dialog.
 * @public
 * 
 */
sap.m.DialogType.Standard = "";


// ---- sap.m.DraftIndicatorState --------------------------------------------------------------------------

/**
 * This is the default value for DraftIndicatorState type. This state has no visual information displayed.
 * @public
 * 
 */
sap.m.DraftIndicatorState.Clear = "";

/**
 * Indicates that the draft is already saved
 * @public
 * 
 */
sap.m.DraftIndicatorState.Saved = "";

/**
 * Indicates that the draft currently is being saved
 * @public
 * 
 */
sap.m.DraftIndicatorState.Saving = "";


// ---- sap.m.FacetFilterListDataType --------------------------------------------------------------------------

/**
 * >An input control for specifying a Boolean value
 * @public
 * 
 */
sap.m.FacetFilterListDataType.Boolean = "";

/**
 * An input control for specifying a date value. The user can select a month, day of the month, and year.
 * @public
 * 
 */
sap.m.FacetFilterListDataType.Date = "";

/**
 * An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.
 * @public
 * 
 */
sap.m.FacetFilterListDataType.DateTime = "";

/**
 * >An input control for specifying a Float value
 * @public
 * 
 */
sap.m.FacetFilterListDataType.Float = "";

/**
 * >An input control for specifying an Integer value
 * @public
 * 
 */
sap.m.FacetFilterListDataType.Integer = "";

/**
 * >An input control for specifying a String value
 * @public
 * 
 */
sap.m.FacetFilterListDataType.String = "";

/**
 * An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.
 * @public
 * 
 */
sap.m.FacetFilterListDataType.Time = "";


// ---- sap.m.FacetFilterType --------------------------------------------------------------------------

/**
 * Forces FacetFilter to display in light mode.
 * @public
 * 
 */
sap.m.FacetFilterType.Light = "";

/**
 * Forces FacetFilter to display facet lists as a row of buttons, one button per facet. The FacetFilter will automatically adapt to the Light type when it detects smart phone sized displays.
 * @public
 * 
 */
sap.m.FacetFilterType.Simple = "";


// ---- sap.m.FlexAlignContent --------------------------------------------------------------------------

/**
 * Line are packed toward the center of the line.
 * @public
 * 
 */
sap.m.FlexAlignContent.Center = "";

/**
 * Lines are packed toward the end of the line.
 * @public
 * 
 */
sap.m.FlexAlignContent.End = "";

/**
 * Inherits the value from its parent.
 * @public
 * 
 */
sap.m.FlexAlignContent.Inherit = "";

/**
 * Lines are evenly distributed in the line, with half-size spaces on either end.
 * <b>Note:</b> This value behaves like SpaceBetween in Internet Explorer 10.
 * @public
 * 
 */
sap.m.FlexAlignContent.SpaceAround = "";

/**
 * Lines are evenly distributed in the line.
 * @public
 * 
 */
sap.m.FlexAlignContent.SpaceBetween = "";

/**
 * Lines are packed toward the start of the line.
 * @public
 * 
 */
sap.m.FlexAlignContent.Start = "";

/**
 * Lines stretch to take up the remaining space.
 * @public
 * 
 */
sap.m.FlexAlignContent.Stretch = "";


// ---- sap.m.FlexAlignItems --------------------------------------------------------------------------

/**
 * If the flex item's inline axes are the same as the cross axis, this value is identical to "Start". Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line.
 * @public
 * 
 */
sap.m.FlexAlignItems.Baseline = "";

/**
 * The flex item's margin boxes are centered in the cross axis within the line.
 * @public
 * 
 */
sap.m.FlexAlignItems.Center = "";

/**
 * The cross-start margin edges of the flex items are placed flush with the cross-end edge of the line.
 * @public
 * 
 */
sap.m.FlexAlignItems.End = "";

/**
 * Inherits the value from its parent.
 * @public
 * 
 */
sap.m.FlexAlignItems.Inherit = "";

/**
 * The cross-start margin edges of the flex items are placed flush with the cross-start edge of the line.
 * @public
 * 
 */
sap.m.FlexAlignItems.Start = "";

/**
 * Make the cross size of the item's margin boxes as close to the same size as the line as possible.
 * @public
 * 
 */
sap.m.FlexAlignItems.Stretch = "";


// ---- sap.m.FlexAlignSelf --------------------------------------------------------------------------

/**
 * Takes up the value of alignItems from the parent FlexBox
 * @public
 * 
 */
sap.m.FlexAlignSelf.Auto = "";

/**
 * If the flex item's inline axis is the same as the cross axis, this value is identical to "Start". Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line.
 * @public
 * 
 */
sap.m.FlexAlignSelf.Baseline = "";

/**
 * The flex item's margin box is centered in the cross axis within the line.
 * @public
 * 
 */
sap.m.FlexAlignSelf.Center = "";

/**
 * The cross-start margin edges of the flex item is placed flush with the cross-end edge of the line.
 * @public
 * 
 */
sap.m.FlexAlignSelf.End = "";

/**
 * Inherits the value from its parent.
 * @public
 * 
 */
sap.m.FlexAlignSelf.Inherit = "";

/**
 * The cross-start margin edges of the flex item is placed flush with the cross-start edge of the line.
 * @public
 * 
 */
sap.m.FlexAlignSelf.Start = "";

/**
 * Make the cross size of the item's margin box as close to the same size as the line as possible.
 * @public
 * 
 */
sap.m.FlexAlignSelf.Stretch = "";


// ---- sap.m.FlexDirection --------------------------------------------------------------------------

/**
 * Flex items are laid out along the direction of the block axis (usually top to bottom).
 * @public
 * 
 */
sap.m.FlexDirection.Column = "";

/**
 * Flex items are laid out along the reverse direction of the block axis (usually bottom to top).
 * @public
 * 
 */
sap.m.FlexDirection.ColumnReverse = "";

/**
 * Inherits the value from its parent.
 * @public
 * 
 */
sap.m.FlexDirection.Inherit = "";

/**
 * Flex items are laid out along the direction of the inline axis (text direction).
 * @public
 * 
 */
sap.m.FlexDirection.Row = "";

/**
 * Flex items are laid out along the reverse direction of the inline axis (against the text direction).
 * @public
 * 
 */
sap.m.FlexDirection.RowReverse = "";


// ---- sap.m.FlexJustifyContent --------------------------------------------------------------------------

/**
 * Flex items are packed toward the center of the line.
 * @public
 * 
 */
sap.m.FlexJustifyContent.Center = "";

/**
 * Flex items are packed toward the end of the line.
 * @public
 * 
 */
sap.m.FlexJustifyContent.End = "";

/**
 * Inherits the value from its parent.
 * @public
 * 
 */
sap.m.FlexJustifyContent.Inherit = "";

/**
 * Flex items are evenly distributed in the line, with half-size spaces on either end.
 * <b>Note:</b> This value behaves like SpaceBetween in Internet Explorer 10.
 * @public
 * 
 */
sap.m.FlexJustifyContent.SpaceAround = "";

/**
 * Flex items are evenly distributed in the line.
 * @public
 * 
 */
sap.m.FlexJustifyContent.SpaceBetween = "";

/**
 * Flex items are packed toward the start of the line.
 * @public
 * 
 */
sap.m.FlexJustifyContent.Start = "";


// ---- sap.m.FlexRendertype --------------------------------------------------------------------------

/**
 * The UI5 controls are not wrapped in an additional HTML element, the surrounding Flex Box is a DIV element.
 * @public
 * @since 1.42.1
 * 
 */
sap.m.FlexRendertype.Bare = "";

/**
 * The UI5 controls are wrapped in DIV elements.
 * @public
 * 
 */
sap.m.FlexRendertype.Div = "";

/**
 * The UI5 controls are wrapped in LI elements, the surrounding Flex Box is an unordered list (UL).
 * @public
 * 
 */
sap.m.FlexRendertype.List = "";


// ---- sap.m.FlexWrap --------------------------------------------------------------------------

/**
 * The flex container is single-line.
 * @public
 * 
 */
sap.m.FlexWrap.NoWrap = "";

/**
 * The flex container is multi-line.
 * @public
 * 
 */
sap.m.FlexWrap.Wrap = "";

/**
 * The flex container is multi-line with the cross-axis start and end being swapped.
 * @public
 * 
 */
sap.m.FlexWrap.WrapReverse = "";


// ---- sap.m.FrameType --------------------------------------------------------------------------

/**
 * The Auto frame type that adjusts the size of the control to the content.
 * Support for this type in sap.m.GenericTile is deprecated since 1.48.0.
 * @protected
 * 
 */
sap.m.FrameType.Auto = "";

/**
 * The 1x1 frame type.
 * @public
 * 
 */
sap.m.FrameType.OneByOne = "";

/**
 * The 2x1 frame type.
 * @public
 * 
 */
sap.m.FrameType.TwoByOne = "";

/**
 * The 2/3 frame type.
 * @deprecated since 1.48.0
 * @protected
 * 
 */
sap.m.FrameType.TwoThirds = "";


// ---- sap.m.GenericTileMode --------------------------------------------------------------------------

/**
 * Default mode (Two lines for the header and one line for the subtitle).
 * @public
 * 
 */
sap.m.GenericTileMode.ContentMode = "";

/**
 * Header mode (Four lines for the header and one line for the subtitle).
 * @public
 * 
 */
sap.m.GenericTileMode.HeaderMode = "";

/**
 * Line mode (Implemented for both, cozy and compact densities. Generic Tile is displayed as in-line element, header and subheader are displayed in one line.
 * In case the texts need more than one line, the representation depends on the used density.
 * <b>Cozy:</b> The text will be truncated and the full text is shown in a tooltip as soon as the tile is hovered (desktop only).
 * <b>Compact:</b> Header and subheader are rendered continuously spanning multiple lines, no tooltip is provided).
 * @since 1.44.0
 * @public
 * 
 */
sap.m.GenericTileMode.LineMode = "";


// ---- sap.m.GenericTileScope --------------------------------------------------------------------------

/**
 * Action scope (Possible footer and Error State information is overlaid, "Remove" and "More" icons are added to the tile).
 * @public
 * 
 */
sap.m.GenericTileScope.Actions = "";

/**
 * Default scope (The default scope of the tile, no action icons are rendered).
 * @public
 * 
 */
sap.m.GenericTileScope.Display = "";


// ---- sap.m.HeaderLevel --------------------------------------------------------------------------

/**
 * Header level 1
 * @public
 * 
 */
sap.m.HeaderLevel.H1 = "";

/**
 * Header level 2
 * @public
 * 
 */
sap.m.HeaderLevel.H2 = "";

/**
 * Header level 3
 * @public
 * 
 */
sap.m.HeaderLevel.H3 = "";

/**
 * Header level 4
 * @public
 * 
 */
sap.m.HeaderLevel.H4 = "";

/**
 * Header level 5
 * @public
 * 
 */
sap.m.HeaderLevel.H5 = "";

/**
 * Header level 6
 * @public
 * 
 */
sap.m.HeaderLevel.H6 = "";


// ---- sap.m.IBarHTMLTag --------------------------------------------------------------------------

/**
 * Renders as a div element.
 * @public
 * 
 */
sap.m.IBarHTMLTag.Div = "";

/**
 * Renders as a footer element.
 * @public
 * 
 */
sap.m.IBarHTMLTag.Footer = "";

/**
 * Renders as a header element.
 * @public
 * 
 */
sap.m.IBarHTMLTag.Header = "";


// ---- sap.m.IconTabFilterDesign --------------------------------------------------------------------------

/**
 * A horizontally layouted design providing more space for texts.
 * @public
 * 
 */
sap.m.IconTabFilterDesign.Horizontal = "";

/**
 * A vertically layouted design using minimum horizontal space.
 * @public
 * 
 */
sap.m.IconTabFilterDesign.Vertical = "";


// ---- sap.m.ImageMode --------------------------------------------------------------------------

/**
 * The image is rendered with 'span' tag and the 'src' property is set to the 'background-image' CSS style on the output DOM element
 * @public
 * 
 */
sap.m.ImageMode.Background = "";

/**
 * The image is rendered with 'img' tag and the 'src' property is set to the src attribute on the output DOM element.
 * @public
 * 
 */
sap.m.ImageMode.Image = "";


// ---- sap.m.InputTextFormatMode --------------------------------------------------------------------------

/**
 * Key
 * @public
 * 
 */
sap.m.InputTextFormatMode.Key = "";

/**
 * A key-value pair formatted like "(key) text"
 * @public
 * 
 */
sap.m.InputTextFormatMode.KeyValue = "";

/**
 * Text
 * @public
 * 
 */
sap.m.InputTextFormatMode.Value = "";

/**
 * A value-key pair formatted like "text (key)"
 * @public
 * 
 */
sap.m.InputTextFormatMode.ValueKey = "";


// ---- sap.m.InputType --------------------------------------------------------------------------

/**
 * An input control for specifying a date value. The user can select a month, day of the month, and year.
 * @public
 * @deprecated Since version 1.9.1.
 * Please use sap.m.DateTimeInput control with type "Date" to create date input.
 * 
 */
sap.m.InputType.Date = "";

/**
 * An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.
 * @public
 * @deprecated Since version 1.9.1.
 * Please use dedicated sap.m.DateTimeInput control with type "DateTime" to create date-time input.
 * 
 */
sap.m.InputType.Datetime = "";

/**
 * An input control for specifying a date and time value where the format depends on the locale.
 * @public
 * @deprecated Since version 1.9.1.
 * Please use dedicated sap.m.DateTimeInput control with type "DateTime" to create date-time input.
 * 
 */
sap.m.InputType.DatetimeLocale = "";

/**
 * A text field for specifying an email address. Brings up a keyboard optimized for email address entry.
 * @public
 * 
 */
sap.m.InputType.Email = "";

/**
 * An input control for selecting a month.
 * @public
 * @deprecated Since version 1.9.1.
 * There is no cross-platform support. Please do not use this Input type.
 * 
 */
sap.m.InputType.Month = "";

/**
 * A text field for specifying a number. Brings up a number pad keyboard. Specifying an input type of \d* or [0-9]* is equivalent to using this type.
 * @public
 * 
 */
sap.m.InputType.Number = "";

/**
 * Password input where the user entry cannot be seen.
 * @public
 * 
 */
sap.m.InputType.Password = "";

/**
 * A text field for specifying a phone number. Brings up a phone pad keyboard.
 * @public
 * 
 */
sap.m.InputType.Tel = "";

/**
 * default (text)
 * @public
 * 
 */
sap.m.InputType.Text = "";

/**
 * An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.
 * @public
 * @deprecated Since version 1.9.1.
 * Please use dedicated sap.m.DateTimeInput control with type "Time" to create time input.
 * 
 */
sap.m.InputType.Time = "";

/**
 * A text field for specifying a URL. Brings up a keyboard optimized for URL entry.
 * @public
 * 
 */
sap.m.InputType.Url = "";

/**
 * An input control for selecting a week.
 * @public
 * @deprecated Since version 1.9.1.
 * There is no cross-platform support. Please do not use this Input type.
 * 
 */
sap.m.InputType.Week = "";


// ---- sap.m.LabelDesign --------------------------------------------------------------------------

/**
 * Displays the label in bold.
 * @public
 * 
 */
sap.m.LabelDesign.Bold = "";

/**
 * Displays the label in normal mode.
 * @public
 * 
 */
sap.m.LabelDesign.Standard = "";


// ---- sap.m.LightBoxLoadingStates --------------------------------------------------------------------------

/**
 * The LightBox image could not load.
 * @public
 * 
 */
sap.m.LightBoxLoadingStates.Error = "";

/**
 * The LightBox image has loaded.
 * @public
 * 
 */
sap.m.LightBoxLoadingStates.Loaded = "";

/**
 * The LightBox image is still loading.
 * @public
 * 
 */
sap.m.LightBoxLoadingStates.Loading = "";

/**
 * The LightBox image has timed out, could not load.
 * @public
 * 
 */
sap.m.LightBoxLoadingStates.TimeOutError = "";


// ---- sap.m.LinkConversion --------------------------------------------------------------------------

/**
 * Valid links with protocols, such as http, https, ftp and those starting with the string "www".
 * @public
 * 
 */
sap.m.LinkConversion.All = "";

/**
 * Default mode (no conversion).
 * @public
 * 
 */
sap.m.LinkConversion.None = "";

/**
 * Valid links with protocols, such as http, https, ftp.
 * @public
 * 
 */
sap.m.LinkConversion.ProtocolOnly = "";


// ---- sap.m.ListGrowingDirection --------------------------------------------------------------------------

/**
 * User has to scroll down to load more items or the growing button is displayed at the bottom.
 * @public
 * 
 */
sap.m.ListGrowingDirection.Downwards = "";

/**
 * User has to scroll up to load more items or the growing button is displayed at the top.
 * <b>Note:</b> If this option is active, there should not be any other control than <code>sap.m.List</code> inside its <code>ScollContainer</code>.
 * @public
 * 
 */
sap.m.ListGrowingDirection.Upwards = "";


// ---- sap.m.ListHeaderDesign --------------------------------------------------------------------------

/**
 * Plain header style
 * @public
 * 
 */
sap.m.ListHeaderDesign.Plain = "";

/**
 * Standard header style
 * @public
 * 
 */
sap.m.ListHeaderDesign.Standard = "";


// ---- sap.m.ListKeyboardMode --------------------------------------------------------------------------

/**
 * This mode is suitable if the number of items is limited and if there are editable fields within the item.
 * While the last/first interactive element within an item has the focus, pressing tab/shift+tab moves the focus to the next/previous element in the tab chain after/before the item </code>.
 * @public
 * 
 */
sap.m.ListKeyboardMode.Edit = "";

/**
 * This default mode is suitable if the number of items is unlimited or if there is no editable field within the item.
 * While the last/first interactive element within an item has the focus, pressing tab/shift+tab moves the focus to the next/previous element in the tab chain after/before the <code>sap.m.List</code> or <code>sap.m.Table</code>.
 * @public
 * 
 */
sap.m.ListKeyboardMode.Navigation = "";


// ---- sap.m.ListMode --------------------------------------------------------------------------

/**
 * Delete mode (only one list item can be deleted via provided delete button)
 * @public
 * 
 */
sap.m.ListMode.Delete = "";

/**
 * Multi selection mode (more than one list item can be selected).
 * @public
 * 
 */
sap.m.ListMode.MultiSelect = "";

/**
 * Default mode (no selection).
 * @public
 * 
 */
sap.m.ListMode.None = "";

/**
 * Right-positioned single selection mode (only one list item can be selected).
 * @public
 * 
 */
sap.m.ListMode.SingleSelect = "";

/**
 * Left-positioned single selection mode (only one list item can be selected).
 * @public
 * 
 */
sap.m.ListMode.SingleSelectLeft = "";

/**
 * Selected item is highlighted but no selection control is visible (only one list item can be selected).
 * @public
 * 
 */
sap.m.ListMode.SingleSelectMaster = "";


// ---- sap.m.ListSeparators --------------------------------------------------------------------------

/**
 * Separators between the items including the last and the first one.
 * @public
 * 
 */
sap.m.ListSeparators.All = "";

/**
 * Separators between the items.
 * <b>Note:</b> This enumeration depends on the theme.
 * @public
 * 
 */
sap.m.ListSeparators.Inner = "";

/**
 * No item separators.
 * @public
 * 
 */
sap.m.ListSeparators.None = "";


// ---- sap.m.ListType --------------------------------------------------------------------------

/**
 * Indicates that the item is clickable via active feedback when item is pressed.
 * @public
 * 
 */
sap.m.ListType.Active = "";

/**
 * Enables detail button of the list item that fires <code>detailPress</code> event.
 * Also see {@link sap.m.ListItemBase#attachDetailPress}.
 * @public
 * 
 */
sap.m.ListType.Detail = "";

/**
 * Enables {@link sap.m.ListType.Detail} and {@link sap.m.ListType.Active} enumerations together.
 * @public
 * 
 */
sap.m.ListType.DetailAndActive = "";

/**
 * Indicates the list item does not have any active feedback when item is pressed.
 * <b>Note:</b> <code>Inactive</code> type cannot be used to disable list items.
 * @public
 * 
 */
sap.m.ListType.Inactive = "";

/**
 * Indicates the list item is navigable to show extra information about the item.
 * @public
 * 
 */
sap.m.ListType.Navigation = "";


// ---- sap.m.LoadState --------------------------------------------------------------------------

/**
 * The control is disabled.
 * @public
 * 
 */
sap.m.LoadState.Disabled = "";

/**
 * The control failed to load.
 * @public
 * 
 */
sap.m.LoadState.Failed = "";

/**
 * The control has loaded.
 * @public
 * 
 */
sap.m.LoadState.Loaded = "";

/**
 * The control is loading.
 * @public
 * 
 */
sap.m.LoadState.Loading = "";


// ---- sap.m.MenuButtonMode --------------------------------------------------------------------------

/**
 * Default regular type (Menu button appears as a regular button, pressing opens a menu)
 * @public
 * 
 */
sap.m.MenuButtonMode.Regular = "";

/**
 * Split type (Menu button appears as a split button, pressing fires the default action a menu,
 * pressing the arrow part opens a menu)
 * @public
 * 
 */
sap.m.MenuButtonMode.Split = "";


// ---- sap.m.MessageBox.Action --------------------------------------------------------------------------

/**
 * Adds an "Abort" button to the message box.
 * @public
 * 
 */
sap.m.MessageBox.Action.ABORT = "";

/**
 * Adds a "Cancel" button to the message box.
 * @public
 * 
 */
sap.m.MessageBox.Action.CANCEL = "";

/**
 * Adds a "Close" button to the message box.
 * @public
 * 
 */
sap.m.MessageBox.Action.CLOSE = "";

/**
 * Adds a "Delete" button to the message box.
 * @public
 * 
 */
sap.m.MessageBox.Action.DELETE = "";

/**
 * Adds an "Ignore" button to the message box.
 * @public
 * 
 */
sap.m.MessageBox.Action.IGNORE = "";

/**
 * Adds a "No" button to the message box.
 * @public
 * 
 */
sap.m.MessageBox.Action.NO = "";

/**
 * Adds an "OK" button to the message box.
 * @public
 * 
 */
sap.m.MessageBox.Action.OK = "";

/**
 * Adds a "Retry" button to the message box.
 * @public
 * 
 */
sap.m.MessageBox.Action.RETRY = "";

/**
 * Adds a "Yes" button to the message box.
 * @public
 * 
 */
sap.m.MessageBox.Action.YES = "";


// ---- sap.m.MessageBox.Icon --------------------------------------------------------------------------

/**
 * Shows the error icon in the message box.
 * @public
 * 
 */
sap.m.MessageBox.Icon.ERROR = "";

/**
 * Shows the information icon in the message box.
 * @public
 * 
 */
sap.m.MessageBox.Icon.INFORMATION = "";

/**
 * Shows no icon in the message box.
 * @public
 * 
 */
sap.m.MessageBox.Icon.NONE = "";

/**
 * Shows the question icon in the message box.
 * @public
 * 
 */
sap.m.MessageBox.Icon.QUESTION = "";

/**
 * Shows the success icon in the message box.
 * @public
 * 
 */
sap.m.MessageBox.Icon.SUCCESS = "";

/**
 * Shows the warning icon in the message box.
 * @public
 * 
 */
sap.m.MessageBox.Icon.WARNING = "";


// ---- sap.m.ObjectMarkerType --------------------------------------------------------------------------

/**
 * Draft type
 * @public
 * 
 */
sap.m.ObjectMarkerType.Draft = "";

/**
 * Favorite type
 * @public
 * 
 */
sap.m.ObjectMarkerType.Favorite = "";

/**
 * Flagged type
 * @public
 * 
 */
sap.m.ObjectMarkerType.Flagged = "";

/**
 * Locked type
 * @public
 * 
 */
sap.m.ObjectMarkerType.Locked = "";

/**
 * LockedBy type
 * Use when you need to display the name of the user who locked the object.
 * @public
 * 
 */
sap.m.ObjectMarkerType.LockedBy = "";

/**
 * Unsaved type
 * @public
 * 
 */
sap.m.ObjectMarkerType.Unsaved = "";

/**
 * UnsavedBy type
 * Use when you need to display the name of the user whos changes were unsaved.
 * @public
 * 
 */
sap.m.ObjectMarkerType.UnsavedBy = "";


// ---- sap.m.ObjectMarkerVisibility --------------------------------------------------------------------------

/**
 * Shows icon and text
 * @public
 * 
 */
sap.m.ObjectMarkerVisibility.IconAndText = "";

/**
 * Shows only icon
 * @public
 * 
 */
sap.m.ObjectMarkerVisibility.IconOnly = "";

/**
 * Shows only text
 * @public
 * 
 */
sap.m.ObjectMarkerVisibility.TextOnly = "";


// ---- sap.m.OverflowToolbarPriority --------------------------------------------------------------------------

/**
 * Deprecated - Use <code>sap.m.OverflowToolbarPriority.AlwaysOverflow</code> instead
 * @deprecated Since version 1.48
 * @public
 * 
 */
sap.m.OverflowToolbarPriority.Always = "";

/**
 * AlwaysOverflow priority forces OverflowToolbar items to remain always in the overflow area
 * @public
 * 
 */
sap.m.OverflowToolbarPriority.AlwaysOverflow = "";

/**
 * Disappear priority  OverflowToolbar items overflow before the items with higher priority such as Low and High priority items and remain hidden in the overflow area
 * @public
 * 
 */
sap.m.OverflowToolbarPriority.Disappear = "";

/**
 * High priority OverflowToolbar items overflow after the items with lower priority
 * @public
 * 
 */
sap.m.OverflowToolbarPriority.High = "";

/**
 * Low priority  OverflowToolbar items overflow before the items with higher priority such as High priority items
 * @public
 * 
 */
sap.m.OverflowToolbarPriority.Low = "";

/**
 * Deprecated - Use <code>sap.m.OverflowToolbarPriority.NeverOverflow</code> instead
 * @deprecated Since version 1.48
 * @public
 * 
 */
sap.m.OverflowToolbarPriority.Never = "";

/**
 * NeverOverflow priority forces OverflowToolbar items to remain always in the toolbar
 * @public
 * 
 */
sap.m.OverflowToolbarPriority.NeverOverflow = "";


// ---- sap.m.P13nConditionOperation --------------------------------------------------------------------------

sap.m.P13nConditionOperation.Ascending = "";

sap.m.P13nConditionOperation.Average = "";

sap.m.P13nConditionOperation.BT = "";

sap.m.P13nConditionOperation.Contains = "";

sap.m.P13nConditionOperation.Descending = "";

sap.m.P13nConditionOperation.Empty = "";

sap.m.P13nConditionOperation.EndsWith = "";

sap.m.P13nConditionOperation.EQ = "";

sap.m.P13nConditionOperation.GE = "";

sap.m.P13nConditionOperation.GroupAscending = "";

sap.m.P13nConditionOperation.GroupDescending = "";

sap.m.P13nConditionOperation.GT = "";

sap.m.P13nConditionOperation.Initial = "";

sap.m.P13nConditionOperation.LE = "";

sap.m.P13nConditionOperation.LT = "";

sap.m.P13nConditionOperation.Maximum = "";

sap.m.P13nConditionOperation.Minimum = "";

sap.m.P13nConditionOperation.NotEmpty = "";

sap.m.P13nConditionOperation.StartsWith = "";

sap.m.P13nConditionOperation.Total = "";


// ---- sap.m.P13nPanelType --------------------------------------------------------------------------

/**
 * Panel type for column settings.
 * @public
 * 
 */
sap.m.P13nPanelType.columns = "";

/**
 * Panel type for dimension and measure settings.
 * @public
 * 
 */
sap.m.P13nPanelType.dimeasure = "";

/**
 * Panel type for filtering.
 * @public
 * 
 */
sap.m.P13nPanelType.filter = "";

/**
 * Panel type for grouping.
 * @public
 * 
 */
sap.m.P13nPanelType.group = "";

/**
 * Panel type for sorting.
 * @public
 * 
 */
sap.m.P13nPanelType.sort = "";


// ---- sap.m.PageBackgroundDesign --------------------------------------------------------------------------

/**
 * Page background color when a List is set as the Page content.
 * @public
 * 
 */
sap.m.PageBackgroundDesign.List = "";

/**
 * A solid background color dependent on the theme.
 * @public
 * 
 */
sap.m.PageBackgroundDesign.Solid = "";

/**
 * Standard Page background color.
 * @public
 * 
 */
sap.m.PageBackgroundDesign.Standard = "";

/**
 * Transparent background for the page.
 * @public
 * 
 */
sap.m.PageBackgroundDesign.Transparent = "";


// ---- sap.m.PanelAccessibleRole --------------------------------------------------------------------------

/**
 * Represents the ARIA role <code>complementary</code>.
 * A section of the page, designed to be complementary to the main content at a similar level in the DOM hierarchy.
 * @public
 * 
 */
sap.m.PanelAccessibleRole.Complementary = "";

/**
 * Represents the ARIA role <code>Form</code>.
 * A landmark region that contains a collection of items and objects that, as a whole, create a form.
 * @public
 * 
 */
sap.m.PanelAccessibleRole.Form = "";

/**
 * Represents the ARIA role <code>Region</code>.
 * A section of a page, that is important enough to be included in a page summary or table of contents.
 * @public
 * 
 */
sap.m.PanelAccessibleRole.Region = "";


// ---- sap.m.PlacementType --------------------------------------------------------------------------

/**
 * Popover will be placed automatically at the reference control.
 * @public
 * 
 */
sap.m.PlacementType.Auto = "";

/**
 * Popover will be placed at the bottom of the reference control.
 * @public
 * 
 */
sap.m.PlacementType.Bottom = "";

/**
 * Popover will be placed at the right or left side of the reference control.
 * @public
 * 
 */
sap.m.PlacementType.Horizontal = "";

/**
 * Deprecated - use <code>sap.m.PlacementType.HorizontalPreferredLeft</code> type.
 * @deprecated Since version 1.36. Instead, use <code>sap.m.PlacementType.HorizontalPreferredLeft</code> type.
 * @public
 * @since 1.29
 * 
 */
sap.m.PlacementType.HorizontalPreferedLeft = "";

/**
 * Deprecated - use <code>sap.m.PlacementType.HorizontalPreferredRight</code> type.
 * @deprecated Since version 1.36. Instead, use <code>sap.m.PlacementType.HorizontalPreferredRight</code> type.
 * @public
 * @since 1.29
 * 
 */
sap.m.PlacementType.HorizontalPreferedRight = "";

/**
 * Popover will be placed at the right or left side of the reference control but will try to position on the
 * left side if the space is greater than the Popover's width.
 * @public
 * @since 1.36
 * 
 */
sap.m.PlacementType.HorizontalPreferredLeft = "";

/**
 * Popover will be placed at the right or left side of the reference control but will try to position on the
 * right side if the space is greater than the Popover's width.
 * @public
 * @since 1.36
 * 
 */
sap.m.PlacementType.HorizontalPreferredRight = "";

/**
 * Popover will be placed at the left side of the reference control.
 * @public
 * 
 */
sap.m.PlacementType.Left = "";

/**
 * Popover will be placed to the bottom of the reference control. If the available space is less than the Popover's height,
 * it will appear to the top of the same reference control bottom border.
 * @public
 * @since 1.38
 * 
 */
sap.m.PlacementType.PreferredBottomOrFlip = "";

/**
 * Popover will be placed to the left of the reference control. If the available space is less than the Popover's width,
 * it will appear to the right of the same reference control left border.
 * @public
 * @since 1.38
 * 
 */
sap.m.PlacementType.PreferredLeftOrFlip = "";

/**
 * Popover will be placed to the right of the reference control. If the available space is less than the Popover's width,
 * it will appear to the left of the same reference control right border.
 * @public
 * @since 1.38
 * 
 */
sap.m.PlacementType.PreferredRightOrFlip = "";

/**
 * Popover will be placed to the top of the reference control. If the available space is less than the Popover's height,
 * it will appear to the bottom of the same reference control top border.
 * @public
 * @since 1.38
 * 
 */
sap.m.PlacementType.PreferredTopOrFlip = "";

/**
 * Popover will be placed at the right side of the reference control.
 * @public
 * 
 */
sap.m.PlacementType.Right = "";

/**
 * Popover will be placed at the top of the reference control.
 * @public
 * 
 */
sap.m.PlacementType.Top = "";

/**
 * Popover will be placed at the top or bottom of the reference control.
 * @public
 * 
 */
sap.m.PlacementType.Vertical = "";

/**
 * Deprecated - use <code>sap.m.PlacementType.VerticalPreferredBottom</code> type.
 * @deprecated Since version 1.36. Instead, use <code>sap.m.PlacementType.VerticalPreferredBottom</code> type.
 * @public
 * @since 1.29
 * 
 */
sap.m.PlacementType.VerticalPreferedBottom = "";

/**
 * Deprecated - use <code>sap.m.PlacementType.VerticalPreferredTop</code> type.
 * @deprecated Since version 1.36. Instead, use <code>sap.m.PlacementType.VerticalPreferredTop</code> type.
 * @public
 * @since 1.29
 * 
 */
sap.m.PlacementType.VerticalPreferedTop = "";

/**
 * Popover will be placed at the top or bottom of the reference control but will try to position on the
 * bottom side if the space is greater than the Popover's height.
 * @public
 * @since 1.36
 * 
 */
sap.m.PlacementType.VerticalPreferredBottom = "";

/**
 * Popover will be placed at the top or bottom of the reference control but will try to position on the
 * top side if the space is greater than the Popover's height.
 * @public
 * @since 1.36
 * 
 */
sap.m.PlacementType.VerticalPreferredTop = "";


// ---- sap.m.PopinDisplay --------------------------------------------------------------------------

/**
 * Inside the table popin, header is displayed at the first line and cell content is displayed at the next line.
 * @public
 * 
 */
sap.m.PopinDisplay.Block = "";

/**
 * Inside the table popin, cell content is displayed next to the header in the same line. Note: If there is not enough space for the cell content then it jumps to the next line.
 * @public
 * 
 */
sap.m.PopinDisplay.Inline = "";

/**
 * Inside the table popin, only the cell content will be visible.
 * @public
 * @since 1.28
 * 
 */
sap.m.PopinDisplay.WithoutHeader = "";


// ---- sap.m.QuickViewGroupElementType --------------------------------------------------------------------------

/**
 * Displays an e-mail link
 * @public
 * 
 */
sap.m.QuickViewGroupElementType.email = "";

/**
 * Displayes a regular HTML link
 * @public
 * 
 */
sap.m.QuickViewGroupElementType.link = "";

/**
 * Displays a phone number link for direct dialing and an icon for sending a text message
 * @public
 * 
 */
sap.m.QuickViewGroupElementType.mobile = "";

/**
 * Dislpays a link for navigating to another QuickViewPage
 * @public
 * 
 */
sap.m.QuickViewGroupElementType.pageLink = "";

/**
 * Displays a phone number link for direct dialing
 * @public
 * 
 */
sap.m.QuickViewGroupElementType.phone = "";

/**
 * Dislpays text
 * @public
 * 
 */
sap.m.QuickViewGroupElementType.text = "";


// ---- sap.m.RatingIndicatorVisualMode --------------------------------------------------------------------------

/**
 * Values are rounded to the nearest integer value (e.g. 1.7 -> 2).
 * @public
 * 
 */
sap.m.RatingIndicatorVisualMode.Full = "";

/**
 * Values are rounded to the nearest half value (e.g. 1.7 -> 1.5).
 * @public
 * 
 */
sap.m.RatingIndicatorVisualMode.Half = "";


// ---- sap.m.ScreenSize --------------------------------------------------------------------------

/**
 * 1024px wide
 * @public
 * 
 */
sap.m.ScreenSize.Desktop = "";

/**
 * 768px wide
 * @public
 * 
 */
sap.m.ScreenSize.Large = "";

/**
 * 560px wide
 * @public
 * 
 */
sap.m.ScreenSize.Medium = "";

/**
 * 240px wide
 * @public
 * 
 */
sap.m.ScreenSize.Phone = "";

/**
 * 480px wide
 * @public
 * 
 */
sap.m.ScreenSize.Small = "";

/**
 * 600px wide
 * @public
 * 
 */
sap.m.ScreenSize.Tablet = "";

/**
 * 960px wide
 * @public
 * 
 */
sap.m.ScreenSize.XLarge = "";

/**
 * 320px wide
 * @public
 * 
 */
sap.m.ScreenSize.XSmall = "";

/**
 * 1120px wide
 * @public
 * 
 */
sap.m.ScreenSize.XXLarge = "";

/**
 * 240px wide
 * @public
 * 
 */
sap.m.ScreenSize.XXSmall = "";


// ---- sap.m.SelectListKeyboardNavigationMode --------------------------------------------------------------------------

/**
 * Keyboard navigation is delimited at the last item or first item of the list.
 * @public
 * 
 */
sap.m.SelectListKeyboardNavigationMode.Delimited = "";

/**
 * Keyboard navigation is disabled.
 * @public
 * 
 */
sap.m.SelectListKeyboardNavigationMode.None = "";


// ---- sap.m.SelectType --------------------------------------------------------------------------

/**
 * Will show the text.
 * @public
 * 
 */
sap.m.SelectType.Default = "";

/**
 * Will show only the specified icon.
 * @public
 * 
 */
sap.m.SelectType.IconOnly = "";


// ---- sap.m.semantic.SemanticRuleSetType --------------------------------------------------------------------------

/**
 * The default ruleset type, for which the Share Menu is always in the footer of the page.
 * @public
 * 
 */
sap.m.semantic.SemanticRuleSetType.Classic = "";

/**
 * Offers an optimized user experience, with displaying the Share Menu in the header, rather than the footer, for Fullscreen mode.
 * @public
 * 
 */
sap.m.semantic.SemanticRuleSetType.Optimized = "";


// ---- sap.m.Size --------------------------------------------------------------------------

/**
 * The size depends on the device it is running on. It is medium size for desktop and tablet and small size for phone.
 * @public
 * 
 */
sap.m.Size.Auto = "";

/**
 * Large size.
 * @public
 * 
 */
sap.m.Size.L = "";

/**
 * Medium size.
 * @public
 * 
 */
sap.m.Size.M = "";

/**
 * The width and height of the control are determined by the width and height of the container the control is placed in.
 * Please note: it is decided by the control whether or not sap.m.Size.Responsive is supported.
 * @public
 * @since 1.44.0
 * 
 */
sap.m.Size.Responsive = "";

/**
 * Small size.
 * @public
 * 
 */
sap.m.Size.S = "";

/**
 * Extra small size.
 * @public
 * 
 */
sap.m.Size.XS = "";


// ---- sap.m.SplitAppMode --------------------------------------------------------------------------

/**
 * Master area is hidden initially both in portrait and landscape. Master area can be opened by clicking on the top left corner button or swiping right. Swipe is only enabled on mobile devices. Master will keep the open state when changing the orientation of the device.
 * @public
 * 
 */
sap.m.SplitAppMode.HideMode = "";

/**
 * Master will be shown inside a Popover when in portrait mode
 * @public
 * 
 */
sap.m.SplitAppMode.PopoverMode = "";

/**
 * Master will automatically be hidden in portrait mode.
 * @public
 * 
 */
sap.m.SplitAppMode.ShowHideMode = "";

/**
 * Master will always be shown but in a compressed version when in portrait mode.
 * @public
 * 
 */
sap.m.SplitAppMode.StretchCompressMode = "";


// ---- sap.m.StandardTileType --------------------------------------------------------------------------

/**
 * Tile representing that something needs to be created
 * @public
 * 
 */
sap.m.StandardTileType.Create = "";

/**
 * Monitor tile
 * @public
 * 
 */
sap.m.StandardTileType.Monitor = "";

/**
 * Default type
 * @public
 * 
 */
sap.m.StandardTileType.None = "";


// ---- sap.m.StringFilterOperator --------------------------------------------------------------------------

/**
 * Checks if any word in the text starts with the search string.
 * @public
 * 
 */
sap.m.StringFilterOperator.AnyWordStartsWith = "";

/**
 * Checks if the text contains the search string.
 * @public
 * 
 */
sap.m.StringFilterOperator.Contains = "";

/**
 * Checks if the text is equal with the search string.
 * @public
 * 
 */
sap.m.StringFilterOperator.Equals = "";

/**
 * Checks if the text starts with the search string.
 * @public
 * 
 */
sap.m.StringFilterOperator.StartsWith = "";


// ---- sap.m.SwipeDirection --------------------------------------------------------------------------

/**
 * Both directions (left to right or right to left)
 * @public
 * 
 */
sap.m.SwipeDirection.Both = "";

/**
 * Swipe from left to right
 * @public
 * 
 */
sap.m.SwipeDirection.LeftToRight = "";

/**
 * Swipe from right to left.
 * @public
 * 
 */
sap.m.SwipeDirection.RightToLeft = "";


// ---- sap.m.SwitchType --------------------------------------------------------------------------

/**
 * Switch with accept and reject icons
 * @public
 * 
 */
sap.m.SwitchType.AcceptReject = "";

/**
 * Will show "ON" and "OFF" translated to the current language or the custom text if provided
 * @public
 * 
 */
sap.m.SwitchType.Default = "";


// ---- sap.m.ToolbarDesign --------------------------------------------------------------------------

/**
 * The toolbar can be inserted into other controls and if the design is "Auto" then it inherits the design from parent control.
 * @public
 * 
 */
sap.m.ToolbarDesign.Auto = "";

/**
 * The toolbar appears smaller than the regular size to show information(e.g: text, icon).
 * @public
 * 
 */
sap.m.ToolbarDesign.Info = "";

/**
 * The toolbar has a solid background. Its content will be rendered in a standard way.
 * @public
 * @since 1.22
 * 
 */
sap.m.ToolbarDesign.Solid = "";

/**
 * The toolbar and its content will be displayed transparent.
 * @public
 * 
 */
sap.m.ToolbarDesign.Transparent = "";


// ---- sap.m.ValueColor --------------------------------------------------------------------------

/**
 * Critical value color.
 * @public
 * 
 */
sap.m.ValueColor.Critical = "";

/**
 * Error value color.
 * @public
 * 
 */
sap.m.ValueColor.Error = "";

/**
 * Good value color.
 * @public
 * 
 */
sap.m.ValueColor.Good = "";

/**
 * Neutral value color.
 * @public
 * 
 */
sap.m.ValueColor.Neutral = "";


// ---- sap.m.VerticalPlacementType --------------------------------------------------------------------------

/**
 * Popover will be placed at the bottom of the reference control.
 * @public
 * 
 */
sap.m.VerticalPlacementType.Bottom = "";

/**
 * Popover will be placed at the top of the reference control.
 * @public
 * 
 */
sap.m.VerticalPlacementType.Top = "";

/**
 * Popover will be placed at the top or bottom of the reference control.
 * @public
 * 
 */
sap.m.VerticalPlacementType.Vertical = "";

