
// ---- sap.ui.comp --------------------------------------------------------------------------


// ---- sap.ui.comp.filterbar.FilterBar --------------------------------------------------------------------------

/**
 * Constructor for a new FilterBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPersistencyKey persistencyKey} : string (default: )</li>
 * <li>{@link #getAdvancedMode advancedMode} : boolean (default: false)</li>
 * <li>{@link #getExpandAdvancedArea expandAdvancedArea} : boolean (default: false)</li>
 * <li>{@link #getSearchEnabled searchEnabled} : boolean (default: true)</li>
 * <li>{@link #getFilterBarExpanded filterBarExpanded} : boolean (default: true)</li>
 * <li>{@link #getConsiderGroupTitle considerGroupTitle} : boolean (default: false)</li>
 * <li>{@link #getShowClearButton showClearButton} : boolean (default: false)</li>
 * <li>{@link #getShowRestoreButton showRestoreButton} : boolean (default: true)</li>
 * <li>{@link #getShowGoOnFB showGoOnFB} : boolean (default: true)</li>
 * <li>{@link #getShowRestoreOnFB showRestoreOnFB} : boolean (default: false)</li>
 * <li>{@link #getShowClearOnFB showClearOnFB} : boolean (default: false)</li>
 * <li>{@link #getShowGoButton showGoButton} : boolean</li>
 * <li>{@link #getDeltaVariantMode deltaVariantMode} : boolean (default: true)</li>
 * <li>{@link #getFilterContainerWidth filterContainerWidth} : string (default: 12rem)</li>
 * <li>{@link #getUseToolbar useToolbar} : boolean (default: true)</li>
 * <li>{@link #getHeader header} : string (default: )</li>
 * <li>{@link #getShowFilterConfiguration showFilterConfiguration} : boolean (default: true)</li>
 * <li>{@link #getUiState uiState} : sap.ui.comp.state.UIState</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getFilterItems filterItems} : sap.ui.comp.filterbar.FilterItem[]</li>
 * <li>{@link #getFilterGroupItems filterGroupItems} : sap.ui.comp.filterbar.FilterGroupItem[]</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getBasicSearch basicSearch} : (sap.ui.core.ID | sap.m.SearchField)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:reset reset} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeVariantSave beforeVariantSave} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeVariantFetch beforeVariantFetch} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterVariantLoad afterVariantLoad} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:filterChange filterChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:clear clear} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:initialise initialise} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:initialized initialized} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterVariantSave afterVariantSave} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:filtersDialogClosed filtersDialogClosed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:filtersDialogBeforeOpen filtersDialogBeforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:filtersDialogCancel filtersDialogCancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:filtersDialogSearch filtersDialogSearch} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:filtersDialogSearchForFilters filtersDialogSearchForFilters} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:assignedFiltersChanged assignedFiltersChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.Grid#constructor sap.ui.layout.Grid}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The control displays filters in a user-friendly manner to populate values for a query. The FilterBar consists of a row containing the
 *        {@link sap.ui.comp.variants.VariantManagement VariantManagement} control, the related buttons, and an area underneath displaying the
 *        filters. The filters are arranged in a logical row that is divided depending on the space available and the width of the filters. The
 *        area containing the filters can be hidden or shown using the Hide FilterBar / Show FilterBar button. The Go button triggers the search
 *        event, and the Filters button shows the filter dialog.<br>
 *        In this dialog, the consumer has full control over the FilterBar. The filters in this dialog are displayed in one column and organized
 *        in groups. The filter items of the <code>filterItems</code> aggregation are grouped in the Basic group . Each filter can be marked as
 *        visible in the FilterBar by selecting Add to FilterBar. In addition, the items in the <code>filterGroupItems</code> aggregation can be
 *        marked as part of the current variant. The FilterBar also supports a different UI layout when used inside a value help dialog. In this
 *        case the FilterBar consists of two logical areas, one containing the general search button and one the Advanced Search area. The
 *        Advanced Search is a collapsible area displaying the advanced filters in two columns.
 * @extends sap.ui.layout.Grid
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) design-time meta model
 * 
 */
sap.ui.comp.filterbar.FilterBar = function(sId,mSettings) {};
/**
 * This event is fired after a variant has been loaded and applied to the FilterBar. The event can be used to adapt custom filters
 * with data from the variant.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.context Context of the event. Can also be <code>null</code> or <code>undefined</code>
 * @param {boolean} oControlEvent.getParameters.executeOnSelect executeOnSelect indicates if the variant will trigger search
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.afterVariantLoad = function(oControlEvent) {  };

/**
 * This event is fired after a variant has been saved.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.afterVariantSave = function(oControlEvent) {  };

/**
 * This event is fired when the filters information has changed. It indicates specifically that the count of assigned filters may be
 * changed. One of the intended reaction to this event would be to call <code>retrieveFiltersWithValuesAsText</code> method.
 * @event
 * @since 1.38.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.assignedFiltersChanged = function(oControlEvent) {  };

/**
 * This event is fired before a variant is fetched.
 * @event
 * @since 1.28.13
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.beforeVariantFetch = function(oControlEvent) {  };

/**
 * This event is fired before a variant is saved. The event can be used to adapt the data of the custom filters, which will be saved
 * as variant later.
 * @event
 * 
 * @deprecated Since version 1.48.2. Replaced by the event <code>beforeVariantFetch</code>
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.context Context of the event. Can also be <code>null</code> or <code>undefined</code>
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.beforeVariantSave = function(oControlEvent) {  };

/**
 * This event is fired when the Cancel button on the Filters dialog is pressed and the variant is marked as dirty.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.cancel = function(oControlEvent) {  };

/**
 * This event is fired when the Clear button is pressed. The consumer has to clear all filters.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control[]} oControlEvent.getParameters.selectionSet Visible controls
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.clear = function(oControlEvent) {  };

/**
 * This event is fired when a filter or multiple filters has changed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.filterChange = function(oControlEvent) {  };

/**
 * This event is fired after the filters dialog is opened.
 * @event
 * @since 1.48.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.filtersDialogBeforeOpen = function(oControlEvent) {  };

/**
 * This event is fired when the Cancel button on the filters dialog is pressed.
 * @event
 * @since 1.48.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.filtersDialogCancel = function(oControlEvent) {  };

/**
 * This event is fired after the filters dialog is closed.
 * @event
 * @since 1.34.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.context Context of the event. Can also be <code>null</code> or <code>undefined</code>
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.filtersDialogClosed = function(oControlEvent) {  };

/**
 * This event is fired when the Go button on the filters dialog is pressed.
 * @event
 * @since 1.48.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.filtersDialogSearch = function(oControlEvent) {  };

/**
 * This event is fired when search field of the filter dialog is changed.
 * @event
 * @since 1.48.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.newValue Contains the entered search filed value
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.filtersDialogSearchForFilters = function(oControlEvent) {  };

/**
 * This event is fired when the FilterBar is initialized to indicate that the meta data are available.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.initialise = function(oControlEvent) {  };

/**
 * This event is fired after the FilterBar was initialized and the standard variant was obtained. Eventual navigation related actions
 * should be triggered by this event.
 * @event
 * @since 1.38.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.initialized = function(oControlEvent) {  };

/**
 * This event is fired when the Restore button is pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control[]} oControlEvent.getParameters.selectionSet Visible controls
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.reset = function(oControlEvent) {  };

/**
 * This event is fired when the Go button is pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control[]} oControlEvent.getParameters.selectionSet Visible controls
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.search = function(oControlEvent) {  };

/**
 * Adds a <code>FilterGroupItem</code> element to the aggregation <code>_parameters</code>.
 * 
 * @protected
 * @param {sap.ui.comp.filterbar.FilterGroupItem} oParameter adding a analytical parameter
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to this in order to allow method chaining
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype._addParameter = function(oParameter) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Clears an eventual error state on all filter.
 * 
 * @privatef
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype._clearErrorState = function() {  };

/**
 * Provides filter information for lazy instantiation. Is overwritten by the SmartFilterBar.
 * 
 * @protected
 * @returns {array} of filter information
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype._getFilterInformation = function() { return null; };

/**
 * Enables to add application specific content to the filters dialog. If the content was not yet added it will be added. The content will be set
 * to visible, all other filters dialog content will be set to invisible.
 * 
 * @public
 * @param {sap.ui.core.Control} oContent to be added; if empty, nothing is inserted.
 * @returns {sap.ui.core.Control} oContent added or <code>null</code> when filters dialog is not active.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.addFilterDialogContent = function(oContent) { return new sap.ui.core.Control(); };

/**
 * Adds some filterGroupItem to the aggregation {@link #getFilterGroupItems filterGroupItems}.
 * @param {sap.ui.comp.filterbar.FilterGroupItem}
 *            oFilterGroupItem the filterGroupItem to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.addFilterGroupItem = function(oFilterGroupItem) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Adds some filterItem to the aggregation {@link #getFilterItems filterItems}.
 * @param {sap.ui.comp.filterbar.FilterItem}
 *            oFilterItem the filterItem to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.48.0. Use aggregation <code>filterGroupItems</code> instead.
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.addFilterItem = function(oFilterItem) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Applies the variant.
 * 
 * @param {object} oVariant JSON object
 * @param {string} sContext Describes in which context the variant is applied. The context is passed on to the application via the
 *        afterVariantLoad event
 * @param {boolean} bInitial indicates if the apply was executed during the initialization phase.
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.applyVariant = function(oVariant,sContext,bInitial) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterVariantLoad afterVariantLoad} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired after a variant has been loaded and applied to the FilterBar. The event can be used to adapt custom filters
 * with data from the variant.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachAfterVariantLoad = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterVariantSave afterVariantSave} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired after a variant has been saved.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachAfterVariantSave = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:assignedFiltersChanged assignedFiltersChanged} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired when the filters information has changed. It indicates specifically that the count of assigned filters may be
 * changed. One of the intended reaction to this event would be to call <code>retrieveFiltersWithValuesAsText</code> method.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.38.0
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachAssignedFiltersChanged = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeVariantFetch beforeVariantFetch} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired before a variant is fetched.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.13
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachBeforeVariantFetch = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeVariantSave beforeVariantSave} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired before a variant is saved. The event can be used to adapt the data of the custom filters, which will be saved
 * as variant later.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 * @deprecated Since version 1.48.2. Replaced by the event <code>beforeVariantFetch</code>
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachBeforeVariantSave = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:cancel cancel} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired when the Cancel button on the Filters dialog is pressed and the variant is marked as dirty.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:clear clear} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired when the Clear button is pressed. The consumer has to clear all filters.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachClear = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:filterChange filterChange} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired when a filter or multiple filters has changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachFilterChange = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:filtersDialogBeforeOpen filtersDialogBeforeOpen} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired after the filters dialog is opened.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.48.0
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachFiltersDialogBeforeOpen = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:filtersDialogCancel filtersDialogCancel} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired when the Cancel button on the filters dialog is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.48.0
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachFiltersDialogCancel = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:filtersDialogClosed filtersDialogClosed} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired after the filters dialog is closed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.34.0
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachFiltersDialogClosed = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:filtersDialogSearch filtersDialogSearch} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired when the Go button on the filters dialog is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.48.0
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachFiltersDialogSearch = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:filtersDialogSearchForFilters filtersDialogSearchForFilters} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired when search field of the filter dialog is changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.48.0
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachFiltersDialogSearchForFilters = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:initialise initialise} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired when the FilterBar is initialized to indicate that the meta data are available.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachInitialise = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:initialized initialized} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired after the FilterBar was initialized and the standard variant was obtained. Eventual navigation related actions
 * should be triggered by this event.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.38.0
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachInitialized = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:reset reset} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired when the Restore button is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachReset = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:search search} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterBar</code> itself.
 * 
 * This event is fired when the Go button is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterBar</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.attachSearch = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Resets the current selection in the variant management control to standard.
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.clearVariantSelection = function() {  };

/**
 * Destroys all the filterGroupItems in the aggregation {@link #getFilterGroupItems filterGroupItems}.
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.destroyFilterGroupItems = function() { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Destroys all the filterItems in the aggregation {@link #getFilterItems filterItems}.
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.48.0. Use aggregation <code>filterGroupItems</code> instead.
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.destroyFilterItems = function() { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterVariantLoad afterVariantLoad} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachAfterVariantLoad = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterVariantSave afterVariantSave} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachAfterVariantSave = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:assignedFiltersChanged assignedFiltersChanged} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachAssignedFiltersChanged = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeVariantFetch beforeVariantFetch} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.13
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachBeforeVariantFetch = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeVariantSave beforeVariantSave} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.48.2. Replaced by the event <code>beforeVariantFetch</code>
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachBeforeVariantSave = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:cancel cancel} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachCancel = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:clear clear} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachClear = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:filterChange filterChange} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachFilterChange = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:filtersDialogBeforeOpen filtersDialogBeforeOpen} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachFiltersDialogBeforeOpen = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:filtersDialogCancel filtersDialogCancel} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachFiltersDialogCancel = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:filtersDialogClosed filtersDialogClosed} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachFiltersDialogClosed = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:filtersDialogSearch filtersDialogSearch} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachFiltersDialogSearch = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:filtersDialogSearchForFilters filtersDialogSearchForFilters} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachFiltersDialogSearchForFilters = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:initialise initialise} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachInitialise = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:initialized initialized} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachInitialized = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:reset reset} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachReset = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:search search} event of this <code>sap.ui.comp.filterbar.FilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.detachSearch = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Retrieves the control associated to the filter.
 * 
 * @public
 * @param {sap.ui.comp.filterbar.FilterItem} oFilterItem From the aggregations
 * @param {boolean} bConsiderParameters check also analytics parameter
 * @returns {sap.ui.core.Control} The corresponding control. If no match is found <code>null</code> is returned.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.determineControlByFilterItem = function(oFilterItem,bConsiderParameters) { return new sap.ui.core.Control(); };

/**
 * Retrieves the control based on the name and group name.
 * 
 * @public
 * @param {string} sName Name of the filter.
 * @param {string} sGroupName Group name of the filter; <code>null</code> for filter that belongs to basic group.
 * @returns {sap.ui.core.Control} The corresponding control, if no match is found, <code>null</code> is returned.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.determineControlByName = function(sName,sGroupName) { return new sap.ui.core.Control(); };

/**
 * Retrieves the filter corresponding to the filter name.
 * 
 * @public
 * @param {string} sName the control's name
 * @returns {sap.ui.comp.filterbar.FilterGroupItem} the corresponding filter item. If no match is found <code>null</code> will returned.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.determineFilterItemByName = function(sName) { return new sap.ui.comp.filterbar.FilterGroupItem(); };

/**
 * Retrieves the associated label based on the name and group name.
 * 
 * @public
 * @param {string} sName Name of the filter.
 * @param {string} sGroupName Group name of the filter; <code>null</code> for filter that belongs to basic group.
 * @returns {sap.m.Label} The associated Label, if no match is found, <code>null</code> is returned.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.determineLabelByName = function(sName,sGroupName) { return new sap.m.Label(); };

/**
 * Retrieves the mandatory filters.
 * 
 * @public
 * @returns {array} Of visible mandatory filters
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.determineMandatoryFilterItems = function() { return null; };

/**
 * Creates a new subclass of class sap.ui.comp.filterbar.FilterBar with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.layout.Grid.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.filterbar.FilterBar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Creates and returns the variant representation.
 * 
 * @returns {object} JSON object
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fetchVariant = function() { return new Object(); };

/**
 * Fires event {@link #event:afterVariantSave afterVariantSave} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fireAfterVariantSave = function(mParameters) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Fires event {@link #event:assignedFiltersChanged assignedFiltersChanged} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.38.0
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fireAssignedFiltersChanged = function(mParameters) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Fires event {@link #event:beforeVariantFetch beforeVariantFetch} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.13
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fireBeforeVariantFetch = function(mParameters) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Fires event {@link #event:cancel cancel} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fireCancel = function(mParameters) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Fires event {@link #event:clear clear} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control[]} [mParameters.selectionSet] Visible controls
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fireClear = function(mParameters) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Fires event {@link #event:filtersDialogBeforeOpen filtersDialogBeforeOpen} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.48.0
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fireFiltersDialogBeforeOpen = function(mParameters) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Fires event {@link #event:filtersDialogCancel filtersDialogCancel} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.48.0
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fireFiltersDialogCancel = function(mParameters) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Fires event {@link #event:filtersDialogClosed filtersDialogClosed} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.context] Context of the event. Can also be <code>null</code> or <code>undefined</code>
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.34.0
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fireFiltersDialogClosed = function(mParameters) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Fires event {@link #event:filtersDialogSearch filtersDialogSearch} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.48.0
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fireFiltersDialogSearch = function(mParameters) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Fires event {@link #event:filtersDialogSearchForFilters filtersDialogSearchForFilters} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.newValue] Contains the entered search filed value
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.48.0
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fireFiltersDialogSearchForFilters = function(mParameters) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Fires event {@link #event:initialise initialise} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fireInitialise = function(mParameters) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Fires event {@link #event:initialized initialized} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.38.0
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fireInitialized = function(mParameters) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Fires event {@link #event:reset reset} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control[]} [mParameters.selectionSet] Visible controls
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fireReset = function(mParameters) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Fires event {@link #event:search search} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control[]} [mParameters.selectionSet] Visible controls
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.fireSearch = function(mParameters) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Gets current value of property {@link #getAdvancedMode advancedMode}.
 * 
 * The advanced mode is only relevant for the value help scenario. UI representation is different from the standard FilterBar.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>advancedMode</code>
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getAdvancedMode = function() { return false; };

/**
 * Retrieves filters belonging to the current variant.
 * 
 * @public
 * @param {boolean} bConsiderOnlyVisibleFields Indicates that only visible filters are retrieved. <b>Note:</b> hidden filters are treated as
 *        visible filters.
 * @returns {array} filters Of the current variant
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getAllFilterItems = function(bConsiderOnlyVisibleFields) { return null; };

/**
 * ID of the element which is the current target of the association {@link #getBasicSearch basicSearch}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getBasicSearch = function() { return new sap.ui.core.ID(); };

/**
 * Determine the internal basic search field name.
 * 
 * @protected
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getBasicSearchName = function() {  };

/**
 * Determine the value of the basic search.
 * 
 * @protected
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getBasicSearchValue = function() {  };

/**
 * Gets current value of property {@link #getConsiderGroupTitle considerGroupTitle}.
 * 
 * If this property is set, then the label for filters will be prefixed with the group title.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>considerGroupTitle</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getConsiderGroupTitle = function() { return false; };

/**
 * Retrieves the current variant ID.
 * 
 * @public
 * @since 1.28.0
 * @returns {string} ID of the current variant
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getCurrentVariantId = function() { return ""; };

/**
 * Retrieves the current variant as selection variant for UI navigation
 * 
 * @public
 * @since 1.28.0
 * @deprecated As of version 1.48, replaced by {@link sap.ui.comp.filterbar.FilterBar.html#getUiState}
 * @param {boolean} bConsiderAllFilters also include empty/invisible fields filter data
 * @returns {string} JSON string representing the selection variant for UI navigation; <code>null</code> otherwise
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getDataSuiteFormat = function(bConsiderAllFilters) { return ""; };

/**
 * Gets current value of property {@link #getDeltaVariantMode deltaVariantMode}.
 * 
 * Stores the delta as compared to the standard variant.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>deltaVariantMode</code>
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getDeltaVariantMode = function() { return false; };

/**
 * Gets current value of property {@link #getFilterBarExpanded filterBarExpanded}.
 * 
 * Shows/hides the filter row.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>filterBarExpanded</code>
 * @since 1.26.1
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getFilterBarExpanded = function() { return false; };

/**
 * Gets current value of property {@link #getFilterContainerWidth filterContainerWidth}.
 * 
 * Sets the width of the filters container.
 * 
 * Default value is <code>12rem</code>.
 * @returns {string} Value of property <code>filterContainerWidth</code>
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getFilterContainerWidth = function() { return ""; };

/**
 * Returns the filter dialog content. <code>Node:</code>The original content is a {@link sap.ui.layout.form.Form Form}. The form may be
 * enhanced with a toolbar to enable the inner switch to an added custom content. Besides such operations, the original content should not be
 * manipulated in any way.
 * 
 * @public
 * @returns {array} of filters dialog content.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getFilterDialogContent = function() { return null; };

/**
 * Gets content of aggregation {@link #getFilterGroupItems filterGroupItems}.
 * 
 * Contains all FilterBar filters. <br>
 * <code>Note:</code>In case a filter has to be added to the basic group
 * <ul>
 * <li>the property <code>groupName</code> has to be set to the constant
 * <code>sap.ui.comp.filterbar.FilterBar.INTERNAL_GROUP</code></li>
 * <li>the property <code>groupLabel</code> will be handled internally and will be ignored, if set</li>
 * <li>the property <code>partOfCurrentVariant</code> has to be set to <code>true</code></li>
 * <li>if the property <code>visibleInFilterBar</code> is set to <code>true</code>, the property
 * <code>partOfCurrentVariant</code> will be set internally also to <code>true</code></li>
 * </ul>
 * 
 * @returns {sap.ui.comp.filterbar.FilterGroupItem[]}
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getFilterGroupItems = function() { return new Array(); };

/**
 * Returns all Filters belonging to the 'filterItems' aggregation. Since 1.48.0 this method will return all filters belonging to the BASIC group.
 * 
 * @public
 * @returns {sap.ui.comp.filterbar.FilterItem[]} An array of the removed elements (might be empty).
 * @deprecated Since version 1.48.0. Use aggregation <code>filterGroupItems</code> instead.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getFilterItems = function() { return new Array(); };

/**
 * Gets current value of property {@link #getHeader header}.
 * 
 * Specifies header text that is shown in the toolbar on the first position. This property is ignored, when <code>useToolbar</code>
 * is set to <code>false</code>.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>header</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getHeader = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.comp.filterbar.FilterBar.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.filterbar.FilterBar.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPersistencyKey persistencyKey}.
 * 
 * Key used to access personalization data. Only if the persistencyKey is provided, will the <code>VariantManagement</code> control
 * be used.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>persistencyKey</code>
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getPersistencyKey = function() { return ""; };

/**
 * Gets current value of property {@link #getSearchEnabled searchEnabled}.
 * 
 * Enables/disables the Search button.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>searchEnabled</code>
 * 
 * @deprecated Since version 1.32.0.
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getSearchEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getShowClearButton showClearButton}.
 * 
 * Handles visibility of the Clear button on the Filters dialog.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showClearButton</code>
 * @since 1.26.1
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getShowClearButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowClearOnFB showClearOnFB}.
 * 
 * Handles visibility of the Clear button on the FilterBar.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showClearOnFB</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getShowClearOnFB = function() { return false; };

/**
 * Gets current value of property {@link #getShowFilterConfiguration showFilterConfiguration}.
 * 
 * Handles visibility of the Filters button on the FilterBar.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showFilterConfiguration</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getShowFilterConfiguration = function() { return false; };

/**
 * Gets current value of property {@link #getShowGoButton showGoButton}.
 * 
 * Handles visibility of the Go button on the FilterBar.
 * 
 * @returns {boolean} Value of property <code>showGoButton</code>
 * @since 1.26.1
 * @deprecated Since version 1.28.0. Replaced by property <code>showGoOnFB</code>
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getShowGoButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowGoOnFB showGoOnFB}.
 * 
 * Handles visibility of the Go button on the FilterBar.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showGoOnFB</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getShowGoOnFB = function() { return false; };

/**
 * Gets current value of property {@link #getShowRestoreButton showRestoreButton}.
 * 
 * Handles visibility of the Restore button on the Filters dialog.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showRestoreButton</code>
 * @since 1.26.1
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getShowRestoreButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowRestoreOnFB showRestoreOnFB}.
 * 
 * Handles visibility of the Restore button on the FilterBar.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showRestoreOnFB</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getShowRestoreOnFB = function() { return false; };

/**
 * Retrieves the current <code>uiState</code> of the <code>FilterBar</code> control.<br>
 * The <code>uiState</code> represents the data suite format.
 * 
 * @public
 * @experimental
 * @since 1.48
 * @param {map} mProperties controls the API behavior
 * @param {boolean} mProperties.allFilters include empty/invisible fields filter data. Default is <code>false</code>
 * @returns {sap.ui.comp.state.UIState} object representing the ui-state. Currently only the SelectionVariant part is considered.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getUiState = function(mProperties) { return new sap.ui.comp.state.UIState(); };

/**
 * Gets current value of property {@link #getUseToolbar useToolbar}.
 * 
 * Determines what design should be used. Default is the design with the toolbar. The design with the toolbar is always used on
 * phones.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>useToolbar</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getUseToolbar = function() { return false; };

/**
 * Returns the associated VariantManagement control. The returned VariantManagement instance should not be cached or manipulated in any ways. It
 * should offer the application a convenient way to verify the dirty state and to check for page variant scenario. The method may return
 * <code>null</code> or a disabled VariantManagement control.
 * 
 * @public
 * @since 1.44.0
 * @returns {sap.ui.comp.variants.VariantManagement} the associated VariantManagement control.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.getVariantManagement = function() { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Hides the Go button on FilterBar. Allows to hide the Go-button for dedicated scenarios, like liveMode.
 * 
 * @protected
 * @since 1.40.4
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.hideGoButton = function() {  };

/**
 * Checks for the provided <code>sap.ui.comp.filterbar.FilterGroupItem</code> in the aggregation {@link #getFilterGroupItems filterGroupItems}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.comp.filterbar.FilterGroupItem}
 *           oFilterGroupItem The filterGroupItem whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.indexOfFilterGroupItem = function(oFilterGroupItem) { return 0; };

/**
 * Checks for the provided <code>sap.ui.comp.filterbar.FilterItem</code> in the aggregation {@link #getFilterItems filterItems}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.comp.filterbar.FilterItem}
 *           oFilterItem The filterItem whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @deprecated Since version 1.48.0. Use aggregation <code>filterGroupItems</code> instead.
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.indexOfFilterItem = function(oFilterItem) { return 0; };

/**
 * Returns the information whether the flag 'executeOnSelect' is set or not on current variant.
 * 
 * @public
 * @returns {boolean} Flag 'executeOnSelect' flag. If varaint management is disabled <code>false</code> is retuned.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.isCurrentVariantExecuteOnSelectEnabled = function() { return false; };

/**
 * Determines if the current variant is the standard variant
 * 
 * @public
 * @since 1.44.0
 * @returns {boolean| undefined} indicates if the current variant is the standard variant. In case the variant management does not exists,
 *          <code>undefined</code> is returned.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.isCurrentVariantStandard = function() { return false; };

/**
 * Determines if the filters dialog is opene.
 * 
 * @protected
 * @returns {boolean} State of filters dialog
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.isDialogOpen = function() { return false; };

/**
 * Registration of a callback function. The provided callback function is executed when a variant must be applied. The callback function will
 * receive the corresponding data set containing all relevant data in JSON, as initially provided by the callback for fetchData.
 * 
 * @public
 * @param {function} fCallBack Called when a variant must be applied
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to this in order to allow method chaining.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.registerApplyData = function(fCallBack) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Registration of a callback function. The provided callback function is executed when saving a variant is triggered and must provide all
 * relevant fields and values in JSON.
 * 
 * @public
 * @param {function} fCallBack Called when a variant must be fetched
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to this in order to allow method chaining.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.registerFetchData = function(fCallBack) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Registration of a callback function. The provided callback function is executed to obtain the filters with values.
 * 
 * @public
 * @since 1.26.1
 * @param {function} fCallBack Called when a variant must be applied
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to this in order to allow method chaining.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.registerGetFiltersWithValues = function(fCallBack) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Removes all entries in the aggregation filterGroupItems.
 * 
 * @public
 * @returns {sap.ui.comp.filterbar.FilterItem[]} An array of the removed elements (might be empty).
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.removeAllFilterGroupItems = function() { return new Array(); };

/**
 * Removes all entries in the aggregation filterItems.
 * 
 * @public
 * @returns {sap.ui.comp.filterbar.FilterItem[]} An array of the removed elements (might be empty).
 * @deprecated Since version 1.48.0. Use aggregation <code>filterGroupItems</code> instead.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.removeAllFilterItems = function() { return new Array(); };

/**
 * Removes all entries in the aggregations filterGroupItems, basicSearch
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.removeAllFilters = function() {  };

/**
 * Removes a filterGroupItem from the aggregation {@link #getFilterGroupItems filterGroupItems}.
 * 
 * @param {int | string | sap.ui.comp.filterbar.FilterGroupItem} vFilterGroupItem The filterGroupItem to remove or its index or id
 * @returns {sap.ui.comp.filterbar.FilterGroupItem} The removed filterGroupItem or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.removeFilterGroupItem = function(vFilterGroupItem) { return new sap.ui.comp.filterbar.FilterGroupItem(); };

/**
 * Removes a filterItem from the aggregation {@link #getFilterItems filterItems}.
 * 
 * @param {int | string | sap.ui.comp.filterbar.FilterItem} vFilterItem The filterItem to remove or its index or id
 * @returns {sap.ui.comp.filterbar.FilterItem} The removed filterItem or <code>null</code>
 * 
 * @deprecated Since version 1.48.0. Use aggregation <code>filterGroupItems</code> instead.
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.removeFilterItem = function(vFilterItem) { return new sap.ui.comp.filterbar.FilterItem(); };

/**
 * Restores the visibility of the Go button on FilterBar. The visibilty of the Go button will be set, according to the showGoOnFB property.
 * 
 * @protected
 * @since 1.40.4
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.restoreGoButton = function() {  };

/**
 * Retrieves the labels of all visible filters that belongs to the current variant and have an assigned value.
 * 
 * @public
 * @returns {array} Filter labels that represents relevant filters with values
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.retrieveFiltersWithValues = function() { return null; };

/**
 * Retrieves the labels of all visible filters that belongs to the current variant and have an assigned value.
 * 
 * @public
 * @returns {array} Filter labels that represents relevant filters with values
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.retrieveFiltersWithValuesAsText = function() { return null; };

/**
 * Executes the search event. Controls of all visible filters will be passed as event-parameters.
 * 
 * @public
 * @returns {boolean} indicates the validation result. true means no validation errors.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.search = function() { return false; };

/**
 * Sets a new value for property {@link #getAdvancedMode advancedMode}.
 * 
 * The advanced mode is only relevant for the value help scenario. UI representation is different from the standard FilterBar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bAdvancedMode New value for property <code>advancedMode</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setAdvancedMode = function(bAdvancedMode) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets the associated {@link #getBasicSearch basicSearch}.
 * @param {sap.ui.core.ID | sap.m.SearchField} oBasicSearch ID of an element which becomes the new target of this basicSearch association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setBasicSearch = function(oBasicSearch) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets a new value for property {@link #getConsiderGroupTitle considerGroupTitle}.
 * 
 * If this property is set, then the label for filters will be prefixed with the group title.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bConsiderGroupTitle New value for property <code>considerGroupTitle</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setConsiderGroupTitle = function(bConsiderGroupTitle) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets the height of the content area of the dialog. The passed dimension will be interpreted as 'px'.
 * 
 * @public
 * @params {number} nHeight the content height of the filters dialog
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setContentHeight = function() {  };

/**
 * Sets the width of the content area of the dialog. The passed dimension will be interpreted as 'px'.
 * 
 * @public
 * @params {number} nWidth the content width of the filters dialog
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setContentWidth = function() {  };

/**
 * Sets the current variant ID.
 * 
 * @public
 * @since 1.28.0
 * @param {string} sVariantId ID of the variant
 * @param {boolean} bDoNotApplyVariant If set to <code>true</code>, the <code>applyVariant</code> method is not executed yet. Relevant during
 *        navigation, when called before the initialise event has been executed.
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setCurrentVariantId = function(sVariantId,bDoNotApplyVariant) {  };

/**
 * Sets the selection variant for UI navigation to FilterBar.
 * 
 * @public
 * @since 1.28.0
 * @deprecated As of version 1.48, replaced by {@link sap.ui.comp.filterbar.FilterBar.html#setUiState}
 * @param {string} sSuiteData Represents the selection variants for UI navigation
 * @param {boolean} bReplace Replaces existing filter data
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setDataSuiteFormat = function(sSuiteData,bReplace) {  };

/**
 * Sets a new value for property {@link #getDeltaVariantMode deltaVariantMode}.
 * 
 * Stores the delta as compared to the standard variant.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bDeltaVariantMode New value for property <code>deltaVariantMode</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setDeltaVariantMode = function(bDeltaVariantMode) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets a new value for property {@link #getFilterBarExpanded filterBarExpanded}.
 * 
 * Shows/hides the filter row.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bFilterBarExpanded New value for property <code>filterBarExpanded</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.1
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setFilterBarExpanded = function(bFilterBarExpanded) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets a new value for property {@link #getFilterContainerWidth filterContainerWidth}.
 * 
 * Sets the width of the filters container.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>12rem</code>.
 * @param {string} sFilterContainerWidth New value for property <code>filterContainerWidth</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setFilterContainerWidth = function(sFilterContainerWidth) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets a new value for property {@link #getHeader header}.
 * 
 * Specifies header text that is shown in the toolbar on the first position. This property is ignored, when <code>useToolbar</code>
 * is set to <code>false</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sHeader New value for property <code>header</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setHeader = function(sHeader) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets a new value for property {@link #getPersistencyKey persistencyKey}.
 * 
 * Key used to access personalization data. Only if the persistencyKey is provided, will the <code>VariantManagement</code> control
 * be used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sPersistencyKey New value for property <code>persistencyKey</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setPersistencyKey = function(sPersistencyKey) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets a new value for property {@link #getSearchEnabled searchEnabled}.
 * 
 * Enables/disables the Search button.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bSearchEnabled New value for property <code>searchEnabled</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.32.0.
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setSearchEnabled = function(bSearchEnabled) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets a new value for property {@link #getShowClearButton showClearButton}.
 * 
 * Handles visibility of the Clear button on the Filters dialog.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowClearButton New value for property <code>showClearButton</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.1
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setShowClearButton = function(bShowClearButton) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets a new value for property {@link #getShowClearOnFB showClearOnFB}.
 * 
 * Handles visibility of the Clear button on the FilterBar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowClearOnFB New value for property <code>showClearOnFB</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setShowClearOnFB = function(bShowClearOnFB) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets a new value for property {@link #getShowFilterConfiguration showFilterConfiguration}.
 * 
 * Handles visibility of the Filters button on the FilterBar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowFilterConfiguration New value for property <code>showFilterConfiguration</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setShowFilterConfiguration = function(bShowFilterConfiguration) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets a new value for property {@link #getShowGoButton showGoButton}.
 * 
 * Handles visibility of the Go button on the FilterBar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bShowGoButton New value for property <code>showGoButton</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.1
 * @deprecated Since version 1.28.0. Replaced by property <code>showGoOnFB</code>
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setShowGoButton = function(bShowGoButton) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets a new value for property {@link #getShowGoOnFB showGoOnFB}.
 * 
 * Handles visibility of the Go button on the FilterBar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowGoOnFB New value for property <code>showGoOnFB</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setShowGoOnFB = function(bShowGoOnFB) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets a new value for property {@link #getShowRestoreButton showRestoreButton}.
 * 
 * Handles visibility of the Restore button on the Filters dialog.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowRestoreButton New value for property <code>showRestoreButton</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.1
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setShowRestoreButton = function(bShowRestoreButton) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets a new value for property {@link #getShowRestoreOnFB showRestoreOnFB}.
 * 
 * Handles visibility of the Restore button on the FilterBar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowRestoreOnFB New value for property <code>showRestoreOnFB</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setShowRestoreOnFB = function(bShowRestoreOnFB) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Sets the current <code>uiState</code> of the <code>FilterBar</code> control.<br>
 * The <code>uiState</code> represents the data suite format.
 * 
 * @public
 * @experimental
 * @since 1.48.2
 * @param {sap.ui.comp.state.UIState} object representing the ui-state. Currently only the SelectionVariant part is considered.
 * @param {map} mProperties controls the API behavior
 * @param {boolean} mProperties.replace Replaces existing filter data
 * @param {boolean} mProperties.strictMode defines the filter/parameter determination, based on the name.<BR>
 *        <ul>
 *        <li><code>true</code> determine filter based on name; in case no match is found, try to map to parameter (parameter has to start with
 *        P_ prefix.</li>
 *        <li><code>false</code> try to determine parameter based on name, P_ -prefix may be omitted; in case no match is found, try to map to
 *        a filter.</li>
 *        </ul>
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setUiState = function(object,mProperties) {  };

/**
 * Sets a new value for property {@link #getUseToolbar useToolbar}.
 * 
 * Determines what design should be used. Default is the design with the toolbar. The design with the toolbar is always used on
 * phones.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUseToolbar New value for property <code>useToolbar</code>
 * @returns {sap.ui.comp.filterbar.FilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.setUseToolbar = function(bUseToolbar) { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Creates and shows the filters dialog. This method may only be called when FilterBar is displayed and basically accessible. It may also only be
 * called when the filters dialog is currently not opened.
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.showFilterDialog = function() {  };

/**
 * This method will be called by the SmartVariantMangement and indicates, that the standard variant was obtained. It indicates, that the variant
 * management is fully initialized.
 * 
 * @protected
 * 
 */
sap.ui.comp.filterbar.FilterBar.prototype.variantsInitialized = function() {  };


// ---- sap.ui.comp.filterbar.FilterGroupItem --------------------------------------------------------------------------

/**
 * Constructor for a new FilterBar/FilterGroupItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getGroupTitle groupTitle} : string</li>
 * <li>{@link #getGroupName groupName} : string</li>
 * <li>{@link #getVisibleInAdvancedArea visibleInAdvancedArea} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.comp.filterbar.FilterItem#constructor sap.ui.comp.filterbar.FilterItem}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class Represents a filter belonging to a group other than basic.
 * @extends sap.ui.comp.filterbar.FilterItem
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.filterbar.FilterGroupItem = function(sId,mSettings) {};
/**
 * Destroys this element.
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterGroupItem.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.comp.filterbar.FilterGroupItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.comp.filterbar.FilterItem.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.filterbar.FilterGroupItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getGroupName groupName}.
 * 
 * Name of the group.
 * 
 * @returns {string} Value of property <code>groupName</code>
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterGroupItem.prototype.getGroupName = function() { return ""; };

/**
 * Gets current value of property {@link #getGroupTitle groupTitle}.
 * 
 * Title of the group.
 * 
 * @returns {string} Value of property <code>groupTitle</code>
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterGroupItem.prototype.getGroupTitle = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.comp.filterbar.FilterGroupItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.filterbar.FilterGroupItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sets a new value for property {@link #getGroupName groupName}.
 * 
 * Name of the group.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sGroupName New value for property <code>groupName</code>
 * @returns {sap.ui.comp.filterbar.FilterGroupItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterGroupItem.prototype.setGroupName = function(sGroupName) { return new sap.ui.comp.filterbar.FilterGroupItem(); };

/**
 * Setter for group title.
 * 
 * @public
 * @param {string} sValue Group title
 * 
 */
sap.ui.comp.filterbar.FilterGroupItem.prototype.setGroupTitle = function(sValue) {  };


// ---- sap.ui.comp.filterbar.FilterItem --------------------------------------------------------------------------

/**
 * Constructor for a new FilterBar/FilterItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getMandatory mandatory} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getLabelTooltip labelTooltip} : string</li>
 * <li>{@link #getPartOfCurrentVariant partOfCurrentVariant} : boolean (default: false)</li>
 * <li>{@link #getVisibleInFilterBar visibleInFilterBar} : boolean (default: true)</li>
 * <li>{@link #getHiddenFilter hiddenFilter} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getControl control} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class Represents a filter belonging to the basic group.
 * @extends sap.ui.core.Element
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.filterbar.FilterItem = function(sId,mSettings) {};
/**
 * This event is fired when one of the properties is changed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.propertyName Name of the changed property
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.change = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.ui.comp.filterbar.FilterItem</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.filterbar.FilterItem</code> itself.
 * 
 * This event is fired when one of the properties is changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.filterbar.FilterItem</code> itself
 * 
 * @returns {sap.ui.comp.filterbar.FilterItem} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterItem(); };

/**
 * Destroys this element.
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.destroy = function() {  };

/**
 * Destroys the control in the aggregation {@link #getControl control}.
 * @returns {sap.ui.comp.filterbar.FilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.destroyControl = function() { return new sap.ui.comp.filterbar.FilterItem(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.ui.comp.filterbar.FilterItem</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.filterbar.FilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.detachChange = function(fnFunction,oListener) { return new sap.ui.comp.filterbar.FilterItem(); };

/**
 * Creates a new subclass of class sap.ui.comp.filterbar.FilterItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.filterbar.FilterItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:change change} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.propertyName] Name of the changed property
 * 
 * @returns {sap.ui.comp.filterbar.FilterItem} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.fireChange = function(mParameters) { return new sap.ui.comp.filterbar.FilterItem(); };

/**
 * Gets content of aggregation {@link #getControl control}.
 * 
 * The control of the filter.
 * 
 * @returns {sap.ui.core.Control}
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.getControl = function() { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getHiddenFilter hiddenFilter}.
 * 
 * A hidden filter will never be visible in the filter bar control
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>hiddenFilter</code>
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.getHiddenFilter = function() { return false; };

/**
 * Gets current value of property {@link #getLabel label}.
 * 
 * Label of the filter.
 * 
 * @returns {string} Value of property <code>label</code>
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.getLabel = function() { return ""; };

/**
 * Gets current value of property {@link #getLabelTooltip labelTooltip}.
 * 
 * Tooltip for the filter.
 * 
 * @returns {string} Value of property <code>labelTooltip</code>
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.getLabelTooltip = function() { return ""; };

/**
 * Gets current value of property {@link #getMandatory mandatory}.
 * 
 * Mandatory flag.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>mandatory</code>
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.getMandatory = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.comp.filterbar.FilterItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.filterbar.FilterItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * Name of the filter. This is an identifier for the filter and has to be unique.
 * 
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.getName = function() { return ""; };

/**
 * Gets current value of property {@link #getPartOfCurrentVariant partOfCurrentVariant}.
 * 
 * Determines if a filter is part of the currently selected variant. <br>
 * b>Note:</b> This property can also be changed using the
 * <code>visibleInFilterBar<code> property and by user interaction in the Select Filters dialog or the variant handling.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>partOfCurrentVariant</code>
 * @since 1.26.1
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.getPartOfCurrentVariant = function() { return false; };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Visibility state of the filter.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.getVisible = function() { return false; };

/**
 * Gets current value of property {@link #getVisibleInFilterBar visibleInFilterBar}.
 * 
 * Controls the visibility of a filter item in the filter bar.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visibleInFilterBar</code>
 * @since 1.26.1
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.getVisibleInFilterBar = function() { return false; };

/**
 * Initializes the filter item.
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.init = function() {  };

/**
 * Sets the aggregated {@link #getControl control}.
 * @param {sap.ui.core.Control} oControl The control to set
 * @returns {sap.ui.comp.filterbar.FilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.setControl = function(oControl) { return new sap.ui.comp.filterbar.FilterItem(); };

/**
 * Sets a new value for property {@link #getHiddenFilter hiddenFilter}.
 * 
 * A hidden filter will never be visible in the filter bar control
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bHiddenFilter New value for property <code>hiddenFilter</code>
 * @returns {sap.ui.comp.filterbar.FilterItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.setHiddenFilter = function(bHiddenFilter) { return new sap.ui.comp.filterbar.FilterItem(); };

/**
 * Setter for label.
 * 
 * @public
 * @param {string} sValue Label text
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.setLabel = function(sValue) {  };

/**
 * Setter for tooltip.
 * 
 * @public
 * @param {string} sText Tooltip text
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.setLabelTooltip = function(sText) {  };

/**
 * Setter for mandatory flag.
 * 
 * @public
 * @param {string} bValue Mandatory state
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.setMandatory = function(bValue) {  };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * Name of the filter. This is an identifier for the filter and has to be unique.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.ui.comp.filterbar.FilterItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.setName = function(sName) { return new sap.ui.comp.filterbar.FilterItem(); };

/**
 * Sets a new value for property {@link #getPartOfCurrentVariant partOfCurrentVariant}.
 * 
 * Determines if a filter is part of the currently selected variant. <br>
 * b>Note:</b> This property can also be changed using the
 * <code>visibleInFilterBar<code> property and by user interaction in the Select Filters dialog or the variant handling.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bPartOfCurrentVariant New value for property <code>partOfCurrentVariant</code>
 * @returns {sap.ui.comp.filterbar.FilterItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.1
 * 
 * @public
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.setPartOfCurrentVariant = function(bPartOfCurrentVariant) { return new sap.ui.comp.filterbar.FilterItem(); };

/**
 * Setter for visible property.
 * 
 * @public
 * @param {boolean} bVisible State of visibility
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.setVisible = function(bVisible) {  };

/**
 * Setter for visible in filter bar.
 * 
 * @public
 * @since 1.26.1
 * @param {boolean} bVisible State of visibility in filter bar
 * 
 */
sap.ui.comp.filterbar.FilterItem.prototype.setVisibleInFilterBar = function(bVisible) {  };


// ---- sap.ui.comp.navpopover.ChangeHandlerType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.navpopover.ChangeHandlerType.toString = function() { return ""; };

// ---- sap.ui.comp.navpopover.FlexHandler --------------------------------------------------------------------------

/**
 * Handler for communication with layered repository (LRep).
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getInitialSnapshot initialSnapshot} : object</li>
 * <li>{@link #getSnapshotOfUserLayer snapshotOfUserLayer} : object</li>
 * <li>{@link #getSnapshotOfLayersWithoutUser snapshotOfLayersWithoutUser} : object</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class Communicates with the layered repository (LRep) and reacts on flexibility changes.
 * @constructor
 * @public
 * @since 1.46.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.navpopover.FlexHandler = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.comp.navpopover.FlexHandler with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.navpopover.FlexHandler.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getInitialSnapshot initialSnapshot}.
 * 
 * Initial state of all available actions. After the initial state has been set it cannot be changed again.
 * 
 * @returns {object} Value of property <code>initialSnapshot</code>
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.FlexHandler.prototype.getInitialSnapshot = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.ui.comp.navpopover.FlexHandler.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.navpopover.FlexHandler.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSnapshotOfLayersWithoutUser snapshotOfLayersWithoutUser}.
 * 
 * Changes made for all layers except USER layer.
 * 
 * @returns {object} Value of property <code>snapshotOfLayersWithoutUser</code>
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.FlexHandler.prototype.getSnapshotOfLayersWithoutUser = function() { return new Object(); };

/**
 * Gets current value of property {@link #getSnapshotOfUserLayer snapshotOfUserLayer}.
 * 
 * Changes made only for USER layer.
 * 
 * @returns {object} Value of property <code>snapshotOfUserLayer</code>
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.FlexHandler.prototype.getSnapshotOfUserLayer = function() { return new Object(); };

/**
 * Sets a new value for property {@link #getInitialSnapshot initialSnapshot}.
 * 
 * Initial state of all available actions. After the initial state has been set it cannot be changed again.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oInitialSnapshot New value for property <code>initialSnapshot</code>
 * @returns {sap.ui.comp.navpopover.FlexHandler} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.FlexHandler.prototype.setInitialSnapshot = function(oInitialSnapshot) { return new sap.ui.comp.navpopover.FlexHandler(); };

/**
 * Sets a new value for property {@link #getSnapshotOfLayersWithoutUser snapshotOfLayersWithoutUser}.
 * 
 * Changes made for all layers except USER layer.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oSnapshotOfLayersWithoutUser New value for property <code>snapshotOfLayersWithoutUser</code>
 * @returns {sap.ui.comp.navpopover.FlexHandler} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.FlexHandler.prototype.setSnapshotOfLayersWithoutUser = function(oSnapshotOfLayersWithoutUser) { return new sap.ui.comp.navpopover.FlexHandler(); };

/**
 * Sets a new value for property {@link #getSnapshotOfUserLayer snapshotOfUserLayer}.
 * 
 * Changes made only for USER layer.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oSnapshotOfUserLayer New value for property <code>snapshotOfUserLayer</code>
 * @returns {sap.ui.comp.navpopover.FlexHandler} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.FlexHandler.prototype.setSnapshotOfUserLayer = function(oSnapshotOfUserLayer) { return new sap.ui.comp.navpopover.FlexHandler(); };


// ---- sap.ui.comp.navpopover.LinkData --------------------------------------------------------------------------

/**
 * Constructor for a new navpopover/LinkData.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getHref href} : string</li>
 * <li>{@link #getTarget target} : string</li>
 * <li>{@link #getDescription description} : string (default: undefined)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getKey key} : string (default: undefined)</li>
 * <li>{@link #getPress press} : object</li>
 * <li>{@link #getIsSuperiorAction isSuperiorAction} : boolean</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class Stores display text together with a navigation target hyperlink.<br>
 *        The LinkData class is used by {@link sap.ui.comp.navpopover.SmartLink SmartLink} and
 *        {@link sap.ui.comp.navpopover.SemanticObjectController SemanticObjectController} to define the visible links on
 *        {@link sap.ui.comp.navpopover.NavigationPopover NavigationPopover}.
 * @extends sap.ui.core.Element
 * @constructor
 * @public
 * @since 1.28.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.navpopover.LinkData = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.comp.navpopover.LinkData with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.navpopover.LinkData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getDescription description}.
 * 
 * Description of the link.
 * 
 * Default value is <code>undefined</code>.
 * @returns {string} Value of property <code>description</code>
 * @since 1.42.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.getDescription = function() { return ""; };

/**
 * Gets current value of property {@link #getHref href}.
 * 
 * Destination link for a navigation operation in internal format. <b>Note</b>: The link will be encoded before it is shown in
 * external format using the <code>hrefForExternal</code> method of the CrossApplicationNavigation service.
 * 
 * @returns {string} Value of property <code>href</code>
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.getHref = function() { return ""; };

/**
 * Gets current value of property {@link #getIsSuperiorAction isSuperiorAction}.
 * 
 * Marker for superior action.
 * 
 * @returns {boolean} Value of property <code>isSuperiorAction</code>
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.getIsSuperiorAction = function() { return false; };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * Key of link.
 * 
 * Default value is <code>undefined</code>.
 * @returns {string} Value of property <code>key</code>
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.comp.navpopover.LinkData.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.navpopover.LinkData.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPress press}.
 * 
 * Callback for <code>press</code> event.
 * 
 * @returns {object} Value of property <code>press</code>
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.getPress = function() { return new Object(); };

/**
 * Gets current value of property {@link #getTarget target}.
 * 
 * The standard values for the <code>target</code> property are: _self, _top, _blank, _parent, _search. Alternatively, a frame name
 * can be entered. This property is only used if the <code>href</code> property is set.
 * 
 * @returns {string} Value of property <code>target</code>
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.getTarget = function() { return ""; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Text which can be displayed on the UI
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Describes whether the link should be visible on the screen.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.getVisible = function() { return false; };

/**
 * Sets a new value for property {@link #getDescription description}.
 * 
 * Description of the link.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sDescription New value for property <code>description</code>
 * @returns {sap.ui.comp.navpopover.LinkData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.42.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.setDescription = function(sDescription) { return new sap.ui.comp.navpopover.LinkData(); };

/**
 * Sets a new value for property {@link #getHref href}.
 * 
 * Destination link for a navigation operation in internal format. <b>Note</b>: The link will be encoded before it is shown in
 * external format using the <code>hrefForExternal</code> method of the CrossApplicationNavigation service.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sHref New value for property <code>href</code>
 * @returns {sap.ui.comp.navpopover.LinkData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.setHref = function(sHref) { return new sap.ui.comp.navpopover.LinkData(); };

/**
 * Sets a new value for property {@link #getIsSuperiorAction isSuperiorAction}.
 * 
 * Marker for superior action.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bIsSuperiorAction New value for property <code>isSuperiorAction</code>
 * @returns {sap.ui.comp.navpopover.LinkData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.setIsSuperiorAction = function(bIsSuperiorAction) { return new sap.ui.comp.navpopover.LinkData(); };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * Key of link.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.ui.comp.navpopover.LinkData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.setKey = function(sKey) { return new sap.ui.comp.navpopover.LinkData(); };

/**
 * Sets a new value for property {@link #getPress press}.
 * 
 * Callback for <code>press</code> event.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oPress New value for property <code>press</code>
 * @returns {sap.ui.comp.navpopover.LinkData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.setPress = function(oPress) { return new sap.ui.comp.navpopover.LinkData(); };

/**
 * Sets a new value for property {@link #getTarget target}.
 * 
 * The standard values for the <code>target</code> property are: _self, _top, _blank, _parent, _search. Alternatively, a frame name
 * can be entered. This property is only used if the <code>href</code> property is set.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTarget New value for property <code>target</code>
 * @returns {sap.ui.comp.navpopover.LinkData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.setTarget = function(sTarget) { return new sap.ui.comp.navpopover.LinkData(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Text which can be displayed on the UI
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.ui.comp.navpopover.LinkData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.setText = function(sText) { return new sap.ui.comp.navpopover.LinkData(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Describes whether the link should be visible on the screen.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.ui.comp.navpopover.LinkData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.LinkData.prototype.setVisible = function(bVisible) { return new sap.ui.comp.navpopover.LinkData(); };


// ---- sap.ui.comp.navpopover.NavigationPopover --------------------------------------------------------------------------

/**
 * Constructor for a new navpopover/NavigationPopover.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSemanticObjectName semanticObjectName} : string</li>
 * <li>{@link #getSemanticAttributes semanticAttributes} : object</li>
 * <li>{@link #getAppStateKey appStateKey} : string</li>
 * <li>{@link #getMainNavigationId mainNavigationId} : string</li>
 * <li>{@link #getAvailableActionsPersonalizationText availableActionsPersonalizationText} : string (default: undefined)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAvailableActions availableActions} : sap.ui.comp.navpopover.LinkData[]</li>
 * <li>{@link #getMainNavigation mainNavigation} : sap.ui.comp.navpopover.LinkData</li>
 * <li>{@link #getOwnNavigation ownNavigation} : sap.ui.comp.navpopover.LinkData</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSource source} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * <li>{@link #getExtraContent extraContent} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * <li>{@link #getComponent component} : (sap.ui.core.ID | sap.ui.core.Element)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:targetsObtained targetsObtained} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:availableActionsPersonalizationPress availableActionsPersonalizationPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ResponsivePopover#constructor sap.m.ResponsivePopover}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class The NavigationPopover control is used to present information in a specific format. <b>Note</b>: This control is used by the
 *        {@link sap.ui.comp.navpopover.NavigationPopoverHandler NavigationPopoverHandler} and must not be used manually.
 * @extends sap.m.ResponsivePopover
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.navpopover.NavigationPopover = function(sId,mSettings) {};
/**
 * This event is fired when personalization of <code>availableActions</code> is chosen.
 * @event
 * @since 1.44.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.availableActionsPersonalizationPress = function(oControlEvent) {  };

/**
 * This event is fired when a link is chosen.
 * @event
 * @since 1.28.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.text The UI text shown in the chosen link
 * @param {string} oControlEvent.getParameters.href The navigation target of the chosen link
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.navigate = function(oControlEvent) {  };

/**
 * The navigation targets that are shown.
 * @event
 * @since 1.28.0
 * @deprecated Since 1.40.0. The event <code>navigationTargetsObtained</code> is obsolete as target determination is no longer done
 *             by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination. The event
 *             <code>navigationTargetsObtained</code> is fired from NavigationPopoverHandler after navigation targets are
 *             determined.
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.targetsObtained = function(oControlEvent) {  };

/**
 * Adds some availableAction to the aggregation {@link #getAvailableActions availableActions}.
 * @param {sap.ui.comp.navpopover.LinkData}
 *            oAvailableAction the availableAction to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.addAvailableAction = function(oAvailableAction) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:availableActionsPersonalizationPress availableActionsPersonalizationPress} event of this <code>sap.ui.comp.navpopover.NavigationPopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.navpopover.NavigationPopover</code> itself.
 * 
 * This event is fired when personalization of <code>availableActions</code> is chosen.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.navpopover.NavigationPopover</code> itself
 * 
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.44.0
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.attachAvailableActionsPersonalizationPress = function(oData,fnFunction,oListener) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:navigate navigate} event of this <code>sap.ui.comp.navpopover.NavigationPopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.navpopover.NavigationPopover</code> itself.
 * 
 * This event is fired when a link is chosen.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.navpopover.NavigationPopover</code> itself
 * 
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.attachNavigate = function(oData,fnFunction,oListener) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:targetsObtained targetsObtained} event of this <code>sap.ui.comp.navpopover.NavigationPopover</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.navpopover.NavigationPopover</code> itself.
 * 
 * The navigation targets that are shown.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.navpopover.NavigationPopover</code> itself
 * 
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * @deprecated Since 1.40.0. The event <code>navigationTargetsObtained</code> is obsolete as target determination is no longer done
 *             by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination. The event
 *             <code>navigationTargetsObtained</code> is fired from NavigationPopoverHandler after navigation targets are
 *             determined.
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.attachTargetsObtained = function(oData,fnFunction,oListener) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Destroys all the availableActions in the aggregation {@link #getAvailableActions availableActions}.
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.destroyAvailableActions = function() { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Destroys the mainNavigation in the aggregation {@link #getMainNavigation mainNavigation}.
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.destroyMainNavigation = function() { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Destroys the ownNavigation in the aggregation {@link #getOwnNavigation ownNavigation}.
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * @deprecated Since 1.40.0. The property <code>ownNavigation</code> is obsolete as target determination is no longer done by
 *             NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.destroyOwnNavigation = function() { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:availableActionsPersonalizationPress availableActionsPersonalizationPress} event of this <code>sap.ui.comp.navpopover.NavigationPopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.detachAvailableActionsPersonalizationPress = function(fnFunction,oListener) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:navigate navigate} event of this <code>sap.ui.comp.navpopover.NavigationPopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.detachNavigate = function(fnFunction,oListener) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:targetsObtained targetsObtained} event of this <code>sap.ui.comp.navpopover.NavigationPopover</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * @deprecated Since 1.40.0. The event <code>navigationTargetsObtained</code> is obsolete as target determination is no longer done
 *             by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination. The event
 *             <code>navigationTargetsObtained</code> is fired from NavigationPopoverHandler after navigation targets are
 *             determined.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.detachTargetsObtained = function(fnFunction,oListener) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Creates a new subclass of class sap.ui.comp.navpopover.NavigationPopover with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ResponsivePopover.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:availableActionsPersonalizationPress availableActionsPersonalizationPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.44.0
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.fireAvailableActionsPersonalizationPress = function(mParameters) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Fires event {@link #event:navigate navigate} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.text] The UI text shown in the chosen link
 * @param {string} [mParameters.href] The navigation target of the chosen link
 * 
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.fireNavigate = function(mParameters) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Fires event {@link #event:targetsObtained targetsObtained} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * @deprecated Since 1.40.0. The event <code>navigationTargetsObtained</code> is obsolete as target determination is no longer done
 *             by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination. The event
 *             <code>navigationTargetsObtained</code> is fired from NavigationPopoverHandler after navigation targets are
 *             determined.
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.fireTargetsObtained = function(mParameters) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Gets current value of property {@link #getAppStateKey appStateKey}.
 * 
 * The application state key passed to retrieve the navigation targets.
 * 
 * @returns {string} Value of property <code>appStateKey</code>
 * @since 1.28.0
 * @deprecated Since 1.40.0. The property <code>appStateKey</code> is obsolete as target determination is no longer done by
 *             NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.getAppStateKey = function() { return ""; };

/**
 * Gets content of aggregation {@link #getAvailableActions availableActions}.
 * 
 * A list of available actions shown as links.
 * 
 * @returns {sap.ui.comp.navpopover.LinkData[]}
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.getAvailableActions = function() { return new Array(); };

/**
 * Gets current value of property {@link #getAvailableActionsPersonalizationText availableActionsPersonalizationText}.
 * 
 * Determines the text of personalization link. If this property is set to some string, choosing the personalization link will trigger
 * the <code>availableActionsPersonalizationPress</code> event. If this property is not set, the personalization link is not shown.
 * 
 * Default value is <code>undefined</code>.
 * @returns {string} Value of property <code>availableActionsPersonalizationText</code>
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.getAvailableActionsPersonalizationText = function() { return ""; };

/**
 * ID of the element which is the current target of the association {@link #getComponent component}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.getComponent = function() { return new sap.ui.core.ID(); };

/**
 * Returns link for direct navigation if the NavigationPopover has only <code>mainNavigation</code> or one <code>availableAction</code> and no
 * <code>extraContent</code>.
 * 
 * @returns {sap.m.Link | null}
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.getDirectLink = function() { return new sap.m.Link(); };

/**
 * ID of the element which is the current target of the association {@link #getExtraContent extraContent}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.getExtraContent = function() { return new sap.ui.core.ID(); };

/**
 * Gets content of aggregation {@link #getMainNavigation mainNavigation}.
 * 
 * The main navigation link. If <code>mainNavigationId</code> is not set then <code>text</code> of <code>mainNavigation</code>
 * is displayed. Otherwise the <code>mainNavigationId</code> is displayed.
 * 
 * @returns {sap.ui.comp.navpopover.LinkData}
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.getMainNavigation = function() { return new sap.ui.comp.navpopover.LinkData(); };

/**
 * Gets current value of property {@link #getMainNavigationId mainNavigationId}.
 * 
 * Sets the description of the main navigation link. If <code>mainNavigation</code> also contains an href description, then
 * <code>mainNavigationId</code> is displayed. If <code>mainNavigationId</code> is set to an empty string <code>''</code>,
 * neither description nor subtitle are displayed.
 * 
 * @returns {string} Value of property <code>mainNavigationId</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.getMainNavigationId = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.comp.navpopover.NavigationPopover.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getOwnNavigation ownNavigation}.
 * 
 * The navigation taking the user back to the source application.
 * 
 * @returns {sap.ui.comp.navpopover.LinkData}
 * @since 1.28.0
 * @deprecated Since 1.40.0. The property <code>ownNavigation</code> is obsolete as target determination is no longer done by
 *             NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.getOwnNavigation = function() { return new sap.ui.comp.navpopover.LinkData(); };

/**
 * Gets current value of property {@link #getSemanticAttributes semanticAttributes}.
 * 
 * Describes the semantic attributes. The attribute has to be a map.
 * 
 * @returns {object} Value of property <code>semanticAttributes</code>
 * @since 1.28.0
 * @deprecated Since 1.40.0. The property <code>semanticAttributes</code> is obsolete as target determination is no longer done by
 *             NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.getSemanticAttributes = function() { return new Object(); };

/**
 * Gets current value of property {@link #getSemanticObjectName semanticObjectName}.
 * 
 * The name of the semantic object.
 * 
 * @returns {string} Value of property <code>semanticObjectName</code>
 * @since 1.28.0
 * @deprecated Since 1.40.0. The property <code>semanticObjectName</code> is obsolete as target determination is no longer done by
 *             NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.getSemanticObjectName = function() { return ""; };

/**
 * ID of the element which is the current target of the association {@link #getSource source}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.getSource = function() { return new sap.ui.core.ID(); };

/**
 * Checks for the provided <code>sap.ui.comp.navpopover.LinkData</code> in the aggregation {@link #getAvailableActions availableActions}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.comp.navpopover.LinkData}
 *           oAvailableAction The availableAction whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.indexOfAvailableAction = function(oAvailableAction) { return 0; };

/**
 * Inserts a availableAction into the aggregation {@link #getAvailableActions availableActions}.
 * 
 * @param {sap.ui.comp.navpopover.LinkData}
 *            oAvailableAction the availableAction to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the availableAction should be inserted at; for
 *              a negative value of <code>iIndex</code>, the availableAction is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the availableAction is inserted at
 *              the last position
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.insertAvailableAction = function(oAvailableAction,iIndex) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Removes all the controls from the aggregation {@link #getAvailableActions availableActions}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.comp.navpopover.LinkData[]} An array of the removed elements (might be empty)
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.removeAllAvailableActions = function() { return new Array(); };

/**
 * Removes a availableAction from the aggregation {@link #getAvailableActions availableActions}.
 * 
 * @param {int | string | sap.ui.comp.navpopover.LinkData} vAvailableAction The availableAction to remove or its index or id
 * @returns {sap.ui.comp.navpopover.LinkData} The removed availableAction or <code>null</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.removeAvailableAction = function(vAvailableAction) { return new sap.ui.comp.navpopover.LinkData(); };

/**
 * Determines the potential navigation targets for the semantical object and visualize the popover.
 * 
 * @param {string} sSemanticObject name of the semantical object
 * @public
 * @deprecated Since 1.42.0. Target determination is no longer done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for
 *             target determination.
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.retrieveNavTargets = function(sSemanticObject) {  };

/**
 * Sets a new value for property {@link #getAppStateKey appStateKey}.
 * 
 * The application state key passed to retrieve the navigation targets.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sAppStateKey New value for property <code>appStateKey</code>
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * @deprecated Since 1.40.0. The property <code>appStateKey</code> is obsolete as target determination is no longer done by
 *             NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.setAppStateKey = function(sAppStateKey) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Sets a new value for property {@link #getAvailableActionsPersonalizationText availableActionsPersonalizationText}.
 * 
 * Determines the text of personalization link. If this property is set to some string, choosing the personalization link will trigger
 * the <code>availableActionsPersonalizationPress</code> event. If this property is not set, the personalization link is not shown.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sAvailableActionsPersonalizationText New value for property <code>availableActionsPersonalizationText</code>
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.setAvailableActionsPersonalizationText = function(sAvailableActionsPersonalizationText) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Sets the associated {@link #getComponent component}.
 * @param {sap.ui.core.ID | sap.ui.core.Element} oComponent ID of an element which becomes the new target of this component association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.setComponent = function(oComponent) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Sets the associated {@link #getExtraContent extraContent}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oExtraContent ID of an element which becomes the new target of this extraContent association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.setExtraContent = function(oExtraContent) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Sets the aggregated {@link #getMainNavigation mainNavigation}.
 * @param {sap.ui.comp.navpopover.LinkData} oMainNavigation The mainNavigation to set
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.setMainNavigation = function(oMainNavigation) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Sets a new value for property {@link #getMainNavigationId mainNavigationId}.
 * 
 * Sets the description of the main navigation link. If <code>mainNavigation</code> also contains an href description, then
 * <code>mainNavigationId</code> is displayed. If <code>mainNavigationId</code> is set to an empty string <code>''</code>,
 * neither description nor subtitle are displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sMainNavigationId New value for property <code>mainNavigationId</code>
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.setMainNavigationId = function(sMainNavigationId) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Sets the aggregated {@link #getOwnNavigation ownNavigation}.
 * @param {sap.ui.comp.navpopover.LinkData} oOwnNavigation The ownNavigation to set
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * @deprecated Since 1.40.0. The property <code>ownNavigation</code> is obsolete as target determination is no longer done by
 *             NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.setOwnNavigation = function(oOwnNavigation) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Sets a new value for property {@link #getSemanticAttributes semanticAttributes}.
 * 
 * Describes the semantic attributes. The attribute has to be a map.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oSemanticAttributes New value for property <code>semanticAttributes</code>
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * @deprecated Since 1.40.0. The property <code>semanticAttributes</code> is obsolete as target determination is no longer done by
 *             NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.setSemanticAttributes = function(oSemanticAttributes) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Sets a new value for property {@link #getSemanticObjectName semanticObjectName}.
 * 
 * The name of the semantic object.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSemanticObjectName New value for property <code>semanticObjectName</code>
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * @deprecated Since 1.40.0. The property <code>semanticObjectName</code> is obsolete as target determination is no longer done by
 *             NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.setSemanticObjectName = function(sSemanticObjectName) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Sets the associated {@link #getSource source}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oSource ID of an element which becomes the new target of this source association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.navpopover.NavigationPopover} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.setSource = function(oSource) { return new sap.ui.comp.navpopover.NavigationPopover(); };

/**
 * Displays the popover. This method should be called, once all navigation targets are adapted by the application.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopover.prototype.show = function() {  };


// ---- sap.ui.comp.navpopover.NavigationPopoverHandler --------------------------------------------------------------------------

/**
 * Constructor for a new navpopover/NavigationPopoverHandler.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSemanticObject semanticObject} : string</li>
 * <li>{@link #getAdditionalSemanticObjects additionalSemanticObjects} : string[] (default: [])</li>
 * <li>{@link #getSemanticObjectController semanticObjectController} : any</li>
 * <li>{@link #getFieldName fieldName} : string</li>
 * <li>{@link #getSemanticObjectLabel semanticObjectLabel} : string</li>
 * <li>{@link #getMapFieldToSemanticObject mapFieldToSemanticObject} : boolean (default: true)</li>
 * <li>{@link #getSemanticAttributes semanticAttributes} : object</li>
 * <li>{@link #getContactAnnotationPath contactAnnotationPath} : string (default: undefined)</li>
 * <li>{@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getControl control} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:beforePopoverOpens beforePopoverOpens} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:navigationTargetsObtained navigationTargetsObtained} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:innerNavigate innerNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class The NavigationPopoverHandler control determines target navigations for a semantic object and shows them together with further
 *        information in a Popover. Target navigations are determined via the
 *        {@link sap.ushell.services.CrossApplicationNavigation CrossApplicationNavigation} service of the unified shell.
 * @extends sap.ui.base.ManagedObject
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler = function(sId,mSettings) {};
/**
 * Event is fired before the navigation popover opens and before navigation target links are getting retrieved. Event can be used to
 * change the parameters used to retrieve the navigation targets. In case of NavigationPopoverHandler, the
 * <code>beforePopoverOpens</code> is fired after the link has been clicked.
 * @event
 * @since 1.36.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.semanticObject The semantic object for which the navigation targets will be retrieved.
 * @param {object} oControlEvent.getParameters.semanticAttributes Map containing the semantic attributes calculated from the binding that will be used to retrieve the navigation targets.
 * @param {object} oControlEvent.getParameters.semanticAttributesOfSemanticObjects A map of semantic objects for which the navigation targets will be retrieved and it's semantic attributes calculated from
 * the binding context. The semantic attributes will be used as parameters in order to retrieve the navigation targets.
 * @param {function} oControlEvent.getParameters.setSemanticAttributes This callback function enables you to define a changed semantic attributes map. Signatures:
 * <code>setSemanticAttributes(oSemanticAttributesMap)</code> Parameter:
 * <ul>
 * <li>{object} oSemanticAttributesMap New map containing the semantic attributes</li>
 * <li>{string} sSemanticObject Semantic Object for which the oSemanticAttributesMap belongs</li>
 * </ul>
 * @param {function} oControlEvent.getParameters.setAppStateKey This callback function sets an application state key that is used over the cross-application navigation. Signatures:
 * <code>setAppStateKey(sAppStateKey)</code> Parameter:
 * <ul>
 * <li>{string} sAppStateKey</li>
 * </ul>
 * @param {string} oControlEvent.getParameters.originalId The ID of the NavigationPopoverHandler.
 * @param {function} oControlEvent.getParameters.open This callback function triggers the retrieval of navigation targets and leads to the opening of the navigation popover.
 * Signatures: <code>open()</code> If the <code>beforePopoverOpens</code> has been registered, the <code>open</code>
 * function has to be called manually in order to open the navigation popover.
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.beforePopoverOpens = function(oControlEvent) {  };

/**
 * This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
 * left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.
 * @event
 * @since 1.36.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.text The UI text shown in the clicked link.
 * @param {string} oControlEvent.getParameters.href The navigation target of the clicked link.
 * @param {string} oControlEvent.getParameters.semanticObject The semantic object used to retrieve this target.
 * @param {object} oControlEvent.getParameters.semanticAttributes Map containing the semantic attributes used to retrieve this target.
 * @param {string} oControlEvent.getParameters.originalId The ID of the NavigationPopoverHandler.
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.innerNavigate = function(oControlEvent) {  };

/**
 * After the navigation targets are retrieved, <code>navigationTargetsObtained</code> is fired and provides the possibility to
 * change the targets.
 * @event
 * @since 1.36.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.comp.navpopover.LinkData} oControlEvent.getParameters.mainNavigation The main navigation object.
 * @param {sap.ui.comp.navpopover.LinkData[]} oControlEvent.getParameters.actions Array of available navigation target objects.
 * @param {sap.ui.comp.navpopover.LinkData} oControlEvent.getParameters.ownNavigation The navigation object for the own application. This navigation option is by default not visible on the popover.
 * @param {sap.ui.layout.form.SimpleForm[]} oControlEvent.getParameters.popoverForms Array containing contact data.
 * @param {string} oControlEvent.getParameters.semanticObject The semantic object for which the navigation targets have been retrieved.
 * @param {object} oControlEvent.getParameters.semanticAttributes Map containing the semantic attributes.
 * @param {string} oControlEvent.getParameters.originalId The ID of the NavigationPopoverHandler.
 * @param {function} oControlEvent.getParameters.show This callback function shows the actual navigation popover. If the <code>navigationTargetsObtained</code> has been
 * registered, the <code>show</code> function has to be called manually in order to open the navigation popover. Signatures:
 * <code>show()</code>
 * <ul>
 * <li><code>show(oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
 * <ul>
 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
 * remain.</li>
 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
 * object still remains.</li>
 * </ul>
 * </li>
 * <li><code>show(sMainNavigationId, oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
 * <ul>
 * <li>{string | undefined} sMainNavigationId The visible description for the main navigation link. With <code>''</code>,
 * both the description and subtitle will be removed. With <code>undefined</code>, the description is calculated using the
 * binding context of a given source object (for example <code>SmartLink</code> control).</li>
 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
 * remain.</li>
 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
 * object still remains.</li>
 * </ul>
 * </li>
 * </ul>
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.navigationTargetsObtained = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforePopoverOpens beforePopoverOpens} event of this <code>sap.ui.comp.navpopover.NavigationPopoverHandler</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.navpopover.NavigationPopoverHandler</code> itself.
 * 
 * Event is fired before the navigation popover opens and before navigation target links are getting retrieved. Event can be used to
 * change the parameters used to retrieve the navigation targets. In case of NavigationPopoverHandler, the
 * <code>beforePopoverOpens</code> is fired after the link has been clicked.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.navpopover.NavigationPopoverHandler</code> itself
 * 
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.36.0
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.attachBeforePopoverOpens = function(oData,fnFunction,oListener) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:innerNavigate innerNavigate} event of this <code>sap.ui.comp.navpopover.NavigationPopoverHandler</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.navpopover.NavigationPopoverHandler</code> itself.
 * 
 * This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
 * left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.navpopover.NavigationPopoverHandler</code> itself
 * 
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.36.0
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.attachInnerNavigate = function(oData,fnFunction,oListener) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:navigationTargetsObtained navigationTargetsObtained} event of this <code>sap.ui.comp.navpopover.NavigationPopoverHandler</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.navpopover.NavigationPopoverHandler</code> itself.
 * 
 * After the navigation targets are retrieved, <code>navigationTargetsObtained</code> is fired and provides the possibility to
 * change the targets.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.navpopover.NavigationPopoverHandler</code> itself
 * 
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.36.0
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.attachNavigationTargetsObtained = function(oData,fnFunction,oListener) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforePopoverOpens beforePopoverOpens} event of this <code>sap.ui.comp.navpopover.NavigationPopoverHandler</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.detachBeforePopoverOpens = function(fnFunction,oListener) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:innerNavigate innerNavigate} event of this <code>sap.ui.comp.navpopover.NavigationPopoverHandler</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.detachInnerNavigate = function(fnFunction,oListener) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:navigationTargetsObtained navigationTargetsObtained} event of this <code>sap.ui.comp.navpopover.NavigationPopoverHandler</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.detachNavigationTargetsObtained = function(fnFunction,oListener) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Creates a new subclass of class sap.ui.comp.navpopover.NavigationPopoverHandler with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:beforePopoverOpens beforePopoverOpens} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.semanticObject] The semantic object for which the navigation targets will be retrieved.
 * @param {object} [mParameters.semanticAttributes] Map containing the semantic attributes calculated from the binding that will be used to retrieve the navigation targets.
 * @param {object} [mParameters.semanticAttributesOfSemanticObjects] A map of semantic objects for which the navigation targets will be retrieved and it's semantic attributes calculated from
 * the binding context. The semantic attributes will be used as parameters in order to retrieve the navigation targets.
 * @param {function} [mParameters.setSemanticAttributes] This callback function enables you to define a changed semantic attributes map. Signatures:
 * <code>setSemanticAttributes(oSemanticAttributesMap)</code> Parameter:
 * <ul>
 * <li>{object} oSemanticAttributesMap New map containing the semantic attributes</li>
 * <li>{string} sSemanticObject Semantic Object for which the oSemanticAttributesMap belongs</li>
 * </ul>
 * @param {function} [mParameters.setAppStateKey] This callback function sets an application state key that is used over the cross-application navigation. Signatures:
 * <code>setAppStateKey(sAppStateKey)</code> Parameter:
 * <ul>
 * <li>{string} sAppStateKey</li>
 * </ul>
 * @param {string} [mParameters.originalId] The ID of the NavigationPopoverHandler.
 * @param {function} [mParameters.open] This callback function triggers the retrieval of navigation targets and leads to the opening of the navigation popover.
 * Signatures: <code>open()</code> If the <code>beforePopoverOpens</code> has been registered, the <code>open</code>
 * function has to be called manually in order to open the navigation popover.
 * 
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.36.0
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.fireBeforePopoverOpens = function(mParameters) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Fires event {@link #event:innerNavigate innerNavigate} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.text] The UI text shown in the clicked link.
 * @param {string} [mParameters.href] The navigation target of the clicked link.
 * @param {string} [mParameters.semanticObject] The semantic object used to retrieve this target.
 * @param {object} [mParameters.semanticAttributes] Map containing the semantic attributes used to retrieve this target.
 * @param {string} [mParameters.originalId] The ID of the NavigationPopoverHandler.
 * 
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.36.0
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.fireInnerNavigate = function(mParameters) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Fires event {@link #event:navigationTargetsObtained navigationTargetsObtained} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.comp.navpopover.LinkData} [mParameters.mainNavigation] The main navigation object.
 * @param {sap.ui.comp.navpopover.LinkData[]} [mParameters.actions] Array of available navigation target objects.
 * @param {sap.ui.comp.navpopover.LinkData} [mParameters.ownNavigation] The navigation object for the own application. This navigation option is by default not visible on the popover.
 * @param {sap.ui.layout.form.SimpleForm[]} [mParameters.popoverForms] Array containing contact data.
 * @param {string} [mParameters.semanticObject] The semantic object for which the navigation targets have been retrieved.
 * @param {object} [mParameters.semanticAttributes] Map containing the semantic attributes.
 * @param {string} [mParameters.originalId] The ID of the NavigationPopoverHandler.
 * @param {function} [mParameters.show] This callback function shows the actual navigation popover. If the <code>navigationTargetsObtained</code> has been
 * registered, the <code>show</code> function has to be called manually in order to open the navigation popover. Signatures:
 * <code>show()</code>
 * <ul>
 * <li><code>show(oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
 * <ul>
 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
 * remain.</li>
 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
 * object still remains.</li>
 * </ul>
 * </li>
 * <li><code>show(sMainNavigationId, oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
 * <ul>
 * <li>{string | undefined} sMainNavigationId The visible description for the main navigation link. With <code>''</code>,
 * both the description and subtitle will be removed. With <code>undefined</code>, the description is calculated using the
 * binding context of a given source object (for example <code>SmartLink</code> control).</li>
 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
 * remain.</li>
 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
 * object still remains.</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.36.0
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.fireNavigationTargetsObtained = function(mParameters) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Gets current value of property {@link #getAdditionalSemanticObjects additionalSemanticObjects}.
 * 
 * Names of additional semantic objects which are used to determine target navigations.
 * 
 * Default value is <code>[]</code>.
 * @returns {string[]} Value of property <code>additionalSemanticObjects</code>
 * @since 1.42.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.getAdditionalSemanticObjects = function() { return new Array(); };

/**
 * Gets current value of property {@link #getContactAnnotationPath contactAnnotationPath}.
 * 
 * Navigation property that points from the current to the related entity type where the com.sap.vocabularies.Communication.v1.Contact
 * annotation is defined, for example, <code>'to_Supplier'</code>. An empty string means that the related entity type is the
 * current one.
 * 
 * Default value is <code>undefined</code>.
 * @returns {string} Value of property <code>contactAnnotationPath</code>
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.getContactAnnotationPath = function() { return ""; };

/**
 * ID of the element which is the current target of the association {@link #getControl control}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.getControl = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization}.
 * 
 * Determines whether the personalization link is shown inside the NavigationPopover control.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enableAvailableActionsPersonalization</code>
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.getEnableAvailableActionsPersonalization = function() { return false; };

/**
 * Gets current value of property {@link #getFieldName fieldName}.
 * 
 * The metadata field name for this NavigationPopoverHandler control.
 * 
 * @returns {string} Value of property <code>fieldName</code>
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.getFieldName = function() { return ""; };

/**
 * Gets current value of property {@link #getMapFieldToSemanticObject mapFieldToSemanticObject}.
 * 
 * If set to <code>false</code>, the NavigationPopoverHandler control will not replace its field name with the according
 * <code>semanticObject</code> property during the calculation of the semantic attributes. This enables the usage of several
 * NavigationPopoverHandler on the same semantic object. *
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>mapFieldToSemanticObject</code>
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.getMapFieldToSemanticObject = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.comp.navpopover.NavigationPopoverHandler.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSemanticObject semanticObject}.
 * 
 * Name of semantic object which is used to determine target navigations.
 * 
 * @returns {string} Value of property <code>semanticObject</code>
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.getSemanticObject = function() { return ""; };

/**
 * Gets current value of property {@link #getSemanticObjectController semanticObjectController}.
 * 
 * The semantic object controller controls events for several NavigationPopoverHandler controls. If the controller is not set
 * manually, it tries to find a SemanticObjectController in its parent hierarchy.
 * 
 * @returns {any} Value of property <code>semanticObjectController</code>
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.getSemanticObjectController = function() { return null; };

/**
 * Gets current value of property {@link #getSemanticObjectLabel semanticObjectLabel}.
 * 
 * Shown title of semantic object.
 * 
 * @returns {string} Value of property <code>semanticObjectLabel</code>
 * @since 1.36.0
 * @deprecated As of version 1.40.0 Title section with <code>semanticObjectLabel</code> has been removed due to new UI design
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.getSemanticObjectLabel = function() { return ""; };

/**
 * Gets the current value assigned to the field with the NavigationPopoverHandler's semantic object name.
 * 
 * @returns {object} The semantic object's value.
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.getSemanticObjectValue = function() { return new Object(); };

/**
 * Opens the <code>Popover</code> with target navigations in an asynchronous manner. <b>Note:</b>If no content is to show, the
 * <code>Popover</code> will not open.
 * 
 * @returns {Promise} A <code>Promise</code> for asynchronous execution
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.openPopover = function() { return null; };

/**
 * Sets a new value for property {@link #getAdditionalSemanticObjects additionalSemanticObjects}.
 * 
 * Names of additional semantic objects which are used to determine target navigations.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>[]</code>.
 * @param {string[]} sAdditionalSemanticObjects New value for property <code>additionalSemanticObjects</code>
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @since 1.42.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.setAdditionalSemanticObjects = function(sAdditionalSemanticObjects) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Sets a new value for property {@link #getContactAnnotationPath contactAnnotationPath}.
 * 
 * Navigation property that points from the current to the related entity type where the com.sap.vocabularies.Communication.v1.Contact
 * annotation is defined, for example, <code>'to_Supplier'</code>. An empty string means that the related entity type is the
 * current one.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sContactAnnotationPath New value for property <code>contactAnnotationPath</code>
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.setContactAnnotationPath = function(sContactAnnotationPath) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Sets the associated {@link #getControl control}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oControl ID of an element which becomes the new target of this control association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.setControl = function(oControl) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Sets a new value for property {@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization}.
 * 
 * Determines whether the personalization link is shown inside the NavigationPopover control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableAvailableActionsPersonalization New value for property <code>enableAvailableActionsPersonalization</code>
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.setEnableAvailableActionsPersonalization = function(bEnableAvailableActionsPersonalization) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Sets a new value for property {@link #getFieldName fieldName}.
 * 
 * The metadata field name for this NavigationPopoverHandler control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sFieldName New value for property <code>fieldName</code>
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.setFieldName = function(sFieldName) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Sets a new value for property {@link #getMapFieldToSemanticObject mapFieldToSemanticObject}.
 * 
 * If set to <code>false</code>, the NavigationPopoverHandler control will not replace its field name with the according
 * <code>semanticObject</code> property during the calculation of the semantic attributes. This enables the usage of several
 * NavigationPopoverHandler on the same semantic object. *
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bMapFieldToSemanticObject New value for property <code>mapFieldToSemanticObject</code>
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.setMapFieldToSemanticObject = function(bMapFieldToSemanticObject) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Sets a new value for property {@link #getSemanticObject semanticObject}.
 * 
 * Name of semantic object which is used to determine target navigations.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSemanticObject New value for property <code>semanticObject</code>
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.setSemanticObject = function(sSemanticObject) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Sets a new value for property {@link #getSemanticObjectController semanticObjectController}.
 * 
 * The semantic object controller controls events for several NavigationPopoverHandler controls. If the controller is not set
 * manually, it tries to find a SemanticObjectController in its parent hierarchy.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oSemanticObjectController New value for property <code>semanticObjectController</code>
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.setSemanticObjectController = function(oSemanticObjectController) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };

/**
 * Sets a new value for property {@link #getSemanticObjectLabel semanticObjectLabel}.
 * 
 * Shown title of semantic object.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSemanticObjectLabel New value for property <code>semanticObjectLabel</code>
 * @returns {sap.ui.comp.navpopover.NavigationPopoverHandler} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * @deprecated As of version 1.40.0 Title section with <code>semanticObjectLabel</code> has been removed due to new UI design
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.NavigationPopoverHandler.prototype.setSemanticObjectLabel = function(sSemanticObjectLabel) { return new sap.ui.comp.navpopover.NavigationPopoverHandler(); };


// ---- sap.ui.comp.navpopover.SemanticObjectController --------------------------------------------------------------------------

/**
 * Constructor for a new navpopover/SemanticObjectController.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIgnoredFields ignoredFields} : string</li>
 * <li>{@link #getPrefetchNavigationTargets prefetchNavigationTargets} : boolean (default: false)</li>
 * <li>{@link #getFieldSemanticObjectMap fieldSemanticObjectMap} : object</li>
 * <li>{@link #getEntitySet entitySet} : string</li>
 * <li>{@link #getContactAnnotationPaths contactAnnotationPaths} : object</li>
 * <li>{@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization} : object</li>
 * <li>{@link #getMapFieldToSemanticObject mapFieldToSemanticObject} : boolean</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:navigationTargetsObtained navigationTargetsObtained} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforePopoverOpens beforePopoverOpens} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:prefetchDone prefetchDone} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sID] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The SemanticObjectController allows the user to register against semantic object navigation events as well as define semantic objects
 *        which should be ignored.
 * @extends sap.ui.core.Element
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController = function(sID,mSettings) {};
/**
 * Event is fired before the navigation popover opens and before navigation target links are retrieved. Event can be used to change
 * the parameters used to retrieve the navigation targets. In case of SmartLink, <code>beforePopoverOpens</code> is fired after the
 * link has been clicked.
 * @event
 * @since 1.28.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.semanticObject The semantic object for which the navigation targets will be retrieved.
 * @param {object} oControlEvent.getParameters.semanticAttributes Map containing the semantic attributes calculated from the binding that will be used to retrieve the navigation targets.
 * @param {object} oControlEvent.getParameters.semanticAttributesOfSemanticObjects A map of semantic objects for which the navigation targets will be retrieved and it's semantic attributes calculated from
 * the binding context. The semantic attributes will be used as parameters in order to retrieve the navigation targets.
 * @param {function} oControlEvent.getParameters.setSemanticAttributes This callback function enables you to define a changed semantic attributes map. Signatures:
 * <code>setSemanticAttributes(oSemanticAttributesMap)</code> Parameter:
 * <ul>
 * <li>{object} oSemanticAttributesMap New map containing the semantic attributes</li>
 * <li>{string} sSemanticObject Semantic Object for which the oSemanticAttributesMap belongs</li>
 * </ul>
 * @param {function} oControlEvent.getParameters.setAppStateKey This callback function sets an application state key that is used over the cross-application navigation. Signatures:
 * <code>setAppStateKey(sAppStateKey)</code> Parameter:
 * <ul>
 * <li>{string} sAppStateKey</li>
 * </ul>
 * @param {string} oControlEvent.getParameters.originalId The ID of the control that fires this event. If <code>beforePopoverOpens</code> is registered on the SmartLink,
 * <code>originalId</code> is the same as the event's source ID which is also the SmartLink's ID. If the
 * <code>beforePopoverOpens</code> is registered on the SemanticObjectController, <code>originalId</code> helps to
 * identify the original SmartLink control which triggered the event.
 * @param {function} oControlEvent.getParameters.open This callback function triggers the retrieval of navigation targets and leads to the opening of the navigation popover.
 * Signatures: <code>open()</code> If <code>beforePopoverOpens</code> has been registered, <code>open</code> function
 * has to be called manually in order to open the navigation popover.
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.beforePopoverOpens = function(oControlEvent) {  };

/**
 * This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
 * left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.
 * @event
 * @since 1.28.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.text The UI text shown in the clicked link.
 * @param {string} oControlEvent.getParameters.href The navigation target of the clicked link.
 * @param {string} oControlEvent.getParameters.semanticObject The semantic object used to retrieve this target.
 * @param {object} oControlEvent.getParameters.semanticAttributes Map containing the semantic attributes used to retrieve this target.
 * @param {string} oControlEvent.getParameters.originalId The ID of the control that fires this event. If <code>navigate</code> is registered on the SmartLink,
 * <code>originalId</code> is the same as the event's source ID which is the SmartLink's ID. If <code>navigate</code> is
 * registered on the SemanticObjectController, <code>originalId</code> helps to identify the original SmartLink control
 * which triggered the event.
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.navigate = function(oControlEvent) {  };

/**
 * After the navigation targets have been retrieved, <code>navigationTargetsObtained</code> is fired and makes it possible you to
 * change the targets.
 * @event
 * @since 1.28.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.comp.navpopover.LinkData} oControlEvent.getParameters.mainNavigation The main navigation object.
 * @param {sap.ui.comp.navpopover.LinkData[]} oControlEvent.getParameters.actions Array of available navigation target objects.
 * @param {sap.ui.comp.navpopover.LinkData} oControlEvent.getParameters.ownNavigation The navigation object for the own application. This navigation option is by default not visible on the popover.
 * @param {sap.ui.layout.form.SimpleForm[]} oControlEvent.getParameters.popoverForms Array containing contact data.
 * @param {string} oControlEvent.getParameters.semanticObject The semantic object for which the navigation targets have been retrieved.
 * @param {object} oControlEvent.getParameters.semanticAttributes Map containing the semantic attributes.
 * @param {string} oControlEvent.getParameters.originalId The ID of the control that fires this event. If <code>navigationTargetsObtained</code> is registered on the SmartLink,
 * <code>originalId</code> is the same as the event's source ID which is also the SmartLink's ID. If
 * <code>navigationTargetsObtained</code> is registered on the SemanticObjectController, <code>originalId</code> helps to
 * identify the original SmartLink control which triggered the event.
 * @param {function} oControlEvent.getParameters.show This callback function shows the actual navigation popover. If the <code>navigationTargetsObtained</code> has been
 * registered, the <code>show</code> function has to be called manually in order to open the navigation popover. Signatures:
 * <code>show()</code>
 * <ul>
 * <li><code>show(oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
 * <ul>
 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
 * remain.</li>
 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
 * object still remains.</li>
 * </ul>
 * </li>
 * <li><code>show(sMainNavigationId, oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
 * <ul>
 * <li>{string | undefined} sMainNavigationId The visible description for the main navigation link. With <code>''</code>,
 * both the description and subtitle will be removed. With <code>undefined</code>, the description is calculated using the
 * binding context of a given source object (for example <code>SmartLink</code> control).</li>
 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
 * remain.</li>
 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
 * object still remains.</li>
 * </ul>
 * </li>
 * </ul>
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.navigationTargetsObtained = function(oControlEvent) {  };

/**
 * If the property <code>prefetchNavigationTargets</code> is set to <code>true</code>, event <code>prefetchDone</code> is fired
 * after all navigation targets have been retrieved.
 * @event
 * @since 1.28.0
 * @deprecated Since 1.42.0. The event <code>prefetchDone</code> is obsolete because it depends on the property
 *             <code>prefetchNavigationTargets</code> which has been deprecated.
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.semanticObjects A map containing all semantic objects as keys for which at least one navigation target has been found. The value for each
 * semantic object key is an array containing the available actions found for this semantic object.
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.prefetchDone = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforePopoverOpens beforePopoverOpens} event of this <code>sap.ui.comp.navpopover.SemanticObjectController</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.navpopover.SemanticObjectController</code> itself.
 * 
 * Event is fired before the navigation popover opens and before navigation target links are retrieved. Event can be used to change
 * the parameters used to retrieve the navigation targets. In case of SmartLink, <code>beforePopoverOpens</code> is fired after the
 * link has been clicked.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.navpopover.SemanticObjectController</code> itself
 * 
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.attachBeforePopoverOpens = function(oData,fnFunction,oListener) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:navigate navigate} event of this <code>sap.ui.comp.navpopover.SemanticObjectController</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.navpopover.SemanticObjectController</code> itself.
 * 
 * This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
 * left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.navpopover.SemanticObjectController</code> itself
 * 
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.attachNavigate = function(oData,fnFunction,oListener) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:navigationTargetsObtained navigationTargetsObtained} event of this <code>sap.ui.comp.navpopover.SemanticObjectController</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.navpopover.SemanticObjectController</code> itself.
 * 
 * After the navigation targets have been retrieved, <code>navigationTargetsObtained</code> is fired and makes it possible you to
 * change the targets.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.navpopover.SemanticObjectController</code> itself
 * 
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.attachNavigationTargetsObtained = function(oData,fnFunction,oListener) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:prefetchDone prefetchDone} event of this <code>sap.ui.comp.navpopover.SemanticObjectController</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.navpopover.SemanticObjectController</code> itself.
 * 
 * If the property <code>prefetchNavigationTargets</code> is set to <code>true</code>, event <code>prefetchDone</code> is fired
 * after all navigation targets have been retrieved.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.navpopover.SemanticObjectController</code> itself
 * 
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * @deprecated Since 1.42.0. The event <code>prefetchDone</code> is obsolete because it depends on the property
 *             <code>prefetchNavigationTargets</code> which has been deprecated.
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.attachPrefetchDone = function(oData,fnFunction,oListener) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforePopoverOpens beforePopoverOpens} event of this <code>sap.ui.comp.navpopover.SemanticObjectController</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.detachBeforePopoverOpens = function(fnFunction,oListener) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:navigate navigate} event of this <code>sap.ui.comp.navpopover.SemanticObjectController</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.detachNavigate = function(fnFunction,oListener) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:navigationTargetsObtained navigationTargetsObtained} event of this <code>sap.ui.comp.navpopover.SemanticObjectController</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.detachNavigationTargetsObtained = function(fnFunction,oListener) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:prefetchDone prefetchDone} event of this <code>sap.ui.comp.navpopover.SemanticObjectController</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * @deprecated Since 1.42.0. The event <code>prefetchDone</code> is obsolete because it depends on the property
 *             <code>prefetchNavigationTargets</code> which has been deprecated.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.detachPrefetchDone = function(fnFunction,oListener) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Creates a new subclass of class sap.ui.comp.navpopover.SemanticObjectController with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:beforePopoverOpens beforePopoverOpens} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.semanticObject] The semantic object for which the navigation targets will be retrieved.
 * @param {object} [mParameters.semanticAttributes] Map containing the semantic attributes calculated from the binding that will be used to retrieve the navigation targets.
 * @param {object} [mParameters.semanticAttributesOfSemanticObjects] A map of semantic objects for which the navigation targets will be retrieved and it's semantic attributes calculated from
 * the binding context. The semantic attributes will be used as parameters in order to retrieve the navigation targets.
 * @param {function} [mParameters.setSemanticAttributes] This callback function enables you to define a changed semantic attributes map. Signatures:
 * <code>setSemanticAttributes(oSemanticAttributesMap)</code> Parameter:
 * <ul>
 * <li>{object} oSemanticAttributesMap New map containing the semantic attributes</li>
 * <li>{string} sSemanticObject Semantic Object for which the oSemanticAttributesMap belongs</li>
 * </ul>
 * @param {function} [mParameters.setAppStateKey] This callback function sets an application state key that is used over the cross-application navigation. Signatures:
 * <code>setAppStateKey(sAppStateKey)</code> Parameter:
 * <ul>
 * <li>{string} sAppStateKey</li>
 * </ul>
 * @param {string} [mParameters.originalId] The ID of the control that fires this event. If <code>beforePopoverOpens</code> is registered on the SmartLink,
 * <code>originalId</code> is the same as the event's source ID which is also the SmartLink's ID. If the
 * <code>beforePopoverOpens</code> is registered on the SemanticObjectController, <code>originalId</code> helps to
 * identify the original SmartLink control which triggered the event.
 * @param {function} [mParameters.open] This callback function triggers the retrieval of navigation targets and leads to the opening of the navigation popover.
 * Signatures: <code>open()</code> If <code>beforePopoverOpens</code> has been registered, <code>open</code> function
 * has to be called manually in order to open the navigation popover.
 * 
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.fireBeforePopoverOpens = function(mParameters) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Fires event {@link #event:navigate navigate} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.text] The UI text shown in the clicked link.
 * @param {string} [mParameters.href] The navigation target of the clicked link.
 * @param {string} [mParameters.semanticObject] The semantic object used to retrieve this target.
 * @param {object} [mParameters.semanticAttributes] Map containing the semantic attributes used to retrieve this target.
 * @param {string} [mParameters.originalId] The ID of the control that fires this event. If <code>navigate</code> is registered on the SmartLink,
 * <code>originalId</code> is the same as the event's source ID which is the SmartLink's ID. If <code>navigate</code> is
 * registered on the SemanticObjectController, <code>originalId</code> helps to identify the original SmartLink control
 * which triggered the event.
 * 
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.fireNavigate = function(mParameters) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Fires event {@link #event:navigationTargetsObtained navigationTargetsObtained} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.comp.navpopover.LinkData} [mParameters.mainNavigation] The main navigation object.
 * @param {sap.ui.comp.navpopover.LinkData[]} [mParameters.actions] Array of available navigation target objects.
 * @param {sap.ui.comp.navpopover.LinkData} [mParameters.ownNavigation] The navigation object for the own application. This navigation option is by default not visible on the popover.
 * @param {sap.ui.layout.form.SimpleForm[]} [mParameters.popoverForms] Array containing contact data.
 * @param {string} [mParameters.semanticObject] The semantic object for which the navigation targets have been retrieved.
 * @param {object} [mParameters.semanticAttributes] Map containing the semantic attributes.
 * @param {string} [mParameters.originalId] The ID of the control that fires this event. If <code>navigationTargetsObtained</code> is registered on the SmartLink,
 * <code>originalId</code> is the same as the event's source ID which is also the SmartLink's ID. If
 * <code>navigationTargetsObtained</code> is registered on the SemanticObjectController, <code>originalId</code> helps to
 * identify the original SmartLink control which triggered the event.
 * @param {function} [mParameters.show] This callback function shows the actual navigation popover. If the <code>navigationTargetsObtained</code> has been
 * registered, the <code>show</code> function has to be called manually in order to open the navigation popover. Signatures:
 * <code>show()</code>
 * <ul>
 * <li><code>show(oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
 * <ul>
 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
 * remain.</li>
 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
 * object still remains.</li>
 * </ul>
 * </li>
 * <li><code>show(sMainNavigationId, oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
 * <ul>
 * <li>{string | undefined} sMainNavigationId The visible description for the main navigation link. With <code>''</code>,
 * both the description and subtitle will be removed. With <code>undefined</code>, the description is calculated using the
 * binding context of a given source object (for example <code>SmartLink</code> control).</li>
 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
 * remain.</li>
 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
 * object still remains.</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.fireNavigationTargetsObtained = function(mParameters) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Fires event {@link #event:prefetchDone prefetchDone} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {object} [mParameters.semanticObjects] A map containing all semantic objects as keys for which at least one navigation target has been found. The value for each
 * semantic object key is an array containing the available actions found for this semantic object.
 * 
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * @deprecated Since 1.42.0. The event <code>prefetchDone</code> is obsolete because it depends on the property
 *             <code>prefetchNavigationTargets</code> which has been deprecated.
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.firePrefetchDone = function(mParameters) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Gets current value of property {@link #getContactAnnotationPaths contactAnnotationPaths}.
 * 
 * Navigation property that points from the current to the related entity type where the
 * <code>com.sap.vocabularies.Communication.v1.Contact</code> annotation is defined, for example,
 * <code> '\{"Supplier":"to_Supplier", "CompanyName":"to_Company"\}' </code>. An empty string means that the related entity type is
 * the current one.
 * 
 * @returns {object} Value of property <code>contactAnnotationPaths</code>
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.getContactAnnotationPaths = function() { return new Object(); };

/**
 * Gets current value of property {@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization}.
 * 
 * Determines whether the personalization link is shown inside the NavigationPopover control. For example,
 * <code> '\{"Supplier":false, "CompanyName":true\}' </code>.
 * 
 * @returns {object} Value of property <code>enableAvailableActionsPersonalization</code>
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.getEnableAvailableActionsPersonalization = function() { return new Object(); };

/**
 * Gets current value of property {@link #getEntitySet entitySet}.
 * 
 * The name of the entity set used. If <code>entitySet</code> has not been defined, the SemanticObjectController tries to retrieve
 * the name from its parents. <b>Note:</b> This is not a dynamic UI5 property.
 * 
 * @returns {string} Value of property <code>entitySet</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.getEntitySet = function() { return ""; };

/**
 * Gets current value of property {@link #getFieldSemanticObjectMap fieldSemanticObjectMap}.
 * 
 * Maps the field names to the related semantic objects. When accessing this property for the first time, the mapping will be
 * calculated from the metadata within the provided model.
 * 
 * @returns {object} Value of property <code>fieldSemanticObjectMap</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.getFieldSemanticObjectMap = function() { return new Object(); };

/**
 * Gets current value of property {@link #getIgnoredFields ignoredFields}.
 * 
 * Comma-separated list of field names that must not be displayed as links.
 * 
 * @returns {string} Value of property <code>ignoredFields</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.getIgnoredFields = function() { return ""; };

/**
 * Gets current value of property {@link #getMapFieldToSemanticObject mapFieldToSemanticObject}.
 * 
 * If set to <code>false</code>, the SmartLink control will not replace its field name with the according
 * <code>semanticObject</code> property during the calculation of the semantic attributes.
 * 
 * @returns {boolean} Value of property <code>mapFieldToSemanticObject</code>
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.getMapFieldToSemanticObject = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.comp.navpopover.SemanticObjectController.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPrefetchNavigationTargets prefetchNavigationTargets}.
 * 
 * If set to <code>true</code>, the SemanticObjectController will retrieve all navigation targets once and will disable links for
 * which no targets were found. Setting this value to <code>true</code> will trigger an additional roundtrip.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>prefetchNavigationTargets</code>
 * @since 1.28.0
 * @deprecated Since 1.42.0. The property <code>prefetchNavigationTargets</code> is obsolete as navigation targets are determined
 *             automatically. The SmartLink controls are re-rendered as soon as the asynchronous determination of navigation targets
 *             has been completed.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.getPrefetchNavigationTargets = function() { return false; };

/**
 * Checks if the given semantic object name has a navigation link. <b>Note</b>: this method returns a valid value only after the event
 * <code>prefetchDone</code> has been raised. The event <code>prefetchDone</code> is raised if the property
 * <code>prefetchNavigationTargets</code> is set to <code>true</code>.
 * 
 * @param {string} sSemanticObject
 * @returns {boolean} true if the semantic object has any navigation links
 * @public
 * @deprecated Since 1.42.0. The method <code>hasSemanticObjectLinks</code> is obsolete because it depends on the property
 *             <code>prefetchNavigationTargets</code> which has been deprecated.
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.hasSemanticObjectLinks = function(sSemanticObject) { return false; };

/**
 * Returns whether the given control has been registered by the SemanticObjectController.
 * 
 * @param {sap.ui.comp.navpopover.SmartLink | sap.ui.comp.navpopover.NavigationPopoverHandler} oControl
 * @returns {boolean}
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.isControlRegistered = function(oControl) { return false; };

/**
 * Adds the given control to the SemanticObjectController and registers all relevant events.
 * 
 * @param {sap.ui.comp.navpopover.SmartLink | sap.ui.comp.navpopover.NavigationPopoverHandler} oControl
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.registerControl = function(oControl) {  };

/**
 * Sets a new value for property {@link #getContactAnnotationPaths contactAnnotationPaths}.
 * 
 * Navigation property that points from the current to the related entity type where the
 * <code>com.sap.vocabularies.Communication.v1.Contact</code> annotation is defined, for example,
 * <code> '\{"Supplier":"to_Supplier", "CompanyName":"to_Company"\}' </code>. An empty string means that the related entity type is
 * the current one.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oContactAnnotationPaths New value for property <code>contactAnnotationPaths</code>
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.setContactAnnotationPaths = function(oContactAnnotationPaths) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Sets a new value for property {@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization}.
 * 
 * Determines whether the personalization link is shown inside the NavigationPopover control. For example,
 * <code> '\{"Supplier":false, "CompanyName":true\}' </code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oEnableAvailableActionsPersonalization New value for property <code>enableAvailableActionsPersonalization</code>
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.setEnableAvailableActionsPersonalization = function(oEnableAvailableActionsPersonalization) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Sets a new value for property {@link #getEntitySet entitySet}.
 * 
 * The name of the entity set used. If <code>entitySet</code> has not been defined, the SemanticObjectController tries to retrieve
 * the name from its parents. <b>Note:</b> This is not a dynamic UI5 property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sEntitySet New value for property <code>entitySet</code>
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.setEntitySet = function(sEntitySet) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Sets a new value for property {@link #getFieldSemanticObjectMap fieldSemanticObjectMap}.
 * 
 * Maps the field names to the related semantic objects. When accessing this property for the first time, the mapping will be
 * calculated from the metadata within the provided model.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oFieldSemanticObjectMap New value for property <code>fieldSemanticObjectMap</code>
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.setFieldSemanticObjectMap = function(oFieldSemanticObjectMap) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Sets a new value for property {@link #getIgnoredFields ignoredFields}.
 * 
 * Comma-separated list of field names that must not be displayed as links.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIgnoredFields New value for property <code>ignoredFields</code>
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.setIgnoredFields = function(sIgnoredFields) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Checks if the given SmartLink has to be enabled or disabled and sets the state.
 * 
 * @param {sap.ui.comp.navpopover.SmartLink} oSmartLink the SmartLink which should be enabled or disabled.
 * @public
 * @deprecated Since 1.42.0. The method <code>setIgnoredState</code> is obsolete as SmartLink is processing the internal state on its own.
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.setIgnoredState = function(oSmartLink) {  };

/**
 * Sets a new value for property {@link #getMapFieldToSemanticObject mapFieldToSemanticObject}.
 * 
 * If set to <code>false</code>, the SmartLink control will not replace its field name with the according
 * <code>semanticObject</code> property during the calculation of the semantic attributes.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bMapFieldToSemanticObject New value for property <code>mapFieldToSemanticObject</code>
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.setMapFieldToSemanticObject = function(bMapFieldToSemanticObject) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Sets a new value for property {@link #getPrefetchNavigationTargets prefetchNavigationTargets}.
 * 
 * If set to <code>true</code>, the SemanticObjectController will retrieve all navigation targets once and will disable links for
 * which no targets were found. Setting this value to <code>true</code> will trigger an additional roundtrip.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bPrefetchNavigationTargets New value for property <code>prefetchNavigationTargets</code>
 * @returns {sap.ui.comp.navpopover.SemanticObjectController} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * @deprecated Since 1.42.0. The property <code>prefetchNavigationTargets</code> is obsolete as navigation targets are determined
 *             automatically. The SmartLink controls are re-rendered as soon as the asynchronous determination of navigation targets
 *             has been completed.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.setPrefetchNavigationTargets = function(bPrefetchNavigationTargets) { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Removes the given control from the SemanticObjectController and unregisters all relevant events.
 * 
 * @param {sap.ui.comp.navpopover.SmartLink | sap.ui.comp.navpopover.NavigationPopoverHandler} oControl
 * @public
 * 
 */
sap.ui.comp.navpopover.SemanticObjectController.prototype.unregisterControl = function(oControl) {  };


// ---- sap.ui.comp.navpopover.SmartLink --------------------------------------------------------------------------

/**
 * Constructor for a new navpopover/SmartLink.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSemanticObject semanticObject} : string</li>
 * <li>{@link #getAdditionalSemanticObjects additionalSemanticObjects} : string[] (default: [])</li>
 * <li>{@link #getSemanticObjectController semanticObjectController} : any</li>
 * <li>{@link #getFieldName fieldName} : string</li>
 * <li>{@link #getSemanticObjectLabel semanticObjectLabel} : string</li>
 * <li>{@link #getCreateControlCallback createControlCallback} : object</li>
 * <li>{@link #getMapFieldToSemanticObject mapFieldToSemanticObject} : boolean (default: true)</li>
 * <li>{@link #getContactAnnotationPath contactAnnotationPath} : string (default: undefined)</li>
 * <li>{@link #getIgnoreLinkRendering ignoreLinkRendering} : boolean (default: false)</li>
 * <li>{@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization} : boolean (default: true)</li>
 * <li>{@link #getUom uom} : string (default: undefined)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getInnerControl innerControl} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:beforePopoverOpens beforePopoverOpens} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:navigationTargetsObtained navigationTargetsObtained} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:innerNavigate innerNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Link#constructor sap.m.Link}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class The SmartLink control uses a semantic object to display {@link sap.ui.comp.navpopover.NavigationPopover NavigationPopover} for further
 *        navigation steps.
 * @extends sap.m.Link
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.navpopover.SmartLink = function(sId,mSettings) {};
/**
 * Event is fired before the navigation popover opens and before navigation target links are getting retrieved. Event can be used to
 * change the parameters used to retrieve the navigation targets. In case of SmartLink control, the <code>beforePopoverOpens</code>
 * is fired after the link has been clicked.
 * @event
 * @since 1.28.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.semanticObject The semantic object for which the navigation targets will be retrieved.
 * @param {object} oControlEvent.getParameters.semanticAttributes Map containing the semantic attributes calculated from the binding that will be used to retrieve the navigation targets.
 * @param {object} oControlEvent.getParameters.semanticAttributesOfSemanticObjects A map of semantic objects for which the navigation targets will be retrieved and it's semantic attributes calculated from
 * the binding context. The semantic attributes will be used as parameters in order to retrieve the navigation targets.
 * @param {function} oControlEvent.getParameters.setSemanticAttributes This callback function enables you to define a changed semantic attributes map. Signatures:
 * <code>setSemanticAttributes(oSemanticAttributesMap)</code> Parameter:
 * <ul>
 * <li>{object} oSemanticAttributesMap New map containing the semantic attributes</li>
 * <li>{string} sSemanticObject Semantic Object for which the oSemanticAttributesMap belongs</li>
 * </ul>
 * @param {function} oControlEvent.getParameters.setAppStateKey This callback function sets an application state key that is used over the cross-application navigation. Signatures:
 * <code>setAppStateKey(sAppStateKey)</code> Parameter:
 * <ul>
 * <li>{string} sAppStateKey</li>
 * </ul>
 * @param {string} oControlEvent.getParameters.originalId The ID of the SmartLink control.
 * @param {function} oControlEvent.getParameters.open This callback function triggers the retrieval of navigation targets and leads to the opening of the navigation popover.
 * Signatures: <code>open()</code> If the <code>beforePopoverOpens</code> has been registered, the <code>open</code>
 * function has to be called manually in order to open the navigation popover.
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.beforePopoverOpens = function(oControlEvent) {  };

/**
 * This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
 * left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.
 * @event
 * @since 1.28.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.text The UI text shown in the clicked link.
 * @param {string} oControlEvent.getParameters.href The navigation target of the clicked link.
 * @param {string} oControlEvent.getParameters.semanticObject The semantic object used to retrieve this target.
 * @param {object} oControlEvent.getParameters.semanticAttributes Map containing the semantic attributes used to retrieve this target.
 * @param {string} oControlEvent.getParameters.originalId The ID of the SmartLink control.
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.innerNavigate = function(oControlEvent) {  };

/**
 * After the navigation targets are retrieved, <code>navigationTargetsObtained</code> is fired and provides the possibility to
 * change the targets.
 * @event
 * @since 1.28.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.comp.navpopover.LinkData} oControlEvent.getParameters.mainNavigation The main navigation object.
 * @param {sap.ui.comp.navpopover.LinkData[]} oControlEvent.getParameters.actions Array of available navigation target objects.
 * @param {sap.ui.comp.navpopover.LinkData} oControlEvent.getParameters.ownNavigation The navigation object for the own application. This navigation option is by default not visible on the popover.
 * @param {sap.ui.layout.form.SimpleForm[]} oControlEvent.getParameters.popoverForms Array containing contact data.
 * @param {string} oControlEvent.getParameters.semanticObject The semantic object for which the navigation targets have been retrieved.
 * @param {object} oControlEvent.getParameters.semanticAttributes Map containing the semantic attributes.
 * @param {string} oControlEvent.getParameters.originalId The ID of the SmartLink control.
 * @param {function} oControlEvent.getParameters.show This callback function shows the actual navigation popover. If the <code>navigationTargetsObtained</code> has been
 * registered, the <code>show</code> function has to be called manually in order to open the navigation popover. Signatures:
 * <code>show()</code>
 * <ul>
 * <li><code>show(oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
 * <ul>
 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
 * remain.</li>
 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
 * object still remains.</li>
 * </ul>
 * </li>
 * <li><code>show(sMainNavigationId, oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
 * <ul>
 * <li>{string | undefined} sMainNavigationId The visible description for the main navigation link. With <code>''</code>,
 * both the description and subtitle will be removed. With <code>undefined</code>, the description is calculated using the
 * binding context of a given source object (for example <code>SmartLink</code> control).</li>
 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
 * remain.</li>
 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
 * object still remains.</li>
 * </ul>
 * </li>
 * </ul>
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.navigationTargetsObtained = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforePopoverOpens beforePopoverOpens} event of this <code>sap.ui.comp.navpopover.SmartLink</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.navpopover.SmartLink</code> itself.
 * 
 * Event is fired before the navigation popover opens and before navigation target links are getting retrieved. Event can be used to
 * change the parameters used to retrieve the navigation targets. In case of SmartLink control, the <code>beforePopoverOpens</code>
 * is fired after the link has been clicked.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.navpopover.SmartLink</code> itself
 * 
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.attachBeforePopoverOpens = function(oData,fnFunction,oListener) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:innerNavigate innerNavigate} event of this <code>sap.ui.comp.navpopover.SmartLink</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.navpopover.SmartLink</code> itself.
 * 
 * This event is fired after a navigation link on the navigation popover has been clicked. This event is only fired, if the user
 * left-clicks the link. Right-clicking the link and selecting 'Open in New Window' etc. in the context menu does not fire the event.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.navpopover.SmartLink</code> itself
 * 
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.attachInnerNavigate = function(oData,fnFunction,oListener) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:navigationTargetsObtained navigationTargetsObtained} event of this <code>sap.ui.comp.navpopover.SmartLink</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.navpopover.SmartLink</code> itself.
 * 
 * After the navigation targets are retrieved, <code>navigationTargetsObtained</code> is fired and provides the possibility to
 * change the targets.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.navpopover.SmartLink</code> itself
 * 
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.attachNavigationTargetsObtained = function(oData,fnFunction,oListener) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Destroys the innerControl in the aggregation {@link #getInnerControl innerControl}.
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.destroyInnerControl = function() { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforePopoverOpens beforePopoverOpens} event of this <code>sap.ui.comp.navpopover.SmartLink</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.detachBeforePopoverOpens = function(fnFunction,oListener) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:innerNavigate innerNavigate} event of this <code>sap.ui.comp.navpopover.SmartLink</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.detachInnerNavigate = function(fnFunction,oListener) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:navigationTargetsObtained navigationTargetsObtained} event of this <code>sap.ui.comp.navpopover.SmartLink</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.detachNavigationTargetsObtained = function(fnFunction,oListener) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Creates a new subclass of class sap.ui.comp.navpopover.SmartLink with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Link.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.navpopover.SmartLink.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:beforePopoverOpens beforePopoverOpens} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.semanticObject] The semantic object for which the navigation targets will be retrieved.
 * @param {object} [mParameters.semanticAttributes] Map containing the semantic attributes calculated from the binding that will be used to retrieve the navigation targets.
 * @param {object} [mParameters.semanticAttributesOfSemanticObjects] A map of semantic objects for which the navigation targets will be retrieved and it's semantic attributes calculated from
 * the binding context. The semantic attributes will be used as parameters in order to retrieve the navigation targets.
 * @param {function} [mParameters.setSemanticAttributes] This callback function enables you to define a changed semantic attributes map. Signatures:
 * <code>setSemanticAttributes(oSemanticAttributesMap)</code> Parameter:
 * <ul>
 * <li>{object} oSemanticAttributesMap New map containing the semantic attributes</li>
 * <li>{string} sSemanticObject Semantic Object for which the oSemanticAttributesMap belongs</li>
 * </ul>
 * @param {function} [mParameters.setAppStateKey] This callback function sets an application state key that is used over the cross-application navigation. Signatures:
 * <code>setAppStateKey(sAppStateKey)</code> Parameter:
 * <ul>
 * <li>{string} sAppStateKey</li>
 * </ul>
 * @param {string} [mParameters.originalId] The ID of the SmartLink control.
 * @param {function} [mParameters.open] This callback function triggers the retrieval of navigation targets and leads to the opening of the navigation popover.
 * Signatures: <code>open()</code> If the <code>beforePopoverOpens</code> has been registered, the <code>open</code>
 * function has to be called manually in order to open the navigation popover.
 * 
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.fireBeforePopoverOpens = function(mParameters) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Fires event {@link #event:innerNavigate innerNavigate} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.text] The UI text shown in the clicked link.
 * @param {string} [mParameters.href] The navigation target of the clicked link.
 * @param {string} [mParameters.semanticObject] The semantic object used to retrieve this target.
 * @param {object} [mParameters.semanticAttributes] Map containing the semantic attributes used to retrieve this target.
 * @param {string} [mParameters.originalId] The ID of the SmartLink control.
 * 
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.fireInnerNavigate = function(mParameters) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Fires event {@link #event:navigationTargetsObtained navigationTargetsObtained} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.comp.navpopover.LinkData} [mParameters.mainNavigation] The main navigation object.
 * @param {sap.ui.comp.navpopover.LinkData[]} [mParameters.actions] Array of available navigation target objects.
 * @param {sap.ui.comp.navpopover.LinkData} [mParameters.ownNavigation] The navigation object for the own application. This navigation option is by default not visible on the popover.
 * @param {sap.ui.layout.form.SimpleForm[]} [mParameters.popoverForms] Array containing contact data.
 * @param {string} [mParameters.semanticObject] The semantic object for which the navigation targets have been retrieved.
 * @param {object} [mParameters.semanticAttributes] Map containing the semantic attributes.
 * @param {string} [mParameters.originalId] The ID of the SmartLink control.
 * @param {function} [mParameters.show] This callback function shows the actual navigation popover. If the <code>navigationTargetsObtained</code> has been
 * registered, the <code>show</code> function has to be called manually in order to open the navigation popover. Signatures:
 * <code>show()</code>
 * <ul>
 * <li><code>show(oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
 * <ul>
 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
 * remain.</li>
 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
 * object still remains.</li>
 * </ul>
 * </li>
 * <li><code>show(sMainNavigationId, oMainNavigation, aAvailableActions, oAdditionalContent)</code> Parameters:
 * <ul>
 * <li>{string | undefined} sMainNavigationId The visible description for the main navigation link. With <code>''</code>,
 * both the description and subtitle will be removed. With <code>undefined</code>, the description is calculated using the
 * binding context of a given source object (for example <code>SmartLink</code> control).</li>
 * <li>{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
 * <code>null</code> the main navigation object will be removed. With <code>undefined</code> the old object will remain.</li>
 * <li>{sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross application
 * navigation links. With empty array all available links will be removed. With <code>undefined</code> the old links will
 * remain.</li>
 * <li>{sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra content section on
 * the popover. With <code>null</code> the main extra content object will be removed. With <code>undefined</code> the old
 * object still remains.</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.fireNavigationTargetsObtained = function(mParameters) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Gets current value of property {@link #getAdditionalSemanticObjects additionalSemanticObjects}.
 * 
 * Semantic object names which can be used additional to the default <code>semanticObject</code> property in order to get navigation
 * targets links.
 * 
 * Default value is <code>[]</code>.
 * @returns {string[]} Value of property <code>additionalSemanticObjects</code>
 * @since 1.42.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.getAdditionalSemanticObjects = function() { return new Array(); };

/**
 * Gets current value of property {@link #getContactAnnotationPath contactAnnotationPath}.
 * 
 * Navigation property that points from the current to the related entity type where the com.sap.vocabularies.Communication.v1.Contact
 * annotation is defined, for example, <code>'to_Supplier'</code>. An empty string means that the related entity type is the
 * current one.
 * 
 * Default value is <code>undefined</code>.
 * @returns {string} Value of property <code>contactAnnotationPath</code>
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.getContactAnnotationPath = function() { return ""; };

/**
 * Gets current value of property {@link #getCreateControlCallback createControlCallback}.
 * 
 * Function that enables the SmartLink control to create an alternative control, which is displayed if no navigation targets are
 * available. The function has no parameters and has to return an instance of sap.ui.core.Control.
 * 
 * @returns {object} Value of property <code>createControlCallback</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.getCreateControlCallback = function() { return new Object(); };

/**
 * Gets current value of property {@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization}.
 * 
 * Determines whether the personalization link is shown inside the NavigationPopover control.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enableAvailableActionsPersonalization</code>
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.getEnableAvailableActionsPersonalization = function() { return false; };

/**
 * Gets current value of property {@link #getFieldName fieldName}.
 * 
 * The metadata field name for this SmartLink control.
 * 
 * @returns {string} Value of property <code>fieldName</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.getFieldName = function() { return ""; };

/**
 * Gets current value of property {@link #getIgnoreLinkRendering ignoreLinkRendering}.
 * 
 * If set to <code>true</code>, the SmartLink control will render the <code>innerControl</code> or the control provided by
 * <code>createControlCallback</code> instead of the actual link. This is used for example by the SemanticObjectController if this
 * SmartLink is listed in its <code>ignoredFields</code> or no navigation targets were found during prefetch.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>ignoreLinkRendering</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.getIgnoreLinkRendering = function() { return false; };

/**
 * Gets content of aggregation {@link #getInnerControl innerControl}.
 * 
 * Control that is displayed instead of SmartLink control, if the SmartLink is disabled (for example, if no navigation targets are
 * available). If <code>innerControl</code> is not provided, the SmartLink control tries to create one with property
 * <code>createControlCallback</code>.
 * 
 * @returns {sap.ui.core.Control}
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.getInnerControl = function() { return new sap.ui.core.Control(); };

/**
 * Gets the inner control's value, if no inner control is available, the text of SmartLink control will be returned.
 * 
 * @returns {object} the value
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.getInnerControlValue = function() { return new Object(); };

/**
 * Gets current value of property {@link #getMapFieldToSemanticObject mapFieldToSemanticObject}.
 * 
 * If set to <code>false</code>, the SmartLink control will not replace its field name with the according
 * <code>semanticObject</code> property during the calculation of the semantic attributes. This enables the usage of several
 * SmartLink controls on the same semantic object.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>mapFieldToSemanticObject</code>
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.getMapFieldToSemanticObject = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.comp.navpopover.SmartLink.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.navpopover.SmartLink.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSemanticObject semanticObject}.
 * 
 * Name of semantic object which is used to fill the navigation popover. <b>Note</b>: Setting a value triggers an asynchronous
 * determination, so the effect can be delayed.
 * 
 * @returns {string} Value of property <code>semanticObject</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.getSemanticObject = function() { return ""; };

/**
 * Gets current value of property {@link #getSemanticObjectController semanticObjectController}.
 * 
 * The semantic object controller controls events for several SmartLink controls. If the controller is not set manually, it tries to
 * find a SemanticObjectController in its parent hierarchy.
 * 
 * @returns {any} Value of property <code>semanticObjectController</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.getSemanticObjectController = function() { return null; };

/**
 * Gets current value of property {@link #getSemanticObjectLabel semanticObjectLabel}.
 * 
 * Shown label of semantic object.
 * 
 * @returns {string} Value of property <code>semanticObjectLabel</code>
 * @since 1.28.0
 * @deprecated As of version 1.40.0 Title section with <code>semanticObjectLabel</code> has been removed due to new UI design
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.getSemanticObjectLabel = function() { return ""; };

/**
 * Gets current value of property {@link #getUom uom}.
 * 
 * Additionally to the <code>text</code> property the Unit of Measure can be displayed.
 * 
 * Default value is <code>undefined</code>.
 * @returns {string} Value of property <code>uom</code>
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.getUom = function() { return ""; };

/**
 * Sets a new value for property {@link #getAdditionalSemanticObjects additionalSemanticObjects}.
 * 
 * Semantic object names which can be used additional to the default <code>semanticObject</code> property in order to get navigation
 * targets links.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>[]</code>.
 * @param {string[]} sAdditionalSemanticObjects New value for property <code>additionalSemanticObjects</code>
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.42.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.setAdditionalSemanticObjects = function(sAdditionalSemanticObjects) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Sets a new value for property {@link #getContactAnnotationPath contactAnnotationPath}.
 * 
 * Navigation property that points from the current to the related entity type where the com.sap.vocabularies.Communication.v1.Contact
 * annotation is defined, for example, <code>'to_Supplier'</code>. An empty string means that the related entity type is the
 * current one.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sContactAnnotationPath New value for property <code>contactAnnotationPath</code>
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.setContactAnnotationPath = function(sContactAnnotationPath) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Sets a new value for property {@link #getCreateControlCallback createControlCallback}.
 * 
 * Function that enables the SmartLink control to create an alternative control, which is displayed if no navigation targets are
 * available. The function has no parameters and has to return an instance of sap.ui.core.Control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oCreateControlCallback New value for property <code>createControlCallback</code>
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.setCreateControlCallback = function(oCreateControlCallback) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Sets a new value for property {@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization}.
 * 
 * Determines whether the personalization link is shown inside the NavigationPopover control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableAvailableActionsPersonalization New value for property <code>enableAvailableActionsPersonalization</code>
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.setEnableAvailableActionsPersonalization = function(bEnableAvailableActionsPersonalization) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Sets a new value for property {@link #getFieldName fieldName}.
 * 
 * The metadata field name for this SmartLink control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sFieldName New value for property <code>fieldName</code>
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.setFieldName = function(sFieldName) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Sets a new value for property {@link #getIgnoreLinkRendering ignoreLinkRendering}.
 * 
 * If set to <code>true</code>, the SmartLink control will render the <code>innerControl</code> or the control provided by
 * <code>createControlCallback</code> instead of the actual link. This is used for example by the SemanticObjectController if this
 * SmartLink is listed in its <code>ignoredFields</code> or no navigation targets were found during prefetch.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bIgnoreLinkRendering New value for property <code>ignoreLinkRendering</code>
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.setIgnoreLinkRendering = function(bIgnoreLinkRendering) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Sets the aggregated {@link #getInnerControl innerControl}.
 * @param {sap.ui.core.Control} oInnerControl The innerControl to set
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.setInnerControl = function(oInnerControl) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Sets a new value for property {@link #getMapFieldToSemanticObject mapFieldToSemanticObject}.
 * 
 * If set to <code>false</code>, the SmartLink control will not replace its field name with the according
 * <code>semanticObject</code> property during the calculation of the semantic attributes. This enables the usage of several
 * SmartLink controls on the same semantic object.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bMapFieldToSemanticObject New value for property <code>mapFieldToSemanticObject</code>
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.setMapFieldToSemanticObject = function(bMapFieldToSemanticObject) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Sets a new value for property {@link #getSemanticObject semanticObject}.
 * 
 * Name of semantic object which is used to fill the navigation popover. <b>Note</b>: Setting a value triggers an asynchronous
 * determination, so the effect can be delayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSemanticObject New value for property <code>semanticObject</code>
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.setSemanticObject = function(sSemanticObject) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Sets a new value for property {@link #getSemanticObjectController semanticObjectController}.
 * 
 * The semantic object controller controls events for several SmartLink controls. If the controller is not set manually, it tries to
 * find a SemanticObjectController in its parent hierarchy.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oSemanticObjectController New value for property <code>semanticObjectController</code>
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.setSemanticObjectController = function(oSemanticObjectController) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Sets a new value for property {@link #getSemanticObjectLabel semanticObjectLabel}.
 * 
 * Shown label of semantic object.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSemanticObjectLabel New value for property <code>semanticObjectLabel</code>
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * @deprecated As of version 1.40.0 Title section with <code>semanticObjectLabel</code> has been removed due to new UI design
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.setSemanticObjectLabel = function(sSemanticObjectLabel) { return new sap.ui.comp.navpopover.SmartLink(); };

/**
 * Sets a new value for property {@link #getUom uom}.
 * 
 * Additionally to the <code>text</code> property the Unit of Measure can be displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>undefined</code>.
 * @param {string} sUom New value for property <code>uom</code>
 * @returns {sap.ui.comp.navpopover.SmartLink} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.SmartLink.prototype.setUom = function(sUom) { return new sap.ui.comp.navpopover.SmartLink(); };


// ---- sap.ui.comp.odata.FieldSelector --------------------------------------------------------------------------

/**
 * Constructor for a new odata/FieldSelector.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowSearchBar showSearchBar} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:fieldSelectionChanged fieldSelectionChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Reuse control which displays the properties of OData entity sets.
 * @extends sap.ui.core.Control
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.odata.FieldSelector = function(sId,mSettings) {};
/**
 * User selected a different field.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.odata.FieldSelector.prototype.fieldSelectionChanged = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:fieldSelectionChanged fieldSelectionChanged} event of this <code>sap.ui.comp.odata.FieldSelector</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.odata.FieldSelector</code> itself.
 * 
 * User selected a different field.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.odata.FieldSelector</code> itself
 * 
 * @returns {sap.ui.comp.odata.FieldSelector} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.odata.FieldSelector.prototype.attachFieldSelectionChanged = function(oData,fnFunction,oListener) { return new sap.ui.comp.odata.FieldSelector(); };

/**
 * Destroys the inner references
 * 
 * @public
 * 
 */
sap.ui.comp.odata.FieldSelector.prototype.destroy = function() {  };

/**
 * Destroys the content in the aggregation {@link #getContent content}.
 * @returns {sap.ui.comp.odata.FieldSelector} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.odata.FieldSelector.prototype.destroyContent = function() { return new sap.ui.comp.odata.FieldSelector(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:fieldSelectionChanged fieldSelectionChanged} event of this <code>sap.ui.comp.odata.FieldSelector</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.odata.FieldSelector} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.odata.FieldSelector.prototype.detachFieldSelectionChanged = function(fnFunction,oListener) { return new sap.ui.comp.odata.FieldSelector(); };

/**
 * Cleans up the control
 * 
 * @public
 * 
 */
sap.ui.comp.odata.FieldSelector.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.ui.comp.odata.FieldSelector with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.odata.FieldSelector.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:fieldSelectionChanged fieldSelectionChanged} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.odata.FieldSelector} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.odata.FieldSelector.prototype.fireFieldSelectionChanged = function(mParameters) { return new sap.ui.comp.odata.FieldSelector(); };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * Content of the control itself
 * 
 * @returns {sap.ui.core.Control}
 * 
 * @public
 * 
 */
sap.ui.comp.odata.FieldSelector.prototype.getContent = function() { return new sap.ui.core.Control(); };

/**
 * Returns a metadata object for class sap.ui.comp.odata.FieldSelector.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.odata.FieldSelector.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns a map with the name of the entity set and the key of the selected field.
 * 
 * @public
 * @returns {object} map of the name of the entity set having the selected field as kex
 * 
 */
sap.ui.comp.odata.FieldSelector.prototype.getSelectedField = function() { return new Object(); };

/**
 * Gets current value of property {@link #getShowSearchBar showSearchBar}.
 * 
 * Indicates to show a search bar for property names inside a selected entity set.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showSearchBar</code>
 * 
 * @public
 * 
 */
sap.ui.comp.odata.FieldSelector.prototype.getShowSearchBar = function() { return false; };

/**
 * Sets the aggregated {@link #getContent content}.
 * @param {sap.ui.core.Control} oContent The content to set
 * @returns {sap.ui.comp.odata.FieldSelector} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.odata.FieldSelector.prototype.setContent = function(oContent) { return new sap.ui.comp.odata.FieldSelector(); };

/**
 * Set the model for the entity and fields of an odata service
 * 
 * @param {sap.ui.model.odata.ODataModel} oModel - odata model
 * @param {string} sEntityTypes - entity type name(s) separated by comma character or array
 * @param {boolean} bShowExtFieldButton - indicates if the create new field button will be displayed or not
 * @param {Array} aIgnoredFields - List of fields which should be ignored
 * @param {Object.<bindingPath:string, fieldListElement:Object>} mBindingPathToFieldListElement - Map absolute odata binding paths to the field list elements
 * @param {Object.<id:string, fieldListElement:Object>} mIdToFieldListElement - Map field list element ids to the field list elements
 * @public
 * 
 */
sap.ui.comp.odata.FieldSelector.prototype.setModel = function(oModel,sEntityTypes,bShowExtFieldButton,aIgnoredFields,mBindingPathToFieldListElement,mIdToFieldListElement) {  };

/**
 * Sets a new value for property {@link #getShowSearchBar showSearchBar}.
 * 
 * Indicates to show a search bar for property names inside a selected entity set.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowSearchBar New value for property <code>showSearchBar</code>
 * @returns {sap.ui.comp.odata.FieldSelector} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.odata.FieldSelector.prototype.setShowSearchBar = function(bShowSearchBar) { return new sap.ui.comp.odata.FieldSelector(); };

/**
 * Based on the renamed label contained in the field list,
 * the label contained in the field selector will be updated.
 * 
 * @param {Object} oFieldListElement - Field list element containing all relevant properties needed for the update
 * @public
 * 
 */
sap.ui.comp.odata.FieldSelector.prototype.updateFieldLabel = function(oFieldListElement) {  };


// ---- sap.ui.comp.personalization.AggregationRole --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.personalization.AggregationRole.toString = function() { return ""; };

// ---- sap.ui.comp.personalization.ChangeType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.personalization.ChangeType.toString = function() { return ""; };

// ---- sap.ui.comp.personalization.ResetType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.personalization.ResetType.toString = function() { return ""; };

// ---- sap.ui.comp.personalization.TableType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.personalization.TableType.toString = function() { return ""; };

// ---- sap.ui.comp.smartchart.SmartChart --------------------------------------------------------------------------

/**
 * Constructor for a new smartchart/SmartChart.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEntitySet entitySet} : string</li>
 * <li>{@link #getSmartFilterId smartFilterId} : string</li>
 * <li>{@link #getIgnoredFields ignoredFields} : string</li>
 * <li>{@link #getRequestAtLeastFields requestAtLeastFields} : string</li>
 * <li>{@link #getIgnoreFromPersonalisation ignoreFromPersonalisation} : string</li>
 * <li>{@link #getChartType chartType} : string</li>
 * <li>{@link #getIgnoredChartTypes ignoredChartTypes} : string</li>
 * <li>{@link #getUseVariantManagement useVariantManagement} : boolean (default: true)</li>
 * <li>{@link #getUseChartPersonalisation useChartPersonalisation} : boolean (default: true)</li>
 * <li>{@link #getHeader header} : string</li>
 * <li>{@link #getPersistencyKey persistencyKey} : string</li>
 * <li>{@link #getCurrentVariantId currentVariantId} : string</li>
 * <li>{@link #getEnableAutoBinding enableAutoBinding} : boolean (default: false)</li>
 * <li>{@link #getChartBindingPath chartBindingPath} : string</li>
 * <li>{@link #getShowDrillButtons showDrillButtons} : boolean (default: true)</li>
 * <li>{@link #getShowZoomButtons showZoomButtons} : boolean (default: true)</li>
 * <li>{@link #getShowSemanticNavigationButton showSemanticNavigationButton} : boolean (default: true)</li>
 * <li>{@link #getShowVariantManagement showVariantManagement} : boolean (default: true)</li>
 * <li>{@link #getShowDownloadButton showDownloadButton} : boolean (default: false)</li>
 * <li>{@link #getShowDetailsButton showDetailsButton} : boolean (default: false)</li>
 * <li>{@link #getShowDrillBreadcrumbs showDrillBreadcrumbs} : boolean (default: false)</li>
 * <li>{@link #getShowChartTooltip showChartTooltip} : boolean (default: true)</li>
 * <li>{@link #getShowLegendButton showLegendButton} : boolean (default: true)</li>
 * <li>{@link #getLegendVisible legendVisible} : boolean (default: true)</li>
 * <li>{@link #getSelectionMode selectionMode} : sap.chart.SelectionMode (default: Multi)</li>
 * <li>{@link #getShowFullScreenButton showFullScreenButton} : boolean (default: true)</li>
 * <li>{@link #getUseTooltip useTooltip} : boolean (default: true)</li>
 * <li>{@link #getUseListForChartTypeSelection useListForChartTypeSelection} : boolean (default: true)</li>
 * <li>{@link #getShowChartTypeSelectionButton showChartTypeSelectionButton} : boolean (default: true)</li>
 * <li>{@link #getNoData noData} : string (default: )</li>
 * <li>{@link #getUiState uiState} : sap.ui.comp.state.UIState</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getToolbar toolbar} : sap.m.Toolbar</li>
 * <li>{@link #getSemanticObjectController semanticObjectController} : sap.ui.comp.navpopover.SemanticObjectController</li>
 * <li>{@link #getSelectionDetailsItemActions selectionDetailsItemActions} : sap.ui.core.Item[]</li>
 * <li>{@link #getSelectionDetailsActions selectionDetailsActions} : sap.ui.core.Item[]</li>
 * <li>{@link #getSelectionDetailsActionGroups selectionDetailsActionGroups} : sap.ui.core.Item[]</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSmartVariant smartVariant} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:initialise initialise} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeRebindChart beforeRebindChart} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:dataReceived dataReceived} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterVariantInitialise afterVariantInitialise} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterVariantSave afterVariantSave} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterVariantApply afterVariantApply} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:showOverlay showOverlay} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:fullScreenToggled fullScreenToggled} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:selectionDetailsActionPress selectionDetailsActionPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.VBox#constructor sap.m.VBox}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control that is generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class The SmartChart control creates a chart based on OData metadata and the configuration specified. The entitySet property must be specified
 *        to use the control. This property is used to fetch fields from OData metadata, from which the chart UI will be generated. It can also be
 *        used to fetch the actual chart data.<br>
 *        Based on the chartType property, this control will render the corresponding chart.<br>
 *        <b>Note:</b> Most of the attributes are not dynamic and cannot be changed once the control has been initialized.
 * @extends sap.m.VBox
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartchart.SmartChart = function(sId,mSettings) {};
/**
 * This event is fired after a variant has been applied.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.currentVariantId ID of the currently selected variant
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.afterVariantApply = function(oControlEvent) {  };

/**
 * This event is fired after the variant management in the SmartChart control has been initialized.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.afterVariantInitialise = function(oControlEvent) {  };

/**
 * This event is fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.currentVariantId ID of the currently selected variant
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.afterVariantSave = function(oControlEvent) {  };

/**
 * This event is fired right before the <code>SmartChart</code> control triggers the binding / rebinding  of the inner chart.
 * <b>Note:</b> In certain cases the inner chart triggers a rebinding by itself. In these cases, the event is not fired.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {JSON} oControlEvent.getParameters.bindingParams The bindingParams object contains filters, sorters, and other
 *        binding-related information for the chart
 * @param {boolean} oControlEvent.getParameters.bindingParams.preventChartBind If set to <code>true</code> by the listener, binding
 *        is prevented
 * @param {sap.ui.model.Filter[]} oControlEvent.getParameters.bindingParams.filters The combined filter array containing a set of
 *        sap.ui.model.Filter instances of the SmartChart and SmartFilter controls; can be modified by users to influence filtering
 * @param {sap.ui.model.Sorter[]} oControlEvent.getParameters.bindingParams.sorter An array containing a set of sap.ui.model.Sorter
 *        instances of the SmartChart control (personalization); can be modified by users to influence sorting
 * @param {Number} oControlEvent.getParameters.bindingParams.length The maximal number of items that is displayed for the
 *        <code>SmartChart</code> control
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.beforeRebindChart = function(oControlEvent) {  };

/**
 * This event is fired when data is received after binding. This event is fired if the binding for the chart is done by the SmartChart
 * control itself.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.dataReceived = function(oControlEvent) {  };

/**
 * This event is fired right after the full screen mode of the SmartChart control has been changed.
 * @event
 * @since 1.46
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.fullScreen If <code>true</code> the control is in full screen mode
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.fullScreenToggled = function(oControlEvent) {  };

/**
 * This event is fired once the control has been initialized.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.initialise = function(oControlEvent) {  };

/**
 * This event is fired when any action in the selection details popover is pressed.
 * @event
 * @since 1.48
 * 
 * @experimental Since 1.48
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Item} oControlEvent.getParameters.action The action that has to be processed once the action has been pressed
 * @param {sap.ui.model.Context} oControlEvent.getParameters.itemContexts If the action is pressed on one of the {@link sap.m.SelectionDetailsItem items}, the parameter contains the {@link sap.ui.model.Context context} of the pressed {@link sap.m.SelectionDetailsItem item}. If a custom action or action group of the SelectionDetails popover is pressed, this parameter contains all {@link sap.ui.model.Context contexts} of the {@link sap.m.SelectionDetailsItem items}.
 * @param {sap.m.SelectionDetailsActionLevel} oControlEvent.getParameters.level The action level of action buttons. The available levels are Item, List and Group
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.selectionDetailsActionPress = function(oControlEvent) {  };

/**
 * This event is fired right before the overlay is shown.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.showOverlay = function(oControlEvent) {  };

/**
 * Adds some selectionDetailsAction to the aggregation {@link #getSelectionDetailsActions selectionDetailsActions}.
 * @param {sap.ui.core.Item}
 *            oSelectionDetailsAction the selectionDetailsAction to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.addSelectionDetailsAction = function(oSelectionDetailsAction) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Adds some selectionDetailsActionGroup to the aggregation {@link #getSelectionDetailsActionGroups selectionDetailsActionGroups}.
 * @param {sap.ui.core.Item}
 *            oSelectionDetailsActionGroup the selectionDetailsActionGroup to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.addSelectionDetailsActionGroup = function(oSelectionDetailsActionGroup) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Adds some selectionDetailsItemAction to the aggregation {@link #getSelectionDetailsItemActions selectionDetailsItemActions}.
 * @param {sap.ui.core.Item}
 *            oSelectionDetailsItemAction the selectionDetailsItemAction to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.addSelectionDetailsItemAction = function(oSelectionDetailsItemAction) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Interface function for SmartVariantManagement control that applies the current variant.
 * 
 * @param {Object} oVariantJSON The variant JSON
 * @param {string} sContext Describes the context in which the variant has been applied
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.applyVariant = function(oVariantJSON,sContext) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterVariantApply afterVariantApply} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartchart.SmartChart</code> itself.
 * 
 * This event is fired after a variant has been applied.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartchart.SmartChart</code> itself
 * 
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.attachAfterVariantApply = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterVariantInitialise afterVariantInitialise} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartchart.SmartChart</code> itself.
 * 
 * This event is fired after the variant management in the SmartChart control has been initialized.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartchart.SmartChart</code> itself
 * 
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.attachAfterVariantInitialise = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterVariantSave afterVariantSave} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartchart.SmartChart</code> itself.
 * 
 * This event is fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartchart.SmartChart</code> itself
 * 
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.attachAfterVariantSave = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeRebindChart beforeRebindChart} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartchart.SmartChart</code> itself.
 * 
 * This event is fired right before the <code>SmartChart</code> control triggers the binding / rebinding  of the inner chart.
 * <b>Note:</b> In certain cases the inner chart triggers a rebinding by itself. In these cases, the event is not fired.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartchart.SmartChart</code> itself
 * 
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.attachBeforeRebindChart = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:dataReceived dataReceived} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartchart.SmartChart</code> itself.
 * 
 * This event is fired when data is received after binding. This event is fired if the binding for the chart is done by the SmartChart
 * control itself.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartchart.SmartChart</code> itself
 * 
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.attachDataReceived = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:fullScreenToggled fullScreenToggled} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartchart.SmartChart</code> itself.
 * 
 * This event is fired right after the full screen mode of the SmartChart control has been changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartchart.SmartChart</code> itself
 * 
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.46
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.attachFullScreenToggled = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:initialise initialise} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartchart.SmartChart</code> itself.
 * 
 * This event is fired once the control has been initialized.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartchart.SmartChart</code> itself
 * 
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.attachInitialise = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:selectionDetailsActionPress selectionDetailsActionPress} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartchart.SmartChart</code> itself.
 * 
 * This event is fired when any action in the selection details popover is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartchart.SmartChart</code> itself
 * 
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.48
 * 
 * @experimental Since 1.48
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.attachSelectionDetailsActionPress = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:showOverlay showOverlay} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartchart.SmartChart</code> itself.
 * 
 * This event is fired right before the overlay is shown.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartchart.SmartChart</code> itself
 * 
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.attachShowOverlay = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Destroys all the selectionDetailsActionGroups in the aggregation {@link #getSelectionDetailsActionGroups selectionDetailsActionGroups}.
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.destroySelectionDetailsActionGroups = function() { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Destroys all the selectionDetailsActions in the aggregation {@link #getSelectionDetailsActions selectionDetailsActions}.
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.destroySelectionDetailsActions = function() { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Destroys all the selectionDetailsItemActions in the aggregation {@link #getSelectionDetailsItemActions selectionDetailsItemActions}.
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.destroySelectionDetailsItemActions = function() { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Destroys the semanticObjectController in the aggregation {@link #getSemanticObjectController semanticObjectController}.
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.destroySemanticObjectController = function() { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Destroys the toolbar in the aggregation {@link #getToolbar toolbar}.
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.destroyToolbar = function() { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterVariantApply afterVariantApply} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.detachAfterVariantApply = function(fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterVariantInitialise afterVariantInitialise} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.detachAfterVariantInitialise = function(fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterVariantSave afterVariantSave} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.detachAfterVariantSave = function(fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeRebindChart beforeRebindChart} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.detachBeforeRebindChart = function(fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:dataReceived dataReceived} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.detachDataReceived = function(fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:fullScreenToggled fullScreenToggled} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.detachFullScreenToggled = function(fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:initialise initialise} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.detachInitialise = function(fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:selectionDetailsActionPress selectionDetailsActionPress} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48
 * 
 * @experimental Since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.detachSelectionDetailsActionPress = function(fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:showOverlay showOverlay} event of this <code>sap.ui.comp.smartchart.SmartChart</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.detachShowOverlay = function(fnFunction,oListener) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Cleans up the control.
 * 
 * @protected
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.ui.comp.smartchart.SmartChart with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.VBox.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartchart.SmartChart.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Interface function for the SmartVariantManagement control that returns the currently used variant data.
 * 
 * @public
 * @returns {json} The currently used variant
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.fetchVariant = function() { return null; };

/**
 * Fires event {@link #event:afterVariantApply afterVariantApply} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.currentVariantId] ID of the currently selected variant
 * 
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.fireAfterVariantApply = function(mParameters) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Fires event {@link #event:afterVariantInitialise afterVariantInitialise} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.fireAfterVariantInitialise = function(mParameters) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Fires event {@link #event:afterVariantSave afterVariantSave} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.currentVariantId] ID of the currently selected variant
 * 
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.fireAfterVariantSave = function(mParameters) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Fires event {@link #event:beforeRebindChart beforeRebindChart} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.fireBeforeRebindChart = function(mParameters) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Fires event {@link #event:dataReceived dataReceived} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.fireDataReceived = function(mParameters) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Fires event {@link #event:fullScreenToggled fullScreenToggled} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.fullScreen] If <code>true</code> the control is in full screen mode
 * 
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.46
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.fireFullScreenToggled = function(mParameters) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Fires event {@link #event:initialise initialise} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.fireInitialise = function(mParameters) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Fires event {@link #event:selectionDetailsActionPress selectionDetailsActionPress} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Item} [mParameters.action] The action that has to be processed once the action has been pressed
 * @param {sap.ui.model.Context} [mParameters.itemContexts] If the action is pressed on one of the {@link sap.m.SelectionDetailsItem items}, the parameter contains the {@link sap.ui.model.Context context} of the pressed {@link sap.m.SelectionDetailsItem item}. If a custom action or action group of the SelectionDetails popover is pressed, this parameter contains all {@link sap.ui.model.Context contexts} of the {@link sap.m.SelectionDetailsItem items}.
 * @param {sap.m.SelectionDetailsActionLevel} [mParameters.level] The action level of action buttons. The available levels are Item, List and Group
 * 
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.48
 * 
 * @experimental Since 1.48
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.fireSelectionDetailsActionPress = function(mParameters) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Fires event {@link #event:showOverlay showOverlay} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.fireShowOverlay = function(mParameters) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Returns the chart object used internally. <b>Note:</b> Direct changes made to the inner {@link sap.chart.Chart chart} object or its
 * {@link sap.viz.ui5.controls.VizFrame vizFrame} might lead to inconsistencies and side effects during runtime, as the <code>SmartChart</code>
 * control doesn't listen to all changes made to the inner {@link sap.chart.Chart chart} instance. To avoid this, please use the API provided by
 * the <code>SmartChart</code> control itself.
 * 
 * @returns {object} The inner chart object
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getChart = function() { return new Object(); };

/**
 * Gets current value of property {@link #getChartBindingPath chartBindingPath}.
 * 
 * Specifies the path that is used during the binding of the chart. If not specified, the entitySet property is used instead. (used
 * only if binding is established internally/automatically - See enableAutoBinding)
 * 
 * @returns {string} Value of property <code>chartBindingPath</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getChartBindingPath = function() { return ""; };

/**
 * Gets current value of property {@link #getChartType chartType}.
 * 
 * Specifies the type of chart to be created by the SmartChart control.
 * 
 * @returns {string} Value of property <code>chartType</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getChartType = function() { return ""; };

/**
 * Returns the ID of the currently selected variant.
 * 
 * @public
 * @returns {string} ID of the currently selected variant
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getCurrentVariantId = function() { return ""; };

/**
 * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
 * 
 * If set to <code>true</code>, this enables automatic binding of the chart using the chartBindingPath (if it exists) or entitySet
 * property. This happens right after the <code>initialise</code> event has been fired.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableAutoBinding</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getEnableAutoBinding = function() { return false; };

/**
 * Gets current value of property {@link #getEntitySet entitySet}.
 * 
 * The entity set name from which to fetch data and generate the columns.<br>
 * <b>Note</b> This is not a dynamic property.
 * 
 * @returns {string} Value of property <code>entitySet</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getEntitySet = function() { return ""; };

/**
 * Gets current value of property {@link #getHeader header}.
 * 
 * Specifies header text that is shown in the chart.
 * 
 * @returns {string} Value of property <code>header</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getHeader = function() { return ""; };

/**
 * Gets current value of property {@link #getIgnoredChartTypes ignoredChartTypes}.
 * 
 * CSV of fields that is not shown in the list of available chart types.<br>
 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * @returns {string} Value of property <code>ignoredChartTypes</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getIgnoredChartTypes = function() { return ""; };

/**
 * Gets current value of property {@link #getIgnoredFields ignoredFields}.
 * 
 * CSV of fields that must be ignored in the OData metadata by the SmartChart control.<br>
 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * @returns {string} Value of property <code>ignoredFields</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getIgnoredFields = function() { return ""; };

/**
 * Gets current value of property {@link #getIgnoreFromPersonalisation ignoreFromPersonalisation}.
 * 
 * CSV of fields that is not shown in the personalization dialog.<br>
 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * @returns {string} Value of property <code>ignoreFromPersonalisation</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getIgnoreFromPersonalisation = function() { return ""; };

/**
 * Gets current value of property {@link #getLegendVisible legendVisible}.
 * 
 * Set chart's legend properties.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>legendVisible</code>
 * @since 1.36
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getLegendVisible = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.comp.smartchart.SmartChart.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartchart.SmartChart.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getNoData noData}.
 * 
 * Defines the custom text that will be displayed in case no data is found for the current binding.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>noData</code>
 * @since 1.46
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getNoData = function() { return ""; };

/**
 * Gets current value of property {@link #getPersistencyKey persistencyKey}.
 * 
 * Key used to access personalization data.
 * 
 * @returns {string} Value of property <code>persistencyKey</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getPersistencyKey = function() { return ""; };

/**
 * Gets current value of property {@link #getRequestAtLeastFields requestAtLeastFields}.
 * 
 * CSV of fields that must be always requested by the backend system.<br>
 * This property is mainly meant to be used if there is no PresentationVariant annotation.<br>
 * If both this property and the PresentationVariant annotation exist, the select request sent to the backend would be a combination
 * of both.<br>
 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters. Also, setting this property during
 * runtime, will delete the current drill-stack and lead to a loss of the drill history.
 * 
 * @returns {string} Value of property <code>requestAtLeastFields</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getRequestAtLeastFields = function() { return ""; };

/**
 * Gets content of aggregation {@link #getSelectionDetailsActionGroups selectionDetailsActionGroups}.
 * 
 * Actions on group level which can be specified for the selection details popover.
 * 
 * @returns {sap.ui.core.Item[]}
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getSelectionDetailsActionGroups = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getSelectionDetailsActions selectionDetailsActions}.
 * 
 * Actions on footer level which can be specified for the selection details popover.
 * 
 * @returns {sap.ui.core.Item[]}
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getSelectionDetailsActions = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getSelectionDetailsItemActions selectionDetailsItemActions}.
 * 
 * Actions on item level which can be specified for the selection details popover.
 * 
 * @returns {sap.ui.core.Item[]}
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getSelectionDetailsItemActions = function() { return new Array(); };

/**
 * Gets current value of property {@link #getSelectionMode selectionMode}.
 * 
 * Chart selection mode. Supported values are {@link sap.chart.SelectionMode.Single} or {@link sap.chart.SelectionMode.Multi}, case
 * insensitive, always return in upper case. Unsupported values will be ignored.
 * 
 * Default value is <code>Multi</code>.
 * @returns {sap.chart.SelectionMode} Value of property <code>selectionMode</code>
 * @since 1.36
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getSelectionMode = function() { return new sap.chart.SelectionMode(); };

/**
 * Gets content of aggregation {@link #getSemanticObjectController semanticObjectController}.
 * 
 * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.
 * 
 * @returns {sap.ui.comp.navpopover.SemanticObjectController}
 * @since 1.36
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getSemanticObjectController = function() { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Gets current value of property {@link #getShowChartTooltip showChartTooltip}.
 * 
 * Controls the visibility of the chart tooltip. If set to <code>true </code>, an instance of sap.viz.ui5.controls.VizTooltip will
 * be created and shown when hovering over a data point.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showChartTooltip</code>
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getShowChartTooltip = function() { return false; };

/**
 * Gets current value of property {@link #getShowChartTypeSelectionButton showChartTypeSelectionButton}.
 * 
 * Controls the visibility of the chart type selection button.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showChartTypeSelectionButton</code>
 * @since 1.48
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getShowChartTypeSelectionButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowDetailsButton showDetailsButton}.
 * 
 * Controls the visibility of the Details button. If set to <code>true</code>, the datapoint tooltip will be disabled as the
 * information of selected datapoints will be found in the details popover. This will also set the drill-down button to invisible.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showDetailsButton</code>
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getShowDetailsButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowDownloadButton showDownloadButton}.
 * 
 * Controls the visibility of the chart download button.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showDownloadButton</code>
 * @since 1.39
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getShowDownloadButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowDrillBreadcrumbs showDrillBreadcrumbs}.
 * 
 * Controls the visibility of the Breadcrumbs control for drilling up within the visible dimensions. If set to <code>true</code>,
 * the toolbar header will be replaced by the Breadcrumbs control. This will also set the drill-up button to invisible.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showDrillBreadcrumbs</code>
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getShowDrillBreadcrumbs = function() { return false; };

/**
 * Gets current value of property {@link #getShowDrillButtons showDrillButtons}.
 * 
 * Controls the visibility of the Drill Up and Drill Down buttons.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showDrillButtons</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getShowDrillButtons = function() { return false; };

/**
 * Gets current value of property {@link #getShowFullScreenButton showFullScreenButton}.
 * 
 * Controls the visibility of the FullScreen button.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showFullScreenButton</code>
 * @since 1.36
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getShowFullScreenButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowLegendButton showLegendButton}.
 * 
 * Controls the visibility of the Navigation button
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showLegendButton</code>
 * @since 1.36
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getShowLegendButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowSemanticNavigationButton showSemanticNavigationButton}.
 * 
 * Controls the visibility of the Navigation button
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showSemanticNavigationButton</code>
 * @since 1.36
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getShowSemanticNavigationButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowVariantManagement showVariantManagement}.
 * 
 * Controls the visibility of the Variant Management.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showVariantManagement</code>
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getShowVariantManagement = function() { return false; };

/**
 * Gets current value of property {@link #getShowZoomButtons showZoomButtons}.
 * 
 * Controls the visibility of the Zoom In and Zoom Out buttons.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showZoomButtons</code>
 * @since 1.36
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getShowZoomButtons = function() { return false; };

/**
 * Gets current value of property {@link #getSmartFilterId smartFilterId}.
 * 
 * ID of the corresponding SmartFilter control. If specified, the SmartChart control searches for the SmartFilter control (also in the
 * closest parent view) and attaches to the relevant events of the SmartFilter control to fetch data, show overlay etc.
 * 
 * @returns {string} Value of property <code>smartFilterId</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getSmartFilterId = function() { return ""; };

/**
 * ID of the element which is the current target of the association {@link #getSmartVariant smartVariant}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getSmartVariant = function() { return new sap.ui.core.ID(); };

/**
 * Gets content of aggregation {@link #getToolbar toolbar}.
 * 
 * A custom toolbar that can be specified by the user to define their own buttons, icons, etc. If this is added, the SmartChart
 * control does not create its own toolbar, but uses this one instead. However, if default actions, such as showSemanticNavigation,
 * showFullScreenButton etc. are set, these actions are added at the left-hand side of the toolbar.
 * 
 * @returns {sap.m.Toolbar}
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getToolbar = function() { return new sap.m.Toolbar(); };

/**
 * Gets current value of property {@link #getUiState uiState}.
 * 
 * The getter returns the current UI state of SmartChart control. The setter replaces the current UI state of SmartChart control with the data represented in <code>uiState</code>.
 * 
 * @returns {sap.ui.comp.state.UIState} Value of property <code>uiState</code>
 * 
 * @experimental since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getUiState = function() { return new sap.ui.comp.state.UIState(); };

/**
 * Gets current value of property {@link #getUseChartPersonalisation useChartPersonalisation}.
 * 
 * If set to <code>true</code>, personalized chart settings are defined. If you want to persist the chart personalization, you need
 * to specify the persistencyKey property.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>useChartPersonalisation</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getUseChartPersonalisation = function() { return false; };

/**
 * Gets current value of property {@link #getUseListForChartTypeSelection useListForChartTypeSelection}.
 * 
 * Controls the visualization for chart type selection. If set to <code>true</code>, the list of available chart types will be
 * displayed. If set to <code>false</code> and there are three or fewer available chart types, the chart types will be displayed as
 * separate buttons in the toolbar. If there are more than three chart types, a list will be shown.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>useListForChartTypeSelection</code>
 * @since 1.38
 * @deprecated As of version 1.48.0. Setting the property to <code>false</code> will have no effect on the visualization of chart type selection anymore.
 * 			   <code>SmartChart</code> will always show a list of chart types, regardless of how many are available.
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getUseListForChartTypeSelection = function() { return false; };

/**
 * Gets current value of property {@link #getUseTooltip useTooltip}.
 * 
 * Controls the usage either of an instance of sap.viz.ui5.controls.VizTooltip or sap.viz.ui5.controls.Popover. If set to
 * <code>true</code>, the tooltip will be displayed, the popover otherwise.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>useTooltip</code>
 * @since 1.36
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getUseTooltip = function() { return false; };

/**
 * Gets current value of property {@link #getUseVariantManagement useVariantManagement}.
 * 
 * If set to <code>true</code>, variants are used. As a prerequisite, you need to specify the persistencyKey property.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>useVariantManagement</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.getUseVariantManagement = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation {@link #getSelectionDetailsActions selectionDetailsActions}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oSelectionDetailsAction The selectionDetailsAction whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.indexOfSelectionDetailsAction = function(oSelectionDetailsAction) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation {@link #getSelectionDetailsActionGroups selectionDetailsActionGroups}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oSelectionDetailsActionGroup The selectionDetailsActionGroup whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.indexOfSelectionDetailsActionGroup = function(oSelectionDetailsActionGroup) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation {@link #getSelectionDetailsItemActions selectionDetailsItemActions}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oSelectionDetailsItemAction The selectionDetailsItemAction whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.indexOfSelectionDetailsItemAction = function(oSelectionDetailsItemAction) { return 0; };

/**
 * Inserts a selectionDetailsAction into the aggregation {@link #getSelectionDetailsActions selectionDetailsActions}.
 * 
 * @param {sap.ui.core.Item}
 *            oSelectionDetailsAction the selectionDetailsAction to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the selectionDetailsAction should be inserted at; for
 *              a negative value of <code>iIndex</code>, the selectionDetailsAction is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the selectionDetailsAction is inserted at
 *              the last position
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.insertSelectionDetailsAction = function(oSelectionDetailsAction,iIndex) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Inserts a selectionDetailsActionGroup into the aggregation {@link #getSelectionDetailsActionGroups selectionDetailsActionGroups}.
 * 
 * @param {sap.ui.core.Item}
 *            oSelectionDetailsActionGroup the selectionDetailsActionGroup to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the selectionDetailsActionGroup should be inserted at; for
 *              a negative value of <code>iIndex</code>, the selectionDetailsActionGroup is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the selectionDetailsActionGroup is inserted at
 *              the last position
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.insertSelectionDetailsActionGroup = function(oSelectionDetailsActionGroup,iIndex) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Inserts a selectionDetailsItemAction into the aggregation {@link #getSelectionDetailsItemActions selectionDetailsItemActions}.
 * 
 * @param {sap.ui.core.Item}
 *            oSelectionDetailsItemAction the selectionDetailsItemAction to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the selectionDetailsItemAction should be inserted at; for
 *              a negative value of <code>iIndex</code>, the selectionDetailsItemAction is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the selectionDetailsItemAction is inserted at
 *              the last position
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.insertSelectionDetailsItemAction = function(oSelectionDetailsItemAction,iIndex) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Checks whether the control is initialized.
 * 
 * @returns {boolean} returns whether control is already initialized
 * @protected
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.isInitialised = function() { return false; };

/**
 * This can be used to trigger binding on the chart used in the SmartChart
 * 
 * @protected
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.rebindChart = function() {  };

/**
 * Removes all the controls from the aggregation {@link #getSelectionDetailsActionGroups selectionDetailsActionGroups}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Item[]} An array of the removed elements (might be empty)
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.removeAllSelectionDetailsActionGroups = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getSelectionDetailsActions selectionDetailsActions}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Item[]} An array of the removed elements (might be empty)
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.removeAllSelectionDetailsActions = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getSelectionDetailsItemActions selectionDetailsItemActions}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Item[]} An array of the removed elements (might be empty)
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.removeAllSelectionDetailsItemActions = function() { return new Array(); };

/**
 * Removes a selectionDetailsAction from the aggregation {@link #getSelectionDetailsActions selectionDetailsActions}.
 * 
 * @param {int | string | sap.ui.core.Item} vSelectionDetailsAction The selectionDetailsAction to remove or its index or id
 * @returns {sap.ui.core.Item} The removed selectionDetailsAction or <code>null</code>
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.removeSelectionDetailsAction = function(vSelectionDetailsAction) { return new sap.ui.core.Item(); };

/**
 * Removes a selectionDetailsActionGroup from the aggregation {@link #getSelectionDetailsActionGroups selectionDetailsActionGroups}.
 * 
 * @param {int | string | sap.ui.core.Item} vSelectionDetailsActionGroup The selectionDetailsActionGroup to remove or its index or id
 * @returns {sap.ui.core.Item} The removed selectionDetailsActionGroup or <code>null</code>
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.removeSelectionDetailsActionGroup = function(vSelectionDetailsActionGroup) { return new sap.ui.core.Item(); };

/**
 * Removes a selectionDetailsItemAction from the aggregation {@link #getSelectionDetailsItemActions selectionDetailsItemActions}.
 * 
 * @param {int | string | sap.ui.core.Item} vSelectionDetailsItemAction The selectionDetailsItemAction to remove or its index or id
 * @returns {sap.ui.core.Item} The removed selectionDetailsItemAction or <code>null</code>
 * 
 * @experimental Since 1.48
 * since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.removeSelectionDetailsItemAction = function(vSelectionDetailsItemAction) { return new sap.ui.core.Item(); };

/**
 * Sets a new value for property {@link #getChartBindingPath chartBindingPath}.
 * 
 * Specifies the path that is used during the binding of the chart. If not specified, the entitySet property is used instead. (used
 * only if binding is established internally/automatically - See enableAutoBinding)
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sChartBindingPath New value for property <code>chartBindingPath</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setChartBindingPath = function(sChartBindingPath) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getChartType chartType}.
 * 
 * Specifies the type of chart to be created by the SmartChart control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sChartType New value for property <code>chartType</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setChartType = function(sChartType) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Applies the current variant based on the sVariantId parameter. If an empty string or null or undefined have been passed, the standard variant
 * will be used. The standard variant will also be used if the passed sVariantId cannot be found. If the flexibility variant, the content for the
 * standard variant, or the personalizable control cannot be obtained, no changes will be made.
 * 
 * @public
 * @param {string} sVariantId ID of the currently selected variant
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setCurrentVariantId = function(sVariantId) {  };

/**
 * Sets a new value for property {@link #getEnableAutoBinding enableAutoBinding}.
 * 
 * If set to <code>true</code>, this enables automatic binding of the chart using the chartBindingPath (if it exists) or entitySet
 * property. This happens right after the <code>initialise</code> event has been fired.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableAutoBinding New value for property <code>enableAutoBinding</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setEnableAutoBinding = function(bEnableAutoBinding) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * The entity set name in the OData metadata against which the chart must be bound.
 * 
 * @param {string} sEntitySetName The entity set
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setEntitySet = function(sEntitySetName) {  };

/**
 * Sets a new value for property {@link #getHeader header}.
 * 
 * Specifies header text that is shown in the chart.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sHeader New value for property <code>header</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setHeader = function(sHeader) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getIgnoredChartTypes ignoredChartTypes}.
 * 
 * CSV of fields that is not shown in the list of available chart types.<br>
 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIgnoredChartTypes New value for property <code>ignoredChartTypes</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setIgnoredChartTypes = function(sIgnoredChartTypes) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getIgnoredFields ignoredFields}.
 * 
 * CSV of fields that must be ignored in the OData metadata by the SmartChart control.<br>
 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIgnoredFields New value for property <code>ignoredFields</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setIgnoredFields = function(sIgnoredFields) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getIgnoreFromPersonalisation ignoreFromPersonalisation}.
 * 
 * CSV of fields that is not shown in the personalization dialog.<br>
 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIgnoreFromPersonalisation New value for property <code>ignoreFromPersonalisation</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setIgnoreFromPersonalisation = function(sIgnoreFromPersonalisation) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getNoData noData}.
 * 
 * Defines the custom text that will be displayed in case no data is found for the current binding.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sNoData New value for property <code>noData</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setNoData = function(sNoData) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getPersistencyKey persistencyKey}.
 * 
 * Key used to access personalization data.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sPersistencyKey New value for property <code>persistencyKey</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setPersistencyKey = function(sPersistencyKey) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getRequestAtLeastFields requestAtLeastFields}.
 * 
 * CSV of fields that must be always requested by the backend system.<br>
 * This property is mainly meant to be used if there is no PresentationVariant annotation.<br>
 * If both this property and the PresentationVariant annotation exist, the select request sent to the backend would be a combination
 * of both.<br>
 * <b>Note:</b> No validation is done. Please ensure that you do not add spaces or special characters. Also, setting this property during
 * runtime, will delete the current drill-stack and lead to a loss of the drill history.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sRequestAtLeastFields New value for property <code>requestAtLeastFields</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setRequestAtLeastFields = function(sRequestAtLeastFields) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets the aggregated {@link #getSemanticObjectController semanticObjectController}.
 * @param {sap.ui.comp.navpopover.SemanticObjectController} oSemanticObjectController The semanticObjectController to set
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setSemanticObjectController = function(oSemanticObjectController) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getShowChartTooltip showChartTooltip}.
 * 
 * Controls the visibility of the chart tooltip. If set to <code>true </code>, an instance of sap.viz.ui5.controls.VizTooltip will
 * be created and shown when hovering over a data point.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowChartTooltip New value for property <code>showChartTooltip</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setShowChartTooltip = function(bShowChartTooltip) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getShowChartTypeSelectionButton showChartTypeSelectionButton}.
 * 
 * Controls the visibility of the chart type selection button.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowChartTypeSelectionButton New value for property <code>showChartTypeSelectionButton</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setShowChartTypeSelectionButton = function(bShowChartTypeSelectionButton) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getShowDetailsButton showDetailsButton}.
 * 
 * Controls the visibility of the Details button. If set to <code>true</code>, the datapoint tooltip will be disabled as the
 * information of selected datapoints will be found in the details popover. This will also set the drill-down button to invisible.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowDetailsButton New value for property <code>showDetailsButton</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setShowDetailsButton = function(bShowDetailsButton) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getShowDownloadButton showDownloadButton}.
 * 
 * Controls the visibility of the chart download button.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowDownloadButton New value for property <code>showDownloadButton</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.39
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setShowDownloadButton = function(bShowDownloadButton) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getShowDrillBreadcrumbs showDrillBreadcrumbs}.
 * 
 * Controls the visibility of the Breadcrumbs control for drilling up within the visible dimensions. If set to <code>true</code>,
 * the toolbar header will be replaced by the Breadcrumbs control. This will also set the drill-up button to invisible.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowDrillBreadcrumbs New value for property <code>showDrillBreadcrumbs</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setShowDrillBreadcrumbs = function(bShowDrillBreadcrumbs) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getShowVariantManagement showVariantManagement}.
 * 
 * Controls the visibility of the Variant Management.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowVariantManagement New value for property <code>showVariantManagement</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setShowVariantManagement = function(bShowVariantManagement) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getSmartFilterId smartFilterId}.
 * 
 * ID of the corresponding SmartFilter control. If specified, the SmartChart control searches for the SmartFilter control (also in the
 * closest parent view) and attaches to the relevant events of the SmartFilter control to fetch data, show overlay etc.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSmartFilterId New value for property <code>smartFilterId</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setSmartFilterId = function(sSmartFilterId) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets the associated {@link #getSmartVariant smartVariant}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oSmartVariant ID of an element which becomes the new target of this smartVariant association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setSmartVariant = function(oSmartVariant) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets the aggregated {@link #getToolbar toolbar}.
 * @param {sap.m.Toolbar} oToolbar The toolbar to set
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setToolbar = function(oToolbar) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getUiState uiState}.
 * 
 * The getter returns the current UI state of SmartChart control. The setter replaces the current UI state of SmartChart control with the data represented in <code>uiState</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.comp.state.UIState} sUiState New value for property <code>uiState</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @experimental since 1.48
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setUiState = function(sUiState) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getUseChartPersonalisation useChartPersonalisation}.
 * 
 * If set to <code>true</code>, personalized chart settings are defined. If you want to persist the chart personalization, you need
 * to specify the persistencyKey property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUseChartPersonalisation New value for property <code>useChartPersonalisation</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setUseChartPersonalisation = function(bUseChartPersonalisation) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getUseListForChartTypeSelection useListForChartTypeSelection}.
 * 
 * Controls the visualization for chart type selection. If set to <code>true</code>, the list of available chart types will be
 * displayed. If set to <code>false</code> and there are three or fewer available chart types, the chart types will be displayed as
 * separate buttons in the toolbar. If there are more than three chart types, a list will be shown.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUseListForChartTypeSelection New value for property <code>useListForChartTypeSelection</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * @deprecated As of version 1.48.0. Setting the property to <code>false</code> will have no effect on the visualization of chart type selection anymore.
 * 			   <code>SmartChart</code> will always show a list of chart types, regardless of how many are available.
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setUseListForChartTypeSelection = function(bUseListForChartTypeSelection) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getUseTooltip useTooltip}.
 * 
 * Controls the usage either of an instance of sap.viz.ui5.controls.VizTooltip or sap.viz.ui5.controls.Popover. If set to
 * <code>true</code>, the tooltip will be displayed, the popover otherwise.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUseTooltip New value for property <code>useTooltip</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setUseTooltip = function(bUseTooltip) { return new sap.ui.comp.smartchart.SmartChart(); };

/**
 * Sets a new value for property {@link #getUseVariantManagement useVariantManagement}.
 * 
 * If set to <code>true</code>, variants are used. As a prerequisite, you need to specify the persistencyKey property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUseVariantManagement New value for property <code>useVariantManagement</code>
 * @returns {sap.ui.comp.smartchart.SmartChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartchart.SmartChart.prototype.setUseVariantManagement = function(bUseVariantManagement) { return new sap.ui.comp.smartchart.SmartChart(); };


// ---- sap.ui.comp.smartfield.Configuration --------------------------------------------------------------------------

/**
 * Constructor for a new smartfield/Configuration.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getControlType controlType} : sap.ui.comp.smartfield.ControlType</li>
 * <li>{@link #getDisplayBehaviour displayBehaviour} : sap.ui.comp.smartfield.DisplayBehaviour</li>
 * <li>{@link #getPreventInitialDataFetchInValueHelpDialog preventInitialDataFetchInValueHelpDialog} : boolean (default: true)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The configuration allows to further define the behavior of a SmartField.
 * @extends sap.ui.core.Element
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartfield.Configuration = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.comp.smartfield.Configuration with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfield.Configuration.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getControlType controlType}.
 * 
 * By default the SmartField chooses the controls it hosts by interpreting OData metadata. This property allows to overwrite the
 * default behavior to some extent. For example makes it possible to define that an OData property of type Edm.Boolean is displayed as
 * a combo box.
 * 
 * @returns {sap.ui.comp.smartfield.ControlType} Value of property <code>controlType</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.Configuration.prototype.getControlType = function() { return new sap.ui.comp.smartfield.ControlType(); };

/**
 * Gets current value of property {@link #getDisplayBehaviour displayBehaviour}.
 * 
 * The property specifies how value help, that is available for input fields, is presented. For example, it specifies whether the
 * descriptions of the values shown in the result after a query are displayed.
 * 
 * @returns {sap.ui.comp.smartfield.DisplayBehaviour} Value of property <code>displayBehaviour</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.Configuration.prototype.getDisplayBehaviour = function() { return new sap.ui.comp.smartfield.DisplayBehaviour(); };

/**
 * Returns a metadata object for class sap.ui.comp.smartfield.Configuration.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfield.Configuration.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPreventInitialDataFetchInValueHelpDialog preventInitialDataFetchInValueHelpDialog}.
 * 
 * If there are value help annotations for a smart field, it is possible to specify whether the table in the value help dialog for
 * this field will be filled initially. The default value is <code>true</code>, which means the table will not be filled as the
 * data fetch is prevented.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>preventInitialDataFetchInValueHelpDialog</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.Configuration.prototype.getPreventInitialDataFetchInValueHelpDialog = function() { return false; };

/**
 * Sets a new value for property {@link #getControlType controlType}.
 * 
 * By default the SmartField chooses the controls it hosts by interpreting OData metadata. This property allows to overwrite the
 * default behavior to some extent. For example makes it possible to define that an OData property of type Edm.Boolean is displayed as
 * a combo box.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.comp.smartfield.ControlType} sControlType New value for property <code>controlType</code>
 * @returns {sap.ui.comp.smartfield.Configuration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.Configuration.prototype.setControlType = function(sControlType) { return new sap.ui.comp.smartfield.Configuration(); };

/**
 * Sets a new value for property {@link #getDisplayBehaviour displayBehaviour}.
 * 
 * The property specifies how value help, that is available for input fields, is presented. For example, it specifies whether the
 * descriptions of the values shown in the result after a query are displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.comp.smartfield.DisplayBehaviour} sDisplayBehaviour New value for property <code>displayBehaviour</code>
 * @returns {sap.ui.comp.smartfield.Configuration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.Configuration.prototype.setDisplayBehaviour = function(sDisplayBehaviour) { return new sap.ui.comp.smartfield.Configuration(); };

/**
 * Sets a new value for property {@link #getPreventInitialDataFetchInValueHelpDialog preventInitialDataFetchInValueHelpDialog}.
 * 
 * If there are value help annotations for a smart field, it is possible to specify whether the table in the value help dialog for
 * this field will be filled initially. The default value is <code>true</code>, which means the table will not be filled as the
 * data fetch is prevented.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bPreventInitialDataFetchInValueHelpDialog New value for property <code>preventInitialDataFetchInValueHelpDialog</code>
 * @returns {sap.ui.comp.smartfield.Configuration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.Configuration.prototype.setPreventInitialDataFetchInValueHelpDialog = function(bPreventInitialDataFetchInValueHelpDialog) { return new sap.ui.comp.smartfield.Configuration(); };


// ---- sap.ui.comp.smartfield.ControlContextType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.smartfield.ControlContextType.toString = function() { return ""; };

// ---- sap.ui.comp.smartfield.ControlProposal --------------------------------------------------------------------------

/**
 * Constructor for a new smartfield/ControlProposal.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getControlType controlType} : sap.ui.comp.smartfield.ControlProposalType (default: None)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getObjectStatus objectStatus} : sap.ui.comp.smartfield.ObjectStatus</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Proposes a control to be rendered. The smart field may ignore the proposal.
 * @extends sap.ui.core.Element
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartfield.ControlProposal = function(sId,mSettings) {};
/**
 * Destroys the objectStatus in the aggregation {@link #getObjectStatus objectStatus}.
 * @returns {sap.ui.comp.smartfield.ControlProposal} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlProposal.prototype.destroyObjectStatus = function() { return new sap.ui.comp.smartfield.ControlProposal(); };

/**
 * Creates a new subclass of class sap.ui.comp.smartfield.ControlProposal with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfield.ControlProposal.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getControlType controlType}.
 * 
 * By default the SmartField chooses the controls it hosts by interpreting OData meta data. This property allows to overwrite the default behavior to some
 * extent; for example this property allows to define that an OData property of type Edm.Boolean is displayed as combo box.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.comp.smartfield.ControlProposalType} Value of property <code>controlType</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlProposal.prototype.getControlType = function() { return new sap.ui.comp.smartfield.ControlProposalType(); };

/**
 * Returns a metadata object for class sap.ui.comp.smartfield.ControlProposal.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfield.ControlProposal.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getObjectStatus objectStatus}.
 * 
 * Optional definition to further qualify how an object status control should be rendered.
 * 
 * @returns {sap.ui.comp.smartfield.ObjectStatus}
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlProposal.prototype.getObjectStatus = function() { return new sap.ui.comp.smartfield.ObjectStatus(); };

/**
 * Sets a new value for property {@link #getControlType controlType}.
 * 
 * By default the SmartField chooses the controls it hosts by interpreting OData meta data. This property allows to overwrite the default behavior to some
 * extent; for example this property allows to define that an OData property of type Edm.Boolean is displayed as combo box.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.comp.smartfield.ControlProposalType} sControlType New value for property <code>controlType</code>
 * @returns {sap.ui.comp.smartfield.ControlProposal} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlProposal.prototype.setControlType = function(sControlType) { return new sap.ui.comp.smartfield.ControlProposal(); };

/**
 * Sets the aggregated {@link #getObjectStatus objectStatus}.
 * @param {sap.ui.comp.smartfield.ObjectStatus} oObjectStatus The objectStatus to set
 * @returns {sap.ui.comp.smartfield.ControlProposal} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlProposal.prototype.setObjectStatus = function(oObjectStatus) { return new sap.ui.comp.smartfield.ControlProposal(); };


// ---- sap.ui.comp.smartfield.ControlProposalType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.smartfield.ControlProposalType.toString = function() { return ""; };

// ---- sap.ui.comp.smartfield.ControlType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.smartfield.ControlType.toString = function() { return ""; };

// ---- sap.ui.comp.smartfield.CriticalityRepresentationType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.smartfield.CriticalityRepresentationType.toString = function() { return ""; };

// ---- sap.ui.comp.smartfield.DisplayBehaviour --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.smartfield.DisplayBehaviour.toString = function() { return ""; };

// ---- sap.ui.comp.smartfield.JSONType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.smartfield.JSONType.toString = function() { return ""; };

// ---- sap.ui.comp.smartfield.ObjectStatus --------------------------------------------------------------------------

/**
 * Constructor for a new smartfield/ObjectStatus.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getCriticality criticality} : any</li>
 * <li>{@link #getCriticalityRepresentationType criticalityRepresentationType} : sap.ui.comp.smartfield.CriticalityRepresentationType (default: WithIcon)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class Defines a possible object status control to be rendered. The smart field may ignore the proposal.
 * @extends sap.ui.core.Element
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartfield.ObjectStatus = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.comp.smartfield.ObjectStatus with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfield.ObjectStatus.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getCriticality criticality}.
 * 
 * Optional attribute, which can be set, if the control type has the value ObjectStatus.
 * 
 * @returns {any} Value of property <code>criticality</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ObjectStatus.prototype.getCriticality = function() { return null; };

/**
 * Gets current value of property {@link #getCriticalityRepresentationType criticalityRepresentationType}.
 * 
 * Optional attribute, which can be set to control how the criticality is visualized.
 * 
 * Default value is <code>WithIcon</code>.
 * @returns {sap.ui.comp.smartfield.CriticalityRepresentationType} Value of property <code>criticalityRepresentationType</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ObjectStatus.prototype.getCriticalityRepresentationType = function() { return new sap.ui.comp.smartfield.CriticalityRepresentationType(); };

/**
 * Returns a metadata object for class sap.ui.comp.smartfield.ObjectStatus.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfield.ObjectStatus.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sets a new value for property {@link #getCriticality criticality}.
 * 
 * Optional attribute, which can be set, if the control type has the value ObjectStatus.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oCriticality New value for property <code>criticality</code>
 * @returns {sap.ui.comp.smartfield.ObjectStatus} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ObjectStatus.prototype.setCriticality = function(oCriticality) { return new sap.ui.comp.smartfield.ObjectStatus(); };

/**
 * Sets a new value for property {@link #getCriticalityRepresentationType criticalityRepresentationType}.
 * 
 * Optional attribute, which can be set to control how the criticality is visualized.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>WithIcon</code>.
 * @param {sap.ui.comp.smartfield.CriticalityRepresentationType} sCriticalityRepresentationType New value for property <code>criticalityRepresentationType</code>
 * @returns {sap.ui.comp.smartfield.ObjectStatus} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ObjectStatus.prototype.setCriticalityRepresentationType = function(sCriticalityRepresentationType) { return new sap.ui.comp.smartfield.ObjectStatus(); };


// ---- sap.ui.comp.smartfield.SmartField --------------------------------------------------------------------------

/**
 * Constructor for a new <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : any</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getEntitySet entitySet} : string (default: )</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getContextEditable contextEditable} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: )</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: Initial)</li>
 * <li>{@link #getPlaceholder placeholder} : string (default: )</li>
 * <li>{@link #getName name} : string (default: )</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: None)</li>
 * <li>{@link #getValueStateText valueStateText} : string (default: )</li>
 * <li>{@link #getShowValueStateMessage showValueStateMessage} : boolean (default: true)</li>
 * <li>{@link #getJsontype jsontype} : sap.ui.comp.smartfield.JSONType</li>
 * <li>{@link #getMandatory mandatory} : boolean (default: false)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getShowSuggestion showSuggestion} : boolean (default: true)</li>
 * <li>{@link #getShowValueHelp showValueHelp} : boolean (default: true)</li>
 * <li>{@link #getShowLabel showLabel} : boolean (default: true)</li>
 * <li>{@link #getTextLabel textLabel} : string (default: )</li>
 * <li>{@link #getTooltipLabel tooltipLabel} : string (default: )</li>
 * <li>{@link #getUomVisible uomVisible} : boolean (default: true)</li>
 * <li>{@link #getUomEditable uomEditable} : boolean (default: true)</li>
 * <li>{@link #getUomEnabled uomEnabled} : boolean (default: true)</li>
 * <li>{@link #getUrl url} : string (default: )</li>
 * <li>{@link #getUomEditState uomEditState} : int (default: -1)</li>
 * <li>{@link #getControlContext controlContext} : sap.ui.comp.smartfield.ControlContextType (default: None)</li>
 * <li>{@link #getProposedControl proposedControl} : sap.ui.comp.smartfield.ControlProposalType (default: None)</li>
 * <li>{@link #getWrapping wrapping} : boolean (default: true)</li>
 * <li>{@link #getClientSideMandatoryCheck clientSideMandatoryCheck} : boolean (default: true)</li>
 * <li>{@link #getFetchValueListReadOnly fetchValueListReadOnly} : boolean (default: true)</li>
 * <li>{@link #getExpandNavigationProperties expandNavigationProperties} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getConfiguration configuration} : sap.ui.comp.smartfield.Configuration</li>
 * <li>{@link #getControlProposal controlProposal} : sap.ui.comp.smartfield.ControlProposal</li>
 * <li>{@link #getSemanticObjectController semanticObjectController} : sap.ui.comp.navpopover.SemanticObjectController</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:entitySetFound entitySetFound} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:initialise initialise} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:visibleChanged visibleChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:editableChanged editableChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:contextEditableChanged contextEditableChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:innerControlsCreated innerControlsCreated} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:valueListChanged valueListChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class The <code>SmartField</code> control is a wrapper for other controls. It interprets OData metadata to determine the control that has to
 *        be instantiated. The OData entity is derived from the control's binding context. The OData entity's property that is changed or
 *        displayed with the control is derived from the control's value property.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @constructor
 * @public
 * @ui5-metamodel This control will also be described in the UI5 (legacy) design time meta model
 * 
 */
sap.ui.comp.smartfield.SmartField = function(sId,mSettings) {};
/**
 * The event is fired after the text in the field has been changed and the focus leaves the field, or after the Enter key has been
 * pressed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.value The current value inside the text field
 * @param {string} oControlEvent.getParameters.newValue The new value inside the text field
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.change = function(oControlEvent) {  };

/**
 * The event is fired after the context editable property of the control has changed.
 * @event
 * @since 1.32.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.editable The value of the context editable property of the control
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.contextEditableChanged = function(oControlEvent) {  };

/**
 * The event is fired after the value of editable property of the control has changed.
 * @event
 * @since 1.30.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.editable If <code>true</code>, the control is in edit mode
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.editableChanged = function(oControlEvent) {  };

/**
 * The OData entity set is either derived from the control's binding context or from control's entity set property, if a value for it
 * is specified. In both cases this event is fired.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.entitySet The path to the found entity set
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.entitySetFound = function(oControlEvent) {  };

/**
 * The event is fired after the smart field has calculated its metadata.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.initialise = function(oControlEvent) {  };

/**
 * The event is fired after the inner controls have been created. The created controls can be obtained via oControl.getInnerControls().
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.innerControlsCreated = function(oControlEvent) {  };

/**
 * Fires when the user triggers the link control or taps/clicks on an active title of the object identifier control.
 * @event
 * @since 1.36.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.press = function(oControlEvent) {  };

/**
 * The event is fired when after selection of values with value help or auto-suggest, the model is updated with the selected data.
 * @event
 * @since 1.31.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Control[]} oControlEvent.getParameters.changes An array of selected values
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.valueListChanged = function(oControlEvent) {  };

/**
 * The event is fired after the visibility of the control has changed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.visible If <code>true</code>, the control is visible
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.visibleChanged = function(oControlEvent) {  };

/**
 * Resolves the controls hosted currently by this <code>SmartField</code>.
 * 
 * @returns {array} The controls hosted currently by this <code>SmartField</code>
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype._getEmbeddedSmartField = function() { return null; };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34.2
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartfield.SmartField</code> itself.
 * 
 * The event is fired after the text in the field has been changed and the focus leaves the field, or after the Enter key has been
 * pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartfield.SmartField</code> itself
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:contextEditableChanged contextEditableChanged} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartfield.SmartField</code> itself.
 * 
 * The event is fired after the context editable property of the control has changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartfield.SmartField</code> itself
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.32.0
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.attachContextEditableChanged = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:editableChanged editableChanged} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartfield.SmartField</code> itself.
 * 
 * The event is fired after the value of editable property of the control has changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartfield.SmartField</code> itself
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.30.0
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.attachEditableChanged = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:entitySetFound entitySetFound} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartfield.SmartField</code> itself.
 * 
 * The OData entity set is either derived from the control's binding context or from control's entity set property, if a value for it
 * is specified. In both cases this event is fired.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartfield.SmartField</code> itself
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.attachEntitySetFound = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:initialise initialise} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartfield.SmartField</code> itself.
 * 
 * The event is fired after the smart field has calculated its metadata.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartfield.SmartField</code> itself
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.attachInitialise = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:innerControlsCreated innerControlsCreated} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartfield.SmartField</code> itself.
 * 
 * The event is fired after the inner controls have been created. The created controls can be obtained via oControl.getInnerControls().
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartfield.SmartField</code> itself
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.attachInnerControlsCreated = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartfield.SmartField</code> itself.
 * 
 * Fires when the user triggers the link control or taps/clicks on an active title of the object identifier control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartfield.SmartField</code> itself
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.36.0
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:valueListChanged valueListChanged} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartfield.SmartField</code> itself.
 * 
 * The event is fired when after selection of values with value help or auto-suggest, the model is updated with the selected data.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartfield.SmartField</code> itself
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.31.0
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.attachValueListChanged = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:visibleChanged visibleChanged} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartfield.SmartField</code> itself.
 * 
 * The event is fired after the visibility of the control has changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartfield.SmartField</code> itself
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.attachVisibleChanged = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Returns whether a client error has been detected. Additionally the error message is shown, if this is not the case already.
 * 
 * @returns {boolean} <code>true</code>, if a client error has been detected, <code>false</code> otherwise
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.checkClientError = function() { return false; };

/**
 * Destroys the configuration in the aggregation {@link #getConfiguration configuration}.
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.destroyConfiguration = function() { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Destroys the controlProposal in the aggregation {@link #getControlProposal controlProposal}.
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * @deprecated Since 1.34.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.destroyControlProposal = function() { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Destroys the semanticObjectController in the aggregation {@link #getSemanticObjectController semanticObjectController}.
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.destroySemanticObjectController = function() { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.detachChange = function(fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:contextEditableChanged contextEditableChanged} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.detachContextEditableChanged = function(fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:editableChanged editableChanged} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.detachEditableChanged = function(fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:entitySetFound entitySetFound} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.detachEntitySetFound = function(fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:initialise initialise} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.detachInitialise = function(fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:innerControlsCreated innerControlsCreated} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.detachInnerControlsCreated = function(fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.detachPress = function(fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:valueListChanged valueListChanged} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.31.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.detachValueListChanged = function(fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:visibleChanged visibleChanged} event of this <code>sap.ui.comp.smartfield.SmartField</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.detachVisibleChanged = function(fnFunction,oListener) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Creates a new subclass of class sap.ui.comp.smartfield.SmartField with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfield.SmartField.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:change change} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.value] The current value inside the text field
 * @param {string} [mParameters.newValue] The new value inside the text field
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.fireChange = function(mParameters) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Fires event {@link #event:contextEditableChanged contextEditableChanged} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.editable] The value of the context editable property of the control
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.32.0
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.fireContextEditableChanged = function(mParameters) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Fires event {@link #event:editableChanged editableChanged} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.editable] If <code>true</code>, the control is in edit mode
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.30.0
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.fireEditableChanged = function(mParameters) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Fires event {@link #event:entitySetFound entitySetFound} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.entitySet] The path to the found entity set
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.fireEntitySetFound = function(mParameters) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Fires event {@link #event:initialise initialise} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.fireInitialise = function(mParameters) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Fires event {@link #event:innerControlsCreated innerControlsCreated} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.fireInnerControlsCreated = function(mParameters) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.36.0
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.firePress = function(mParameters) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Fires event {@link #event:valueListChanged valueListChanged} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.Control[]} [mParameters.changes] An array of selected values
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.31.0
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.fireValueListChanged = function(mParameters) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Fires event {@link #event:visibleChanged visibleChanged} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.visible] If <code>true</code>, the control is visible
 * 
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.fireVisibleChanged = function(mParameters) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * @since 1.34.2
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getClientSideMandatoryCheck clientSideMandatoryCheck}.
 * 
 * Determines if the mandatory check happens on the client side <code>true</code> or on the server side <code>false</code>.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>clientSideMandatoryCheck</code>
 * @since 1.38.3
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getClientSideMandatoryCheck = function() { return false; };

/**
 * Gets content of aggregation {@link #getConfiguration configuration}.
 * 
 * Optional configuration for <code>SmartField</code>.
 * 
 * @returns {sap.ui.comp.smartfield.Configuration}
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getConfiguration = function() { return new sap.ui.comp.smartfield.Configuration(); };

/**
 * Gets current value of property {@link #getContextEditable contextEditable}.
 * 
 * Notifies the control whether controls using the <code>SmartField</code> control are editable.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>contextEditable</code>
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getContextEditable = function() { return false; };

/**
 * Gets current value of property {@link #getControlContext controlContext}.
 * 
 * Defines the context in which the layout of the <code>SmartField</code> control has to be interpreted.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.comp.smartfield.ControlContextType} Value of property <code>controlContext</code>
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getControlContext = function() { return new sap.ui.comp.smartfield.ControlContextType(); };

/**
 * Gets content of aggregation {@link #getControlProposal controlProposal}.
 * 
 * Proposes a control to be rendered. The <code>SmartField</code> control can ignore the proposal.
 * 
 * @returns {sap.ui.comp.smartfield.ControlProposal}
 * @since 1.32.0
 * @deprecated Since 1.34.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getControlProposal = function() { return new sap.ui.comp.smartfield.ControlProposal(); };

/**
 * Returns the OData property to which the <code>value</code> property of the control is bound.
 * 
 * @returns {object} The OData property.
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getDataProperty = function() { return new Object(); };

/**
 * Returns the EDM data type of the OData property to which the value property of the control is bound to. If no model or no OData property is
 * available <code>null</code> is returned.
 * 
 * @returns {string} The data type to which the value property is bound.
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getDataType = function() { return ""; };

/**
 * Gets current value of property {@link #getEditable editable}.
 * 
 * Sets the control into an editable mode or a display mode.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>editable</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getEditable = function() { return false; };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Indicates whether the user can interact with the control or not. <b>Note:</b> Disabled controls cannot be focused and they are out
 * of the tab order.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getEntitySet entitySet}.
 * 
 * The name of an entity set for which the control manages values. This is an optional property.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>entitySet</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getEntitySet = function() { return ""; };

/**
 * Gets current value of property {@link #getExpandNavigationProperties expandNavigationProperties}.
 * 
 * Indicates if entities related to navigation properties inside the metadata are requested.
 * If set to <code>true</code>, then these related entities are loaded with an $expand request.
 * 
 * Annotations that can have navigation properties are the following:
 * <ul>
 * 	<li> <code>com.sap.vocabularies.Common.v1.Text</code> for text arrangements
 * 	<li> <code>Org.OData.Measures.V1.Unit</code> and <code>Org.OData.Measures.V1.ISOCurrency</code> for units
 * 	<li> <code>com.sap.vocabularies.Common.v1.FieldControl</code> for field control
 * </ul>
 * 
 * <b>Note:</b> Independent of the <code>fetchValueListReadOnly</code> value, setting this flag to <code>true</code>
 * requests data from the backend.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>expandNavigationProperties</code>
 * @since 1.48
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getExpandNavigationProperties = function() { return false; };

/**
 * Gets current value of property {@link #getFetchValueListReadOnly fetchValueListReadOnly}.
 * 
 * Determines whether the <code>SmartField</code> control fetches its value list to display the description for a given key (<code>value</code>
 * property) in read-only mode. If the value list is not fetched by the read-only <code>SmartField</code> control, the application
 * has to make sure that the description is requested and made available, for example, by using $expand. In this case the
 * <code>SmartField</code> control will display the description if the path to the description has been set using the
 * <code>com.sap.vocabularies.Common.v1.Text</code> annotation.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>fetchValueListReadOnly</code>
 * @since 1.42.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getFetchValueListReadOnly = function() { return false; };

/**
 * Returns the DOM element that gets the focus.
 * 
 * @returns {sap.ui.core.Element} The DOM element that should get the focus, can be <code>null</code>
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getFocusDomRef = function() { return new sap.ui.core.Element(); };

/**
 * Resolves the controls hosted currently by this <code>SmartField</code> control.
 * 
 * @returns {array} The controls hosted currently by this <code>SmartField</code>
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getInnerControls = function() { return null; };

/**
 * Gets current value of property {@link #getJsontype jsontype}.
 * 
 * Data types to be used, if the <code>SmartField</code> control is interacting with a JSON model. If the value property of the
 * control is bound to a property of an OData entity set, this property is not taken into consideration.
 * 
 * @returns {sap.ui.comp.smartfield.JSONType} Value of property <code>jsontype</code>
 * 
 * @deprecated Since 1.31.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getJsontype = function() { return new sap.ui.comp.smartfield.JSONType(); };

/**
 * Gets current value of property {@link #getMandatory mandatory}.
 * 
 * If set to <code>true</code>, a user input is required.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>mandatory</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getMandatory = function() { return false; };

/**
 * Gets current value of property {@link #getMaxLength maxLength}.
 * 
 * Maximum number of characters. Value <code>0</code> means the feature is switched off.
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>maxLength</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getMaxLength = function() { return 0; };

/**
 * Returns a metadata object for class sap.ui.comp.smartfield.SmartField.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfield.SmartField.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * To be used in the HTML code (for example, for HTML forms that send data to the server via 'submit').
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getName = function() { return ""; };

/**
 * Gets current value of property {@link #getPlaceholder placeholder}.
 * 
 * Text shown when no value available.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>placeholder</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getPlaceholder = function() { return ""; };

/**
 * Gets current value of property {@link #getProposedControl proposedControl}.
 * 
 * Proposes a control to be rendered. The <code>SmartField</code> control can ignore the proposal.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.comp.smartfield.ControlProposalType} Value of property <code>proposedControl</code>
 * @since 1.32.0
 * @deprecated Since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getProposedControl = function() { return new sap.ui.comp.smartfield.ControlProposalType(); };

/**
 * Returns the value of the <code>mandatory</code> property if the <code>SmartField</code> is editable.
 * 
 * This function is needed as the "mandatory" feature is named "required" in a lot of other controls
 * (like <code>Label</code> or <code>Form</code>).
 * @returns {boolean} the true if the <code>SmartField</code> should be marked as required
 * @since 1.48.0
 * @protected
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getRequired = function() { return false; };

/**
 * Gets content of aggregation {@link #getSemanticObjectController semanticObjectController}.
 * 
 * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.
 * 
 * @returns {sap.ui.comp.navpopover.SemanticObjectController}
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getSemanticObjectController = function() { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Gets current value of property {@link #getShowLabel showLabel}.
 * 
 * If set to <code>false</code> the label is not displayed.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showLabel</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getShowLabel = function() { return false; };

/**
 * Gets current value of property {@link #getShowSuggestion showSuggestion}.
 * 
 * If set to <code>true</code>, the suggestion feature for a hosted control is enabled, if the hosted control supports it.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showSuggestion</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getShowSuggestion = function() { return false; };

/**
 * Gets current value of property {@link #getShowValueHelp showValueHelp}.
 * 
 * If set to <code>true</code>, a value help indicator will be displayed inside the hosted control, if the hosted control supports
 * this.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showValueHelp</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getShowValueHelp = function() { return false; };

/**
 * Gets current value of property {@link #getShowValueStateMessage showValueStateMessage}.
 * 
 * Defines whether the value state message is shown or not.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showValueStateMessage</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getShowValueStateMessage = function() { return false; };

/**
 * Calculates the paths to the annotations used by the <code>SmartField</code> control.
 * 
 * @param {sap.ui.model.odata.ODataMetaModel} oMetaModel The given OData meta model
 * @param {object} oEntitySet The given entity set
 * @param {string} sValueBinding The path identifying the OData property to which the value property of the <code>SmartField</code> is bound
 * @param {boolean} bNavigationPathsOnly If set to <code>true</code>, no properties are returned
 * @returns {array} The resulting paths are returned
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.getSupportedAnnotationPaths = function(oMetaModel,oEntitySet,sValueBinding,bNavigationPathsOnly) { return null; };

/**
 * Gets current value of property {@link #getTextAlign textAlign}.
 * 
 * Horizontal alignment of the text.
 * 
 * Default value is <code>Initial</code>.
 * @returns {sap.ui.core.TextAlign} Value of property <code>textAlign</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getTextAlign = function() { return new sap.ui.core.TextAlign(); };

/**
 * Gets current value of property {@link #getTextLabel textLabel}.
 * 
 * This property contains the text of an associated <code>SmartLabel</code>.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>textLabel</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getTextLabel = function() { return ""; };

/**
 * Gets current value of property {@link #getTooltipLabel tooltipLabel}.
 * 
 * This property contains the tool tip of the associated <code>SmartLabel</code> control.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>tooltipLabel</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getTooltipLabel = function() { return ""; };

/**
 * If the OData property to which the control's value property is bound semantically represents a unit of measure, the value of the current unit
 * of measure is returned. Otherwise <code>null</code> is returned.
 * 
 * @returns {any} The current unit of measure is returned, which can be <code>null</code
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getUnitOfMeasure = function() { return null; };

/**
 * Gets current value of property {@link #getUomEditable uomEditable}.
 * 
 * Editable state of the unit, if the <code>SmartField</code> control addresses unit of measure use cases, for example, an amount
 * and its associated currency.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>uomEditable</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getUomEditable = function() { return false; };

/**
 * Gets current value of property {@link #getUomEditState uomEditState}.
 * 
 * This property is for internal use only.
 * 
 * Default value is <code>-1</code>.
 * @returns {int} Value of property <code>uomEditState</code>
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getUomEditState = function() { return 0; };

/**
 * Gets current value of property {@link #getUomEnabled uomEnabled}.
 * 
 * Enabled state of the unit, if the <code>SmartField</code> control addresses unit of measure use cases, for example, an amount and
 * its associated currency.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>uomEnabled</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getUomEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getUomVisible uomVisible}.
 * 
 * Visible state of the unit, if the <code>SmartField</code> control addresses unit of measure use cases, for example, an amount and
 * its associated currency.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>uomVisible</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getUomVisible = function() { return false; };

/**
 * Gets current value of property {@link #getUrl url}.
 * 
 * Contains a URL which is used to render a link. The link is rendered, if the OData property, to which the value property of the
 * control is bound, is of type <code>Edm.String</code> and the <code>SmartField</code> is in display mode.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>url</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getUrl = function() { return ""; };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * The value property keeps the current value of the control. If a binding expression is configured, this is used to determine the
 * property of an OData entity.
 * 
 * @returns {any} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getValue = function() { return null; };

/**
 * Gets current value of property {@link #getValueState valueState}.
 * 
 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.ValueState} Value of property <code>valueState</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getValueState = function() { return new sap.ui.core.ValueState(); };

/**
 * Gets current value of property {@link #getValueStateText valueStateText}.
 * 
 * The text which is shown in the value state message popup.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>valueStateText</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getValueStateText = function() { return ""; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width of the control.
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getWrapping wrapping}.
 * 
 * Indicates whether the control break lines (in display mode) to prevent overflow.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>wrapping</code>
 * @since 1.36.6
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.getWrapping = function() { return false; };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * @since 1.34.2
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * @since 1.34.2
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getClientSideMandatoryCheck clientSideMandatoryCheck}.
 * 
 * Determines if the mandatory check happens on the client side <code>true</code> or on the server side <code>false</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bClientSideMandatoryCheck New value for property <code>clientSideMandatoryCheck</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.3
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setClientSideMandatoryCheck = function(bClientSideMandatoryCheck) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets the aggregated {@link #getConfiguration configuration}.
 * @param {sap.ui.comp.smartfield.Configuration} oConfiguration The configuration to set
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setConfiguration = function(oConfiguration) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getContextEditable contextEditable}.
 * 
 * Notifies the control whether controls using the <code>SmartField</code> control are editable.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bContextEditable New value for property <code>contextEditable</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setContextEditable = function(bContextEditable) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getControlContext controlContext}.
 * 
 * Defines the context in which the layout of the <code>SmartField</code> control has to be interpreted.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.comp.smartfield.ControlContextType} sControlContext New value for property <code>controlContext</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setControlContext = function(sControlContext) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets the aggregated {@link #getControlProposal controlProposal}.
 * @param {sap.ui.comp.smartfield.ControlProposal} oControlProposal The controlProposal to set
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * @deprecated Since 1.34.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setControlProposal = function(oControlProposal) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getEditable editable}.
 * 
 * Sets the control into an editable mode or a display mode.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEditable New value for property <code>editable</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setEditable = function(bEditable) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Indicates whether the user can interact with the control or not. <b>Note:</b> Disabled controls cannot be focused and they are out
 * of the tab order.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setEnabled = function(bEnabled) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getEntitySet entitySet}.
 * 
 * The name of an entity set for which the control manages values. This is an optional property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sEntitySet New value for property <code>entitySet</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setEntitySet = function(sEntitySet) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getExpandNavigationProperties expandNavigationProperties}.
 * 
 * Indicates if entities related to navigation properties inside the metadata are requested.
 * If set to <code>true</code>, then these related entities are loaded with an $expand request.
 * 
 * Annotations that can have navigation properties are the following:
 * <ul>
 * 	<li> <code>com.sap.vocabularies.Common.v1.Text</code> for text arrangements
 * 	<li> <code>Org.OData.Measures.V1.Unit</code> and <code>Org.OData.Measures.V1.ISOCurrency</code> for units
 * 	<li> <code>com.sap.vocabularies.Common.v1.FieldControl</code> for field control
 * </ul>
 * 
 * <b>Note:</b> Independent of the <code>fetchValueListReadOnly</code> value, setting this flag to <code>true</code>
 * requests data from the backend.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bExpandNavigationProperties New value for property <code>expandNavigationProperties</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setExpandNavigationProperties = function(bExpandNavigationProperties) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getFetchValueListReadOnly fetchValueListReadOnly}.
 * 
 * Determines whether the <code>SmartField</code> control fetches its value list to display the description for a given key (<code>value</code>
 * property) in read-only mode. If the value list is not fetched by the read-only <code>SmartField</code> control, the application
 * has to make sure that the description is requested and made available, for example, by using $expand. In this case the
 * <code>SmartField</code> control will display the description if the path to the description has been set using the
 * <code>com.sap.vocabularies.Common.v1.Text</code> annotation.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bFetchValueListReadOnly New value for property <code>fetchValueListReadOnly</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.42.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setFetchValueListReadOnly = function(bFetchValueListReadOnly) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getJsontype jsontype}.
 * 
 * Data types to be used, if the <code>SmartField</code> control is interacting with a JSON model. If the value property of the
 * control is bound to a property of an OData entity set, this property is not taken into consideration.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.comp.smartfield.JSONType} sJsontype New value for property <code>jsontype</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since 1.31.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setJsontype = function(sJsontype) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getMandatory mandatory}.
 * 
 * If set to <code>true</code>, a user input is required.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bMandatory New value for property <code>mandatory</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setMandatory = function(bMandatory) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getMaxLength maxLength}.
 * 
 * Maximum number of characters. Value <code>0</code> means the feature is switched off.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {int} iMaxLength New value for property <code>maxLength</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setMaxLength = function(iMaxLength) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * To be used in the HTML code (for example, for HTML forms that send data to the server via 'submit').
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setName = function(sName) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getPlaceholder placeholder}.
 * 
 * Text shown when no value available.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sPlaceholder New value for property <code>placeholder</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setPlaceholder = function(sPlaceholder) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getProposedControl proposedControl}.
 * 
 * Proposes a control to be rendered. The <code>SmartField</code> control can ignore the proposal.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.comp.smartfield.ControlProposalType} sProposedControl New value for property <code>proposedControl</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * @deprecated Since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setProposedControl = function(sProposedControl) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets the aggregated {@link #getSemanticObjectController semanticObjectController}.
 * @param {sap.ui.comp.navpopover.SemanticObjectController} oSemanticObjectController The semanticObjectController to set
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setSemanticObjectController = function(oSemanticObjectController) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getShowLabel showLabel}.
 * 
 * If set to <code>false</code> the label is not displayed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowLabel New value for property <code>showLabel</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setShowLabel = function(bShowLabel) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getShowSuggestion showSuggestion}.
 * 
 * If set to <code>true</code>, the suggestion feature for a hosted control is enabled, if the hosted control supports it.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowSuggestion New value for property <code>showSuggestion</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setShowSuggestion = function(bShowSuggestion) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getShowValueHelp showValueHelp}.
 * 
 * If set to <code>true</code>, a value help indicator will be displayed inside the hosted control, if the hosted control supports
 * this.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowValueHelp New value for property <code>showValueHelp</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setShowValueHelp = function(bShowValueHelp) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getShowValueStateMessage showValueStateMessage}.
 * 
 * Defines whether the value state message is shown or not.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowValueStateMessage New value for property <code>showValueStateMessage</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setShowValueStateMessage = function(bShowValueStateMessage) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getTextAlign textAlign}.
 * 
 * Horizontal alignment of the text.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Initial</code>.
 * @param {sap.ui.core.TextAlign} sTextAlign New value for property <code>textAlign</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setTextAlign = function(sTextAlign) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getTextLabel textLabel}.
 * 
 * This property contains the text of an associated <code>SmartLabel</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sTextLabel New value for property <code>textLabel</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setTextLabel = function(sTextLabel) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getTooltipLabel tooltipLabel}.
 * 
 * This property contains the tool tip of the associated <code>SmartLabel</code> control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sTooltipLabel New value for property <code>tooltipLabel</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setTooltipLabel = function(sTooltipLabel) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * If the OData property the control's value property is bound to semantically represents a unit of measure, the value of the current unit of
 * measure can be changed.
 * 
 * @param {string} sUnit The new unit of measure to be set.
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setUnitOfMeasure = function(sUnit) {  };

/**
 * Sets a new value for property {@link #getUomEditable uomEditable}.
 * 
 * Editable state of the unit, if the <code>SmartField</code> control addresses unit of measure use cases, for example, an amount
 * and its associated currency.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUomEditable New value for property <code>uomEditable</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setUomEditable = function(bUomEditable) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getUomEditState uomEditState}.
 * 
 * This property is for internal use only.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>-1</code>.
 * @param {int} iUomEditState New value for property <code>uomEditState</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setUomEditState = function(iUomEditState) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getUomEnabled uomEnabled}.
 * 
 * Enabled state of the unit, if the <code>SmartField</code> control addresses unit of measure use cases, for example, an amount and
 * its associated currency.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUomEnabled New value for property <code>uomEnabled</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setUomEnabled = function(bUomEnabled) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getUomVisible uomVisible}.
 * 
 * Visible state of the unit, if the <code>SmartField</code> control addresses unit of measure use cases, for example, an amount and
 * its associated currency.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUomVisible New value for property <code>uomVisible</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setUomVisible = function(bUomVisible) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Setter for property <code>url</code>. Default value is <code>null</code>.
 * 
 * @param {string} sValue The new value for property <code>url</code>
 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
 * @since 1.29
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setUrl = function(sValue) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getValue value}.
 * 
 * The value property keeps the current value of the control. If a binding expression is configured, this is used to determine the
 * property of an OData entity.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oValue New value for property <code>value</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setValue = function(oValue) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Setter for property <code>valueState</code>. Default value is <code>None</code>.
 * 
 * @param {sap.ui.core.ValueState} sValueState The new value for property <code>valueState</code>
 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
 * @since 1.30.0
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setValueState = function(sValueState) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Setter for property <code>valueStateText</code>. Default value is empty/<code>undefined</code>.
 * 
 * @param {string} sText The new value for property <code>valueStateText</code>
 * @return {sap.ui.comp.smartfield.SmartField} <code>this</code> to allow method chaining
 * @since 1.29
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setValueStateText = function(sText) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width of the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setWidth = function(sWidth) { return new sap.ui.comp.smartfield.SmartField(); };

/**
 * Sets a new value for property {@link #getWrapping wrapping}.
 * 
 * Indicates whether the control break lines (in display mode) to prevent overflow.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bWrapping New value for property <code>wrapping</code>
 * @returns {sap.ui.comp.smartfield.SmartField} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36.6
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.SmartField.prototype.setWrapping = function(bWrapping) { return new sap.ui.comp.smartfield.SmartField(); };


// ---- sap.ui.comp.smartfilterbar.ControlConfiguration --------------------------------------------------------------------------

/**
 * Constructor for a new smartfilterbar/ControlConfiguration.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getGroupId groupId} : string</li>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getHasValueHelpDialog hasValueHelpDialog} : boolean (default: true)</li>
 * <li>{@link #getControlType controlType} : sap.ui.comp.smartfilterbar.ControlType (default: auto)</li>
 * <li>{@link #getFilterType filterType} : sap.ui.comp.smartfilterbar.FilterType (default: auto)</li>
 * <li>{@link #getIndex index} : int (default: -1)</li>
 * <li>{@link #getHasTypeAhead hasTypeAhead} : boolean (default: true)</li>
 * <li>{@link #getMandatory mandatory} : sap.ui.comp.smartfilterbar.MandatoryType (default: auto)</li>
 * <li>{@link #getWidth width} : string</li>
 * <li>{@link #getVisibleInAdvancedArea visibleInAdvancedArea} : boolean (default: false)</li>
 * <li>{@link #getPreventInitialDataFetchInValueHelpDialog preventInitialDataFetchInValueHelpDialog} : boolean (default: true)</li>
 * <li>{@link #getDisplayBehaviour displayBehaviour} : sap.ui.comp.smartfilterbar.DisplayBehaviour (default: auto)</li>
 * <li>{@link #getConditionType conditionType} : any</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getDefaultFilterValues defaultFilterValues} : sap.ui.comp.smartfilterbar.SelectOption[]</li>
 * <li>{@link #getCustomControl customControl} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sID] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class ControlConfiguration can be used to add additional configuration for filter fields in the SmartFilterBar control, in order to overwrite
 *        the default settings from the OData metadata. For instance, it is possible to change the label, index or control type of a filter field.
 * @extends sap.ui.core.Element
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration = function(sID,mSettings) {};
/**
 * Fired when the value of a property, for example isVisible, has changed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.propertyName Name of the changed property
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.change = function(oControlEvent) {  };

/**
 * Adds some defaultFilterValue to the aggregation {@link #getDefaultFilterValues defaultFilterValues}.
 * @param {sap.ui.comp.smartfilterbar.SelectOption}
 *            oDefaultFilterValue the defaultFilterValue to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.addDefaultFilterValue = function(oDefaultFilterValue) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.ui.comp.smartfilterbar.ControlConfiguration</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartfilterbar.ControlConfiguration</code> itself.
 * 
 * Fired when the value of a property, for example isVisible, has changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartfilterbar.ControlConfiguration</code> itself
 * 
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Destroys the customControl in the aggregation {@link #getCustomControl customControl}.
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.destroyCustomControl = function() { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Destroys all the defaultFilterValues in the aggregation {@link #getDefaultFilterValues defaultFilterValues}.
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.destroyDefaultFilterValues = function() { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.ui.comp.smartfilterbar.ControlConfiguration</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.detachChange = function(fnFunction,oListener) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Creates a new subclass of class sap.ui.comp.smartfilterbar.ControlConfiguration with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:change change} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.propertyName] Name of the changed property
 * 
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.fireChange = function(mParameters) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Gets current value of property {@link #getConditionType conditionType}.
 * 
 * The condition Type class name to use for this filter item. Implementation should derive from sap.ui.comp.config.condition.Type
 * 
 * @returns {any} Value of property <code>conditionType</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getConditionType = function() { return null; };

/**
 * Gets current value of property {@link #getControlType controlType}.
 * 
 * The SmartFilterBar calculates which kind of control will be used for a filter fields based on multiple OData Attributes and
 * annotations. Using this property it is possible to overwrite the OData metadata.
 * 
 * Default value is <code>auto</code>.
 * @returns {sap.ui.comp.smartfilterbar.ControlType} Value of property <code>controlType</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getControlType = function() { return new sap.ui.comp.smartfilterbar.ControlType(); };

/**
 * Gets content of aggregation {@link #getCustomControl customControl}.
 * 
 * If a custom control is specified, the SmartFilterBar will not create a control but use the custom control. Additional services like
 * TypeAhead have to implemented manually.
 * 
 * @returns {sap.ui.core.Control}
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getCustomControl = function() { return new sap.ui.core.Control(); };

/**
 * Gets content of aggregation {@link #getDefaultFilterValues defaultFilterValues}.
 * 
 * Default value for a filter field.
 * 
 * @returns {sap.ui.comp.smartfilterbar.SelectOption[]}
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getDefaultFilterValues = function() { return new Array(); };

/**
 * Gets current value of property {@link #getDisplayBehaviour displayBehaviour}.
 * 
 * The displayBehaviour specifies how the content should be displayed on certain controls. Ex: DescriptionOnly for Combobox (DropDown
 * text) , Description and ID for MultiInput (token text)
 * 
 * Default value is <code>auto</code>.
 * @returns {sap.ui.comp.smartfilterbar.DisplayBehaviour} Value of property <code>displayBehaviour</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getDisplayBehaviour = function() { return new sap.ui.comp.smartfilterbar.DisplayBehaviour(); };

/**
 * Gets current value of property {@link #getFilterType filterType}.
 * 
 * The filter type specifies whether the filter fields is e.g. type single value, multi-value,or interval. The filter type is being
 * calculated by the martFilterBar based on the OData metadata. Using this property the filter type can be configured manually.
 * 
 * Default value is <code>auto</code>.
 * @returns {sap.ui.comp.smartfilterbar.FilterType} Value of property <code>filterType</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getFilterType = function() { return new sap.ui.comp.smartfilterbar.FilterType(); };

/**
 * Gets current value of property {@link #getGroupId groupId}.
 * 
 * The groupId can be used to move a field from one group to another. The groupId corresponds to the EntityName from the OData
 * metadata. It is also possible to move a field from the advanced area to the basic area by specifying the groupId _BASIC.
 * 
 * @returns {string} Value of property <code>groupId</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getGroupId = function() { return ""; };

/**
 * Gets current value of property {@link #getHasTypeAhead hasTypeAhead}.
 * 
 * Property can be used to enable the TypeAhead service. TypeAhead does not work with all controls, e.g it does not work for
 * DrodDownListbox
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>hasTypeAhead</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getHasTypeAhead = function() { return false; };

/**
 * Gets current value of property {@link #getHasValueHelpDialog hasValueHelpDialog}.
 * 
 * Specifies whether a value help dialog is available or not.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>hasValueHelpDialog</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getHasValueHelpDialog = function() { return false; };

/**
 * Gets current value of property {@link #getIndex index}.
 * 
 * The zero based index can be used to specify the initial order of fields (without any variants).
 * 
 * Default value is <code>-1</code>.
 * @returns {int} Value of property <code>index</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getIndex = function() { return 0; };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * The key property corresponds to the field name from the OData service $metadata document.
 * 
 * @returns {string} Value of property <code>key</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getKey = function() { return ""; };

/**
 * Gets current value of property {@link #getLabel label}.
 * 
 * Using this property it is possible to overwrite the label of a filter field in the SmartFilterBar.
 * 
 * @returns {string} Value of property <code>label</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getLabel = function() { return ""; };

/**
 * Gets current value of property {@link #getMandatory mandatory}.
 * 
 * Property can be used to overwrite the mandatory state of a filter field. Property can only be set during initialization. Changes at
 * runtime will be ignored.
 * 
 * Default value is <code>auto</code>.
 * @returns {sap.ui.comp.smartfilterbar.MandatoryType} Value of property <code>mandatory</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getMandatory = function() { return new sap.ui.comp.smartfilterbar.MandatoryType(); };

/**
 * Returns a metadata object for class sap.ui.comp.smartfilterbar.ControlConfiguration.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPreventInitialDataFetchInValueHelpDialog preventInitialDataFetchInValueHelpDialog}.
 * 
 * In case there are value help annotations for this filter field, it is possible to specify whether the table in the value help
 * dialog for this field will be filled initially. The default value is true, which means the table will not be filled as the data
 * fetch is prevented.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>preventInitialDataFetchInValueHelpDialog</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getPreventInitialDataFetchInValueHelpDialog = function() { return false; };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Using this flag it is possible to hide fields from the OData metadata.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getVisible = function() { return false; };

/**
 * Gets current value of property {@link #getVisibleInAdvancedArea visibleInAdvancedArea}.
 * 
 * If set to true this field will be added to the advanced area (aka. Dynamic Selection) by default.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>visibleInAdvancedArea</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getVisibleInAdvancedArea = function() { return false; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * The width of the filter field in a CSS compatible format. The width can be set only once during initialization. Changes at runtime
 * will not be reflected. The width will not be applied to custom controls.
 * 
 * @returns {string} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.getWidth = function() { return ""; };

/**
 * Checks for the provided <code>sap.ui.comp.smartfilterbar.SelectOption</code> in the aggregation {@link #getDefaultFilterValues defaultFilterValues}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.comp.smartfilterbar.SelectOption}
 *           oDefaultFilterValue The defaultFilterValue whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.indexOfDefaultFilterValue = function(oDefaultFilterValue) { return 0; };

/**
 * Inserts a defaultFilterValue into the aggregation {@link #getDefaultFilterValues defaultFilterValues}.
 * 
 * @param {sap.ui.comp.smartfilterbar.SelectOption}
 *            oDefaultFilterValue the defaultFilterValue to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the defaultFilterValue should be inserted at; for
 *              a negative value of <code>iIndex</code>, the defaultFilterValue is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the defaultFilterValue is inserted at
 *              the last position
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.insertDefaultFilterValue = function(oDefaultFilterValue,iIndex) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Removes all the controls from the aggregation {@link #getDefaultFilterValues defaultFilterValues}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.comp.smartfilterbar.SelectOption[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.removeAllDefaultFilterValues = function() { return new Array(); };

/**
 * Removes a defaultFilterValue from the aggregation {@link #getDefaultFilterValues defaultFilterValues}.
 * 
 * @param {int | string | sap.ui.comp.smartfilterbar.SelectOption} vDefaultFilterValue The defaultFilterValue to remove or its index or id
 * @returns {sap.ui.comp.smartfilterbar.SelectOption} The removed defaultFilterValue or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.removeDefaultFilterValue = function(vDefaultFilterValue) { return new sap.ui.comp.smartfilterbar.SelectOption(); };

/**
 * Sets a new value for property {@link #getConditionType conditionType}.
 * 
 * The condition Type class name to use for this filter item. Implementation should derive from sap.ui.comp.config.condition.Type
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oConditionType New value for property <code>conditionType</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setConditionType = function(oConditionType) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets a new value for property {@link #getControlType controlType}.
 * 
 * The SmartFilterBar calculates which kind of control will be used for a filter fields based on multiple OData Attributes and
 * annotations. Using this property it is possible to overwrite the OData metadata.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.comp.smartfilterbar.ControlType} sControlType New value for property <code>controlType</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setControlType = function(sControlType) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets the aggregated {@link #getCustomControl customControl}.
 * @param {sap.ui.core.Control} oCustomControl The customControl to set
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setCustomControl = function(oCustomControl) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets a new value for property {@link #getDisplayBehaviour displayBehaviour}.
 * 
 * The displayBehaviour specifies how the content should be displayed on certain controls. Ex: DescriptionOnly for Combobox (DropDown
 * text) , Description and ID for MultiInput (token text)
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.comp.smartfilterbar.DisplayBehaviour} sDisplayBehaviour New value for property <code>displayBehaviour</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setDisplayBehaviour = function(sDisplayBehaviour) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets a new value for property {@link #getFilterType filterType}.
 * 
 * The filter type specifies whether the filter fields is e.g. type single value, multi-value,or interval. The filter type is being
 * calculated by the martFilterBar based on the OData metadata. Using this property the filter type can be configured manually.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.comp.smartfilterbar.FilterType} sFilterType New value for property <code>filterType</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setFilterType = function(sFilterType) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets a new value for property {@link #getGroupId groupId}.
 * 
 * The groupId can be used to move a field from one group to another. The groupId corresponds to the EntityName from the OData
 * metadata. It is also possible to move a field from the advanced area to the basic area by specifying the groupId _BASIC.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sGroupId New value for property <code>groupId</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setGroupId = function(sGroupId) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets a new value for property {@link #getHasTypeAhead hasTypeAhead}.
 * 
 * Property can be used to enable the TypeAhead service. TypeAhead does not work with all controls, e.g it does not work for
 * DrodDownListbox
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bHasTypeAhead New value for property <code>hasTypeAhead</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setHasTypeAhead = function(bHasTypeAhead) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets a new value for property {@link #getHasValueHelpDialog hasValueHelpDialog}.
 * 
 * Specifies whether a value help dialog is available or not.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bHasValueHelpDialog New value for property <code>hasValueHelpDialog</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setHasValueHelpDialog = function(bHasValueHelpDialog) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets a new value for property {@link #getIndex index}.
 * 
 * The zero based index can be used to specify the initial order of fields (without any variants).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>-1</code>.
 * @param {int} iIndex New value for property <code>index</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setIndex = function(iIndex) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * The key property corresponds to the field name from the OData service $metadata document.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setKey = function(sKey) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets a new value for property {@link #getLabel label}.
 * 
 * Using this property it is possible to overwrite the label of a filter field in the SmartFilterBar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sLabel New value for property <code>label</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setLabel = function(sLabel) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets a new value for property {@link #getMandatory mandatory}.
 * 
 * Property can be used to overwrite the mandatory state of a filter field. Property can only be set during initialization. Changes at
 * runtime will be ignored.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>auto</code>.
 * @param {sap.ui.comp.smartfilterbar.MandatoryType} sMandatory New value for property <code>mandatory</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setMandatory = function(sMandatory) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets a new value for property {@link #getPreventInitialDataFetchInValueHelpDialog preventInitialDataFetchInValueHelpDialog}.
 * 
 * In case there are value help annotations for this filter field, it is possible to specify whether the table in the value help
 * dialog for this field will be filled initially. The default value is true, which means the table will not be filled as the data
 * fetch is prevented.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bPreventInitialDataFetchInValueHelpDialog New value for property <code>preventInitialDataFetchInValueHelpDialog</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setPreventInitialDataFetchInValueHelpDialog = function(bPreventInitialDataFetchInValueHelpDialog) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Using this flag it is possible to hide fields from the OData metadata.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setVisible = function(bVisible) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets a new value for property {@link #getVisibleInAdvancedArea visibleInAdvancedArea}.
 * 
 * If set to true this field will be added to the advanced area (aka. Dynamic Selection) by default.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bVisibleInAdvancedArea New value for property <code>visibleInAdvancedArea</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setVisibleInAdvancedArea = function(bVisibleInAdvancedArea) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * The width of the filter field in a CSS compatible format. The width can be set only once during initialization. Changes at runtime
 * will not be reflected. The width will not be applied to custom controls.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sWidth New value for property <code>width</code>
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlConfiguration.prototype.setWidth = function(sWidth) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };


// ---- sap.ui.comp.smartfilterbar.ControlType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.smartfilterbar.ControlType.toString = function() { return ""; };

// ---- sap.ui.comp.smartfilterbar.DisplayBehaviour --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.smartfilterbar.DisplayBehaviour.toString = function() { return ""; };

// ---- sap.ui.comp.smartfilterbar.FilterType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.smartfilterbar.FilterType.toString = function() { return ""; };

// ---- sap.ui.comp.smartfilterbar.GroupConfiguration --------------------------------------------------------------------------

/**
 * Constructor for a new smartfilterbar/GroupConfiguration.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getIndex index} : any (default: undefined)</li>
 * <li>{@link #getLabel label} : any (default: undefined)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sID] ID for the new control, generated automatically if no ID is given 
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * A GroupConfiguration can be used to add additional configurations for groups in the SmartFilterBar. A group in the SmartFilterBar is a group of filter fields in the advanced search.
 * @extends sap.ui.core.Element
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartfilterbar.GroupConfiguration = function(sID,mSettings) {};
/**
 * Fired when the value of a property, for example label, has changed
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.propertyName Name of the changed property
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.GroupConfiguration.prototype.change = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:change change} event of this <code>sap.ui.comp.smartfilterbar.GroupConfiguration</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartfilterbar.GroupConfiguration</code> itself.
 * 
 * Fired when the value of a property, for example label, has changed
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartfilterbar.GroupConfiguration</code> itself
 * 
 * @returns {sap.ui.comp.smartfilterbar.GroupConfiguration} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.GroupConfiguration.prototype.attachChange = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartfilterbar.GroupConfiguration(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of this <code>sap.ui.comp.smartfilterbar.GroupConfiguration</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartfilterbar.GroupConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.GroupConfiguration.prototype.detachChange = function(fnFunction,oListener) { return new sap.ui.comp.smartfilterbar.GroupConfiguration(); };

/**
 * Creates a new subclass of class sap.ui.comp.smartfilterbar.GroupConfiguration with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfilterbar.GroupConfiguration.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:change change} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.propertyName] Name of the changed property
 * 
 * @returns {sap.ui.comp.smartfilterbar.GroupConfiguration} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartfilterbar.GroupConfiguration.prototype.fireChange = function(mParameters) { return new sap.ui.comp.smartfilterbar.GroupConfiguration(); };

/**
 * Gets current value of property {@link #getIndex index}.
 * 
 * Zero based integer index.
 * The index can be used to specify the order of groups. If no index is specified, the order like in the OData metadata will be used.
 * 
 * Default value is <code>undefined</code>.
 * @returns {any} Value of property <code>index</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.GroupConfiguration.prototype.getIndex = function() { return null; };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * The key property shall correspond to the name EntityTypeName from the OData service $metadata document.
 * 
 * @returns {string} Value of property <code>key</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.GroupConfiguration.prototype.getKey = function() { return ""; };

/**
 * Gets current value of property {@link #getLabel label}.
 * 
 * Using this property it is possible to overwrite the label of a group in the advanced area of the SmartFilterBar.
 * 
 * Default value is <code>undefined</code>.
 * @returns {any} Value of property <code>label</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.GroupConfiguration.prototype.getLabel = function() { return null; };

/**
 * Returns a metadata object for class sap.ui.comp.smartfilterbar.GroupConfiguration.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfilterbar.GroupConfiguration.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sets a new value for property {@link #getIndex index}.
 * 
 * Zero based integer index.
 * The index can be used to specify the order of groups. If no index is specified, the order like in the OData metadata will be used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>undefined</code>.
 * @param {any} oIndex New value for property <code>index</code>
 * @returns {sap.ui.comp.smartfilterbar.GroupConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.GroupConfiguration.prototype.setIndex = function(oIndex) { return new sap.ui.comp.smartfilterbar.GroupConfiguration(); };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * The key property shall correspond to the name EntityTypeName from the OData service $metadata document.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.ui.comp.smartfilterbar.GroupConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.GroupConfiguration.prototype.setKey = function(sKey) { return new sap.ui.comp.smartfilterbar.GroupConfiguration(); };

/**
 * Sets a new value for property {@link #getLabel label}.
 * 
 * Using this property it is possible to overwrite the label of a group in the advanced area of the SmartFilterBar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>undefined</code>.
 * @param {any} oLabel New value for property <code>label</code>
 * @returns {sap.ui.comp.smartfilterbar.GroupConfiguration} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.GroupConfiguration.prototype.setLabel = function(oLabel) { return new sap.ui.comp.smartfilterbar.GroupConfiguration(); };


// ---- sap.ui.comp.smartfilterbar.MandatoryType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.smartfilterbar.MandatoryType.toString = function() { return ""; };

// ---- sap.ui.comp.smartfilterbar.SelectOption --------------------------------------------------------------------------

/**
 * Constructor for a new smartfilterbar/SelectOption.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSign sign} : sap.ui.comp.smartfilterbar.SelectOptionSign (default: I)</li>
 * <li>{@link #getOperator operator} : sap.ui.model.FilterOperator (default: EQ)</li>
 * <li>{@link #getLow low} : string</li>
 * <li>{@link #getHigh high} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sID] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class A Select Option can be used to specify default filter values for a control configuration of the SmartFilterBar.
 * @extends sap.ui.core.Element
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartfilterbar.SelectOption = function(sID,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.comp.smartfilterbar.SelectOption with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfilterbar.SelectOption.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getHigh high}.
 * 
 * The high value for a select option. The high value is only required for a few operators, e.g. BT (between).
 * 
 * @returns {string} Value of property <code>high</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SelectOption.prototype.getHigh = function() { return ""; };

/**
 * Gets current value of property {@link #getLow low}.
 * 
 * The low value for a select option.
 * 
 * @returns {string} Value of property <code>low</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SelectOption.prototype.getLow = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.comp.smartfilterbar.SelectOption.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfilterbar.SelectOption.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getOperator operator}.
 * 
 * The operator for a select option. The default value is EQ "for equals".
 * 
 * Default value is <code>EQ</code>.
 * @returns {sap.ui.model.FilterOperator} Value of property <code>operator</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SelectOption.prototype.getOperator = function() { return new sap.ui.model.FilterOperator(); };

/**
 * Gets current value of property {@link #getSign sign}.
 * 
 * The sign for a Select Option. Possible values are I for include or E for exclude.
 * 
 * Default value is <code>I</code>.
 * @returns {sap.ui.comp.smartfilterbar.SelectOptionSign} Value of property <code>sign</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SelectOption.prototype.getSign = function() { return new sap.ui.comp.smartfilterbar.SelectOptionSign(); };

/**
 * Sets a new value for property {@link #getHigh high}.
 * 
 * The high value for a select option. The high value is only required for a few operators, e.g. BT (between).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sHigh New value for property <code>high</code>
 * @returns {sap.ui.comp.smartfilterbar.SelectOption} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SelectOption.prototype.setHigh = function(sHigh) { return new sap.ui.comp.smartfilterbar.SelectOption(); };

/**
 * Sets a new value for property {@link #getLow low}.
 * 
 * The low value for a select option.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sLow New value for property <code>low</code>
 * @returns {sap.ui.comp.smartfilterbar.SelectOption} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SelectOption.prototype.setLow = function(sLow) { return new sap.ui.comp.smartfilterbar.SelectOption(); };

/**
 * Sets a new value for property {@link #getOperator operator}.
 * 
 * The operator for a select option. The default value is EQ "for equals".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>EQ</code>.
 * @param {sap.ui.model.FilterOperator} sOperator New value for property <code>operator</code>
 * @returns {sap.ui.comp.smartfilterbar.SelectOption} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SelectOption.prototype.setOperator = function(sOperator) { return new sap.ui.comp.smartfilterbar.SelectOption(); };

/**
 * Sets a new value for property {@link #getSign sign}.
 * 
 * The sign for a Select Option. Possible values are I for include or E for exclude.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>I</code>.
 * @param {sap.ui.comp.smartfilterbar.SelectOptionSign} sSign New value for property <code>sign</code>
 * @returns {sap.ui.comp.smartfilterbar.SelectOption} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SelectOption.prototype.setSign = function(sSign) { return new sap.ui.comp.smartfilterbar.SelectOption(); };


// ---- sap.ui.comp.smartfilterbar.SelectOptionSign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.smartfilterbar.SelectOptionSign.toString = function() { return ""; };

// ---- sap.ui.comp.smartfilterbar.SmartFilterBar --------------------------------------------------------------------------

/**
 * Constructor for a new smartfilterbar/SmartFilterBar.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEntityType entityType} : string</li>
 * <li>{@link #getEntitySet entitySet} : string</li>
 * <li>{@link #getResourceUri resourceUri} : string</li>
 * <li>{@link #getBasicSearchFieldName basicSearchFieldName} : string</li>
 * <li>{@link #getEnableBasicSearch enableBasicSearch} : boolean (default: false)</li>
 * <li>{@link #getLiveMode liveMode} : boolean (default: false)</li>
 * <li>{@link #getShowMessages showMessages} : boolean (default: true)</li>
 * <li>{@link #getConsiderAnalyticalParameters considerAnalyticalParameters} : boolean (default: false)</li>
 * <li>{@link #getUseDateRangeType useDateRangeType} : boolean</li>
 * <li>{@link #getSuppressSelection suppressSelection} : boolean (default: false)</li>
 * <li>{@link #getConsiderSelectionVariants considerSelectionVariants} : boolean (default: false)</li>
 * <li>{@link #getDefaultSelectionVariantName defaultSelectionVariantName} : string</li>
 * <li>{@link #getUseProvidedNavigationProperties useProvidedNavigationProperties} : boolean (default: false)</li>
 * <li>{@link #getNavigationProperties navigationProperties} : string (default: )</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getControlConfiguration controlConfiguration} : sap.ui.comp.smartfilterbar.ControlConfiguration[]</li>
 * <li>{@link #getGroupConfiguration groupConfiguration} : sap.ui.comp.smartfilterbar.GroupConfiguration[]</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSmartVariant smartVariant} : (sap.ui.core.ID | sap.ui.comp.smartvariants.SmartVariantManagement)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:pendingChange pendingChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.comp.filterbar.FilterBar#constructor sap.ui.comp.filterbar.FilterBar}
 * can be used as well.
 * 
 * @param {string} [sID] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The SmartFilterBar control uses the OData metadata of an entity in order to create a FilterBar.<br>
 *        Whether a field is visible on the FilterBar, supports type-ahead and value help, for example, is automatically determined. When you use
 *        control configurations and group configurations it is possible to configure the FilterBar and adapt it according to your needs.<br>
 *        <b><i>Note:</i></b><br>
 *        Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.
 * @extends sap.ui.comp.filterbar.FilterBar
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar = function(sID,mSettings) {};
/**
 * This event is fired after the pending state of the <code>FilterBar</code> control changes.
 * @event
 * @since 1.36
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.pendingChange = function(oControlEvent) {  };

/**
 * Adds some controlConfiguration to the aggregation {@link #getControlConfiguration controlConfiguration}.
 * @param {sap.ui.comp.smartfilterbar.ControlConfiguration}
 *            oControlConfiguration the controlConfiguration to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.addControlConfiguration = function(oControlConfiguration) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Searches for the filter field having the specified OData key and adds this filter field to the advanced area. If there is no corresponding
 * field in the OData metadata, this method has no effect.
 * 
 * @param {string} sKey The key like specified in the OData metadata
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.addFieldToAdvancedArea = function(sKey) {  };

/**
 * Adds some groupConfiguration to the aggregation {@link #getGroupConfiguration groupConfiguration}.
 * @param {sap.ui.comp.smartfilterbar.GroupConfiguration}
 *            oGroupConfiguration the groupConfiguration to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.addGroupConfiguration = function(oGroupConfiguration) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Applies the current variant as opposed to <code>fetchVariant</code>. The variant is retrieved via the flex layer.
 * @param {object} oVariant The variant that must be applied. oVariant must contain a valid JSON object.
 * @type void
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.applyVariant = function(oVariant) { return null; };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:pendingChange pendingChange} event of this <code>sap.ui.comp.smartfilterbar.SmartFilterBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartfilterbar.SmartFilterBar</code> itself.
 * 
 * This event is fired after the pending state of the <code>FilterBar</code> control changes.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartfilterbar.SmartFilterBar</code> itself
 * 
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.36
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.attachPendingChange = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Destroys all the controlConfiguration in the aggregation {@link #getControlConfiguration controlConfiguration}.
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.destroyControlConfiguration = function() { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Destroys all the groupConfiguration in the aggregation {@link #getGroupConfiguration groupConfiguration}.
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.destroyGroupConfiguration = function() { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:pendingChange pendingChange} event of this <code>sap.ui.comp.smartfilterbar.SmartFilterBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.36
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.detachPendingChange = function(fnFunction,oListener) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Creates a new subclass of class sap.ui.comp.smartfilterbar.SmartFilterBar with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.comp.filterbar.FilterBar.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Retrieves the currently visible filters and the values for storing them as variants. The result will be passed on as a JSON object to the
 * callee smart variant control.
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.fetchVariant = function() { return new Object(); };

/**
 * Fires event {@link #event:pendingChange pendingChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.36
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.firePendingChange = function(mParameters) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Returns the binding paths for the analytic paramaters
 * 
 * @experimental since 1.42.0 The API is NOT stable yet. Use at your own risk.
 * @public
 * @returns {string} Binding path of the analytical paramaters
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getAnalyticBindingPath = function() { return ""; };

/**
 * Returns an instance of the control for the basic search.
 * 
 * @returns {object} Basic search control
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getBasicSearchControl = function() { return new Object(); };

/**
 * Gets current value of property {@link #getBasicSearchFieldName basicSearchFieldName}.
 * 
 * Name of the field that is the focus of the basic search.
 * 
 * @returns {string} Value of property <code>basicSearchFieldName</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getBasicSearchFieldName = function() { return ""; };

/**
 * Gets current value of property {@link #getConsiderAnalyticalParameters considerAnalyticalParameters}.
 * 
 * Indicates if the analytical parameters (SelectionVariant) must be taken into consideration.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>considerAnalyticalParameters</code>
 * @since 1.42.0
 * 
 * @experimental since 1.42.0 This property is NOT stable yet. Use at your own risk.
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getConsiderAnalyticalParameters = function() { return false; };

/**
 * Gets current value of property {@link #getConsiderSelectionVariants considerSelectionVariants}.
 * 
 * Indicates if the annotation <code>com.sap.vocabularies.UI.v1.SelectionVariant<code> should be considered.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>considerSelectionVariants</code>
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getConsiderSelectionVariants = function() { return false; };

/**
 * Returns the control (if any) with the specified key (Property name in OData entity). Use just the property name as the key when getting a
 * control from the basic area. Example: "CompanyCode" & Use "EntityName/GroupName.FieldName" format to get controls from groups.
 * Example:"Account.CompanyCode"
 * 
 * @param {string} sKey The key as present in the OData property name/control configuration
 * @returns {object|sap.ui.core.Control} The control in the filter bar, if any
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getControlByKey = function(sKey) { return new Object(); };

/**
 * Gets content of aggregation {@link #getControlConfiguration controlConfiguration}.
 * 
 * Using control configurations you can add additional configuration to filter fields, for example set custom labels, change the order
 * of fields, or change the filter field control type. <b>Note:</b> Changing the values here after the SmartFilter is initialized (<code>initialise</code>
 * event was fired) has no effect.
 * 
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration[]}
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getControlConfiguration = function() { return new Array(); };

/**
 * Gets current value of property {@link #getDefaultSelectionVariantName defaultSelectionVariantName}.
 * 
 * This property allows, to specify one specific <code>com.sap.vocabularies.UI.v1.SelectionVariant<code> based variant 
 * to be used as default variant.
 * 
 * This property has only relevance in case <code>considerSelectionVariants</code> is set to <code>true</code> and will only be applied
 * if there is no user-defined default variant specified.
 * 
 * @returns {string} Value of property <code>defaultSelectionVariantName</code>
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getDefaultSelectionVariantName = function() { return ""; };

/**
 * Gets current value of property {@link #getEnableBasicSearch enableBasicSearch}.
 * 
 * Enables the basic search field. The entered value can be accessed with
 * {@link sap.ui.comp.smartfilterbar.SmartFilterBar#getParameters}. <b>Note:</b> When the SmartFilterBar control is used with a
 * {@link sap.ui.comp.smarttable.SmartTable} control the parameters are handled automatically. Therefore, this must only be enabled
 * for OData service entities that support basic search.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableBasicSearch</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getEnableBasicSearch = function() { return false; };

/**
 * Gets current value of property {@link #getEntitySet entitySet}.
 * 
 * The OData entity set whose metadata is used to create the SmartFilterBar. <b>Note:</b> Changing this value after the
 * SmartFilterBar is initialized (<code>initialise</code> event was fired) has no effect.
 * 
 * @returns {string} Value of property <code>entitySet</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getEntitySet = function() { return ""; };

/**
 * Gets current value of property {@link #getEntityType entityType}.
 * 
 * The OData entity type whose metadata is used to create the SmartFilterBar. <b>Note:</b> Changing this value after the
 * SmartFilterBar is initialized (<code>initialise</code> event was fired) has no effect.
 * 
 * @returns {string} Value of property <code>entityType</code>
 * 
 * @deprecated Since 1.40. Use <code>entitySet</code> property instead of this one, to enable V4 annotation support
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getEntityType = function() { return ""; };

/**
 * Returns the data currently set in the filter data model.
 * 
 * @param {boolean} bAllFilterData Also include empty/invisible fields filter data
 * @returns {object} The JSON data in the filter bar
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getFilterData = function(bAllFilterData) { return new Object(); };

/**
 * Returns the data currently set in the filter data model as string.
 * 
 * @param {boolean} bAllFilterData Also include empty/invisible fields filter data
 * @returns {string} The JSON data string
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getFilterDataAsString = function(bAllFilterData) { return ""; };

/**
 * Returns an array of filters (sap.ui.model.Filter instances), for visible fields, that can be used to restrict the query result from OData.<br>
 * The result of this method can directly be used during aggregation binding or OData read.
 * 
 * @param {string[]} [aFieldNames] optional array of field names that filters should be returned, if not given all visible filters are returned
 * @returns {sap.ui.model.Filter[]} array of sap.ui.model.Filter or multi-filters
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getFilters = function(aFieldNames) { return new Array(); };

/**
 * Gets content of aggregation {@link #getGroupConfiguration groupConfiguration}.
 * 
 * Provides the possibility to add additional configuration to groups. Groups are used to show fields in the advanced area of the
 * SmartFilterBar. With additional configuration, you can for example set custom labels or change the order of groups. <b>Note:</b>
 * Changing the values here after the SmartFilter is initialized (<code>initialise</code> event was fired) has no effect.
 * 
 * @returns {sap.ui.comp.smartfilterbar.GroupConfiguration[]}
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getGroupConfiguration = function() { return new Array(); };

/**
 * Gets current value of property {@link #getLiveMode liveMode}.
 * 
 * If set the search will be automatically triggered, when a filter value was set via the <B>change</B> event.<br>
 * <b>Note:</b> The liveMode only operates on non-mobile scenarios.<br>
 * Additionally, if liveMode is set, the following applies:
 * <ul>
 * <li>The error messagebox is not displayed, and the <code>showMessages</code> property is ignored.</li>
 * <li>The search is triggered after a variant has been selected.</li>
 * <li>Execute on Select for <code>VariantManagement</code> is not shown and not taken into account</li>
 * </ul>
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>liveMode</code>
 * @since 1.40
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getLiveMode = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.comp.smartfilterbar.SmartFilterBar.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getNavigationProperties navigationProperties}.
 * 
 * This property is only evaluated if the property
 * {@link sap.ui.comp.smartfilterbar.SmartFilterBar#getUseProvidedNavigationProperties} is set to <code>true</code>. It contains a
 * comma-separated list of navigation property names which are checked for filters.<br>
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>navigationProperties</code>
 * @since 1.48
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getNavigationProperties = function() { return ""; };

/**
 * Returns a parameter object that can be used to restrict the result of an OData service request if a basic search is performed. <caption>Example
 * of a returned object:</caption>
 * 
 * <pre>
 * {
 * 	&quot;custom&quot;: {
 * 		&quot;search-focus&quot;: &quot;MySearchFocusFieldName&quot;,
 * 		&quot;search&quot;: &quot;MySearchString&quot;
 * 	}
 * }
 * </pre>
 * 
 * These parameters can be handed over as custom parameters, for example, to the {@link sap.ui.model.odata.v2.ODataListBinding}.
 * 
 * @returns {object} A parameter object containing OData query parameters
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getParameters = function() { return new Object(); };

/**
 * Gets current value of property {@link #getResourceUri resourceUri}.
 * 
 * Optional. The OData service URL. If it is not specified, the service URL from the OData model (this.getModel()) will be used.
 * <b>Note:</b> Changing this value after the SmartFilterBar is initialized (initialise event was fired) has no effect.
 * 
 * @returns {string} Value of property <code>resourceUri</code>
 * 
 * @deprecated Since 1.29. Set an ODataModel as the main model on your control/view instead
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getResourceUri = function() { return ""; };

/**
 * Gets current value of property {@link #getShowMessages showMessages}.
 * 
 * If set to <code>false</code> eventual errors during the search, will not be displayed in a messagebox.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showMessages</code>
 * @since 1.40
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getShowMessages = function() { return false; };

/**
 * ID of the element which is the current target of the association {@link #getSmartVariant smartVariant}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getSmartVariant = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getSuppressSelection suppressSelection}.
 * 
 * If set to <code>true</code> all search requests will be ignored. This functionality is only intended to be used internally to
 * enable an optimal solution when the filter bar is controlled by the smart templates. NOTE: As long as this property is set to
 * <code>true</code>, all search requests will be neglected.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>suppressSelection</code>
 * @since 1.44.0
 * 
 * @experimental since 1.44.0 This property is NOT stable yet. Use at your own risk.
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getSuppressSelection = function() { return false; };

/**
 * Gets current value of property {@link #getUseDateRangeType useDateRangeType}.
 * 
 * If set to <code>true</code> all date fields with filter restriction <code>interval</code> will be treated as
 * <code>DateTimeRange</code> filters. <b>Note:</b> If this property is set to <code>true</code> and any date filters with filter
 * restriction <code>interval</code> were stored as part of a variant, the values of these filters cannot be applied. If this
 * property is set to <code>false</code>, any previously stored filters which were treated as type <code>DateTimeRange</code>
 * based on the former setting, cannot be converted back to the standard date interval.
 * 
 * @returns {boolean} Value of property <code>useDateRangeType</code>
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getUseDateRangeType = function() { return false; };

/**
 * Gets current value of property {@link #getUseProvidedNavigationProperties useProvidedNavigationProperties}.
 * 
 * If set to <code>true</code>, only the navigation properties mentioned in property
 * {@link sap.ui.comp.smartfilterbar.SmartFilterBarl#getNavigationProperties} are checked for further filters.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>useProvidedNavigationProperties</code>
 * @since 1.48
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.getUseProvidedNavigationProperties = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.comp.smartfilterbar.ControlConfiguration</code> in the aggregation {@link #getControlConfiguration controlConfiguration}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.comp.smartfilterbar.ControlConfiguration}
 *           oControlConfiguration The controlConfiguration whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.indexOfControlConfiguration = function(oControlConfiguration) { return 0; };

/**
 * Checks for the provided <code>sap.ui.comp.smartfilterbar.GroupConfiguration</code> in the aggregation {@link #getGroupConfiguration groupConfiguration}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.comp.smartfilterbar.GroupConfiguration}
 *           oGroupConfiguration The groupConfiguration whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.indexOfGroupConfiguration = function(oGroupConfiguration) { return 0; };

/**
 * Inserts a controlConfiguration into the aggregation {@link #getControlConfiguration controlConfiguration}.
 * 
 * @param {sap.ui.comp.smartfilterbar.ControlConfiguration}
 *            oControlConfiguration the controlConfiguration to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the controlConfiguration should be inserted at; for
 *              a negative value of <code>iIndex</code>, the controlConfiguration is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the controlConfiguration is inserted at
 *              the last position
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.insertControlConfiguration = function(oControlConfiguration,iIndex) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Inserts a groupConfiguration into the aggregation {@link #getGroupConfiguration groupConfiguration}.
 * 
 * @param {sap.ui.comp.smartfilterbar.GroupConfiguration}
 *            oGroupConfiguration the groupConfiguration to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the groupConfiguration should be inserted at; for
 *              a negative value of <code>iIndex</code>, the groupConfiguration is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the groupConfiguration is inserted at
 *              the last position
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.insertGroupConfiguration = function(oGroupConfiguration,iIndex) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Checks whether the control is initialised
 * 
 * @returns {boolean} returns whether control is already initialised
 * @protected
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.isInitialised = function() { return false; };

/**
 * Checks the pending state of the FilterBar control
 * 
 * @public
 * @returns {boolean} true if at least one FilterItem element of the FilterBar control is pending
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.isPending = function() { return false; };

/**
 * Removes all the controls from the aggregation {@link #getControlConfiguration controlConfiguration}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.removeAllControlConfiguration = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getGroupConfiguration groupConfiguration}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.comp.smartfilterbar.GroupConfiguration[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.removeAllGroupConfiguration = function() { return new Array(); };

/**
 * Removes a controlConfiguration from the aggregation {@link #getControlConfiguration controlConfiguration}.
 * 
 * @param {int | string | sap.ui.comp.smartfilterbar.ControlConfiguration} vControlConfiguration The controlConfiguration to remove or its index or id
 * @returns {sap.ui.comp.smartfilterbar.ControlConfiguration} The removed controlConfiguration or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.removeControlConfiguration = function(vControlConfiguration) { return new sap.ui.comp.smartfilterbar.ControlConfiguration(); };

/**
 * Removes a groupConfiguration from the aggregation {@link #getGroupConfiguration groupConfiguration}.
 * 
 * @param {int | string | sap.ui.comp.smartfilterbar.GroupConfiguration} vGroupConfiguration The groupConfiguration to remove or its index or id
 * @returns {sap.ui.comp.smartfilterbar.GroupConfiguration} The removed groupConfiguration or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.removeGroupConfiguration = function(vGroupConfiguration) { return new sap.ui.comp.smartfilterbar.GroupConfiguration(); };

/**
 * Overwrites method from base class. Called when user clicks the search button of the FilterBar. The search is executed asynchronously per
 * default, but can be forced to synchronously execution by providing the <code>bSync</code> set to <code>true</code>. Synchronous mode is
 * only supported for non live mode scenarios. In the synchroneous mode a mandatory check prior to the search execution is made.
 * 
 * @public
 * @param {boolean} bSync indicates if the search should be triggerd synchronously.
 * @returns {boolean|undefined} true indicates that there are no validation problems. In async mode the return is always true.
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.search = function(bSync) { return false; };

/**
 * Sets a new value for property {@link #getBasicSearchFieldName basicSearchFieldName}.
 * 
 * Name of the field that is the focus of the basic search.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sBasicSearchFieldName New value for property <code>basicSearchFieldName</code>
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setBasicSearchFieldName = function(sBasicSearchFieldName) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Sets a new value for property {@link #getConsiderAnalyticalParameters considerAnalyticalParameters}.
 * 
 * Indicates if the analytical parameters (SelectionVariant) must be taken into consideration.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bConsiderAnalyticalParameters New value for property <code>considerAnalyticalParameters</code>
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.42.0
 * 
 * @experimental since 1.42.0 This property is NOT stable yet. Use at your own risk.
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setConsiderAnalyticalParameters = function(bConsiderAnalyticalParameters) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Sets a new value for property {@link #getConsiderSelectionVariants considerSelectionVariants}.
 * 
 * Indicates if the annotation <code>com.sap.vocabularies.UI.v1.SelectionVariant<code> should be considered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bConsiderSelectionVariants New value for property <code>considerSelectionVariants</code>
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setConsiderSelectionVariants = function(bConsiderSelectionVariants) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Sets a new value for property {@link #getDefaultSelectionVariantName defaultSelectionVariantName}.
 * 
 * This property allows, to specify one specific <code>com.sap.vocabularies.UI.v1.SelectionVariant<code> based variant 
 * to be used as default variant.
 * 
 * This property has only relevance in case <code>considerSelectionVariants</code> is set to <code>true</code> and will only be applied
 * if there is no user-defined default variant specified.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sDefaultSelectionVariantName New value for property <code>defaultSelectionVariantName</code>
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setDefaultSelectionVariantName = function(sDefaultSelectionVariantName) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Sets a new value for property {@link #getEnableBasicSearch enableBasicSearch}.
 * 
 * Enables the basic search field. The entered value can be accessed with
 * {@link sap.ui.comp.smartfilterbar.SmartFilterBar#getParameters}. <b>Note:</b> When the SmartFilterBar control is used with a
 * {@link sap.ui.comp.smarttable.SmartTable} control the parameters are handled automatically. Therefore, this must only be enabled
 * for OData service entities that support basic search.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableBasicSearch New value for property <code>enableBasicSearch</code>
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setEnableBasicSearch = function(bEnableBasicSearch) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Sets a new value for property {@link #getEntitySet entitySet}.
 * 
 * The OData entity set whose metadata is used to create the SmartFilterBar. <b>Note:</b> Changing this value after the
 * SmartFilterBar is initialized (<code>initialise</code> event was fired) has no effect.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sEntitySet New value for property <code>entitySet</code>
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setEntitySet = function(sEntitySet) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Sets a new value for property {@link #getEntityType entityType}.
 * 
 * The OData entity type whose metadata is used to create the SmartFilterBar. <b>Note:</b> Changing this value after the
 * SmartFilterBar is initialized (<code>initialise</code> event was fired) has no effect.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sEntityType New value for property <code>entityType</code>
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since 1.40. Use <code>entitySet</code> property instead of this one, to enable V4 annotation support
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setEntityType = function(sEntityType) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Sets the data in the filter data model. The follow-on filterChange event is only triggered when none _CUSTOM data is set.
 * 
 * @param {object} oJson The JSON data in the filter bar
 * @param {boolean} bReplace Replace existing filter data
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setFilterData = function(oJson,bReplace) {  };

/**
 * Sets the data in the filter data model as string.
 * 
 * @param {string} sJson The JSON data in the filter bar
 * @param {boolean} bReplace Replace existing filter data
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setFilterDataAsString = function(sJson,bReplace) {  };

/**
 * Sets a new value for property {@link #getLiveMode liveMode}.
 * 
 * If set the search will be automatically triggered, when a filter value was set via the <B>change</B> event.<br>
 * <b>Note:</b> The liveMode only operates on non-mobile scenarios.<br>
 * Additionally, if liveMode is set, the following applies:
 * <ul>
 * <li>The error messagebox is not displayed, and the <code>showMessages</code> property is ignored.</li>
 * <li>The search is triggered after a variant has been selected.</li>
 * <li>Execute on Select for <code>VariantManagement</code> is not shown and not taken into account</li>
 * </ul>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bLiveMode New value for property <code>liveMode</code>
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setLiveMode = function(bLiveMode) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Sets a new value for property {@link #getNavigationProperties navigationProperties}.
 * 
 * This property is only evaluated if the property
 * {@link sap.ui.comp.smartfilterbar.SmartFilterBar#getUseProvidedNavigationProperties} is set to <code>true</code>. It contains a
 * comma-separated list of navigation property names which are checked for filters.<br>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sNavigationProperties New value for property <code>navigationProperties</code>
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setNavigationProperties = function(sNavigationProperties) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Uses the provided resource URI to fetch the OData metadata instead of using the default ODataModel (getModel()). You should only set this if
 * you intend to get the metadata for the filter bar from elsewhere!
 * 
 * @param {string} sResourceUri - The URI of the oData service from which the metadata would be read
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} <code>this</code> to allow method chaining
 * @deprecated Since 1.29. Set an ODataModel as the main model on your control/view instead
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setResourceUri = function(sResourceUri) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Sets a new value for property {@link #getShowMessages showMessages}.
 * 
 * If set to <code>false</code> eventual errors during the search, will not be displayed in a messagebox.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowMessages New value for property <code>showMessages</code>
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.40
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setShowMessages = function(bShowMessages) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Sets the associated {@link #getSmartVariant smartVariant}.
 * @param {sap.ui.core.ID | sap.ui.comp.smartvariants.SmartVariantManagement} oSmartVariant ID of an element which becomes the new target of this smartVariant association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setSmartVariant = function(oSmartVariant) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Sets a new value for property {@link #getSuppressSelection suppressSelection}.
 * 
 * If set to <code>true</code> all search requests will be ignored. This functionality is only intended to be used internally to
 * enable an optimal solution when the filter bar is controlled by the smart templates. NOTE: As long as this property is set to
 * <code>true</code>, all search requests will be neglected.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSuppressSelection New value for property <code>suppressSelection</code>
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.0
 * 
 * @experimental since 1.44.0 This property is NOT stable yet. Use at your own risk.
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setSuppressSelection = function(bSuppressSelection) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Sets a new value for property {@link #getUseDateRangeType useDateRangeType}.
 * 
 * If set to <code>true</code> all date fields with filter restriction <code>interval</code> will be treated as
 * <code>DateTimeRange</code> filters. <b>Note:</b> If this property is set to <code>true</code> and any date filters with filter
 * restriction <code>interval</code> were stored as part of a variant, the values of these filters cannot be applied. If this
 * property is set to <code>false</code>, any previously stored filters which were treated as type <code>DateTimeRange</code>
 * based on the former setting, cannot be converted back to the standard date interval.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bUseDateRangeType New value for property <code>useDateRangeType</code>
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setUseDateRangeType = function(bUseDateRangeType) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Sets a new value for property {@link #getUseProvidedNavigationProperties useProvidedNavigationProperties}.
 * 
 * If set to <code>true</code>, only the navigation properties mentioned in property
 * {@link sap.ui.comp.smartfilterbar.SmartFilterBarl#getNavigationProperties} are checked for further filters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bUseProvidedNavigationProperties New value for property <code>useProvidedNavigationProperties</code>
 * @returns {sap.ui.comp.smartfilterbar.SmartFilterBar} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.setUseProvidedNavigationProperties = function(bUseProvidedNavigationProperties) { return new sap.ui.comp.smartfilterbar.SmartFilterBar(); };

/**
 * Verify if all mandatory filters or parameters have values.
 * 
 * @public
 * @returns {boolean} true indicates that all mandatory filters and parameters have values.
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.validateMandatoryFields = function() { return false; };

/**
 * Verifies if search is possible.
 * 
 * @public
 * @returns {object} an empty object indicates that all is fine and the search can be triggered. an object with the property mandatory indicates
 *          that some mandatory filters or parameters are empty an object with the property pending indicates that a token validation is going on.
 *          an object with the property error indicates that some filters or parameters are in error state.
 * 
 */
sap.ui.comp.smartfilterbar.SmartFilterBar.prototype.verifySearchAllowed = function() { return new Object(); };


// ---- sap.ui.comp.smartform.Group --------------------------------------------------------------------------

/**
 * Constructor for a new smartform/Group.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getUseHorizontalLayout useHorizontalLayout} : boolean</li>
 * <li>{@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth} : int</li>
 * <li>{@link #getLabel label} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGroupElements groupElements} : sap.ui.comp.smartform.GroupElement[] (default)</li>
 * <li>{@link #getLayout layout} : sap.ui.layout.GridData</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.form.FormContainer#constructor sap.ui.layout.form.FormContainer}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class Groups are used to group group elements.
 * @extends sap.ui.layout.form.FormContainer
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartform.Group = function(sId,mSettings) {};
/**
 * Adds some CustomeData into the aggregation <code>customData</code>. Additionally the customData is also added to the <code>SmartFields</code> in the
 * children hierarchy
 * 
 * @param {sap.ui.core.CustomData} oCustomData the customData to add.
 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.addCustomData = function(oCustomData) { return new sap.ui.comp.smartform.Group(); };

/**
 * Adds some groupElement to the aggregation {@link #getGroupElements groupElements}.
 * @param {sap.ui.comp.smartform.GroupElement}
 *            oGroupElement the groupElement to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.smartform.Group} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.addGroupElement = function(oGroupElement) { return new sap.ui.comp.smartform.Group(); };

/**
 * Destroys all the groupElements in the aggregation {@link #getGroupElements groupElements}.
 * @returns {sap.ui.comp.smartform.Group} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.destroyGroupElements = function() { return new sap.ui.comp.smartform.Group(); };

/**
 * Destroys the layout in the aggregation {@link #getLayout layout}.
 * @returns {sap.ui.comp.smartform.Group} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.48.0, please use <code>layoutData</code> aggregation instead.
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.destroyLayout = function() { return new sap.ui.comp.smartform.Group(); };

/**
 * Creates a new subclass of class sap.ui.comp.smartform.Group with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormContainer.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartform.Group.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getGroupElements groupElements}.
 * 
 * A <code>GroupElement</code> is a combination of one label and different controls associated to this label.
 * 
 * @returns {sap.ui.comp.smartform.GroupElement[]}
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.getGroupElements = function() { return new Array(); };

/**
 * Gets current value of property {@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth}.
 * 
 * Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.
 * 
 * <b>Note:</b> If <code>Group</code> is assigned to a <code>SmartForm</code> control,
 * this property is inherited from the <code>SmartForm</code> control. So don't set it manually.
 * 
 * @returns {int} Value of property <code>horizontalLayoutGroupElementMinWidth</code>
 * 
 * @deprecated Since version 1.48.0, please do not use this property as it does not have any effect on the current layout of the <code>SmartForm</code> control.
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.getHorizontalLayoutGroupElementMinWidth = function() { return 0; };

/**
 * Gets current value of property {@link #getLabel label}.
 * 
 * Label for the group.
 * 
 * @returns {string} Value of property <code>label</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.getLabel = function() { return ""; };

/**
 * Gets content of aggregation {@link #getLayout layout}.
 * 
 * Layout to specify how the group shall be rendered (e.g. span and line-break)
 * 
 * <b>Note:</b> Do not use <code>layout</code> and <code>layoutData>/code> aggregations combined.
 * 
 * @returns {sap.ui.layout.GridData}
 * 
 * @deprecated Since version 1.48.0, please use <code>layoutData</code> aggregation instead.
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.getLayout = function() { return new sap.ui.layout.GridData(); };

/**
 * Returns a metadata object for class sap.ui.comp.smartform.Group.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartform.Group.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getUseHorizontalLayout useHorizontalLayout}.
 * 
 * Specifies whether the groups are rendered in a <code>ResponsiveLayout</code> with label on top of the group element. Each group will be
 * rendered in a new line.
 * 
 * <b>Note:</b> If <code>Group</code> is assigned to a <code>SmartForm</code> control,
 * this property is inherited from the <code>SmartForm</code> control. So don't set it manually.
 * 
 * @returns {boolean} Value of property <code>useHorizontalLayout</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.getUseHorizontalLayout = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.comp.smartform.GroupElement</code> in the aggregation {@link #getGroupElements groupElements}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.comp.smartform.GroupElement}
 *           oGroupElement The groupElement whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.indexOfGroupElement = function(oGroupElement) { return 0; };

/**
 * Inserts a groupElement into the aggregation {@link #getGroupElements groupElements}.
 * 
 * @param {sap.ui.comp.smartform.GroupElement}
 *            oGroupElement the groupElement to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the groupElement should be inserted at; for
 *              a negative value of <code>iIndex</code>, the groupElement is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the groupElement is inserted at
 *              the last position
 * @returns {sap.ui.comp.smartform.Group} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.insertGroupElement = function(oGroupElement,iIndex) { return new sap.ui.comp.smartform.Group(); };

/**
 * Removes all the controls from the aggregation {@link #getGroupElements groupElements}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.comp.smartform.GroupElement[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.removeAllGroupElements = function() { return new Array(); };

/**
 * Removes a groupElement from the aggregation {@link #getGroupElements groupElements}.
 * 
 * @param {int | string | sap.ui.comp.smartform.GroupElement} vGroupElement The groupElement to remove or its index or id
 * @returns {sap.ui.comp.smartform.GroupElement} The removed groupElement or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.removeGroupElement = function(vGroupElement) { return new sap.ui.comp.smartform.GroupElement(); };

/**
 * Setter for property <code>editable</code> of all smart fields in children hierarchy.
 * 
 * @param {boolean} bEditMode new value for editable property of smart fields.
 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.setEditMode = function(bEditMode) { return new sap.ui.comp.smartform.Group(); };

/**
 * Sets a new value for property {@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth}.
 * 
 * Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.
 * 
 * <b>Note:</b> If <code>Group</code> is assigned to a <code>SmartForm</code> control,
 * this property is inherited from the <code>SmartForm</code> control. So don't set it manually.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iHorizontalLayoutGroupElementMinWidth New value for property <code>horizontalLayoutGroupElementMinWidth</code>
 * @returns {sap.ui.comp.smartform.Group} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.48.0, please do not use this property as it does not have any effect on the current layout of the <code>SmartForm</code> control.
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.setHorizontalLayoutGroupElementMinWidth = function(iHorizontalLayoutGroupElementMinWidth) { return new sap.ui.comp.smartform.Group(); };

/**
 * Sets a new value for property {@link #getLabel label}.
 * 
 * Label for the group.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sLabel New value for property <code>label</code>
 * @returns {sap.ui.comp.smartform.Group} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.setLabel = function(sLabel) { return new sap.ui.comp.smartform.Group(); };

/**
 * Sets the aggregated {@link #getLayout layout}.
 * @param {sap.ui.layout.GridData} oLayout The layout to set
 * @returns {sap.ui.comp.smartform.Group} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.48.0, please use <code>layoutData</code> aggregation instead.
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.setLayout = function(oLayout) { return new sap.ui.comp.smartform.Group(); };

/**
 * Sets a new value for property {@link #getUseHorizontalLayout useHorizontalLayout}.
 * 
 * Specifies whether the groups are rendered in a <code>ResponsiveLayout</code> with label on top of the group element. Each group will be
 * rendered in a new line.
 * 
 * <b>Note:</b> If <code>Group</code> is assigned to a <code>SmartForm</code> control,
 * this property is inherited from the <code>SmartForm</code> control. So don't set it manually.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bUseHorizontalLayout New value for property <code>useHorizontalLayout</code>
 * @returns {sap.ui.comp.smartform.Group} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.setUseHorizontalLayout = function(bUseHorizontalLayout) { return new sap.ui.comp.smartform.Group(); };

/**
 * Sets a new value for property <code>visible</code>. If set to <code>false</code>, the <code>Group</code> is not rendered.
 * Default value is true.
 * 
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @return {sap.ui.comp.smartform.Group} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.ui.comp.smartform.Group.prototype.setVisible = function(bVisible) { return new sap.ui.comp.smartform.Group(); };


// ---- sap.ui.comp.smartform.GroupElement --------------------------------------------------------------------------

/**
 * Constructor for a new smartform/GroupElement.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getUseHorizontalLayout useHorizontalLayout} : boolean</li>
 * <li>{@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth} : int</li>
 * <li>{@link #getElementForLabel elementForLabel} : int (default: 0)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getElements elements} : sap.ui.core.Control[] (default)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:visibleChanged visibleChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.form.FormElement#constructor sap.ui.layout.form.FormElement}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class A GroupElement is a combination of one label and different controls associated to this label.
 * @extends sap.ui.layout.form.FormElement
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartform.GroupElement = function(sId,mSettings) {};
/**
 * The event is fired after the visibility of the control has changed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.visibleChanged = function(oControlEvent) {  };

/**
 * Adds some customData into the aggregation <code>customData</code>.
 * 
 * Additionally, <code>customData</code> is also added to the <code>SmartField</code> controls in the
 * children hierarchy.
 * 
 * @param {sap.ui.core.CustomData} oCustomData the customData to add.
 * @return {sap.ui.comp.smartform.GroupElement} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.addCustomData = function(oCustomData) { return new sap.ui.comp.smartform.GroupElement(); };

/**
 * Adds some element to the aggregation {@link #getElements elements}.
 * @param {sap.ui.core.Control}
 *            oElement the element to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.addElement = function(oElement) { return new sap.ui.comp.smartform.GroupElement(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:visibleChanged visibleChanged} event of this <code>sap.ui.comp.smartform.GroupElement</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartform.GroupElement</code> itself.
 * 
 * The event is fired after the visibility of the control has changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartform.GroupElement</code> itself
 * 
 * @returns {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.attachVisibleChanged = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartform.GroupElement(); };

/**
 * Destroys all the elements in the aggregation {@link #getElements elements}.
 * @returns {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.destroyElements = function() { return new sap.ui.comp.smartform.GroupElement(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:visibleChanged visibleChanged} event of this <code>sap.ui.comp.smartform.GroupElement</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.detachVisibleChanged = function(fnFunction,oListener) { return new sap.ui.comp.smartform.GroupElement(); };

/**
 * Creates a new subclass of class sap.ui.comp.smartform.GroupElement with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormElement.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartform.GroupElement.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:visibleChanged visibleChanged} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.fireVisibleChanged = function(mParameters) { return new sap.ui.comp.smartform.GroupElement(); };

/**
 * Gets current value of property {@link #getElementForLabel elementForLabel}.
 * 
 * Index of element to be used for label determination
 * 
 * Default value is <code>0</code>.
 * @returns {int} Value of property <code>elementForLabel</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.getElementForLabel = function() { return 0; };

/**
 * Gets content of aggregation {@link #getElements elements}.
 * 
 * Aggregation of controls to be displayed together with a label.
 * 
 * <b>Note:</b> Do not put any layout controls in here. This could destroy the visual layout,
 * keyboard support and screen-reader support.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.getElements = function() { return new Array(); };

/**
 * Returns the from element.
 * 
 * @return {sap.ui.layout.form.FormElement} the form element.
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.getFormElement = function() { return new sap.ui.layout.form.FormElement(); };

/**
 * Gets current value of property {@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth}.
 * 
 * Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.
 * 
 * <b>Note:</b> If <code>Group</code> is assigned to a <code>SmartForm</code> control,
 * this property is inherited from the <code>SmartForm</code> control. So don't set it manually.
 * 
 * @returns {int} Value of property <code>horizontalLayoutGroupElementMinWidth</code>
 * 
 * @deprecated Since version 1.48.0, please do not use this property as it does not have any effect on the current layout of the <code>SmartForm</code> control.
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.getHorizontalLayoutGroupElementMinWidth = function() { return 0; };

/**
 * Returns the text of the label.
 * 
 * @return {string} text of the label.
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.getLabelText = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.comp.smartform.GroupElement.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartform.GroupElement.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getUseHorizontalLayout useHorizontalLayout}.
 * 
 * Specifies whether the groups shall be rendered in a <code>ResponsiveLayout</code> with label on top of the group element.
 * Each group will be rendered in a new line.
 * 
 * <b>Note:</b> If <code>Group</code> is assigned to a <code>SmartForm</code> control,
 * this property is inherited from the <code>SmartForm</code> control. So don't set it manually.
 * 
 * @returns {boolean} Value of property <code>useHorizontalLayout</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.getUseHorizontalLayout = function() { return false; };

/**
 * Determines the visibility of a <code>GroupElement</code> based on elements
 * 
 * @returns {boolean} Returns true, in case one element of the group element is visible
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.getVisibleBasedOnElements = function() { return false; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getElements elements}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oElement The element whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.indexOfElement = function(oElement) { return 0; };

/**
 * Inserts a element into the aggregation {@link #getElements elements}.
 * 
 * @param {sap.ui.core.Control}
 *            oElement the element to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the element should be inserted at; for
 *              a negative value of <code>iIndex</code>, the element is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the element is inserted at
 *              the last position
 * @returns {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.insertElement = function(oElement,iIndex) { return new sap.ui.comp.smartform.GroupElement(); };

/**
 * Removes all the controls from the aggregation {@link #getElements elements}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.removeAllElements = function() { return new Array(); };

/**
 * Removes a element from the aggregation {@link #getElements elements}.
 * 
 * @param {int | string | sap.ui.core.Control} vElement The element to remove or its index or id
 * @returns {sap.ui.core.Control} The removed element or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.removeElement = function(vElement) { return new sap.ui.core.Control(); };

/**
 * Setter for property editable of all smart fields in children hierarchy.
 * 
 * @param {boolean} bEditMode new value for editable property of smart fields.
 * @return {sap.ui.comp.smartform.GroupElement} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.setEditMode = function(bEditMode) { return new sap.ui.comp.smartform.GroupElement(); };

/**
 * Sets a new value for property {@link #getElementForLabel elementForLabel}.
 * 
 * Index of element to be used for label determination
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>0</code>.
 * @param {int} iElementForLabel New value for property <code>elementForLabel</code>
 * @returns {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.setElementForLabel = function(iElementForLabel) { return new sap.ui.comp.smartform.GroupElement(); };

/**
 * Sets a new value for property {@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth}.
 * 
 * Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.
 * 
 * <b>Note:</b> If <code>Group</code> is assigned to a <code>SmartForm</code> control,
 * this property is inherited from the <code>SmartForm</code> control. So don't set it manually.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iHorizontalLayoutGroupElementMinWidth New value for property <code>horizontalLayoutGroupElementMinWidth</code>
 * @returns {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.48.0, please do not use this property as it does not have any effect on the current layout of the <code>SmartForm</code> control.
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.setHorizontalLayoutGroupElementMinWidth = function(iHorizontalLayoutGroupElementMinWidth) { return new sap.ui.comp.smartform.GroupElement(); };

/**
 * Sets a new value for property {@link #getUseHorizontalLayout useHorizontalLayout}.
 * 
 * Specifies whether the groups shall be rendered in a <code>ResponsiveLayout</code> with label on top of the group element.
 * Each group will be rendered in a new line.
 * 
 * <b>Note:</b> If <code>Group</code> is assigned to a <code>SmartForm</code> control,
 * this property is inherited from the <code>SmartForm</code> control. So don't set it manually.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bUseHorizontalLayout New value for property <code>useHorizontalLayout</code>
 * @returns {sap.ui.comp.smartform.GroupElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.GroupElement.prototype.setUseHorizontalLayout = function(bUseHorizontalLayout) { return new sap.ui.comp.smartform.GroupElement(); };


// ---- sap.ui.comp.smartform.Layout --------------------------------------------------------------------------

/**
 * Constructor for a new smartform/Layout.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabelSpanXL labelSpanXL} : int</li>
 * <li>{@link #getLabelSpanL labelSpanL} : int</li>
 * <li>{@link #getLabelSpanM labelSpanM} : int</li>
 * <li>{@link #getLabelSpanS labelSpanS} : int</li>
 * <li>{@link #getEmptySpanXL emptySpanXL} : int</li>
 * <li>{@link #getEmptySpanL emptySpanL} : int</li>
 * <li>{@link #getEmptySpanM emptySpanM} : int</li>
 * <li>{@link #getEmptySpanS emptySpanS} : int</li>
 * <li>{@link #getColumnsXL columnsXL} : int</li>
 * <li>{@link #getColumnsL columnsL} : int</li>
 * <li>{@link #getColumnsM columnsM} : int</li>
 * <li>{@link #getSingleGroupFullSize singleGroupFullSize} : boolean (default: true)</li>
 * <li>{@link #getBreakpointXL breakpointXL} : int</li>
 * <li>{@link #getBreakpointL breakpointL} : int</li>
 * <li>{@link #getBreakpointM breakpointM} : int</li>
 * <li>{@link #getGridDataSpan gridDataSpan} : sap.ui.layout.GridSpan (default: )</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class Layout settings to adjust the <code>ResponsiveGridLayout</code> used inside the <code>Form</code>.
 * @extends sap.ui.core.Element
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartform.Layout = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.comp.smartform.Layout with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartform.Layout.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getBreakpointL breakpointL}.
 * 
 * Breakpoint (in pixel) between Medium size and Large size.
 * 
 * @returns {int} Value of property <code>breakpointL</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getBreakpointL = function() { return 0; };

/**
 * Gets current value of property {@link #getBreakpointM breakpointM}.
 * 
 * reakpoint (in pixel) between Small size and Medium size.
 * 
 * @returns {int} Value of property <code>breakpointM</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getBreakpointM = function() { return 0; };

/**
 * Gets current value of property {@link #getBreakpointXL breakpointXL}.
 * 
 * Breakpoint (in pixel) between large size and extra large (XL) size.
 * 
 * @returns {int} Value of property <code>breakpointXL</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getBreakpointXL = function() { return 0; };

/**
 * Gets current value of property {@link #getColumnsL columnsL}.
 * 
 * Number of columns for large size.<br>
 * The number of columns for large size must not be smaller than the number of columns for medium size.
 * 
 * @returns {int} Value of property <code>columnsL</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getColumnsL = function() { return 0; };

/**
 * Gets current value of property {@link #getColumnsM columnsM}.
 * 
 * Number of columns for medium size.
 * 
 * @returns {int} Value of property <code>columnsM</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getColumnsM = function() { return 0; };

/**
 * Gets current value of property {@link #getColumnsXL columnsXL}.
 * 
 * Number of columns for extra large size.<br>
 * The number of columns for extra large size must not be smaller than the number of columns for large size.
 * 
 * @returns {int} Value of property <code>columnsXL</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getColumnsXL = function() { return 0; };

/**
 * Gets current value of property {@link #getEmptySpanL emptySpanL}.
 * 
 * Number of grid cells that are empty at the end of each line on large size.
 * 
 * @returns {int} Value of property <code>emptySpanL</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getEmptySpanL = function() { return 0; };

/**
 * Gets current value of property {@link #getEmptySpanM emptySpanM}.
 * 
 * Number of grid cells that are empty at the end of each line on medium size.
 * 
 * @returns {int} Value of property <code>emptySpanM</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getEmptySpanM = function() { return 0; };

/**
 * Gets current value of property {@link #getEmptySpanS emptySpanS}.
 * 
 * Number of grid cells that are empty at the end of each line on small size.
 * 
 * @returns {int} Value of property <code>emptySpanS</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getEmptySpanS = function() { return 0; };

/**
 * Gets current value of property {@link #getEmptySpanXL emptySpanXL}.
 * 
 * Number of grid cells that are empty at the end of each line on extra large size.
 * 
 * @returns {int} Value of property <code>emptySpanXL</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getEmptySpanXL = function() { return 0; };

/**
 * Gets current value of property {@link #getGridDataSpan gridDataSpan}.
 * 
 * A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters
 * L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4
 * m4". Note that the parameters has to be provided in the order large medium small.<br>
 * The value set here will be set to all group elements when used with horizontal layout (<code>SmartForm</code> property <code>useHorizontalLayout</code>)
 * 
 * Default value is <code></code>.
 * @returns {sap.ui.layout.GridSpan} Value of property <code>gridDataSpan</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getGridDataSpan = function() { return new sap.ui.layout.GridSpan(); };

/**
 * Gets current value of property {@link #getLabelSpanL labelSpanL}.
 * 
 * Default span for labels in large size. This span is only used if more than 1 container is in one line, if only 1 container is in
 * the line the <code>labelSpanM</code> value is used.
 * 
 * @returns {int} Value of property <code>labelSpanL</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getLabelSpanL = function() { return 0; };

/**
 * Gets current value of property {@link #getLabelSpanM labelSpanM}.
 * 
 * Default span for labels in medium size. This property is used for full size containers. If more than one Container is in one line,
 * <code>labelSpanL</code> is used.
 * 
 * @returns {int} Value of property <code>labelSpanM</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getLabelSpanM = function() { return 0; };

/**
 * Gets current value of property {@link #getLabelSpanS labelSpanS}.
 * 
 * Default span for labels in small size.
 * 
 * @returns {int} Value of property <code>labelSpanS</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getLabelSpanS = function() { return 0; };

/**
 * Gets current value of property {@link #getLabelSpanXL labelSpanXL}.
 * 
 * Default span for labels in extra large size.
 * 
 * @returns {int} Value of property <code>labelSpanXL</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getLabelSpanXL = function() { return 0; };

/**
 * Returns a metadata object for class sap.ui.comp.smartform.Layout.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartform.Layout.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSingleGroupFullSize singleGroupFullSize}.
 * 
 * If the <code>SmartForm</code> contains only one single Group and this property is set, the Group is displayed using the full size of the
 * <code>SmartForm</code>. In this case the properties <code>columnsL</code> and <code>columnsM</code> are ignored.<br>
 * In all other cases the Group is displayed in the size of one column.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>singleGroupFullSize</code>
 * @since 1.34.1
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.getSingleGroupFullSize = function() { return false; };

/**
 * Sets a new value for property {@link #getBreakpointL breakpointL}.
 * 
 * Breakpoint (in pixel) between Medium size and Large size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iBreakpointL New value for property <code>breakpointL</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setBreakpointL = function(iBreakpointL) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getBreakpointM breakpointM}.
 * 
 * reakpoint (in pixel) between Small size and Medium size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iBreakpointM New value for property <code>breakpointM</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setBreakpointM = function(iBreakpointM) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getBreakpointXL breakpointXL}.
 * 
 * Breakpoint (in pixel) between large size and extra large (XL) size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iBreakpointXL New value for property <code>breakpointXL</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setBreakpointXL = function(iBreakpointXL) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getColumnsL columnsL}.
 * 
 * Number of columns for large size.<br>
 * The number of columns for large size must not be smaller than the number of columns for medium size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iColumnsL New value for property <code>columnsL</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setColumnsL = function(iColumnsL) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getColumnsM columnsM}.
 * 
 * Number of columns for medium size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iColumnsM New value for property <code>columnsM</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setColumnsM = function(iColumnsM) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getColumnsXL columnsXL}.
 * 
 * Number of columns for extra large size.<br>
 * The number of columns for extra large size must not be smaller than the number of columns for large size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iColumnsXL New value for property <code>columnsXL</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setColumnsXL = function(iColumnsXL) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getEmptySpanL emptySpanL}.
 * 
 * Number of grid cells that are empty at the end of each line on large size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iEmptySpanL New value for property <code>emptySpanL</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setEmptySpanL = function(iEmptySpanL) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getEmptySpanM emptySpanM}.
 * 
 * Number of grid cells that are empty at the end of each line on medium size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iEmptySpanM New value for property <code>emptySpanM</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setEmptySpanM = function(iEmptySpanM) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getEmptySpanS emptySpanS}.
 * 
 * Number of grid cells that are empty at the end of each line on small size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iEmptySpanS New value for property <code>emptySpanS</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setEmptySpanS = function(iEmptySpanS) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getEmptySpanXL emptySpanXL}.
 * 
 * Number of grid cells that are empty at the end of each line on extra large size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iEmptySpanXL New value for property <code>emptySpanXL</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setEmptySpanXL = function(iEmptySpanXL) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getGridDataSpan gridDataSpan}.
 * 
 * A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters
 * L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4
 * m4". Note that the parameters has to be provided in the order large medium small.<br>
 * The value set here will be set to all group elements when used with horizontal layout (<code>SmartForm</code> property <code>useHorizontalLayout</code>)
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {sap.ui.layout.GridSpan} sGridDataSpan New value for property <code>gridDataSpan</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setGridDataSpan = function(sGridDataSpan) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getLabelSpanL labelSpanL}.
 * 
 * Default span for labels in large size. This span is only used if more than 1 container is in one line, if only 1 container is in
 * the line the <code>labelSpanM</code> value is used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iLabelSpanL New value for property <code>labelSpanL</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setLabelSpanL = function(iLabelSpanL) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getLabelSpanM labelSpanM}.
 * 
 * Default span for labels in medium size. This property is used for full size containers. If more than one Container is in one line,
 * <code>labelSpanL</code> is used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iLabelSpanM New value for property <code>labelSpanM</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setLabelSpanM = function(iLabelSpanM) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getLabelSpanS labelSpanS}.
 * 
 * Default span for labels in small size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iLabelSpanS New value for property <code>labelSpanS</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setLabelSpanS = function(iLabelSpanS) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getLabelSpanXL labelSpanXL}.
 * 
 * Default span for labels in extra large size.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iLabelSpanXL New value for property <code>labelSpanXL</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setLabelSpanXL = function(iLabelSpanXL) { return new sap.ui.comp.smartform.Layout(); };

/**
 * Sets a new value for property {@link #getSingleGroupFullSize singleGroupFullSize}.
 * 
 * If the <code>SmartForm</code> contains only one single Group and this property is set, the Group is displayed using the full size of the
 * <code>SmartForm</code>. In this case the properties <code>columnsL</code> and <code>columnsM</code> are ignored.<br>
 * In all other cases the Group is displayed in the size of one column.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bSingleGroupFullSize New value for property <code>singleGroupFullSize</code>
 * @returns {sap.ui.comp.smartform.Layout} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34.1
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.Layout.prototype.setSingleGroupFullSize = function(bSingleGroupFullSize) { return new sap.ui.comp.smartform.Layout(); };


// ---- sap.ui.comp.smartform.SmartForm --------------------------------------------------------------------------

/**
 * Constructor for a new smartform/SmartForm.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getUseHorizontalLayout useHorizontalLayout} : boolean</li>
 * <li>{@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth} : int</li>
 * <li>{@link #getCheckButton checkButton} : boolean (default: false)</li>
 * <li>{@link #getEntityType entityType} : string</li>
 * <li>{@link #getExpandable expandable} : boolean (default: false)</li>
 * <li>{@link #getExpanded expanded} : boolean</li>
 * <li>{@link #getEditTogglable editTogglable} : boolean (default: false)</li>
 * <li>{@link #getEditable editable} : boolean (default: false)</li>
 * <li>{@link #getIgnoredFields ignoredFields} : string</li>
 * <li>{@link #getFlexEnabled flexEnabled} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGroups groups} : sap.ui.comp.smartform.Group[] (default)</li>
 * <li>{@link #getLayout layout} : sap.ui.comp.smartform.Layout</li>
 * <li>{@link #getSemanticObjectController semanticObjectController} : sap.ui.comp.navpopover.SemanticObjectController</li>
 * <li>{@link #getCustomToolbar customToolbar} : sap.m.Toolbar</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:editToggled editToggled} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:checked checked} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The <code>SmartForm</code> control renders a form (<code>sap.ui.layout.form.Form</code>) and supports key user personalization, such as adding/hiding fields and
 *        groups, changing the order of fields and groups, and changing labels. When used with the <code>SmartField</code> control the label is taken from the
 *        metadata annotation <code>sap:label</code> if not specified in the XML view.
 * 
 * <b>Note:</b> Do not put any layout controls into the <code>GroupElements</code>. This could destroy the visual layout,
 * keyboard support and screen-reader support.
 * @extends sap.ui.core.Control
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartform.SmartForm = function(sId,mSettings) {};
/**
 * This event is fired after check was performed.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.comp.smartfield.SmartField[]} oControlEvent.getParameters.erroneousFields An array containing all smart fields with errors
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.checked = function(oControlEvent) {  };

/**
 * This event is fired when the editable property is toggled.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.editable If <code>true</code>, the control is in edit mode
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.editToggled = function(oControlEvent) {  };

/**
 * Adds some group to the aggregation {@link #getGroups groups}.
 * @param {sap.ui.comp.smartform.Group}
 *            oGroup the group to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.addGroup = function(oGroup) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:checked checked} event of this <code>sap.ui.comp.smartform.SmartForm</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartform.SmartForm</code> itself.
 * 
 * This event is fired after check was performed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartform.SmartForm</code> itself
 * 
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.attachChecked = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:editToggled editToggled} event of this <code>sap.ui.comp.smartform.SmartForm</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartform.SmartForm</code> itself.
 * 
 * This event is fired when the editable property is toggled.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartform.SmartForm</code> itself
 * 
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.attachEditToggled = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Checks smart fields for client errors.
 * 
 * @param {boolean} bConsiderOnlyVisible Determines is only visible fields in visible groups should be considered. default: <code>true</code>
 * @returns {string[]} An array of fields with errors
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.check = function(bConsiderOnlyVisible) { return new Array(); };

/**
 * Destroys the customToolbar in the aggregation {@link #getCustomToolbar customToolbar}.
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.destroyCustomToolbar = function() { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Destroys all the groups in the aggregation {@link #getGroups groups}.
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.destroyGroups = function() { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Destroys the layout in the aggregation {@link #getLayout layout}.
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.destroyLayout = function() { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Destroys the semanticObjectController in the aggregation {@link #getSemanticObjectController semanticObjectController}.
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.destroySemanticObjectController = function() { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:checked checked} event of this <code>sap.ui.comp.smartform.SmartForm</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.detachChecked = function(fnFunction,oListener) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:editToggled editToggled} event of this <code>sap.ui.comp.smartform.SmartForm</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.detachEditToggled = function(fnFunction,oListener) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Creates a new subclass of class sap.ui.comp.smartform.SmartForm with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartform.SmartForm.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:checked checked} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.comp.smartfield.SmartField[]} [mParameters.erroneousFields] An array containing all smart fields with errors
 * 
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.fireChecked = function(mParameters) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Fires event {@link #event:editToggled editToggled} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.editable] If <code>true</code>, the control is in edit mode
 * 
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.fireEditToggled = function(mParameters) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Gets current value of property {@link #getCheckButton checkButton}.
 * 
 * Specifies whether a check button is added to the toolbar.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>checkButton</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getCheckButton = function() { return false; };

/**
 * Gets content of aggregation {@link #getCustomToolbar customToolbar}.
 * 
 * An additional toolbar that can be added by the users, which can contain further custom buttons, controls, etc.
 * 
 * @returns {sap.m.Toolbar}
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getCustomToolbar = function() { return new sap.m.Toolbar(); };

/**
 * Gets current value of property {@link #getEditable editable}.
 * 
 * Specifies whether the form is editable.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>editable</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getEditable = function() { return false; };

/**
 * Gets current value of property {@link #getEditTogglable editTogglable}.
 * 
 * If set to <code>true</code>, a button to toggle the <code>editable</code> property is shown in the toolbar.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>editTogglable</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getEditTogglable = function() { return false; };

/**
 * Gets current value of property {@link #getEntityType entityType}.
 * 
 * CSV of entity types for which the flexibility features are available.<br>
 * For more information about SAPUI5 flexibility, refer to the Developer Guide.<br>
 * <b>Note:</b>
 * No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * @returns {string} Value of property <code>entityType</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getEntityType = function() { return ""; };

/**
 * Gets current value of property {@link #getExpandable expandable}.
 * 
 * Specifies whether the control is expandable. Per default the control is not rendered as expanded.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>expandable</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getExpandable = function() { return false; };

/**
 * Gets current value of property {@link #getExpanded expanded}.
 * 
 * If expandable, this property indicates whether the state is expanded or not. If expanded, then the toolbar (if available) and the
 * content is rendered; if expanded is false, then only the headerText/headerToolbar is rendered.
 * 
 * @returns {boolean} Value of property <code>expanded</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getExpanded = function() { return false; };

/**
 * Gets current value of property {@link #getFlexEnabled flexEnabled}.
 * 
 * Specifies whether the form enables flexibility features, such as adding new fields.<br>
 * For more information about SAPUI5 flexibility, refer to the Developer Guide.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>flexEnabled</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getFlexEnabled = function() { return false; };

/**
 * Gets content of aggregation {@link #getGroups groups}.
 * 
 * Groups are used to group form elements.
 * 
 * @returns {sap.ui.comp.smartform.Group[]}
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getGroups = function() { return new Array(); };

/**
 * Gets current value of property {@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth}.
 * 
 * Specifies the minimal size in pixels of all group elements of the form if the horizontal layout is used.
 * 
 * @returns {int} Value of property <code>horizontalLayoutGroupElementMinWidth</code>
 * 
 * @deprecated Since version 1.48.0, please do not use this property as it does not have any effect on the current layout of the <code>SmartForm</code> control.
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getHorizontalLayoutGroupElementMinWidth = function() { return 0; };

/**
 * Gets current value of property {@link #getIgnoredFields ignoredFields}.
 * 
 * CSV of fields that must be ignored in the OData metadata by the SmartForm control.<br>
 * <b>Note:</b><br>
 * No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * @returns {string} Value of property <code>ignoredFields</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getIgnoredFields = function() { return ""; };

/**
 * Gets content of aggregation {@link #getLayout layout}.
 * 
 * Layout settings to adjust <code>ResponsiveGridLayout</code>
 * 
 * @returns {sap.ui.comp.smartform.Layout}
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getLayout = function() { return new sap.ui.comp.smartform.Layout(); };

/**
 * Returns a metadata object for class sap.ui.comp.smartform.SmartForm.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartform.SmartForm.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getSemanticObjectController semanticObjectController}.
 * 
 * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.
 * 
 * @returns {sap.ui.comp.navpopover.SemanticObjectController}
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getSemanticObjectController = function() { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Retrieves all the smart fields of the form.
 * 
 * <b>Note:</b> Even invisible <code>SmartField</code> controls are returned if the <code>group</code> or <code>groupElement</code> is visible.
 * 
 * @param {boolean} bConsiderOnlyVisibleGroups Determines if only visible <code>groups</code> are taken into account; default is true
 * @param {boolean} bConsiderOnlyVisibleGroupElements Determines if only visible <code>groupElement</code> elements are taken into account; default is false (to be compatible)
 * @return {sap.ui.comp.smartfield.SmartField[]} An array of smart fields (might be empty).
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getSmartFields = function(bConsiderOnlyVisibleGroups,bConsiderOnlyVisibleGroupElements) { return new Array(); };

/**
 * Gets current value of property {@link #getTitle title}.
 * 
 * Title of the form.
 * 
 * @returns {string} Value of property <code>title</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getTitle = function() { return ""; };

/**
 * Gets current value of property {@link #getUseHorizontalLayout useHorizontalLayout}.
 * 
 * Specifies whether the groups are rendered in a {@link sap.ui.layout.form.ResponsiveLayout ResponsiveLayout} with the label above
 * the field. Each group is rendered in a new line.
 * 
 * @returns {boolean} Value of property <code>useHorizontalLayout</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getUseHorizontalLayout = function() { return false; };

/**
 * Returns the array of properties currently visible on the UI.
 * 
 * @return {string[]} The properties currently visible
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.getVisibleProperties = function() { return new Array(); };

/**
 * Checks for the provided <code>sap.ui.comp.smartform.Group</code> in the aggregation {@link #getGroups groups}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.comp.smartform.Group}
 *           oGroup The group whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.indexOfGroup = function(oGroup) { return 0; };

/**
 * Inserts a group into the aggregation {@link #getGroups groups}.
 * 
 * @param {sap.ui.comp.smartform.Group}
 *            oGroup the group to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the group should be inserted at; for
 *              a negative value of <code>iIndex</code>, the group is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the group is inserted at
 *              the last position
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.insertGroup = function(oGroup,iIndex) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Sets default span for <code>GridData</code> layout of group elements when used with horizontal layout.
 * 
 * <b>Note:</b> There is no need to call this function
 * as the update of all <code>GroupElement</code> elements inside the <code>SmartForm</code> control is triggered automatically
 * if the <code>GridDataSpan</code> property of the <code>Layout</code> aggregation changes or the <code>Layout</code> aggregation is added.
 * @return {sap.ui.comp.smartform.SmartForm} <code>this</code> to allow method chaining.
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.propagateGridDataSpan = function() { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Removes all the controls from the aggregation {@link #getGroups groups}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.comp.smartform.Group[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.removeAllGroups = function() { return new Array(); };

/**
 * Removes a group from the aggregation {@link #getGroups groups}.
 * 
 * @param {int | string | sap.ui.comp.smartform.Group} vGroup The group to remove or its index or id
 * @returns {sap.ui.comp.smartform.Group} The removed group or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.removeGroup = function(vGroup) { return new sap.ui.comp.smartform.Group(); };

/**
 * Sets a new value for property {@link #getCheckButton checkButton}.
 * 
 * Specifies whether a check button is added to the toolbar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bCheckButton New value for property <code>checkButton</code>
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setCheckButton = function(bCheckButton) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Sets the aggregated {@link #getCustomToolbar customToolbar}.
 * @param {sap.m.Toolbar} oCustomToolbar The customToolbar to set
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setCustomToolbar = function(oCustomToolbar) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Sets a new value for property {@link #getEditable editable}.
 * 
 * Specifies whether the form is editable.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEditable New value for property <code>editable</code>
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setEditable = function(bEditable) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Sets a new value for property {@link #getEditTogglable editTogglable}.
 * 
 * If set to <code>true</code>, a button to toggle the <code>editable</code> property is shown in the toolbar.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEditTogglable New value for property <code>editTogglable</code>
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setEditTogglable = function(bEditTogglable) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Sets a new value for property {@link #getEntityType entityType}.
 * 
 * CSV of entity types for which the flexibility features are available.<br>
 * For more information about SAPUI5 flexibility, refer to the Developer Guide.<br>
 * <b>Note:</b>
 * No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sEntityType New value for property <code>entityType</code>
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setEntityType = function(sEntityType) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Sets a new value for property {@link #getExpandable expandable}.
 * 
 * Specifies whether the control is expandable. Per default the control is not rendered as expanded.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bExpandable New value for property <code>expandable</code>
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setExpandable = function(bExpandable) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Sets a new value for property {@link #getExpanded expanded}.
 * 
 * If expandable, this property indicates whether the state is expanded or not. If expanded, then the toolbar (if available) and the
 * content is rendered; if expanded is false, then only the headerText/headerToolbar is rendered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bExpanded New value for property <code>expanded</code>
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setExpanded = function(bExpanded) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Sets a new value for property {@link #getFlexEnabled flexEnabled}.
 * 
 * Specifies whether the form enables flexibility features, such as adding new fields.<br>
 * For more information about SAPUI5 flexibility, refer to the Developer Guide.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bFlexEnabled New value for property <code>flexEnabled</code>
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setFlexEnabled = function(bFlexEnabled) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Sets the focus on the first editable control.
 * 
 * @since 1.36.0
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setFocusOnEditableControl = function() {  };

/**
 * Sets a new value for property {@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth}.
 * 
 * Specifies the minimal size in pixels of all group elements of the form if the horizontal layout is used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iHorizontalLayoutGroupElementMinWidth New value for property <code>horizontalLayoutGroupElementMinWidth</code>
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.48.0, please do not use this property as it does not have any effect on the current layout of the <code>SmartForm</code> control.
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setHorizontalLayoutGroupElementMinWidth = function(iHorizontalLayoutGroupElementMinWidth) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Sets a new value for property {@link #getIgnoredFields ignoredFields}.
 * 
 * CSV of fields that must be ignored in the OData metadata by the SmartForm control.<br>
 * <b>Note:</b><br>
 * No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIgnoredFields New value for property <code>ignoredFields</code>
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setIgnoredFields = function(sIgnoredFields) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Sets the aggregated {@link #getLayout layout}.
 * @param {sap.ui.comp.smartform.Layout} oLayout The layout to set
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setLayout = function(oLayout) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Sets the aggregated {@link #getSemanticObjectController semanticObjectController}.
 * @param {sap.ui.comp.navpopover.SemanticObjectController} oSemanticObjectController The semanticObjectController to set
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setSemanticObjectController = function(oSemanticObjectController) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Sets a new value for property {@link #getTitle title}.
 * 
 * Title of the form.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTitle New value for property <code>title</code>
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setTitle = function(sTitle) { return new sap.ui.comp.smartform.SmartForm(); };

/**
 * Sets a new value for property {@link #getUseHorizontalLayout useHorizontalLayout}.
 * 
 * Specifies whether the groups are rendered in a {@link sap.ui.layout.form.ResponsiveLayout ResponsiveLayout} with the label above
 * the field. Each group is rendered in a new line.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bUseHorizontalLayout New value for property <code>useHorizontalLayout</code>
 * @returns {sap.ui.comp.smartform.SmartForm} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartform.SmartForm.prototype.setUseHorizontalLayout = function(bUseHorizontalLayout) { return new sap.ui.comp.smartform.SmartForm(); };


// ---- sap.ui.comp.smartlist.ListType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.smartlist.ListType.toString = function() { return ""; };

// ---- sap.ui.comp.smartlist.SmartList --------------------------------------------------------------------------

/**
 * Constructor for a new smartlist/SmartList.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEntitySet entitySet} : string</li>
 * <li>{@link #getSelectFields selectFields} : string</li>
 * <li>{@link #getExpandFields expandFields} : string</li>
 * <li>{@link #getShowRowCount showRowCount} : boolean (default: true)</li>
 * <li>{@link #getHeader header} : string</li>
 * <li>{@link #getEnableAutoBinding enableAutoBinding} : boolean (default: false)</li>
 * <li>{@link #getListBindingPath listBindingPath} : string</li>
 * <li>{@link #getListType listType} : sap.ui.comp.smartlist.ListType</li>
 * <li>{@link #getShowFullScreenButton showFullScreenButton} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getListItemTemplate listItemTemplate} : sap.m.ListItemBase</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSmartFilter smartFilter} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:initialise initialise} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeRebindList beforeRebindList} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:dataReceived dataReceived} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.VBox#constructor sap.m.VBox}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class A smart control to simplify using the <code>sap.m.List</code> and <code>sap.m.Tree</code> controls in list patterns.
 *        <h3>Overview</h3>
 *        The <code>SmartList</code> control creates a list or tree based on the configuration specified. There is, however, a difference to
 *        other smart controls: This control does not use annotations to automatically create its content. Hence, a template must always be
 *        provided for this control.
 *        <h3>Structure</h3>
 *        The <code>SmartList</code> control consists of the following elements:
 *        <ul>
 *        <li> <code>OverflowToolbar</code> control: Displays the header and other action buttons. Users can add their own toolbar and buttons
 *        in the view.</li>
 *        <li> <code>List</code> or <code>Tree</code> control: The actual list/tree control. Users can also add this in the view with the
 *        required configuration.</li>
 *        </ul>
 *        The <code>entitySet</code> property must be specified to use the control. This attribute is used to fetch the actual data.<br>
 *        The <code>listItemTemplate</code> aggregation must also be specified with the required item template, such as
 *        <code>StandardListItem/StandardTreeItem</code>, which will be used during binding.
 *        <h3><b>Note:</b></h3>
 *        Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.
 * @extends sap.m.VBox
 * @constructor
 * @public
 * @since 1.48
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartlist.SmartList = function(sId,mSettings) {};
/**
 * Event fired right before the binding is being done.
 * @event
 * @since 1.48.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.beforeRebindList = function(oControlEvent) {  };

/**
 * Event fired when data is received after binding. The event is usually only fired if the binding for the list is done by the
 * <code>SmartList</code> control itself.
 * @event
 * @since 1.48.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.dataReceived = function(oControlEvent) {  };

/**
 * Event fired once the control has been initialized.
 * @event
 * @since 1.48.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.initialise = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeRebindList beforeRebindList} event of this <code>sap.ui.comp.smartlist.SmartList</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartlist.SmartList</code> itself.
 * 
 * Event fired right before the binding is being done.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartlist.SmartList</code> itself
 * 
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.48.0
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.attachBeforeRebindList = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:dataReceived dataReceived} event of this <code>sap.ui.comp.smartlist.SmartList</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartlist.SmartList</code> itself.
 * 
 * Event fired when data is received after binding. The event is usually only fired if the binding for the list is done by the
 * <code>SmartList</code> control itself.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartlist.SmartList</code> itself
 * 
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.48.0
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.attachDataReceived = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:initialise initialise} event of this <code>sap.ui.comp.smartlist.SmartList</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartlist.SmartList</code> itself.
 * 
 * Event fired once the control has been initialized.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartlist.SmartList</code> itself
 * 
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.48.0
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.attachInitialise = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Destroys the listItemTemplate in the aggregation {@link #getListItemTemplate listItemTemplate}.
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.destroyListItemTemplate = function() { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeRebindList beforeRebindList} event of this <code>sap.ui.comp.smartlist.SmartList</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.detachBeforeRebindList = function(fnFunction,oListener) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:dataReceived dataReceived} event of this <code>sap.ui.comp.smartlist.SmartList</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.detachDataReceived = function(fnFunction,oListener) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:initialise initialise} event of this <code>sap.ui.comp.smartlist.SmartList</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.detachInitialise = function(fnFunction,oListener) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Cleans up the control
 * 
 * @protected
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.ui.comp.smartlist.SmartList with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.VBox.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartlist.SmartList.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:beforeRebindList beforeRebindList} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.48.0
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.fireBeforeRebindList = function(mParameters) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Fires event {@link #event:dataReceived dataReceived} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.48.0
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.fireDataReceived = function(mParameters) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Fires event {@link #event:initialise initialise} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.48.0
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.fireInitialise = function(mParameters) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
 * 
 * When set to <code>true</code>, this enables automatic binding of the list using the <code>listBindingPath</code> (if it
 * exists) or <code>entitySet</code> property. This happens right after the <code>initialise</code> event has been fired.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableAutoBinding</code>
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.getEnableAutoBinding = function() { return false; };

/**
 * Gets current value of property {@link #getEntitySet entitySet}.
 * 
 * The entity set name from which to fetch data.<br>
 * <i>Note:</i><br>
 * This is not a dynamic UI5 property.
 * 
 * @returns {string} Value of property <code>entitySet</code>
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.getEntitySet = function() { return ""; };

/**
 * Gets current value of property {@link #getExpandFields expandFields}.
 * 
 * CSV of fields that must be expanded when request is sent to the backend.<br>
 * <i>Note:</i><br>
 * No validation is done. Please ensure that you do not add spaces or special characters.<br>
 * This property is only needed when used together with an <code>ODataModel</code>.
 * 
 * @returns {string} Value of property <code>expandFields</code>
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.getExpandFields = function() { return ""; };

/**
 * Gets current value of property {@link #getHeader header}.
 * 
 * Specifies header text that is shown in list.
 * 
 * @returns {string} Value of property <code>header</code>
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.getHeader = function() { return ""; };

/**
 * Returns the <code>List</code> or <code>Tree</code> used internally.
 * 
 * @public
 * @returns {object} the control
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.getList = function() { return new Object(); };

/**
 * Gets current value of property {@link #getListBindingPath listBindingPath}.
 * 
 * Specifies the path that is used during the binding of the list. If not specified, the <code>entitySet</code> property is used
 * instead. (used only if binding is done automatically or when using <code>rebindList</code>)
 * 
 * @returns {string} Value of property <code>listBindingPath</code>
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.getListBindingPath = function() { return ""; };

/**
 * Gets content of aggregation {@link #getListItemTemplate listItemTemplate}.
 * 
 * Specifies the template that is used for the inner <code>List</code> or <code>Tree</code> control.<br>
 * <b>Note:</b><br>
 * This template is used when binding the <code>items</code> of <code>sap.m.List</code> or <code>sap.m.Tree</code> control, and
 * will not be available in the <code>SmartList</code> control once the binding has been done.
 * 
 * @returns {sap.m.ListItemBase}
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.getListItemTemplate = function() { return new sap.m.ListItemBase(); };

/**
 * Gets current value of property {@link #getListType listType}.
 * 
 * Specifies the type of list to be created in the <code>SmartList</code> control.<br>
 * <i>Note:</i><br>
 * If you add a <code>List</code> or <code>Tree</code> to the content of the <code>SmartList</code> control in the view, this
 * property has no effect.
 * 
 * @returns {sap.ui.comp.smartlist.ListType} Value of property <code>listType</code>
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.getListType = function() { return new sap.ui.comp.smartlist.ListType(); };

/**
 * Returns a metadata object for class sap.ui.comp.smartlist.SmartList.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartlist.SmartList.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSelectFields selectFields}.
 * 
 * CSV of fields that must be selected when request is sent to the backend.<br>
 * <i>Note:</i><br>
 * No validation is done. Please ensure that you do not add spaces or special characters.<br>
 * This property is only needed when used together with an <code>ODataModel</code>.
 * 
 * @returns {string} Value of property <code>selectFields</code>
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.getSelectFields = function() { return ""; };

/**
 * Gets current value of property {@link #getShowFullScreenButton showFullScreenButton}.
 * 
 * Controls the visibility of the full screen button.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showFullScreenButton</code>
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.getShowFullScreenButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowRowCount showRowCount}.
 * 
 * If set to <code>true</code> (default), the number of rows is shown along with the header text.<br>
 * If set to <code>false</code>, the number of rows will not be shown on the user interface.<br>
 * <i>Note:</i><br>
 * To avoid sending dedicated OData requests in order to improve your application's performance, you must configure the binding of the
 * list as required.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showRowCount</code>
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.getShowRowCount = function() { return false; };

/**
 * ID of the element which is the current target of the association {@link #getSmartFilter smartFilter}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.getSmartFilter = function() { return new sap.ui.core.ID(); };

/**
 * Checks whether the control is initialized.
 * 
 * @returns {boolean} returns whether control has already been initialized
 * @protected
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.isInitialised = function() { return false; };

/**
 * This can be used to trigger binding on the list used in the SmartList
 * 
 * @param {boolean} bForceRebind - force bind call to be triggered on the inner list
 * @protected
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.rebindList = function(bForceRebind) {  };

/**
 * Sets a new value for property {@link #getEnableAutoBinding enableAutoBinding}.
 * 
 * When set to <code>true</code>, this enables automatic binding of the list using the <code>listBindingPath</code> (if it
 * exists) or <code>entitySet</code> property. This happens right after the <code>initialise</code> event has been fired.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableAutoBinding New value for property <code>enableAutoBinding</code>
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.setEnableAutoBinding = function(bEnableAutoBinding) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Sets a new value for property {@link #getEntitySet entitySet}.
 * 
 * The entity set name from which to fetch data.<br>
 * <i>Note:</i><br>
 * This is not a dynamic UI5 property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sEntitySet New value for property <code>entitySet</code>
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.setEntitySet = function(sEntitySet) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Sets a new value for property {@link #getExpandFields expandFields}.
 * 
 * CSV of fields that must be expanded when request is sent to the backend.<br>
 * <i>Note:</i><br>
 * No validation is done. Please ensure that you do not add spaces or special characters.<br>
 * This property is only needed when used together with an <code>ODataModel</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sExpandFields New value for property <code>expandFields</code>
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.setExpandFields = function(sExpandFields) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Sets a new value for property {@link #getHeader header}.
 * 
 * Specifies header text that is shown in list.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sHeader New value for property <code>header</code>
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.setHeader = function(sHeader) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Sets a new value for property {@link #getListBindingPath listBindingPath}.
 * 
 * Specifies the path that is used during the binding of the list. If not specified, the <code>entitySet</code> property is used
 * instead. (used only if binding is done automatically or when using <code>rebindList</code>)
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sListBindingPath New value for property <code>listBindingPath</code>
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.setListBindingPath = function(sListBindingPath) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Sets the aggregated {@link #getListItemTemplate listItemTemplate}.
 * @param {sap.m.ListItemBase} oListItemTemplate The listItemTemplate to set
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.setListItemTemplate = function(oListItemTemplate) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Sets a new value for property {@link #getListType listType}.
 * 
 * Specifies the type of list to be created in the <code>SmartList</code> control.<br>
 * <i>Note:</i><br>
 * If you add a <code>List</code> or <code>Tree</code> to the content of the <code>SmartList</code> control in the view, this
 * property has no effect.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.comp.smartlist.ListType} sListType New value for property <code>listType</code>
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.setListType = function(sListType) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Sets a new value for property {@link #getSelectFields selectFields}.
 * 
 * CSV of fields that must be selected when request is sent to the backend.<br>
 * <i>Note:</i><br>
 * No validation is done. Please ensure that you do not add spaces or special characters.<br>
 * This property is only needed when used together with an <code>ODataModel</code>.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSelectFields New value for property <code>selectFields</code>
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.setSelectFields = function(sSelectFields) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Sets a new value for property {@link #getShowFullScreenButton showFullScreenButton}.
 * 
 * Controls the visibility of the full screen button.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowFullScreenButton New value for property <code>showFullScreenButton</code>
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.setShowFullScreenButton = function(bShowFullScreenButton) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Sets a new value for property {@link #getShowRowCount showRowCount}.
 * 
 * If set to <code>true</code> (default), the number of rows is shown along with the header text.<br>
 * If set to <code>false</code>, the number of rows will not be shown on the user interface.<br>
 * <i>Note:</i><br>
 * To avoid sending dedicated OData requests in order to improve your application's performance, you must configure the binding of the
 * list as required.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowRowCount New value for property <code>showRowCount</code>
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.setShowRowCount = function(bShowRowCount) { return new sap.ui.comp.smartlist.SmartList(); };

/**
 * Sets the associated {@link #getSmartFilter smartFilter}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oSmartFilter ID of an element which becomes the new target of this smartFilter association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartlist.SmartList} Reference to <code>this</code> in order to allow method chaining
 * @since 1.48.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.SmartList.prototype.setSmartFilter = function(oSmartFilter) { return new sap.ui.comp.smartlist.SmartList(); };


// ---- sap.ui.comp.smartmicrochart.SmartAreaMicroChart --------------------------------------------------------------------------

/**
 * Constructor for a new sap.ui.comp.smartmicrochart/SmartAreaMicroChart.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEntitySet entitySet} : string</li>
 * <li>{@link #getShowLabel showLabel} : boolean (default: true)</li>
 * <li>{@link #getChartType chartType} : string</li>
 * <li>{@link #getEnableAutoBinding enableAutoBinding} : boolean (default: true)</li>
 * <li>{@link #getChartBindingPath chartBindingPath} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 164px)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 74px)</li>
 * <li>{@link #getIsResponsive isResponsive} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getChartTitle chartTitle} : (sap.ui.core.ID | sap.m.Label)</li>
 * <li>{@link #getChartDescription chartDescription} : (sap.ui.core.ID | sap.m.Label)</li>
 * <li>{@link #getUnitOfMeasure unitOfMeasure} : (sap.ui.core.ID | sap.m.Label)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:initialize initialize} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string}
 *          [sId] id for the new control, generated automatically if no id is given
 * @param {object}
 *          [mSettings] initial settings for the new control
 * @class The SmartAreaMicroChart control creates a AreaMicroChart based on OData metadata and the configuration
 *        specified. The entitySet attribute must be specified to use the control. This attribute is used to fetch
 *        fields from OData metadata, from which Micro Area Chart UI will be generated; it can also be used to fetch
 *        the actual chart data.<br>
 *        <b><i>Note:</i></b><br>
 *        Most of the attributes/properties are not dynamic and cannot be changed once the control has been
 *        initialised.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * @since 1.38
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart = function(sId,mSettings) {};
/**
 * Event fired once the control has been initialized.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.initialize = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:initialize initialize} event of this <code>sap.ui.comp.smartmicrochart.SmartAreaMicroChart</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartmicrochart.SmartAreaMicroChart</code> itself.
 * 
 * Event fired once the control has been initialized.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartmicrochart.SmartAreaMicroChart</code> itself
 * 
 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.attachInitialize = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartmicrochart.SmartAreaMicroChart(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:initialize initialize} event of this <code>sap.ui.comp.smartmicrochart.SmartAreaMicroChart</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.detachInitialize = function(fnFunction,oListener) { return new sap.ui.comp.smartmicrochart.SmartAreaMicroChart(); };

/**
 * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartAreaMicroChart with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:initialize initialize} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.fireInitialize = function(mParameters) { return new sap.ui.comp.smartmicrochart.SmartAreaMicroChart(); };

/**
 * Gets current value of property {@link #getChartBindingPath chartBindingPath}.
 * 
 * This attribute can be used to specify the relative path ( without '/') to an entitySet ( not a single entity)
 * that is used during the binding of the chart. It can be e.g. a navigation property which will be added to the context path.
 * If not specified, the entitySet attribute is used instead.
 * 
 * @returns {string} Value of property <code>chartBindingPath</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.getChartBindingPath = function() { return ""; };

/**
 * ID of the element which is the current target of the association {@link #getChartDescription chartDescription}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.getChartDescription = function() { return new sap.ui.core.ID(); };

/**
 * ID of the element which is the current target of the association {@link #getChartTitle chartTitle}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.getChartTitle = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getChartType chartType}.
 * 
 * Specifies the type of Chart. Note that this property is read-only.
 * 
 * @returns {string} Value of property <code>chartType</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.getChartType = function() { return ""; };

/**
 * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
 * 
 * Only <code>true</code> value is supported: the chart will be bound to the chartBindingPath or to the entitySet
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enableAutoBinding</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.getEnableAutoBinding = function() { return false; };

/**
 * Gets current value of property {@link #getEntitySet entitySet}.
 * 
 * The entity set name from where the data is fetched and the internal AreaMicroChart representation is created. Note that this is not a dynamic UI5
 * property
 * 
 * @returns {string} Value of property <code>entitySet</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.getEntitySet = function() { return ""; };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * Defines the height.
 * 
 * Default value is <code>74px</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getIsResponsive isResponsive}.
 * 
 * If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed. Height and width properties are ignored.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>isResponsive</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.getIsResponsive = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartAreaMicroChart.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowLabel showLabel}.
 * 
 * Determines if the target value and actual value
 * are displayed or not
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showLabel</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.getShowLabel = function() { return false; };

/**
 * ID of the element which is the current target of the association {@link #getUnitOfMeasure unitOfMeasure}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.getUnitOfMeasure = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width.
 * 
 * Default value is <code>164px</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Sets a new value for property {@link #getChartBindingPath chartBindingPath}.
 * 
 * This attribute can be used to specify the relative path ( without '/') to an entitySet ( not a single entity)
 * that is used during the binding of the chart. It can be e.g. a navigation property which will be added to the context path.
 * If not specified, the entitySet attribute is used instead.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sChartBindingPath New value for property <code>chartBindingPath</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.setChartBindingPath = function(sChartBindingPath) { return new sap.ui.comp.smartmicrochart.SmartAreaMicroChart(); };

/**
 * Sets the associated {@link #getChartDescription chartDescription}.
 * @param {sap.ui.core.ID | sap.m.Label} oChartDescription ID of an element which becomes the new target of this chartDescription association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.setChartDescription = function(oChartDescription) { return new sap.ui.comp.smartmicrochart.SmartAreaMicroChart(); };

/**
 * Sets the associated {@link #getChartTitle chartTitle}.
 * @param {sap.ui.core.ID | sap.m.Label} oChartTitle ID of an element which becomes the new target of this chartTitle association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.setChartTitle = function(oChartTitle) { return new sap.ui.comp.smartmicrochart.SmartAreaMicroChart(); };

/**
 * Sets a new value for property {@link #getEntitySet entitySet}.
 * 
 * The entity set name from where the data is fetched and the internal AreaMicroChart representation is created. Note that this is not a dynamic UI5
 * property
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sEntitySet New value for property <code>entitySet</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.setEntitySet = function(sEntitySet) { return new sap.ui.comp.smartmicrochart.SmartAreaMicroChart(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * Defines the height.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>74px</code>.
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.setHeight = function(sHeight) { return new sap.ui.comp.smartmicrochart.SmartAreaMicroChart(); };

/**
 * Sets a new value for property {@link #getIsResponsive isResponsive}.
 * 
 * If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed. Height and width properties are ignored.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bIsResponsive New value for property <code>isResponsive</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.setIsResponsive = function(bIsResponsive) { return new sap.ui.comp.smartmicrochart.SmartAreaMicroChart(); };

/**
 * Sets a new value for property {@link #getShowLabel showLabel}.
 * 
 * Determines if the target value and actual value
 * are displayed or not
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowLabel New value for property <code>showLabel</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.setShowLabel = function(bShowLabel) { return new sap.ui.comp.smartmicrochart.SmartAreaMicroChart(); };

/**
 * Sets the associated {@link #getUnitOfMeasure unitOfMeasure}.
 * @param {sap.ui.core.ID | sap.m.Label} oUnitOfMeasure ID of an element which becomes the new target of this unitOfMeasure association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.setUnitOfMeasure = function(oUnitOfMeasure) { return new sap.ui.comp.smartmicrochart.SmartAreaMicroChart(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>164px</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartAreaMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartAreaMicroChart.prototype.setWidth = function(sWidth) { return new sap.ui.comp.smartmicrochart.SmartAreaMicroChart(); };


// ---- sap.ui.comp.smartmicrochart.SmartBulletMicroChart --------------------------------------------------------------------------

/**
 * Constructor for a new sap.ui.comp.smartmicrochart/SmartBulletMicroChart.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEntitySet entitySet} : string</li>
 * <li>{@link #getShowLabel showLabel} : boolean (default: true)</li>
 * <li>{@link #getChartType chartType} : string (default: Bullet)</li>
 * <li>{@link #getEnableAutoBinding enableAutoBinding} : boolean (default: false)</li>
 * <li>{@link #getChartBindingPath chartBindingPath} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 164px)</li>
 * <li>{@link #getIsResponsive isResponsive} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getChartTitle chartTitle} : (sap.ui.core.ID | sap.m.Label)</li>
 * <li>{@link #getChartDescription chartDescription} : (sap.ui.core.ID | sap.m.Label)</li>
 * <li>{@link #getUnitOfMeasure unitOfMeasure} : (sap.ui.core.ID | sap.m.Label)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:initialize initialize} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The SmartBulletMicroChart control creates a <code>sap.suite.ui.microchart.BulletMicroChart</code>
 * based on OData metadata and the configuration specified by <code>mSettings</code>.
 * The entitySet attribute must be specified to use the control. This attribute is used to fetch metadata and
 * annotation information from the given default OData model. Based on this, the BulletMicroChart UI
 * is created.
 * <br>
 * <b><i>Note:</i></b><br>
 * Most of the attributes/properties are not dynamic and cannot be changed once the control has been
 * initialized.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * @since 1.38
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart = function(sId,mSettings) {};
/**
 * Event fired once the control has been initialized.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.initialize = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:initialize initialize} event of this <code>sap.ui.comp.smartmicrochart.SmartBulletMicroChart</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartmicrochart.SmartBulletMicroChart</code> itself.
 * 
 * Event fired once the control has been initialized.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartmicrochart.SmartBulletMicroChart</code> itself
 * 
 * @returns {sap.ui.comp.smartmicrochart.SmartBulletMicroChart} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.attachInitialize = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartmicrochart.SmartBulletMicroChart(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:initialize initialize} event of this <code>sap.ui.comp.smartmicrochart.SmartBulletMicroChart</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartmicrochart.SmartBulletMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.detachInitialize = function(fnFunction,oListener) { return new sap.ui.comp.smartmicrochart.SmartBulletMicroChart(); };

/**
 * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartBulletMicroChart with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:initialize initialize} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartmicrochart.SmartBulletMicroChart} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.fireInitialize = function(mParameters) { return new sap.ui.comp.smartmicrochart.SmartBulletMicroChart(); };

/**
 * Gets current value of property {@link #getChartBindingPath chartBindingPath}.
 * 
 * This attribute can be used to specify the relative path ( without '/') to an entity ( not an entitySet) that
 * is used during the binding of the chart. It can be e.g. a navigation property which will be added to the context path
 * 
 * @returns {string} Value of property <code>chartBindingPath</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.getChartBindingPath = function() { return ""; };

/**
 * ID of the element which is the current target of the association {@link #getChartDescription chartDescription}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.getChartDescription = function() { return new sap.ui.core.ID(); };

/**
 * ID of the element which is the current target of the association {@link #getChartTitle chartTitle}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.getChartTitle = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getChartType chartType}.
 * 
 * Specifies the chart type. Note that this property is read-only.
 * 
 * Default value is <code>Bullet</code>.
 * @returns {string} Value of property <code>chartType</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.getChartType = function() { return ""; };

/**
 * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
 * 
 * If set to <code>true</code>, this enables automatic binding of the chart using the chartBindingPath (if it exists)
 * property.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableAutoBinding</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.getEnableAutoBinding = function() { return false; };

/**
 * Gets current value of property {@link #getEntitySet entitySet}.
 * 
 * The entity set name from where the data is fetched and the internal BulletMicroChart representation is created.
 * Note that this is not a dynamic UI5 property.
 * 
 * @returns {string} Value of property <code>entitySet</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.getEntitySet = function() { return ""; };

/**
 * Gets current value of property {@link #getIsResponsive isResponsive}.
 * 
 * If this is set to true, width and height of the control are determined by the width and height of the container in which the control is placed.
 * <code>width</code> property is ignored.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>isResponsive</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.getIsResponsive = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartBulletMicroChart.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowLabel showLabel}.
 * 
 * Determines if any label is shown or not
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showLabel</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.getShowLabel = function() { return false; };

/**
 * ID of the element which is the current target of the association {@link #getUnitOfMeasure unitOfMeasure}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.getUnitOfMeasure = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width.
 * 
 * Default value is <code>164px</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Sets a new value for property {@link #getChartBindingPath chartBindingPath}.
 * 
 * This attribute can be used to specify the relative path ( without '/') to an entity ( not an entitySet) that
 * is used during the binding of the chart. It can be e.g. a navigation property which will be added to the context path
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sChartBindingPath New value for property <code>chartBindingPath</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartBulletMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.setChartBindingPath = function(sChartBindingPath) { return new sap.ui.comp.smartmicrochart.SmartBulletMicroChart(); };

/**
 * Sets the associated {@link #getChartDescription chartDescription}.
 * @param {sap.ui.core.ID | sap.m.Label} oChartDescription ID of an element which becomes the new target of this chartDescription association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartmicrochart.SmartBulletMicroChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.setChartDescription = function(oChartDescription) { return new sap.ui.comp.smartmicrochart.SmartBulletMicroChart(); };

/**
 * Sets the associated {@link #getChartTitle chartTitle}.
 * @param {sap.ui.core.ID | sap.m.Label} oChartTitle ID of an element which becomes the new target of this chartTitle association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartmicrochart.SmartBulletMicroChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.setChartTitle = function(oChartTitle) { return new sap.ui.comp.smartmicrochart.SmartBulletMicroChart(); };

/**
 * Sets a new value for property {@link #getEnableAutoBinding enableAutoBinding}.
 * 
 * If set to <code>true</code>, this enables automatic binding of the chart using the chartBindingPath (if it exists)
 * property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableAutoBinding New value for property <code>enableAutoBinding</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartBulletMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.setEnableAutoBinding = function(bEnableAutoBinding) { return new sap.ui.comp.smartmicrochart.SmartBulletMicroChart(); };

/**
 * Sets a new value for property {@link #getEntitySet entitySet}.
 * 
 * The entity set name from where the data is fetched and the internal BulletMicroChart representation is created.
 * Note that this is not a dynamic UI5 property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sEntitySet New value for property <code>entitySet</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartBulletMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.setEntitySet = function(sEntitySet) { return new sap.ui.comp.smartmicrochart.SmartBulletMicroChart(); };

/**
 * Sets a new value for property {@link #getIsResponsive isResponsive}.
 * 
 * If this is set to true, width and height of the control are determined by the width and height of the container in which the control is placed.
 * <code>width</code> property is ignored.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bIsResponsive New value for property <code>isResponsive</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartBulletMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.setIsResponsive = function(bIsResponsive) { return new sap.ui.comp.smartmicrochart.SmartBulletMicroChart(); };

/**
 * Sets a new value for property {@link #getShowLabel showLabel}.
 * 
 * Determines if any label is shown or not
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowLabel New value for property <code>showLabel</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartBulletMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.setShowLabel = function(bShowLabel) { return new sap.ui.comp.smartmicrochart.SmartBulletMicroChart(); };

/**
 * Sets the associated {@link #getUnitOfMeasure unitOfMeasure}.
 * @param {sap.ui.core.ID | sap.m.Label} oUnitOfMeasure ID of an element which becomes the new target of this unitOfMeasure association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartmicrochart.SmartBulletMicroChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.setUnitOfMeasure = function(oUnitOfMeasure) { return new sap.ui.comp.smartmicrochart.SmartBulletMicroChart(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>164px</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartBulletMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartBulletMicroChart.prototype.setWidth = function(sWidth) { return new sap.ui.comp.smartmicrochart.SmartBulletMicroChart(); };


// ---- sap.ui.comp.smartmicrochart.SmartMicroChart --------------------------------------------------------------------------

/**
 * Constructor for a new sap.ui.comp.smartmicrochart/SmartMicroChart.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEntitySet entitySet} : string</li>
 * <li>{@link #getShowLabel showLabel} : boolean (default: true)</li>
 * <li>{@link #getEnableAutoBinding enableAutoBinding} : boolean (default: false)</li>
 * <li>{@link #getChartBindingPath chartBindingPath} : string</li>
 * <li>{@link #getChartType chartType} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 164px)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 74px)</li>
 * <li>{@link #getIsResponsive isResponsive} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getChartTitle chartTitle} : (sap.ui.core.ID | sap.m.Label)</li>
 * <li>{@link #getChartDescription chartDescription} : (sap.ui.core.ID | sap.m.Label)</li>
 * <li>{@link #getUnitOfMeasure unitOfMeasure} : (sap.ui.core.ID | sap.m.Label)</li>
 * <li>{@link #getFreeText freeText} : (sap.ui.core.ID | sap.m.Label)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:initialize initialize} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The SmartMicroChart control creates a chart based on OData metadata and the configuration specified by <code>mSettings</code>.
 * The entitySet property must be specified in order to use the control. This property is used to fetch metadata and
 * annotation information from the given default OData model. Depending on the UI/ChartType annotation, the control
 * creates a corresponding <code>SmartAreaMicroChart</code>, <code>SmartBulletMicroChart</code> or <code>SmartRadialMicroChart</code> instance and delegates to the internal control.
 *        <br>
 * <b><i>Note:<i></b> Most of the attributes are not dynamic and cannot be changed once the control has been initialized.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * @since 1.38
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart = function(sId,mSettings) {};
/**
 * Event fired once the control has been initialized.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.initialize = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:initialize initialize} event of this <code>sap.ui.comp.smartmicrochart.SmartMicroChart</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartmicrochart.SmartMicroChart</code> itself.
 * 
 * Event fired once the control has been initialized.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartmicrochart.SmartMicroChart</code> itself
 * 
 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.attachInitialize = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartmicrochart.SmartMicroChart(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:initialize initialize} event of this <code>sap.ui.comp.smartmicrochart.SmartMicroChart</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.detachInitialize = function(fnFunction,oListener) { return new sap.ui.comp.smartmicrochart.SmartMicroChart(); };

/**
 * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartMicroChart with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:initialize initialize} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.fireInitialize = function(mParameters) { return new sap.ui.comp.smartmicrochart.SmartMicroChart(); };

/**
 * Gets current value of property {@link #getChartBindingPath chartBindingPath}.
 * 
 * This attribute can be used to specify the path that
 * is used during the binding of the chart. If not
 * specified, the entitySet attribute is used instead and also stored in this property.
 * Calling <code>bindElement</code> binds the control and sets this property.
 * 
 * @returns {string} Value of property <code>chartBindingPath</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.getChartBindingPath = function() { return ""; };

/**
 * ID of the element which is the current target of the association {@link #getChartDescription chartDescription}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.getChartDescription = function() { return new sap.ui.core.ID(); };

/**
 * ID of the element which is the current target of the association {@link #getChartTitle chartTitle}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.getChartTitle = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getChartType chartType}.
 * 
 * Specifies the type of chart. Note that this property is read-only.
 * 
 * @returns {string} Value of property <code>chartType</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.getChartType = function() { return ""; };

/**
 * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
 * 
 * If set to <code>true</code>, this enables automatic binding of the chart using the chartBindingPath (if it exists) or entitySet
 * property.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableAutoBinding</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.getEnableAutoBinding = function() { return false; };

/**
 * Gets current value of property {@link #getEntitySet entitySet}.
 * 
 * The entity set name to fetch data and create the internal chart representation from.
 * Note that this is not a dynamic UI5 property.
 * 
 * @returns {string} Value of property <code>entitySet</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.getEntitySet = function() { return ""; };

/**
 * ID of the element which is the current target of the association {@link #getFreeText freeText}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.42.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.getFreeText = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * Defines the height.
 * 
 * Default value is <code>74px</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getIsResponsive isResponsive}.
 * 
 * If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed.
 * <code>width</code> and <code>height</code> properties are ignored in such case.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>isResponsive</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.getIsResponsive = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartMicroChart.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getShowLabel showLabel}.
 * 
 * Determines if any label is shown or not
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showLabel</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.getShowLabel = function() { return false; };

/**
 * ID of the element which is the current target of the association {@link #getUnitOfMeasure unitOfMeasure}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.getUnitOfMeasure = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Defines the width.
 * 
 * Default value is <code>164px</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Sets a new value for property {@link #getChartBindingPath chartBindingPath}.
 * 
 * This attribute can be used to specify the path that
 * is used during the binding of the chart. If not
 * specified, the entitySet attribute is used instead and also stored in this property.
 * Calling <code>bindElement</code> binds the control and sets this property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sChartBindingPath New value for property <code>chartBindingPath</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.setChartBindingPath = function(sChartBindingPath) { return new sap.ui.comp.smartmicrochart.SmartMicroChart(); };

/**
 * Sets the associated {@link #getChartDescription chartDescription}.
 * @param {sap.ui.core.ID | sap.m.Label} oChartDescription ID of an element which becomes the new target of this chartDescription association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.setChartDescription = function(oChartDescription) { return new sap.ui.comp.smartmicrochart.SmartMicroChart(); };

/**
 * Sets the associated {@link #getChartTitle chartTitle}.
 * @param {sap.ui.core.ID | sap.m.Label} oChartTitle ID of an element which becomes the new target of this chartTitle association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.setChartTitle = function(oChartTitle) { return new sap.ui.comp.smartmicrochart.SmartMicroChart(); };

/**
 * Sets a new value for property {@link #getEnableAutoBinding enableAutoBinding}.
 * 
 * If set to <code>true</code>, this enables automatic binding of the chart using the chartBindingPath (if it exists) or entitySet
 * property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableAutoBinding New value for property <code>enableAutoBinding</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.setEnableAutoBinding = function(bEnableAutoBinding) { return new sap.ui.comp.smartmicrochart.SmartMicroChart(); };

/**
 * Sets a new value for property {@link #getEntitySet entitySet}.
 * 
 * The entity set name to fetch data and create the internal chart representation from.
 * Note that this is not a dynamic UI5 property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sEntitySet New value for property <code>entitySet</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.setEntitySet = function(sEntitySet) { return new sap.ui.comp.smartmicrochart.SmartMicroChart(); };

/**
 * Sets the associated {@link #getFreeText freeText}.
 * @param {sap.ui.core.ID | sap.m.Label} oFreeText ID of an element which becomes the new target of this freeText association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.42.0
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.setFreeText = function(oFreeText) { return new sap.ui.comp.smartmicrochart.SmartMicroChart(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * Defines the height.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>74px</code>.
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.setHeight = function(sHeight) { return new sap.ui.comp.smartmicrochart.SmartMicroChart(); };

/**
 * Sets a new value for property {@link #getIsResponsive isResponsive}.
 * 
 * If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed.
 * <code>width</code> and <code>height</code> properties are ignored in such case.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bIsResponsive New value for property <code>isResponsive</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.setIsResponsive = function(bIsResponsive) { return new sap.ui.comp.smartmicrochart.SmartMicroChart(); };

/**
 * Sets a new value for property {@link #getShowLabel showLabel}.
 * 
 * Determines if any label is shown or not
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowLabel New value for property <code>showLabel</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.setShowLabel = function(bShowLabel) { return new sap.ui.comp.smartmicrochart.SmartMicroChart(); };

/**
 * Sets the associated {@link #getUnitOfMeasure unitOfMeasure}.
 * @param {sap.ui.core.ID | sap.m.Label} oUnitOfMeasure ID of an element which becomes the new target of this unitOfMeasure association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.setUnitOfMeasure = function(oUnitOfMeasure) { return new sap.ui.comp.smartmicrochart.SmartMicroChart(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Defines the width.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>164px</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartMicroChart.prototype.setWidth = function(sWidth) { return new sap.ui.comp.smartmicrochart.SmartMicroChart(); };


// ---- sap.ui.comp.smartmicrochart.SmartRadialMicroChart --------------------------------------------------------------------------

/**
 * Constructor for a new sap.ui.comp.smartmicrochart/SmartRadialMicroChart.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEntitySet entitySet} : string</li>
 * <li>{@link #getChartType chartType} : string (default: Donut)</li>
 * <li>{@link #getEnableAutoBinding enableAutoBinding} : boolean (default: false)</li>
 * <li>{@link #getChartBindingPath chartBindingPath} : string</li>
 * <li>{@link #getIsResponsive isResponsive} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getChartTitle chartTitle} : (sap.ui.core.ID | sap.m.Label)</li>
 * <li>{@link #getChartDescription chartDescription} : (sap.ui.core.ID | sap.m.Label)</li>
 * <li>{@link #getUnitOfMeasure unitOfMeasure} : (sap.ui.core.ID | sap.m.Label)</li>
 * <li>{@link #getFreeText freeText} : (sap.ui.core.ID | sap.m.Label)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:initialize initialize} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The SmartRadialMicroChart control creates a <code>sap.suite.ui.microchart.RadialMicroChart</code>
 * based on OData metadata and the configuration specified by <code>mSettings</code>.
 * The entitySet attribute must be specified to use the control. This attribute is used to fetch metadata and
 * annotation information from the given default OData model. Based on this, the RadialMicroChart UI
 * is created.
 * <br>
 * <b><i>Note:</i></b><br>
 * Most of the attributes/properties are not dynamic and cannot be changed once the control has been
 * initialized.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.42.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart = function(sId,mSettings) {};
/**
 * Event fired once the control has been initialized.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.initialize = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:initialize initialize} event of this <code>sap.ui.comp.smartmicrochart.SmartRadialMicroChart</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartmicrochart.SmartRadialMicroChart</code> itself.
 * 
 * Event fired once the control has been initialized.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartmicrochart.SmartRadialMicroChart</code> itself
 * 
 * @returns {sap.ui.comp.smartmicrochart.SmartRadialMicroChart} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.attachInitialize = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartmicrochart.SmartRadialMicroChart(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:initialize initialize} event of this <code>sap.ui.comp.smartmicrochart.SmartRadialMicroChart</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartmicrochart.SmartRadialMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.detachInitialize = function(fnFunction,oListener) { return new sap.ui.comp.smartmicrochart.SmartRadialMicroChart(); };

/**
 * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartRadialMicroChart with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:initialize initialize} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartmicrochart.SmartRadialMicroChart} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.fireInitialize = function(mParameters) { return new sap.ui.comp.smartmicrochart.SmartRadialMicroChart(); };

/**
 * Gets current value of property {@link #getChartBindingPath chartBindingPath}.
 * 
 * This attribute can be used to specify the relative path ( without '/') to an entity ( not an entitySet) that
 * is used during the binding of the chart. It can be e.g. a navigation property which will be added to the context path
 * 
 * @returns {string} Value of property <code>chartBindingPath</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.getChartBindingPath = function() { return ""; };

/**
 * ID of the element which is the current target of the association {@link #getChartDescription chartDescription}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.getChartDescription = function() { return new sap.ui.core.ID(); };

/**
 * ID of the element which is the current target of the association {@link #getChartTitle chartTitle}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.getChartTitle = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getChartType chartType}.
 * 
 * Specifies the chart type. Note that this property is read-only.
 * 
 * Default value is <code>Donut</code>.
 * @returns {string} Value of property <code>chartType</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.getChartType = function() { return ""; };

/**
 * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
 * 
 * If set to <code>true</code>, this enables automatic binding of the chart using the chartBindingPath (if it exists)
 * property.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableAutoBinding</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.getEnableAutoBinding = function() { return false; };

/**
 * Gets current value of property {@link #getEntitySet entitySet}.
 * 
 * The entity set name from where the data is fetched and the internal RadialMicroChart representation is created.
 * Note that this is not a dynamic UI5 property.
 * 
 * @returns {string} Value of property <code>entitySet</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.getEntitySet = function() { return ""; };

/**
 * ID of the element which is the current target of the association {@link #getFreeText freeText}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.getFreeText = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getIsResponsive isResponsive}.
 * 
 * If this property set to true, width and height of the control are determined by the width and height of the container in which the control is placed. The size is no longer determined based on the device.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>isResponsive</code>
 * @since 1.44.4
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.getIsResponsive = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartRadialMicroChart.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * ID of the element which is the current target of the association {@link #getUnitOfMeasure unitOfMeasure}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.getUnitOfMeasure = function() { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getChartBindingPath chartBindingPath}.
 * 
 * This attribute can be used to specify the relative path ( without '/') to an entity ( not an entitySet) that
 * is used during the binding of the chart. It can be e.g. a navigation property which will be added to the context path
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sChartBindingPath New value for property <code>chartBindingPath</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartRadialMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.setChartBindingPath = function(sChartBindingPath) { return new sap.ui.comp.smartmicrochart.SmartRadialMicroChart(); };

/**
 * Sets the associated {@link #getChartDescription chartDescription}.
 * @param {sap.ui.core.ID | sap.m.Label} oChartDescription ID of an element which becomes the new target of this chartDescription association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartmicrochart.SmartRadialMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.setChartDescription = function(oChartDescription) { return new sap.ui.comp.smartmicrochart.SmartRadialMicroChart(); };

/**
 * Sets the associated {@link #getChartTitle chartTitle}.
 * @param {sap.ui.core.ID | sap.m.Label} oChartTitle ID of an element which becomes the new target of this chartTitle association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartmicrochart.SmartRadialMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.setChartTitle = function(oChartTitle) { return new sap.ui.comp.smartmicrochart.SmartRadialMicroChart(); };

/**
 * Sets a new value for property {@link #getEnableAutoBinding enableAutoBinding}.
 * 
 * If set to <code>true</code>, this enables automatic binding of the chart using the chartBindingPath (if it exists)
 * property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableAutoBinding New value for property <code>enableAutoBinding</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartRadialMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.setEnableAutoBinding = function(bEnableAutoBinding) { return new sap.ui.comp.smartmicrochart.SmartRadialMicroChart(); };

/**
 * Sets a new value for property {@link #getEntitySet entitySet}.
 * 
 * The entity set name from where the data is fetched and the internal RadialMicroChart representation is created.
 * Note that this is not a dynamic UI5 property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sEntitySet New value for property <code>entitySet</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartRadialMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.setEntitySet = function(sEntitySet) { return new sap.ui.comp.smartmicrochart.SmartRadialMicroChart(); };

/**
 * Sets the associated {@link #getFreeText freeText}.
 * @param {sap.ui.core.ID | sap.m.Label} oFreeText ID of an element which becomes the new target of this freeText association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartmicrochart.SmartRadialMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.setFreeText = function(oFreeText) { return new sap.ui.comp.smartmicrochart.SmartRadialMicroChart(); };

/**
 * Sets a new value for property {@link #getIsResponsive isResponsive}.
 * 
 * If this property set to true, width and height of the control are determined by the width and height of the container in which the control is placed. The size is no longer determined based on the device.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bIsResponsive New value for property <code>isResponsive</code>
 * @returns {sap.ui.comp.smartmicrochart.SmartRadialMicroChart} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.4
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.setIsResponsive = function(bIsResponsive) { return new sap.ui.comp.smartmicrochart.SmartRadialMicroChart(); };

/**
 * Sets the associated {@link #getUnitOfMeasure unitOfMeasure}.
 * @param {sap.ui.core.ID | sap.m.Label} oUnitOfMeasure ID of an element which becomes the new target of this unitOfMeasure association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartmicrochart.SmartRadialMicroChart} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartmicrochart.SmartRadialMicroChart.prototype.setUnitOfMeasure = function(oUnitOfMeasure) { return new sap.ui.comp.smartmicrochart.SmartRadialMicroChart(); };


// ---- sap.ui.comp.smarttable.SmartTable --------------------------------------------------------------------------

/**
 * Constructor for a new smarttable/SmartTable.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEntitySet entitySet} : string</li>
 * <li>{@link #getSmartFilterId smartFilterId} : string</li>
 * <li>{@link #getIgnoredFields ignoredFields} : string</li>
 * <li>{@link #getInitiallyVisibleFields initiallyVisibleFields} : string</li>
 * <li>{@link #getRequestAtLeastFields requestAtLeastFields} : string</li>
 * <li>{@link #getIgnoreFromPersonalisation ignoreFromPersonalisation} : string</li>
 * <li>{@link #getTableType tableType} : sap.ui.comp.smarttable.TableType</li>
 * <li>{@link #getUseVariantManagement useVariantManagement} : boolean (default: true)</li>
 * <li>{@link #getShowVariantManagement showVariantManagement} : boolean (default: true)</li>
 * <li>{@link #getUseExportToExcel useExportToExcel} : boolean (default: true)</li>
 * <li>{@link #getUseTablePersonalisation useTablePersonalisation} : boolean (default: true)</li>
 * <li>{@link #getShowTablePersonalisation showTablePersonalisation} : boolean (default: true)</li>
 * <li>{@link #getShowRowCount showRowCount} : boolean (default: true)</li>
 * <li>{@link #getHeader header} : string</li>
 * <li>{@link #getToolbarStyleClass toolbarStyleClass} : string</li>
 * <li>{@link #getEnableCustomFilter enableCustomFilter} : boolean (default: true)</li>
 * <li>{@link #getPersistencyKey persistencyKey} : string</li>
 * <li>{@link #getUseOnlyOneSolidToolbar useOnlyOneSolidToolbar} : boolean (default: false)</li>
 * <li>{@link #getCurrentVariantId currentVariantId} : string</li>
 * <li>{@link #getEditable editable} : boolean (default: false)</li>
 * <li>{@link #getEnableAutoBinding enableAutoBinding} : boolean (default: false)</li>
 * <li>{@link #getTableBindingPath tableBindingPath} : string</li>
 * <li>{@link #getEditTogglable editTogglable} : boolean (default: false)</li>
 * <li>{@link #getDemandPopin demandPopin} : boolean (default: false)</li>
 * <li>{@link #getShowFullScreenButton showFullScreenButton} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCustomToolbar customToolbar} : sap.m.Toolbar</li>
 * <li>{@link #getSemanticObjectController semanticObjectController} : sap.ui.comp.navpopover.SemanticObjectController</li>
 * <li>{@link #getNoData noData} : sap.ui.core.Control|string</li>
 * <li>{@link #getSemanticKeyAdditionalControl semanticKeyAdditionalControl} : sap.ui.core.Control</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSmartVariant smartVariant} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:initialise initialise} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeRebindTable beforeRebindTable} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:editToggled editToggled} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:dataReceived dataReceived} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterVariantInitialise afterVariantInitialise} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterVariantSave afterVariantSave} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterVariantApply afterVariantApply} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:showOverlay showOverlay} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:fieldChange fieldChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:fullScreenToggled fullScreenToggled} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.VBox#constructor sap.m.VBox}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The SmartTable control creates a table based on OData metadata and the configuration specified. The entitySet attribute must be
 *        specified to use the control. This attribute is used to fetch fields from OData metadata, from which columns will be generated; it can
 *        also be used to fetch the actual table data.<br>
 *        Based on the tableType property, this control will render a standard, analytical, tree, or responsive table.<br>
 *        <b><i>Note:</i></b><br>
 *        Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.
 * @extends sap.m.VBox
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smarttable.SmartTable = function(sId,mSettings) {};
/**
 * This event is fired after a variant has been applied.
 * @event
 * @since 1.28.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.currentVariantId ID of the currently selected variant
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.afterVariantApply = function(oControlEvent) {  };

/**
 * This event is fired after variant management in the SmartTable has been initialized.
 * @event
 * @since 1.28.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.afterVariantInitialise = function(oControlEvent) {  };

/**
 * This event is fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.
 * @event
 * @since 1.28.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.currentVariantId ID of the currently selected variant
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.afterVariantSave = function(oControlEvent) {  };

/**
 * This event is fired just before the binding is being done.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.bindingParams The bindingParams object contains filters, sorters and other binding
 *        related information for the table.
 * @param {boolean} oControlEvent.getParameters.bindingParams.preventTableBind If set to <code>true</code> by the listener, binding
 *        is prevented
 * @param {sap.ui.model.Filter[]} oControlEvent.getParameters.bindingParams.filters The combined filter array containing a set of
 *        sap.ui.model.Filter instances of the SmartTable and SmartFilter controls; can be modified by users to influence filtering
 * @param {sap.ui.model.Sorter[]} oControlEvent.getParameters.bindingParams.sorter An array containing a set of sap.ui.model.Sorter
 *        instances of the SmartTable control (personalization); can be modified by users to influence sorting
 * @since 1.26.0
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.beforeRebindTable = function(oControlEvent) {  };

/**
 * This event is fired when data is received after binding. The event is fired if the binding for the table is done by the SmartTable
 * itself.
 * @event
 * @since 1.28.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.dataReceived = function(oControlEvent) {  };

/**
 * This event is fired when display/edit button is clicked.
 * @event
 * @since 1.28.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.editToggled = function(oControlEvent) {  };

/**
 * This event is fired when an editable field, created internally by the SmartTable control, is changed.
 * @event
 * @since 1.34.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.fieldChange = function(oControlEvent) {  };

/**
 * This event is fired right after the full screen mode of the SmartTable control has been changed.
 * @event
 * @since 1.46
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.fullScreen If <code>true</code>, control is in full screen mode
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.fullScreenToggled = function(oControlEvent) {  };

/**
 * This event is fired once the control has been initialized.
 * @event
 * @since 1.26.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.initialise = function(oControlEvent) {  };

/**
 * This event is fired just before the overlay is being shown.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.overlay The overlay object contains information related to the table's overlay
 * @param {boolean} oControlEvent.getParameters.overlay.show If set to code>false</code> by the listener, overlay is not shown
 * @since 1.32.0
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.showOverlay = function(oControlEvent) {  };

/**
 * Interface function for SmartVariantManagement control, sets the current variant. <b>Note:</b> If an application default variant exists, then
 * all other variants are extended from this application default variant.
 * 
 * @param {object} oVariantJSON The variants json
 * @param {string} sContext Describes the context in which the apply was executed
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.applyVariant = function(oVariantJSON,sContext) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterVariantApply afterVariantApply} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smarttable.SmartTable</code> itself.
 * 
 * This event is fired after a variant has been applied.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smarttable.SmartTable</code> itself
 * 
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.attachAfterVariantApply = function(oData,fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterVariantInitialise afterVariantInitialise} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smarttable.SmartTable</code> itself.
 * 
 * This event is fired after variant management in the SmartTable has been initialized.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smarttable.SmartTable</code> itself
 * 
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.attachAfterVariantInitialise = function(oData,fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterVariantSave afterVariantSave} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smarttable.SmartTable</code> itself.
 * 
 * This event is fired after a variant has been saved. This event can be used to retrieve the ID of the saved variant.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smarttable.SmartTable</code> itself
 * 
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.attachAfterVariantSave = function(oData,fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeRebindTable beforeRebindTable} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smarttable.SmartTable</code> itself.
 * 
 * This event is fired just before the binding is being done.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smarttable.SmartTable</code> itself
 * 
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.26.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.attachBeforeRebindTable = function(oData,fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:dataReceived dataReceived} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smarttable.SmartTable</code> itself.
 * 
 * This event is fired when data is received after binding. The event is fired if the binding for the table is done by the SmartTable
 * itself.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smarttable.SmartTable</code> itself
 * 
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.attachDataReceived = function(oData,fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:editToggled editToggled} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smarttable.SmartTable</code> itself.
 * 
 * This event is fired when display/edit button is clicked.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smarttable.SmartTable</code> itself
 * 
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.28.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.attachEditToggled = function(oData,fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:fieldChange fieldChange} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smarttable.SmartTable</code> itself.
 * 
 * This event is fired when an editable field, created internally by the SmartTable control, is changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smarttable.SmartTable</code> itself
 * 
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.34.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.attachFieldChange = function(oData,fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:fullScreenToggled fullScreenToggled} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smarttable.SmartTable</code> itself.
 * 
 * This event is fired right after the full screen mode of the SmartTable control has been changed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smarttable.SmartTable</code> itself
 * 
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.46
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.attachFullScreenToggled = function(oData,fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:initialise initialise} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smarttable.SmartTable</code> itself.
 * 
 * This event is fired once the control has been initialized.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smarttable.SmartTable</code> itself
 * 
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.26.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.attachInitialise = function(oData,fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:showOverlay showOverlay} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smarttable.SmartTable</code> itself.
 * 
 * This event is fired just before the overlay is being shown.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smarttable.SmartTable</code> itself
 * 
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.32.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.attachShowOverlay = function(oData,fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Destroys the customToolbar in the aggregation {@link #getCustomToolbar customToolbar}.
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.destroyCustomToolbar = function() { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Destroys the noData in the aggregation {@link #getNoData noData}.
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.destroyNoData = function() { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Destroys the semanticKeyAdditionalControl in the aggregation {@link #getSemanticKeyAdditionalControl semanticKeyAdditionalControl}.
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.destroySemanticKeyAdditionalControl = function() { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Destroys the semanticObjectController in the aggregation {@link #getSemanticObjectController semanticObjectController}.
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.destroySemanticObjectController = function() { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterVariantApply afterVariantApply} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.detachAfterVariantApply = function(fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterVariantInitialise afterVariantInitialise} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.detachAfterVariantInitialise = function(fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterVariantSave afterVariantSave} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.detachAfterVariantSave = function(fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeRebindTable beforeRebindTable} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.detachBeforeRebindTable = function(fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:dataReceived dataReceived} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.detachDataReceived = function(fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:editToggled editToggled} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.detachEditToggled = function(fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:fieldChange fieldChange} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.34.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.detachFieldChange = function(fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:fullScreenToggled fullScreenToggled} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.46
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.detachFullScreenToggled = function(fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:initialise initialise} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.detachInitialise = function(fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:showOverlay showOverlay} event of this <code>sap.ui.comp.smarttable.SmartTable</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.detachShowOverlay = function(fnFunction,oListener) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Cleans up the control
 * 
 * @protected
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.ui.comp.smarttable.SmartTable with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.VBox.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smarttable.SmartTable.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Interface function for SmartVariantManagement control, returns the current used variant data
 * 
 * @public
 * @returns {object} The currently set variant
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.fetchVariant = function() { return new Object(); };

/**
 * Fires event {@link #event:afterVariantApply afterVariantApply} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.currentVariantId] ID of the currently selected variant
 * 
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.fireAfterVariantApply = function(mParameters) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Fires event {@link #event:afterVariantInitialise afterVariantInitialise} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.fireAfterVariantInitialise = function(mParameters) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Fires event {@link #event:afterVariantSave afterVariantSave} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.currentVariantId] ID of the currently selected variant
 * 
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.fireAfterVariantSave = function(mParameters) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Fires event {@link #event:beforeRebindTable beforeRebindTable} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.26.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.fireBeforeRebindTable = function(mParameters) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Fires event {@link #event:dataReceived dataReceived} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.fireDataReceived = function(mParameters) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Fires event {@link #event:editToggled editToggled} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.28.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.fireEditToggled = function(mParameters) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Fires event {@link #event:fieldChange fieldChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.34.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.fireFieldChange = function(mParameters) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Fires event {@link #event:fullScreenToggled fullScreenToggled} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.fullScreen] If <code>true</code>, control is in full screen mode
 * 
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.46
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.fireFullScreenToggled = function(mParameters) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Fires event {@link #event:initialise initialise} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.26.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.fireInitialise = function(mParameters) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Fires event {@link #event:showOverlay showOverlay} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.32.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.fireShowOverlay = function(mParameters) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * returns the id of the currently selected variant.
 * 
 * @public
 * @returns {string} id of the currently selected variant
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getCurrentVariantId = function() { return ""; };

/**
 * Gets content of aggregation {@link #getCustomToolbar customToolbar}.
 * 
 * A toolbar that can be added by the user to define their own custom buttons, icons, etc. If this is specified, the SmartTable
 * control does not create an additional toolbar, but makes use of this one.
 * 
 * @returns {sap.m.Toolbar}
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getCustomToolbar = function() { return new sap.m.Toolbar(); };

/**
 * Gets current value of property {@link #getDemandPopin demandPopin}.
 * 
 * The demandPopin attribute can be set to true or false depending on whether you want to display columns as popins on the responsive
 * table
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>demandPopin</code>
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getDemandPopin = function() { return false; };

/**
 * Gets current value of property {@link #getEditable editable}.
 * 
 * This attribute can be used to specify if the controls created by the SmartTable control are editable. (The automatic toggle of
 * controls works only for the SmartField/SmartToggle scenario)
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>editable</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getEditable = function() { return false; };

/**
 * Gets current value of property {@link #getEditTogglable editTogglable}.
 * 
 * Specifies whether the editable property can be toggled via a button on the toolbar. (The automatic toggle of controls works only
 * for the SmartField/SmartToggle scenario)
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>editTogglable</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getEditTogglable = function() { return false; };

/**
 * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
 * 
 * When set to true, this enables automatic binding of the table using the tableBindingPath (if it exists) or entitySet property. This
 * happens just after the <code>initialise</code> event has been fired.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>enableAutoBinding</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getEnableAutoBinding = function() { return false; };

/**
 * Gets current value of property {@link #getEnableCustomFilter enableCustomFilter}.
 * 
 * Can be used to override the filter behavior. If set to true (default), instead of the filter input box a button is rendered. When
 * pressing this button, the SmartTable control opens the filter panel directly in the table personalization dialog.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enableCustomFilter</code>
 * @since 1.26.0
 * @deprecated Since 1.40.0. After personalization dialog has been introduced in SmartTable the property
 *             <code>enableCustomFilter</code> does not make sense. When setting the property to <code>false</code>, the entered
 *             custom filter value will not be shown in personalization dialog and will also not be persisted in variant management.
 *             The custom filter will also be overwritten when rebindTable is called on the SmartTable.
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getEnableCustomFilter = function() { return false; };

/**
 * Gets current value of property {@link #getEntitySet entitySet}.
 * 
 * The entity set name from which to fetch data and generate the columns. Note that this is not a dynamic UI5 property
 * 
 * @returns {string} Value of property <code>entitySet</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getEntitySet = function() { return ""; };

/**
 * Gets current value of property {@link #getHeader header}.
 * 
 * Specifies header text that is shown in table
 * 
 * @returns {string} Value of property <code>header</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getHeader = function() { return ""; };

/**
 * Gets current value of property {@link #getIgnoredFields ignoredFields}.
 * 
 * CSV of fields that must be ignored in the OData metadata by the SmartTable control.<br>
 * <i>Note:</i><br>
 * No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * @returns {string} Value of property <code>ignoredFields</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getIgnoredFields = function() { return ""; };

/**
 * Gets current value of property {@link #getIgnoreFromPersonalisation ignoreFromPersonalisation}.
 * 
 * CSV of fields that is not shown in the personalization dialog.<br>
 * <i>Note:</i><br>
 * No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * @returns {string} Value of property <code>ignoreFromPersonalisation</code>
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getIgnoreFromPersonalisation = function() { return ""; };

/**
 * Gets current value of property {@link #getInitiallyVisibleFields initiallyVisibleFields}.
 * 
 * CSV of fields that must be shown initially in the SmartTable as visible columns and in the order specified.<br>
 * This property is mainly meant to be used when no LineItem annotation exists.<br>
 * If you have fields in the XMLView they are always shown first; then, the columns are added based on the LineItem annotation and
 * finally based on this property.<br>
 * <i>Note:</i><br>
 * If both this property and the LineItem annotation exist, the order of fields cannot be guaranteed to be as mentioned here.<br>
 * No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * @returns {string} Value of property <code>initiallyVisibleFields</code>
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getInitiallyVisibleFields = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.comp.smarttable.SmartTable.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smarttable.SmartTable.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getNoData noData}.
 * 
 * The value for the noData aggregation can be either a string value or a control instance.<br>
 * The control is shown, in case there is no data for the Table available. In case of a string value this will simply replace the no
 * data text.<br>
 * Currently the Responsive Table only supports string values.
 * 
 * @returns {sap.ui.core.Control|string}
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getNoData = function() { return new sap.ui.core.Control(); };

/**
 * Gets current value of property {@link #getPersistencyKey persistencyKey}.
 * 
 * Key used to access personalization data.
 * 
 * @returns {string} Value of property <code>persistencyKey</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getPersistencyKey = function() { return ""; };

/**
 * Gets current value of property {@link #getRequestAtLeastFields requestAtLeastFields}.
 * 
 * CSV of fields that must be always requested from the backend<br>
 * This property is mainly meant to be used when there is no PresentationVariant annotation.<br>
 * If both this property and the PresentationVariant annotation exist, the select request sent to the backend would be a combination
 * of both.<br>
 * <i>Note:</i><br>
 * This property has no effect when AnalyticalTable is used.<br>
 * No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * @returns {string} Value of property <code>requestAtLeastFields</code>
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getRequestAtLeastFields = function() { return ""; };

/**
 * Gets content of aggregation {@link #getSemanticKeyAdditionalControl semanticKeyAdditionalControl}.
 * 
 * Allows users to specify an additional control that will be added to a VBox for the first semantic key field.<br>
 * <i>Note:</i><br>
 * This property is not meant for public use.
 * 
 * @returns {sap.ui.core.Control}
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getSemanticKeyAdditionalControl = function() { return new sap.ui.core.Control(); };

/**
 * Gets content of aggregation {@link #getSemanticObjectController semanticObjectController}.
 * 
 * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object navigation.
 * 
 * @returns {sap.ui.comp.navpopover.SemanticObjectController}
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getSemanticObjectController = function() { return new sap.ui.comp.navpopover.SemanticObjectController(); };

/**
 * Gets current value of property {@link #getShowFullScreenButton showFullScreenButton}.
 * 
 * Controls the visibility of the FullScreen button.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showFullScreenButton</code>
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getShowFullScreenButton = function() { return false; };

/**
 * Gets current value of property {@link #getShowRowCount showRowCount}.
 * 
 * If set to <code>true</code> (default), the number of rows is shown along with the header text.<br>
 * If set to <code>false</code>, the number of rows will not be shown on the user interface.<br>
 * <i>Note:</i><br>
 * To avoid sending dedicated OData requests in order to improve your application's performance, you must configure the binding of the
 * table as required.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showRowCount</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getShowRowCount = function() { return false; };

/**
 * Gets current value of property {@link #getShowTablePersonalisation showTablePersonalisation}.
 * 
 * The showTablePersonalisation attribute can be set to true or false for controlling the visibility of the TablePersonalisation
 * button.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showTablePersonalisation</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getShowTablePersonalisation = function() { return false; };

/**
 * Gets current value of property {@link #getShowVariantManagement showVariantManagement}.
 * 
 * The showVariantManagement attribute can be set to true or false for controlling the visibility of VariantManagement button.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showVariantManagement</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getShowVariantManagement = function() { return false; };

/**
 * Gets current value of property {@link #getSmartFilterId smartFilterId}.
 * 
 * ID of the corresponding SmartFilter control; When specified, the SmartTable searches for the SmartFilter (also in the closest
 * parent View) and attaches to the relevant events of the SmartFilter; to fetch data, show overlay etc.
 * 
 * @returns {string} Value of property <code>smartFilterId</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getSmartFilterId = function() { return ""; };

/**
 * ID of the element which is the current target of the association {@link #getSmartVariant smartVariant}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getSmartVariant = function() { return new sap.ui.core.ID(); };

/**
 * returns the internally used table object
 * 
 * @public
 * @returns {object} the table
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getTable = function() { return new Object(); };

/**
 * Gets current value of property {@link #getTableBindingPath tableBindingPath}.
 * 
 * This attribute can be used to specify the path that is used during the binding of the table. If not specified, the entitySet
 * attribute is used instead. (used only if binding is established internally/automatically - See enableAutoBinding)
 * 
 * @returns {string} Value of property <code>tableBindingPath</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getTableBindingPath = function() { return ""; };

/**
 * Gets current value of property {@link #getTableType tableType}.
 * 
 * Specifies the type of table to be created in the SmartTable control.<br>
 * <i>Note:</i><br>
 * If you add a table to the content of the SmartTable in the view, this property has no effect.
 * 
 * @returns {sap.ui.comp.smarttable.TableType} Value of property <code>tableType</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getTableType = function() { return new sap.ui.comp.smarttable.TableType(); };

/**
 * Gets current value of property {@link #getToolbarStyleClass toolbarStyleClass}.
 * 
 * A style class which is defined for the toolbar of the table.
 * 
 * @returns {string} Value of property <code>toolbarStyleClass</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getToolbarStyleClass = function() { return ""; };

/**
 * Gets current value of property {@link #getUseExportToExcel useExportToExcel}.
 * 
 * Can be set to true or false depending on whether you want to export data to MS Excel®.<br>
 * <i>Note:</i><br>
 * Any $expand parameters are removed when sending the request to generate the Excel.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>useExportToExcel</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getUseExportToExcel = function() { return false; };

/**
 * Gets current value of property {@link #getUseOnlyOneSolidToolbar useOnlyOneSolidToolbar}.
 * 
 * If set to true, the standard toolbar and custom toolbar will be merged into one toolbar. The combined toolbar will have a solid
 * style.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>useOnlyOneSolidToolbar</code>
 * @since 1.26.0
 * @deprecated Since 1.29. This property has no effect
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getUseOnlyOneSolidToolbar = function() { return false; };

/**
 * Gets current value of property {@link #getUseTablePersonalisation useTablePersonalisation}.
 * 
 * The useTablePersonalisation attribute can be set to true or false depending on whether you want to define personalized table
 * settings. If you want to persist the table personalization, you need to specify the persistencyKey property.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>useTablePersonalisation</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getUseTablePersonalisation = function() { return false; };

/**
 * Gets current value of property {@link #getUseVariantManagement useVariantManagement}.
 * 
 * The useVariantManagement attribute can be set to true or false depending on whether you want to use variants. As a prerequisite you
 * need to specify the persistencyKey property.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>useVariantManagement</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.getUseVariantManagement = function() { return false; };

/**
 * Checks whether the control is initialised
 * 
 * @returns {boolean} returns whether control is already initialised
 * @protected
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.isInitialised = function() { return false; };

/**
 * Opens the desired panel of the personalization dialog.<br>
 * <i>Note:</i> Calling this for panels that are globally hidden (E.g. manually by the application, or due to unavailability of functionality)
 * leads to an empty dialog being shown.
 * 
 * @param {string} sPanel The desired panel; the value is either "Columns", "Sort", "Filter" or "Group"
 * @public
 * @since 1.48.0
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.openPersonalisationDialog = function(sPanel) {  };

/**
 * This can be used to trigger binding on the table used in the SmartTable
 * 
 * @param {boolean} bForceRebind - force bind call to be triggered on the inner table
 * @protected
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.rebindTable = function(bForceRebind) {  };

/**
 * Set the current variant according to the sVariantId. In case an empty string or null or undefined was passed the STANDARD will be set. STANDARD
 * will also be set, in case the passed sVariantId could not be found. In case neither a flexibility variant, nor the content for the standard
 * variant could not be obtained, nor the personalisable control obtained nothing will be executed/changed
 * 
 * @public
 * @param {string} sVariantId id of the currently selected variant
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setCurrentVariantId = function(sVariantId) {  };

/**
 * Sets the aggregated {@link #getCustomToolbar customToolbar}.
 * @param {sap.m.Toolbar} oCustomToolbar The customToolbar to set
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setCustomToolbar = function(oCustomToolbar) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getDemandPopin demandPopin}.
 * 
 * The demandPopin attribute can be set to true or false depending on whether you want to display columns as popins on the responsive
 * table
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bDemandPopin New value for property <code>demandPopin</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setDemandPopin = function(bDemandPopin) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getEditable editable}.
 * 
 * This attribute can be used to specify if the controls created by the SmartTable control are editable. (The automatic toggle of
 * controls works only for the SmartField/SmartToggle scenario)
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEditable New value for property <code>editable</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setEditable = function(bEditable) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getEditTogglable editTogglable}.
 * 
 * Specifies whether the editable property can be toggled via a button on the toolbar. (The automatic toggle of controls works only
 * for the SmartField/SmartToggle scenario)
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEditTogglable New value for property <code>editTogglable</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setEditTogglable = function(bEditTogglable) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getEnableAutoBinding enableAutoBinding}.
 * 
 * When set to true, this enables automatic binding of the table using the tableBindingPath (if it exists) or entitySet property. This
 * happens just after the <code>initialise</code> event has been fired.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEnableAutoBinding New value for property <code>enableAutoBinding</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setEnableAutoBinding = function(bEnableAutoBinding) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getEnableCustomFilter enableCustomFilter}.
 * 
 * Can be used to override the filter behavior. If set to true (default), instead of the filter input box a button is rendered. When
 * pressing this button, the SmartTable control opens the filter panel directly in the table personalization dialog.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnableCustomFilter New value for property <code>enableCustomFilter</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * @deprecated Since 1.40.0. After personalization dialog has been introduced in SmartTable the property
 *             <code>enableCustomFilter</code> does not make sense. When setting the property to <code>false</code>, the entered
 *             custom filter value will not be shown in personalization dialog and will also not be persisted in variant management.
 *             The custom filter will also be overwritten when rebindTable is called on the SmartTable.
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setEnableCustomFilter = function(bEnableCustomFilter) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * The entity set name from OData metadata, with which the table should be bound to
 * 
 * @param {string} sEntitySetName The entity set
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setEntitySet = function(sEntitySetName) {  };

/**
 * Sets a new value for property {@link #getHeader header}.
 * 
 * Specifies header text that is shown in table
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sHeader New value for property <code>header</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setHeader = function(sHeader) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getIgnoredFields ignoredFields}.
 * 
 * CSV of fields that must be ignored in the OData metadata by the SmartTable control.<br>
 * <i>Note:</i><br>
 * No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIgnoredFields New value for property <code>ignoredFields</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setIgnoredFields = function(sIgnoredFields) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getIgnoreFromPersonalisation ignoreFromPersonalisation}.
 * 
 * CSV of fields that is not shown in the personalization dialog.<br>
 * <i>Note:</i><br>
 * No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIgnoreFromPersonalisation New value for property <code>ignoreFromPersonalisation</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setIgnoreFromPersonalisation = function(sIgnoreFromPersonalisation) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getInitiallyVisibleFields initiallyVisibleFields}.
 * 
 * CSV of fields that must be shown initially in the SmartTable as visible columns and in the order specified.<br>
 * This property is mainly meant to be used when no LineItem annotation exists.<br>
 * If you have fields in the XMLView they are always shown first; then, the columns are added based on the LineItem annotation and
 * finally based on this property.<br>
 * <i>Note:</i><br>
 * If both this property and the LineItem annotation exist, the order of fields cannot be guaranteed to be as mentioned here.<br>
 * No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sInitiallyVisibleFields New value for property <code>initiallyVisibleFields</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setInitiallyVisibleFields = function(sInitiallyVisibleFields) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets the aggregated {@link #getNoData noData}.
 * @param {sap.ui.core.Control|string} vNoData The noData to set
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setNoData = function(vNoData) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getPersistencyKey persistencyKey}.
 * 
 * Key used to access personalization data.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sPersistencyKey New value for property <code>persistencyKey</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setPersistencyKey = function(sPersistencyKey) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getRequestAtLeastFields requestAtLeastFields}.
 * 
 * CSV of fields that must be always requested from the backend<br>
 * This property is mainly meant to be used when there is no PresentationVariant annotation.<br>
 * If both this property and the PresentationVariant annotation exist, the select request sent to the backend would be a combination
 * of both.<br>
 * <i>Note:</i><br>
 * This property has no effect when AnalyticalTable is used.<br>
 * No validation is done. Please ensure that you do not add spaces or special characters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sRequestAtLeastFields New value for property <code>requestAtLeastFields</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setRequestAtLeastFields = function(sRequestAtLeastFields) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets the aggregated {@link #getSemanticKeyAdditionalControl semanticKeyAdditionalControl}.
 * @param {sap.ui.core.Control} oSemanticKeyAdditionalControl The semanticKeyAdditionalControl to set
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setSemanticKeyAdditionalControl = function(oSemanticKeyAdditionalControl) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets the aggregated {@link #getSemanticObjectController semanticObjectController}.
 * @param {sap.ui.comp.navpopover.SemanticObjectController} oSemanticObjectController The semanticObjectController to set
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setSemanticObjectController = function(oSemanticObjectController) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getShowFullScreenButton showFullScreenButton}.
 * 
 * Controls the visibility of the FullScreen button.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowFullScreenButton New value for property <code>showFullScreenButton</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setShowFullScreenButton = function(bShowFullScreenButton) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getShowRowCount showRowCount}.
 * 
 * If set to <code>true</code> (default), the number of rows is shown along with the header text.<br>
 * If set to <code>false</code>, the number of rows will not be shown on the user interface.<br>
 * <i>Note:</i><br>
 * To avoid sending dedicated OData requests in order to improve your application's performance, you must configure the binding of the
 * table as required.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowRowCount New value for property <code>showRowCount</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setShowRowCount = function(bShowRowCount) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getShowTablePersonalisation showTablePersonalisation}.
 * 
 * The showTablePersonalisation attribute can be set to true or false for controlling the visibility of the TablePersonalisation
 * button.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowTablePersonalisation New value for property <code>showTablePersonalisation</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setShowTablePersonalisation = function(bShowTablePersonalisation) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getShowVariantManagement showVariantManagement}.
 * 
 * The showVariantManagement attribute can be set to true or false for controlling the visibility of VariantManagement button.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowVariantManagement New value for property <code>showVariantManagement</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setShowVariantManagement = function(bShowVariantManagement) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getSmartFilterId smartFilterId}.
 * 
 * ID of the corresponding SmartFilter control; When specified, the SmartTable searches for the SmartFilter (also in the closest
 * parent View) and attaches to the relevant events of the SmartFilter; to fetch data, show overlay etc.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSmartFilterId New value for property <code>smartFilterId</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setSmartFilterId = function(sSmartFilterId) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets the associated {@link #getSmartVariant smartVariant}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oSmartVariant ID of an element which becomes the new target of this smartVariant association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setSmartVariant = function(oSmartVariant) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getTableBindingPath tableBindingPath}.
 * 
 * This attribute can be used to specify the path that is used during the binding of the table. If not specified, the entitySet
 * attribute is used instead. (used only if binding is established internally/automatically - See enableAutoBinding)
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTableBindingPath New value for property <code>tableBindingPath</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setTableBindingPath = function(sTableBindingPath) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getTableType tableType}.
 * 
 * Specifies the type of table to be created in the SmartTable control.<br>
 * <i>Note:</i><br>
 * If you add a table to the content of the SmartTable in the view, this property has no effect.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.comp.smarttable.TableType} sTableType New value for property <code>tableType</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setTableType = function(sTableType) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getToolbarStyleClass toolbarStyleClass}.
 * 
 * A style class which is defined for the toolbar of the table.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sToolbarStyleClass New value for property <code>toolbarStyleClass</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setToolbarStyleClass = function(sToolbarStyleClass) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getUseExportToExcel useExportToExcel}.
 * 
 * Can be set to true or false depending on whether you want to export data to MS Excel®.<br>
 * <i>Note:</i><br>
 * Any $expand parameters are removed when sending the request to generate the Excel.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUseExportToExcel New value for property <code>useExportToExcel</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setUseExportToExcel = function(bUseExportToExcel) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getUseOnlyOneSolidToolbar useOnlyOneSolidToolbar}.
 * 
 * If set to true, the standard toolbar and custom toolbar will be merged into one toolbar. The combined toolbar will have a solid
 * style.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bUseOnlyOneSolidToolbar New value for property <code>useOnlyOneSolidToolbar</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * @deprecated Since 1.29. This property has no effect
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setUseOnlyOneSolidToolbar = function(bUseOnlyOneSolidToolbar) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getUseTablePersonalisation useTablePersonalisation}.
 * 
 * The useTablePersonalisation attribute can be set to true or false depending on whether you want to define personalized table
 * settings. If you want to persist the table personalization, you need to specify the persistencyKey property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUseTablePersonalisation New value for property <code>useTablePersonalisation</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setUseTablePersonalisation = function(bUseTablePersonalisation) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * Sets a new value for property {@link #getUseVariantManagement useVariantManagement}.
 * 
 * The useVariantManagement attribute can be set to true or false depending on whether you want to use variants. As a prerequisite you
 * need to specify the persistencyKey property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUseVariantManagement New value for property <code>useVariantManagement</code>
 * @returns {sap.ui.comp.smarttable.SmartTable} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.setUseVariantManagement = function(bUseVariantManagement) { return new sap.ui.comp.smarttable.SmartTable(); };

/**
 * This can be called once data is received to update table header (count) and toolbar buttons(e.g. Excel Export) enabled state
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.SmartTable.prototype.updateTableHeaderState = function() {  };


// ---- sap.ui.comp.smarttable.TableType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.smarttable.TableType.toString = function() { return ""; };

// ---- sap.ui.comp.smartvariants.PersonalizableInfo --------------------------------------------------------------------------

/**
 * Constructor for a new smartvariants/PersonalizableInfo.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : string</li>
 * <li>{@link #getDataSource dataSource} : string</li>
 * <li>{@link #getKeyName keyName} : string</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getControl control} : (sap.ui.core.ID | sap.ui.core.Control)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The PersonalizableInfo class describes the personalizable control associated with the <code>SmartVariantManagement</code> control.
 * @extends sap.ui.core.Element
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartvariants.PersonalizableInfo = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.comp.smartvariants.PersonalizableInfo with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartvariants.PersonalizableInfo.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * ID of the element which is the current target of the association {@link #getControl control}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.PersonalizableInfo.prototype.getControl = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getDataSource dataSource}.
 * 
 * Name of the data service
 * 
 * @returns {string} Value of property <code>dataSource</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.PersonalizableInfo.prototype.getDataSource = function() { return ""; };

/**
 * Gets current value of property {@link #getKeyName keyName}.
 * 
 * Defines the property name of the personalization key.
 * 
 * @returns {string} Value of property <code>keyName</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.PersonalizableInfo.prototype.getKeyName = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.comp.smartvariants.PersonalizableInfo.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartvariants.PersonalizableInfo.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * Describes the type of variant management.
 * 
 * @returns {string} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.PersonalizableInfo.prototype.getType = function() { return ""; };

/**
 * Sets the associated {@link #getControl control}.
 * @param {sap.ui.core.ID | sap.ui.core.Control} oControl ID of an element which becomes the new target of this control association; alternatively, an element instance may be given
 * @returns {sap.ui.comp.smartvariants.PersonalizableInfo} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.PersonalizableInfo.prototype.setControl = function(oControl) { return new sap.ui.comp.smartvariants.PersonalizableInfo(); };

/**
 * Sets a new value for property {@link #getDataSource dataSource}.
 * 
 * Name of the data service
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sDataSource New value for property <code>dataSource</code>
 * @returns {sap.ui.comp.smartvariants.PersonalizableInfo} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.PersonalizableInfo.prototype.setDataSource = function(sDataSource) { return new sap.ui.comp.smartvariants.PersonalizableInfo(); };

/**
 * Sets a new value for property {@link #getKeyName keyName}.
 * 
 * Defines the property name of the personalization key.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sKeyName New value for property <code>keyName</code>
 * @returns {sap.ui.comp.smartvariants.PersonalizableInfo} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.PersonalizableInfo.prototype.setKeyName = function(sKeyName) { return new sap.ui.comp.smartvariants.PersonalizableInfo(); };

/**
 * Sets a new value for property {@link #getType type}.
 * 
 * Describes the type of variant management.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sType New value for property <code>type</code>
 * @returns {sap.ui.comp.smartvariants.PersonalizableInfo} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.PersonalizableInfo.prototype.setType = function(sType) { return new sap.ui.comp.smartvariants.PersonalizableInfo(); };


// ---- sap.ui.comp.smartvariants.SmartVariantManagement --------------------------------------------------------------------------

/**
 * Constructor for a new SmartVariantManagement.<br>
 * The call sequence is as follows:<br>
 * A control for which personalization is used has to be registered first via the <code>personalizableControls</code> association. Then it has
 * to call the <code>initialise</code> method with the arguments <code>fCallback</code> function which will be called once the personalization
 * data has been retrieved and <code>oPersoControl</code>, the control itself.<BR>
 * <b>Note:</b> the function callback has to be defined in the personalizable control.<BR>
 * The old behavior, where the control has to register to the <code>initialise</code> event, before the <code>initialise</code> method call,
 * should not be used any longer and is not supported at all for the page variant scenarios.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPersistencyKey persistencyKey} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPersonalizableControls personalizableControls} : sap.ui.comp.smartvariants.PersonalizableInfo[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:initialise initialise} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterSave afterSave} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.comp.variants.VariantManagement#constructor sap.ui.comp.variants.VariantManagement}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class The SmartVariantManagement control is a specialization of the {@link sap.ui.comp.variants.VariantManagement VariantManagement} control
 *        and communicates with the layer that offers SAPUI5 flexibility services to manage the variants.<br>
 *        For more information about SAPUI5 flexibility, refer to the Developer Guide.
 * @extends sap.ui.comp.variants.VariantManagement
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement = function(sId,mSettings) {};
/**
 * This event is fired after a variant has been saved.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.tile If the property <code>showCreateTile</code> is set, the Create Tile checkbox is shown and its value is passed to this
 * event parameter.<br>
 * If the property <code>showCreateTile</code> is not set, this event parameter is skipped.
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.afterSave = function(oControlEvent) {  };

/**
 * This event is fired when the SmartVariantManagement control is initialized.
 * @event
 * 
 * @deprecated Since version 1.38.0. Replaced by providing the personalizable control and the callback via the <code>initialise</code>-method.
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.initialise = function(oControlEvent) {  };

/**
 * Registers all controls interested and relying on variant handling.
 * 
 * @public
 * @param {sap.ui.comp.smartvariants.PersonalizableInfo} oCurrentControlInfo wrapper for the personalizable control.
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.addPersonalizableControl = function(oCurrentControlInfo) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterSave afterSave} event of this <code>sap.ui.comp.smartvariants.SmartVariantManagement</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartvariants.SmartVariantManagement</code> itself.
 * 
 * This event is fired after a variant has been saved.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartvariants.SmartVariantManagement</code> itself
 * 
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.attachAfterSave = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartvariants.SmartVariantManagement(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:initialise initialise} event of this <code>sap.ui.comp.smartvariants.SmartVariantManagement</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartvariants.SmartVariantManagement</code> itself.
 * 
 * This event is fired when the SmartVariantManagement control is initialized.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartvariants.SmartVariantManagement</code> itself
 * 
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 * @deprecated Since version 1.38.0. Replaced by providing the personalizable control and the callback via the <code>initialise</code>-method.
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.attachInitialise = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartvariants.SmartVariantManagement(); };

/**
 * Destroys all the personalizableControls in the aggregation {@link #getPersonalizableControls personalizableControls}.
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.destroyPersonalizableControls = function() { return new sap.ui.comp.smartvariants.SmartVariantManagement(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterSave afterSave} event of this <code>sap.ui.comp.smartvariants.SmartVariantManagement</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.detachAfterSave = function(fnFunction,oListener) { return new sap.ui.comp.smartvariants.SmartVariantManagement(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:initialise initialise} event of this <code>sap.ui.comp.smartvariants.SmartVariantManagement</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @deprecated Since version 1.38.0. Replaced by providing the personalizable control and the callback via the <code>initialise</code>-method.
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.detachInitialise = function(fnFunction,oListener) { return new sap.ui.comp.smartvariants.SmartVariantManagement(); };

/**
 * Creates a new subclass of class sap.ui.comp.smartvariants.SmartVariantManagement with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.comp.variants.VariantManagement.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterSave afterSave} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.tile] If the property <code>showCreateTile</code> is set, the Create Tile checkbox is shown and its value is passed to this
 * event parameter.<br>
 * If the property <code>showCreateTile</code> is not set, this event parameter is skipped.
 * 
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.fireAfterSave = function(mParameters) { return new sap.ui.comp.smartvariants.SmartVariantManagement(); };

/**
 * Fires event {@link #event:initialise initialise} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 * @deprecated Since version 1.38.0. Replaced by providing the personalizable control and the callback via the <code>initialise</code>-method.
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.fireInitialise = function(mParameters) { return new sap.ui.comp.smartvariants.SmartVariantManagement(); };

/**
 * Retrieves the current variant ID. For a standard variant, an empty string is returned.
 * 
 * @public
 * @since 1.28.1
 * @returns {string} Current variant ID
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.getCurrentVariantId = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.comp.smartvariants.SmartVariantManagement.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPersistencyKey persistencyKey}.
 * 
 * Key used to access personalization data.
 * 
 * @returns {string} Value of property <code>persistencyKey</code>
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.getPersistencyKey = function() { return ""; };

/**
 * Gets content of aggregation {@link #getPersonalizableControls personalizableControls}.
 * 
 * All controls that rely on variant handling have to be added to this aggregation.
 * 
 * @returns {sap.ui.comp.smartvariants.PersonalizableInfo[]}
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.getPersonalizableControls = function() { return new Array(); };

/**
 * Returns the standard variant.
 * 
 * @public
 * @param {sap.ui.core.Control} oCurrentControl Current personalizable control
 * @returns {Object} The standard variant.
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.getStandardVariant = function(oCurrentControl) { return null; };

/**
 * Retrieves the variant content.
 * 
 * @public
 * @param {sap.ui.core.Control} oControl Current personalizable control
 * @param {string} sKey The variant key
 * @returns {object} JSON Representing the content of the variant
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.getVariantContent = function(oControl,sKey) { return new Object(); };

/**
 * Checks for the provided <code>sap.ui.comp.smartvariants.PersonalizableInfo</code> in the aggregation {@link #getPersonalizableControls personalizableControls}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.comp.smartvariants.PersonalizableInfo}
 *           oPersonalizableControl The personalizableControl whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.indexOfPersonalizableControl = function(oPersonalizableControl) { return 0; };

/**
 * Initializes the SAPUI5 layer with the flexibility services by retrieving the list of variants. Once the initialization has been completed, the
 * control for personalization is informed via the initialise event.
 * 
 * @public
 * @param {function} fCallback Function will be called whenever the data for the personalizable control is received
 * @param {sap.ui.core.Control} oPersoControl Current control that can be personalized
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.initialise = function(fCallback,oPersoControl) {  };

/**
 * Inserts a personalizableControl into the aggregation {@link #getPersonalizableControls personalizableControls}.
 * 
 * @param {sap.ui.comp.smartvariants.PersonalizableInfo}
 *            oPersonalizableControl the personalizableControl to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the personalizableControl should be inserted at; for
 *              a negative value of <code>iIndex</code>, the personalizableControl is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the personalizableControl is inserted at
 *              the last position
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.insertPersonalizableControl = function(oPersonalizableControl,iIndex) { return new sap.ui.comp.smartvariants.SmartVariantManagement(); };

/**
 * Determines if the <code>SmartVariantManagement</code> instance is a page variant.
 * 
 * @public
 * @return {boolean} <code>true</code> if it is a page variant, otherwise <code>false</code>
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.isPageVariant = function() { return false; };

/**
 * Removes all registered oersonalizable controls.
 * 
 * @public
 * @returns {array} a list of all registered controls
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.removeAllPersonalizableControls = function() { return null; };

/**
 * Removes a registered personalizable control.
 * 
 * @public
 * @param {sap.ui.comp.smartvariants.PersonalizableInfo} oCurrentControlInfo wrapper for the personalizable control.
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.removePersonalizableControl = function(oCurrentControlInfo) {  };

/**
 * Removes a registered personalizable control.
 * 
 * @public
 * @param {sap.ui.control} oControl the personalizable control
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.removePersonalizableControlById = function(oControl) {  };

/**
 * Sets a new value for property {@link #getPersistencyKey persistencyKey}.
 * 
 * Key used to access personalization data.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sPersistencyKey New value for property <code>persistencyKey</code>
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagement.prototype.setPersistencyKey = function(sPersistencyKey) { return new sap.ui.comp.smartvariants.SmartVariantManagement(); };


// ---- sap.ui.comp.smartvariants.SmartVariantManagementUi2 --------------------------------------------------------------------------

/**
 * Constructor for a new SmartVariantManagementUi2.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPersonalizableControl personalizableControl} : sap.ui.comp.smartvariants.PersonalizableInfo</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:initialise initialise} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterSave afterSave} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.comp.variants.VariantManagement#constructor sap.ui.comp.variants.VariantManagement}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class The SmartVariantManagementUi2 control is a specialization of the {@link sap.ui.comp.variants.VariantManagement VariantManagement}
 *        control and communicates with the Ui2 personalization layer to manage the variants.
 * @extends sap.ui.comp.variants.VariantManagement
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2 = function(sId,mSettings) {};
/**
 * Fired after a variant is saved. This event can be used to retrieve the id of the saved variant.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.afterSave = function(oControlEvent) {  };

/**
 * Once the <code>SmartVariantManagementUi2</code> control has been initialized, and especially after retrieving the variants via
 * the UI2 personalization service, the registered consumer will be notified that this phase has completed
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.initialise = function(oControlEvent) {  };

/**
 * Registers all controls interested and relying on variant handling. Each control has to be registered separately.
 * 
 * @public
 * @param {sap.ui.comp.smartvariants.PersonalizableInfo} oCurrentControlInfo control providing the required aggregation for flex-layer
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.addPersonalizableControl = function(oCurrentControlInfo) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterSave afterSave} event of this <code>sap.ui.comp.smartvariants.SmartVariantManagementUi2</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartvariants.SmartVariantManagementUi2</code> itself.
 * 
 * Fired after a variant is saved. This event can be used to retrieve the id of the saved variant.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartvariants.SmartVariantManagementUi2</code> itself
 * 
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagementUi2} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.attachAfterSave = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartvariants.SmartVariantManagementUi2(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:initialise initialise} event of this <code>sap.ui.comp.smartvariants.SmartVariantManagementUi2</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.smartvariants.SmartVariantManagementUi2</code> itself.
 * 
 * Once the <code>SmartVariantManagementUi2</code> control has been initialized, and especially after retrieving the variants via
 * the UI2 personalization service, the registered consumer will be notified that this phase has completed
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.smartvariants.SmartVariantManagementUi2</code> itself
 * 
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagementUi2} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.attachInitialise = function(oData,fnFunction,oListener) { return new sap.ui.comp.smartvariants.SmartVariantManagementUi2(); };

/**
 * Destroys the personalizableControl in the aggregation {@link #getPersonalizableControl personalizableControl}.
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagementUi2} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.destroyPersonalizableControl = function() { return new sap.ui.comp.smartvariants.SmartVariantManagementUi2(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterSave afterSave} event of this <code>sap.ui.comp.smartvariants.SmartVariantManagementUi2</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagementUi2} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.detachAfterSave = function(fnFunction,oListener) { return new sap.ui.comp.smartvariants.SmartVariantManagementUi2(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:initialise initialise} event of this <code>sap.ui.comp.smartvariants.SmartVariantManagementUi2</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagementUi2} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.detachInitialise = function(fnFunction,oListener) { return new sap.ui.comp.smartvariants.SmartVariantManagementUi2(); };

/**
 * Creates a new subclass of class sap.ui.comp.smartvariants.SmartVariantManagementUi2 with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.comp.variants.VariantManagement.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterSave afterSave} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagementUi2} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.fireAfterSave = function(mParameters) { return new sap.ui.comp.smartvariants.SmartVariantManagementUi2(); };

/**
 * Fires event {@link #event:initialise initialise} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagementUi2} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.fireInitialise = function(mParameters) { return new sap.ui.comp.smartvariants.SmartVariantManagementUi2(); };

/**
 * Retrieves the current variant ID. For a standard variant, an empty string is returned.
 * 
 * @public
 * @returns {string} Current variant ID
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.getCurrentVariantId = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.comp.smartvariants.SmartVariantManagementUi2.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getPersonalizableControl personalizableControl}.
 * 
 * All controls that rely on variant handling have to be added to this aggregation. The only consumer currently known is the
 * <code>FilterBar</code> control.
 * 
 * @returns {sap.ui.comp.smartvariants.PersonalizableInfo}
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.getPersonalizableControl = function() { return new sap.ui.comp.smartvariants.PersonalizableInfo(); };

/**
 * Retrieves the variant content.
 * 
 * @public
 * @param {sap.ui.core.Control} oControl current control
 * @param {string} sKey the variant key
 * @returns {object} json object representing the content of the variant
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.getVariantContent = function(oControl,sKey) { return new Object(); };

/**
 * Initializes the UI2 personalization layer by retrieving the list of variants. Once the initialization has been completed, the control for
 * personalization is informed via the initialise event.
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.initialise = function() {  };

/**
 * Determines if the <code>SmartVariantManagementUi3>/code> instance is a page variant.
 * 
 * @public
 * @return {boolean} always returns <code>false</code>
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.isPageVariant = function() { return false; };

/**
 * Sets the current variant ID. In case an invalid ID is passed, a standard variant is set.
 * 
 * @public
 * @param {string} sVariantId ID of the variant
 * @param {boolean} bDoNotApplyVariant If set to <code>true</code>, the <code>applyVariant</code> method is not executed yet. Relevant during
 *        navigation, when called before the initialise event has been executed
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.setCurrentVariantId = function(sVariantId,bDoNotApplyVariant) {  };

/**
 * Sets the aggregated {@link #getPersonalizableControl personalizableControl}.
 * @param {sap.ui.comp.smartvariants.PersonalizableInfo} oPersonalizableControl The personalizableControl to set
 * @returns {sap.ui.comp.smartvariants.SmartVariantManagementUi2} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.smartvariants.SmartVariantManagementUi2.prototype.setPersonalizableControl = function(oPersonalizableControl) { return new sap.ui.comp.smartvariants.SmartVariantManagementUi2(); };


// ---- sap.ui.comp.state.UIState --------------------------------------------------------------------------

/**
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPresentationVariant presentationVariant} : object</li>
 * <li>{@link #getSelectionVariant selectionVariant} : object</li>
 * <li>{@link #getVariantName variantName} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] initial settings for the new control
 * @class Creates a new instance of an UIState class.
 * @extends sap.ui.base.ManagedObject
 * @version 1.48.4
 * @constructor
 * @public
 * @experimental Since version 1.48.
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.state.UIState = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.comp.state.UIState with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.state.UIState.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.comp.state.UIState.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.state.UIState.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPresentationVariant presentationVariant}.
 * 
 * Object representing the presentation variant.
 * The structure looks like:
 * <pre><code>
 * 	{
 * 		ContextUrl: {string},
 * 		MaxItems: {int},
 * 	  	SortOrder: [],
 * 		GroupBy: [],
 * 		Total: [],
 * 		RequestAtLeast: [],
 * 		Visualizations: []
 * 	}
 * </code></pre>
 * <b>Note:</b>
 * <ul>
 *     <li> <code>PresentationVariantID</code> property is not provided</li>
 *     <li> <code>Text</code> property is not provided because it is translated text</li>
 *     <li> <code>TotalBy</code> is not supported yet</li>
 *     <li> <code>IncludeGrandTotal</code> is not supported yet</li>
 *     <li> <code>InitialExpansionLevel</code> is not supported yet</li>
 *     <li> <code>Title</code> of <code>Visualizations.Content</code> property is not provided because it is translated text</li>
 *     <li> <code>Description</code> of <code>Visualizations.Content</code> property is not provided because it is translated text</li>
 *     <li> <code>VariantName</code> property is not part of specified DataSuiteFormat yet
 * </ul>
 * 
 * @returns {object} Value of property <code>presentationVariant</code>
 * 
 * @public
 * 
 */
sap.ui.comp.state.UIState.prototype.getPresentationVariant = function() { return new Object(); };

/**
 * Gets current value of property {@link #getSelectionVariant selectionVariant}.
 * 
 * Object representing the selection variant.
 * The structure looks like:
 * <pre><code>
 * 	{
 * 		SelectOptions: []
 *  }
 * </code></pre>
 * 
 * @returns {object} Value of property <code>selectionVariant</code>
 * 
 * @public
 * 
 */
sap.ui.comp.state.UIState.prototype.getSelectionVariant = function() { return new Object(); };

/**
 * Gets current value of property {@link #getVariantName variantName}.
 * 
 * Variant name.
 * 
 * @returns {string} Value of property <code>variantName</code>
 * 
 * @public
 * 
 */
sap.ui.comp.state.UIState.prototype.getVariantName = function() { return ""; };

/**
 * Sets a new value for property {@link #getPresentationVariant presentationVariant}.
 * 
 * Object representing the presentation variant.
 * The structure looks like:
 * <pre><code>
 * 	{
 * 		ContextUrl: {string},
 * 		MaxItems: {int},
 * 	  	SortOrder: [],
 * 		GroupBy: [],
 * 		Total: [],
 * 		RequestAtLeast: [],
 * 		Visualizations: []
 * 	}
 * </code></pre>
 * <b>Note:</b>
 * <ul>
 *     <li> <code>PresentationVariantID</code> property is not provided</li>
 *     <li> <code>Text</code> property is not provided because it is translated text</li>
 *     <li> <code>TotalBy</code> is not supported yet</li>
 *     <li> <code>IncludeGrandTotal</code> is not supported yet</li>
 *     <li> <code>InitialExpansionLevel</code> is not supported yet</li>
 *     <li> <code>Title</code> of <code>Visualizations.Content</code> property is not provided because it is translated text</li>
 *     <li> <code>Description</code> of <code>Visualizations.Content</code> property is not provided because it is translated text</li>
 *     <li> <code>VariantName</code> property is not part of specified DataSuiteFormat yet
 * </ul>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oPresentationVariant New value for property <code>presentationVariant</code>
 * @returns {sap.ui.comp.state.UIState} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.state.UIState.prototype.setPresentationVariant = function(oPresentationVariant) { return new sap.ui.comp.state.UIState(); };

/**
 * Sets a new value for property {@link #getSelectionVariant selectionVariant}.
 * 
 * Object representing the selection variant.
 * The structure looks like:
 * <pre><code>
 * 	{
 * 		SelectOptions: []
 *  }
 * </code></pre>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oSelectionVariant New value for property <code>selectionVariant</code>
 * @returns {sap.ui.comp.state.UIState} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.state.UIState.prototype.setSelectionVariant = function(oSelectionVariant) { return new sap.ui.comp.state.UIState(); };

/**
 * Sets a new value for property {@link #getVariantName variantName}.
 * 
 * Variant name.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sVariantName New value for property <code>variantName</code>
 * @returns {sap.ui.comp.state.UIState} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.state.UIState.prototype.setVariantName = function(sVariantName) { return new sap.ui.comp.state.UIState(); };


// ---- sap.ui.comp.transport.TransportDialog --------------------------------------------------------------------------

/**
 * Constructor for a new transport/TransportDialog.
 * 
 * @class
 * The Transport Dialog Control can be used to implement a value help for selecting an ABAP package and transport request. It is not a generic utility, but part of the Variantmanament and therefore cannot be used in any other application.
 * @extends sap.ui.fl.transport.FlTransportDialog
 * 
 * @constructor
 * @public
 * @deprecated
 * 
 */
sap.ui.comp.transport.TransportDialog = function() {};

// ---- sap.ui.comp.valuehelpdialog.ValueHelpDialog --------------------------------------------------------------------------

/**
 * Constructor for a new valuehelpdialog/ValueHelpDialog.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBasicSearchText basicSearchText} : string (default: )</li>
 * <li>{@link #getSupportMultiselect supportMultiselect} : boolean (default: true)</li>
 * <li>{@link #getSupportRanges supportRanges} : boolean (default: false)</li>
 * <li>{@link #getSupportRangesOnly supportRangesOnly} : boolean (default: false)</li>
 * <li>{@link #getKey key} : string (default: )</li>
 * <li>{@link #getKeys keys} : string[]</li>
 * <li>{@link #getDescriptionKey descriptionKey} : string (default: )</li>
 * <li>{@link #getMaxIncludeRanges maxIncludeRanges} : string (default: -1)</li>
 * <li>{@link #getMaxExcludeRanges maxExcludeRanges} : string (default: -1)</li>
 * <li>{@link #getDisplayFormat displayFormat} : string (default: )</li>
 * <li>{@link #getTokenDisplayBehaviour tokenDisplayBehaviour} : string (default: )</li>
 * <li>{@link #getFilterMode filterMode} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getFilterBar filterBar} : sap.ui.comp.filterbar.FilterBar</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:ok ok} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:cancel cancel} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:selectionChange selectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:tokenRemove tokenRemove} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:updateSelection updateSelection} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Dialog#constructor sap.m.Dialog}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class The ValueHelpDialog control can be used to implement a value help for an input field.
 * @extends sap.m.Dialog
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog = function(sId,mSettings) {};
/**
 * This event is fired when the Cancel button is pressed.
 * @event
 * @since 1.24
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.cancel = function(oControlEvent) {  };

/**
 * This event is fired when the OK button is pressed.
 * @event
 * @since 1.24
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.m.Token[]} oControlEvent.getParameters.tokens The array of tokens created or modified on the ValueHelpDialog.
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.ok = function(oControlEvent) {  };

/**
 * This event is fired when the user selects an item in the items table.
 * 
 * <b>Note:</b> The event will only be raised when the dialog gets a table
 * instance from outside via <code>setTable</code>.
 * @event
 * @since 1.32
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {object} oControlEvent.getParameters.tableSelectionParams The RowSelectionChange event parameter from the hosted table that contains the selected items.
 * @param {object[]} oControlEvent.getParameters.updateTokens Returns an array of objects which represents all selected row tokens. The object contains the token key, the row object
 * data from the model, and the information if the token is selected. <code>
 *  [{sKey, oRow, bSelect}, ...]
 *  </code>
 * @param {boolean} oControlEvent.getParameters.useDefault Can be set to <code>true</code> to execute the default behaviour of the ValueHelpDialog.
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.selectionChange = function(oControlEvent) {  };

/**
 * This event is fired when the user removes one or multiple existing token(s) from the dialog.
 * 
 * <b>Note:</b> The event will only be raised when the dialog gets a table
 * instance from outside via <code>setTable</code>.
 * @event
 * @since 1.32
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string[]} oControlEvent.getParameters.tokenKeys The array of token keys that has been removed.
 * @param {boolean} oControlEvent.getParameters.useDefault Can be set to true to execute the default behaviour of ValueHelpDialog.
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.tokenRemove = function(oControlEvent) {  };

/**
 * This event is fired when the table gets an update and all existing tokens must be selected in the table.
 * 
 * <b>Note:</b> The event will only be raised when the dialog gets a table
 * instance from outside via <code>setTable</code>.
 * @event
 * @since 1.32
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string[]} oControlEvent.getParameters.tokenKeys The array of existing token keys for which the selection in the table has to be updated.
 * @param {boolean} oControlEvent.getParameters.useDefault Can be set to true to execute the default behavior of ValueHelpDialog.
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.updateSelection = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:cancel cancel} event of this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code> itself.
 * 
 * This event is fired when the Cancel button is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code> itself
 * 
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.24
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.attachCancel = function(oData,fnFunction,oListener) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:ok ok} event of this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code> itself.
 * 
 * This event is fired when the OK button is pressed.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code> itself
 * 
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.24
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.attachOk = function(oData,fnFunction,oListener) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:selectionChange selectionChange} event of this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code> itself.
 * 
 * This event is fired when the user selects an item in the items table.
 * 
 * <b>Note:</b> The event will only be raised when the dialog gets a table
 * instance from outside via <code>setTable</code>.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code> itself
 * 
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.32
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.attachSelectionChange = function(oData,fnFunction,oListener) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:tokenRemove tokenRemove} event of this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code> itself.
 * 
 * This event is fired when the user removes one or multiple existing token(s) from the dialog.
 * 
 * <b>Note:</b> The event will only be raised when the dialog gets a table
 * instance from outside via <code>setTable</code>.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code> itself
 * 
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.32
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.attachTokenRemove = function(oData,fnFunction,oListener) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:updateSelection updateSelection} event of this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code> itself.
 * 
 * This event is fired when the table gets an update and all existing tokens must be selected in the table.
 * 
 * <b>Note:</b> The event will only be raised when the dialog gets a table
 * instance from outside via <code>setTable</code>.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code> itself
 * 
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.32
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.attachUpdateSelection = function(oData,fnFunction,oListener) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Destroys the filterBar in the aggregation {@link #getFilterBar filterBar}.
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.destroyFilterBar = function() { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:cancel cancel} event of this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.detachCancel = function(fnFunction,oListener) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:ok ok} event of this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.detachOk = function(fnFunction,oListener) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:selectionChange selectionChange} event of this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.detachSelectionChange = function(fnFunction,oListener) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:tokenRemove tokenRemove} event of this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.detachTokenRemove = function(fnFunction,oListener) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:updateSelection updateSelection} event of this <code>sap.ui.comp.valuehelpdialog.ValueHelpDialog</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.detachUpdateSelection = function(fnFunction,oListener) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Creates a new subclass of class sap.ui.comp.valuehelpdialog.ValueHelpDialog with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Dialog.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:cancel cancel} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.24
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.fireCancel = function(mParameters) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Fires event {@link #event:ok ok} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.m.Token[]} [mParameters.tokens] The array of tokens created or modified on the ValueHelpDialog.
 * 
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.24
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.fireOk = function(mParameters) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {object} [mParameters.tableSelectionParams] The RowSelectionChange event parameter from the hosted table that contains the selected items.
 * @param {object[]} [mParameters.updateTokens] Returns an array of objects which represents all selected row tokens. The object contains the token key, the row object
 * data from the model, and the information if the token is selected. <code>
 *  [{sKey, oRow, bSelect}, ...]
 *  </code>
 * @param {boolean} [mParameters.useDefault] Can be set to <code>true</code> to execute the default behaviour of the ValueHelpDialog.
 * 
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.32
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.fireSelectionChange = function(mParameters) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Fires event {@link #event:tokenRemove tokenRemove} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string[]} [mParameters.tokenKeys] The array of token keys that has been removed.
 * @param {boolean} [mParameters.useDefault] Can be set to true to execute the default behaviour of ValueHelpDialog.
 * 
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.32
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.fireTokenRemove = function(mParameters) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Fires event {@link #event:updateSelection updateSelection} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string[]} [mParameters.tokenKeys] The array of existing token keys for which the selection in the table has to be updated.
 * @param {boolean} [mParameters.useDefault] Can be set to true to execute the default behavior of ValueHelpDialog.
 * 
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.32
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.fireUpdateSelection = function(mParameters) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Gets current value of property {@link #getBasicSearchText basicSearchText}.
 * 
 * Defines the value for the basic search field. The value is set into the basic search field of the filter bar used.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>basicSearchText</code>
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.getBasicSearchText = function() { return ""; };

/**
 * Gets current value of property {@link #getDescriptionKey descriptionKey}.
 * 
 * Defines the key of the column used for the token text.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>descriptionKey</code>
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.getDescriptionKey = function() { return ""; };

/**
 * Gets current value of property {@link #getDisplayFormat displayFormat}.
 * 
 * Represents the display format of the range values. With the <code>displayFormat</code> value UpperCase, the entered value of the
 * range (condition) is converted to uppercase letters.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>displayFormat</code>
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.getDisplayFormat = function() { return ""; };

/**
 * Gets content of aggregation {@link #getFilterBar filterBar}.
 * 
 * Allows you to add a {@link sap.ui.comp.filterbar.FilterBar FilterBar} or
 * {@link sap.ui.comp.smartfilterbar.SmartFilterBar SmartFilterBar} control to the value help dialog.
 * 
 * @returns {sap.ui.comp.filterbar.FilterBar}
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.getFilterBar = function() { return new sap.ui.comp.filterbar.FilterBar(); };

/**
 * Gets current value of property {@link #getFilterMode filterMode}.
 * 
 * Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>filterMode</code>
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.getFilterMode = function() { return false; };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * Defines the key of the column used for the internal key handling. The value of the column is used for the token key and also to
 * identify the row in the table.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>key</code>
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.getKey = function() { return ""; };

/**
 * Gets current value of property {@link #getKeys keys}.
 * 
 * Defines the list of additional keys of the column used for the internal key handling.
 * 
 * @returns {string[]} Value of property <code>keys</code>
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.getKeys = function() { return new Array(); };

/**
 * Gets current value of property {@link #getMaxExcludeRanges maxExcludeRanges}.
 * 
 * Defines the maximum number of exclude ranges.
 * 
 * Default value is <code>-1</code>.
 * @returns {string} Value of property <code>maxExcludeRanges</code>
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.getMaxExcludeRanges = function() { return ""; };

/**
 * Gets current value of property {@link #getMaxIncludeRanges maxIncludeRanges}.
 * 
 * Defines the maximum number of include ranges.
 * 
 * Default value is <code>-1</code>.
 * @returns {string} Value of property <code>maxIncludeRanges</code>
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.getMaxIncludeRanges = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.comp.valuehelpdialog.ValueHelpDialog.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSupportMultiselect supportMultiselect}.
 * 
 * Enables multi-selection in the table used.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>supportMultiselect</code>
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.getSupportMultiselect = function() { return false; };

/**
 * Gets current value of property {@link #getSupportRanges supportRanges}.
 * 
 * Enables the ranges (conditions) feature in the dialog.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>supportRanges</code>
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.getSupportRanges = function() { return false; };

/**
 * Gets current value of property {@link #getSupportRangesOnly supportRangesOnly}.
 * 
 * If this property is set to <code>true</code>, the value help dialog only supports the ranges (conditions) feature.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>supportRangesOnly</code>
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.getSupportRangesOnly = function() { return false; };

/**
 * Gives access to the internal table instance.
 * 
 * @public
 * @returns {object} the used table instance
 * @since 1.28
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.getTable = function() { return new Object(); };

/**
 * Gets current value of property {@link #getTokenDisplayBehaviour tokenDisplayBehaviour}.
 * 
 * Represents how the item token text should be displayed in ValueHelpDialog. Use one of the valid
 * <code>sap.ui.comp.smartfilterbar.DisplayBehaviour</code> values.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>tokenDisplayBehaviour</code>
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.getTokenDisplayBehaviour = function() { return ""; };

/**
 * Sets a new value for property {@link #getBasicSearchText basicSearchText}.
 * 
 * Defines the value for the basic search field. The value is set into the basic search field of the filter bar used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sBasicSearchText New value for property <code>basicSearchText</code>
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setBasicSearchText = function(sBasicSearchText) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Sets a new value for property {@link #getDescriptionKey descriptionKey}.
 * 
 * Defines the key of the column used for the token text.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sDescriptionKey New value for property <code>descriptionKey</code>
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setDescriptionKey = function(sDescriptionKey) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Sets a new value for property {@link #getDisplayFormat displayFormat}.
 * 
 * Represents the display format of the range values. With the <code>displayFormat</code> value UpperCase, the entered value of the
 * range (condition) is converted to uppercase letters.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sDisplayFormat New value for property <code>displayFormat</code>
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setDisplayFormat = function(sDisplayFormat) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Sets the array for the supported exclude range operations.
 * 
 * @public
 * @since 1.24
 * @param {sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation[]} aOperation An array of range operations
 * @param {string} sType the type for which the operations are defined
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setExcludeRangeOperations = function(aOperation,sType) {  };

/**
 * Sets the aggregated {@link #getFilterBar filterBar}.
 * @param {sap.ui.comp.filterbar.FilterBar} oFilterBar The filterBar to set
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setFilterBar = function(oFilterBar) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Sets a new value for property {@link #getFilterMode filterMode}.
 * 
 * Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bFilterMode New value for property <code>filterMode</code>
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setFilterMode = function(bFilterMode) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Sets the array for the supported include range operations.
 * 
 * @public
 * @since 1.24
 * @param {sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation[]} aOperation An array of range operations
 * @param {string} sType the type for which the operations are defined
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setIncludeRangeOperations = function(aOperation,sType) {  };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * Defines the key of the column used for the internal key handling. The value of the column is used for the token key and also to
 * identify the row in the table.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setKey = function(sKey) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Sets a new value for property {@link #getKeys keys}.
 * 
 * Defines the list of additional keys of the column used for the internal key handling.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string[]} sKeys New value for property <code>keys</code>
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setKeys = function(sKeys) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Sets a new value for property {@link #getMaxExcludeRanges maxExcludeRanges}.
 * 
 * Defines the maximum number of exclude ranges.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>-1</code>.
 * @param {string} sMaxExcludeRanges New value for property <code>maxExcludeRanges</code>
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setMaxExcludeRanges = function(sMaxExcludeRanges) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Sets a new value for property {@link #getMaxIncludeRanges maxIncludeRanges}.
 * 
 * Defines the maximum number of include ranges.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>-1</code>.
 * @param {string} sMaxIncludeRanges New value for property <code>maxIncludeRanges</code>
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setMaxIncludeRanges = function(sMaxIncludeRanges) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Sets a RangeKeyFields array. This method allows you to specify the KeyFields for the ranges. You can set an array of objects with Key and Label
 * properties to define the key fields.
 * 
 * @public
 * @since 1.24
 * @param {object[]} aRangeKeyFields An array of range KeyFields
 *        <code>[{key: "CompanyCode", label: "ID"}, {key:"CompanyName", label : "Name"}]</code>
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setRangeKeyFields = function(aRangeKeyFields) {  };

/**
 * Sets a new value for property {@link #getSupportMultiselect supportMultiselect}.
 * 
 * Enables multi-selection in the table used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bSupportMultiselect New value for property <code>supportMultiselect</code>
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setSupportMultiselect = function(bSupportMultiselect) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Sets a new value for property {@link #getSupportRanges supportRanges}.
 * 
 * Enables the ranges (conditions) feature in the dialog.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSupportRanges New value for property <code>supportRanges</code>
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setSupportRanges = function(bSupportRanges) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Sets a new value for property {@link #getSupportRangesOnly supportRangesOnly}.
 * 
 * If this property is set to <code>true</code>, the value help dialog only supports the ranges (conditions) feature.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSupportRangesOnly New value for property <code>supportRangesOnly</code>
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setSupportRangesOnly = function(bSupportRangesOnly) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Sets the table used in the value help dialog. If not used, the dialog creates a sap.ui.table.Table or sap.m.Table instance internally.
 * 
 * @param {object} oTable The used table control instance
 * 
 * @since 1.32
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setTable = function(oTable) {  };

/**
 * Sets a new value for property {@link #getTokenDisplayBehaviour tokenDisplayBehaviour}.
 * 
 * Represents how the item token text should be displayed in ValueHelpDialog. Use one of the valid
 * <code>sap.ui.comp.smartfilterbar.DisplayBehaviour</code> values.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sTokenDisplayBehaviour New value for property <code>tokenDisplayBehaviour</code>
 * @returns {sap.ui.comp.valuehelpdialog.ValueHelpDialog} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setTokenDisplayBehaviour = function(sTokenDisplayBehaviour) { return new sap.ui.comp.valuehelpdialog.ValueHelpDialog(); };

/**
 * Sets the array of tokens. The <code>sap.m.Tokens</code> are added to the dialog tokenizer Selected Items or Excluded Items. Normal tokens are added to the
 * Selected Items tokenizer only and are selected in the table. <code>
 * new sap.m.Token({key: "0001", text:"SAP A.G. (0001)"});
 * </code> Tokens with
 * the extra data with value 'range' are handled as range tokens or exclude range tokens. <code>
 * new sap.m.Token({key: "i1", text: "ID: a..z"}).data("range", { "exclude": false, "operation": sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT, "keyField": "CompanyCode", "value1": "a", "value2": "z"});
 * </code>
 * The selected items or range tokens are returned in the event parameters of the Ok event.
 * 
 * @public
 * @since 1.24
 * @param {sap.m.Token[]} aTokens An array of token controls
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.setTokens = function(aTokens) {  };

/**
 * Updates the selection of rows in the table. This function must be called after a first binding or binding update of the table. It will set a
 * table row as selected if a token for this row exists.
 * 
 * @public
 * @since 1.24
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpDialog.prototype.update = function() {  };


// ---- sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.toString = function() { return ""; };

// ---- sap.ui.comp.variants.EditableVariantItem --------------------------------------------------------------------------

/**
 * Constructor for a new variants/EditableVariantItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getGlobal global} : boolean</li>
 * <li>{@link #getLifecyclePackage lifecyclePackage} : string</li>
 * <li>{@link #getLifecycleTransportId lifecycleTransportId} : string</li>
 * <li>{@link #getNamespace namespace} : string</li>
 * <li>{@link #getReadOnly readOnly} : boolean (default: false)</li>
 * <li>{@link #getAccessOptions accessOptions} : string</li>
 * <li>{@link #getLabelReadOnly labelReadOnly} : boolean (default: false)</li>
 * <li>{@link #getAuthor author} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ColumnListItem#constructor sap.m.ColumnListItem}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no id is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class The EditableVariantItem class describes an editable variant list item for the Manage Variants popup.
 * @extends sap.m.ColumnListItem
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.variants.EditableVariantItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.comp.variants.EditableVariantItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ColumnListItem.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.variants.EditableVariantItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getAccessOptions accessOptions}.
 * 
 * Flags for a variant to indicate why it might be read-only
 * 
 * @returns {string} Value of property <code>accessOptions</code>
 * @since 1.26.0
 * @deprecated Since version 1.28.0. Replaced by property <code>labelReadOnly</code>
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.getAccessOptions = function() { return ""; };

/**
 * Gets current value of property {@link #getAuthor author}.
 * 
 * Author of the variant
 * 
 * @returns {string} Value of property <code>author</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.getAuthor = function() { return ""; };

/**
 * Gets current value of property {@link #getGlobal global}.
 * 
 * Indicator if a variant is visible for all users.
 * 
 * @returns {boolean} Value of property <code>global</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.getGlobal = function() { return false; };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * Key of the List Item
 * 
 * @returns {string} Value of property <code>key</code>
 * @since 1.22.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.getKey = function() { return ""; };

/**
 * Gets current value of property {@link #getLabelReadOnly labelReadOnly}.
 * 
 * Indicates if the variant label can be changed
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>labelReadOnly</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.getLabelReadOnly = function() { return false; };

/**
 * Gets current value of property {@link #getLifecyclePackage lifecyclePackage}.
 * 
 * ABAP Package the variant is assigned. Used for transport functionality
 * 
 * @returns {string} Value of property <code>lifecyclePackage</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.getLifecyclePackage = function() { return ""; };

/**
 * Gets current value of property {@link #getLifecycleTransportId lifecycleTransportId}.
 * 
 * Identifier of the transport object the variant is assigned to.
 * 
 * @returns {string} Value of property <code>lifecycleTransportId</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.getLifecycleTransportId = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.comp.variants.EditableVariantItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.variants.EditableVariantItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getNamespace namespace}.
 * 
 * Variant namespace
 * 
 * @returns {string} Value of property <code>namespace</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.getNamespace = function() { return ""; };

/**
 * Gets current value of property {@link #getReadOnly readOnly}.
 * 
 * Indication if variant can be changed
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>readOnly</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.getReadOnly = function() { return false; };

/**
 * Sets a new value for property {@link #getAccessOptions accessOptions}.
 * 
 * Flags for a variant to indicate why it might be read-only
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sAccessOptions New value for property <code>accessOptions</code>
 * @returns {sap.ui.comp.variants.EditableVariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * @deprecated Since version 1.28.0. Replaced by property <code>labelReadOnly</code>
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.setAccessOptions = function(sAccessOptions) { return new sap.ui.comp.variants.EditableVariantItem(); };

/**
 * Sets a new value for property {@link #getAuthor author}.
 * 
 * Author of the variant
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sAuthor New value for property <code>author</code>
 * @returns {sap.ui.comp.variants.EditableVariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.setAuthor = function(sAuthor) { return new sap.ui.comp.variants.EditableVariantItem(); };

/**
 * Sets a new value for property {@link #getGlobal global}.
 * 
 * Indicator if a variant is visible for all users.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bGlobal New value for property <code>global</code>
 * @returns {sap.ui.comp.variants.EditableVariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.setGlobal = function(bGlobal) { return new sap.ui.comp.variants.EditableVariantItem(); };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * Key of the List Item
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.ui.comp.variants.EditableVariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.setKey = function(sKey) { return new sap.ui.comp.variants.EditableVariantItem(); };

/**
 * Sets a new value for property {@link #getLabelReadOnly labelReadOnly}.
 * 
 * Indicates if the variant label can be changed
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bLabelReadOnly New value for property <code>labelReadOnly</code>
 * @returns {sap.ui.comp.variants.EditableVariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.setLabelReadOnly = function(bLabelReadOnly) { return new sap.ui.comp.variants.EditableVariantItem(); };

/**
 * Sets a new value for property {@link #getLifecyclePackage lifecyclePackage}.
 * 
 * ABAP Package the variant is assigned. Used for transport functionality
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sLifecyclePackage New value for property <code>lifecyclePackage</code>
 * @returns {sap.ui.comp.variants.EditableVariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.setLifecyclePackage = function(sLifecyclePackage) { return new sap.ui.comp.variants.EditableVariantItem(); };

/**
 * Sets a new value for property {@link #getLifecycleTransportId lifecycleTransportId}.
 * 
 * Identifier of the transport object the variant is assigned to.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sLifecycleTransportId New value for property <code>lifecycleTransportId</code>
 * @returns {sap.ui.comp.variants.EditableVariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.setLifecycleTransportId = function(sLifecycleTransportId) { return new sap.ui.comp.variants.EditableVariantItem(); };

/**
 * Sets a new value for property {@link #getNamespace namespace}.
 * 
 * Variant namespace
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sNamespace New value for property <code>namespace</code>
 * @returns {sap.ui.comp.variants.EditableVariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.setNamespace = function(sNamespace) { return new sap.ui.comp.variants.EditableVariantItem(); };

/**
 * Sets a new value for property {@link #getReadOnly readOnly}.
 * 
 * Indication if variant can be changed
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bReadOnly New value for property <code>readOnly</code>
 * @returns {sap.ui.comp.variants.EditableVariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.EditableVariantItem.prototype.setReadOnly = function(bReadOnly) { return new sap.ui.comp.variants.EditableVariantItem(); };


// ---- sap.ui.comp.variants.VariantItem --------------------------------------------------------------------------

/**
 * Constructor for a new variants/VariantItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getExecuteOnSelection executeOnSelection} : boolean (default: false)</li>
 * <li>{@link #getReadOnly readOnly} : boolean (default: false)</li>
 * <li>{@link #getLifecycleTransportId lifecycleTransportId} : string</li>
 * <li>{@link #getGlobal global} : boolean</li>
 * <li>{@link #getLifecyclePackage lifecyclePackage} : string</li>
 * <li>{@link #getNamespace namespace} : string</li>
 * <li>{@link #getAccessOptions accessOptions} : string</li>
 * <li>{@link #getLabelReadOnly labelReadOnly} : boolean (default: false)</li>
 * <li>{@link #getAuthor author} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class The VariantItem class describes a variant item.
 * @extends sap.ui.core.Item
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.variants.VariantItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.comp.variants.VariantItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.variants.VariantItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getAccessOptions accessOptions}.
 * 
 * Flags for a variant to indicate why it might be read-only.
 * 
 * @returns {string} Value of property <code>accessOptions</code>
 * @since 1.26.0
 * @deprecated Since version 1.28.0. Replaced by property <code>labelReadOnly</code>
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.getAccessOptions = function() { return ""; };

/**
 * Gets current value of property {@link #getAuthor author}.
 * 
 * Author of the variant
 * 
 * @returns {string} Value of property <code>author</code>
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.getAuthor = function() { return ""; };

/**
 * Gets current value of property {@link #getExecuteOnSelection executeOnSelection}.
 * 
 * Attribute for usage in <code>SmartFilterBar</code>
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>executeOnSelection</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.getExecuteOnSelection = function() { return false; };

/**
 * Gets current value of property {@link #getGlobal global}.
 * 
 * Indicator if a variant is visible for all users.
 * 
 * @returns {boolean} Value of property <code>global</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.getGlobal = function() { return false; };

/**
 * Gets current value of property {@link #getLabelReadOnly labelReadOnly}.
 * 
 * Indicates if the variant title can be changed.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>labelReadOnly</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.getLabelReadOnly = function() { return false; };

/**
 * Gets current value of property {@link #getLifecyclePackage lifecyclePackage}.
 * 
 * ABAP package the variant is assigned to. Used for transport functionality.
 * 
 * @returns {string} Value of property <code>lifecyclePackage</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.getLifecyclePackage = function() { return ""; };

/**
 * Gets current value of property {@link #getLifecycleTransportId lifecycleTransportId}.
 * 
 * Identifier of the transport object the variant is assigned to.
 * 
 * @returns {string} Value of property <code>lifecycleTransportId</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.getLifecycleTransportId = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.comp.variants.VariantItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.variants.VariantItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getNamespace namespace}.
 * 
 * Variant namespace
 * 
 * @returns {string} Value of property <code>namespace</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.getNamespace = function() { return ""; };

/**
 * Gets current value of property {@link #getReadOnly readOnly}.
 * 
 * If set to <code>false</code>, the user is allowed to change the item's data
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>readOnly</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.getReadOnly = function() { return false; };

/**
 * Sets a new value for property {@link #getAccessOptions accessOptions}.
 * 
 * Flags for a variant to indicate why it might be read-only.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sAccessOptions New value for property <code>accessOptions</code>
 * @returns {sap.ui.comp.variants.VariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * @deprecated Since version 1.28.0. Replaced by property <code>labelReadOnly</code>
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.setAccessOptions = function(sAccessOptions) { return new sap.ui.comp.variants.VariantItem(); };

/**
 * Sets a new value for property {@link #getAuthor author}.
 * 
 * Author of the variant
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sAuthor New value for property <code>author</code>
 * @returns {sap.ui.comp.variants.VariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.setAuthor = function(sAuthor) { return new sap.ui.comp.variants.VariantItem(); };

/**
 * Sets a new value for property {@link #getExecuteOnSelection executeOnSelection}.
 * 
 * Attribute for usage in <code>SmartFilterBar</code>
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bExecuteOnSelection New value for property <code>executeOnSelection</code>
 * @returns {sap.ui.comp.variants.VariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.setExecuteOnSelection = function(bExecuteOnSelection) { return new sap.ui.comp.variants.VariantItem(); };

/**
 * Sets a new value for property {@link #getGlobal global}.
 * 
 * Indicator if a variant is visible for all users.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {boolean} bGlobal New value for property <code>global</code>
 * @returns {sap.ui.comp.variants.VariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.setGlobal = function(bGlobal) { return new sap.ui.comp.variants.VariantItem(); };

/**
 * Sets a new value for property {@link #getLabelReadOnly labelReadOnly}.
 * 
 * Indicates if the variant title can be changed.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bLabelReadOnly New value for property <code>labelReadOnly</code>
 * @returns {sap.ui.comp.variants.VariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.setLabelReadOnly = function(bLabelReadOnly) { return new sap.ui.comp.variants.VariantItem(); };

/**
 * Sets a new value for property {@link #getLifecyclePackage lifecyclePackage}.
 * 
 * ABAP package the variant is assigned to. Used for transport functionality.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sLifecyclePackage New value for property <code>lifecyclePackage</code>
 * @returns {sap.ui.comp.variants.VariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.setLifecyclePackage = function(sLifecyclePackage) { return new sap.ui.comp.variants.VariantItem(); };

/**
 * Sets a new value for property {@link #getLifecycleTransportId lifecycleTransportId}.
 * 
 * Identifier of the transport object the variant is assigned to.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sLifecycleTransportId New value for property <code>lifecycleTransportId</code>
 * @returns {sap.ui.comp.variants.VariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.setLifecycleTransportId = function(sLifecycleTransportId) { return new sap.ui.comp.variants.VariantItem(); };

/**
 * Sets a new value for property {@link #getNamespace namespace}.
 * 
 * Variant namespace
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sNamespace New value for property <code>namespace</code>
 * @returns {sap.ui.comp.variants.VariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.setNamespace = function(sNamespace) { return new sap.ui.comp.variants.VariantItem(); };

/**
 * Sets a new value for property {@link #getReadOnly readOnly}.
 * 
 * If set to <code>false</code>, the user is allowed to change the item's data
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bReadOnly New value for property <code>readOnly</code>
 * @returns {sap.ui.comp.variants.VariantItem} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantItem.prototype.setReadOnly = function(bReadOnly) { return new sap.ui.comp.variants.VariantItem(); };


// ---- sap.ui.comp.variants.VariantManagement --------------------------------------------------------------------------

/**
 * Constructor for a new VariantManagement.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getInitialSelectionKey initialSelectionKey} : string</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getDefaultVariantKey defaultVariantKey} : string</li>
 * <li>{@link #getSelectionKey selectionKey} : string</li>
 * <li>{@link #getShowCreateTile showCreateTile} : boolean (default: false)</li>
 * <li>{@link #getShowExecuteOnSelection showExecuteOnSelection} : boolean (default: false)</li>
 * <li>{@link #getShowShare showShare} : boolean (default: false)</li>
 * <li>{@link #getShowSetAsDefault showSetAsDefault} : boolean (default: true)</li>
 * <li>{@link #getLifecycleSupport lifecycleSupport} : boolean (default: false)</li>
 * <li>{@link #getStandardItemText standardItemText} : string</li>
 * <li>{@link #getIndustrySolutionMode industrySolutionMode} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Item[] (default)</li>
 * <li>{@link #getVariantItems variantItems} : sap.ui.comp.variants.VariantItem[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:save save} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:manage manage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
 * @param {object} [mSettings] Initial settings for the new control
 * @class The VariantManagement control can be used to manage variants, such as filter bar variants or table variants.
 * @extends sap.ui.core.Control
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.variants.VariantManagement = function(sId,mSettings) {};
/**
 * This event is fired when users apply changes to variants in the Manage Variants dialog.
 * @event
 * @since 1.22.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string[]} oControlEvent.getParameters.renamed List of changed variant keys
 * @param {string[]} oControlEvent.getParameters.deleted List of deleted variant keys
 * @param {object[]} oControlEvent.getParameters.exe List of variant keys and the associated Execute on Selection indicator
 * @param {boolean} oControlEvent.getParameters.def The default variant key
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.manage = function(oControlEvent) {  };

/**
 * This event is fired when the Save Variant dialog is closed with OK for a variant.
 * @event
 * @since 1.22.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.name The variant title
 * @param {boolean} oControlEvent.getParameters.overwrite Indicates if an existing variant is overwritten or if a new variant is created
 * @param {string} oControlEvent.getParameters.key The variant key
 * @param {boolean} oControlEvent.getParameters.exe The Execute on Selection indicator
 * @param {boolean} oControlEvent.getParameters.def The default variant indicator
 * @param {boolean} oControlEvent.getParameters.global The shared variant indicator
 * @param {string} oControlEvent.getParameters.lifecyclePackage The package name
 * @param {string} oControlEvent.getParameters.lifecycleTransportId The transport ID
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.save = function(oControlEvent) {  };

/**
 * This event is fired when a new variant is selected.
 * @event
 * @since 1.22.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.key The variant key
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.select = function(oControlEvent) {  };

/**
 * Adds some item to the aggregation {@link #getItems items}.
 * @param {sap.ui.core.Item}
 *            oItem the item to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22.0
 * @deprecated Since version 1.26.0. Replaced by association <code>variantItems</code>
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.addItem = function(oItem) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Adds some variantItem to the aggregation {@link #getVariantItems variantItems}.
 * @param {sap.ui.comp.variants.VariantItem}
 *            oVariantItem the variantItem to add; if empty, nothing is inserted
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.addVariantItem = function(oVariantItem) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:manage manage} event of this <code>sap.ui.comp.variants.VariantManagement</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.variants.VariantManagement</code> itself.
 * 
 * This event is fired when users apply changes to variants in the Manage Variants dialog.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.variants.VariantManagement</code> itself
 * 
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.22.0
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.attachManage = function(oData,fnFunction,oListener) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:save save} event of this <code>sap.ui.comp.variants.VariantManagement</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.variants.VariantManagement</code> itself.
 * 
 * This event is fired when the Save Variant dialog is closed with OK for a variant.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.variants.VariantManagement</code> itself
 * 
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.22.0
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.attachSave = function(oData,fnFunction,oListener) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:select select} event of this <code>sap.ui.comp.variants.VariantManagement</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.comp.variants.VariantManagement</code> itself.
 * 
 * This event is fired when a new variant is selected.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.comp.variants.VariantManagement</code> itself
 * 
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.22.0
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.attachSelect = function(oData,fnFunction,oListener) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Removes the current variant selection and resets to default value.
 * 
 * @public
 * @since 1.22.0
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.clearVariantSelection = function() {  };

/**
 * Gets the dirty flag of the current variant.
 * 
 * @public
 * @returns {boolean} The dirty state of the current variant
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.currentVariantGetModified = function() { return false; };

/**
 * Sets the dirty flag of the current variant.
 * 
 * @public
 * @param {boolean} bFlag The value indicating the dirty state of the current variant
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.currentVariantSetModified = function(bFlag) {  };

/**
 * Destroys all the items in the aggregation {@link #getItems items}.
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22.0
 * @deprecated Since version 1.26.0. Replaced by association <code>variantItems</code>
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.destroyItems = function() { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Destroys all the variantItems in the aggregation {@link #getVariantItems variantItems}.
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.destroyVariantItems = function() { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:manage manage} event of this <code>sap.ui.comp.variants.VariantManagement</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.detachManage = function(fnFunction,oListener) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:save save} event of this <code>sap.ui.comp.variants.VariantManagement</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.detachSave = function(fnFunction,oListener) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:select select} event of this <code>sap.ui.comp.variants.VariantManagement</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.detachSelect = function(fnFunction,oListener) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Creates a new subclass of class sap.ui.comp.variants.VariantManagement with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.comp.variants.VariantManagement.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:manage manage} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string[]} [mParameters.renamed] List of changed variant keys
 * @param {string[]} [mParameters.deleted] List of deleted variant keys
 * @param {object[]} [mParameters.exe] List of variant keys and the associated Execute on Selection indicator
 * @param {boolean} [mParameters.def] The default variant key
 * 
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.22.0
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.fireManage = function(mParameters) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Fires event {@link #event:save save} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.name] The variant title
 * @param {boolean} [mParameters.overwrite] Indicates if an existing variant is overwritten or if a new variant is created
 * @param {string} [mParameters.key] The variant key
 * @param {boolean} [mParameters.exe] The Execute on Selection indicator
 * @param {boolean} [mParameters.def] The default variant indicator
 * @param {boolean} [mParameters.global] The shared variant indicator
 * @param {string} [mParameters.lifecyclePackage] The package name
 * @param {string} [mParameters.lifecycleTransportId] The transport ID
 * 
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.22.0
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.fireSave = function(mParameters) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Fires event {@link #event:select select} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string} [mParameters.key] The variant key
 * 
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.22.0
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.fireSelect = function(mParameters) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Gets current value of property {@link #getDefaultVariantKey defaultVariantKey}.
 * 
 * Provides a string value to set the default variant. Used for the save dialog. Has no effect on the selected variant.
 * 
 * @returns {string} Value of property <code>defaultVariantKey</code>
 * @since 1.22.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.getDefaultVariantKey = function() { return ""; };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Can be set to true or false depending on whether you want to enable or disable the control.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * @since 1.22.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.getEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getIndustrySolutionMode industrySolutionMode}.
 * 
 * If set to<code>true</code>, the scenario is an industry-specific solution. This flag is only used internally in the app variant
 * scenarios.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>industrySolutionMode</code>
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.getIndustrySolutionMode = function() { return false; };

/**
 * Gets current value of property {@link #getInitialSelectionKey initialSelectionKey}.
 * 
 * Enables the setting of the initially selected variant.
 * 
 * @returns {string} Value of property <code>initialSelectionKey</code>
 * @since 1.22.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.getInitialSelectionKey = function() { return ""; };

/**
 * Gets content of aggregation {@link #getItems items}.
 * 
 * Items displayed by the <code>VariantManagement</code> control.
 * 
 * @returns {sap.ui.core.Item[]}
 * @since 1.22.0
 * @deprecated Since version 1.26.0. Replaced by association <code>variantItems</code>
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.getItems = function() { return new Array(); };

/**
 * Gets current value of property {@link #getLifecycleSupport lifecycleSupport}.
 * 
 * Enables the lifecycle support. If set to true, the VariantManagement control handles the transport information for shared variants.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>lifecycleSupport</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.getLifecycleSupport = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.comp.variants.VariantManagement.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.comp.variants.VariantManagement.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSelectionKey selectionKey}.
 * 
 * The key of the currently selected item. Returns null if the default item list is selected.
 * 
 * @returns {string} Value of property <code>selectionKey</code>
 * @since 1.24.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.getSelectionKey = function() { return ""; };

/**
 * Gets current value of property {@link #getShowCreateTile showCreateTile}.
 * 
 * Indicates that a Create Tile is visible in the Create dialog.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showCreateTile</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.getShowCreateTile = function() { return false; };

/**
 * Gets current value of property {@link #getShowExecuteOnSelection showExecuteOnSelection}.
 * 
 * Indicates that Execute on Selection is visible in the Save Variant and the Manage Variants dialogs.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showExecuteOnSelection</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.getShowExecuteOnSelection = function() { return false; };

/**
 * Gets current value of property {@link #getShowSetAsDefault showSetAsDefault}.
 * 
 * Indicates that set as default is visible in the Save Variant and the Manage Variants dialogs.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>showSetAsDefault</code>
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.getShowSetAsDefault = function() { return false; };

/**
 * Gets current value of property {@link #getShowShare showShare}.
 * 
 * Indicates that Share is visible in the Save Variant and the Manage Variants dialogs. Share allows you to share variants with other
 * users.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>showShare</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.getShowShare = function() { return false; };

/**
 * Gets current value of property {@link #getStandardItemText standardItemText}.
 * 
 * Overwrites the default Standard variant title.
 * 
 * @returns {string} Value of property <code>standardItemText</code>
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.getStandardItemText = function() { return ""; };

/**
 * Gets content of aggregation {@link #getVariantItems variantItems}.
 * 
 * Variant items displayed by the <code>VariantManagement</code> control.
 * 
 * @returns {sap.ui.comp.variants.VariantItem[]}
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.getVariantItems = function() { return new Array(); };

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation {@link #getItems items}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Item}
 *           oItem The item whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.22.0
 * @deprecated Since version 1.26.0. Replaced by association <code>variantItems</code>
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.indexOfItem = function(oItem) { return 0; };

/**
 * Checks for the provided <code>sap.ui.comp.variants.VariantItem</code> in the aggregation {@link #getVariantItems variantItems}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.comp.variants.VariantItem}
 *           oVariantItem The variantItem whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.indexOfVariantItem = function(oVariantItem) { return 0; };

/**
 * Inserts a item into the aggregation {@link #getItems items}.
 * 
 * @param {sap.ui.core.Item}
 *            oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the item should be inserted at; for
 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the item is inserted at
 *              the last position
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22.0
 * @deprecated Since version 1.26.0. Replaced by association <code>variantItems</code>
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.insertItem = function(oItem,iIndex) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Inserts a variantItem into the aggregation {@link #getVariantItems variantItems}.
 * 
 * @param {sap.ui.comp.variants.VariantItem}
 *            oVariantItem the variantItem to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the variantItem should be inserted at; for
 *              a negative value of <code>iIndex</code>, the variantItem is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the variantItem is inserted at
 *              the last position
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.insertVariantItem = function(oVariantItem,iIndex) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Removes all the controls from the aggregation {@link #getItems items}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Item[]} An array of the removed elements (might be empty)
 * @since 1.22.0
 * @deprecated Since version 1.26.0. Replaced by association <code>variantItems</code>
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.removeAllItems = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getVariantItems variantItems}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.comp.variants.VariantItem[]} An array of the removed elements (might be empty)
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.removeAllVariantItems = function() { return new Array(); };

/**
 * Removes a item from the aggregation {@link #getItems items}.
 * 
 * @param {int | string | sap.ui.core.Item} vItem The item to remove or its index or id
 * @returns {sap.ui.core.Item} The removed item or <code>null</code>
 * @since 1.22.0
 * @deprecated Since version 1.26.0. Replaced by association <code>variantItems</code>
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.removeItem = function(vItem) { return new sap.ui.core.Item(); };

/**
 * Removes a variantItem from the aggregation {@link #getVariantItems variantItems}.
 * 
 * @param {int | string | sap.ui.comp.variants.VariantItem} vVariantItem The variantItem to remove or its index or id
 * @returns {sap.ui.comp.variants.VariantItem} The removed variantItem or <code>null</code>
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.removeVariantItem = function(vVariantItem) { return new sap.ui.comp.variants.VariantItem(); };

/**
 * Defines the internal mode. The VariantManagement is able to support two different modes:<br>
 * 1. the mode with standard entry displayed as 'Default' and<br>
 * 2. the mode with standard entry displayed as 'Standard'.<br>
 * The 'Default* display is the initial mode.<br>
 * <code>Note:</code> this method has to be executed, before any items are assigned to the VariantManagement control!
 * 
 * @public
 * @since 1.48.0
 * @param {boolean} bFlag defines the behavior: <code>true</code> new mode, otherwize 'old' mode.
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.setBackwardCompatibility = function(bFlag) {  };

/**
 * Sets a new value for property {@link #getDefaultVariantKey defaultVariantKey}.
 * 
 * Provides a string value to set the default variant. Used for the save dialog. Has no effect on the selected variant.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sDefaultVariantKey New value for property <code>defaultVariantKey</code>
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.setDefaultVariantKey = function(sDefaultVariantKey) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Can be set to true or false depending on whether you want to enable or disable the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.setEnabled = function(bEnabled) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Sets a new value for property {@link #getIndustrySolutionMode industrySolutionMode}.
 * 
 * If set to<code>true</code>, the scenario is an industry-specific solution. This flag is only used internally in the app variant
 * scenarios.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bIndustrySolutionMode New value for property <code>industrySolutionMode</code>
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.32.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.setIndustrySolutionMode = function(bIndustrySolutionMode) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Sets a new value for property {@link #getInitialSelectionKey initialSelectionKey}.
 * 
 * Enables the setting of the initially selected variant.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sInitialSelectionKey New value for property <code>initialSelectionKey</code>
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.22.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.setInitialSelectionKey = function(sInitialSelectionKey) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Sets a new value for property {@link #getLifecycleSupport lifecycleSupport}.
 * 
 * Enables the lifecycle support. If set to true, the VariantManagement control handles the transport information for shared variants.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bLifecycleSupport New value for property <code>lifecycleSupport</code>
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.setLifecycleSupport = function(bLifecycleSupport) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Sets a new value for property {@link #getSelectionKey selectionKey}.
 * 
 * The key of the currently selected item. Returns null if the default item list is selected.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sSelectionKey New value for property <code>selectionKey</code>
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.24.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.setSelectionKey = function(sSelectionKey) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Sets a new value for property {@link #getShowCreateTile showCreateTile}.
 * 
 * Indicates that a Create Tile is visible in the Create dialog.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowCreateTile New value for property <code>showCreateTile</code>
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.setShowCreateTile = function(bShowCreateTile) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Sets a new value for property {@link #getShowExecuteOnSelection showExecuteOnSelection}.
 * 
 * Indicates that Execute on Selection is visible in the Save Variant and the Manage Variants dialogs.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowExecuteOnSelection New value for property <code>showExecuteOnSelection</code>
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.setShowExecuteOnSelection = function(bShowExecuteOnSelection) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Sets a new value for property {@link #getShowSetAsDefault showSetAsDefault}.
 * 
 * Indicates that set as default is visible in the Save Variant and the Manage Variants dialogs.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bShowSetAsDefault New value for property <code>showSetAsDefault</code>
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.44.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.setShowSetAsDefault = function(bShowSetAsDefault) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Sets a new value for property {@link #getShowShare showShare}.
 * 
 * Indicates that Share is visible in the Save Variant and the Manage Variants dialogs. Share allows you to share variants with other
 * users.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bShowShare New value for property <code>showShare</code>
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.26.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.setShowShare = function(bShowShare) { return new sap.ui.comp.variants.VariantManagement(); };

/**
 * Sets a new value for property {@link #getStandardItemText standardItemText}.
 * 
 * Overwrites the default Standard variant title.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sStandardItemText New value for property <code>standardItemText</code>
 * @returns {sap.ui.comp.variants.VariantManagement} Reference to <code>this</code> in order to allow method chaining
 * @since 1.28.0
 * 
 * @public
 * 
 */
sap.ui.comp.variants.VariantManagement.prototype.setStandardItemText = function(sStandardItemText) { return new sap.ui.comp.variants.VariantManagement(); };

// ---- static fields of namespaces ---------------------------------------------------------------------

// ---- sap.ui.comp.navpopover.ChangeHandlerType --------------------------------------------------------------------------

/**
 * Change handler creating a change for an added link.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.ChangeHandlerType.addLink = "";

/**
 * Change handler creating a change for a moved link.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.ChangeHandlerType.moveLink = "";

/**
 * Change handler creating a change for a removed link.
 * 
 * @public
 * 
 */
sap.ui.comp.navpopover.ChangeHandlerType.removeLink = "";


// ---- sap.ui.comp.personalization.AggregationRole --------------------------------------------------------------------------

/**
 * Dimension role.
 * 
 * @public
 * 
 */
sap.ui.comp.personalization.AggregationRole.Dimension = "";

/**
 * Measure role.
 * 
 * @public
 * 
 */
sap.ui.comp.personalization.AggregationRole.Measure = "";

/**
 * Role which is neither dimension nor measure.
 * 
 * @public
 * 
 */
sap.ui.comp.personalization.AggregationRole.NotDimeasure = "";


// ---- sap.ui.comp.personalization.ChangeType --------------------------------------------------------------------------

/**
 * Change is applied to model but not applied to table
 * 
 * @public
 * 
 */
sap.ui.comp.personalization.ChangeType.ModelChanged = "";

/**
 * Change is applied to model and to table
 * 
 * @public
 * 
 */
sap.ui.comp.personalization.ChangeType.TableChanged = "";

/**
 * Not changed
 * 
 * @public
 * 
 */
sap.ui.comp.personalization.ChangeType.Unchanged = "";


// ---- sap.ui.comp.personalization.ResetType --------------------------------------------------------------------------

/**
 * Reset back to Restore (i.e. the version of the table with which the controller was instantiated or via setter updated) was triggered
 * (either via API or via reset button)
 * 
 * @public
 * 
 */
sap.ui.comp.personalization.ResetType.ResetFull = "";

/**
 * Reset back to the CurrentVariant was triggered
 * 
 * @public
 * 
 */
sap.ui.comp.personalization.ResetType.ResetPartial = "";


// ---- sap.ui.comp.personalization.TableType --------------------------------------------------------------------------

/**
 * Represents <code>sap.ui.table.AnalyticalTable</code>.
 * 
 * @public
 * 
 */
sap.ui.comp.personalization.TableType.AnalyticalTable = "";

/**
 * Represents <code>sap.ui.comp.personalization.ChartWrapper</code>.
 * 
 * @public
 * 
 */
sap.ui.comp.personalization.TableType.ChartWrapper = "";

/**
 * Represents <code>sap.m.Table</code>.
 * 
 * @public
 * 
 */
sap.ui.comp.personalization.TableType.ResponsiveTable = "";

/**
 * Represents <code>sap.ui.comp.personalization.SelectionWrapper</code>.
 * 
 * @public
 * 
 */
sap.ui.comp.personalization.TableType.SelectionWrapper = "";

/**
 * Represents <code>sap.ui.table.Table</code>.
 * 
 * @public
 * 
 */
sap.ui.comp.personalization.TableType.Table = "";

/**
 * Represents <code>sap.ui.table.TreeTable</code>.
 * 
 * @public
 * 
 */
sap.ui.comp.personalization.TableType.TreeTable = "";


// ---- sap.ui.comp.smartfield.ControlContextType --------------------------------------------------------------------------

/**
 * Behaves currently exactly like <code>sap.ui.comp.smartfield.ControlContextType.None</code>.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlContextType.Form = "";

/**
 * No special context is selected. The Smart Field applies its internal defaults.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlContextType.None = "";

/**
 * Also the UoM layout is influenced.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlContextType.ResponsiveTable = "";

/**
 * If this is selected the UoM layout is influenced.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlContextType.SmartFormGrid = "";

/**
 * If this is selected the UoM layout is influenced.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlContextType.Table = "";


// ---- sap.ui.comp.smartfield.ControlProposalType --------------------------------------------------------------------------

/**
 * No special context is selected. The Smart Field applies its internal defaults.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlProposalType.None = "";

/**
 * If this is selected, the sap.m.ObjectIdentifier control is used to display IDs, if they are not editable. The current OData property is
 * assumed to have a text annotation. Otherwise the configuration is ignored.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlProposalType.ObjectIdentifier = "";

/**
 * If this is selected, the sap.m.ObjectNumber control is used to display units of measure. If the value property of the Smart Field is not
 * bound to a unit of measure, the property is ignored.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlProposalType.ObjectNumber = "";


// ---- sap.ui.comp.smartfield.ControlType --------------------------------------------------------------------------

/**
 * The SmartField chooses the control.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlType.auto = "";

/**
 * The SmartField displays a check box.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlType.checkBox = "";

/**
 * The SmartField displays a date picker.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlType.datePicker = "";

/**
 * The SmartField uses a drop down list box.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlType.dropDownList = "";

/**
 * The SmartField displays an input field.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlType.input = "";

/**
 * The SmartField displays a <code>sap.m.Selection</code>.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.ControlType.selection = "";


// ---- sap.ui.comp.smartfield.CriticalityRepresentationType --------------------------------------------------------------------------

/**
 * If this is selected, the sap.m.ObjectStatus control visualizes the criticality using an icon.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.CriticalityRepresentationType.WithIcon = "";

/**
 * If this is selected, the sap.m.ObjectStatus control does not visualize the criticality using an icon.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.CriticalityRepresentationType.WithoutIcon = "";


// ---- sap.ui.comp.smartfield.DisplayBehaviour --------------------------------------------------------------------------

/**
 * The SmartField chooses the display behavior.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.DisplayBehaviour.auto = "";

/**
 * Description and ID are displayed for available values.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.DisplayBehaviour.descriptionAndId = "";

/**
 * Only the description of the available values is displayed.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.DisplayBehaviour.descriptionOnly = "";

/**
 * ID and description are displayed for available values.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.DisplayBehaviour.idAndDescription = "";

/**
 * Shows the ID only.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.DisplayBehaviour.idOnly = "";

/**
 * Shows Boolean value as On/Off
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.DisplayBehaviour.OnOff = "";

/**
 * Shows Boolean value as True/False
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.DisplayBehaviour.TrueFalse = "";

/**
 * Shows Boolean value as Yes/No
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.DisplayBehaviour.YesNo = "";


// ---- sap.ui.comp.smartfield.JSONType --------------------------------------------------------------------------

/**
 * Boolean Type
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.JSONType.Boolean = "";

/**
 * The JavaScript Date Object
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.JSONType.Date = "";

/**
 * Date Time Type
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.JSONType.DateTime = "";

/**
 * Float type
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.JSONType.Float = "";

/**
 * Integer type
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.JSONType.Integer = "";

/**
 * The JavaScript primary type String
 * 
 * @public
 * 
 */
sap.ui.comp.smartfield.JSONType.String = "";


// ---- sap.ui.comp.smartfilterbar.ControlType --------------------------------------------------------------------------

/**
 * Shows field based on metadata.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlType.auto = "";

/**
 * Shows a date picker field.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlType.date = "";

/**
 * Shows a drop down list field.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlType.dropDownList = "";

/**
 * Shows an input field.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.ControlType.input = "";


// ---- sap.ui.comp.smartfilterbar.DisplayBehaviour --------------------------------------------------------------------------

/**
 * Shows values based on metadata.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.DisplayBehaviour.auto = "";

/**
 * Shows description and then an id in values.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.DisplayBehaviour.descriptionAndId = "";

/**
 * Shows only the description for values.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.DisplayBehaviour.descriptionOnly = "";

/**
 * Shows id and then a description in values.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.DisplayBehaviour.idAndDescription = "";

/**
 * Shows only the id for values.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.DisplayBehaviour.idOnly = "";


// ---- sap.ui.comp.smartfilterbar.FilterType --------------------------------------------------------------------------

/**
 * Restrict filter based on metadata.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.FilterType.auto = "";

/**
 * Restrict filter to an interval.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.FilterType.interval = "";

/**
 * Restrict filter to multiple entries.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.FilterType.multiple = "";

/**
 * Restrict filter to a single entry.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.FilterType.single = "";


// ---- sap.ui.comp.smartfilterbar.MandatoryType --------------------------------------------------------------------------

/**
 * Shows values based on metadata.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.MandatoryType.auto = "";

/**
 * Shows field as mandatory.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.MandatoryType.mandatory = "";

/**
 * Shows field as not mandatory.
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.MandatoryType.notMandatory = "";


// ---- sap.ui.comp.smartfilterbar.SelectOptionSign --------------------------------------------------------------------------

/**
 * Sign Exclude
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SelectOptionSign.E = "";

/**
 * Sign Exclude
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SelectOptionSign.exclude = "";

/**
 * Sign Include
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SelectOptionSign.I = "";

/**
 * Sign Include
 * 
 * @public
 * 
 */
sap.ui.comp.smartfilterbar.SelectOptionSign.include = "";


// ---- sap.ui.comp.smartlist.ListType --------------------------------------------------------------------------

/**
 * A list (sap.m.List) control shall be created as the content of the SmartList, if no list already exists (default)
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.ListType.List = "";

/**
 * A tree (sap.m.Tree) control shall be created as the content of the SmartList, if no list/tree already exists
 * 
 * @public
 * 
 */
sap.ui.comp.smartlist.ListType.Tree = "";


// ---- sap.ui.comp.smarttable.TableType --------------------------------------------------------------------------

/**
 * An analytical table (sap.ui.table.AnalyticalTable) control shall be created as the content of the SmartTable, if no table already exists
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.TableType.AnalyticalTable = "";

/**
 * A responsive table (sap.m.Table) control that can be used on mobile devices shall be created as the content of the SmartTable, if no table
 * already exists
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.TableType.ResponsiveTable = "";

/**
 * A table (sap.ui.table.Table) control shall be created as the content of the SmartTable, if no table already exists (default)
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.TableType.Table = "";

/**
 * A tree table (sap.ui.table.TreeTable) control shall be created as the content of the SmartTable, if no table already exists
 * 
 * @public
 * 
 */
sap.ui.comp.smarttable.TableType.TreeTable = "";


// ---- sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation --------------------------------------------------------------------------

/**
 * The Between operation for the ranges.
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT = "";

/**
 * The Contains operation for the ranges.
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.Contains = "";

/**
 * The EndsWith operation for the ranges.
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EndsWith = "";

/**
 * The Equals operation for the ranges.
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.EQ = "";

/**
 * The Between or equals operation for the ranges.
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.GE = "";

/**
 * The Greater operation for the ranges.
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.GT = "";

/**
 * The Less or equals operation for the ranges.
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.LE = "";

/**
 * The Less operation for the ranges.
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.LT = "";

/**
 * The StartsWith operation for the ranges.
 * 
 * @public
 * 
 */
sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.StartsWith = "";

