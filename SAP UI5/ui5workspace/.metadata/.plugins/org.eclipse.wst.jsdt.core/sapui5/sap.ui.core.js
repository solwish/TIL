
// ---- jQuery --------------------------------------------------------------------------

/**
 * Adds the given ID reference to the aria-describedby attribute.
 * 
 * @param {string} sID The ID reference of an element
 * @param {boolean} [bPrepend=false] whether prepend or not
 * @return {jQuery} <code>this</code> to allow method chaining.
 * @public
 * @since 1.30.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.addAriaDescribedBy = function(sID,bPrepend) { return null; };

/**
 * Adds the given ID reference to the the aria-labelledby attribute.
 * 
 * @param {string} sID The ID reference of an element
 * @param {boolean} [bPrepend=false] whether prepend or not
 * @return {jQuery} <code>this</code> to allow method chaining.
 * @public
 * @since 1.30.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.addAriaLabelledBy = function(sID,bPrepend) { return null; };

/**
 * Extension function to the jQuery.fn which identifies SAPUI5 controls in the given jQuery context.
 * 
 * @param {int} [idx] optional parameter to return the control instance at the given idx's position in the array.
 * @returns {sap.ui.core.Control[] | sap.ui.core.Control | null} depending on the given context and idx parameter an array of controls, an instance or null.
 * @public
 * 
 * @memberof jQuery
 */
jQuery.prototype.control = function(idx) { return new Array(); };

/**
 * Sets or gets the position of the cursor in an element that supports cursor positioning
 * 
 * @param {int} iPos The cursor position to set (or no parameter to retrieve the cursor position)
 * @return {int | jQuery} The cursor position (or the jQuery collection if the position has been set)
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.cursorPos = function(iPos) { return 0; };

/**
 * Disable HTML elements selection.
 * 
 * @return {jQuery} <code>this</code> to allow method chaining.
 * @protected
 * @since 1.24.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.disableSelection = function() { return null; };

/**
 * Enable HTML elements to get selected.
 * 
 * @return {jQuery} <code>this</code> to allow method chaining.
 * @protected
 * @since 1.24.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.enableSelection = function() { return null; };

/**
 * Returns the first focusable domRef in a given container (the first element of the collection)
 * 
 * @return {Element} The domRef
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.firstFocusableDomRef = function() { return null; };

/**
 * Retrieve the selected text in the first element of the collection.
 * 
 * <b>Note</b>: This feature is only supported for input element’s type of text, search, url, tel and password.
 * 
 * @return {string} The selected text.
 * @public
 * @since 1.26.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.getSelectedText = function() { return ""; };

/**
 * Returns <code>true</code> if the first element has a set tabindex
 * 
 * @return {boolean} If the first element has a set tabindex
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.hasTabIndex = function() { return false; };

/**
 * Returns the last focusable domRef in a given container
 * 
 * @return {Element} The last domRef
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.lastFocusableDomRef = function() { return null; };

/**
 * Returns the outer HTML of the given HTML element
 * 
 * @return {string} outer HTML
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.outerHTML = function() { return ""; };

/**
 * Gets the next parent DOM element with a given attribute and attribute value starting above the first given element
 * 
 * @param {string} sAttribute Name of the attribute
 * @param {string} sValue Value of the attribute (optional)
 * @return {Element} null or the DOM reference
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.parentByAttribute = function(sAttribute,sValue) { return null; };

/**
 * Returns a rectangle describing the current visual positioning of the first DOM object in the collection
 * (or <code>null</code> if no element was given)
 * 
 * @return {object} An object with left, top, width and height
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.rect = function() { return new Object(); };

/**
 * Returns whether a point described by X and Y is inside this Rectangle's boundaries
 * 
 * @param {int} iPosX
 * @param {int} iPosY
 * @return {boolean} Whether X and Y are inside this Rectangle's boundaries
 * @public
 * @since 0.18.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.rectContains = function(iPosX,iPosY) { return false; };

/**
 * Removes the given ID reference from the aria-describedby attribute.
 * 
 * @param {string} sID The ID reference of an element
 * @return {jQuery} <code>this</code> to allow method chaining.
 * @public
 * @since 1.30.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.removeAriaDescribedBy = function(sID) { return null; };

/**
 * Removes the given ID reference from the aria-labelledby attribute.
 * 
 * @param {string} sID The ID reference of an element
 * @return {jQuery} <code>this</code> to allow method chaining.
 * @public
 * @since 1.30.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.removeAriaLabelledBy = function(sID) { return null; };

/**
 * @param {object} oRootControl
 * @public
 * 
 * @memberof jQuery
 */
jQuery.prototype.root = function(oRootControl) {  };

/**
 * Sets or returns the scrollLeft value of the first element in the given jQuery collection in right-to-left mode.
 * Precondition: The element is rendered in RTL mode.
 * 
 * Reason for this method is that the major browsers use three different values for the same scroll position when in RTL mode.
 * This method hides those differences and returns/applies the same value that would be returned in LTR mode: The distance in px
 * how far the given container is scrolled away from the leftmost scroll position.
 * 
 * Returns "undefined" if no element and no iPos is given.
 * 
 * @param {int} iPos
 * @return {jQuery | int} The jQuery collection if iPos is given, otherwise the scroll position, counted from the leftmost position
 * @public
 * @since 0.20.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.scrollLeftRTL = function(iPos) { return null; };

/**
 * Returns the MIRRORED scrollLeft value of the first element in the given jQuery collection in right-to-left mode.
 * Precondition: The element is rendered in RTL mode.
 * 
 * Reason for this method is that the major browsers return three different values for the same scroll position when in RTL mode.
 * This method hides those differences and returns the value that would be returned in LTR mode if the UI would be mirrored horizontally:
 * The distance in px how far the given container is scrolled away from the rightmost scroll position.
 * 
 * Returns "undefined" if no element is given.
 * 
 * @return {int} The scroll position, counted from the rightmost position
 * @public
 * @since 0.20.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.scrollRightRTL = function() { return 0; };

/**
 * Sets the text selection in the first element of the collection.
 * 
 * <b>Note</b>: This feature is only supported for input element’s type of text, search, url, tel and password.
 * 
 * @param {int} iStart Start position of the selection (inclusive)
 * @param {int} iEnd End position of the selection (exclusive)
 * @return {jQuery} The jQuery collection
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery
 */
jQuery.prototype.selectText = function(iStart,iEnd) { return null; };

/**
 * @param {int} iIdx
 * @public
 * 
 * @memberof jQuery
 */
jQuery.prototype.uiarea = function(iIdx) {  };


// ---- jQuery.device --------------------------------------------------------------------------


// ---- jQuery.device.is --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.device.is.toString = function() { return ""; };

// ---- jQuery.Event --------------------------------------------------------------------------

/**
 * Constructor for a jQuery.Event object.<br/>
 * See "http://www.jquery.com" and "http://api.jquery.com/category/events/event-object/".
 * 
 * @class Check the jQuery.Event class documentation available under "http://www.jquery.com"<br/>
 * and "http://api.jquery.com/category/events/event-object/" for details.
 * @public
 * 
 */
jQuery.Event = function() {};
/**
 * Returns OffsetX of Event. In jQuery there is a bug. In IE the value is in offsetX, in FF in layerX
 * 
 * @returns {int} offsetX
 * @public
 * 
 */
jQuery.Event.prototype.getOffsetX = function() { return 0; };

/**
 * Returns OffsetY of Event. In jQuery there is a bug. in IE the value is in offsetY, in FF in layerY.
 * 
 * @returns {int} offsetY
 * @public
 * 
 */
jQuery.Event.prototype.getOffsetY = function() { return 0; };

/**
 * Returns an array of names (as strings) identifying {@link jQuery.sap.PseudoEvents} that are fulfilled by this very Event instance.
 * 
 * @returns {String[]} Array of names identifying {@link jQuery.sap.PseudoEvents} that are fulfilled by this very Event instance.
 * @public
 * 
 */
jQuery.Event.prototype.getPseudoTypes = function() { return new Array(); };

/**
 * Checks whether this instance of {@link jQuery.Event} is of the given <code>sType</code> pseudo type.
 * 
 * @param {string} sType The name of the pseudo type this event should be checked for.
 * @returns {boolean} <code>true</code> if this instance of jQuery.Event is of the given sType, <code>false</code> otherwise.
 * @public
 * 
 */
jQuery.Event.prototype.isPseudoType = function(sType) { return false; };


// ---- jQuery.os --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.os.toString = function() { return ""; };

// ---- jQuery.sap --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.sap.toString = function() { return ""; };
/**
 * Loads the given Javascript resource (URN) asynchronously via as script tag.
 * Returns a promise that will be resolved when the load event is fired or reject
 * when the error event is fired.
 * 
 * Note: execution errors of the script are not reported as 'error'.
 * 
 * This method is not a full implementation of require. It is intended only for
 * loading "preload" files that do not define an own module / module value.
 * 
 * Functionality might be removed/renamed in future, so no code outside the
 * sap.ui.core library must use it.
 * 
 * @experimental
 * @private
 * @sap-restricted sap.ui.core,sap.ushell
 * 
 * @memberof jQuery.sap
 */
jQuery.sap._loadJSResourceAsync = function() {  };

/**
 * Adds a whitelist entry for URL validation.
 * 
 * @param {string} protocol The protocol of the URL
 * @param {string} host The host of the URL
 * @param {string} port The port of the URL
 * @param {string} path the path of the URL
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.addUrlWhitelist = function(protocol,host,port,path) {  };

/**
 * Calculate delta of old list and new list.
 * 
 * This partly implements the algorithm described in "A Technique for Isolating Differences Between Files"
 * but instead of working with hashes, it does compare each entry of the old list with each entry of the new
 * list, which causes terrible performane on large datasets.
 * 
 * @deprecated As of 1.38, use {@link jQuery.sap.arraySymbolDiff} instead if applicable
 * @public
 * @param {Array} aOld Old Array
 * @param {Array} aNew New Array
 * @param {function} [fnCompare] Function to compare list entries
 * @param {boolean} [bUniqueEntries] Whether entries are unique, so no duplicate entries exist
 * @return {Array} List of changes
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.arrayDiff = function(aOld,aNew,fnCompare,bUniqueEntries) { return null; };

/**
 * Calculate delta of old list and new list.
 * 
 * This function implements the algorithm described in "A Technique for Isolating Differences Between Files"
 * (Commun. ACM, April 1978, Volume 21, Number 4, Pages 264-268).
 * 
 * Items in the arrays are not compared directly. Instead, a substitute symbol is determined for each item
 * by applying the provided function <code>fnSymbol</code> to it. Items with strictly equal symbols are
 * assumed to represent the same logical item:
 * <pre>
 *   fnSymbol(a) === fnSymbol(b)   <=>   a 'is logically the same as' b
 * </pre>
 * As an additional constraint, casting the symbols to string should not modify the comparison result.
 * If this second constraint is not met, this method might report more diffs than necessary.
 * 
 * If no symbol function is provided, a default implementation is used which applies <code>JSON.stringify</code>
 * to non-string items and reduces the strings to a hash code. It is not guaranteed that this default
 * implementation fulfills the above constraint in all cases, but it is a compromise between implementation
 * effort, generality and performance. If items are known to be non-stringifiable (e.g. because they may
 * contain cyclic references) or when hash collisions are likely, an own <code>fnSymbol</code> function
 * must be provided.
 * 
 * The result of the diff is a sequence of update operations, each consisting of a <code>type</code>
 * (either <code>"insert"</code> or <code>"delete"</code>) and an <code>index</code>.
 * By applying the operations one after the other to the old array, it can be transformed to an
 * array whose items are equal to the new array.
 * 
 * Sample implementation of the update
 * <pre>
 * 
 *  function update(aOldArray, aNewArray) {
 * 
 *    // calculate the diff
 *    var aDiff = jQuery.sap.arraySymbolDiff(aOldArray, aNewArray, __provide_your_symbol_function_here__);
 * 
 *    // apply update operations
 *    aDiff.forEach( function(op) {
 * 
 *      // invariant: aOldArray and aNewArray now are equal up to (excluding) op.index
 * 
 *      switch ( op.type ) {
 *      case 'insert':
 *        // new array contains a new (or otherwise unmapped) item, add it here
 *        aOldArray.splice(op.index, 0, aNewArray[op.index]);
 *        break;
 *      case 'delete':
 *        // an item is no longer part of the array (or has been moved to another position), remove it
 *        aOldArray.splice(op.index, 1);
 *        break;
 *      default:
 *        throw new Error('unexpected diff operation type');
 *      }
 * 
 *    });
 *  }
 * 
 * </pre>
 * 
 * @param {Array} aOld Old Array
 * @param {Array} aNew New Array
 * @param {function} [fnSymbol] Function to calculate substitute symbols for array items
 * @return {Array.<{type:string,index:int}>} List of update operations
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.arraySymbolDiff = function(aOld,aNew,fnSymbol) { return new Array(); };

/**
 * A simple assertion mechanism that logs a message when a given condition is not met.
 * 
 * <b>Note:</b> Calls to this method might be removed when the JavaScript code
 *              is optimized during build. Therefore, callers should not rely on any side effects
 *              of this method.
 * 
 * @param {boolean} bResult Result of the checked assertion
 * @param {string|function} vMessage Message that will be logged when the result is <code>false</code>. In case this is a function, the return value of the function will be displayed. This can be used to execute complex code only if the assertion fails.
 * 
 * @public
 * @static
 * @SecSink {1|SECRET} Could expose secret data in logs
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.assert = function(bResult,vMessage) {  };

/**
 * Binds all events for listening with the given callback function.
 * 
 * @param {function} fnCallback Callback function
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.bindAnyEvent = function(fnCallback) {  };

/**
 * Shortcut for jQuery("#" + id) with additionally the id being escaped properly.
 * I.e.: returns the jQuery object for the DOM element with the given id
 * 
 * Use this method instead of jQuery(...) if you know the argument is exactly one id and
 * the id is not known in advance because it is in a variable (as opposed to a string
 * constant with known content).
 * 
 * @param {string} sId The id to search for and construct the jQuery object
 * @param {Element} oContext the context DOM Element
 * @return {Object} The jQuery object for the DOM element identified by the given sId
 * @public
 * @since 0.9.1
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.byId = function(sId,oContext) { return null; };

/**
 * Transforms a hyphen separated string to a camel case string.
 * 
 * @param {string} sString Hyphen separated string
 * @returns {string} The transformed string
 * @since 1.7.0
 * @public
 * @SecPassthrough {0|return}
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.camelCase = function(sString) { return ""; };

/**
 * Converts one character of the string to upper case, at a given position.
 * 
 * If no position is given or when it is negative or beyond the last character
 * of <code>sString</code>, then the first character will be converted to upper case.
 * The first character position is 0.
 * 
 * @param {string} sString String for which one character should be converted
 * @param {int} iPos Position of the character that should be converted
 * @returns {string} String with the converted character
 * @public
 * @SecPassthrough {0|return}
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.charToUpperCase = function(sString,iPos) { return ""; };

/**
 * Checks a given mouseover or mouseout event whether it is
 * equivalent to a mouseenter or mousleave event regarding the given DOM reference.
 * 
 * @param {jQuery.Event} oEvent
 * @param {Element} oDomRef
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.checkMouseEnterOrLeave = function(oEvent,oDomRef) {  };

/**
 * Stops the delayed call.
 * 
 * The function given when calling delayedCall is not called anymore.
 * 
 * @param {string} sDelayedCallId The id returned, when calling delayedCall
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.clearDelayedCall = function(sDelayedCallId) {  };

/**
 * Stops the interval call.
 * 
 * The function given when calling intervalCall is not called anymore.
 * 
 * @param {string} sIntervalCallId The id returned, when calling intervalCall
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.clearIntervalCall = function(sIntervalCallId) {  };

/**
 * Clears the whitelist for URL validation
 * 
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.clearUrlWhitelist = function() {  };

/**
 * Returns whether <code>oDomRefChild</code> is contained in or equal to <code>oDomRefContainer</code>.
 * 
 * This is a browser-independent version of the .contains method of Internet Explorer.
 * For compatibility reasons it returns <code>true</code> if <code>oDomRefContainer</code> and
 * <code>oDomRefChild</code> are equal.
 * 
 * This method intentionally does not operate on the jQuery object, as the original <code>jQuery.contains()</code>
 * method also does not do so.
 * 
 * @param {Element} oDomRefContainer The container element
 * @param {Element} oDomRefChild The child element (must not be a text node, must be an element)
 * @return {boolean} Whether <code>oDomRefChild</code> is contained in or equal to <code>oDomRefContainer</code>
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.containsOrEquals = function(oDomRefContainer,oDomRefChild) { return false; };

/**
 * Declares a module as existing.
 * 
 * By default, this function assumes that the module will create a JavaScript object
 * with the same name as the module. As a convenience it ensures that the parent
 * namespace for that object exists (by calling jQuery.sap.getObject).
 * If such an object creation is not desired, <code>bCreateNamespace</code> must be set to false.
 * 
 * @param {string | object}  sModuleName name of the module to be declared
 *                           or in case of an object {modName: "...", type: "..."}
 *                           where modName is the name of the module and the type
 *                           could be a specific dot separated extension e.g.
 *                           <code>{modName: "sap.ui.core.Dev", type: "view"}</code>
 *                           loads <code>sap/ui/core/Dev.view.js</code> and
 *                           registers as <code>sap.ui.core.Dev.view</code>
 * @param {boolean} [bCreateNamespace=true] whether to create the parent namespace
 * 
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.declare = function(sModuleName,bCreateNamespace) {  };

/**
 * Calls a method after a given delay and returns an id for this timer
 * 
 * @param {int} iDelay Delay time in milliseconds
 * @param {object} oObject Object from which the method should be called
 * @param {string|object} method function pointer or name of the method
 * @param {array} [aParameters] Method parameters
 * @return {string} Id which can be used to cancel the timer with clearDelayedCall
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.delayedCall = function(iDelay,oObject,method,aParameters) { return ""; };

/**
 * For the given scroll position measured from the "beginning" of a container (the right edge in RTL mode)
 * this method returns the scrollLeft value as understood by the current browser in RTL mode.
 * This value is specific to the given DOM element, as the computation may involve its dimensions.
 * 
 * So when oDomRef should be scrolled 2px from the beginning, the number "2" must be given as iNormalizedScrollBegin
 * and the result of this method (which may be a large or even negative number, depending on the browser) can then be set as
 * oDomRef.scrollLeft to achieve the desired (cross-browser-consistent) scrolling position.
 * Low values make the right part of the content visible, high values the left part.
 * 
 * This method does no scrolling on its own, it only calculates the value to set (so it can also be used for animations).
 * 
 * Only use this method in RTL mode, as the behavior in LTR mode is undefined and may change!
 * 
 * @param {int} iNormalizedScrollBegin The distance from the rightmost position to which the element should be scrolled
 * @param {Element} oDomRef The DOM Element to which scrollLeft will be applied
 * @return {int} The scroll position that must be set for the DOM element
 * @public
 * @since 1.26.1
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.denormalizeScrollBeginRTL = function(iNormalizedScrollBegin,oDomRef) { return 0; };

/**
 * For the given scrollLeft value this method returns the scrollLeft value as understood by the current browser in RTL mode.
 * This value is specific to the given DOM element, as the computation may involve its dimensions.
 * 
 * So when oDomRef should be scrolled 2px from the leftmost position, the number "2" must be given as iNormalizedScrollLeft
 * and the result of this method (which may be a large or even negative number, depending on the browser) can then be set as
 * oDomRef.scrollLeft to achieve the desired (cross-browser-consistent) scrolling position.
 * 
 * This method does no scrolling on its own, it only calculates the value to set (so it can also be used for animations).
 * 
 * @param {int} iNormalizedScrollLeft The distance from the leftmost position to which the element should be scrolled
 * @param {Element} oDomRef The DOM Element to which scrollLeft will be applied
 * @return {int} The scroll position that must be set for the DOM element
 * @public
 * @since 0.20.0
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.denormalizeScrollLeftRTL = function(iNormalizedScrollLeft,oDomRef) { return 0; };

/**
 * Disable touch to mouse handling
 * 
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.disableTouchToMouseHandling = function() {  };

/**
 * Shortcut for document.getElementById(), including a bug fix for older IE versions.
 * 
 * @param {string} sId The id of the DOM element to return
 * @param {Window} [oWindow=window] The window (optional)
 * @return {Element} The DOMNode identified by the given sId
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.domById = function(sId,oWindow) { return null; };

/**
 * Encode the string for inclusion into CSS string literals or identifiers
 * 
 * @param {string} sString The string to be escaped
 * @return The escaped string
 * @type {string}
 * @public
 * @SecValidate {0|return|XSS} validates the given string for a CSS context
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.encodeCSS = function(sString) { return ""; };

/**
 * Encode the string for inclusion into HTML content/attribute
 * 
 * @param {string} sString The string to be escaped
 * @return The escaped string
 * @type {string}
 * @public
 * @SecValidate {0|return|XSS} validates the given string for HTML contexts
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.encodeHTML = function(sString) { return ""; };

/**
 * Encode the string for inclusion into a JS string literal
 * 
 * @param {string} sString The string to be escaped
 * @return The escaped string
 * @type {string}
 * @public
 * @SecValidate {0|return|XSS} validates the given string for a JavaScript contexts
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.encodeJS = function(sString) { return ""; };

/**
 * Encode the string for inclusion into a URL parameter
 * 
 * @param {string} sString The string to be escaped
 * @return The escaped string
 * @type {string}
 * @public
 * @SecValidate {0|return|XSS} validates the given string for a URL context
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.encodeURL = function(sString) { return ""; };

/**
 * Encode a map of parameters into a combined URL parameter string
 * 
 * @param {object} mParams The map of parameters to encode
 * @return The URL encoded parameters
 * @type {string}
 * @public
 * @SecValidate {0|return|XSS} validates the given string for a CSS context
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.encodeURLParameters = function(mParams) { return ""; };

/**
 * Encode the string for inclusion into XML content/attribute
 * 
 * @param {string} sString The string to be escaped
 * @return The escaped string
 * @type {string}
 * @public
 * @SecValidate {0|return|XSS} validates the given string for XML contexts
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.encodeXML = function(sString) { return ""; };

/**
 * Checks whether a given <code>sString</code> ends with <code>sEndString</code>
 * respecting the case of the strings.
 * 
 * @param {string} sString String to be checked
 * @param {string} sEndString The end string to be searched
 * @returns {boolean} Whether <code>sString</code> ends with <code>sEndString</code>
 * @see jQuery.sap.endsWithIgnoreCase
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.endsWith = function(sString,sEndString) { return false; };

/**
 * Checks whether a given <code>sString</code> ends with <code>sEndString</code>
 * ignoring the case of the strings.
 * 
 * @param {string} sString String to be checked
 * @param {string} sEndString The end string to be searched
 * @returns {boolean} Whether <code>sString</code> ends with <code>sEndString</code>
 * @see jQuery.sap.endsWith
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.endsWithIgnoreCase = function(sString,sEndString) { return false; };

/**
 * Compares the two given values for equality, especially takes care not to compare
 * arrays and objects by reference, but compares their content.
 * Note: function does not work with comparing XML objects
 * 
 * @param {any} a A value of any type
 * @param {any} b A value of any type
 * @param {int} [maxDepth=10] Maximum recursion depth
 * @param {boolean} [contains] Whether all existing properties in a are equal as in b
 * 
 * @return {boolean} Whether a and b are equal
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.equal = function(a,b,maxDepth,contains) { return false; };

/**
 * Encode the string for inclusion into HTML content/attribute.
 * Old name "escapeHTML" kept for backward compatibility
 * 
 * @param {string} sString The string to be escaped
 * @return The escaped string
 * @type {string}
 * @public
 * @deprecated Has been renamed, use {@link jQuery.sap.encodeHTML} instead.
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.escapeHTML = function(sString) { return ""; };

/**
 * Encode the string for inclusion into a JS string literal.
 * Old name "escapeJS" kept for backward compatibility
 * 
 * @param {string} sString The string to be escaped
 * @return The escaped string
 * @type {string}
 * @public
 * @deprecated Since 1.3.0. Has been renamed, use {@link jQuery.sap.encodeJS} instead.
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.escapeJS = function(sString) { return ""; };

/**
 * Escapes all characters that would have a special meaning in a regular expression.
 * 
 * This method can be used when a string with arbitrary content has to be integrated
 * into a regular expression and when the whole string should match literally.
 * 
 * Example:
 * <pre>
 *   var text = "E=m*c^2"; // text to search
 *   var search = "m*c";   // text to search for
 * 
 *   text.match( new RegExp(                         search  ) ); // [ "c" ]
 *   text.match( new RegExp( jQuery.sap.escapeRegExp(search) ) ); // [ "m*c" ]
 * </pre>
 * 
 * @param {string} sString String to escape
 * @returns {string} The escaped string
 * @since 1.9.3
 * @public
 * @SecPassthrough {0|return}
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.escapeRegExp = function(sString) { return ""; };

/**
 * Returns a new constructor function that creates objects with
 * the given prototype.
 * 
 * As of 1.45.0, this method has been deprecated. Use the following code pattern instead:
 * <pre>
 *   function MyFunction() {
 *   };
 *   MyFunction.prototype = oPrototype;
 * </pre>
 * @param {object} oPrototype Prototype to use for the new objects
 * @return {function} the newly created constructor function
 * @public
 * @static
 * @deprecated As of 1.45.0, define your own function and assign <code>oPrototype</code> to its <code>prototype</code> property instead.
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.factory = function(oPrototype) { return function() {}; };

/**
 * Calls focus() on the given DOM element.
 * 
 * @param {Element} oDomRef The DOM element to focus (or null - in this case the method does nothing)
 * @return {boolean} Whether the focus() command was executed without an error
 * @public
 * @since 1.1.2
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.focus = function(oDomRef) { return false; };

/**
 * Creates a string from a pattern by replacing placeholders with concrete values.
 * 
 * The syntax of the pattern is inspired by (but not fully equivalent to) the
 * java.util.MessageFormat.
 * 
 * Placeholders have the form <code>{ integer }</code>, where any occurrence of
 * <code>{0}</code> is replaced by the value with index 0 in <code>aValues</code>,
 * <code>{1}</code> by the value with index 1 in <code>aValues</code> etc.
 * 
 * To avoid interpretation of curly braces as placeholders, any non-placeholder fragment
 * of the pattern can be enclosed in single quotes. The surrounding single quotes will be
 * omitted from the result. Single quotes that are not meant to escape a fragment and
 * that should appear in the result, need to be doubled. In the result, only a single
 * single quote will occur.
 * 
 * Example Pattern Strings:
 * <pre>
 *   jQuery.sap.formatMessage("Say {0}",     ["Hello"]) -> "Say Hello"    // normal use case
 *   jQuery.sap.formatMessage("Say '{0}'",   ["Hello"]) -> "Say {0}"      // escaped placeholder
 *   jQuery.sap.formatMessage("Say ''{0}''", ["Hello"]) -> "Say 'Hello'"  // doubled single quote
 *   jQuery.sap.formatMessage("Say '{0}'''", ["Hello"]) -> "Say {0}'"     // doubled single quote in quoted fragment
 * </pre>
 * 
 * In contrast to java.util.MessageFormat, format types or format styles are not supported.
 * Everything after the argument index and up to the first closing curly brace is ignored.
 * Nested placeholders (as supported by java.lang.MessageFormat for the format type choice)
 * are not ignored but reported as a parse error.
 * 
 * This method throws an Error when the pattern syntax is not fulfilled (e.g. unbalanced curly
 * braces, nested placeholders or a non-numerical argument index).
 * 
 * This method can also be used as a formatter within a binding. The first part of a composite binding
 * will be used as pattern, the following parts as aValues. If there is only one value and this
 * value is an array it will be handled like the default described above.
 * 
 * @param {string} sPattern A pattern string in the described syntax
 * @param {any[]} [aValues=[]] The values to be used instead of the placeholders.
 * 
 * @returns {string} The formatted result string
 * @since 1.12.5
 * @SecPassthrough {*|return}
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.formatMessage = function(sPattern,aValues) { return ""; };

/**
 * Returns the names of all declared modules.
 * @return {string[]} the names of all declared modules
 * @see jQuery.sap.isDeclared
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.getAllDeclaredModules = function() { return new Array(); };

/**
 * Constructs a URL to load the module with the given name and file type (suffix).
 * 
 * Searches the longest prefix of the given module name for which a registration
 * exists (see {@link jQuery.sap.registerModulePath}) and replaces that prefix
 * by the registered URL prefix.
 * 
 * The remainder of the module name is appended to the URL, replacing any dot with a slash.
 * 
 * Finally, the given suffix (typically a file name extension) is added (unconverted).
 * 
 * The returned name (without the suffix) doesn't end with a slash.
 * 
 * @param {string} sModuleName module name to detemrine the path for
 * @param {string} sSuffix suffix to be added to the resulting path
 * @return {string} calculated path (URL) to the given module
 * 
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.getModulePath = function(sModuleName,sSuffix) { return ""; };

/**
 * Returns a JavaScript object which is identified by a sequence of names.
 * 
 * A call to <code>getObject("a.b.C")</code> has essentially the same effect
 * as accessing <code>window.a.b.C</code> but with the difference that missing
 * intermediate objects (a or b in the example above) don't lead to an exception.
 * 
 * When the addressed object exists, it is simply returned. If it doesn't exists,
 * the behavior depends on the value of the second, optional parameter
 * <code>iNoCreates</code> (assuming 'n' to be the number of names in the name sequence):
 * <ul>
 * <li>NaN: if iNoCreates is not a number and the addressed object doesn't exist,
 *          then <code>getObject()</code> returns <code>undefined</code>.
 * <li>0 &lt; iNoCreates &lt; n: any non-existing intermediate object is created, except
 *          the <i>last</i> <code>iNoCreates</code> ones.
 * </ul>
 * 
 * Example:
 * <pre>
 *   getObject()            -- returns the context object (either param or window)
 *   getObject("a.b.C")     -- will only try to get a.b.C and return undefined if not found.
 *   getObject("a.b.C", 0)  -- will create a, b, and C in that order if they don't exists
 *   getObject("a.b.c", 1)  -- will create a and b, but not C.
 * </pre>
 * 
 * When a <code>oContext</code> is given, the search starts in that object.
 * Otherwise it starts in the <code>window</code> object that this plugin
 * has been created in.
 * 
 * Note: Although this method internally uses <code>object["key"]</code> to address object
 *       properties, it does not support all possible characters in a name.
 *       Especially the dot ('.') is not supported in the individual name segments,
 *       as it is always interpreted as a name separator.
 * 
 * @param {string} sName  a dot separated sequence of names that identify the required object
 * @param {int}    [iNoCreates=NaN] number of objects (from the right) that should not be created
 * @param {object} [oContext=window] the context to execute the search in
 * @returns {function} The value of the named object
 * 
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.getObject = function(sName,iNoCreates,oContext) { return function() {}; };

/**
 * Converts a UI5 module name to a unified resource name.
 * 
 * Used by View and Fragment APIs to convert a given module name into a unified resource name.
 * When the <code>sSuffix</code> is not given, the suffix '.js' is added. This fits the most
 * common use case of converting a module name to the Javascript resource that contains the
 * module. Note that an empty <code>sSuffix</code> is not replaced by '.js'. This allows to
 * convert UI5 module names to requireJS module names with a call to this method.
 * 
 * @param {string} sModuleName Module name as a dot separated name
 * @param {string} [sSuffix='.js'] Suffix to add to the final resource name
 * @private
 * @sap-restricted sap.ui.core
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.getResourceName = function(sModuleName,sSuffix) {  };

/**
 * Determines the URL for a resource given its unified resource name.
 * 
 * Searches the longest prefix of the given resource name for which a registration
 * exists (see {@link jQuery.sap.registerResourcePath}) and replaces that prefix
 * by the registered URL prefix.
 * 
 * The remainder of the resource name is appended to the URL.
 * 
 * <b>Unified Resource Names</b><br>
 * Several UI5 APIs use <i>Unified Resource Names (URNs)</i> as naming scheme for resources that
 * they deal with (e.h. Javascript, CSS, JSON, XML, ...). URNs are similar to the path
 * component of a URL:
 * <ul>
 * <li>they consist of a non-empty sequence of name segments</li>
 * <li>segments are separated by a forward slash '/'</li>
 * <li>name segments consist of URL path segment characters only. It is recommended to use only ASCII
 * letters (upper or lower case), digits and the special characters '$', '_', '-', '.')</li>
 * <li>the empty name segment is not supported</li>
 * <li>names consisting of dots only, are reserved and must not be used for resources</li>
 * <li>names are case sensitive although the underlying server might be case-insensitive</li>
 * <li>the behavior with regard to URL encoded characters is not specified, %ddd notation should be avoided</li>
 * <li>the meaning of a leading slash is undefined, but might be defined in future. It therefore should be avoided</li>
 * </ul>
 * 
 * UI5 APIs that only deal with Javascript resources, use a slight variation of this scheme,
 * where the extension '.js' is always omitted (see {@link sap.ui.define}, {@link sap.ui.require}).
 * 
 * 
 * <b>Relationship to old Module Name Syntax</b><br>
 * 
 * Older UI5 APIs that deal with resources (like {@link jQuery.sap.registerModulePath},
 * {@link jQuery.sap.require} and {@link jQuery.sap.declare}) used a dot-separated naming scheme
 * (called 'module names') which was motivated by object names in the global namespace in
 * Javascript.
 * 
 * The new URN scheme better matches the names of the corresponding resources (files) as stored
 * in a server and the dot ('.') is no longer a forbidden character in a resource name. This finally
 * allows to handle resources with different types (extensions) with the same API, not only JS files.
 * 
 * Last but not least does the URN scheme better match the naming conventions used by AMD loaders
 * (like <code>requireJS</code>).
 * 
 * @param {string} sResourceName unified resource name of the resource
 * @returns {string} URL to load the resource from
 * @public
 * @experimental Since 1.27.0
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.getResourcePath = function(sResourceName) { return ""; };

/**
 * Returns a new function that returns the given <code>oValue</code> (using its closure).
 * 
 * Avoids the need for a dedicated member for the value.
 * 
 * As closures don't come for free, this function should only be used when polluting
 * the enclosing object is an absolute "must-not" (as it is the case in public base classes).
 * 
 * @param {object} oValue The value that the getter should return
 * @returns {function} The new getter function
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.getter = function(oValue) { return function() {}; };

/**
 * Creates and returns a new instance of {@link jQuery.sap.util.UriParameters}.
 * 
 * Example for reading a single URI parameter (or the value of the first
 * occurrence of the URI parameter):
 * <pre>
 * 	var sValue = jQuery.sap.getUriParameters().get("myUriParam");
 * </pre>
 * 
 * Example for reading the values of the first of the URI parameter
 * (with multiple occurrences):
 * <pre>
 * 	var aValues = jQuery.sap.getUriParameters().get("myUriParam", true);
 * 	for(i in aValues){
 * 	var sValue = aValues[i];
 * 	}
 * </pre>
 * 
 * @public
 * @param {string} sUri Uri to determine the parameters for
 * @return {jQuery.sap.util.UriParameters} A new URI parameters instance
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.getUriParameters = function(sUri) { return new jQuery.sap.util.UriParameters(); };

/**
 * Gets the whitelist for URL validation.
 * 
 * @return {object[]} A copy of the whitelist
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.getUrlWhitelist = function() { return new Array(); };

/**
 * Executes an 'eval' for its arguments in the global context (without closure variables).
 * 
 * This is a synchronous replacement for <code>jQuery.globalEval</code> which in some
 * browsers (e.g. FireFox) behaves asynchronously.
 * 
 * @type void
 * @public
 * @static
 * @SecSink {0|XSS} Parameter is evaluated
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.globalEval = function() { return null; };

/**
 * Transforms a camel case string into a hyphen separated string.
 * 
 * @param {string} sString camel case string
 * @returns {string} The transformed string
 * @since 1.15.0
 * @public
 * @SecPassthrough {0|return}
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.hyphen = function(sString) { return ""; };

/**
 * Includes the script (via &lt;script&gt;-tag) into the head for the
 * specified <code>sUrl</code> and optional <code>sId</code>.
 * 
 * @param {string|object}
 *            vUrl the URL of the script to load or a configuration object
 * @param {string}
 *            vUrl.url the URL of the script to load
 * @param {string}
 *            [vUrl.id] id that should be used for the script tag
 * @param {object}
 *            [vUrl.attributes] map of attributes that should be used for the script tag
 * @param {string|object}
 *            [vId] id that should be used for the script tag or map of attributes
 * @param {function}
 *            [fnLoadCallback] callback function to get notified once the script has been loaded
 * @param {function}
 *            [fnErrorCallback] callback function to get notified once the script loading failed
 * @return {void|Promise}
 *            When using the configuration object a <code>Promise</code> will be returned. The
 *            documentation for the <code>fnLoadCallback</code> applies to the <code>resolve</code>
 *            handler of the <code>Promise</code> and the one for the <code>fnErrorCallback</code>
 *            applies to the <code>reject</code> handler of the <code>Promise</code>.
 * 
 * @public
 * @static
 * @SecSink {0|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.includeScript = function(vUrl,vId,fnLoadCallback,fnErrorCallback) { return null; };

/**
 * Includes the specified stylesheet via a &lt;link&gt;-tag in the head of the current document. If there is call to
 * <code>includeStylesheet</code> providing the sId of an already included stylesheet, the existing element will be
 * replaced.
 * 
 * @param {string|object}
 *          vUrl the URL of the stylesheet to load or a configuration object
 * @param {string}
 *            vUrl.url the URL of the stylesheet to load
 * @param {string}
 *            [vUrl.id] id that should be used for the link tag
 * @param {object}
 *            [vUrl.attributes] map of attributes that should be used for the script tag
 * @param {string|object}
 *          [vId] id that should be used for the link tag or map of attributes
 * @param {function}
 *          [fnLoadCallback] callback function to get notified once the stylesheet has been loaded
 * @param {function}
 *          [fnErrorCallback] callback function to get notified once the stylesheet loading failed.
 *            In case of usage in IE the error callback will also be executed if an empty stylesheet
 *            is loaded. This is the only option how to determine in IE if the load was successful
 *            or not since the native onerror callback for link elements doesn't work in IE. The IE
 *            always calls the onload callback of the link element.
 * @return {void|Promise}
 *            When using the configuration object a <code>Promise</code> will be returned. The
 *            documentation for the <code>fnLoadCallback</code> applies to the <code>resolve</code>
 *            handler of the <code>Promise</code> and the one for the <code>fnErrorCallback</code>
 *            applies to the <code>reject</code> handler of the <code>Promise</code>.
 * 
 * @public
 * @static
 * @SecSink {0|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.includeStyleSheet = function(vUrl,vId,fnLoadCallback,fnErrorCallback) { return null; };

/**
 * Does some basic modifications to the HTML page that make it more suitable for mobile apps.
 * Only the first call to this method is executed, subsequent calls are ignored. Note that this method is also called by the constructor of toplevel controls like sap.m.App, sap.m.SplitApp and sap.m.Shell.
 * Exception: if no homeIcon was set, subsequent calls have the chance to set it.
 * 
 * The "options" parameter configures what exactly should be done.
 * 
 * It can have the following properties:
 * <ul>
 * <li>viewport: whether to set the viewport in a way that disables zooming (default: true)</li>
 * <li>statusBar: the iOS status bar color, "default", "black" or "black-translucent" (default: "default")</li>
 * <li>hideBrowser: whether the browser UI should be hidden as far as possible to make the app feel more native (default: true)</li>
 * <li>preventScroll: whether native scrolling should be disabled in order to prevent the "rubber-band" effect where the whole window is moved (default: true)</li>
 * <li>preventPhoneNumberDetection: whether Safari Mobile should be prevented from transforming any numbers that look like phone numbers into clickable links; this should be left as "true", otherwise it might break controls because Safari actually changes the DOM. This only affects all page content which is created after initMobile is called.</li>
 * <li>rootId: the ID of the root element that should be made fullscreen; only used when hideBrowser is set (default: the document.body)</li>
 * <li>useFullScreenHeight: a boolean that defines whether the height of the html root element should be set to 100%, which is required for other elements to cover the full height (default: true)</li>
 * <li>homeIcon: deprecated since 1.12, use jQuery.sap.setIcons instead.
 * </ul>
 * 
 * @param {object}  [options] configures what exactly should be done
 * @param {boolean} [options.viewport=true] whether to set the viewport in a way that disables zooming
 * @param {string}  [options.statusBar='default'] the iOS status bar color, "default", "black" or "black-translucent"
 * @param {boolean} [options.hideBrowser=true] whether the browser UI should be hidden as far as possible to make the app feel more native
 * @param {boolean} [options.preventScroll=true] whether native scrolling should be disabled in order to prevent the "rubber-band" effect where the whole window is moved
 * @param {boolean} [options.preventPhoneNumberDetection=true] whether Safari mobile should be prevented from transforming any numbers that look like phone numbers into clickable links
 * @param {string}  [options.rootId] the ID of the root element that should be made fullscreen; only used when hideBrowser is set. If not set, the body is used
 * @param {boolean} [options.useFullScreenHeight=true] whether the height of the html root element should be set to 100%, which is required for other elements to cover the full height
 * @param {string}  [options.homeIcon=undefined] deprecated since 1.12, use jQuery.sap.setIcons instead.
 * @param {boolean} [options.homeIconPrecomposed=false] deprecated since 1.12, use jQuery.sap.setIcons instead.
 * @param {boolean} [options.mobileWebAppCapable=true] whether the Application will be loaded in full screen mode after added to home screen on mobile devices. The default value for this property only enables the full screen mode when runs on iOS device.
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.initMobile = function(options) {  };

/**
 * Calls a method after a given interval and returns an id for this interval.
 * 
 * @param {int} iInterval Interval time in milliseconds
 * @param {object} oObject Object from which the method should be called
 * @param {string|object} method function pointer or name of the method
 * @param {array} [aParameters] Method parameters
 * @return {string} Id which can be used to cancel the interval with clearIntervalCall
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.intervalCall = function(iInterval,oObject,method,aParameters) { return ""; };

/**
 * Check whether a given module has been loaded / declared already.
 * 
 * Returns true as soon as a module has been required the first time, even when
 * loading/executing it has not finished yet. So the main assertion of a
 * return value of <code>true</code> is that the necessary actions have been taken
 * to make the module available in the near future. It does not mean, that
 * the content of the module is already available!
 * 
 * This fuzzy behavior is necessary to avoid multiple requests for the same module.
 * As a consequence of the assertion above, a <i>preloaded</i> module does not
 * count as <i>declared</i>. For preloaded modules, an explicit call to
 * <code>jQuery.sap.require</code> is necessary to make them available.
 * 
 * If a caller wants to know whether a module needs to be loaded from the server,
 * it can set <code>bIncludePreloaded</code> to true. Then, preloaded modules will
 * be reported as 'declared' as well by this method.
 * 
 * @param {string} sModuleName name of the module to be checked
 * @param {boolean} [bIncludePreloaded=false] whether preloaded modules should be reported as declared.
 * @return {boolean} whether the module has been declared already
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.isDeclared = function(sModuleName,bIncludePreloaded) { return false; };

/**
 * Whether the given resource has been loaded (or preloaded).
 * @param {string} sResourceName Name of the resource to check, in unified resource name format
 * @returns {boolean} Whether the resource has been loaded already
 * @private
 * @sap-restricted sap.ui.core
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.isResourceLoaded = function(sResourceName) { return false; };

/**
 * Returns a new object which has the given <code>oPrototype</code> as its prototype.
 * 
 * If several objects with the same prototype are to be created,
 * {@link jQuery.sap.factory} should be used instead.
 * 
 * @param {object} oPrototype Prototype to use for the new object
 * @return {object} new object
 * @public
 * @static
 * @deprecated As of 1.45.0, use <code>Object.create(oPrototype)</code> instead.
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.newObject = function(oPrototype) { return new Object(); };

/**
 * Returns the window reference for a DomRef
 * 
 * @param {Element} oDomRef The DOM reference
 * @return {Window} Window reference
 * @public
 * @since 0.9.0
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.ownerWindow = function(oDomRef) { return null; };

/**
 * Pads a string on the left side until is has at least the given length.
 * 
 * The method always adds full copies of <code>sPadChar</code> to the given string.
 * When <code>sPadChar</code> has a length > 1, the length of the returned string
 * actually might be greater than <code>iLength</code>.
 * 
 * @param {string} sString String to be padded
 * @param {string} sPadChar Char to use for the padding
 * @param {int} iLength Target length of the string
 * @returns {string} The padded string
 * @public
 * @SecPassthrough {0 1|return}
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.padLeft = function(sString,sPadChar,iLength) { return ""; };

/**
 * Pads a string on the right side until is has at least the given length.
 * 
 * The method always adds full copies of <code>sPadChar</code> to the given string.
 * When <code>sPadChar</code> has a length > 1, the length of the returned string
 * actually might be greater than <code>iLength</code>.
 * 
 * @param {string} sString String to be padded
 * @param {string} sPadChar Char to use for the padding
 * @param {int} iLength Target length of the string
 * @returns {string} The padded string
 * @public
 * @SecPassthrough {0 1|return}
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.padRight = function(sString,sPadChar,iLength) { return ""; };

/**
 * Parses the specified XML formatted string text using native parsing
 * function of the browser and returns a valid XML document. If an error
 * occurred during parsing a parse error object is returned as property (parseError) of the
 * returned XML document object. The parse error object has the following error
 * information parameters: errorCode, url, reason, srcText, line, linepos, filepos
 * 
 * @param {string}
 *            sXMLText the XML data as string
 * @return {object} the parsed XML document with a parseError property as described in
 *         getParseError. An error occurred if the errorCode property of the parseError is != 0.
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.parseXML = function(sXMLText) { return new Object(); };

/**
 * Creates and returns a new instance of {@link jQuery.sap.util.Properties}.
 * 
 * If option 'url' is passed, immediately a load request for the given target is triggered.
 * A property file that is loaded can contain comments with a leading ! or #.
 * The loaded property list does not contain any comments.
 * 
 * <b>Example for loading a property file:</b>
 * <pre>
 *  jQuery.sap.properties({url : "../myProperty.properties"});
 * </pre>
 * 
 * <b>Example for creating an empty properties instance:</b>
 * <pre>
 *  jQuery.sap.properties();
 * </pre>
 * 
 * <b>Examples for getting and setting properties:</b>
 * <pre>
 * 	var oProperties = jQuery.sap.properties();
 * 	oProperties.setProperty("KEY_1","Test Key");
 * 	var sValue1 = oProperties.getProperty("KEY_1");
 * 	var sValue2 = oProperties.getProperty("KEY_2","Default");
 * </pre>
 * 
 * @param {object} [mParams] Parameters used to initialize the property list
 * @param {string} [mParams.url] The URL to the .properties file which should be loaded.
 * @param {boolean} [mParams.async=false] Whether the .properties file which should be loaded asynchronously
 * @param {object} [mParams.headers] A map of additional header key/value pairs to send along with
 *    the request (see <code>headers</code> option of <code>jQuery.ajax</code>)
 * @param {object} [mParams.returnNullIfMissing=false] Whether <code>null</code> should be returned
 *    for a missing properties file; by default an empty collection is returned
 * @return {jQuery.sap.util.Properties|null|Promise} A new property collection (synchronous case)
 *    or <code>null</code> if the file could not be loaded and <code>returnNullIfMissing</code>
 *    was set; in case of asynchronous loading, always a Promise is returned, which resolves with
 *    the property collection or with <code>null</code> if the file could not be loaded and
 *    <code>returnNullIfMissing</code> was set to true
 * @throws {Error} When the file has syntax issues (e.g. incomplete unicode escapes);
 *    in async mode, the error is not thrown but the returned Promise will be rejected
 * @SecSink {0|PATH} Parameter is used for future HTTP requests
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.properties = function(mParams) { return new jQuery.sap.util.Properties(); };

/**
 * Registers a URL prefix for a module name prefix.
 * 
 * Before a module is loaded, the longest registered prefix of its module name
 * is searched for and the associated URL prefix is used as a prefix for the request URL.
 * The remainder of the module name is attached to the request URL by replacing
 * dots ('.') with slashes ('/').
 * 
 * The registration and search operates on full name segments only. So when a prefix
 * 
 *    'sap.com'  ->  'http://www.sap.com/ui5/resources/'
 * 
 * is registered, then it will match the name
 * 
 *    'sap.com.Button'
 * 
 * but not
 * 
 *    'sap.commons.Button'
 * 
 * Note that the empty prefix ('') will always match and thus serves as a fallback for
 * any search.
 * 
 * The prefix can either be given as string or as object which contains the url and a 'final' property.
 * If 'final' is set to true, overwriting a module prefix is not possible anymore.
 * 
 * @param {string} sModuleName module name to register a path for
 * @param {string | object} vUrlPrefix path prefix to register, either a string literal or an object (e.g. {url : 'url/to/res', 'final': true})
 * @param {string} [vUrlPrefix.url] path prefix to register
 * @param {boolean} [vUrlPrefix.final] flag to avoid overwriting the url path prefix for the given module name at a later point of time
 * 
 * @public
 * @static
 * @SecSink {1|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.registerModulePath = function(sModuleName,vUrlPrefix) {  };

/**
 * Adds all resources from a preload bundle to the preload cache.
 * 
 * When a resource exists already in the cache, the new content is ignored.
 * 
 * @param {object} oData Preload bundle
 * @param {string} [oData.url] URL from which the bundle has been loaded
 * @param {string} [oData.name] Unique name of the bundle
 * @param {string} [oData.version='1.0'] Format version of the preload bundle
 * @param {object} oData.modules Map of resources keyed by their resource name; each resource must be a string or a function
 * 
 * @private
 * @sap-restricted sap.ui.core,preloadfiles
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.registerPreloadedModules = function(oData) {  };

/**
 * Registers a URL prefix for a resource name prefix.
 * 
 * Before a resource is loaded, the longest registered prefix of its unified resource name
 * is searched for and the associated URL prefix is used as a prefix for the request URL.
 * The remainder of the resource name is attached to the request URL 1:1.
 * 
 * The registration and search operates on full name segments only. So when a prefix
 * 
 *    'sap/com'  ->  'http://www.sap.com/ui5/resources/'
 * 
 * is registered, then it will match the name
 * 
 *    'sap/com/Button'
 * 
 * but not
 * 
 *    'sap/commons/Button'
 * 
 * Note that the empty prefix ('') will always match and thus serves as a fallback for
 * any search.
 * 
 * The url prefix can either be given as string or as object which contains the url and a final flag.
 * If final is set to true, overwriting a resource name prefix is not possible anymore.
 * 
 * @param {string} sResourceNamePrefix in unified resource name syntax
 * @param {string | object} vUrlPrefix prefix to use instead of the sResourceNamePrefix, either a string literal or an object (e.g. {url : 'url/to/res', 'final': true})
 * @param {string} [vUrlPrefix.url] path prefix to register
 * @param {boolean} [vUrlPrefix.final] flag to avoid overwriting the url path prefix for the given module name at a later point of time
 * 
 * @public
 * @static
 * @SecSink {1|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.registerResourcePath = function(sResourceNamePrefix,vUrlPrefix) {  };

/**
 * Removes a whitelist entry for URL validation.
 * 
 * @param {int} iIndex index of entry
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.removeUrlWhitelist = function(iIndex) {  };

/**
 * Ensures that the given module is loaded and executed before execution of the
 * current script continues.
 * 
 * By issuing a call to this method, the caller declares a dependency to the listed modules.
 * 
 * Any required and not yet loaded script will be loaded and execute synchronously.
 * Already loaded modules will be skipped.
 * 
 * @param {...string | object}  vModuleName one or more names of modules to be loaded
 *                              or in case of an object {modName: "...", type: "..."}
 *                              where modName is the name of the module and the type
 *                              could be a specific dot separated extension e.g.
 *                              <code>{modName: "sap.ui.core.Dev", type: "view"}</code>
 *                              loads <code>sap/ui/core/Dev.view.js</code> and
 *                              registers as <code>sap.ui.core.Dev.view</code>
 * 
 * @public
 * @static
 * @SecSink {0|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.require = function(vModuleName) {  };

/**
 * Creates and returns a new instance of {@link jQuery.sap.util.ResourceBundle}
 * using the given URL and locale to determine what to load.
 * 
 * @public
 * @param {object} [mParams] Parameters used to initialize the resource bundle
 * @param {string} [mParams.url=''] URL pointing to the base .properties file of a bundle (.properties file without any locale information, e.g. "mybundle.properties")
 * @param {string} [mParams.locale] Optional language (aka 'locale') to load the texts for.
 *     Can either be a BCP47 language tag or a JDK compatible locale string (e.g. "en-GB", "en_GB" or "fr");
 *     Defaults to the current session locale if <code>sap.ui.getCore</code> is available, otherwise to 'en'
 * @param {boolean} [mParams.includeInfo=false] Whether to include origin information into the returned property values
 * @param {boolean} [mParams.async=false] Whether the first bundle should be loaded asynchronously
 *     Note: Fallback bundles loaded by {@link #getText} are always loaded synchronously.
 * @returns {jQuery.sap.util.ResourceBundle|Promise} A new resource bundle or a Promise on that bundle (in asynchronous case)
 * @SecSink {0|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.resources = function(mParams) { return new jQuery.sap.util.ResourceBundle(); };

/**
 * Returns the size (width of the vertical / height of the horizontal) native browser scrollbars.
 * 
 * This function must only be used when the DOM is ready.
 * 
 * @param {string} [sClasses=null] the CSS class that should be added to the test element.
 * @param {boolean} [bForce=false] force recalculation of size (e.g. when CSS was changed). When no classes are passed all calculated sizes are reset.
 * @return {object} JSON object with properties <code>width</code> and <code>height</code> (the values are of type number and are pixels).
 * @public
 * @since 1.4.0
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.scrollbarSize = function(sClasses,bForce) { return new Object(); };

/**
 * Serializes the specified XML document into a string representation.
 * 
 * @param {string}
 *            oXMLDocument the XML document object to be serialized as string
 * @return {object} the serialized XML string
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.serializeXML = function(oXMLDocument) { return new Object(); };

/**
 * Sets the bookmark icon for desktop browsers and the icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * 
 * Only call this method once and call it early when the page is loading: browsers behave differently when the favicon is modified while the page is alive.
 * Some update the displayed icon inside the browser but use an old icon for bookmarks.
 * When a favicon is given, any other existing favicon in the document will be removed.
 * When at least one home icon is given, all existing home icons will be removed and new home icon tags for all four resolutions will be created.
 * 
 * The home icons must be in PNG format and given in different sizes for iPad/iPhone with and without retina display.
 * The favicon is used in the browser and for desktop shortcuts and should optimally be in ICO format:
 * PNG does not seem to be supported by Internet Explorer and ICO files can contain different image sizes for different usage locations. E.g. a 16x16px version
 * is used inside browsers.
 * 
 * All icons are given in an an object holding icon URLs and other settings. The properties of this object are:
 * <ul>
 * <li>phone: a 60x60 pixel version for non-retina iPhones</li>
 * <li>tablet: a 76x76 pixel version for non-retina iPads</li>
 * <li>phone@2: a 120x120 pixel version for retina iPhones</li>
 * <li>tablet@2: a 152x152 pixel version for retina iPads</li>
 * <li>precomposed: whether the home icons already have some glare effect (otherwise iOS will add it) (default: false)</li>
 * <li>favicon: the ICO file to be used inside the browser and for desktop shortcuts</li>
 * </ul>
 * 
 * One example is:
 * <pre>
 * {
 *    'phone':'phone-icon_60x60.png',
 *    'phone@2':'phone-retina_120x120.png',
 *    'tablet':'tablet-icon_76x76.png',
 *    'tablet@2':'tablet-retina_152x152.png',
 *    'precomposed':true,
 *    'favicon':'desktop.ico'
 * }
 * </pre>
 * If one of the sizes is not given, the largest available alternative image will be used instead for this size.
 * On Android these icons may or may not be used by the device. Apparently chances can be improved by using icons with glare effect, so the "precomposed" property can be set to "true". Some Android devices may also use the favicon for bookmarks instead of the home icons.</li>
 * 
 * @param {object} oIcons
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.setIcons = function(oIcons) {  };

/**
 * Sets the "apple-mobile-web-app-capable" and "mobile-web-app-capable" meta information which defines whether the application is loaded
 * in full screen mode (browser address bar and toolbar are hidden) after the user does "add to home screen" on mobile devices. Currently
 * this meta tag is only supported by iOS Safari and mobile Chrome from version 31.
 * 
 * If the application opens new tabs because of attachments, url and so on, setting this to false will let the user be able to go from the
 * new tab back to the application tab after the application is added to home screen.
 * 
 * Note: this function only has effect when the application runs on iOS Safari and mobile Chrome from version 31.
 * 
 * @param {boolean} bValue whether the Application will be loaded in full screen mode after added to home screen from iOS Safari or mobile Chrome from version 31.
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.setMobileWebAppCapable = function(bValue) {  };

/**
 * Sets an object property to a given value, where the property is
 * identified by a sequence of names (path).
 * 
 * When a <code>oContext</code> is given, the path starts in that object.
 * Otherwise it starts in the <code>window</code> object that this plugin
 * has been created for.
 * 
 * Note: Although this method internally uses <code>object["key"]</code> to address object
 *       properties, it does not support all possible characters in a name.
 *       Especially the dot ('.') is not supported in the individual name segments,
 *       as it is always interpreted as a name separator.
 * 
 * @param {string} sName  a dot separated sequence of names that identify the property
 * @param {any}    vValue value to be set, can have any type
 * @param {object} [oContext=window] the context to execute the search in
 * @public
 * @static
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.setObject = function(sName,vValue,oContext) {  };

/**
 * Convenience wrapper around <code>jQuery.ajax()</code> that avoids the need for callback functions when
 * synchronous calls are made. If the setting <code>complexResult</code> is true (default), then the return value
 * is an object with the following properties
 * <ul>
 * <li><code>success</code> boolean whether the call succeeded or not
 * <li><code>data</code> any the data returned by the call. For dataType 'text' this is a string,
 *                       for JSON it is an object, for XML it is a document. When the call failed, then data is not defined
 * <li><code>status</code> string a textual status ('success,', 'error', 'timeout',...)
 * <li><code>statusCode</code> string the HTTP status code of the request
 * <li><code>error</code> Error an error object (exception) in case an error occurred
 * <li><code>errorText</code> string an error message in case an error occurred
 * </ul>
 * 
 * When <code>complexResult</code> is false, then in the case of success, only 'data' is returned, in case of an error the
 * 'fallback' setting is returned (defaults to undefined).
 * 
 * Note that async=false is always enforced by this method.
 * 
 * @param {string} oOrigSettings the ajax() settings
 * @return result, see above
 * 
 * @public
 * @since 0.9.0
 * @SecSink {0|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.sjax = function(oOrigSettings) {  };

/**
 * Checks whether a given <code>sString</code> starts with <code>sStartString</code>
 * respecting the case of the strings.
 * 
 * @param {string} sString String to be checked
 * @param {string} sStartString The start string to be searched
 * @returns {boolean} Whether <code>sString</code> starts with <code>sStartString</code>
 * @see jQuery.sap.startsWithIgnoreCase
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.startsWith = function(sString,sStartString) { return false; };

/**
 * Checks whether a given <code>sString</code> starts with <code>sStartString</code>
 * ignoring the case of both strings.
 * 
 * @param {string} sString String to be checked
 * @param {string} sStartString The start string to be searched
 * @returns {boolean} Whether <code>sString</code> starts with <code>sStartString</code>
 * @see jQuery.sap.startsWith
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.startsWithIgnoreCase = function(sString,sStartString) { return false; };

/**
 * Convenience wrapper for {@link jQuery.sap.sjax} that enforeces the Http method GET and defaults the
 * data type of the result to 'text'.
 * 
 * @param {string} sUrl the URL
 * @param {string|object} data request parameters in the format accepted by jQuery.ajax()
 * @param {string} [sDataType='text'] the type of data expected from the server, default is "text"
 * @return result @see jQuery.sap.sjax
 * 
 * @public
 * @since 0.9.0
 * @SecSink {0 1|PATH} Parameter is used for future HTTP requests
 * @SecSource {return} Returned value is under control of an external resource
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.syncGet = function(sUrl,data,sDataType) {  };

/**
 * Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method GET and the data type 'json'.
 * If a fallback value is given, the function simply returns the response as an object or - if some error occurred -
 * the fallback value. This is useful for applications that don't require detailed error diagnostics.
 * 
 * If applications need to know about occurring errors, they can either call <code>sjax()</code> directly
 * or they can omit the fallback value (providing only two parameters to syncGetJSON()).
 * They then receive the same complex result object as for the sjax() call.
 * 
 * Note that providing "undefined" or "null" as a fallback is different from omitting the fallback (complex result).
 * 
 * @param {string} sUrl the URL
 * @param {string|object} data request parameters in the format accepted by jQuery.ajax()
 * @param {object} [fallback] if set, only data is returned (and this fallback instead in case of errors); if unset, a result structure is returned
 * @return result @see jQuery.sap.sjax
 * 
 * @public
 * @since 0.9.0
 * @SecSink {0 1|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.syncGetJSON = function(sUrl,data,fallback) {  };

/**
 * Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method GET and the data type 'text'.
 * If a fallback value is given, the function simply returns the response as a text or - if some error occurred -
 * the fallback value. This is useful for applications that don't require detailed error diagnostics.
 * 
 * If applications need to know about occurring errors, they can either call <code>sjax()</code> directly
 * or they can omit the fallback value (providing only two parameters to syncGetText()).
 * They then receive the same complex result object as for the sjax() call.
 * 
 * @param {string} sUrl the URL
 * @param {string|object} data request parameters in the format accepted by jQuery.ajax()
 * @param {string} [fallback] if set, only data is returned (and this fallback instead in case of errors); if unset, a result structure is returned
 * @return  result @see jQuery.sap.sjax
 * 
 * @public
 * @since 0.9.0
 * @SecSink {0 1|PATH} Parameter is used for future HTTP requests
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.syncGetText = function(sUrl,data,fallback) {  };

/**
 * Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method POST and defaults the
 * data type of the result to 'text'.
 * 
 * @param {string} sUrl the URL
 * @param {string|object} data request parameters in the format accepted by jQuery.ajax()
 * @param {string} [sDataType='text'] the type of data expected from the server, default is "text"
 * @return result @see jQuery.sap.sjax
 * 
 * @public
 * @since 0.9.0
 * @SecSink {0 1|PATH} Parameter is used for future HTTP requests
 * @SecSource {return} Returned value is under control of an external resource
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.syncPost = function(sUrl,data,sDataType) {  };

/**
 * Search ancestors of the given source DOM element for the specified CSS class name.
 * If the class name is found, set it to the root DOM element of the target control.
 * If the class name is not found, it is also removed from the target DOM element.
 * 
 * @param {string} sStyleClass CSS class name
 * @param {jQuery|sap.ui.core.Control|string} vSource jQuery object, control or an id of the source element.
 * @param {jQuery|sap.ui.core.Control} vDestination target jQuery object or a control.
 * @return {jQuery|Element} Target element
 * @public
 * @since 1.22
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.syncStyleClass = function(sStyleClass,vSource,vDestination) { return null; };

/**
 * Creates and returns a pseudo-unique id.
 * 
 * No means for detection of overlap with already present or future UIDs.
 * 
 * @return {string} A pseudo-unique id.
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.uid = function() { return ""; };

/**
 * Unbinds all events for listening with the given callback function.
 * 
 * @param {function} fnCallback Callback function
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.unbindAnyEvent = function(fnCallback) {  };

/**
 * Sorts the given array in-place and removes any duplicates (identified by "===").
 * 
 * Use <code>jQuery.unique()</code> for arrays of DOMElements.
 * 
 * @param {Array} a An Array of any type
 * @return {Array} Same array as given (for chaining)
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.unique = function(a) { return null; };

/**
 * Validates a URL. Check if it's not a script or other security issue.
 * 
 * Split URL into components and check for allowed characters according to RFC 3986:
 * 
 * <pre>
 * authority     = [ userinfo "@" ] host [ ":" port ]
 * userinfo      = *( unreserved / pct-encoded / sub-delims / ":" )
 * host          = IP-literal / IPv4address / reg-name
 * 
 * IP-literal    = "[" ( IPv6address / IPvFuture  ) "]"
 * IPvFuture     = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )
 * IPv6address   =                            6( h16 ":" ) ls32
 *               /                       "::" 5( h16 ":" ) ls32
 *               / [               h16 ] "::" 4( h16 ":" ) ls32
 *               / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
 *               / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
 *               / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
 *               / [ *4( h16 ":" ) h16 ] "::"              ls32
 *               / [ *5( h16 ":" ) h16 ] "::"              h16
 *               / [ *6( h16 ":" ) h16 ] "::"
 * ls32          = ( h16 ":" h16 ) / IPv4address
 *               ; least-significant 32 bits of address
 * h16           = 1*4HEXDIG
 *               ; 16 bits of address represented in hexadecimal
 * 
 * IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet
 * dec-octet     = DIGIT                 ; 0-9
 *               / %x31-39 DIGIT         ; 10-99
 *               / "1" 2DIGIT            ; 100-199
 *               / "2" %x30-34 DIGIT     ; 200-249
 *               / "25" %x30-35          ; 250-255
 * 
 * reg-name      = *( unreserved / pct-encoded / sub-delims )
 * 
 * pct-encoded   = "%" HEXDIG HEXDIG
 * reserved      = gen-delims / sub-delims
 * gen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@"
 * sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *               / "*" / "+" / "," / ";" / "="
 * unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 * pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 * 
 * path          = path-abempty    ; begins with "/" or is empty
 *               / path-absolute   ; begins with "/" but not "//"
 *               / path-noscheme   ; begins with a non-colon segment
 *               / path-rootless   ; begins with a segment
 *               / path-empty      ; zero characters
 * 
 * path-abempty  = *( "/" segment )
 * path-absolute = "/" [ segment-nz *( "/" segment ) ]
 * path-noscheme = segment-nz-nc *( "/" segment )
 * path-rootless = segment-nz *( "/" segment )
 * path-empty    = 0<pchar>
 * segment       = *pchar
 * segment-nz    = 1*pchar
 * segment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / "@" )
 *               ; non-zero-length segment without any colon ":"
 * 
 * query         = *( pchar / "/" / "?" )
 * 
 * fragment      = *( pchar / "/" / "?" )
 * </pre>
 * 
 * For the hostname component, we are checking for valid DNS hostnames according to RFC 952 / RFC 1123:
 * 
 * <pre>
 * hname         = name *("." name)
 * name          = let-or-digit ( *( let-or-digit-or-hyphen ) let-or-digit )
 * </pre>
 * 
 * 
 * When the URI uses the protocol 'mailto:', the address part is additionally checked
 * against the most commonly used parts of RFC 6068:
 * 
 * <pre>
 * mailtoURI     = "mailto:" [ to ] [ hfields ]
 * to            = addr-spec *("," addr-spec )
 * hfields       = "?" hfield *( "&" hfield )
 * hfield        = hfname "=" hfvalue
 * hfname        = *qchar
 * hfvalue       = *qchar
 * addr-spec     = local-part "@" domain
 * local-part    = dot-atom-text              // not accepted: quoted-string
 * domain        = dot-atom-text              // not accepted: "[" *dtext-no-obs "]"
 * dtext-no-obs  = %d33-90 / ; Printable US-ASCII
 *                 %d94-126  ; characters not including
 *                           ; "[", "]", or "\"
 * qchar         = unreserved / pct-encoded / some-delims
 * some-delims   = "!" / "$" / "'" / "(" / ")" / "*"
 *               / "+" / "," / ";" / ":" / "@"
 * 
 * Note:
 * A number of characters that can appear in &lt;addr-spec> MUST be
 * percent-encoded.  These are the characters that cannot appear in
 * a URI according to [STD66] as well as "%" (because it is used for
 * percent-encoding) and all the characters in gen-delims except "@"
 * and ":" (i.e., "/", "?", "#", "[", and "]").  Of the characters
 * in sub-delims, at least the following also have to be percent-
 * encoded: "&", ";", and "=".  Care has to be taken both when
 * encoding as well as when decoding to make sure these operations
 * are applied only once.
 * 
 * </pre>
 * 
 * When a whitelist has been configured using {@link #.addUrlWhitelist addUrlWhitelist},
 * any URL that passes the syntactic checks above, additionally will be tested against
 * the content of the whitelist.
 * 
 * @param {string} sUrl
 * @return true if valid, false if not valid
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.validateUrl = function(sUrl) {  };


// ---- jQuery.sap.act --------------------------------------------------------------------------

/**
 * Registers the given handler to the activity event, which is fired when an activity was detected after a certain period of inactivity.
 * 
 * The Event is not fired for Internet Explorer 8.
 * 
 * @param {Function} fnFunction The function to call, when an activity event occurs.
 * @param {Object} [oListener] The 'this' context of the handler function.
 * @protected
 * 
 * @memberof jQuery.sap.act
 */
jQuery.sap.act.prototype.attachActivate = function(fnFunction,oListener) {  };

/**
 * Deregisters a previously registered handler from the activity event.
 * 
 * @param {Function} fnFunction The function to call, when an activity event occurs.
 * @param {Object} [oListener] The 'this' context of the handler function.
 * @protected
 * 
 * @memberof jQuery.sap.act
 */
jQuery.sap.act.prototype.detachActivate = function(fnFunction,oListener) {  };

/**
 * Checks whether recently an activity was detected.
 * 
 * @return true if recently an activity was detected, false otherwise
 * @protected
 * 
 * @memberof jQuery.sap.act
 */
jQuery.sap.act.prototype.isActive = function() {  };

/**
 * Reports an activity.
 * 
 * @public
 * 
 * @memberof jQuery.sap.act
 */
jQuery.sap.act.prototype.refresh = function() {  };


// ---- jQuery.sap.history --------------------------------------------------------------------------

/**
 * jQuery.sap.history is deprecated. Please use {@link sap.ui.core.routing.Route} instead.
 * 
 * Initialize the history handling and set the routes and default handler.
 * This should be only called once with the mSettings set in the right format. If the mSettings is not an object,
 * you have another chance to call this function again to initialize the history handling. But once the mSettings
 * is set with an object, you can only call the addRoute and setDefaultHandler to set the data.
 * 
 * @deprecated since 1.19.1. Please use {@link sap.ui.core.routing.Route} instead.
 * @param {object} mSettings The map that contains data in format:
 * <pre>
 * {
 * 	routes: [{
 * 		path: string //identifier for one kind of hash
 * 		handler: function	//function what will be called when the changed hash is matched against the path.
 * 							//first parameter: the json data passed in when calling the addHistory
 * 							//second parameter: the type of the navigation {@link jQuery.sap.history.NavType}
 * 		}],
 * 		defaultHandler: function	//this function will be called when empty hash is matched
 * 									//first parameter: the type of the navigation {@link jQuery.sap.history.NavType}
 * }
 * </pre>
 * @public
 * @class Enables the back and forward buttons in browser to navigate back or forth through the browser history stack.<br/><br/>
 * 
 * It also supports adding virtual history which used only to mark some intermediate state in order to navigate back to the previous state.
 * And this state will be skipped from the browser history stack immediately after a new history state is added to the history stack after this state <br/><br/>
 * 
 * By providing the hash saved from the return value of calling jQuery.sap.history.addHistory, jQuery.sap.history.backToHash will navigate back directly to the
 * history state with the same hash. <br/><br/>
 * 
 * Please use jQuery.sap.history.back() to go one step back in the history stack instead of using window.history.back(), because it handles the empty history stack
 * situation and will call the defaultHandler for this case. <br/><br/>
 * 
 * 
 * Example for the usage of history handling:
 * <pre>
 * 	//Initialization
 * 	jQuery.sap.history({
 * 		routes: [], //please refer to the jQuery.sap.history function comment for the format.
 * 		defaultHandler: function(){
 * 			//code here
 * 		}
 * 	});
 * 
 * 	//add history
 * 	var hash = jQuery.sap.history.addHistory("IDENTIFIER", jsonData);
 * 
 * 	//add virtual history
 * 	jQuery.sap.history.addVirtualHistory();
 * 
 * 	//back to hash
 * 	jQuery.sap.history.backToHash(hash);
 * 
 * 	//back one step along the history stack
 * 	jQuery.sap.history.back();
 * </pre>
 * 
 * 
 */
jQuery.sap.history = function(mSettings) {};
/**
 * This function adds a history record. It will not trigger the related handler of the routes, the changes have to be done by the
 * developer. Normally, a history record should be added when changes are done already.
 * 
 * @param {string} sIdf The identifier defined in the routes which will be matched in order to call the corresponding handler
 * @param {object} oStateData The object passed to the corresponding handler when the identifier is matched with the url hash
 * @param {boolean} bBookmarkable Default value is set to true. If this is set to false, the default handler will be called when this identifier and data are matched
 * @param {boolean} [bVirtual] This states if the history is a virtual history that should be skipped when going forward or backward in the history stack.
 * @returns {string} sHash The complete hash string which contains the identifier, stringified data, optional uid, and bookmarkable digit. This hash can be passed into
 *     the backToHash function when navigating back to this state is intended.
 * @public
 * 
 */
jQuery.sap.history.prototype.addHistory = function(sIdf,oStateData,bBookmarkable,bVirtual) { return ""; };

/**
 * Adds a route to the history handling.
 * 
 * @param {string} sIdf The identifier that is matched with the hash in the url in order to call the corresponding handler.
 * @param {function} fn The function that will be called when the identifier is matched with the hash.
 * @param {object} [oThis] If oThis is provided, the fn function's this keyword will be bound to this object.
 * 
 * @returns {object} It returns the this object to enable chaining.
 * @public
 * 
 */
jQuery.sap.history.prototype.addRoute = function(sIdf,fn,oThis) { return new Object(); };

/**
 * This function adds a virtual history record based on the current hash. A virtual record is only for marking the current state of the application,
 * and when the back button clicked it will return to the previous state. It is used when the marked state shouldn't be seen by the user when user click
 * the back or forward button of the browser. For example, when showing a context menu a virtual history record should be added and this record will be skipped
 * when user navigates back and it will return directly to the previous history record. If you avoid adding the virtual history record, it will return to one
 * history record before the one your virtual record is based on. That's why virtual record is necessary.
 * @public
 * 
 */
jQuery.sap.history.prototype.addVirtualHistory = function() {  };

/**
 * This function navigates back through the history stack. The number of steps is set by the parameter iSteps. It also handles the situation when it's called while there's nothing in the history stack.
 * Normally this happens when the application is restored from the bookmark. If there's nothing in the history stack, the default handler will be called with NavType jQuery.sap.history.NavType.Back.
 * 
 * @param {int} [iSteps] how many steps you want to go back, by default the value is 1.
 * @public
 * 
 */
jQuery.sap.history.prototype.back = function(iSteps) {  };

/**
 * This function will navigate back to the recent history state which has the sPath identifier. It is usually used to navigate back along one
 * specific route and jump over the intermediate history state if there are any.
 * 
 * @param {string} sPath The route identifier to which the history navigates back.
 * @public
 * 
 */
jQuery.sap.history.prototype.backThroughPath = function(sPath) {  };

/**
 * This function calculate the number of back steps to the specific sHash passed as parameter,
 * and then go back to the history state with this hash.
 * 
 * @param {string} sHash The hash string needs to be navigated. This is normally returned when you call the addhistory method.
 * @public
 * 
 */
jQuery.sap.history.prototype.backToHash = function(sHash) {  };

/**
 * Set the default handler which will be called when there's an empty hash in the url.
 * 
 * @param {function} fn The function that will be set as the default handler
 * @public
 * 
 */
jQuery.sap.history.prototype.setDefaultHandler = function(fn) {  };


// ---- jQuery.sap.history.NavType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.sap.history.NavType.toString = function() { return ""; };

// ---- jQuery.sap.interaction --------------------------------------------------------------------------

/**
 * Enables the interaction tracking.
 * 
 * @param {boolean} bActive state of the interaction detection
 * @public
 * @since 1.36
 * 
 * @memberof jQuery.sap.interaction
 */
jQuery.sap.interaction.setActive = function(bActive) {  };


// ---- jQuery.sap.KeyCodes --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.sap.KeyCodes.toString = function() { return ""; };

// ---- jQuery.sap.log --------------------------------------------------------------------------

/**
 * Allows to add a new LogListener that will be notified for new log entries.
 * 
 * The given object must provide method <code>onLogEntry</code> and can also be informed
 * about <code>onDetachFromLog</code> and <code>onAttachToLog</code>
 * @param {object} oListener The new listener object that should be informed
 * @return {jQuery.sap.log} The global logger
 * @public
 * @static
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.addLogListener = function(oListener) { return new jQuery.sap.log(); };

/**
 * Creates a new debug-level entry in the log with the given message, details and calling component.
 * 
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @param {function} [fnSupportInfo] Callback that returns an additional support object to be logged in support mode.
 *   This function is only called if support info mode is turned on with <code>logSupportInfo(true)</code>.
 *   To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple
 *   immutable JSON object with mostly static and stable content.
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.debug = function(sMessage,sDetails,sComponent,fnSupportInfo) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new error-level entry in the log with the given message, details and calling component.
 * 
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @param {function} [fnSupportInfo] Callback that returns an additional support object to be logged in support mode.
 *   This function is only called if support info mode is turned on with <code>logSupportInfo(true)</code>.
 *   To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple
 *   immutable JSON object with mostly static and stable content.
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.error = function(sMessage,sDetails,sComponent,fnSupportInfo) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new fatal-level entry in the log with the given message, details and calling component.
 * 
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @param {function} [fnSupportInfo] Callback that returns an additional support object to be logged in support mode.
 *   This function is only called if support info mode is turned on with <code>logSupportInfo(true)</code>.
 *   To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple
 *   immutable JSON object with mostly static and stable content.
 * @return {jQuery.sap.log.Logger} The log instance for method chaining
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.fatal = function(sMessage,sDetails,sComponent,fnSupportInfo) { return new jQuery.sap.log.Logger(); };

/**
 * Returns the log level currently effective for the given component.
 * If no component is given or when no level has been configured for a
 * given component, the log level for the default component of this logger is returned.
 * 
 * @param {string} [sComponent] Name of the component to retrieve the log level for
 * @return {int} The log level for the given component or the default log level
 * @public
 * @since 1.1.2
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.getLevel = function(sComponent) { return 0; };

/**
 * Retrieves the currently recorded log entries.
 * @deprecated Since 1.1.2. To avoid confusion with getLogger, this method has been renamed to {@link jQuery.sap.log.getLogEntries}.
 * @public
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.getLog = function() {  };

/**
 * Returns the logged entries recorded so far as an array.
 * 
 * Log entries are plain JavaScript objects with the following properties
 * <ul>
 * <li>timestamp {number} point in time when the entry was created
 * <li>level {int} LogLevel level of the entry
 * <li>message {string} message text of the entry
 * </ul>
 * 
 * @return {object[]} an array containing the recorded log entries
 * @public
 * @static
 * @since 1.1.2
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.getLogEntries = function() { return new Array(); };

/**
 * Returns a {@link jQuery.sap.log.Logger} for the given component.
 * 
 * The method might or might not return the same logger object across multiple calls.
 * While loggers are assumed to be light weight objects, consumers should try to
 * avoid redundant calls and instead keep references to already retrieved loggers.
 * 
 * The optional second parameter <code>iDefaultLogLevel</code> allows to specify
 * a default log level for the component. It is only applied when no log level has been
 * defined so far for that component (ignoring inherited log levels). If this method is
 * called multiple times for the same component but with different log levels,
 * only the first call one might be taken into account.
 * 
 * @param {string} sComponent Component to create the logger for
 * @param {int} [iDefaultLogLevel] a default log level to be used for the component,
 *   if no log level has been defined for it so far.
 * @return {jQuery.sap.log.Logger} A logger for the component.
 * @public
 * @static
 * @since 1.1.2
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.getLogger = function(sComponent,iDefaultLogLevel) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new info-level entry in the log with the given message, details and calling component.
 * 
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @param {function} [fnSupportInfo] Callback that returns an additional support object to be logged in support mode.
 *   This function is only called if support info mode is turned on with <code>logSupportInfo(true)</code>.
 *   To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple
 *   immutable JSON object with mostly static and stable content.
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.info = function(sMessage,sDetails,sComponent,fnSupportInfo) { return new jQuery.sap.log.Logger(); };

/**
 * Checks whether logging is enabled for the given log level,
 * depending on the currently effective log level for the given component.
 * 
 * If no component is given, the default component of this logger will be taken into account.
 * 
 * @param {int} [iLevel=Level.DEBUG] The log level in question
 * @param {string} [sComponent] Name of the component to check the log level for
 * @return {boolean} Whether logging is enabled or not
 * @public
 * @since 1.13.2
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.isLoggable = function(iLevel,sComponent) { return false; };

/**
 * Allows to remove a registered LogListener.
 * @param {object} oListener The new listener object that should be removed
 * @return {jQuery.sap.log} The global logger
 * @public
 * @static
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.removeLogListener = function(oListener) { return new jQuery.sap.log(); };

/**
 * Defines the maximum <code>jQuery.sap.log.Level</code> of log entries that will be recorded.
 * Log entries with a higher (less important) log level will be omitted from the log.
 * When a component name is given, the log level will be configured for that component
 * only, otherwise the log level for the default component of this logger is set.
 * For the global logger, the global default level is set.
 * 
 * <b>Note</b>: Setting a global default log level has no impact on already defined
 * component log levels. They always override the global default log level.
 * 
 * @param {jQuery.sap.log.Level} iLogLevel The new log level
 * @param {string} [sComponent] The log component to set the log level for
 * @return {jQuery.sap.log.Logger} This logger object to allow method chaining
 * @public
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.setLevel = function(iLogLevel,sComponent) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new trace-level entry in the log with the given message, details and calling component.
 * 
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @param {function} [fnSupportInfo] Callback that returns an additional support object to be logged in support mode.
 *   This function is only called if support info mode is turned on with <code>logSupportInfo(true)</code>.
 *   To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple
 *   immutable JSON object with mostly static and stable content.
 * @return {jQuery.sap.log.Logger} The log-instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.trace = function(sMessage,sDetails,sComponent,fnSupportInfo) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new warning-level entry in the log with the given message, details and calling component.
 * 
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @param {function} [fnSupportInfo] Callback that returns an additional support object to be logged in support mode.
 *   This function is only called if support info mode is turned on with <code>logSupportInfo(true)</code>.
 *   To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple
 *   immutable JSON object with mostly static and stable content.
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 * @memberof jQuery.sap.log
 */
jQuery.sap.log.warning = function(sMessage,sDetails,sComponent,fnSupportInfo) { return new jQuery.sap.log.Logger(); };


// ---- jQuery.sap.log.Level --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.sap.log.Level.toString = function() { return ""; };

// ---- jQuery.sap.log.Logger --------------------------------------------------------------------------

/**
 * Creates a new Logger instance which will use the given component string
 * for all logged messages without a specific component.
 * 
 * @param {string} sDefaultComponent The component to use
 * 
 * @class A Logger class
 * @since 1.1.2
 * @public
 * 
 */
jQuery.sap.log.Logger = function(sDefaultComponent) {};
/**
 * Creates a new debug-level entry in the log with the given message, details and calling component.
 * 
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @param {function} [fnSupportInfo] Callback that returns an additional support object to be logged in support mode.
 *   This function is only called if support info mode is turned on with <code>logSupportInfo(true)</code>.
 *   To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple
 *   immutable JSON object with mostly static and stable content.
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 */
jQuery.sap.log.Logger.prototype.debug = function(sMessage,sDetails,sComponent,fnSupportInfo) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new error-level entry in the log with the given message, details and calling component.
 * 
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @param {function} [fnSupportInfo] Callback that returns an additional support object to be logged in support mode.
 *   This function is only called if support info mode is turned on with <code>logSupportInfo(true)</code>.
 *   To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple
 *   immutable JSON object with mostly static and stable content.
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 */
jQuery.sap.log.Logger.prototype.error = function(sMessage,sDetails,sComponent,fnSupportInfo) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new fatal-level entry in the log with the given message, details and calling component.
 * 
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @param {function} [fnSupportInfo] Callback that returns an additional support object to be logged in support mode.
 *   This function is only called if support info mode is turned on with <code>logSupportInfo(true)</code>.
 *   To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple
 *   immutable JSON object with mostly static and stable content.
 * @return {jQuery.sap.log.Logger} The log instance for method chaining
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 */
jQuery.sap.log.Logger.prototype.fatal = function(sMessage,sDetails,sComponent,fnSupportInfo) { return new jQuery.sap.log.Logger(); };

/**
 * Returns the log level currently effective for the given component.
 * If no component is given or when no level has been configured for a
 * given component, the log level for the default component of this logger is returned.
 * 
 * @param {string} [sComponent] Name of the component to retrieve the log level for
 * @return {int} The log level for the given component or the default log level
 * @public
 * @since 1.1.2
 * 
 */
jQuery.sap.log.Logger.prototype.getLevel = function(sComponent) { return 0; };

/**
 * Creates a new info-level entry in the log with the given message, details and calling component.
 * 
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @param {function} [fnSupportInfo] Callback that returns an additional support object to be logged in support mode.
 *   This function is only called if support info mode is turned on with <code>logSupportInfo(true)</code>.
 *   To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple
 *   immutable JSON object with mostly static and stable content.
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 */
jQuery.sap.log.Logger.prototype.info = function(sMessage,sDetails,sComponent,fnSupportInfo) { return new jQuery.sap.log.Logger(); };

/**
 * Checks whether logging is enabled for the given log level,
 * depending on the currently effective log level for the given component.
 * 
 * If no component is given, the default component of this logger will be taken into account.
 * 
 * @param {int} [iLevel=Level.DEBUG] The log level in question
 * @param {string} [sComponent] Name of the component to check the log level for
 * @return {boolean} Whether logging is enabled or not
 * @public
 * @since 1.13.2
 * 
 */
jQuery.sap.log.Logger.prototype.isLoggable = function(iLevel,sComponent) { return false; };

/**
 * Defines the maximum <code>jQuery.sap.log.Level</code> of log entries that will be recorded.
 * Log entries with a higher (less important) log level will be omitted from the log.
 * When a component name is given, the log level will be configured for that component
 * only, otherwise the log level for the default component of this logger is set.
 * For the global logger, the global default level is set.
 * 
 * <b>Note</b>: Setting a global default log level has no impact on already defined
 * component log levels. They always override the global default log level.
 * 
 * @param {jQuery.sap.log.Level} iLogLevel The new log level
 * @param {string} [sComponent] The log component to set the log level for
 * @return {jQuery.sap.log.Logger} This logger object to allow method chaining
 * @public
 * 
 */
jQuery.sap.log.Logger.prototype.setLevel = function(iLogLevel,sComponent) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new trace-level entry in the log with the given message, details and calling component.
 * 
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @param {function} [fnSupportInfo] Callback that returns an additional support object to be logged in support mode.
 *   This function is only called if support info mode is turned on with <code>logSupportInfo(true)</code>.
 *   To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple
 *   immutable JSON object with mostly static and stable content.
 * @return {jQuery.sap.log.Logger} The log-instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 */
jQuery.sap.log.Logger.prototype.trace = function(sMessage,sDetails,sComponent,fnSupportInfo) { return new jQuery.sap.log.Logger(); };

/**
 * Creates a new warning-level entry in the log with the given message, details and calling component.
 * 
 * @param {string} sMessage Message text to display
 * @param {string} [sDetails=''] Details about the message, might be omitted
 * @param {string} [sComponent=''] Name of the component that produced the log entry
 * @param {function} [fnSupportInfo] Callback that returns an additional support object to be logged in support mode.
 *   This function is only called if support info mode is turned on with <code>logSupportInfo(true)</code>.
 *   To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple
 *   immutable JSON object with mostly static and stable content.
 * @return {jQuery.sap.log.Logger} The log instance
 * @public
 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
 * 
 */
jQuery.sap.log.Logger.prototype.warning = function(sMessage,sDetails,sComponent,fnSupportInfo) { return new jQuery.sap.log.Logger(); };


// ---- jQuery.sap.log.LogLevel --------------------------------------------------------------------------


// ---- jQuery.sap.measure --------------------------------------------------------------------------

/**
 * Adds a performance measurement with all data
 * This is usefull to add external measurements (e.g. from a backend) to the common measurement UI
 * 
 * @param {string} sId ID of the measurement
 * @param {string} sInfo Info for the measurement
 * @param {int} iStart start timestamp
 * @param {int} iEnd end timestamp
 * @param {int} iTime time in milliseconds
 * @param {int} iDuration effective time in milliseconds
 * @param {string | string[]} [aCategories = "javascript"] An optional list of categories for the measure
 * @return {object} [] current measurement containing id, info and start-timestamp, end-timestamp, time, duration, categories (false if error)
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.add = function(sId,sInfo,iStart,iEnd,iTime,iDuration,aCategories) { return new Object(); };

/**
 * Starts an average performance measure.
 * The duration of this measure is an avarage of durations measured for each call.
 * Optionally a category or list of categories can be passed to allow filtering of measurements.
 * 
 * @param {string} sId ID of the measurement
 * @param {string} sInfo Info for the measurement
 * @param {string | string[]} [aCategories = "javascript"] An optional list of categories for the measure
 * @return {object} current measurement containing id, info and start-timestamp (false if error)
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.average = function(sId,sInfo,aCategories) { return new Object(); };

/**
 * Clears all performance measurements
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.clear = function() {  };

/**
 * Clears all interaction measurements
 * @public
 * @since 1.34.0
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.clearInteractionMeasurements = function() {  };

/**
 * Clears all request timings safely
 * @public
 * @since 1.34.0
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.clearRequestTimings = function() {  };

/**
 * Ends a performance measure
 * 
 * @param {string} sId ID of the measurement
 * @return {object} current measurement containing id, info and start-timestamp, end-timestamp, time, duration (false if error)
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.end = function(sId) { return new Object(); };

/**
 * End an interaction measurements
 * 
 * @param {boolean} bForce forces end of interaction now and ignores further re-renderings
 * @public
 * @since 1.34.0
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.endInteraction = function(bForce) {  };

/**
 * Gets all interaction measurements for which a provided filter function returns a truthy value.
 * To filter for certain categories of measurements a fnFilter can be implemented like this
 * <code>
 * function(oInteractionMeasurement) {
 *     return oInteractionMeasurement.duration > 0
 * }</code>
 * @param {function} fnFilter a filter function that returns true if the passed measurement should be added to the result
 * @return {object[]} all interaction measurements passing the filter function successfully
 * @public
 * @since 1.36.2
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.filterInteractionMeasurements = function(fnFilter) { return new Array(); };

/**
 * Gets all performance measurements where a provided filter function returns a truthy value.
 * If neither a filter function nor a category is provided an empty array is returned.
 * To filter for certain properties of measurements a fnFilter can be implemented like this
 * <code>
 * function(oMeasurement) {
 *     return oMeasurement.duration > 50;
 * }</code>
 * 
 * @param {function} [fnFilter] a filter function that returns true if the passed measurement should be added to the result
 * @param {boolean|undefined} [bCompleted] Optional parameter to determine if either completed or incomplete measurements should be returned (both if not set or undefined)
 * @param {string[]} [aCategories] The function returns only measurements which match these specified categories
 * 
 * @return {object} [] filtered array with measurements containing id, info and start-timestamp, end-timestamp, time, duration, categories (false if error)
 * @public
 * @since 1.34.0
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.filterMeasurements = function(fnFilter,bCompleted,aCategories) { return new Object(); };

/**
 * Gets the current state of the perfomance measurement functionality
 * 
 * @return {boolean} current state of the perfomance measurement functionality
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.getActive = function() { return false; };

/**
 * Gets all interaction measurements
 * @param {boolean} bFinalize finalize the current pending interaction so that it is contained in the returned array
 * @return {object[]} all interaction measurements
 * @public
 * @since 1.34.0
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.getAllInteractionMeasurements = function(bFinalize) { return new Array(); };

/**
 * Gets all performance measurements
 * 
 * @param {boolean} [bCompleted] Whether only completed measurements should be returned, if explicitly set to false only incomplete measurements are returned
 * @return {object[]} current array with measurements containing id, info and start-timestamp, end-timestamp, time, duration, categories
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.getAllMeasurements = function(bCompleted) { return new Array(); };

/**
 * Gets a performance measure
 * 
 * @param {string} sId ID of the measurement
 * @return {object} current measurement containing id, info and start-timestamp, end-timestamp, time, duration (false if error)
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.getMeasurement = function(sId) { return new Object(); };

/**
 * Gets the current request timings array for type 'resource' safely
 * 
 * @return {object[]} array of performance timing objects
 * @public
 * @since 1.34.0
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.getRequestTimings = function() { return new Array(); };

/**
 * Pauses a performance measure
 * 
 * @param {string} sId ID of the measurement
 * @return {object} current measurement containing id, info and start-timestamp, pause-timestamp (false if error)
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.pause = function(sId) { return new Object(); };

/**
 * Registers an average measurement for a given objects method
 * 
 * @param {string} sId the id of the measurement
 * @param {object} oObject the object of the method
 * @param {string} sMethod the name of the method
 * @param {string[]} [aCategories = ["javascript"]] An optional categories list for the measurement
 * 
 * @returns {boolean} true if the registration was successful
 * @public
 * @since 1.34.0
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.registerMethod = function(sId,oObject,sMethod,aCategories) { return false; };

/**
 * Removes a performance measure
 * 
 * @param {string} sId ID of the measurement
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.remove = function(sId) {  };

/**
 * Resumes a performance measure
 * 
 * @param {string} sId ID of the measurement
 * @return {object} current measurement containing id, info and start-timestamp, resume-timestamp (false if error)
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.resume = function(sId) { return new Object(); };

/**
 * Activates or deactivates the performance measure functionality
 * Optionally a category or list of categories can be passed to restrict measurements to certain categories
 * like "javascript", "require", "xmlhttprequest", "render"
 * @param {boolean} bOn state of the perfomance measurement functionality to set
 * @param {string | string[]}  An optional list of categories that should be measured
 * 
 * @return {boolean} current state of the perfomance measurement functionality
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.setActive = function(bOn,An) { return false; };

/**
 * Sets the request buffer size for the measurement safely
 * 
 * @param {int} iSize size of the buffer
 * @public
 * @since 1.34.0
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.setRequestBufferSize = function(iSize) {  };

/**
 * Starts a performance measure.
 * Optionally a category or list of categories can be passed to allow filtering of measurements.
 * 
 * @param {string} sId ID of the measurement
 * @param {string} sInfo Info for the measurement
 * @param {string | string[]} [aCategories = "javascript"] An optional list of categories for the measure
 * 
 * @return {object} current measurement containing id, info and start-timestamp (false if error)
 * @public
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.start = function(sId,sInfo,aCategories) { return new Object(); };

/**
 * Start an interaction measurements
 * 
 * @param {string} sType type of the event which triggered the interaction
 * @param {object} oSrcElement the control on which the interaction was triggered
 * @public
 * @since 1.34.0
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.startInteraction = function(sType,oSrcElement) {  };

/**
 * Unregisters all average measurements
 * @public
 * @since 1.34.0
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.unregisterAllMethods = function() {  };

/**
 * Unregisters an average measurement for a given objects method
 * 
 * @param {string} sId the id of the measurement
 * @param {object} oObject the object of the method
 * @param {string} sMethod the name of the method
 * 
 * @returns {boolean} true if the unregistration was successful
 * @public
 * @since 1.34.0
 * 
 * @memberof jQuery.sap.measure
 */
jQuery.sap.measure.prototype.unregisterMethod = function(sId,oObject,sMethod) { return false; };


// ---- jQuery.sap.PseudoEvents --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.sap.PseudoEvents.toString = function() { return ""; };

// ---- jQuery.sap.storage --------------------------------------------------------------------------

/**
 * Deletes all the entries saved in the session (Independent of the current Storage instance!).
 * 
 * CAUTION: This method should be called only in very particular situations,
 * when a global erasing of data is required. Given that the method deletes
 * the data saved under any ID, it should not be called when managing data
 * for specific controls.
 * 
 * @return {boolean} true if execution of removal
 * was successful or the data to remove doesn't exist,
 * and false if the feature is unavailable or a problem occurred
 * @public
 * 
 * @memberof jQuery.sap.storage
 */
jQuery.sap.storage.clear = function() { return false; };

/**
 * Retrieves the state string stored in the session under the key
 * sStorageKeyPrefix + sId.
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * 
 * @param {string} sId Id for the state to retrieve
 * @return {string} the string from the storage, if the retrieval
 * was successful, and null otherwise
 * @public
 * 
 * @memberof jQuery.sap.storage
 */
jQuery.sap.storage.get = function(sId) { return ""; };

/**
 * Returns the type of the storage.
 * @returns {jQuery.sap.storage.Type | string} the type of the storage or "unknown"
 * @public
 * 
 * @memberof jQuery.sap.storage
 */
jQuery.sap.storage.getType = function() { return new jQuery.sap.storage.Type(); };

/**
 * Returns whether the given storage is suppported.
 * 
 * @return {boolean} true if storage is supported, false otherwise (e.g. due to browser security settings)
 * @public
 * 
 * @memberof jQuery.sap.storage
 */
jQuery.sap.storage.isSupported = function() { return false; };

/**
 * Stores the passed state string in the session, under the key
 * sStorageKeyPrefix + sId.
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * 
 * @param {string} sId Id for the state to store
 * @param {string} sStateToStore content to store
 * @return {boolean} true if the data were successfully stored, false otherwise
 * @public
 * 
 * @memberof jQuery.sap.storage
 */
jQuery.sap.storage.put = function(sId,sStateToStore) { return false; };

/**
 * Deletes the state string stored in the session under the key
 * sStorageKeyPrefix + sId.s
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * 
 * @param {string} sId Id for the state to delete
 * @return {boolean} true if the deletion
 * was successful or the data doesn't exist under the specified key,
 * and false if the feature is unavailable or a problem occurred
 * @public
 * 
 * @memberof jQuery.sap.storage
 */
jQuery.sap.storage.remove = function(sId) { return false; };

/**
 * Deletes all state strings stored in the session under the key prefix
 * sStorageKeyPrefix + sIdPrefix.
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * 
 * @param {string} sIdPrefix Id prefix for the states to delete
 * @return {boolean} true if the deletion
 * was successful or the data doesn't exist under the specified key,
 * and false if the feature is unavailable or a problem occurred
 * @since 1.13.0
 * @public
 * 
 * @memberof jQuery.sap.storage
 */
jQuery.sap.storage.removeAll = function(sIdPrefix) { return false; };


// ---- jQuery.sap.storage.Storage --------------------------------------------------------------------------

/**
 * Deletes all the entries saved in the session (Independent of the current Storage instance!).
 * 
 * CAUTION: This method should be called only in very particular situations,
 * when a global erasing of data is required. Given that the method deletes
 * the data saved under any ID, it should not be called when managing data
 * for specific controls.
 * 
 * @return {boolean} true if execution of removal
 * was successful or the data to remove doesn't exist,
 * and false if the feature is unavailable or a problem occurred
 * @public
 * 
 */
jQuery.sap.storage.Storage.prototype.clear = function() { return false; };

/**
 * Retrieves the state string stored in the session under the key
 * sStorageKeyPrefix + sId.
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * 
 * @param {string} sId Id for the state to retrieve
 * @return {string} the string from the storage, if the retrieval
 * was successful, and null otherwise
 * @public
 * 
 */
jQuery.sap.storage.Storage.prototype.get = function(sId) { return ""; };

/**
 * Returns the type of the storage.
 * @returns {jQuery.sap.storage.Type | string} the type of the storage or "unknown"
 * @public
 * 
 */
jQuery.sap.storage.Storage.prototype.getType = function() { return new jQuery.sap.storage.Type(); };

/**
 * Returns whether the given storage is suppported.
 * 
 * @return {boolean} true if storage is supported, false otherwise (e.g. due to browser security settings)
 * @public
 * 
 */
jQuery.sap.storage.Storage.prototype.isSupported = function() { return false; };

/**
 * Stores the passed state string in the session, under the key
 * sStorageKeyPrefix + sId.
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * 
 * @param {string} sId Id for the state to store
 * @param {string} sStateToStore content to store
 * @return {boolean} true if the data were successfully stored, false otherwise
 * @public
 * 
 */
jQuery.sap.storage.Storage.prototype.put = function(sId,sStateToStore) { return false; };

/**
 * Deletes the state string stored in the session under the key
 * sStorageKeyPrefix + sId.s
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * 
 * @param {string} sId Id for the state to delete
 * @return {boolean} true if the deletion
 * was successful or the data doesn't exist under the specified key,
 * and false if the feature is unavailable or a problem occurred
 * @public
 * 
 */
jQuery.sap.storage.Storage.prototype.remove = function(sId) { return false; };

/**
 * Deletes all state strings stored in the session under the key prefix
 * sStorageKeyPrefix + sIdPrefix.
 * 
 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
 * 
 * @param {string} sIdPrefix Id prefix for the states to delete
 * @return {boolean} true if the deletion
 * was successful or the data doesn't exist under the specified key,
 * and false if the feature is unavailable or a problem occurred
 * @since 1.13.0
 * @public
 * 
 */
jQuery.sap.storage.Storage.prototype.removeAll = function(sIdPrefix) { return false; };


// ---- jQuery.sap.storage.Type --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.sap.storage.Type.toString = function() { return ""; };

// ---- jQuery.sap.util.Properties --------------------------------------------------------------------------

/**
 * Creates and returns a clone of the property collection.
 * @returns {jQuery.sap.util.Properties} A clone of the property collection
 * @public
 * 
 */
jQuery.sap.util.Properties.prototype.clone = function() { return new jQuery.sap.util.Properties(); };

/**
 * Returns an array of all keys in the property collection.
 * @returns {string[]} All keys in the property collection
 * @public
 * 
 */
jQuery.sap.util.Properties.prototype.getKeys = function() { return new Array(); };

/**
 * Returns the value for the given key or <code>null</code> if the collection has no value for the key.
 * 
 * Optionally, a default value can be given which will be returned if the collection does not contain
 * a value for the key; only non-empty default values are supported.
 * 
 * @param {string} sKey Key to return the value for
 * @param {string} [sDefaultValue=null] Optional, a default value that will be returned
 *    if the requested key is not in the collection
 * @returns {string} Value for the given key or the default value or <code>null</code>
 *    if no default value or a falsy default value was given
 * @public
 * 
 */
jQuery.sap.util.Properties.prototype.getProperty = function(sKey,sDefaultValue) { return ""; };

/**
 * Stores or changes the value for the given key in the collection.
 * 
 * If the given value is not a string, the collection won't be modified.
 * The key is always cast to a string.
 * 
 * @param {string} sKey Key of the property
 * @param {string} sValue String value for the key
 * @public
 * 
 */
jQuery.sap.util.Properties.prototype.setProperty = function(sKey,sValue) {  };


// ---- jQuery.sap.util.ResourceBundle --------------------------------------------------------------------------

/**
 * Returns a locale-specific string value for the given key sKey.
 * 
 * The text is searched in this resource bundle according to the fallback chain described in
 * {@link jQuery.sap.util.ResourceBundle}. If no text could be found, the key itself is used as text.
 * 
 * If the second parameter<code>aArgs</code> is given, then any placeholder of the form "{<i>n</i>}"
 * (with <i>n</i> being an integer) is replaced by the corresponding value from <code>aArgs</code>
 * with index <i>n</i>.  Note: This replacement is applied to the key if no text could be found.
 * For more details on the replacement mechanism refer to {@link jQuery.sap.formatMessage}.
 * 
 * @param {string} sKey Key to retrieve the text for
 * @param {string[]} [aArgs] List of parameter values which should replace the placeholders "{<i>n</i>}"
 *     (<i>n</i> is the index) in the found locale-specific string value. Note that the replacement is done
 *     whenever <code>aArgs</code> is given, no matter whether the text contains placeholders or not
 *     and no matter whether <code>aArgs</code> contains a value for <i>n</i> or not.
 * @returns {string} The value belonging to the key, if found; otherwise the key itself.
 * @public
 * 
 */
jQuery.sap.util.ResourceBundle.prototype.getText = function(sKey,aArgs) { return ""; };

/**
 * Checks whether a text for the given key can be found in the first loaded
 * resource bundle or not. Neither the custom resource bundles nor the
 * fallback chain will be processed.
 * 
 * This method allows to check for the existence of a text without triggering
 * requests for the fallback locales.
 * 
 * When requesting the resource bundle asynchronously this check must only be
 * used after the resource bundle has been loaded.
 * 
 * @param {string} sKey Key to check
 * @returns {boolean} true if the text has been found in the concrete bundle
 * @public
 * 
 */
jQuery.sap.util.ResourceBundle.prototype.hasText = function(sKey) { return false; };


// ---- jQuery.sap.util.UriParameters --------------------------------------------------------------------------


// ---- jQuery.sap.Version --------------------------------------------------------------------------

/**
 * Returns a Version instance created from the given parameters.
 * 
 * This function can either be called as a constructor (using <code>new</code>) or as a normal function.
 * It always returns an immutable Version instance.
 * 
 * The parts of the version number (major, minor, patch, suffix) can be provided in several ways:
 * <ul>
 * <li>Version("1.2.3-SNAPSHOT")    - as a dot-separated string. Any non-numerical char or a dot followed
 *                                    by a non-numerical char starts the suffix portion. Any missing major,
 *                                    minor or patch versions will be set to 0.</li>
 * <li>Version(1,2,3,"-SNAPSHOT")   - as individual parameters. Major, minor and patch must be integer numbers
 *                                    or empty, suffix must be a string not starting with digits.</li>
 * <li>Version([1,2,3,"-SNAPSHOT"]) - as an array with the individual parts. The same type restrictions apply
 *                                    as before.</li>
 * <li>Version(otherVersion)        - as a Version instance (cast operation). Returns the given instance instead
 *                                    of creating a new one.</li>
 * </ul>
 * 
 * To keep the code size small, this implementation mainly validates the single string variant.
 * All other variants are only validated to some degree. It is the responsibility of the caller to
 * provide proper parts.
 * 
 * @param {int|string|any[]|jQuery.sap.Version} vMajor the major part of the version (int) or any of the single
 *        parameter variants explained above.
 * @param {int} iMinor the minor part of the version number
 * @param {int} iPatch the patch part of the version number
 * @param {string} sSuffix the suffix part of the version number
 * @return {jQuery.sap.Version} the version object as determined from the parameters
 * 
 * @class Represents a version consisting of major, minor, patch version and suffix, e.g. '1.2.7-SNAPSHOT'.
 * 
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version = function(vMajor,iMinor,iPatch,sSuffix) {};
/**
 * Compares this version with a given one.
 * 
 * The version with which this version should be compared can be given as a <code>jQuery.sap.Version</code> instance,
 * as a string (e.g. <code>v.compareto("1.4.5")</code>). Or major, minor, patch and suffix values can be given as
 * separate parameters (e.g. <code>v.compareTo(1, 4, 5)</code>) or in an array (e.g. <code>v.compareTo([1, 4, 5])</code>).
 * 
 * @return {int} 0, if the given version is equal to this version, a negative value if the given other version is greater
 *               and a positive value otherwise
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version.prototype.compareTo = function() { return 0; };

/**
 * Returns the major version part of this version.
 * 
 * @return {int} the major version part of this version
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version.prototype.getMajor = function() { return 0; };

/**
 * Returns the minor version part of this version.
 * 
 * @return {int} the minor version part of this version
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version.prototype.getMinor = function() { return 0; };

/**
 * Returns the patch (or micro) version part of this version.
 * 
 * @return {int} the patch version part of this version
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version.prototype.getPatch = function() { return 0; };

/**
 * Returns the version suffix of this version.
 * 
 * @return {string} the version suffix of this version
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version.prototype.getSuffix = function() { return ""; };

/**
 * Checks whether this version is in the range of the given interval (start inclusive, end exclusive).
 * 
 * The boundaries against which this version should be checked can be given as  <code>jQuery.sap.Version</code>
 * instances (e.g. <code>v.inRange(v1, v2)</code>), as strings (e.g. <code>v.inRange("1.4", "2.7")</code>)
 * or as arrays (e.g. <code>v.inRange([1,4], [2,7])</code>).
 * 
 * @param {string|any[]|jQuery.sap.Version} vMin the start of the range (inclusive)
 * @param {string|any[]|jQuery.sap.Version} vMax the end of the range (exclusive)
 * @return {boolean} <code>true</code> if this version is greater or equal to <code>vMin</code> and smaller
 *                   than <code>vMax</code>, <code>false</code> otherwise.
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version.prototype.inRange = function(vMin,vMax) { return false; };

/**
 * Returns a string representation of this version.
 * 
 * @return {string} a string representation of this version.
 * @public
 * @since 1.15.0
 * 
 */
jQuery.sap.Version.prototype.toString = function() { return ""; };


// ---- jQuery.support --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
jQuery.support.toString = function() { return ""; };

// ---- sap --------------------------------------------------------------------------


// ---- sap.ui --------------------------------------------------------------------------

/**
 * Creates a new instance of a <code>Component</code> or returns the instance
 * of an existing <code>Component</code>.
 * 
 * If you want to look up an existing <code>Component</code> you can call
 * this function with a Component ID as parameter:
 * <pre>
 *   var oComponent = sap.ui.component(sComponentId);
 * </pre>
 * 
 * To create a new instance of a component you pass a component configuration
 * object into this function:
 * <pre>
 *   var oComponent = sap.ui.component({
 *     name: "my.Component",
 *     url: "my/component/location",
 *     id: "myCompId1"
 *   });
 * </pre>
 * 
 * @param {string|object} vConfig ID of an existing Component or the configuration object to create the Component
 * @param {string} vConfig.name Name of the Component to load
 * @param {string} [vConfig.url] Alternate location from where to load the Component. If a <code>manifestUrl</code> is given, this URL specifies the location of the final component defined via that manifest, otherwise it specifies the location of the component defined via its name <code>vConfig.name>/code>.
 * @param {object} [vConfig.componentData] Initial data of the Component (@see sap.ui.core.Component#getComponentData)
 * @param {string} [vConfig.id] sId of the new Component
 * @param {object} [vConfig.settings] Settings of the new Component
 * @param {boolean} [vConfig.async=false] Indicates whether the Component creation should be done asynchronously (experimental setting)
 * @param {object} [vConfig.asyncHints] Hints for the asynchronous loading (experimental setting)
 * @param {string[]} [vConfig.asyncHints.libs] Libraries that should be (pre-)loaded before the Component (experimental setting)
 * @param {string[]} [vConfig.asyncHints.components] Components that should be (pre-)loaded before the Component (experimental setting)
 * @param {Promise|Promise[]} [vConfig.asyncHints.waitFor] @since 1.37.0 a <code>Promise</code> or and array of <code>Promise</code>s for which the Component instantiation should wait (experimental setting)
 * @param {string} [vConfig.manifestUrl] @since 1.33.0 Determines whether the component should be loaded and defined
 *                                       via the <code>manifest.json</code>
 * @param {string} [vConfig.manifestFirst] @since 1.33.0 defines whether the manifest is loaded before or after the
 *                                         Component controller. Defaults to <code>sap.ui.getCore().getConfiguration().getManifestFirst()</code>
 * @param {string} [vConfig.handleValidation=false] If set to <code>TRUE</code> validation of the component is handled by the <code>MessageManager</code>
 * @return {sap.ui.core.Component|Promise} the Component instance or a Promise in case of asynchronous loading
 * 
 * @public
 * @static
 * @since 1.15.0
 * @experimental Since 1.27.0. Support for asyncHints is still experimental and might be modified or removed completely again.
 *   It must not be used in productive code, except in code delivered by the UI5 teams. The synchronous usage of the API is
 *   not experimental and can be used without restrictions.
 * 
 * @memberof sap.ui
 */
sap.ui.component = function(vConfig) { return new sap.ui.core.Component(); };

/**
 * Defines a controller class or creates an instance of an already defined controller class.
 * 
 * When a name and a controller implementation object is given, a new controller class
 * of the given name is created. The members of the implementation object will be copied
 * into each new instance of that controller class (shallow copy).
 * <b>Note</b>: as the members are shallow copied, controller instances will share all object values.
 * This might or might not be what applications expect.
 * 
 * If only a name is given, a new instance of the named controller class is returned.
 * 
 * @param {string} sName The controller name
 * @param {object} [oControllerImpl] An object literal defining the methods and properties of the controller
 * @return {void | sap.ui.core.mvc.Controller} void or the new controller instance, depending on the use case
 * @public
 * 
 * @memberof sap.ui
 */
sap.ui.controller = function(sName,oControllerImpl) { return null; };

/**
 * Defines a Javascript module with its name, its dependencies and a module value or factory.
 * 
 * The typical and only suggested usage of this method is to have one single, top level call to
 * <code>sap.ui.define</code> in one Javascript resource (file). When a module is requested by its
 * name for the first time, the corresponding resource is determined from the name and the current
 * {@link jQuery.sap.registerResourcePath configuration}. The resource will be loaded and executed
 * which in turn will execute the top level <code>sap.ui.define</code> call.
 * 
 * If the module name was omitted from that call, it will be substituted by the name that was used to
 * request the module. As a preparation step, the dependencies as well as their transitive dependencies,
 * will be loaded. Then, the module value will be determined: if a static value (object, literal) was
 * given as <code>vFactory</code>, that value will be the module value. If a function was given, that
 * function will be called (providing the module values of the declared dependencies as parameters
 * to the function) and its return value will be used as module value. The framework internally associates
 * the resulting value with the module name and provides it to the original requester of the module.
 * Whenever the module is requested again, the same value will be returned (modules are executed only once).
 * 
 * <i>Example:</i><br>
 * The following example defines a module "SomeClass", but doesn't hard code the module name.
 * If stored in a file 'sap/mylib/SomeClass.js', it can be requested as 'sap/mylib/SomeClass'.
 * <pre>
 *   sap.ui.define(['./Helper', 'sap/m/Bar'], function(Helper,Bar) {
 * 
 *     // create a new class
 *     var SomeClass = function() {};
 * 
 *     // add methods to its prototype
 *     SomeClass.prototype.foo = function() {
 * 
 *         // use a function from the dependency 'Helper' in the same package (e.g. 'sap/mylib/Helper' )
 *         var mSettings = Helper.foo();
 * 
 *         // create and return an sap.m.Bar (using its local name 'Bar')
 *         return new Bar(mSettings);
 * 
 *     }
 * 
 *     // return the class as module value
 *     return SomeClass;
 * 
 *   });
 * </pre>
 * 
 * In another module or in an application HTML page, the {@link sap.ui.require} API can be used
 * to load the Something module and to work with it:
 * 
 * <pre>
 * sap.ui.require(['sap/mylib/Something'], function(Something) {
 * 
 *   // instantiate a Something and call foo() on it
 *   new Something().foo();
 * 
 * });
 * </pre>
 * 
 * <b>Module Name Syntax</b><br>
 * <code>sap.ui.define</code> uses a simplified variant of the {@link jQuery.sap.getResourcePath
 * unified resource name} syntax for the module's own name as well as for its dependencies.
 * The only difference to that syntax is, that for <code>sap.ui.define</code> and
 * <code>sap.ui.require</code>, the extension (which always would be '.js') has to be omitted.
 * Both methods always add this extension internally.
 * 
 * As a convenience, the name of a dependency can start with the segment './' which will be
 * replaced by the name of the package that contains the currently defined module (relative name).
 * 
 * It is best practice to omit the name of the defined module (first parameter) and to use
 * relative names for the dependencies whenever possible. This reduces the necessary configuration,
 * simplifies renaming of packages and allows to map them to a different namespace.
 * 
 * 
 * <b>Dependency to Modules</b><br>
 * If a dependencies array is given, each entry represents the name of another module that
 * the currently defined module depends on. All dependency modules are loaded before the value
 * of the currently defined module is determined. The module value of each dependency module
 * will be provided as a parameter to a factory function, the order of the parameters will match
 * the order of the modules in the dependencies array.
 * 
 * <b>Note:</b> the order in which the dependency modules are <i>executed</i> is <b>not</b>
 * defined by the order in the dependencies array! The execution order is affected by dependencies
 * <i>between</i> the dependency modules as well as by their current state (whether a module
 * already has been loaded or not). Neither module implementations nor dependents that require
 * a module set must make any assumption about the execution order (other than expressed by
 * their dependencies). There is, however, one exception with regard to third party libraries,
 * see the list of limitations further down below.
 * 
 * <b>Note:</b>a static module value (a literal provided to <code>sap.ui.define</code>) cannot
 * depend on the module values of the dependency modules. Instead, modules can use a factory function,
 * calculate the static value in that function, potentially based on the dependencies, and return
 * the result as module value. The same approach must be taken when the module value is supposed
 * to be a function.
 * 
 * 
 * <b>Asynchronous Contract</b><br>
 * <code>sap.ui.define</code> is designed to support real Asynchronous Module Definitions (AMD)
 * in future, although it internally still uses the the old synchronous module loading of UI5.
 * Callers of <code>sap.ui.define</code> therefore must not rely on any synchronous behavior
 * that they might observe with the current implementation.
 * 
 * For example, callers of <code>sap.ui.define</code> must not use the module value immediately
 * after invoking <code>sap.ui.define</code>:
 * 
 * <pre>
 *   // COUNTER EXAMPLE HOW __NOT__ TO DO IT
 * 
 *   // define a class Something as AMD module
 *   sap.ui.define('Something', [], function() {
 *     var Something = function() {};
 *     return Something;
 *   });
 * 
 *   // DON'T DO THAT!
 *   // accessing the class _synchronously_ after sap.ui.define was called
 *   new Something();
 * </pre>
 * 
 * Applications that need to ensure synchronous module definition or synchronous loading of dependencies
 * <b>MUST</b> use the old {@link jQuery.sap.declare} and {@link jQuery.sap.require} APIs.
 * 
 * 
 * <b>(No) Global References</b><br>
 * To be in line with AMD best practices, modules defined with <code>sap.ui.define</code>
 * should not make any use of global variables if those variables are also available as module
 * values. Instead, they should add dependencies to those modules and use the corresponding parameter
 * of the factory function to access the module value.
 * 
 * As the current programming model and the documentation of UI5 heavily rely on global names,
 * there will be a transition phase where UI5 enables AMD modules and local references to module
 * values in parallel to the old global names. The fourth parameter of <code>sap.ui.define</code>
 * has been added to support that transition phase. When this parameter is set to true, the framework
 * provides two additional functionalities
 * 
 * <ol>
 * <li>before the factory function is called, the existence of the global parent namespace for
 *     the current module is ensured</li>
 * <li>the module value will be automatically exported under a global name which is derived from
 *     the name of the module</li>
 * </ol>
 * 
 * The parameter lets the framework know whether any of those two operations is needed or not.
 * In future versions of UI5, a central configuration option is planned to suppress those 'exports'.
 * 
 * 
 * <b>Third Party Modules</b><br>
 * Although third party modules don't use UI5 APIs, they still can be listed as dependencies in
 * a <code>sap.ui.define</code> call. They will be requested and executed like UI5 modules, but their
 * module value will be <code>undefined</code>.
 * 
 * If the currently defined module needs to access the module value of such a third party module,
 * it can access the value via its global name (if the module supports such a usage).
 * 
 * Note that UI5 temporarily deactivates an existing AMD loader while it executes third party modules
 * known to support AMD. This sounds contradictorily at a first glance as UI5 wants to support AMD,
 * but for now it is necessary to fully support UI5 applications that rely on global names for such modules.
 * 
 * Example:
 * <pre>
 *   // module 'Something' wants to use third party library 'URI.js'
 *   // It is packaged by UI5 as non-UI5-module 'sap/ui/thirdparty/URI'
 * 
 *   sap.ui.define('Something', ['sap/ui/thirdparty/URI'], function(URIModuleValue) {
 * 
 *     new URIModuleValue(); // fails as module value is undefined
 * 
 *     //global URI // (optional) declare usage of global name so that static code checks don't complain
 *     new URI(); // access to global name 'URI' works
 * 
 *     ...
 *   });
 * </pre>
 * 
 * 
 * <b>Differences to requireJS</b><br>
 * The current implementation of <code>sap.ui.define</code> differs from <code>requireJS</code>
 * or other AMD loaders in several aspects:
 * <ul>
 * <li>the name <code>sap.ui.define</code> is different from the plain <code>define</code>.
 * This has two reasons: first, it avoids the impression that <code>sap.ui.define</code> is
 * an exact implementation of an AMD loader. And second, it allows the coexistence of an AMD
 * loader (requireJS) and <code>sap.ui.define</code> in one application as long as UI5 or
 * applications using UI5 are not fully prepared to run with an AMD loader</li>
 * <li><code>sap.ui.define</code> currently loads modules with synchronous XHR calls. This is
 * basically a tribute to the synchronous history of UI5.
 * <b>BUT:</b> synchronous dependency loading and factory execution explicitly it not part of
 * contract of <code>sap.ui.define</code>. To the contrary, it is already clear and planned
 * that asynchronous loading will be implemented, at least as an alternative if not as the only
 * implementation. Also check section <b>Asynchronous Contract</b> above.<br>
 * Applications that need to ensure synchronous loading of dependencies <b>MUST</b> use the old
 * {@link jQuery.sap.require} API.</li>
 * <li><code>sap.ui.define</code> does not support plugins to use other file types, formats or
 * protocols. It is not planned to support this in future</li>
 * <li><code>sap.ui.define</code> does <b>not</b> support the 'sugar' of requireJS where CommonJS
 * style dependency declarations using <code>sap.ui.require("something")</code> are automagically
 * converted into <code>sap.ui.define</code> dependencies before executing the factory function.</li>
 * </ul>
 * 
 * 
 * <b>Limitations, Design Considerations</b><br>
 * <ul>
 * <li><b>Limitation</b>: as dependency management is not supported for Non-UI5 modules, the only way
 *     to ensure proper execution order for such modules currently is to rely on the order in the
 *     dependency array. Obviously, this only works as long as <code>sap.ui.define</code> uses
 *     synchronous loading. It will be enhanced when asynchronous loading is implemented.</li>
 * <li>it was discussed to enforce asynchronous execution of the module factory function (e.g. with a
 *     timeout of 0). But this would have invalidated the current migration scenario where a
 *     sync <code>jQuery.sap.require</code> call can load a <code>sap.ui.define</code>'ed module.
 *     If the module definition would not execute synchronously, the synchronous contract of the
 *     require call would be broken (default behavior in existing UI5 applications)</li>
 * <li>a single file must not contain multiple calls to <code>sap.ui.define</code>. Multiple calls
 *     currently are only supported in the so called 'preload' files that the UI5 merge tooling produces.
 *     The exact details of how this works might be changed in future implementations and are not
 *     yet part of the API contract</li>
 * </ul>
 * @param {string} [sModuleName] name of the module in simplified resource name syntax.
 *        When omitted, the loader determines the name from the request.
 * @param {string[]} [aDependencies] list of dependencies of the module
 * @param {function|any} vFactory the module value or a function that calculates the value
 * @param {boolean} [bExport] whether an export to global names is required - should be used by SAP-owned code only
 * @since 1.27.0
 * @public
 * @experimental Since 1.27.0 - not all aspects of sap.ui.define are settled yet. If the documented
 *        constraints and limitations are obeyed, SAP-owned code might use it. If the fourth parameter
 *        is not used and if the asynchronous contract is respected, even Non-SAP code might use it.
 * 
 * @memberof sap.ui
 */
sap.ui.define = function(sModuleName,aDependencies,vFactory,bExport) {  };

/**
 * Creates 0..n UI5 controls from an ExtensionPoint.
 * One control if the ExtensionPoint is e.g. filled with a View, zero for ExtensionPoints without configured extension and
 * n controls for multi-root Fragments as extension.
 * 
 * In JSViews, this function allows both JSON notation in aggregation content as well as adding an extension point to an aggregation after the target control
 * has already been instantiated. In the latter case the optional parameters oTargetControls and oTargetAggregation need to be specified.
 * 
 * @param {sap.ui.core.mvc.View|sap.ui.core.Fragment} oContainer The view or fragment containing the extension point
 * @param {string} sExtName The extensionName used to identify the extension point in the customizing
 * @param {createDefaultContent} [fnCreateDefaultContent] Optional callback function creating default content, returning an Array of controls. It is executed
 * 			when there's no customizing, if not provided, no default content will be rendered.
 * @param {sap.ui.core.Control} [oTargetControl] Optional - use this parameter to attach the extension point to a particular aggregation
 * @param {string} [sAggregationName] Optional - if provided along with oTargetControl, the extension point content is added to this particular aggregation at oTargetControl,
 * 			if not given, but an oTargetControl is still present, the function will attempt to add the extension point to the default aggregation of oTargetControl.
 * 			If no oTargetControl is provided, sAggregationName will also be ignored.
 * 
 * @return {sap.ui.core.Control[]} an array with 0..n controls created from an ExtensionPoint
 * @public
 * @static
 * 
 * @memberof sap.ui
 */
sap.ui.extensionpoint = function(oContainer,sExtName,fnCreateDefaultContent,oTargetControl,sAggregationName) { return new Array(); };

/**
 * Instantiate a Fragment - this method loads the Fragment content, instantiates it, and returns this content.
 * The Fragment object itself is not an entity which has further significance beyond this constructor.
 * 
 * To instantiate an existing Fragment, call this method as:
 *    sap.ui.fragment(sName, sType, [oController]);
 * The sName must correspond to an XML Fragment which can be loaded
 * via the module system (fragmentName + suffix ".fragment.[typeextension]") and which defines the Fragment content.
 * If oController is given, the (event handler) methods referenced in the Fragment will be called on this controller.
 * Note that Fragments may require a Controller to be given and certain methods to be available.
 * 
 * The Fragment types "XML", "JS" and "HTML" are available by default; additional Fragment types can be implemented
 * and added using the sap.ui.core.Fragment.registerType() function.
 * 
 * 
 * Advanced usage:
 * To instantiate a Fragment and give further configuration options, call this method as:
 *     sap.ui.fragment(oFragmentConfig, [oController]);
 * The oFragmentConfig object can have the following properties:
 * - "fragmentName": the name of the Fragment, as above
 * - "fragmentContent": the definition of the Fragment content itself. When this property is given, any given name is ignored.
 *         The type of this property depends on the Fragment type, e.g. it could be a string for XML Fragments.
 * - "type": the type of the Fragment, as above (mandatory)
 * - "id": the ID of the Fragment (optional)
 * Further properties may be supported by future or custom Fragment types. Any given properties
 * will be forwarded to the Fragment implementation.
 * 
 * If you want to give a fixed ID for the Fragment, please use the advanced version of this method call with the
 * configuration object or use the typed factories like sap.ui.xmlfragment(...) or sap.ui.jsfragment(...).
 * Otherwise the Fragment ID is generated. In any case, the Fragment ID will be used as prefix for the ID of
 * all contained controls.
 * 
 * @param {string} sName the Fragment name
 * @param {string} sType the Fragment type, e.g. "XML", "JS", or "HTML"
 * @param {sap.ui.core.mvc.Controller} [oController] the Controller which should be used by the controls in the Fragment. Note that some Fragments may not need a Controller and other may need one - and even rely on certain methods implemented in the Controller.
 * @public
 * @static
 * @return {sap.ui.core.Control|sap.ui.core.Control[]} the root Control(s) of the Fragment content
 * 
 * @memberof sap.ui
 */
sap.ui.fragment = function(sName,sType,oController) { return new sap.ui.core.Control(); };

/**
 * Retrieve the {@link sap.ui.core.Core SAPUI5 Core} instance for the current window.
 * @returns {sap.ui.core.Core} the API of the current SAPUI5 Core instance.
 * @public
 * 
 * @memberof sap.ui
 */
sap.ui.getCore = function() { return new sap.ui.core.Core(); };

/**
 * Loads the version info file (resources/sap-ui-version.json) and returns
 * it or if a library name is specified then the version info of the individual
 * library will be returned.
 * 
 * In case of the version info file is not available an error will occur when
 * calling this function.
 * 
 * @param {string|object} [mOptions] name of the library (e.g. "sap.ui.core") or an object map (see below)
 * @param {boolean} [mOptions.library] name of the library (e.g. "sap.ui.core")
 * @param {boolean} [mOptions.async=false] whether "sap-ui-version.json" should be loaded asynchronously
 * @param {boolean} [mOptions.failOnError=true] whether to propagate load errors or not (not relevant for async loading)
 * @return {object|undefined|Promise} the full version info, the library specific one,
 *                                    undefined (if library is not listed or there was an error and "failOnError" is set to "false")
 *                                    or a Promise which resolves with one of them
 * @public
 * @static
 * 
 * @memberof sap.ui
 */
sap.ui.getVersionInfo = function(mOptions) { return new Object(); };

/**
 * Instantiates an HTML-based Fragment.
 * 
 * To instantiate a Fragment, call this method as:
 *    sap.ui.htmlfragment([sId], sFragmentName, [oController]);
 * The Fragment instance ID is optional and will be used as prefix for the ID of all
 * contained controls. If no ID is passed, controls will not be prefixed.
 * The sFragmentName must correspond to an HTML Fragment which can be loaded
 * via the module system (fragmentName + ".fragment.html") and which defines the Fragment.
 * If oController is given, the methods referenced in the Fragment will be called on this controller.
 * Note that Fragments may require a Controller to be given and certain methods to be available.
 * 
 * 
 * Advanced usage:
 * To instantiate a Fragment and optionally directly give the HTML definition instead of loading it from a file,
 * call this method as:
 *     sap.ui.htmlfragment(oFragmentConfig, [oController]);
 * The oFragmentConfig object can either have a "fragmentName" or a "fragmentContent" property.
 * fragmentContent is optional and can hold the Fragment definition as XML string; if not
 * given, fragmentName must be given and the Fragment content definition is loaded by the module system.
 * Again, if oController is given, the methods referenced in the Fragment will be called on this controller.
 * 
 * @param {string} [sId] id of the newly created Fragment
 * @param {string | object} vFragment name of the Fragment (or Fragment configuration as described above, in this case no sId may be given. Instead give the id inside the config object, if desired.)
 * @param {sap.ui.core.mvc.Controller} [oController] a Controller to be used for event handlers in the Fragment
 * @public
 * @static
 * @return {sap.ui.core.Control|sap.ui.core.Control[]} the root Control(s) of the created Fragment instance
 * 
 * @memberof sap.ui
 */
sap.ui.htmlfragment = function(sId,vFragment,oController) { return new sap.ui.core.Control(); };

/**
 * Defines or creates an instance of a declarative HTML view.
 * 
 * The behavior of this method depends on the signature of the call and on the current context.
 * 
 * <ul>
 * <li>View Definition <code>sap.ui.htmlview(sId, vView)</code>: Defines a view of the given name with the given
 * implementation. sId must be the views name, vView must be an object and can contain
 * implementations for any of the hooks provided by HTMLView</li>
 * <li>View Instantiation <code>sap.ui.htmlview(sId?, vView)</code>: Creates an instance of the view with the given name (and id)</li>.
 * </ul>
 * 
 * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will
 * be created automatically.
 * 
 * @param {string} [sId] id of the newly created view, only allowed for instance creation
 * @param {string | object} vView name or implementation of the view.
 * @param {boolean} [vView.async] defines how the view source is loaded and rendered later on
 * @public
 * @static
 * @return {sap.ui.core.mvc.HTMLView | undefined} the created HTMLView instance in the creation case, otherwise undefined
 * 
 * @memberof sap.ui
 */
sap.ui.htmlview = function(sId,vView) { return new sap.ui.core.mvc.HTMLView(); };

/**
 * Defines OR instantiates an HTML-based Fragment.
 * 
 * To define a JS Fragment, call this method as:
 *    sap.ui.jsfragment(sName, oFragmentDefinition)
 * Where:
 * - "sName" is the name by which this fragment can be found and instantiated. If defined in its own file,
 *    in order to be found by the module loading system, the file location and name must correspond to sName
 *    (path + file name must be: fragmentName + ".fragment.js").
 * - "oFragmentDefinition" is an object at least holding the "createContent(oController)" method which defines
 *    the Fragment content. If given during instantiation, the createContent method receives a Controller
 *    instance (otherwise oController is undefined) and the return value must be one sap.ui.core.Control
 *    (which could have any number of children).
 * 
 * 
 * To instantiate a JS Fragment, call this method as:
 *    sap.ui.jsfragment([sId], sFragmentName, [oController]);
 * The Fragment ID is optional (generated if not given) and the Fragment implementation CAN use it
 * to make contained controls unique (this depends on the implementation: some JS Fragments may choose
 * not to support multiple instances within one application and not use the ID prefixing).
 * The sFragmentName must correspond to a JS Fragment which can be loaded
 * via the module system (fragmentName + ".fragment.js") and which defines the Fragment.
 * If oController is given, the methods referenced in the Fragment will be called on this controller.
 * Note that Fragments may require a Controller to be given and certain methods to be available.
 * 
 * 
 * @param {string} [sId] id of the newly created Fragment
 * @param {string | object} sFragmentName name of the Fragment (or Fragment configuration as described above, in this case no sId may be given. Instead give the id inside the config object, if desired)
 * @param {sap.ui.core.mvc.Controller} [oController] a Controller to be used for event handlers in the Fragment
 * @public
 * @static
 * @return {sap.ui.core.Control|sap.ui.core.Control[]} the root Control(s) of the created Fragment instance
 * 
 * @memberof sap.ui
 */
sap.ui.jsfragment = function(sId,sFragmentName,oController) { return new sap.ui.core.Control(); };

/**
 * Creates a JSON view of the given name and id.
 * 
 * The <code>viewName</code> must either correspond to a JSON module that can be loaded
 * via the module system (viewName + suffix ".view.json") and which defines the view or it must
 * be a configuration object for a view.
 * The configuration object can have a viewName, viewContent and a controller property. The viewName
 * behaves as described above, viewContent can hold the view description as JSON string or as object literal.
 * 
 * <strong>Note</strong>: when an object literal is given, it might be modified during view construction.
 * 
 * The controller property can hold a controller instance. If a controller instance is given,
 * it overrides the controller defined in the view.
 * 
 * Like with any other control, an id is optional and will be created when missing.
 * 
 * @param {string} [sId] id of the newly created view
 * @param {string | object} vView name of a view resource or view configuration as described above.
 * @param {string} [vView.viewName] name of a view resource in module name notation (without suffix)
 * @param {string|object} [vView.viewContent] view definition as a JSON string or an object literal
 * @param {boolean} [vView.async] defines how the view source is loaded and rendered later on
 * @param {sap.ui.core.mvc.Controller} [vView.controller] controller to be used for this view instance
 * @public
 * @static
 * @return {sap.ui.core.mvc.JSONView} the created JSONView instance
 * 
 * @memberof sap.ui
 */
sap.ui.jsonview = function(sId,vView) { return new sap.ui.core.mvc.JSONView(); };

/**
 * Defines or creates an instance of a JavaScript view.
 * 
 * The behavior of this method depends on the signature of the call and on the current context.
 * 
 * <ul>
 * <li>View Definition <code>sap.ui.jsview(sId, vView)</code>: Defines a view of the given name with the given
 * implementation. sId must be the view's name, vView must be an object and can contain
 * implementations for any of the hooks provided by JSView</li>
 * 
 * <li>View Instantiation <code>sap.ui.jsview(sId?, vView)</code>: Creates an instance of the view with the given name (and id).
 * If no view implementation has been defined for that view name, a JavaScript module with the same name and with suffix "view.js" will be loaded
 * and executed. The module should contain a view definition (1st. variant above). </li>
 * </ul>
 * 
 * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will
 * be created automatically.
 * 
 * @param {string} [sId] id of the newly created view, only allowed for instance creation
 * @param {string | object} vView name or implementation of the view.
 * @param {boolean} [bAsync] defines how the view source is loaded and rendered later on (only relevant for instantiation, ignored for everything else)
 * @public
 * @static
 * @return {sap.ui.core.mvc.JSView | undefined} the created JSView instance in the creation case, otherwise undefined
 * 
 * @memberof sap.ui
 */
sap.ui.jsview = function(sId,vView,bAsync) { return new sap.ui.core.mvc.JSView(); };

/**
 * Creates a lazy loading stub for a given class <code>sClassName</code>.
 * 
 * If the class has been loaded already, nothing is done. Otherwise a stub object
 * or constructor and - optionally - a set of stub methods are created.
 * All created stubs will load the corresponding module on execution
 * and then delegate to their counterpart in the loaded module.
 * 
 * When no methods are given or when the list of methods contains the special name
 * "new" (which is an operator can't be used as method name in JavaScript), then a
 * stub <b>constructor</b> for class <code>sClassName</code> is created.
 * Otherwise, a plain object is created.
 * 
 * <b>Note</b>: Accessing any stub as a plain object without executing it (no matter
 * whether it is a function or an object) won't load the module and therefore most like
 * won't work as expected. This is a fundamental restriction of the lazy loader approach.
 * It could only be fixed with JavaScript 1.5 features that are not available in all
 * UI5 target browsers (e.g. not in IE8).
 * 
 * <b>Note</b>: As a side effect of this method, the namespace containing the given
 * class is created <b>immediately</b>.
 * 
 * @param {string} sClassName Fully qualified name (dot notation) of the class that should be prepared
 * @param {string} [sMethods='new'] space separated list of additional (static) methods that should be created as stubs
 * @param {string} [sModuleName] name of the module to load, defaults to the class name
 * @public
 * @static
 * 
 * @memberof sap.ui
 */
sap.ui.lazyRequire = function(sClassName,sMethods,sModuleName) {  };

/**
 * Redirects access to resources that are part of the given namespace to a location
 * relative to the assumed <b>application root folder</b>.
 * 
 * Any UI5 managed resource (view, controller, control, JavaScript module, CSS file, etc.)
 * whose resource name starts with <code>sNamespace</code>, will be loaded from an
 * equally named subfolder of the <b>application root folder</b>.
 * If the resource name consists of multiple segments (separated by a dot), each segment
 * is assumed to represent an individual folder. In other words: when a resource name is
 * converted to a URL, any dots ('.') are converted to slashes ('/').
 * 
 * <b>Limitation:</b> For the time being, the <b>application root folder</b> is assumed to be
 * the same as the folder where the current page resides in.
 * 
 * Usage sample:
 * <pre>
 *   // Let UI5 know that resources, whose name starts with "com.mycompany.myapp"
 *   // should be loaded from the URL location "./com/mycompany/myapp"
 *   sap.ui.localResources("com.mycompany.myapp");
 * 
 *   // The following call implicitly will use the mapping done by the previous line
 *   // It will load a view from ./com/mycompany/myapp/views/Main.view.xml
 *   sap.ui.view({ view : "com.mycompany.myapp.views.Main", type : sap.ui.core.mvc.ViewType.XML});
 * </pre>
 * 
 * When applications need a more flexible mapping between resource names and their location,
 * they can use {@link jQuery.sap.registerModulePath}.
 * 
 * It is intended to make this configuration obsolete in future releases, but for the time
 * being, applications must call this method when they want to store resources relative to
 * the assumed application root folder.
 * 
 * @param {string} sNamespace Namespace prefix for which to load resources relative to the application root folder
 * @public
 * @static
 * @see jQuery.sap.registerModulePath
 * 
 * @memberof sap.ui
 */
sap.ui.localResources = function(sNamespace) {  };

/**
 * Resolves one or more module dependencies.
 * 
 * <b>Synchronous Retrieval of a Single Module Value</b>
 * 
 * When called with a single string, that string is assumed to be the name of an already loaded
 * module and the value of that module is returned. If the module has not been loaded yet,
 * or if it is a Non-UI5 module (e.g. third party module), <code>undefined</code> is returned.
 * This signature variant allows synchronous access to module values without initiating module loading.
 * 
 * Sample:
 * <pre>
 *   var JSONModel = sap.ui.require("sap/ui/model/json/JSONModel");
 * </pre>
 * 
 * For modules that are known to be UI5 modules, this signature variant can be used to check whether
 * the module has been loaded.
 * 
 * <b>Asynchronous Loading of Multiple Modules</b>
 * 
 * If an array of strings is given and (optionally) a callback function, then the strings
 * are interpreted as module names and the corresponding modules (and their transitive
 * dependencies) are loaded. Then the callback function will be called asynchronously.
 * The module values of the specified modules will be provided as parameters to the callback
 * function in the same order in which they appeared in the dependencies array.
 * 
 * The return value for the asynchronous use case is <code>undefined</code>.
 * 
 * <pre>
 *   sap.ui.require(['sap/ui/model/json/JSONModel', 'sap/ui/core/UIComponent'], function(JSONModel,UIComponent) {
 * 
 *     var MyComponent = UIComponent.extend('MyComponent', {
 *       ...
 *     });
 *     ...
 * 
 *   });
 * </pre>
 * 
 * This method uses the same variation of the {@link jQuery.sap.getResourcePath unified resource name}
 * syntax that {@link sap.ui.define} uses: module names are specified without the implicit extension '.js'.
 * Relative module names are not supported.
 * 
 * @param {string|string[]} vDependencies dependency (dependencies) to resolve
 * @param {function} [fnCallback] callback function to execute after resolving an array of dependencies
 * @returns {any|undefined} a single module value or undefined
 * @public
 * @experimental Since 1.27.0 - not all aspects of sap.ui.require are settled yet. E.g. the return value
 * of the asynchronous use case might change (currently it is undefined).
 * 
 * @memberof sap.ui
 */
sap.ui.require = function(vDependencies,fnCallback) { return null; };

/**
 * Returns the URL of a resource that belongs to the given library and has the given relative location within the library.
 * This is mainly meant for static resources like images that are inside the library.
 * It is NOT meant for access to JavaScript modules or anything for which a different URL has been registered with jQuery.sap.registerModulePath(). For
 * these cases use jQuery.sap.getModulePath().
 * It DOES work, however, when the given sResourcePath starts with "themes/" (= when it is a theme-dependent resource). Even when for this theme a different
 * location outside the normal library location is configured.
 * 
 * @param {string} sLibraryName the name of a library, like "sap.ui.commons"
 * @param {string} sResourcePath the relative path of a resource inside this library, like "img/mypic.png" or "themes/my_theme/img/mypic.png"
 * @returns {string} the URL of the requested resource
 * 
 * @static
 * @public
 * 
 * @memberof sap.ui
 */
sap.ui.resource = function(sLibraryName,sResourcePath) { return ""; };

/**
 * Displays the control tree with the given root inside the area of the given
 * DOM reference (or inside the DOM node with the given ID) or in the given Control.
 * 
 * Example:
 * <pre>
 *   &lt;div id="SAPUI5UiArea">&lt;/div>
 *   &lt;script>
 *     var oRoot = new sap.ui.commons.Label();
 *     oRoot.setText("Hello world!");
 *     sap.ui.setRoot("SAPUI5UiArea", oRoot);
 *   &lt;/script>
 * </pre>
 * <p>
 * 
 * This is a shortcut for <code>sap.ui.getCore().setRoot()</code>.
 * 
 * Internally, if a string is given that does not identify a UIArea or a control
 * then implicitly a new <code>UIArea</code> is created for the given DOM reference
 * and the given control is added.
 * 
 * @param {string|Element|sap.ui.core.Control} oDomRef a DOM Element or Id String of the UIArea
 * @param {sap.ui.base.Interface | sap.ui.core.Control}
 *            oControl the Control that should be added to the <code>UIArea</code>.
 * @public
 * @deprecated Use function <code>placeAt</code> of <code>sap.ui.core.Control</code> instead.
 * 
 * @memberof sap.ui
 */
sap.ui.setRoot = function(oDomRef,oControl) {  };

/**
 * Creates a Template for the given ID, DOM reference or a configuration object.
 * 
 * If no parameter is defined, this function makes a lookup of DOM elements
 * which are specifying a type attribute. If the value of this type attribute
 * matches a registered type then the content of this DOM element will be
 * used to create a new <code>Template</code> instance.
 * 
 * If you want to lookup all kind of existing and known templates and parse them
 * directly you can simply call:
 * <pre>
 *   sap.ui.template();
 * </pre>
 * 
 * To parse a concrete DOM element you can do so by using this function in the
 * following way:
 * <pre>
 *   sap.ui.template("theTemplateId");
 * </pre>
 * 
 * Or you can pass the reference to a DOM element and use this DOM element as
 * a source for the template:
 * <pre>
 *   sap.ui.template(oDomRef);
 * </pre>
 * 
 * The last option to use this function is to pass the information via a
 * configuration object. This configuration object can be used to pass a
 * context for the templating framework when compiling the template:
 * <pre>
 *   var oTemplateById = sap.ui.template({
 *     id: "theTemplateId",
 *     context: { ... }
 *   });
 * 
 *   var oTemplateByDomRef = sap.ui.template({
 *     domref: oDomRef,
 *     context: { ... }
 *   });
 * </pre>
 * 
 * It can also be used to load a template from another file:
 * <pre>
 *   var oTemplate = sap.ui.template({
 *     id: "myTemplate",
 *     src: "myTemplate.tmpl"
 *   });
 * 
 *   var oTemplateWithContext = sap.ui.template({
 *     id: "myTemplate",
 *     src: "myTemplate.tmpl",
 *     context: { ... }
 *   });
 * </pre>
 * 
 * @param {string|DomRef|object} [oTemplate] the ID or the DOM reference to the template to lookup or a configuration object containing the src, type and eventually the ID of the Template.
 * @param {string} oTemplate.id - the ID of the Template / the ID  of the DOM element containing the source of the Template</li>
 * @param {Element} oTemplate.domref - the DOM element containing the source of the Template</li>
 * @param {string} [oTemplate.type] - the type of the Template</li>
 * @param {string} [oTemplate.src] - the URL to lookup the template</li> (<i>experimental!</i>)
 * @param {string} oTemplate.control - the fully qualified name of the control to declare</li> (<i>experimental!</i>)
 * @return {sap.ui.core.tmpl.Template | sap.ui.core.tmpl.Template[]} the created Template instance
 *         or in case of usage without parameters any array of templates is returned
 * 
 * @public
 * @static
 * 
 * @memberof sap.ui
 */
sap.ui.template = function(oTemplate) { return new sap.ui.core.tmpl.Template(); };

/**
 * Defines or creates an instance of a template view.
 * 
 * The behavior of this method depends on the signature of the call and on the current context.
 * 
 * <ul>
 * <li>View Definition <code>sap.ui.templateview(sId, vView)</code>: Defines a view of the given name with the given
 * implementation. sId must be the views name, vView must be an object and can contain
 * implementations for any of the hooks provided by templateview</li>
 * <li>View Instantiation <code>sap.ui.templateview(sId?, vView)</code>: Creates an instance of the view with the given name (and id)</li>.
 * </ul>
 * 
 * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will
 * be created automatically.
 * 
 * @param {string} [sId] id of the newly created view, only allowed for instance creation
 * @param {string | object} vView name or implementation of the view.
 * @public
 * @static
 * @return {sap.ui.core.mvc.TemplateView | undefined} the created TemplateView instance in the creation case, otherwise undefined
 * 
 * @memberof sap.ui
 */
sap.ui.templateview = function(sId,vView) { return new sap.ui.core.mvc.TemplateView(); };

/**
 * Creates a view of the given type, name and with the given id.
 * 
 * The <code>vView</code> configuration object can have the following properties for the view
 * instantiation:
 * <ul>
 * <li>The ID <code>vView.id</code> specifies an ID for the View instance. If no ID is given,
 * an ID will be generated.</li>
 * <li>The view name <code>vView.viewName</code> corresponds to an XML module that can be loaded
 * via the module system (vView.viewName + suffix ".view.xml")</li>
 * <li>The controller instance <code>vView.controller</code> must be a valid controller implementation.
 * The given controller instance overrides the controller defined in the view definition</li>
 * <li>The view type <code>vView.type</code> specifies what kind of view will be instantiated. All valid
 * view types are listed in the enumeration sap.ui.core.mvc.ViewType.</li>
 * <li>The view data <code>vView.viewData</code> can hold user specific data. This data is available
 * during the whole lifecycle of the view and the controller</li>
 * <li>The view loading mode <code>vView.async</code> must be a boolean and defines if the view source is loaded
 * synchronously or asynchronously. In async mode, the view is rendered empty initially, and re-rendered with the
 * loaded view content.</li>
 * <li><code>vView.preprocessors</code></li> can hold a map from the specified preprocessor type (e.g. "xml") to an array of
 * preprocessor configurations; each configuration consists of a <code>preprocessor</code> property (optional when
 * registered as on-demand preprocessor) and may contain further preprocessor-specific settings. The preprocessor can
 * be either a module name as string implementation of {@link sap.ui.core.mvc.View.Preprocessor} or a function according to
 * {@link sap.ui.core.mvc.View.Preprocessor.process}. Do not set properties starting with underscore like <code>_sProperty</code>
 * property, these are reserved for internal purposes. When several preprocessors are provided for one hook, it has to be made
 * sure that they do not conflict when being processed serially.
 * 
 * <strong>Note</strong>: These preprocessors are only available to this instance. For global or
 * on-demand availability use {@link sap.ui.core.mvc.XMLView.registerPreprocessor}.
 * 
 * <strong>Note</strong>: Please note that preprocessors in general are currently only available
 * to XMLViews.
 * 
 * <strong>Note</strong>: Preprocessors only work in async views and will be ignored when the view is instantiated
 * in sync mode by default, as this could have unexpected side effects. You may override this behaviour by setting the
 * bSyncSupport flag of the preprocessor to true.
 * 
 * @param {string} sId id of the newly created view, only allowed for instance creation
 * @param {string|object} [vView] the view name or view configuration object
 * @param {boolean} [vView.async] defines how the view source is loaded and rendered later on
 * @public
 * @static
 * @return {sap.ui.core.mvc.View} the created View instance
 * 
 * @memberof sap.ui
 */
sap.ui.view = function(sId,vView) { return new sap.ui.core.mvc.View(); };

/**
 * Instantiates an XML-based Fragment.
 * 
 * To instantiate a Fragment, call this method as:
 *    sap.ui.xmlfragment([sId], sFragmentName, [oController]);
 * The Fragment instance ID is optional and will be used as prefix for the ID of all
 * contained controls. If no ID is passed, controls will not be prefixed.
 * The sFragmentName must correspond to an XML Fragment which can be loaded
 * via the module system (fragmentName + ".fragment.xml") and which defines the Fragment.
 * If oController is given, the methods referenced in the Fragment will be called on this controller.
 * Note that Fragments may require a Controller to be given and certain methods to be available.
 * 
 * 
 * Advanced usage:
 * To instantiate a Fragment and optionally directly give the XML definition instead of loading it from a file,
 * call this method as:
 *     sap.ui.xmlfragment(oFragmentConfig, [oController]);
 * The oFragmentConfig object can either have a "fragmentName" or a "fragmentContent" property.
 * fragmentContent is optional and can hold the Fragment definition as XML string; if not
 * given, fragmentName must be given and the Fragment content definition is loaded by the module system.
 * Again, if oController is given, the methods referenced in the Fragment will be called on this controller.
 * 
 * @param {string} [sId] id of the newly created Fragment
 * @param {string | object} vFragment name of the Fragment (or Fragment configuration as described above, in this case no sId may be given. Instead give the id inside the config object, if desired)
 * @param {sap.ui.core.mvc.Controller} [oController] a Controller to be used for event handlers in the Fragment
 * @public
 * @static
 * @return {sap.ui.core.Control|sap.ui.core.Control[]} the root Control(s) of the created Fragment instance
 * 
 * @memberof sap.ui
 */
sap.ui.xmlfragment = function(sId,vFragment,oController) { return new sap.ui.core.Control(); };

/**
 * Instantiates an XMLView of the given name and with the given ID.
 * 
 * The <code>viewName</code> must either correspond to an XML module that can be loaded
 * via the module system (viewName + suffix ".view.xml") and which defines the view, or it must
 * be a configuration object for a view.
 * The configuration object can have a <code>viewName</code>, <code>viewContent</code> and a <code>controller
 * </code> property. The <code>viewName</code> behaves as described above. <code>viewContent</code> is optional
 * and can hold a view description as XML string or as already parsed XML Document. If not given, the view content
 *  definition is loaded by the module system.
 * 
 * <strong>Note</strong>: if a <code>Document</code> is given, it might be modified during view construction.
 * 
 * <strong>Note:</strong><br>
 * On root level, you can only define content for the default aggregation, e.g. without adding the <code>&lt;content&gt;</code> tag. If
 * you want to specify content for another aggregation of a view like <code>dependents</code>, place it in a child
 * control's dependents aggregation or add it by using {@link sap.ui.core.mvc.XMLView#addDependent}.
 * 
 * <strong>Note</strong>: if you enable caching, you need to take care of the invalidation via keys. Automatic
 * invalidation takes only place if the UI5 version or the component descriptor (manifest.json) change. This is
 * still an experimental feature and may experience slight changes of the invalidation parameters or the cache
 * key format.
 * 
 * The controller property can hold a controller instance. If a controller instance is given,
 * it overrides the controller defined in the view.
 * 
 * Like with any other control, ID is optional and one will be created automatically.
 * 
 * @param {string} [sId] ID of the newly created view
 * @param {string | object} vView Name of the view or a view configuration object as described above
 * @param {string} [vView.viewName] Name of the view resource in module name notation (without suffix)
 * @param {string|Document} [vView.viewContent] XML string or XML document that defines the view
 * @param {boolean} [vView.async] Defines how the view source is loaded and rendered later on
 * @param {object} [vView.cache] Cache configuration, only for <code>async</code> views; caching gets active
 * when this object is provided with vView.cache.keys array; keys are used to store data in the cache and for
 * invalidation of the cache
 * @param {Array.<(string|Promise)>} [vView.cache.keys] Array with strings or Promises resolving with strings
 * @param {object} [vView.preprocessors] Preprocessors configuration, see {@link sap.ui.core.mvc.View}
 * @param {sap.ui.core.mvc.Controller} [vView.controller] Controller instance to be used for this view
 * @public
 * @static
 * @return {sap.ui.core.mvc.XMLView} the created XMLView instance
 * 
 * @memberof sap.ui
 */
sap.ui.xmlview = function(sId,vView) { return new sap.ui.core.mvc.XMLView(); };


// ---- sap.ui.app.Application --------------------------------------------------------------------------

/**
 * Abstract application class. Extend this class to create a central application class.
 * 
 * Only one instance is allowed.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRoot root} : string</li>
 * <li>{@link #getConfig config} : any</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getRootComponent rootComponent} : sap.ui.core.UIComponent</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Component#constructor sap.ui.core.Component}
 * can be used as well.
 * 
 * @param {string}
 *            [sId] optional id for the application; generated automatically if
 *            no non-empty id is given Note: this can be omitted, no matter
 *            whether <code>mSettings</code> will be given or not!
 * @param {object}
 *            [mSettings] optional map/JSON-object with initial settings for the
 *            new application instance
 * 
 * @public
 * 
 * @class Base class for application classes
 * @extends sap.ui.core.Component
 * @abstract
 * @version 1.48.4
 * @experimental Since 1.11.1. The Application class is still under construction, so some implementation details can be changed in future.
 * @deprecated Since 1.15.1. The Component class is enhanced to take care about the Application code.
 * 
 */
sap.ui.app.Application = function(sId,mSettings) {};
/**
 * Creates and returns the root component. Override this method in your application implementation, if you want to override the default creation by metadata.
 * 
 * @return {sap.ui.core.UIComponent} the root component
 * @protected
 * 
 */
sap.ui.app.Application.prototype.createRootComponent = function() { return new sap.ui.core.UIComponent(); };

/**
 * @see sap.ui.core.Component#destroy
 * @public
 * 
 */
sap.ui.app.Application.prototype.destroy = function() {  };

/**
 * Destroys the rootComponent in the aggregation {@link #getRootComponent rootComponent}.
 * @returns {sap.ui.app.Application} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.app.Application.prototype.destroyRootComponent = function() { return new sap.ui.app.Application(); };

/**
 * Creates a new subclass of class sap.ui.app.Application with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Component.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.app.Application.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getConfig config}.
 * 
 * @returns {any} Value of property <code>config</code>
 * 
 * @public
 * 
 */
sap.ui.app.Application.prototype.getConfig = function() { return null; };

/**
 * Returns a metadata object for class sap.ui.app.Application.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.app.Application.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getRoot root}.
 * 
 * @returns {string} Value of property <code>root</code>
 * 
 * @public
 * 
 */
sap.ui.app.Application.prototype.getRoot = function() { return ""; };

/**
 * Gets content of aggregation {@link #getRootComponent rootComponent}.
 * 
 * @returns {sap.ui.core.UIComponent}
 * 
 * @public
 * 
 */
sap.ui.app.Application.prototype.getRootComponent = function() { return new sap.ui.core.UIComponent(); };

/**
 * Returns the application root component.
 * 
 * @return {sap.ui.core.Control} The root component
 * 
 * @since 1.13.1
 * @public
 * @deprecated
 * 
 */
sap.ui.app.Application.prototype.getView = function() { return new sap.ui.core.Control(); };

/**
 * The main method is called when the DOM and UI5 is completely loaded. Override this method in your Application class implementation to execute code which relies on a loaded DOM / UI5.
 * 
 * @public
 * 
 */
sap.ui.app.Application.prototype.main = function() {  };

/**
 * On before exit application hook. Override this method in your Application class implementation, to handle cleanup before the real exit or to prompt a question to the user,
 * if the application should be exited.
 * 
 * @return {string} return a string if a prompt should be displayed to the user confirming closing the application (e.g. when the application is not yet saved).
 * @public
 * 
 */
sap.ui.app.Application.prototype.onBeforeExit = function() { return ""; };

/**
 * On error hook. Override this method in your Application class implementation to listen to unhandled errors.
 * 
 * @param {string} sMessage The error message.
 * @param {string} sFile The file where the error occurred
 * @param {number} iLine The line number of the error
 * @public
 * 
 */
sap.ui.app.Application.prototype.onError = function(sMessage,sFile,iLine) {  };

/**
 * On exit application hook. Override this method in your Application class implementation, to handle cleanup of the application.
 * 
 * @public
 * 
 */
sap.ui.app.Application.prototype.onExit = function() {  };

/**
 * Sets the configuration model.
 * 
 * @param {string|object|sap.ui.model.Model} vConfig the configuration model, the configuration object or a URI string to load a JSON configuration file.
 * @since 1.13.1
 * @public
 * 
 */
sap.ui.app.Application.prototype.setConfig = function(vConfig) {  };

/**
 * Sets a new value for property {@link #getRoot root}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sRoot New value for property <code>root</code>
 * @returns {sap.ui.app.Application} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.app.Application.prototype.setRoot = function(sRoot) { return new sap.ui.app.Application(); };

/**
 * Sets the aggregated {@link #getRootComponent rootComponent}.
 * @param {sap.ui.core.UIComponent} oRootComponent The rootComponent to set
 * @returns {sap.ui.app.Application} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.app.Application.prototype.setRootComponent = function(oRootComponent) { return new sap.ui.app.Application(); };


// ---- sap.ui.app.MockServer --------------------------------------------------------------------------

/**
 * Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or simple XHR calls, without
 * changing the application code. This class can also be used for qunit tests.
 * 
 * @param {string} [sId] id for the new server object; generated automatically if no non-empty id is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] optional map/JSON-object with initial property values, aggregated objects etc. for the new object
 * @param {object} [oScope] scope object for resolving string based type and formatter references in bindings
 * 
 * @class Class to mock a server
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @version 1.48.4
 * @public
 * @experimental Since 1.13.0. The mock server is still under construction, so some implementation details can be changed in future.
 * @deprecated Since 1.15.1. The mock server code has been moved to sap.ui.core.util - see {@link sap.ui.core.util.MockServer}
 * 
 */
sap.ui.app.MockServer = function(sId,mSettings,oScope) {};

// ---- sap.ui.base --------------------------------------------------------------------------


// ---- sap.ui.base.Event --------------------------------------------------------------------------

/**
 * Creates an event with the given <code>sId</code>, linked to the provided <code>oSource</code> and enriched with the <code>mParameters</code>.
 * 
 * 
 * @param {string} sId The id of the event
 * @param {sap.ui.base.EventProvider} oSource The source of the event
 * @param {object} mParameters A map of parameters for this event
 * 
 * @class An Event object consisting of an id, a source and a map of parameters
 * @extends sap.ui.base.Object
 * @implements sap.ui.base.Poolable
 * @version 1.48.4
 * @public
 * 
 */
sap.ui.base.Event = function(sId,oSource,mParameters) {};
/**
 * Cancel bubbling of the event.
 * 
 * <b>Note:</b> This function only has an effect if the bubbling of the event is supported by the event source.
 * 
 * @public
 * 
 */
sap.ui.base.Event.prototype.cancelBubble = function() {  };

/**
 * Creates a new subclass of class sap.ui.base.Event with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.base.Event.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the id of the event.
 * 
 * @return {string} The id of the event
 * @public
 * 
 */
sap.ui.base.Event.prototype.getId = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.base.Event.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.base.Event.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the value of the parameter with the given sName.
 * 
 * @param {string} sName The name of the parameter to return
 * @return {any} The value for the named parameter
 * @public
 * 
 */
sap.ui.base.Event.prototype.getParameter = function(sName) { return null; };

/**
 * Returns all parameter values of the event keyed by their names.
 * @return {map} All parameters of the event keyed by name
 * @public
 * 
 */
sap.ui.base.Event.prototype.getParameters = function() { return null; };

/**
 * Returns the event provider on which the event was fired.
 * 
 * @return {sap.ui.base.EventProvider} The source of the event
 * @public
 * 
 */
sap.ui.base.Event.prototype.getSource = function() { return new sap.ui.base.EventProvider(); };

/**
 * Prevent the default action of this event.
 * 
 * <b>Note:</b> This function only has an effect if preventing the default action of the event is supported by the event source.
 * 
 * @public
 * 
 */
sap.ui.base.Event.prototype.preventDefault = function() {  };


// ---- sap.ui.base.EventProvider --------------------------------------------------------------------------

/**
 * Creates an instance of EventProvider.
 * 
 * 
 * @class Provides eventing capabilities for objects like attaching or detaching event handlers for events which are notified when events are fired.
 * 
 * @abstract
 * @extends sap.ui.base.Object
 * @version 1.48.4
 * @constructor
 * @public
 * 
 */
sap.ui.base.EventProvider = function() {};
/**
 * Attaches an event handler to the event with the given identifier.
 * 
 * @param {string}
 *            sEventId The identifier of the event to listen for
 * @param {object}
 *            [oData] An object that will be passed to the handler along with the event object when the event is fired
 * @param {function}
 *            fnFunction The handler function to call when the event occurs. This function will be called in the context of the
 *                       <code>oListener</code> instance (if present) or on the event provider instance. The event
 *                       object ({@link sap.ui.base.Event}) is provided as first argument of the handler. Handlers must not change
 *                       the content of the event. The second argument is the specified <code>oData</code> instance (if present).
 * @param {object}
 *            [oListener] The object that wants to be notified when the event occurs (<code>this</code> context within the
 *                        handler function). If it is not specified, the handler function is called in the context of the event provider.
 * @return {sap.ui.base.EventProvider} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.EventProvider.prototype.attachEvent = function(sEventId,oData,fnFunction,oListener) { return new sap.ui.base.EventProvider(); };

/**
 * Attaches an event handler, called one time only, to the event with the given identifier.
 * 
 * When the event occurs, the handler function is called and the handler registration is automatically removed afterwards.
 * 
 * @param {string}
 *            sEventId The identifier of the event to listen for
 * @param {object}
 *            [oData] An object that will be passed to the handler along with the event object when the event is fired
 * @param {function}
 *            fnFunction The handler function to call when the event occurs. This function will be called in the context of the
 *                       <code>oListener</code> instance (if present) or on the event provider instance. The event
 *                       object ({@link sap.ui.base.Event}) is provided as first argument of the handler. Handlers must not change
 *                       the content of the event. The second argument is the specified <code>oData</code> instance (if present).
 * @param {object}
 *            [oListener] The object that wants to be notified when the event occurs (<code>this</code> context within the
 *                        handler function). If it is not specified, the handler function is called in the context of the event provider.
 * @return {sap.ui.base.EventProvider} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.EventProvider.prototype.attachEventOnce = function(sEventId,oData,fnFunction,oListener) { return new sap.ui.base.EventProvider(); };

/**
 * Cleans up the internal structures and removes all event handlers.
 * 
 * The object must not be used anymore after destroy was called.
 * 
 * @see sap.ui.base.Object#destroy
 * @public
 * 
 */
sap.ui.base.EventProvider.prototype.destroy = function() {  };

/**
 * Removes a previously attached event handler from the event with the given identifier.
 * 
 * The passed parameters must match those used for registration with {@link #attachEvent} beforehand.
 * 
 * @param {string}
 *            sEventId The identifier of the event to detach from
 * @param {function}
 *            fnFunction The handler function to detach from the event
 * @param {object}
 *            [oListener] The object that wanted to be notified when the event occurred
 * @return {sap.ui.base.EventProvider} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.EventProvider.prototype.detachEvent = function(sEventId,fnFunction,oListener) { return new sap.ui.base.EventProvider(); };

/**
 * Creates a new subclass of class sap.ui.base.EventProvider with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.base.EventProvider.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires an {@link sap.ui.base.Event event} with the given settings and notifies all attached event handlers.
 * 
 * @param {string}
 *            sEventId The identifier of the event to fire
 * @param {object}
 *            [mParameters] The parameters which should be carried by the event
 * @param {boolean}
 *            [bAllowPreventDefault] Defines whether function <code>preventDefault</code> is supported on the fired event
 * @param {boolean}
 *            [bEnableEventBubbling] Defines whether event bubbling is enabled on the fired event. Set to <code>true</code> the event is also forwarded to the parent(s)
 *                                   of the event provider ({@link #getEventingParent}) until the bubbling of the event is stopped or no parent is available anymore.
 * @return {sap.ui.base.EventProvider|boolean} Returns <code>this</code> to allow method chaining. When <code>preventDefault</code> is supported on the fired event
 *                                             the function returns <code>true</code> if the default action should be executed, <code>false</code> otherwise.
 * @protected
 * 
 */
sap.ui.base.EventProvider.prototype.fireEvent = function(sEventId,mParameters,bAllowPreventDefault,bEnableEventBubbling) { return new sap.ui.base.EventProvider(); };

/**
 * Returns the parent in the eventing hierarchy of this object.
 * 
 * Per default this returns null, but if eventing is used in objects, which are hierarchically
 * structured, this can be overwritten to make the object hierarchy visible to the eventing and
 * enables the use of event bubbling within this object hierarchy.
 * 
 * @return {sap.ui.base.EventProvider} The parent event provider
 * @protected
 * 
 */
sap.ui.base.EventProvider.prototype.getEventingParent = function() { return new sap.ui.base.EventProvider(); };

/**
 * Returns a metadata object for class sap.ui.base.EventProvider.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.base.EventProvider.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns whether there are any registered event handlers for the event with the given identifier.
 * 
 * @param {string} sEventId The identifier of the event
 * @return {boolean} Whether there are any registered event handlers
 * @protected
 * 
 */
sap.ui.base.EventProvider.prototype.hasListeners = function(sEventId) { return false; };

/**
 * Returns a string representation of this object.
 * 
 * In case there is no class or id information, a simple static string is returned.
 * Subclasses should override this method.
 * 
 * @return {string} A string description of this event provider
 * @public
 * 
 */
sap.ui.base.EventProvider.prototype.toString = function() { return ""; };


// ---- sap.ui.base.Interface --------------------------------------------------------------------------

/**
 * Constructs an instance of sap.ui.base.Interface which restricts access to methods marked as public.
 * 
 * @class A class that creates an Interface for an existing class. If a class returns the interface in its constructor,
 *        only the defined functions will be visible, no internals of the class can be accessed.
 * @version 1.48.4
 * @param {sap.ui.base.Object}
 *            oObject the instance that needs an interface created
 * @param {string[]}
 *            aMethods the names of the methods, that should be available on this interface
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.base.Interface = function(oObject,aMethods) {};

// ---- sap.ui.base.ManagedObject --------------------------------------------------------------------------

/**
 * Constructs and initializes a managed object with the given <code>sId</code> and settings.
 * 
 * If the optional <code>mSettings</code> are given, they must be a simple object
 * that defines values for properties, aggregations, associations or events keyed by their name.
 * 
 * <b>Valid Names and Value Ranges:</b>
 * 
 * The property (key) names supported in the object literal are exactly the (case sensitive)
 * names documented in the JSDoc for the properties, aggregations, associations and events
 * of the current class and its base classes. Note that for 0..n aggregations and associations this
 * name usually is the plural name, whereas it is the singular name in case of 0..1 relations.
 * 
 * If a key name is ambiguous for a specific managed object class (e.g. a property has the same
 * name as an event), then this method prefers property, aggregation, association and
 * event in that order. To resolve such ambiguities, the keys can be prefixed with
 * <code>aggregation:</code>, <code>association:</code> or <code>event:</code>
 * (such keys containing a colon (':') must be quoted to be valid Javascript).
 * 
 * The possible values for a setting depend on its kind:
 * <ul>
 * <li>for simple properties, the value has to match the documented type of the property (no type conversion occurs)
 * <li>for 0..1 aggregations, the value has to be an instance of the aggregated type
 * <li>for 0..n aggregations, the value has to be an array of instances of the aggregated type or a single instance
 * <li>for 0..1 associations, an instance of the associated type or an id (string) is accepted
 * <li>for 0..n associations, an array of instances of the associated type or of IDs is accepted
 * <li>for events either a function (event handler) is accepted or an array of length 2
 *     where the first element is a function and the 2nd element is an object to invoke the method on.
 * </ul>
 * 
 * Each subclass should document the name and type of its supported settings in its constructor documentation.
 * 
 * Besides the settings documented below, ManagedObject itself supports the following special settings:
 * <ul>
 * <li><code>id : <i>sap.ui.core.ID</i></code> an ID for the new instance. Some subclasses (Element, Component) require the id
 *   to be unique in a specific scope (e.g. an Element Id must be unique across all Elements, a Component id must
 *   be unique across all Components).
 * <li><code>models : <i>object</i></code> a map of {@link sap.ui.model.Model} instances keyed by their model name (alias).
 *   Each entry with key <i>k</i> in this object has the same effect as a call <code>this.setModel(models[k], k);</code>.</li>
 * <li><code>bindingContexts : <i>object</i></code> a map of {@link sap.ui.model.Context} instances keyed by their model name.
 *   Each entry with key <i>k</i> in this object has the same effect as a call <code>this.setBindingContext(bindingContexts[k], k);</code></li>
 * <li><code>objectBindings : <i>object</i></code>  a map of binding paths keyed by the corresponding model name.
 *   Each entry with key <i>k</i> in this object has the same effect as a call <code>this.bindObject(objectBindings[k], k);</code></li>
 * <li><code>metadataContexts : <i>object</i></code>  a map of binding paths keyed by the corresponding model name.</li>
 * </ul>
 * 
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Events
 * <ul>
 * <li>{@link #event:validationSuccess validationSuccess} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:validationError validationError} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:parseError parseError} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:formatError formatError} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:modelContextChange modelContextChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * @param {string} [sId] id for the new managed object; generated automatically if no non-empty id is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] Optional map/JSON-object with initial property values, aggregated objects etc. for the new object
 * @param {object} [oScope] Scope object for resolving string based type and formatter references in bindings.
 *      When a scope object is given, <code>mSettings</code> cannot be omitted, at least <code>null</code> or an empty object literal must be given.
 * 
 * 
 * @class Base Class that introduces some basic concepts like state management or databinding.
 * 
 * New subclasses of ManagedObject are created with a call to {@link #.extend ManagedObject.extend} and can make use
 * of the following managed features:
 * 
 * <b>Properties</b><br>
 * Managed properties represent the state of a ManagedObject. They can store a single value of a simple data type
 * (like 'string' or 'int'). They have a <i>name</i> (e.g. 'size') and methods to get the current value (<code>getSize</code>)
 * or to set a new value (<code>setSize</code>). When a property is modified, the ManagedObject is marked as invalidated.
 * A managed property can be bound against a property in a {@link sap.ui.model.Model} by using the {@link #bindProperty} method.
 * Updates to the model property will be automatically reflected in the managed property and - if TwoWay databinding is active,
 * changes to the managed property will be reflected in the model. An existing binding can be removed by calling {@link #unbindProperty}.
 * 
 * If a ManagedObject is cloned, the clone will have the same values for its managed properties as the source of the
 * clone - if the property wasn't bound. If it is bound, the property in the clone will be bound to the same
 * model property as in the source.
 * 
 * Details about the declaration of a managed property, the metadata that describes it and the set of methods that are automatically
 * generated to access it, can be found in the documentation of the {@link sap.ui.base.ManagedObject.extend extend } method.
 * 
 * 
 * <b>Aggregations</b><br>
 * Managed aggregations can store one or more references to other ManagedObjects. They are a mean to control the lifecycle
 * of the aggregated objects: one ManagedObject can be aggregated by at most one parent ManagedObject at any time.
 * When a ManagedObject is destroyed, all aggregated objects are destroyed as well and the object itself is removed from
 * its parent. That is, aggregations won't contain destroyed objects or null/undefined.
 * 
 * Aggregations have a <i>name</i> ('e.g 'header' or 'items'), a <i>cardinality</i> ('0..1' or '0..n') and are of a specific
 * <i>type</i> (which must be a subclass of ManagedObject as well or a UI5 interface). A ManagedObject will provide methods to
 * set or get the aggregated object for a specific aggregation of cardinality 0..1 (e.g. <code>setHeader</code>, <code>getHeader</code>
 * for an aggregation named 'header'). For an aggregation of cardinality 0..n, there are methods to get all aggregated objects
 * (<code>getItems</code>), to locate an object in the aggregation (e.g. <code>indexOfItem</code>), to add, insert or remove
 * a single aggregated object (<code>addItem</code>, <code>insertItem</code>, <code>removeItem</code>) or to remove or destroy
 * all objects from an aggregation (<code>removeAllItems</code>, <code>destroyItems</code>).
 * 
 * Details about the declaration of a managed aggregation, the metadata that describes it and the set of methods that are automatically
 * generated to access it, can be found in the documentation of the {@link sap.ui.base.ManagedObject.extend extend} method.
 * 
 * Aggregations of cardinality 0..n can be bound to a collection in a model by using {@link #bindAggregation} (and unbound again
 * using {@link #unbindAggregation}). For each context in the model collection, a corresponding object will be created in the
 * managed aggregation, either by cloning a template object or by calling a factory function.
 * 
 * Aggregations also control the databinding context of bound objects: by default, aggregated objects inherit all models
 * and binding contexts from their parent object.
 * 
 * When a ManagedObject is cloned, all aggregated objects will be cloned as well - but only if they haven't been added by
 * databinding. In that case, the aggregation in the clone will be bound to the same model collection.
 * 
 * 
 * <b>Associations</b><br>
 * Managed associations also form a relationship between objects, but they don't define a lifecycle for the
 * associated objects. They even can 'break' in the sense that an associated object might have been destroyed already
 * although it is still referenced in an association. For the same reason, the internal storage for associations
 * are not direct object references but only the IDs of the associated target objects.
 * 
 * Associations have a <i>name</i> ('e.g 'initialFocus'), a <i>cardinality</i> ('0..1' or '0..n') and are of a specific <i>type</i>
 * (which must be a subclass of ManagedObject as well or a UI5 interface). A ManagedObject will provide methods to set or get
 * the associated object for a specific association of cardinality 0..1 (e.g. <code>setInitialFocus</code>, <code>getInitialFocus</code>).
 * For an association of cardinality 0..n, there are methods to get all associated objects (<code>getRefItems</code>),
 * to add, insert or remove a single associated object (<code>addRefItem</code>,
 * <code>insertRefItem</code>, <code>removeRefItem</code>) or to remove all objects from an association
 * (<code>removeAllRefItems</code>).
 * 
 * Details about the declaration of a managed association, the metadata that describes it and the set of methods that are automatically
 * generated to access it, can be found in the documentation of the {@link sap.ui.base.ManagedObject.extend extend} method.
 * 
 * Associations can't be bound to the model.
 * 
 * When a ManagedObject is cloned, the result for an association depends on the relationship between the associated target
 * object and the root of the clone operation: if the associated object is part of the to-be-cloned object tree (reachable
 * via aggregations from the root of the clone operation), then the cloned association will reference the clone of the
 * associated object. Otherwise it will reference the same object as in the original tree.
 * When a ManagedObject is destroyed, other objects that are only associated, are not affected by the destroy operation.
 * 
 * 
 * <b>Events</b><br>
 * Managed events provide a mean for communicating important state changes to an arbitrary number of 'interested' listeners.
 * Events have a <i>name</i> and (optionally) a set of <i>parameters</i>. For each event there will be methods to add or remove an event
 * listener as well as a method to fire the event. (e.g. <code>attachChange</code>, <code>detachChange</code>, <code>fireChange</code>
 * for an event named 'change').
 * 
 * Details about the declaration of a managed events, the metadata that describes it and the set of methods that are automatically
 * generated to access it, can be found in the documentation of the {@link sap.ui.base.ManagedObject.extend extend} method.
 * 
 * When a ManagedObject is cloned, all listeners registered for any event in the clone source are also registered to the
 * clone. Later changes are not reflected in any direction (neither from source to clone nor vice versa).
 * 
 * 
 * <a name="lowlevelapi"><b>Low Level APIs:</b></a><br>
 * The prototype of ManagedObject provides several generic, low level APIs to manage properties, aggregations, associations
 * and events. These generic methods are solely intended for implementing higher level, non-generic methods that manage
 * a single managed property etc. (e.g. a function <code>setSize(value)</code> that sets a new value for property 'size').
 * {@link sap.ui.base.ManagedObject.extend} creates default implementations of those higher level APIs for all managed aspects.
 * The implementation of a subclass then can override those default implementations with a more specific implementation,
 * e.g. to implement a side effect when a specific property is set or retrieved.
 * It is therefore important to understand that the generic low-level methods ARE NOT SUITABLE FOR GENERIC ACCESS to the
 * state of a managed object, as that would bypass the overriding higher level methods and their side effects.
 * 
 * @extends sap.ui.base.EventProvider
 * @version 1.48.4
 * @public
 * 
 */
sap.ui.base.ManagedObject = function(sId,mSettings,oScope) {};
/**
 * Fired when a new value for a bound property should have been propagated from the model,
 * but formatting the value failed with an exception.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.base.ManagedObject} oControlEvent.getParameters.element ManagedObject instance whose property should have received the model update.
 * @param {string} oControlEvent.getParameters.property Name of the property for which the binding should have been updated.
 * @param {sap.ui.model.Type} oControlEvent.getParameters.type Data type used in the binding (if any).
 * @param {any} oControlEvent.getParameters.newValue New value (model representation) as propagated from the model.
 * @param {any} oControlEvent.getParameters.oldValue Old value (external representation) as previously stored in the ManagedObject.
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.formatError = function(oControlEvent) {  };

/**
 * Fired when models or contexts are changed on this object (either by calling setModel/setBindingContext or due to propagation)
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.modelContextChange = function(oControlEvent) {  };

/**
 * Fired when a new value for a bound property should have been propagated to the model,
 * but parsing the value failed with an exception.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.base.ManagedObject} oControlEvent.getParameters.element ManagedObject instance whose property initiated the model update.
 * @param {string} oControlEvent.getParameters.property Name of the property for which the bound model property should have been been updated.
 * @param {sap.ui.model.Type} oControlEvent.getParameters.type Data type used in the binding.
 * @param {any} oControlEvent.getParameters.newValue New value (external representation) as parsed by the binding.
 * @param {any} oControlEvent.getParameters.oldValue Old value (external representation) as previously stored in the ManagedObject.
 * @param {string} oControlEvent.getParameters.message Localized message describing the parse error
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.parseError = function(oControlEvent) {  };

/**
 * Fired when a new value for a bound property should have been propagated to the model,
 * but validating the value failed with an exception.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.base.ManagedObject} oControlEvent.getParameters.element ManagedObject instance whose property initiated the model update.
 * @param {string} oControlEvent.getParameters.property Name of the property for which the bound model property should have been been updated.
 * @param {sap.ui.model.Type} oControlEvent.getParameters.type Data type used in the binding.
 * @param {any} oControlEvent.getParameters.newValue New value (external representation) as parsed and validated by the binding.
 * @param {any} oControlEvent.getParameters.oldValue Old value (external representation) as previously stored in the ManagedObject.
 * @param {string} oControlEvent.getParameters.message Localized message describing the validation issues
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.validationError = function(oControlEvent) {  };

/**
 * Fired after a new value for a bound property has been propagated to the model.
 * Only fired, when the binding uses a data type.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.base.ManagedObject} oControlEvent.getParameters.element ManagedObject instance whose property initiated the model update.
 * @param {string} oControlEvent.getParameters.property Name of the property for which the bound model property has been updated.
 * @param {sap.ui.model.Type} oControlEvent.getParameters.type Data type used in the binding.
 * @param {any} oControlEvent.getParameters.newValue New value (external representation) as propagated to the model.
 * 
 * <b>Note: </b>the model might modify (normalize) the value again and this modification
 * will be stored in the ManagedObject. The 'newValue' parameter of this event contains
 * the value <b>before</b> such a normalization.
 * @param {any} oControlEvent.getParameters.oldValue Old value (external representation) as previously stored in the ManagedObject.
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.validationSuccess = function(oControlEvent) {  };

/**
 * Hook method to let descendants of ManagedObject know when propagated contextual settings have changed
 * @private
 * @sap-restricted sap.ui.core.Element
 * 
 */
sap.ui.base.ManagedObject.prototype._onContextualSettingsChanged = function() {  };

/**
 * Adds some entity <code>oObject</code> to the aggregation identified by <code>sAggregationName</code>.
 * 
 * If the given object is not valid with regard to the aggregation (if it is not an instance
 * of the type specified for that aggregation) or when the method is called for an aggregation
 * of cardinality 0..1, then an Error is thrown (see {@link #validateAggregation}.
 * 
 * If the aggregation already has content, the new object will be added after the current content.
 * If the new object was already contained in the aggregation, it will be moved to the end.
 * 
 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically add an object to an aggregation.
 * Use the concrete method add<i>XYZ</i> for aggregation 'XYZ' or the generic {@link #applySettings} instead.
 * 
 * @param {string}
 *            sAggregationName the string identifying the aggregation that <code>oObject</code> should be added to.
 * @param {sap.ui.base.ManagedObject}
 *            oObject the object to add; if empty, nothing is added
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject as well as the added child are not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.addAggregation = function(sAggregationName,oObject,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * Adds some object with the ID <code>sId</code> to the association identified by <code>sAssociationName</code> and
 * marks this ManagedObject as changed.
 * 
 * This method does not avoid duplicates.
 * 
 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically add an object to an association.
 * Use the concrete method add<i>XYZ</i> for association 'XYZ' or the generic {@link #applySettings} instead.
 * 
 * @param {string}
 *            sAssociationName the string identifying the association the object should be added to.
 * @param {string | sap.ui.base.ManagedObject}
 *            sId the ID of the ManagedObject object to add; if empty, nothing is added; if a <code>sap.ui.base.ManagedObject</code> is given, its ID is added
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this managed object as well as the newly associated object are not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.addAssociation = function(sAssociationName,sId,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * Adds a listener function that will be called during each propagation step on every control
 * @param {function} listener function
 * @returns {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @private
 * @sap-restricted sap.ui.fl
 * 
 */
sap.ui.base.ManagedObject.prototype.addPropagationListener = function(listener) { return new sap.ui.base.ManagedObject(); };

/**
 * Sets all the properties, aggregations, associations and event handlers as given in
 * the object literal <code>mSettings</code>. If a property, aggregation, etc.
 * is not listed in <code>mSettings</code>, then its value is not changed by this method.
 * 
 * For properties and 0..1 aggregations/associations, any given setting overwrites
 * the current value. For 0..n aggregations, the given values are appended; event
 * listeners are registered in addition to existing ones.
 * 
 * For the possible keys and values in <code>mSettings</code> see the general
 * documentation in {@link sap.ui.base.ManagedObject} or the specific documentation
 * of the constructor of the concrete managed object class.
 * 
 * @param {object} mSettings the settings to apply to this managed object
 * @param {object} [oScope] Scope object to resolve types and formatters
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.applySettings = function(mSettings,oScope) { return new sap.ui.base.ManagedObject(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:formatError formatError} event of this <code>sap.ui.base.ManagedObject</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
 * 
 * Fired when a new value for a bound property should have been propagated from the model,
 * but formatting the value failed with an exception.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself
 * 
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.attachFormatError = function(oData,fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:modelContextChange modelContextChange} event of this <code>sap.ui.base.ManagedObject</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
 * 
 * Fired when models or contexts are changed on this object (either by calling setModel/setBindingContext or due to propagation)
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself
 * 
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.attachModelContextChange = function(oData,fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:parseError parseError} event of this <code>sap.ui.base.ManagedObject</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
 * 
 * Fired when a new value for a bound property should have been propagated to the model,
 * but parsing the value failed with an exception.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself
 * 
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.attachParseError = function(oData,fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:validationError validationError} event of this <code>sap.ui.base.ManagedObject</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
 * 
 * Fired when a new value for a bound property should have been propagated to the model,
 * but validating the value failed with an exception.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself
 * 
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.attachValidationError = function(oData,fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:validationSuccess validationSuccess} event of this <code>sap.ui.base.ManagedObject</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
 * 
 * Fired after a new value for a bound property has been propagated to the model.
 * Only fired, when the binding uses a data type.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself
 * 
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.attachValidationSuccess = function(oData,fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Bind an aggregation to the model.
 * 
 * The bound aggregation will use the given template, clone it for each item
 * which exists in the bound list and set the appropriate binding context.
 * This is a generic method which can be used to bind any aggregation to the
 * model. A managed object may flag aggregations in the metamodel with
 * bindable="bindable" to get typed bind<i>Something</i> methods for those aggregations.
 * 
 * @param {string} sName the aggregation to bind
 * @param {object} oBindingInfo the binding info
 * @param {string} oBindingInfo.path the binding path
 * @param {sap.ui.base.ManagedObject} oBindingInfo.template the template to clone for each item in the aggregation
 * @param {boolean} [oBindingInfo.templateShareable=true] option to enable that the template will be shared which means that it won't be destroyed or cloned automatically
 * @param {function} oBindingInfo.factory the factory function
 * @param {number} oBindingInfo.startIndex the first entry of the list to be created
 * @param {number} oBindingInfo.length the amount of entries to be created (may exceed the size limit of the model)
 * @param {sap.ui.model.Sorter|sap.ui.model.Sorter[]} [oBindingInfo.sorter] the initial sort order (optional)
 * @param {sap.ui.model.Filter[]} [oBindingInfo.filters] the predefined filters for this aggregation (optional)
 * @param {string|function} oBindingInfo.key the name of the key property or a function getting the context as only parameter to calculate a key for entries. This can be used to improve update behaviour in models, where a key is not already available.
 * @param {object} [oBindingInfo.parameters] a map of parameters which is passed to the binding.
 * The supported parameters are listed in the corresponding model-specific implementation of <code>sap.ui.model.ListBinding</code> or <code>sap.ui.model.TreeBinding</code>.
 * @param {function} [oBindingInfo.groupHeaderFactory] a factory function to generate custom group visualization (optional)
 * 
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.bindAggregation = function(sName,oBindingInfo) { return new sap.ui.base.ManagedObject(); };

/**
 * Bind the object to the referenced entity in the model, which is used as the binding context
 * to resolve bound properties or aggregations of the object itself and all of its children
 * relatively to the given path.
 * 
 * @deprecated Since 1.11.1, please use bindElement instead.
 * @param {string} sPath the binding path
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.bindContext = function(sPath) { return new sap.ui.base.ManagedObject(); };

/**
 * Bind the object to the referenced entity in the model, which is used as the binding context
 * to resolve bound properties or aggregations of the object itself and all of its children
 * relatively to the given path.
 * If a relative binding path is used, this will be applied whenever the parent context changes.
 * There is no difference between {@link sap.ui.core.Element#bindElement} and {@link sap.ui.base.ManagedObject#bindObject}.
 * @param {string|object} vPath the binding path or an object with more detailed binding options
 * @param {string} vPath.path the binding path
 * @param {object} [vPath.parameters] map of additional parameters for this binding
 * @param {string} [vPath.model] name of the model
 * @param {object} [vPath.events] map of event listeners for the binding events
 * @param {object} [mParameters] map of additional parameters for this binding (only taken into account when vPath is a string in that case the properties described for vPath above are valid here).
 * The supported parameters are listed in the corresponding model-specific implementation of <code>sap.ui.model.ContextBinding</code>.
 * 
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.bindObject = function(vPath,mParameters) { return new sap.ui.base.ManagedObject(); };

/**
 * Binds a property to the model.
 * 
 * The Setter for the given property will be called with the value retrieved from the data model.
 * When the binding mode is <code>OneTime</code>, the property will be set only once. When it is
 * <code>OneWay</code>, the property will be updated whenever the corresponding data in the model changes.
 * In mode <code>TwoWay</code>, changes to the property (not originating in the model) will be
 * reported back to the model (typical use case: user interaction changes the value of a control).
 * 
 * This is a generic method which can be used to bind any property to the model. A managed
 * object may flag any property in its metadata with <code>bindable="bindable"</code> to additionally
 * provide named methods to bind and unbind the corresponding property.
 * 
 * 
 * <b>Composite Binding</b><br>
 * A composite property binding which combines data from multiple model paths can be declared using
 * the <code>parts</code> parameter instead of <code>path</code>. The <code>formatter</code> function
 * or a {@link sap.ui.model.CompositeType composite type} then can be used to combine the parts,
 * Properties with a composite binding are also known as "calculated fields".
 * 
 * Example:
 * <pre>
 *   oTxt.bindValue({
 *     parts: [
 *       {path: "/firstName", type: "sap.ui.model.type.String"},
 *       {path: "myModel2>/lastName"}
 *     ]
 *   });
 * </pre>
 * 
 * Note that a composite binding will be forced into mode <code>OneWay</code> when one of the
 * binding parts is not in mode <code>TwoWay</code>.
 * 
 * 
 * <b>Formatter Functions</b><br>
 * When a formatter function is specified for the binding or for a binding part, it will be
 * called with the value of the bound model property. After setting the initial property value,
 * the formatter function will only be called again when the bound model property changes
 * (simple property binding) or when at least one of the bound model properties changes
 * (formatter function of a composite binding). Note that a binding only monitors the
 * bound model data for changes. Dependencies of the formatter implementation to other model
 * data is not known to the binding and changes won't be detected.
 * 
 * When the formatter for a property binding (simple or composite) is called, the managed object
 * will be given as <code>this</code> context. For formatters of binding parts in a composite
 * binding, this is not the case.
 * 
 * @param {string} sName
 *            Name of the property to bind
 * @param {object} oBindingInfo
 *            Binding information
 * @param {string} oBindingInfo.path
 *            Path in the model to bind to, either an absolute path or relative to the binding
 *            context for the corresponding model
 * @param {string} [oBindingInfo.model]
 *            Name of the model to bind against or <code>undefined</code> for the default model
 * @param {function} [oBindingInfo.formatter]
 *            Function to convert model data into a property value
 * @param {boolean} [oBindingInfo.useRawValues]
 *            Whether the parameters to the formatter function should be passed as raw values.
 *            In this case the specified types for the binding parts are not used and the values
 *            are not formatted.
 * 
 *            <b>Note</b>: use this flag only when using multiple bindings. If you use only one
 *            binding and want raw values then simply don't specify a type for that binding.
 * @param {sap.ui.model.Type|string} [oBindingInfo.type]
 *            A type object or the name of a type class to create such a type object; the type
 *            will be used for converting model data to a property value (aka "formatting") and
 *            vice versa (in binding mode <code>TwoWay</code>, aka "parsing")
 * @param {string} [oBindingInfo.targetType]
 *            Target type to be used by the type when formatting model data, for example "boolean"
 *            or "string" or "any"; defaults to the property's type
 * @param {object} [oBindingInfo.formatOptions]
 *            Format options to be used for the type; only taken into account when the type is
 *            specified by its name - a given type object won't be modified
 * @param {object} [oBindingInfo.constraints]
 *            Additional constraints to be used when constructing a type object from a type name,
 *            ignored when a type object is given
 * @param {sap.ui.model.BindingMode} [oBindingInfo.mode=Default]
 *            Binding mode to be used for this property binding (e.g. one way)
 * @param {object} [oBindingInfo.parameters]
 *            Map of parameters which is passed to the binding; the supported parameters are listed
 *            in the corresponding model-specific implementation of <code>sap.ui.model.PropertyBinding</code>.
 * @param {object[]} [oBindingInfo.parts]
 *            Array of binding info objects for the parts of a composite binding; the structure of
 *            each binding info is the same as described for the <code>oBindingInfo</code> as a whole.
 * 
 *            <b>Note</b>: recursive composite bindings are currently not supported
 * 
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.bindProperty = function(sName,oBindingInfo) { return new sap.ui.base.ManagedObject(); };

/**
 * Clones a tree of objects starting with the object on which clone is called first (root object).
 * 
 * The IDs within the newly created clone tree are derived from the original IDs by appending
 * the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be
 * unique across multiple clone calls).
 * 
 * The <code>oOptions</code> configuration object can have the following properties:
 * <ul>
 * <li>The boolean value <code>cloneChildren</code> specifies whether associations/aggregations will be cloned</li>
 * <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li>
 * </ul>
 * 
 * For each cloned object the following settings are cloned based on the metadata of the object and the defined options:
 * <ul>
 * <li>all properties that are not bound. If <code>cloneBinding</code> is <code>false</code>,
 *     even these properties will be cloned; the values are used by reference, they are not cloned</li>
 * <li>all aggregated objects that are not bound. If <code>cloneBinding</code> is <code>false</code>,
 *     even the ones that are bound will be cloned; they are all cloned recursively using the same
 *     <code>sIdSuffix</code></li>
 * <li>all associated controls; when an association points to an object inside the cloned object tree,
 *     then the cloned association will be modified to that it points to the clone of the target object.
 *     When the association points to a managed object outside of the cloned object tree, then its
 *     target won't be changed.</li>
 * <li>all models set via <code>setModel()</code>; used by reference </li>
 * <li>all property and aggregation bindings (if <code>cloneBindings</code> is <code>true</code>);
 *     the pure binding information (path, model name) is cloned, but all other information like
 *     template control or factory function, data type or formatter function are copied by reference.
 *     The bindings themselves are created anew as they are specific for the combination (object, property, model).
 *     As a result, any later changes to a binding of the original object are not reflected
 *     in the clone, but changes to e.g the type or template etc. are.</li>
 * </ul>
 * 
 * Each clone is created by first collecting the above mentioned settings and then creating
 * a new instance with the normal constructor function. As a result, any side effects of
 * mutator methods (<code>setProperty</code> etc.) or init hooks are repeated during clone creation.
 * There is no need to override <code>clone()</code> just to reproduce these internal settings!
 * 
 * Custom controls however can override <code>clone()</code> to implement additional clone steps.
 * They usually will first call <code>clone()</code> on the super class and then modify the
 * returned clone accordingly.
 * 
 * Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>.
 * It is determined automatically for the root object (and its non-existence also serves as
 * an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>.
 * 
 * @param {string} [sIdSuffix] a suffix to be appended to the cloned object ID
 * @param {string[]} [aLocalIds] an array of local IDs within the cloned hierarchy (internally used)
 * @param {Object} [oOptions] configuration object
 * @param {boolean} [cloneChildren=true] Whether associations and aggregations will be cloned
 * @param {boolean} [cloneBindings=true] Whether bindings will be cloned
 * @returns {sap.ui.base.ManagedObject} Reference to the newly created clone
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.clone = function(sIdSuffix,aLocalIds,oOptions,cloneChildren,cloneBindings) { return new sap.ui.base.ManagedObject(); };

/**
 * Creates a new ManagedObject from the given data.
 * 
 * If <code>vData</code> is a managed object already, that object is returned.
 * If <code>vData</code> is an object (literal), then a new object is created with <code>vData</code>
 * as settings. The type of the object is either determined by a property of name <code>Type</code>
 * (capital 'T') in the <code>vData</code> or by a property <code>type</code> (lower case 't')
 * in the <code>oKeyInfo</code> object. In both cases, the type can be specified by name (dot separated
 * name of the class) or by the constructor function of the class.
 * 
 * @param {sap.ui.base.ManagedObject|object} <code>vData</code> the data to create the object from
 * @param {object} [oKeyInfo]
 * @param {object} [oScope] Scope object to resolve types and formatters in bindings
 * @public
 * @static
 * 
 */
sap.ui.base.ManagedObject.create = function(<code>vData</code>,oKeyInfo,oScope) {  };

/**
 * Cleans up the resources associated with this object and all its aggregated children.
 * 
 * After an object has been destroyed, it can no longer be used in!
 * 
 * Applications should call this method if they don't need the object any longer.
 * 
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.destroy = function(bSuppressInvalidate) {  };

/**
 * Destroys (all) the managed object(s) in the aggregation named <code>sAggregationName</code> and empties the
 * aggregation. If the aggregation did contain any object, this ManagedObject is marked as changed.
 * 
 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically destroy all objects in an aggregation.
 * Use the concrete method destroy<i>XYZ</i> for aggregation 'XYZ' instead.
 * 
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.destroyAggregation = function(sAggregationName,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:formatError formatError} event of this <code>sap.ui.base.ManagedObject</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.detachFormatError = function(fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:modelContextChange modelContextChange} event of this <code>sap.ui.base.ManagedObject</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.detachModelContextChange = function(fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:parseError parseError} event of this <code>sap.ui.base.ManagedObject</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.detachParseError = function(fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:validationError validationError} event of this <code>sap.ui.base.ManagedObject</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.detachValidationError = function(fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:validationSuccess validationSuccess} event of this <code>sap.ui.base.ManagedObject</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.detachValidationSuccess = function(fnFunction,oListener) { return new sap.ui.base.ManagedObject(); };

/**
 * Defines a new subclass of ManagedObject with name <code>sClassName</code> and enriches it with
 * the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> can contain the same information that {@link sap.ui.base.Object.extend} already accepts,
 * plus the following new properties in the 'metadata' object literal:
 * 
 * <ul>
 * <li><code>library : <i>string</i></code></li>
 * <li><code>properties : <i>object</i></code></li>
 * <li><code>defaultProperty : <i>string</i></code></li>
 * <li><code>aggregations : <i>object</i></code></li>
 * <li><code>defaultAggregation : <i>string</i></code></li>
 * <li><code>associations : <i>object</i></code></li>
 * <li><code>events : <i>object</i></code></li>
 * <li><code>specialSettings : <i>object</i></code>// this one is still experimental and not for public usage!</li>
 * </ul>
 * 
 * Each of these properties is explained in more detail lateron.
 * 
 * Example:
 * <pre>
 * ManagedObect.extend('sap.mylib.MyClass', {
 *   metadata : {
 *     library: 'sap.mylib',
 *     properties : {
 *       value: 'string',
 *       width: 'sap.ui.core.CSSSize',
 *       height: { type: 'sap.ui.core.CSSSize', defaultValue: '100%' }
 *     },
 *     defaultProperty : 'value',
 *     aggregations : {
 *       header : { type: 'sap.mylib.FancyHeader', multiple : false }
 *       items : 'sap.ui.core.Control'
 *     },
 *     defaultAggregation : 'items',
 *     associations : {
 *       initiallyFocused : { type: 'sap.ui.core.Control' }
 *     },
 *     events: {
 *       beforeOpen : {
 *         parameters : {
 *           opener : 'sap.ui.core.Control'
 *         }
 *       }
 *     },
 *   },
 * 
 *   init: function() {
 *   }
 * 
 * }); // end of 'extend' call
 * </pre>
 * 
 * Detailed explanation of properties<br>
 * 
 * 
 * <b>'library'</b> : <i>string</i><br>
 * Name of the library that the new subclass should belong to. If the subclass is a control or element, it will
 * automatically register with that library so that authoring tools can discover it.
 * By convention, the name of the subclass should have the library name as a prefix, e.g. 'sap.ui.commons.Panel' belongs
 * to library 'sap.ui.commons'.
 * 
 * 
 * <b>'properties'</b> : <i>object</i><br>
 * An object literal whose properties each define a new managed property in the ManagedObject subclass.
 * The value can either be a simple string which then will be assumed to be the type of the new property or it can be
 * an object literal with the following properties
 * <ul>
 * <li><code>type: <i>string</i></code> type of the new property. Must either be one of the built-in types 'string', 'boolean', 'int', 'float', 'object' or 'any', or a
 *     type created and registered with {@link sap.ui.base.DataType.createType} or an array type based on one of the previous types.</li>
 * <li><code>group:<i>string</i></code> a semantic grouping of the properties, intended to be used in design time tools.
 *     Allowed values are (case sensitive): Accessibility, Appearance, Behavior, Data, Designtime, Dimension, Identification, Misc</li>
 * <li><code>defaultValue: <i>any</i></code> the default value for the property or null if there is no defaultValue.</li>
 * <li><code>bindable: <i>boolean|string</i></code> (either can be omitted or set to the boolean value <code>true</code> or the magic string 'bindable')
 *     If set to <code>true</code> or 'bindable', additional named methods <code>bind<i>Name</i></code> and <code>unbind<i>Name</i></code> are generated as convenience.
 *     Despite its name, setting this flag is not mandatory to make the managed property bindable. The generic methods {@link #bindProperty} and
 *     {@link #unbindProperty} can always be used. </li>
 * </ul>
 * Property names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$].
 * If an aggregation in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will
 * be used as generic documentation of the aggregation.
 * 
 * For each public property 'foo', the following methods will be created by the "extend" method and will be added to the
 * prototype of the subclass:
 * <ul>
 * <li>getFoo() - returns the current value of property 'foo'. Internally calls {@link #getProperty}
 * <li>setFoo(v) - sets 'v' as the new value of property 'foo'. Internally calls {@link #setProperty}
 * <li>bindFoo(c) - (only if property was defined to be 'bindable'): convenience function that wraps {@link #bindProperty}
 * <li>unbindFoo() - (only if property was defined to be 'bindable'): convenience function that wraps {@link #unbindProperty}
 * </ul>
 * 
 * 
 * <b>'defaultProperty'</b> : <i>string</i><br>
 * When specified, the default property must match the name of one of the properties defined for the new subclass (either own or inherited).
 * The named property can be used to identify the main property to be used for bound data. E.g. the value property of a field control.
 * 
 * 
 * <b>'aggregations'</b> : <i>object</i><br>
 * An object literal whose properties each define a new aggregation in the ManagedObject subclass.
 * The value can either be a simple string which then will be assumed to be the type of the new aggregation or it can be
 * an object literal with the following properties
 * <ul>
 * <li><code>type: <i>string</i></code> type of the new aggregation. must be the full global name of a ManagedObject subclass (in dot notation, e.g. 'sap.m.Button')</li>
 * <li><code>[multiple]: <i>boolean</i></code> whether the aggregation is a 0..1 (false) or a 0..n aggregation (true), defaults to true </li>
 * <li><code>[singularName]: <i>string</i></code>. Singular name for 0..n aggregations. For 0..n aggregations the name by convention should be the plural name.
 *     Methods affecting multiple objects in an aggregation will use the plural name (e.g. getItems(), whereas methods that deal with a single object will use
 *     the singular name (e.g. addItem). The framework knows a set of common rules for building plural form of English nouns and uses these rules to determine
 *     a singular name on its own. if that name is wrong, a singluarName can be specified with this property. </li>
 * <li>[visibility]: <i>string</i></code> either 'hidden' or 'public', defaults to 'public'. Aggregations that belong to the API of a class must be 'public' whereas
 *     'hidden' aggregations typically are used for the implementation of composite classes (e.g. composite controls) </li>
 * <li><code>bindable: <i>boolean|string</i></code> (either can be omitted or set to the boolean value <code>true</code> or the magic string 'bindable')
 *     If set to <code>true</code> or 'bindable', additional named methods <code>bind<i>Name</i></code> and <code>unbind<i>Name</i></code> are generated as convenience.
 *     Despite its name, setting this flag is not mandatory to make the managed aggregation bindable. The generic methods {@link #bindAggregation} and
 *     {@link #unbindAggregation} can always be used. </li>
 * </ul>
 * Aggregation names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$].
 * The name for a hidden aggregations might start with an underscore.
 * If an aggregation in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will
 * be used as generic documentation of the aggregation.
 * 
 * For each public aggregation 'item' of cardinality 0..1, the following methods will be created by the "extend" method and will be added to the
 * prototype of the subclass:
 * <ul>
 * <li>getItem() - returns the current value of aggregation 'item'. Internally calls {@link #getAggregation} with a default value of <code>undefined</code></li>
 * <li>setItem(o) - sets 'o' as the new aggregated object in aggregation 'item'. Internally calls {@link #setAggregation}</li>
 * <li>destroyItem(o) - destroy a currently aggregated object in aggregation 'item' and clears the aggregation. Internally calls {@link #destroyAggregation}</li>
 * <li>bindItem(c) - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #bindAggregation}</li>
 * <li>unbindItem() - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #unbindAggregation}</li>
 * </ul>
 * For a public aggregation 'items' of cardinality 0..n, the following methods will be created:
 * <ul>
 * <li>getItems() - returns an array with the objects contained in aggregation 'items'. Internally calls {@link #getAggregation} with a default value of <code>[]</code></li>
 * <li>addItem(o) - adds an object as last element in the aggregation 'items'. Internally calls {@link #addAggregation}</li>
 * <li>insertItem(o,p) - inserts an object into the aggregation 'items'. Internally calls {@link #insertAggregation}</li>
 * <li>removeItem(v) - removes an object from the aggregation 'items'. Internally calls {@link #removeAggregation}</li>
 * <li>removeItems() - removes all object from the aggregation 'items'. Internally calls {@link #removeAllAggregation}</li>
 * <li>destroyItems() - destroy all currently aggregated objects in aggregation 'items' and clears the aggregation. Internally calls {@link #destroyAggregation}</li>
 * <li>bindItems(c) - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #bindAggregation}</li>
 * <li>unbindItems() - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #unbindAggregation}</li>
 * </ul>
 * For private or hidden aggregations, no methods are generated.
 * 
 * 
 * <b>'defaultAggregation'</b> : <i>string</i><br>
 * When specified, the default aggregation must match the name of one of the aggregations defined for the new subclass (either own or inherited).
 * The named aggregation will be used in contexts where no aggregation is specified. E,g. when an object in an XMLView embeds other objects without
 * naming an aggregation, as in the following example:
 * <pre>
 *  &lt;!-- assuming the defaultAggregation for Dialog is 'content' -->
 *  &lt;Dialog>
 *    &lt;Text/>
 *    &lt;Button/>
 *  &lt;/Dialog>
 * </pre>
 * 
 * 
 * <b>'associations'</b> : <i>object</i><br>
 * An object literal whose properties each define a new association of the ManagedObject subclass.
 * The value can either be a simple string which then will be assumed to be the type of the new association or it can be
 * an object literal with the following properties
 * <ul>
 * <li><code>type: <i>string</i></code> type of the new association</li>
 * <li><code>multiple: <i>boolean</i></code> whether the association is a 0..1 (false) or a 0..n association (true), defaults to false(1) for associations</li>
 * <li><code>[singularName]: <i>string</i></code>. Singular name for 0..n associations. For 0..n associations the name by convention should be the plural name.
 *     Methods affecting multiple objects in an association will use the plural name (e.g. getItems(), whereas methods that deal with a single object will use
 *     the singular name (e.g. addItem). The framework knows a set of common rules for building plural form of English nouns and uses these rules to determine
 *     a singular name on its own. if that name is wrong, a singluarName can be specified with this property.</li>
 * </ul>
 * Association names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$].
 * If an association in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will
 * be used as generic documentation of the association.
 * 
 * For each association 'ref' of cardinality 0..1, the following methods will be created by the "extend" method and will be added to the
 * prototype of the subclass:
 * <ul>
 * <li>getRef() - returns the current value of association 'item'. Internally calls {@link #getAssociation} with a default value of <code>undefined</code></li>
 * <li>setRef(o) - sets 'o' as the new associated object in association 'item'. Internally calls {@link #setAssociation}</li>
 * </ul>
 * For a public association 'refs' of cardinality 0..n, the following methods will be created:
 * <ul>
 * <li>getRefs() - returns an array with the objects contained in association 'items'. Internally calls {@link #getAssociation} with a default value of <code>[]</code></li>
 * <li>addRef(o) - adds an object as last element in the association 'items'. Internally calls {@link #addAssociation}</li>
 * <li>removeRef(v) - removes an object from the association 'items'. Internally calls {@link #removeAssociation}</li>
 * <li>removeAllRefs() - removes all objects from the association 'items'. Internally calls {@link #removeAllAssociation}</li>
 * </ul>
 * 
 * 
 * <b>'events'</b> : <i>object</i><br>
 * An object literal whose properties each define a new event of the ManagedObject subclass.
 * The value can either be a simple string which then will be assumed to be the type of the new association or it can be
 * an object literal with the following properties
 * <ul>
 * <li><code>allowPreventDefault: <i>boolean</i></code> whether the event allows to prevented the default behavior of the event source</li>
 * <li><code>parameters: <i>object</i></code> an object literal that describes the parameters of this event. </li>
 * </ul>
 * Event names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$].
 * If an event in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will be used
 * as generic documentation of the event.
 * 
 * For each event 'Some' the following methods will be created by the "extend" method and will be added to the
 * prototype of the subclass:
 * <ul>
 * <li>attachSome(fn,o) - registers a listener for the event. Internally calls {@link #attachEvent}</li>
 * <li>detachSome(fn,o) - deregisters a listener for the event. Internally calls {@link #detachEvent}</li>
 * <li>fireSome() - fire the event. Internally calls {@link #fireEvent}</li>
 * </ul>
 * 
 * 
 * <b>'specialSettings'</b> : <i>object</i><br>
 * Special settings are an experimental feature and MUST NOT BE USED by controls or applications outside of the sap.ui.core project.
 * 
 * 
 * 
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to <code>sap.ui.base.ManagedObjectMetadata</code>.
 * @return {function} the created class / constructor function
 * 
 * @public
 * @static
 * 
 */
sap.ui.base.ManagedObject.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Searches and returns all aggregated objects that pass the given check function.
 * 
 * When the search is done recursively (<code>bRecursive === true</code>), it will be
 * executed depth-first and ancestors will be added to the result array before their descendants.
 * 
 * If no check function is given, all aggregated objects will pass the check and be added
 * to the result array.
 * 
 * <b>Take care: this operation might be expensive.</b>
 * 
 * @param {boolean}
 *          bRecursive Whether the whole aggregation tree should be searched
 * @param {boolean}
 *          [fnCondition] Objects for which this function returns a falsy value will not be added
 *          to the result array
 * @returns {sap.ui.base.ManagedObject[]} Array of aggregated objects that passed the check
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.findAggregatedObjects = function(bRecursive,fnCondition) { return new Array(); };

/**
 * Fires event {@link #event:formatError formatError} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.base.ManagedObject} [mParameters.element] ManagedObject instance whose property should have received the model update.
 * @param {string} [mParameters.property] Name of the property for which the binding should have been updated.
 * @param {sap.ui.model.Type} [mParameters.type] Data type used in the binding (if any).
 * @param {any} [mParameters.newValue] New value (model representation) as propagated from the model.
 * @param {any} [mParameters.oldValue] Old value (external representation) as previously stored in the ManagedObject.
 * 
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.fireFormatError = function(mParameters) { return new sap.ui.base.ManagedObject(); };

/**
 * Fires event {@link #event:modelContextChange modelContextChange} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.fireModelContextChange = function(mParameters) { return new sap.ui.base.ManagedObject(); };

/**
 * Fires event {@link #event:parseError parseError} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.base.ManagedObject} [mParameters.element] ManagedObject instance whose property initiated the model update.
 * @param {string} [mParameters.property] Name of the property for which the bound model property should have been been updated.
 * @param {sap.ui.model.Type} [mParameters.type] Data type used in the binding.
 * @param {any} [mParameters.newValue] New value (external representation) as parsed by the binding.
 * @param {any} [mParameters.oldValue] Old value (external representation) as previously stored in the ManagedObject.
 * @param {string} [mParameters.message] Localized message describing the parse error
 * 
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.fireParseError = function(mParameters) { return new sap.ui.base.ManagedObject(); };

/**
 * Fires event {@link #event:validationError validationError} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.base.ManagedObject} [mParameters.element] ManagedObject instance whose property initiated the model update.
 * @param {string} [mParameters.property] Name of the property for which the bound model property should have been been updated.
 * @param {sap.ui.model.Type} [mParameters.type] Data type used in the binding.
 * @param {any} [mParameters.newValue] New value (external representation) as parsed and validated by the binding.
 * @param {any} [mParameters.oldValue] Old value (external representation) as previously stored in the ManagedObject.
 * @param {string} [mParameters.message] Localized message describing the validation issues
 * 
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.fireValidationError = function(mParameters) { return new sap.ui.base.ManagedObject(); };

/**
 * Fires event {@link #event:validationSuccess validationSuccess} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.base.ManagedObject} [mParameters.element] ManagedObject instance whose property initiated the model update.
 * @param {string} [mParameters.property] Name of the property for which the bound model property has been updated.
 * @param {sap.ui.model.Type} [mParameters.type] Data type used in the binding.
 * @param {any} [mParameters.newValue] New value (external representation) as propagated to the model.
 * 
 * <b>Note: </b>the model might modify (normalize) the value again and this modification
 * will be stored in the ManagedObject. The 'newValue' parameter of this event contains
 * the value <b>before</b> such a normalization.
 * @param {any} [mParameters.oldValue] Old value (external representation) as previously stored in the ManagedObject.
 * 
 * @returns {sap.ui.base.ManagedObject} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.fireValidationSuccess = function(mParameters) { return new sap.ui.base.ManagedObject(); };

/**
 * Returns the aggregated object(s) for the named aggregation of this ManagedObject.
 * 
 * If the aggregation does not contain any objects(s), the given <code>oDefaultForCreation</code>
 * (or <code>null</code>) is set as new value of the aggregation and returned to the caller.
 * 
 * <b>Note:</b> the need to specify a default value and the fact that it is stored as
 * new value of a so far empty aggregation is recognized as a shortcoming of this API
 * but can no longer be changed for compatibility reasons.
 * 
 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically read the content of an aggregation.
 * Use the concrete method get<i>XYZ</i> for aggregation 'XYZ' instead.
 * 
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {sap.ui.base.ManagedObject | Array}
 * 			  oDefaultForCreation the object that is used in case the current aggregation is empty
 * @type sap.ui.base.ManagedObject|Array
 * @return the aggregation array in case of 0..n-aggregations or the managed object or null in case of 0..1-aggregations
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.getAggregation = function(sAggregationName,oDefaultForCreation) { return new sap.ui.base.ManagedObject(); };

/**
 * Returns the content of the association with the given name.
 * 
 * For associations of cardinality 0..1, a single string with the ID of an associated
 * object is returned (if any). For cardinality 0..n, an array with the IDs of the
 * associated objects is returned.
 * 
 * If the association does not contain any objects(s), the given <code>oDefaultForCreation</code>
 * is set as new value of the association and returned to the caller. The only supported values for
 * <code>oDefaultForCreation</code> are <code>null</code> and <code>undefined</code> in the case of
 * cardinality 0..1 and <code>null</code>, <code>undefined</code> or an empty array (<code>[]</code>)
 * in case of cardinality 0..n. If the argument is omitted, <code>null</code> is used independently
 * from the cardinality.
 * 
 * <b>Note:</b> the need to specify a default value and the fact that it is stored as
 * new value of a so far empty association is recognized as a shortcoming of this API
 * but can no longer be changed for compatibility reasons.
 * 
 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically retrieve the content of an association.
 * Use the concrete method get<i>XYZ</i> for association 'XYZ' instead.
 * 
 * @param {string} sAssociationName the name of the association
 * @param {object}
 * 			  oDefaultForCreation the object that is used in case the current aggregation is empty (only null or empty array allowed)
 * @return {string | string[]} the ID of the associated managed object or an array of such IDs; may be null if the association has not been populated
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.getAssociation = function(sAssociationName,oDefaultForCreation) { return ""; };

/**
 * Get the binding object for a specific aggregation/property
 * 
 * @param {string} sName the name of the property or aggregation
 * @return {sap.ui.model.Binding} the binding for the given name
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getBinding = function(sName) { return new sap.ui.model.Binding(); };

/**
 * Get the binding context of this object for the given model name.
 * 
 * If the object does not have a binding context set on itself and has no own model set,
 * it will use the first binding context defined in its parent hierarchy.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
 * 
 * Note: A ManagedObject inherits binding contexts from the Core only when it is a descendant of a UIArea.
 * 
 * @param {string} [sModelName] the name of the model or <code>undefined</code>
 * @return {sap.ui.model.Context} The binding context of this object
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getBindingContext = function(sModelName) { return new sap.ui.model.Context(); };

/**
 * Returns the binding infos for the given property or aggregation. The binding info contains information about path, binding object, format options,
 * sorter, filter etc. for the property or aggregation. As the binding object is only created when the model becomes available, the binding property may be
 * undefined.
 * 
 * @param {string} sName the name of the property or aggregation
 * 
 * @returns {object} the binding info object, containing at least a path or parts property
 *                   and, depending on the binding type, additional properties
 * 
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.getBindingInfo = function(sName) { return new Object(); };

/**
 * Get the binding path for a specific aggregation/property
 * 
 * @param {string} sName the name of the property or aggregation
 * @return {string} the binding path for the given name
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.getBindingPath = function(sName) { return ""; };

/**
 * Returns the parent managed object as new eventing parent to enable control event bubbling
 * or <code>null</code> if this object hasn't been added to a parent yet.
 * 
 * @return {sap.ui.base.EventProvider} the parent event provider
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.getEventingParent = function() { return new sap.ui.base.EventProvider(); };

/**
 * Returns the object's Id.
 * 
 * @return {string} the objects's Id.
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getId = function() { return ""; };

/**
 * Returns the metadata for the class that this object belongs to.
 * 
 * @return {sap.ui.base.ManagedObjectMetadata} Metadata for the class of the object
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getMetadata = function() { return new sap.ui.base.ManagedObjectMetadata(); };

/**
 * Returns the metadata for the ManagedObject class.
 * 
 * @return {sap.ui.base.ManagedObjectMetadata} Metadata for the ManagedObject class.
 * @static
 * @public
 * 
 */
sap.ui.base.ManagedObject.getMetadata = function() { return new sap.ui.base.ManagedObjectMetadata(); };

/**
 * Get the model to be used for data bindings with the given model name.
 * If the object does not have a model set on itself, it will use the first
 * model defined in its parent hierarchy.
 * 
 * The name can be omitted to reference the default model or it must be a non-empty string.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
 * 
 * @param {string|undefined} [sName] name of the model to be retrieved
 * @return {sap.ui.model.Model} oModel
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getModel = function(sName) { return new sap.ui.model.Model(); };

/**
 * Get the object binding object for a specific model
 * 
 * @param {string} sModelName the name of the model
 * @return {sap.ui.model.Binding} the element binding for the given model name
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getObjectBinding = function(sModelName) { return new sap.ui.model.Binding(); };

/**
 * Returns the origin info for the value of the given property.
 * 
 * The origin info might contain additional information for translatable
 * texts. The bookkeeping of this information is not active by default and must be
 * activated by configuration. Even then, it might not be present for all properties
 * and their values depending on where the value came form.
 * 
 * @param {string} sPropertyName the name of the property
 * @return {object} a map of properties describing the origin of this property value or null
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getOriginInfo = function(sPropertyName) { return new Object(); };

/**
 * Returns the parent managed object or <code>null</code> if this object hasn't been added to a parent yet.
 * 
 * The parent returned by this method is the technical parent used for data binding, invalidation,
 * rendering etc. It might differ from the object on which the application originally added this object
 * (the so called 'API parent'): some composite controls internally use hidden controls or containers
 * to store their children. This method will return the innermost container that technically contains this
 * object as a child.
 * 
 * <b>Example:</b>
 * 
 * Assume that a <code>Dialog</code> internally uses a (hidden) <code>VerticalLayout</code> to store its content:
 * 
 * <pre>
 *   Dialog (API parent)
 *    \__ VerticalLayout (hidden composite part)
 *       \__ Text (API child)
 * </pre>
 * 
 * If you add some content by calling the <code>Dialog.prototype.addContent</code> API, this will lead
 * to the following observations:
 * 
 * <pre>
 *   oDialog.addContent(oText);
 *   console.log(oText.getParent() === oDialog);  // false
 *   console.log(oText.getParent() instanceof VerticalLayout); // true
 *   console.log(oText.getParent().getParent() === oDialog); // true now, but might fail with later versions
 * </pre>
 * 
 * Technically, from API perspective, <code>oText</code> is added as a child to <code>Dialog</code>.
 * But internally, the <code>Dialog</code> adds the child to the hidden <code>VerticalLayout</code> container.
 * If you now call the <code>getParent</code> method of the child, you will get the internal
 * <code>VerticalLayout</code> object and not the <code>Dialog</code> API parent.
 * 
 * <b>Note: </b> The internal (hidden) structure of a composite control is not fixed and may be changed
 * (see also our "Compatibility Rules"). Therefore, you should <b>never</b> rely on a specific structure or
 * object being returned by <code>getParent</code>.
 * 
 * <b>Note: </b> There is no API to determine the original API parent.
 * 
 * @return {sap.ui.base.ManagedObject} The technical parent managed object or <code>null</code>
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.getParent = function() { return new sap.ui.base.ManagedObject(); };

/**
 * Returns the value for the property with the given <code>sPropertyName</code>.
 * 
 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically retrieve the value of a property.
 * Use the concrete method get<i>XYZ</i> for property 'XYZ' instead.
 * 
 * @param {string} sPropertyName the name of the property
 * @returns {any} the value of the property
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.getProperty = function(sPropertyName) { return null; };

/**
 * Check if any model is set to the ManagedObject or to one of its parents (including UIArea and Core).
 * 
 * Note: A ManagedObject inherits models from the Core only when it is a descendant of a UIArea.
 * 
 * @return {boolean} whether a model reference exists or not
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.hasModel = function() { return false; };

/**
 * Searches for the provided ManagedObject in the named aggregation and returns its
 * 0-based index if found, or -1 otherwise. Returns -2 if the given named aggregation
 * is of cardinality 0..1 and doesn't reference the given object.
 * 
 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically determine the position of an object in an aggregation.
 * Use the concrete method indexOf<i>XYZ</i> for aggregation 'XYZ' instead.
 * 
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {sap.ui.base.ManagedObject}
 *            oObject the ManagedObject whose index is looked for.
 * @return {int} the index of the provided managed object in the aggregation.
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.indexOfAggregation = function(sAggregationName,oObject) { return 0; };

/**
 * Inserts managed object <code>oObject</code> to the aggregation named <code>sAggregationName</code> at
 * position <code>iIndex</code>.
 * 
 * If the given object is not valid with regard to the aggregation (if it is not an instance
 * of the type specified for that aggregation) or when the method is called for an aggregation
 * of cardinality 0..1, then an Error is thrown (see {@link #validateAggregation}.
 * 
 * If the given index is out of range with respect to the current content of the aggregation,
 * it is clipped to that range (0 for iIndex < 0, n for iIndex > n).
 * 
 * Please note that this method does not work as expected when an object is added
 * that is already part of the aggregation. In order to change the index of an object
 * inside an aggregation, first remove it, then insert it again.
 * 
 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically insert an object into an aggregation.
 * Use the concrete method insert<i>XYZ</i> for aggregation 'XYZ' instead.
 * 
 * @param {string}
 *            sAggregationName the string identifying the aggregation the managed object <code>oObject</code>
 *            should be inserted into.
 * @param {sap.ui.base.ManagedObject}
 *            oObject the ManagedObject to add; if empty, nothing is inserted.
 * @param {int}
 *            iIndex the <code>0</code>-based index the managed object should be inserted at; for a negative
 *            value <code>iIndex</code>, <code>oObject</code> is inserted at position 0; for a value
 *            greater than the current size of the aggregation, <code>oObject</code> is inserted at
 *            the last position
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject as well as the added child are not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.insertAggregation = function(sAggregationName,oObject,iIndex,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * This triggers rerendering of itself and its children.<br/> As <code>sap.ui.base.ManagedObject</code> "bubbles up" the
 * invalidate, changes to child-<code>Elements</code> will also result in rerendering of the whole sub tree.
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.invalidate = function() {  };

/**
 * Find out whether a property or aggregation is bound
 * 
 * @param {string} sName the name of the property or aggregation
 * @return {boolean} whether a binding exists for the given name
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.isBound = function(sName) { return false; };

/**
 * Returns whether rerendering is currently suppressed on this ManagedObject
 * @return boolean
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.isInvalidateSuppressed = function() {  };

/**
 * Returns whether the given property value is initial and has not been explicitly set or bound.
 * Even after setting the default value or setting null/undefined (which also causes the default value to be set),
 * the property is no longer initial. A property can be reset to initial state by calling <code>resetProperty(sPropertyName)</code>.
 * 
 * @param {string} sPropertyName the name of the property
 * @returns {boolean} true if the property is initial
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.isPropertyInitial = function(sPropertyName) { return false; };

/**
 *  This method is used internally and should only be overridden by a tree managed object which utilizes the tree binding.
 *  In this case and if the aggregation is a tree node the overridden method should then return true.
 *  If true is returned the tree binding will be used instead of the list binding.
 * 
 *  @param {string} sName the aggregation to bind (e.g. nodes for a tree managed object)
 *  @return {boolean} whether tree binding should be used or list binding. Default is false. Override method to change this behavior.
 * 
 *  @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.isTreeBinding = function(sName) { return false; };

/**
 * Generic method which is called, whenever messages for this object exists.
 * 
 * @param {string} sName The property name
 * @param {array} aMessages The messages
 * @protected
 * @since 1.28
 * 
 */
sap.ui.base.ManagedObject.prototype.propagateMessages = function(sName,aMessages) {  };

/**
 * Generic method which can be called, when an aggregation needs to be refreshed.
 * This method does not make any change on the aggregation, but just calls the
 * <code>getContexts</code> method of the binding to trigger fetching of new data.
 * 
 * Subclasses should call this method only in the implementation of a named refresh method
 * and for no other purposes. The framework might change the conditions under which the method
 * is called and the method implementation might rely on those conditions.
 * 
 * @param {string} sName name of the aggregation to refresh
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.refreshAggregation = function(sName) {  };

/**
 * Removes an object from the aggregation named <code>sAggregationName</code> with cardinality 0..n.
 * 
 * The removed object is not destroyed nor is it marked as changed.
 * 
 * If the given object is found in the aggregation, it is removed, it's parent relationship
 * is unset and this ManagedObject is marked as changed. The removed object is returned as
 * result of this method. If the object could not be found, <code>undefined</code> is returned.
 * 
 * This method must only be called for aggregations of cardinality 0..n. The only way to remove objects
 * from a 0..1 aggregation is to set a <code>null</code> value for them.
 * 
 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically remove an object from an aggregation.
 * Use the concrete method remove<i>XYZ</i> for aggregation 'XYZ' instead.
 * 
 * @param {string}
 *            sAggregationName the string identifying the aggregation that the given object should be removed from
 * @param {int | string | sap.ui.base.ManagedObject}
 *            vObject the position or ID of the ManagedObject that should be removed or that ManagedObject itself;
 *            if <code>vObject</code> is invalid, a negative value or a value greater or equal than the current size
 *            of the aggregation, nothing is removed.
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @return {sap.ui.base.ManagedObject} the removed object or null
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.removeAggregation = function(sAggregationName,vObject,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * Removes all objects from the 0..n-aggregation named <code>sAggregationName</code>.
 * 
 * The removed objects are not destroyed nor are they marked as changed.
 * 
 * Additionally, it clears the parent relationship of all removed objects, marks this
 * ManagedObject as changed and returns an array with the removed objects.
 * 
 * If the aggregation did not contain any objects, an empty array is returned and this
 * ManagedObject is not marked as changed.
 * 
 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically remove all objects from an aggregation.
 * Use the concrete method removeAll<i>XYZ</i> for aggregation 'XYZ' instead.
 * 
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @type Array
 * @return an array of the removed elements (might be empty)
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.removeAllAggregation = function(sAggregationName,bSuppressInvalidate) { return null; };

/**
 * Removes all the objects in the 0..n-association named <code>sAssociationName</code> and returns an array
 * with their IDs. This ManagedObject is marked as changed, if the association contained any objects.
 * 
 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically remove all object from an association.
 * Use the concrete method removeAll<i>XYZ</i> for association 'XYZ' instead.
 * 
 * @param {string}
 *            sAssociationName the name of the association
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @type Array
 * @return an array with the IDs of the removed objects (might be empty)
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.removeAllAssociation = function(sAssociationName,bSuppressInvalidate) { return null; };

/**
 * Removes a <code>ManagedObject</code> from the association named <code>sAssociationName</code>.
 * 
 * If an object is removed, the ID of that object is returned and this <code>ManagedObject</code> is
 * marked as changed. Otherwise <code>null</code> is returned.
 * 
 * If the same object was added multiple times to the same association, only a single
 * occurrence of it will be removed by this method. If the object is not found or if the
 * parameter can't be interpreted neither as a <code>ManagedObject</code> (or ID) nor as an index in
 * the association, nothing will be removed. The same is true if an index is given and if
 * that index is out of range for the association.
 * 
 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically remove an object from an association.
 * Use the concrete method remove<i>XYZ</i> for association 'XYZ' instead.
 * 
 * @param {string}
 *            sAssociationName the string identifying the association the <code>ManagedObject</code> should be removed from.
 * @param {int | string | sap.ui.base.ManagedObject}
 *            vObject the position or ID of the <code>ManagedObject</code> to remove or the <code>ManagedObject</code> itself; if <code>vObject</code> is invalid input,
 *            a negative value or a value greater or equal than the current size of the association, nothing is removed
 * @param {boolean}
 *            [bSuppressInvalidate] if <code>true</code>, the managed object is not marked as changed
 * @returns {string|null} ID of the removed <code>ManagedObject</code> or <code>null</code>
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.removeAssociation = function(sAssociationName,vObject,bSuppressInvalidate) { return ""; };

/**
 * remove a propagation listener
 * @param {function} listener function
 * @returns {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @private
 * @sap-restricted sap.ui.fl
 * 
 */
sap.ui.base.ManagedObject.prototype.removePropagationListener = function(listener) { return new sap.ui.base.ManagedObject(); };

/**
 * Resets the given property to the default value and also restores the "initial" state (like it has never been set).
 * 
 * @param {string} sPropertyName the name of the property
 * @returns {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.resetProperty = function(sPropertyName) { return new sap.ui.base.ManagedObject(); };

/**
 * Sets a new object in the named 0..1 aggregation of this ManagedObject and
 * marks this ManagedObject as changed.
 * 
 * If the given object is not valid with regard to the aggregation (if it is not an instance
 * of the type specified for that aggregation) or when the method is called for an aggregation
 * of cardinality 0..n, then an Error is thrown (see {@link #validateAggregation}.
 * 
 * If the new object is the same as the currently aggregated object, then the internal state
 * is not modified and this ManagedObject is not marked as changed.
 * 
 * If the given object is different, the parent of a previously aggregated object is cleared
 * (it must have been this ManagedObject before), the parent of the given object is set to this
 * ManagedObject and {@link #invalidate} is called for this object.
 * 
 * Note that this method does neither return nor destroy the previously aggregated object.
 * This behavior is inherited by named set methods (see below) in subclasses.
 * To avoid memory leaks, applications therefore should first get the aggregated object,
 * keep a reference to it or destroy it, depending on their needs, and only then set a new
 * object.
 * 
 * Note that ManagedObject only implements a single level of change tracking: if a first
 * call to setAggregation recognizes a change, 'invalidate' is called. If another call to
 * setAggregation reverts that change, invalidate() will be called again, the new status
 * is not recognized as being 'clean' again.
 * 
 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically set an object in an aggregation.
 * Use the concrete method set<i>XYZ</i> for aggregation 'XYZ' or the generic {@link #applySettings} instead.
 * 
 * @param {string}
 *            sAggregationName name of an 0..1 aggregation
 * @param {object}
 *            oObject the managed object that is set as aggregated object
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @throws {Error}
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.setAggregation = function(sAggregationName,oObject,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * Sets the associated object for the given managed association of cardinality '0..1' and
 * marks this ManagedObject as changed.
 * 
 * The associated object can either be given by itself or by its id. If <code>null</code> or
 * <code>undefined</code> is given, the association is cleared.
 * 
 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically set an object in an association.
 * Use the concrete method set<i>XYZ</i> for association 'XYZ' or the generic {@link #applySettings} instead.
 * 
 * @param {string}
 *            sAssociationName name of the association
 * @param {string | sap.ui.base.ManagedObject}
 *            sId the ID of the managed object that is set as an association, or the managed object itself or null
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the managed objects invalidate method is not called
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.setAssociation = function(sAssociationName,sId,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * Set the binding context for this ManagedObject for the model with the given name.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
 * 
 * Note: A ManagedObject inherits binding contexts from the Core only when it is a descendant of a UIArea.
 * 
 * @param {sap.ui.model.Context} oContext the new binding context for this object
 * @param {string} [sModelName] the name of the model to set the context for or <code>undefined</code>
 * 
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.setBindingContext = function(oContext,sModelName) { return new sap.ui.base.ManagedObject(); };

/**
 * Sets or unsets a model for the given model name for this ManagedObject.
 * 
 * The <code>sName</code> must either be <code>undefined</code> (or omitted) or a non-empty string.
 * When the name is omitted, the default model is set/unset.
 * 
 * When <code>oModel</code> is <code>null</code> or <code>undefined</code>, a previously set model
 * with that name is removed from this ManagedObject. If an ancestor (parent, UIArea or Core) has a model
 * with that name, this ManagedObject will immediately inherit that model from its ancestor.
 * 
 * All local bindings that depend on the given model name are updated (created if the model references
 * became complete now; updated, if any model reference has changed; removed if the model references
 * became incomplete now).
 * 
 * Any change (new model, removed model, inherited model) is also applied to all aggregated descendants
 * as long as a descendant doesn't have its own model set for the given name.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
 * 
 * Note: By design, it is not possible to hide an inherited model by setting a <code>null</code> or
 * <code>undefined</code> model. Applications can set an empty model to achieve the same.
 * 
 * Note: A ManagedObject inherits models from the Core only when it is a descendant of a UIArea.
 * 
 * @param {sap.ui.model.Model} oModel the model to be set or <code>null</code> or <code>undefined</code>
 * @param {string} [sName] the name of the model or <code>undefined</code>
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.setModel = function(oModel,sName) { return new sap.ui.base.ManagedObject(); };

/**
 * Sets the given value for the given property after validating and normalizing it,
 * marks this object as changed.
 * 
 * If the value is not valid with regard to the declared data type of the property,
 * an Error is thrown. In case <code>null</code> or <code>undefined</code> is passed,
 * the default value for this property is used (see {@link #validateProperty}). To fully
 * reset the property to initial state, use {@link #resetProperty} instead.
 * If the validated and normalized <code>oValue</code> equals the current value of the property,
 * the internal state of this object is not changed (apart from the result of {@link #isPropertyInitial}).
 * If the value changes, it is stored internally
 * and the {@link #invalidate} method is called on this object. In the case of TwoWay
 * databinding, the bound model is informed about the property change.
 * 
 * Note that ManagedObject only implements a single level of change tracking: if a first
 * call to setProperty recognizes a change, 'invalidate' is called. If another call to
 * setProperty reverts that change, invalidate() will be called again, the new status
 * is not recognized as being 'clean' again.
 * 
 * <b>Note:</b> This method is a low level API as described in <a href="#lowlevelapi">the class documentation</a>.
 * Applications or frameworks must not use this method to generically set a property.
 * Use the concrete method set<i>XYZ</i> for property 'XYZ' or the generic {@link #applySettings} instead.
 * 
 * @param {string}  sPropertyName name of the property to set
 * @param {any}     oValue value to set the property to
 * @param {boolean} [bSuppressInvalidate] if true, the managed object is not marked as changed
 * @returns {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * 
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.setProperty = function(sPropertyName,oValue,bSuppressInvalidate) { return new sap.ui.base.ManagedObject(); };

/**
 * Returns a simple string representation of this managed object.
 * 
 * Mainly useful for tracing purposes.
 * @public
 * @return {string} a string description of this managed object
 * 
 */
sap.ui.base.ManagedObject.prototype.toString = function() { return ""; };

/**
 * Unbind the aggregation from the model
 * 
 * @param {string} sName the name of the aggregation
 * @param {boolean} bSuppressReset whether the reset to empty aggregation when unbinding should be suppressed
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.unbindAggregation = function(sName,bSuppressReset) { return new sap.ui.base.ManagedObject(); };

/**
 * Removes the defined binding context of this object, all bindings will now resolve
 * relative to the parent context again.
 * 
 * @deprecated Since 1.11.1, please use unbindElement instead.
 * @param {string} [sModelName] name of the model to remove the context for.
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.unbindContext = function(sModelName) { return new sap.ui.base.ManagedObject(); };

/**
 * Removes the defined binding context of this object, all bindings will now resolve
 * relative to the parent context again.
 * 
 * @param {string} [sModelName] name of the model to remove the context for.
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.unbindObject = function(sModelName) { return new sap.ui.base.ManagedObject(); };

/**
 * Unbind the property from the model
 * 
 * @param {string} sName the name of the property
 * @param {boolean} bSuppressReset whether the reset to the default value when unbinding should be suppressed
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.base.ManagedObject.prototype.unbindProperty = function(sName,bSuppressReset) { return new sap.ui.base.ManagedObject(); };

/**
 * Generic method which is called whenever an aggregation binding has changed.
 * 
 * Depending on the type of the list binding and on additional configuration, this method either
 * destroys all elements in the aggregation <code>sName</code> and recreates them anew
 * or tries to reuse as many existing objects as possible. It is up to the method which
 * strategy it uses.
 * 
 * In case a managed object needs special handling for an aggregation binding, it can create
 * a named update method (e.g. <code>update<i>Rows</i></code> for an aggregation <code>rows</code>)
 * which then will be called by the framework instead of this generic method.
 * 
 * Subclasses should call this method only in the implementation of such a named update method
 * and for no other purposes. The framework might change the conditions under which the method
 * is called and the method implementation might rely on those conditions.
 * 
 * @param {string} sName name of the aggregation to update
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.updateAggregation = function(sName) {  };

/**
 * Checks whether the given value is of the proper type for the given aggregation name.
 * 
 * This method is already called by {@link #setAggregation}, {@link #addAggregation} and {@link #insertAggregation}.
 * In many cases, subclasses of ManagedObject don't need to call it again in their mutator methods.
 * 
 * @param {string} sAggregationName the name of the aggregation
 * @param {sap.ui.base.ManagedObject|any} oObject the aggregated object or a primitive value
 * @param {boolean} bMultiple whether the caller assumes the aggregation to have cardinality 0..n
 * @return {sap.ui.base.ManagedObject|any} the passed object
 * @throws Error if no aggregation with the given name is found or the given value does not fit to the aggregation type
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.validateAggregation = function(sAggregationName,oObject,bMultiple) { return new sap.ui.base.ManagedObject(); };

/**
 * Checks whether the given value is of the proper type for the given property name.
 * 
 * In case <code>null</code> or <code>undefined</code> is passed, the default value for
 * this property is used as value. If no default value is defined for the property, the
 * default value of the type of the property is used.
 * 
 * If the property has a data type that is an instance of sap.ui.base.DataType and if
 * a <code>normalize</code> function is defined for that type, that function will be
 * called with the resulting value as only argument. The result of the function call is
 * then used instead of the raw value.
 * 
 * This method is called by {@link #setProperty}. In many cases, subclasses of
 * ManagedObject don't need to call it themselves.
 * 
 * @param {string} sPropertyName the name of the property
 * @param {any} oValue the value
 * @return {any} the normalized value for the passed value or for the default value if null or undefined was passed
 * @throws Error if no property with the given name is found or the given value does not fit to the property type
 * @protected
 * 
 */
sap.ui.base.ManagedObject.prototype.validateProperty = function(sPropertyName,oValue) { return null; };


// ---- sap.ui.base.ManagedObjectMetadata --------------------------------------------------------------------------

/**
 * Creates a new metadata object that describes a subclass of ManagedObject.
 * 
 * <b>Note:</b> Code outside the <code>sap.ui.base</code> namespace must not call this
 * constructor directly. Instances will be created automatically when a new class is
 * defined with one of the {@link sap.ui.base.ManagedObject.extend <i>SomeClass</i>.extend}
 * methods.
 * 
 * <b>Note</b>: throughout this class documentation, the described subclass of ManagedObject
 * is referenced as <i>the described class</i>.
 * 
 * @param {string} sClassName fully qualified name of the described class
 * @param {object} oClassInfo static info to construct the metadata from
 * 
 * @class
 * @classdesc
 * 
 * <strong>Note about Info Objects</strong>
 * 
 * Several methods in this class return info objects that describe a property,
 * aggregation, association or event of the class described by this metadata object.
 * The type, structure and behavior of these info objects is not yet documented and
 * not part of the stable, public API.
 * 
 * Code using such methods and the returned info objects therefore needs to be aware
 * of the following restrictions:
 * 
 * <ul>
 * <li>the set of properties exposed by each info object, their type and value
 *     might change as well as the class of the info object itself.
 * 
 *     Properties that represent settings provided during class definition
 *     (in the oClassInfo parameter of the 'extend' call, e.g. 'type', 'multiple'
 *     of an aggregation) are more likely to stay the same than additional, derived
 *     properties like '_iKind'.</li>
 * 
 * <li>info objects must not be modified / enriched although they technically could.</li>
 * 
 * <li>the period of validity of info objects is not defined. They should be
 *     referenced only for a short time and not be kept as members of long living
 *     objects or closures.</li>
 * 
 * </ul>
 * @version 1.48.4
 * @since 0.8.6
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata = function(sClassName,oClassInfo) {};
/**
 * Returns an info object for the named public aggregation of the described class
 * no matter whether the aggregation was defined by the class itself or by one of its
 * ancestor classes.
 * 
 * If neither the class nor its ancestor classes define a public aggregation with the given
 * name, <code>undefined</code> is returned.
 * 
 * If the name is not given (or has a falsy value), then it is substituted by the
 * name of the default aggregation of the 'described class' (if any).
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @param {string} [sName] name of the aggregation or empty
 * @returns {Object} An info object describing the aggregation or <code>undefined</code>
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAggregation = function(sName) { return null; };

/**
 * Returns a map of info objects for the public aggregations of the described class.
 * Aggregations declared by ancestor classes are not included.
 * 
 * The returned map keys the aggregation info objects by their name.
 * In case of 0..1 aggregations this is the singular name, otherwise it is the plural name.
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @return {map} Map of aggregation info objects keyed by aggregation names
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAggregations = function() { return null; };

/**
 * Returns a map of info objects for all public aggregations of the described class,
 * including public aggregations form the ancestor classes.
 * 
 * The returned map keys the aggregation info objects by their name.
 * In case of 0..1 aggregations this is the singular name, otherwise it is the plural
 * name.
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @return {map} Map of aggregation info objects keyed by aggregation names
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAllAggregations = function() { return null; };

/**
 * Returns a map of info objects for all public associations of the described class,
 * including public associations form the ancestor classes.
 * 
 * The returned map keys the association info objects by their name.
 * In case of 0..1 associations this is the singular name, otherwise it is the plural name.
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @return {map} Map of association info objects keyed by association names
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAllAssociations = function() { return null; };

/**
 * Returns a map of info objects for all public events of the described class,
 * including public events form the ancestor classes.
 * 
 * The returned map keys the event info objects by their name.
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @return {map} Map of event info objects keyed by event names
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAllEvents = function() { return null; };

/**
 * Returns a map of info objects for all private (hidden) aggregations of the described class,
 * including private aggregations from the ancestor classes.
 * 
 * The returned map contains aggregation info objects keyed by the aggregation name.
 * In case of 0..1 aggregations this is the singular name, otherwise it is the plural name.
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @return {map} Map of aggregation infos keyed by aggregation names
 * @protected
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAllPrivateAggregations = function() { return null; };

/**
 * Returns a map of info objects for all public properties of the described class,
 * including public properties from the ancestor classes.
 * 
 * The returned map keys the property info objects by their name.
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @return {map} Map of property info objects keyed by the property names
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAllProperties = function() { return null; };

/**
 * Returns an info object for the named public association of the described class,
 * no matter whether the association was defined by the class itself or by one of its
 * ancestor classes.
 * 
 * If neither the described class nor its ancestor classes define an association with
 * the given name, <code>undefined</code> is returned.
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @param {string} sName name of the association
 * @returns {Object} An info object describing the association or <code>undefined</code>
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAssociation = function(sName) { return null; };

/**
 * Returns a map of info objects for all public associations of the described class.
 * Associations declared by ancestor classes are not included.
 * 
 * The returned map keys the association info objects by their name.
 * In case of 0..1 associations this is the singular name, otherwise it is the plural name.
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @return {map} Map of association info objects keyed by association names
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAssociations = function() { return null; };

/**
 * Returns an info object for the named public event of the described class,
 * no matter whether the event was defined by the class itself or by one of its
 * ancestor classes.
 * 
 * If neither the described class nor its ancestor classes define an event with the
 * given name, <code>undefined</code> is returned.
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @param {string} sName name of the event
 * @returns {Object} An info object describing the event or <code>undefined</code>
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getEvent = function(sName) { return null; };

/**
 * Returns a map of info objects for the public events of the described class.
 * Events declared by ancestor classes are not included.
 * 
 * The returned map keys the event info objects by their name.
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @return {map} Map of event info objects keyed by event names
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getEvents = function() { return null; };

/**
 * Returns the name of the library that contains the described UIElement.
 * @return {string} the name of the library
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getLibraryName = function() { return ""; };

/**
 * Returns the info object for the named public or private aggregation declared by the
 * described class or by any of its ancestors.
 * 
 * If the name is not given (or has a falsy value), then it is substituted by the
 * name of the default aggregation of the described class (if it is defined).
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @param {string} sAggregationName name of the aggregation to be retrieved or empty
 * @return {object} aggregation info object or undefined
 * @protected
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getManagedAggregation = function(sAggregationName) { return new Object(); };

/**
 * Returns a map of info objects for the public properties of the described class.
 * Properties declared by ancestor classes are not included.
 * 
 * The returned map keys the property info objects by their name.
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @return {map} Map of property info objects keyed by the property names
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getProperties = function() { return null; };

/**
 * Returns an info object for the named public property of the described class,
 * no matter whether the property was defined by the class itself or by one of its
 * ancestor classes.
 * 
 * If neither the described class nor its ancestor classes define a property with the
 * given name, <code>undefined</code> is returned.
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @param {string} sName name of the property
 * @returns {Object} An info object describing the property or <code>undefined</code>
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getProperty = function(sName) { return null; };

/**
 * Returns a map of default values for all properties declared by the
 * described class and its ancestors, keyed by the property name.
 * 
 * @return {map} Map of default values keyed by property names
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getPropertyDefaults = function() { return null; };

/**
 * Returns an info object for a public setting with the given name that either is
 * a managed property or a managed aggregation of cardinality 0..1 and with at least
 * one simple alternative type. The setting can be defined by the class itself or
 * by one of its ancestor classes.
 * 
 * If neither the described class nor its ancestor classes define a suitable setting
 * with the given name, <code>undefined</code> is returned.
 * 
 * <b>Warning:</b> Type, structure and behavior of the returned info objects is not documented
 *   and therefore not part of the API. See the {@link #constructor Notes about Info objects}
 *   in the constructor documentation of this class.
 * 
 * @param {string} sName name of the property like setting
 * @returns {Object} An info object describing the property or aggregation or <code>undefined</code>
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.getPropertyLikeSetting = function(sName) { return null; };

/**
 * Checks the existence of the given aggregation by its name.
 * @param {string} sName name of the aggregation
 * @return {boolean} true, if the aggregation exists
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.hasAggregation = function(sName) { return false; };

/**
 * Checks the existence of the given association by its name
 * @param {string} sName name of the association
 * @return {boolean} true, if the association exists
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.hasAssociation = function(sName) { return false; };

/**
 * Checks the existence of the given event by its name
 * 
 * @param {string} sName name of the event
 * @return {boolean} true, if the event exists
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.hasEvent = function(sName) { return false; };

/**
 * Checks the existence of the given property by its name
 * @param {string} sName name of the property
 * @return {boolean} true, if the property exists
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.hasProperty = function(sName) { return false; };

/**
 * Test whether a given ID looks like it was automatically generated.
 * 
 * Examples:
 * <pre>
 * True for:
 *   "foo--__bar04--baz"
 *   "foo--__bar04"
 *   "__bar04--baz"
 *   "__bar04"
 *   "__bar04--"
 *   "__bar04--foo"
 * False for:
 *   "foo__bar04"
 *   "foo__bar04--baz"
 * </pre>
 * 
 * See {@link sap.ui.base.ManagedObjectMetadata.prototype.uid} for details on ID generation.
 * 
 * @param {string} sId the ID that should be tested
 * @return {boolean} whether the ID is likely to be generated
 * @static
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.isGeneratedId = function(sId) { return false; };

/**
 * Load and returns the design time metadata asynchronously.
 * 
 * Be aware that ManagedObjects do not ensure to have unique IDs. This may lead to
 * issues if you would like to persist DesignTime based information. In that case
 * you need to take care of identification yourself.
 * 
 * @return {Promise} A promise which will return the loaded design time metadata
 * @private
 * @sap-restricted sap.ui.fl com.sap.webide
 * @since 1.48.0
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.loadDesignTime = function() { return null; };

/**
 * Calculates a new ID for an instance of this class.
 * 
 * Note that the calculated short name part is usually not unique across
 * all classes, but doesn't have to be. It might even be empty when the
 * class name consists of invalid characters only.
 * 
 * @return {string} A (hopefully unique) control ID
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.prototype.uid = function() { return ""; };

/**
 * Calculates a new ID based on a prefix.
 * 
 * To guarantee uniqueness of the generated IDs across all ID prefixes,
 * prefixes must not end with digits.
 * 
 * @param {string} sIdPrefix prefix for the new ID
 * @return {string} A (hopefully unique) control id
 * @public
 * 
 */
sap.ui.base.ManagedObjectMetadata.uid = function(sIdPrefix) { return ""; };


// ---- sap.ui.base.Metadata --------------------------------------------------------------------------

/**
 * Creates a new metadata object from the given static infos.
 * 
 * Note: throughout this class documentation, the described subclass of Object
 * is referenced as <i>the described class</i>.
 * 
 * @param {string} sClassName fully qualified name of the described class
 * @param {object} oClassInfo info to construct the class and its metadata from
 * 
 * @class Metadata for a class.
 * @version 1.48.4
 * @since 0.8.6
 * @public
 * 
 */
sap.ui.base.Metadata = function(sClassName,oClassInfo) {};
/**
 * Returns an array with the names of all public methods declared by the described class
 * and its ancestors.
 * 
 * @return {string[]} array with names of all public methods provided by the described class and its ancestors
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.getAllPublicMethods = function() { return new Array(); };

/**
 * Returns the (constructor of the) described class
 * @return {function} class described by this metadata
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.getClass = function() { return function() {}; };

/**
 * Returns the fully qualified name of the described class
 * @return {string} name of the described class
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.getName = function() { return ""; };

/**
 * Returns the metadata object of the base class of the described class
 * or null if the class has no (documented) base class.
 * 
 * @return {sap.ui.base.Metadata} metadata of the base class
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.getParent = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns an array with the names of the public methods declared by the described class.
 * 
 * @return {string[]} array with names of public methods declared by the described class
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.getPublicMethods = function() { return new Array(); };

/**
 * Returns whether the described class is abstract
 * @return {boolean} whether the class is abstract
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.isAbstract = function() { return false; };

/**
 * Whether the described class is deprecated and should not be used any more
 * 
 * @return {boolean} whether the class is considered deprecated
 * @public
 * @since 1.26.4
 * 
 */
sap.ui.base.Metadata.prototype.isDeprecated = function() { return false; };

/**
 * Returns whether the described class is final
 * @return {boolean} whether the class is final
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.isFinal = function() { return false; };

/**
 * Checks whether the described class or one of its ancestor classes implements the given interface.
 * 
 * @param {string} sInterface name of the interface to test for (in dot notation)
 * @return {boolean} whether this class implements the interface
 * @public
 * 
 */
sap.ui.base.Metadata.prototype.isInstanceOf = function(sInterface) { return false; };


// ---- sap.ui.base.Object --------------------------------------------------------------------------

/**
 * Constructor for an sap.ui.base.Object.
 * 
 * @class Base class for all SAPUI5 Objects
 * @abstract
 * @version 1.48.4
 * @public
 * 
 */
sap.ui.base.Object = function() {};
/**
 * Creates metadata for a given class and attaches it to the constructor and prototype of that class.
 * 
 * After creation, metadata can be retrieved with getMetadata().
 * 
 * The static info can at least contain the following entries:
 * <ul>
 * <li>baseType: {string} fully qualified name of a base class or empty
 * <li>publicMethods: {string} an array of method names that will be visible in the interface proxy returned by {@link #getInterface}
 * </ul>
 * 
 * @param {string} sClassName name of an (already declared) constructor function
 * @param {object} oStaticInfo static info used to create the metadata object
 * @param {string} oStaticInfo.baseType qualified name of a base class
 * @param {string[]} oStaticInfo.publicMethods array of names of public methods
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.
 * 
 * @return {sap.ui.base.Metadata} the created metadata object
 * @public
 * @static
 * @deprecated Since 1.3.1. Use the static <code>extend</code> method of the desired base class (e.g. {@link sap.ui.base.Object.extend})
 * 
 */
sap.ui.base.Object.defineClass = function(sClassName,oStaticInfo,FNMetaImpl) { return new sap.ui.base.Metadata(); };

/**
 * Destructor method for objects
 * @public
 * 
 */
sap.ui.base.Object.prototype.destroy = function() {  };

/**
 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain three kinds of informations:
 * <ul>
 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
 * and might contain the following information
 * <ul>
 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
 * facade of the class</li>
 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
 * </ul>
 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
 * </li>
 * 
 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
 * If no constructor function is given, the framework creates a default implementation that delegates all
 * its arguments to the constructor function of the base class.
 * </li>
 * 
 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
 * make sense to use primitive values here other than to declare public constants.
 * </li>
 * 
 * </ul>
 * 
 * The prototype object of the newly created class uses the same prototype as instances of the base class
 * (prototype chaining).
 * 
 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
 * itself.
 * 
 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
 * can be specified. Instances of that class will be used to represent metadata for the newly created class
 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
 * 
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] structured object with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @since 1.3.1
 * 
 */
sap.ui.base.Object.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the public interface of the object.
 * 
 * @return {sap.ui.base.Interface} the public interface of the object
 * @public
 * 
 */
sap.ui.base.Object.prototype.getInterface = function() { return new sap.ui.base.Interface(); };

/**
 * Returns the metadata for the class that this object belongs to.
 * 
 * This method is only defined when metadata has been declared by using {@link sap.ui.base.Object.defineClass}
 * or {@link sap.ui.base.Object.extend}.
 * 
 * @return {sap.ui.base.Metadata] metadata for the class of the object
 * @public
 * 
 */
sap.ui.base.Object.prototype.getMetadata = function() {  };


// ---- sap.ui.base.ObjectPool --------------------------------------------------------------------------

/**
 * Creates an ObjectPool instance based on the given oObjectClass.&lt;br/&gt;
 * If there is a free pooled instance, returns that one, otherwise creates a new one.&lt;br/&gt;
 * In order to be maintained by the ObjectPool, oObjectClass must implement
 * methods described in the class description.
 * 
 * 
 * @param {function} oObjectClass constructor for the class of objects that this pool should manage
 * 
 * @class Manages a pool of objects all of the same type;
 * the type has to be specified at pool construction time.
 * 
 * Maintains a list of free objects of the given type.
 * If {@link sap.ui.base.ObjectPool.prototype.borrowObject} is called, an existing free object
 * is taken from the pool and the <code>init</code> method is called on this
 * object.
 * 
 * When no longer needed, any borrowed object should be returned to
 * the pool by calling {@link #returnObject}. At that point in time,
 * the reset method is called on the object and the object is added to the
 * list of free objects.
 * 
 * See {@link sap.ui.base.Poolable} for a description of the contract for poolable objects.
 * 
 * Example:
 * <pre>
 *   this.oEventPool = new sap.ui.base.ObjectPool(sap.ui.base.Event);
 *   var oEvent = this.oEventPool.borrowObject(iEventId, mParameters);
 * </pre>
 * 
 * @extends sap.ui.base.Object
 * @version 1.48.4
 * @constructor
 * @public
 * 
 */
sap.ui.base.ObjectPool = function(oObjectClass) {};
/**
 * Borrows a free object from the pool. Any arguments to this method
 * are forwarded to the init method of the borrowed object.
 * 
 * @param {any} [any] optional initialization parameters for the borrowed object
 * @return {object} the borrowed object of the same type that has been specified for this pool
 * @public
 * 
 */
sap.ui.base.ObjectPool.prototype.borrowObject = function(any) { return new Object(); };

/**
 * Creates a new subclass of class sap.ui.base.ObjectPool with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.base.ObjectPool.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.base.ObjectPool.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.base.ObjectPool.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns an object to the pool. The object must have been borrowed from this
 * pool beforehand. The reset method is called on the object before it is added
 * to the set of free objects.
 * 
 * @param {object} oObject the object to return to the pool
 * @public
 * 
 */
sap.ui.base.ObjectPool.prototype.returnObject = function(oObject) {  };


// ---- sap.ui.base.Poolable --------------------------------------------------------------------------

/**
 * Called by the object pool when this instance will be actived for a caller.
 * The same method will be called after a new instance has been created by an otherwise
 * exhausted pool.
 * 
 * If the caller provided any arguments to {@link sap.ui.base.ObjectPool#borrowObject}
 * all arguments will be propagated to this method.
 * @public
 * 
 */
sap.ui.base.Poolable.prototype.init = function() {  };

/**
 * Called by the object pool when an instance is returned to the pool.
 * While no specific implementation is required, poolable objects in general
 * should clean all caller specific state (set to null) in this method to
 * avoid memory leaks and to enforce garbage collection of the caller state.
 * @public
 * 
 */
sap.ui.base.Poolable.prototype.reset = function() {  };


// ---- sap.ui.core --------------------------------------------------------------------------

/**
 * Applies the support for custom style classes on the prototype of a <code>sap.ui.core.Element</code>.
 * 
 * All controls (subclasses of <code>sap.ui.core.Control</code>) provide the support custom style classes. The control API provides functions
 * to the application which allow it to add, remove or change style classes for the control.
 * In general, this option is not available for elements because elements do not necessarily have a representation in the DOM.
 * 
 * This function can be used by a control developer to explicitly enrich the API of his/her element implementation with the API functions
 * for the custom style class support. It must be called on the prototype of the element.
 * 
 * <b>Usage Example:</b>
 * <pre>
 * sap.ui.define(['sap/ui/core/Element', 'sap/ui/core/CustomStyleClassSupport'], function(Element, CustomStyleClassSupport) {
 *    "use strict";
 *    var MyElement = Element.extend("my.MyElement", {
 *       metadata : {
 *          //...
 *       }
 *       //...
 *    });
 * 
 *    CustomStyleClassSupport.apply(MyElement.prototype);
 * 
 *    return MyElement;
 * }, true);
 * </pre>
 * 
 * Furthermore, the function <code>oRenderManager.writeClasses(oElement);</code> ({@link sap.ui.core.RenderManager#writeClasses}) must be called within
 * the renderer of the control to which the element belongs, when writing the root tag of the element. This ensures the classes are written to the HTML.
 * 
 * This function adds the following functions to the elements prototype:
 * <ul>
 * <li><code>addStyleClass</code>: {@link sap.ui.core.Control#addStyleClass}</li>
 * <li><code>removeStyleClass</code>: {@link sap.ui.core.Control#removeStyleClass}</li>
 * <li><code>toggleStyleClass</code>: {@link sap.ui.core.Control#toggleStyleClass}</li>
 * <li><code>hasStyleClass</code>: {@link sap.ui.core.Control#hasStyleClass}</li>
 * </ul>
 * In addition the clone function of the element is extended to ensure that the custom style classes are also available on the cloned element.
 * 
 * <b>Note:</b> This function can only be used <i>within</i> control development. An application cannot add style class support on existing elements by calling this function.
 * 
 * @public
 * 
 * @memberof sap.ui.core
 */
sap.ui.core.CustomStyleClassSupport = function() {  };


// ---- sap.ui.core.AbsoluteCSSSize --------------------------------------------------------------------------


// ---- sap.ui.core.AccessibleLandmarkRole --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.AccessibleLandmarkRole.toString = function() { return ""; };

// ---- sap.ui.core.AccessibleRole --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.AccessibleRole.toString = function() { return ""; };

// ---- sap.ui.core.AppCacheBuster --------------------------------------------------------------------------

/**
 * Converts the given URL if it matches a URL in the cachebuster index.
 * If not then the same URL will be returned. To prevent URLs from being
 * modified by the application cachebuster you can implement the function
 * <code>sap.ui.core.AppCacheBuster.handleURL</code>.
 * 
 * @param {string} sUrl any URL
 * @return {string} modified URL when matching the index or unmodified when not
 * 
 * @public
 * 
 * @memberof sap.ui.core.AppCacheBuster
 */
sap.ui.core.AppCacheBuster.convertURL = function(sUrl) { return ""; };

/**
 * Callback function which can be overwritten to programmatically decide
 * whether to rewrite the given URL or not.
 * 
 * @param {string} sUrl any URL
 * @return {boolean} <code>true</code> to rewrite or <code>false</code> to ignore
 * 
 * @public
 * 
 * @memberof sap.ui.core.AppCacheBuster
 */
sap.ui.core.AppCacheBuster.handleURL = function(sUrl) { return false; };

/**
 * Normalizes the given URL and make it absolute.
 * 
 * @param {string} sUrl any URL
 * @return {string} normalized URL
 * 
 * @public
 * 
 * @memberof sap.ui.core.AppCacheBuster
 */
sap.ui.core.AppCacheBuster.normalizeURL = function(sUrl) { return ""; };

/**
 * Registers an application. Loads the cachebuster index file from this
 * locations. All registered files will be considered by the cachebuster
 * and the URLs will be prefixed with the timestamp of the index file.
 * 
 * @param {string} base URL of an application providing a cachebuster index file
 * 
 * @public
 * 
 * @memberof sap.ui.core.AppCacheBuster
 */
sap.ui.core.AppCacheBuster.register = function(base) {  };


// ---- sap.ui.core.BarColor --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.BarColor.toString = function() { return ""; };

// ---- sap.ui.core.BusyIndicator --------------------------------------------------------------------------

/**
 * The <code>Close</code> event is fired, <strong>before</strong> the
 * <code>BusyIndicator</code> has closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent is the event object
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource is the instance
 *                                    that fired the event
 * @param {object} oControlEvent.getParameters provides all additional parameters
 *                                    that are delivered with the event
 * @param {jQuery} oControlEvent.getParameters.$Busy is the jQuery object
 *                                    of the BusyIndicator
 * @public
 * 
 * @memberof sap.ui.core.BusyIndicator
 */
sap.ui.core.BusyIndicator.prototype.Close = function(oControlEvent) {  };

/**
 * The <code>Open</code> event is fired, after the <code>BusyIndicator</code>
 * has opened.
 * @event
 * @param {sap.ui.base.Event} oControlEvent is the event object
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource is the instance
 *                                    that fired the event
 * @param {object} oControlEvent.getParameters provides all additional parameters
 *                                    that are delivered with the event
 * @param {jQuery} oControlEvent.getParameters.$Busy is the jQuery object
 *                                    of the BusyIndicator
 * @public
 * 
 * @memberof sap.ui.core.BusyIndicator
 */
sap.ui.core.BusyIndicator.prototype.Open = function(oControlEvent) {  };

/**
 * Registers a handler for the "close" event
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 *            This function will be called on the oListener-instance (if
 *            present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function.
 * @return {sap.ui.core.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 * @memberof sap.ui.core.BusyIndicator
 */
sap.ui.core.BusyIndicator.attachClose = function(fnFunction,oListener) { return new sap.ui.core.BusyIndicator(); };

/**
 * Registers a handler for the "open" event.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This
 *            function will be called on the oListener-instance (if present)
 *            or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function.
 * @return {sap.ui.core.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 * @memberof sap.ui.core.BusyIndicator
 */
sap.ui.core.BusyIndicator.attachOpen = function(fnFunction,oListener) { return new sap.ui.core.BusyIndicator(); };

/**
 * Unregisters a handler for the "close" event
 * 
 * @param {function}
 *            fnFunction The callback function to unregister
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 * @memberof sap.ui.core.BusyIndicator
 */
sap.ui.core.BusyIndicator.detachClose = function(fnFunction,oListener) { return new sap.ui.core.BusyIndicator(); };

/**
 * Unregisters a handler for the "open" event
 * @param {function}
 *            fnFunction The callback function to unregister
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * 
 * @memberof sap.ui.core.BusyIndicator
 */
sap.ui.core.BusyIndicator.detachOpen = function(fnFunction,oListener) { return new sap.ui.core.BusyIndicator(); };

/**
 * Removes the BusyIndicator from the screen
 * 
 * @public
 * 
 * @memberof sap.ui.core.BusyIndicator
 */
sap.ui.core.BusyIndicator.hide = function() {  };

/**
 * Displays the BusyIndicator and starts blocking all user input.
 * This only happens after some delay and if after that delay the
 * BusyIndicator.hide() has not yet been called in the meantime.
 * There is a certain default value for the delay, but that one can be
 * overridden.
 * 
 * @public
 * @param {int} [iDelay] The delay in milliseconds before opening the
 *                       BusyIndicator. It is not opened if hide() is called
 *                       before end of the delay. If no delay (or no valid
 *                       delay) is given, the default value is used.
 * 
 * @memberof sap.ui.core.BusyIndicator
 */
sap.ui.core.BusyIndicator.show = function(iDelay) {  };


// ---- sap.ui.core.BusyIndicatorUtils --------------------------------------------------------------------------


// ---- sap.ui.core.CalendarType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.CalendarType.toString = function() { return ""; };

// ---- sap.ui.core.Collision --------------------------------------------------------------------------


// ---- sap.ui.core.Component --------------------------------------------------------------------------

/**
 * Creates and initializes a new Component with the given <code>sId</code> and
 * settings.
 * 
 * The set of allowed entries in the <code>mSettings</code> object depends on
 * the concrete subclass and is described there. See {@link sap.ui.core.Component}
 * for a general description of this argument.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * This class does not have its own settings, but all settings applicable to the base type
 * {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject} can be used.
 * @param {string}
 *            [sId] Optional ID for the new control; generated automatically if
 *            no non-empty ID is given. Note: this can be omitted, no matter
 *            whether <code>mSettings</code> are given or not!
 * @param {object}
 *            [mSettings] Optional object with initial settings for the
 *            new Component instance
 * @public
 * 
 * @class Base Class for Component.
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @version 1.48.4
 * @since 1.9.2
 * 
 */
sap.ui.core.Component = function(sId,mSettings) {};
/**
 * Callback handler which will be executed once a component instance has
 * been created by {#link sap.ui.component}. The component instance and the
 * configuration object will be passed into the registered function.
 * For async scenarios (<code>vConfig.async = true</code>) a Promise can be provided as
 * return value from the callback handler to delay resolving the Promise
 * returned by {@link sap.ui.component}.
 * In synchronous scenarios the return value will be ignored.
 * 
 * Example usage:
 * <pre>
 * sap.ui.require(['sap/ui/core/Component'], function(Component) {
 *   Component._fnOnInstanceCreated = function(oComponent, oConfig) {
 *     // do some logic with the config
 * 
 *     // optionally return a Promise
 *     return doAsyncStuff();
 *   };
 * });
 * </pre>
 * <b>ATTENTION:</b> This hook must only be used by UI flexibility (library:
 * sap.ui.fl) and will be replaced with a more generic solution!
 * 
 * @private
 * @sap-restricted sap.ui.fl
 * @since 1.43.0
 * 
 */
sap.ui.core.Component._fnOnInstanceCreated = undefined

/**
 * Creates a nested component that is declared in the <code>sap.ui5/componentUsages</code> section of
 * the descriptor (manifest.json). The following snippet shows the declaration:
 * <pre>
 * {
 *   [...]
 *   "sap.ui5": {
 *     "componentUsages": {
 *       "myUsage": {
 *         "name": "my.useful.Component"
 *       }
 *     }
 *   }
 *   [...]
 * }
 * </pre>
 * The syntax of the configuration object of the component usage matches the
 * configuration object of the {#link sap.ui.component} factory function.
 * 
 * This is an example of how the <code>createComponent</code> function can
 * be used for asynchronous scenarios:
 * <pre>
 * oComponent.createComponent("myUsage").then(function(oComponent) {
 *   oComponent.doSomething();
 * }).catch(function(oError) {
 *   jQuery.sap.log.error(oError);
 * });
 * </pre>
 * 
 * The following example shows how <code>createComponent</code> can be used to create a nested
 * component by providing specific properties like <code>id</code>, <code>async</code>,
 * <code>settings</code>, or <code>componentData</code>:
 * <pre>
 * var oComponent = oComponent.createComponent({
 *   usage: "myUsage",
 *   id: "myId",
 *   settings: { ... },
 *   componentData: { ... }
 * });
 * </pre>
 * The allowed list of properties are defined in the parameter documentation
 * of this function.
 * 
 * The properties can also be defined in the descriptor. These properties can
 * be overwritten by the local properties of that function.
 * 
 * @param {string|object} vUsage ID of the component usage or the configuration object that creates the component
 * @param {string} vUsage.usage ID of component usage
 * @param {string} [vUsage.id] ID of the nested component that is prefixed with <code>autoPrefixId</code>
 * @param {boolean} [vUsage.async=true] Indicates whether the component creation is done asynchronously (You should use synchronous creation only if really necessary, because this has a negative impact on performance.)
 * @param {object} [vUsage.settings] Settings for the nested component like for {#link sap.ui.component} or the component constructor
 * @param {object} [vUsage.componentData] Initial data of the component (@see sap.ui.core.Component#getComponentData)
 * @return {sap.ui.core.Component|Promise} Component instance or Promise which will be resolved with the component instance (defaults to Promise / asynchronous behavior)
 * @public
 * @since 1.47.0
 * 
 */
sap.ui.core.Component.prototype.createComponent = function(vUsage) { return new sap.ui.core.Component(); };

/**
 * Cleans up the Component instance before destruction.
 * 
 * Applications must not call this hook method directly, it is called by the
 * framework when the element is {@link #destroy destroyed}.
 * 
 * Subclasses of Component should override this hook to implement any necessary
 * cleanup.
 * @protected
 * 
 */
sap.ui.core.Component.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.Component with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Component.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns user specific data object
 * 
 * @return {object} componentData
 * @public
 * @since 1.15.0
 * 
 */
sap.ui.core.Component.prototype.getComponentData = function() { return new Object(); };

/**
 * Returns the event bus of this component.
 * @return {sap.ui.core.EventBus} the event bus
 * @since 1.20.0
 * @public
 * 
 */
sap.ui.core.Component.prototype.getEventBus = function() { return new sap.ui.core.EventBus(); };

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 * 
 */
sap.ui.core.Component.prototype.getInterface = function() {  };

/**
 * Returns the manifest defined in the metadata of the component.
 * If not specified, the return value is null.
 * 
 * @return {object} manifest.
 * @public
 * @since 1.33.0
 * 
 */
sap.ui.core.Component.prototype.getManifest = function() { return new Object(); };

/**
 * Returns the configuration of a manifest section or the value for a
 * specific path. If no section or key is specified, the return value is null.
 * 
 * Example:
 * <code>
 *   {
 *     "sap.ui5": {
 *       "dependencies": {
 *         "libs": {
 *           "sap.m": {}
 *         },
 *         "components": {
 *           "my.component.a": {}
 *         }
 *       }
 *   });
 * </code>
 * 
 * The configuration above can be accessed in the following ways:
 * <ul>
 * <li><b>By section/namespace</b>: <code>oComponent.getManifestEntry("sap.ui5")</code></li>
 * <li><b>By path</b>: <code>oComponent.getManifestEntry("/sap.ui5/dependencies/libs")</code></li>
 * </ul>
 * 
 * By section/namespace returns the configuration for the specified manifest
 * section and by path allows to specify a concrete path to a dedicated entry
 * inside the manifest. The path syntax always starts with a slash (/).
 * 
 * @param {string} sKey Either the manifest section name (namespace) or a concrete path
 * @return {any|null} Value of the manifest section or the key (could be any kind of value)
 * @public
 * @since 1.33.0
 * 
 */
sap.ui.core.Component.prototype.getManifestEntry = function(sKey) { return null; };

/**
 * Returns the manifest object.
 * @return {sap.ui.core.Manifest} manifest.
 * @public
 * @since 1.33.0
 * 
 */
sap.ui.core.Component.prototype.getManifestObject = function() { return new sap.ui.core.Manifest(); };

/**
 * Returns the metadata for the specific class of the current instance.
 * 
 * @return {sap.ui.core.ComponentMetadata} Metadata for the specific class of the current instance.
 * @public
 * 
 */
sap.ui.core.Component.prototype.getMetadata = function() { return new sap.ui.core.ComponentMetadata(); };

/**
 * Returns the metadata for the Component class.
 * 
 * @return {sap.ui.core.ComponentMetadata} Metadata for the Component class.
 * @static
 * @public
 * 
 */
sap.ui.core.Component.getMetadata = function() { return new sap.ui.core.ComponentMetadata(); };

/**
 * Returns the Component instance in whose "context" the given ManagedObject has been created
 * or <code>undefined</code>.
 * 
 * This is a convenience wrapper around {@link sap.ui.core.Component.getOwnerIdFor Component.getOwnerIdFor}.
 * If the owner ID cannot be determined for reasons documented on <code>getOwnerForId</code>
 * or when the Component for the determined ID no longer exists, <code>undefined</code>
 * will be returned.
 * 
 * @param {sap.ui.base.ManagedObject} oObject Object to retrieve the owner Component for
 * @return {sap.ui.core.Component} the owner Component or <code>undefined</code>.
 * @static
 * @public
 * @since 1.25.1
 * 
 */
sap.ui.core.Component.getOwnerComponentFor = function(oObject) { return new sap.ui.core.Component(); };

/**
 * Returns the ID of the object in whose "context" the given ManagedObject has been created.
 * 
 * For objects that are not ManagedObjects or for which the owner is unknown,
 * <code>undefined</code> will be returned as owner ID.
 * 
 * <strong>Note</strong>: Ownership for objects is only checked by the framework at the time
 * when they are created. It is not checked or updated afterwards. And it can only be detected
 * while the {@link sap.ui.core.Component#runAsOwner Component.runAsOwner} function is executing.
 * Without further action, this is only the case while the content of a UIComponent is
 * {@link sap.ui.core.UIComponent#createContent constructed} or when a
 * {@link sap.ui.core.routing.Router Router} creates a new View and its content.
 * 
 * <strong>Note</strong>: This method does not guarantee that the returned owner ID belongs
 * to a Component. Currently, it always does. But future versions of UI5 might introduce a
 * more fine grained ownership concept, e.g. taking Views into account. Callers that
 * want to deal only with components as owners, should use the following method:
 * {@link sap.ui.core.Component.getOwnerComponentFor Component.getOwnerComponentFor}.
 * It guarantees that the returned object (if any) will be a Component.
 * 
 * <strong>Further note</strong> that only the ID of the owner is recorded. In rare cases,
 * when the lifecycle of a ManagedObject is not bound to the lifecycle of its owner,
 * (e.g. by the means of aggregations), then the owner might have been destroyed already
 * whereas the ManagedObject is still alive. So even the existence of an owner ID is
 * not a guarantee for the existence of the corresponding owner.
 * 
 * @param {sap.ui.base.ManagedObject} oObject Object to retrieve the owner ID for
 * @return {string} ID of the owner or <code>undefined</code>
 * @static
 * @public
 * @since 1.15.1
 * 
 */
sap.ui.core.Component.getOwnerIdFor = function(oObject) { return ""; };

/**
 * Returns a service interface for the {@link sap.ui.core.service.Service Service}
 * declared in the descriptor for components (manifest.json). The declaration needs
 * to be done in the <code>sap.ui5/services</code> section as follows:
 * <pre>
 * {
 *   [...]
 *   "sap.ui5": {
 *     "services": {
 *       "myLocalServiceAlias": {
 *         "factoryName": "my.ServiceFactory",
 *         ["optional": true]
 *       }
 *     }
 *   }
 *   [...]
 * }
 * </pre>
 * The service declaration is used to define a mapping between the local
 * alias for the service that can be used in the Component and the name of
 * the service factory which will be used to create a service instance.
 * 
 * The <code>getService</code> function will look up the service factory and will
 * create a new instance by using the service factory function
 * {@link sap.ui.core.service.ServiceFactory#createInstance createInstance}
 * The optional property defines that the service is not mandatory and the
 * usage will not depend on the availability of this service. When requesting
 * an optional service the <code>getService</code> function will reject but
 * there will be no error logged in the console.
 * 
 * When creating a new instance of the service the Component context will be
 * passed as <code>oServiceContext</code> as follows:
 * <pre>
 * {
 *   "scopeObject": this,     // the Component instance
 *   "scopeType": "component" // the stereotype of the scopeObject
 * }
 * </pre>
 * 
 * The service will be created only once per Component and reused in future
 * calls to the <code>getService</code> function.
 * <p>
 * This function will return a <code>Promise</code> which provides the service
 * interface when resolved. If the <code>factoryName</code> could not
 * be found in the {@link sap.ui.core.service.ServiceFactoryRegistry Service Factory Registry}
 * or the service declaration in the descriptor for components (manifest.json)
 * is missing the Promise will reject.
 * 
 * This is an example of how the <code>getService</code> function can be used:
 * <pre>
 * oComponent.getService("myLocalServiceAlias").then(function(oService) {
 *   oService.doSomething();
 * }).catch(function(oError) {
 *   jQuery.sap.log.error(oError);
 * });
 * </pre>
 * 
 * @param {string} sLocalServiceAlias Local service alias as defined in the manifest.json
 * @return {Promise} Promise which will be resolved with the Service interface
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.core.Component.prototype.getService = function(sLocalServiceAlias) { return null; };

/**
 * Initializes the Component instance after creation.
 * 
 * Applications must not call this hook method directly, it is called by the
 * framework while the constructor of a Component is executed.
 * 
 * Subclasses of Component should override this hook to implement any necessary
 * initialization.
 * @protected
 * 
 */
sap.ui.core.Component.prototype.init = function() {  };

/**
 * The hook which gets called when the static configuration of the component
 * has been changed by some configuration extension.
 * 
 * @param {string} sConfigKey Error message.
 * @public
 * @since 1.15.1
 * 
 */
sap.ui.core.Component.prototype.onConfigChange = function(sConfigKey) {  };

/**
 * The window before unload hook. Override this method in your Component class
 * implementation, to handle cleanup before the real unload or to prompt a question
 * to the user, if the component should be exited.
 * 
 * @return {string} a string if a prompt should be displayed to the user
 *                  confirming closing the Component (e.g. when the Component is not yet saved).
 * @public
 * @since 1.15.1
 * 
 */
sap.ui.core.Component.prototype.onWindowBeforeUnload = function() { return ""; };

/**
 * The window error hook. Override this method in your Component class implementation
 * to listen to unhandled errors.
 * 
 * @param {string} sMessage The error message.
 * @param {string} sFile File where the error occurred
 * @param {number} iLine Line number of the error
 * @public
 * @since 1.15.1
 * 
 */
sap.ui.core.Component.prototype.onWindowError = function(sMessage,sFile,iLine) {  };

/**
 * The window unload hook. Override this method in your Component class
 * implementation, to handle cleanup of the component once the window
 * will be unloaded (e.g. closed).
 * 
 * @public
 * @since 1.15.1
 * 
 */
sap.ui.core.Component.prototype.onWindowUnload = function() {  };

/**
 * Calls the function <code>fn</code> once and marks all ManagedObjects
 * created during that call as "owned" by this Component.
 * 
 * Nested calls of this method are supported (e.g. inside a newly created,
 * nested component). The currently active owner Component will be remembered
 * before executing <code>fn</code> and restored afterwards.
 * 
 * @param {function} fn Function to execute
 * @return {any} result of function <code>fn</code>
 * @since 1.25.1
 * @public
 * 
 */
sap.ui.core.Component.prototype.runAsOwner = function(fn) { return null; };


// ---- sap.ui.core.ComponentContainer --------------------------------------------------------------------------

/**
 * Constructor for a new ComponentContainer.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getUrl url} : sap.ui.core.URI</li>
 * <li>{@link #getAsync async} : boolean (default: false)</li>
 * <li>{@link #getHandleValidation handleValidation} : boolean (default: false)</li>
 * <li>{@link #getSettings settings} : object</li>
 * <li>{@link #getPropagateModel propagateModel} : boolean (default: false)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getLifecycle lifecycle} : sap.ui.core.ComponentLifecycle (default: Legacy)</li>
 * <li>{@link #getAutoPrefixId autoPrefixId} : boolean (default: false)</li>
 * <li>{@link #getUsage usage} : string</li>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getComponent component} : (sap.ui.core.ID | sap.ui.core.UIComponent)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Component Container
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.ComponentContainer = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.ComponentContainer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.ComponentContainer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getAsync async}.
 * 
 * Flag whether the component should be created sync (default) or async.
 * This property can only be applied initially.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>async</code>
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getAsync = function() { return false; };

/**
 * Gets current value of property {@link #getAutoPrefixId autoPrefixId}.
 * 
 * Flag, whether to autoprefix the id of the nested Component or not. If
 * this property is set to true the ID of the Component will be prefixed
 * with the ID of the ComponentContainer followed by a single dash.
 * This property can only be applied initially.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>autoPrefixId</code>
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getAutoPrefixId = function() { return false; };

/**
 * ID of the element which is the current target of the association {@link #getComponent component}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getComponent = function() { return new sap.ui.core.ID(); };

/**
 * Gets current value of property {@link #getHandleValidation handleValidation}.
 * 
 * Enable/disable validation handling by MessageManager for this component.
 * The resulting Messages will be propagated to the controls.
 * This property can only be applied initially.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>handleValidation</code>
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getHandleValidation = function() { return false; };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * Container height in CSS size
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getLifecycle lifecycle}.
 * 
 * Lifecycle behavior for the Component associated by the <code>ComponentContainer</code>.
 * The default behavior is <code>Legacy</code>. This  means that the <code>ComponentContainer</code>
 * takes care that the Component is destroyed when the <code>ComponentContainer</code> is destroyed,
 * but it is <b>not</b> destroyed when a new Component is associated.
 * If you use the <code>usage</code> property to create the Component,
 * the default behavior is <code>Container</code>. This means that
 * the Component is destroyed when the <code>ComponentContainer</code> is destroyed or a new
 * Component is associated.
 * This property must only be applied before a component instance is created.
 * 
 * Default value is <code>Legacy</code>.
 * @returns {sap.ui.core.ComponentLifecycle} Value of property <code>lifecycle</code>
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getLifecycle = function() { return new sap.ui.core.ComponentLifecycle(); };

/**
 * Returns a metadata object for class sap.ui.core.ComponentContainer.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.ComponentContainer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * Component name, the package where the component is contained. This property can only be applied initially.
 * 
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getName = function() { return ""; };

/**
 * Gets current value of property {@link #getPropagateModel propagateModel}.
 * 
 * Defines whether binding information is propagated to the component.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>propagateModel</code>
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getPropagateModel = function() { return false; };

/**
 * Gets current value of property {@link #getSettings settings}.
 * 
 * The settings object passed to the component when created. This property can only be applied initially.
 * 
 * @returns {object} Value of property <code>settings</code>
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getSettings = function() { return new Object(); };

/**
 * Gets current value of property {@link #getUrl url}.
 * 
 * The URL of the component. This property can only be applied initially.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>url</code>
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getUrl = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getUsage usage}.
 * 
 * The component usage. If the ComponentContainer is used inside a
 * Component, this Component can define a usage which will be used for creating
 * the Component.
 * This property can only be applied initially.
 * 
 * @returns {string} Value of property <code>usage</code>
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getUsage = function() { return ""; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * Container width in CSS size
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Sets a new value for property {@link #getAsync async}.
 * 
 * Flag whether the component should be created sync (default) or async.
 * This property can only be applied initially.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bAsync New value for property <code>async</code>
 * @returns {sap.ui.core.ComponentContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setAsync = function(bAsync) { return new sap.ui.core.ComponentContainer(); };

/**
 * Sets a new value for property {@link #getAutoPrefixId autoPrefixId}.
 * 
 * Flag, whether to autoprefix the id of the nested Component or not. If
 * this property is set to true the ID of the Component will be prefixed
 * with the ID of the ComponentContainer followed by a single dash.
 * This property can only be applied initially.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bAutoPrefixId New value for property <code>autoPrefixId</code>
 * @returns {sap.ui.core.ComponentContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setAutoPrefixId = function(bAutoPrefixId) { return new sap.ui.core.ComponentContainer(); };

/**
 * Sets the component of the container. Depending on the ComponentContainer's
 * lifecycle this might destroy the old associated Component.
 * 
 * Once the component is associated with the container the cross connection
 * to the component will be set and the models will be propagated if defined.
 * If the <code>usage</code> property is set the ComponentLifecycle is processed like a "Container" lifecycle.
 * 
 * @param {string|sap.ui.core.UIComponent} vComponent ID of an element which becomes the new target of this component association. Alternatively, an element instance may be given.
 * @return {sap.ui.core.ComponentContainer} the reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setComponent = function(vComponent) { return new sap.ui.core.ComponentContainer(); };

/**
 * Sets a new value for property {@link #getHandleValidation handleValidation}.
 * 
 * Enable/disable validation handling by MessageManager for this component.
 * The resulting Messages will be propagated to the controls.
 * This property can only be applied initially.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bHandleValidation New value for property <code>handleValidation</code>
 * @returns {sap.ui.core.ComponentContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setHandleValidation = function(bHandleValidation) { return new sap.ui.core.ComponentContainer(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * Container height in CSS size
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.ui.core.ComponentContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setHeight = function(sHeight) { return new sap.ui.core.ComponentContainer(); };

/**
 * Sets a new value for property {@link #getLifecycle lifecycle}.
 * 
 * Lifecycle behavior for the Component associated by the <code>ComponentContainer</code>.
 * The default behavior is <code>Legacy</code>. This  means that the <code>ComponentContainer</code>
 * takes care that the Component is destroyed when the <code>ComponentContainer</code> is destroyed,
 * but it is <b>not</b> destroyed when a new Component is associated.
 * If you use the <code>usage</code> property to create the Component,
 * the default behavior is <code>Container</code>. This means that
 * the Component is destroyed when the <code>ComponentContainer</code> is destroyed or a new
 * Component is associated.
 * This property must only be applied before a component instance is created.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Legacy</code>.
 * @param {sap.ui.core.ComponentLifecycle} sLifecycle New value for property <code>lifecycle</code>
 * @returns {sap.ui.core.ComponentContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setLifecycle = function(sLifecycle) { return new sap.ui.core.ComponentContainer(); };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * Component name, the package where the component is contained. This property can only be applied initially.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.ui.core.ComponentContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setName = function(sName) { return new sap.ui.core.ComponentContainer(); };

/**
 * Sets a new value for property {@link #getPropagateModel propagateModel}.
 * 
 * Defines whether binding information is propagated to the component.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bPropagateModel New value for property <code>propagateModel</code>
 * @returns {sap.ui.core.ComponentContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setPropagateModel = function(bPropagateModel) { return new sap.ui.core.ComponentContainer(); };

/**
 * Sets a new value for property {@link #getSettings settings}.
 * 
 * The settings object passed to the component when created. This property can only be applied initially.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oSettings New value for property <code>settings</code>
 * @returns {sap.ui.core.ComponentContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setSettings = function(oSettings) { return new sap.ui.core.ComponentContainer(); };

/**
 * Sets a new value for property {@link #getUrl url}.
 * 
 * The URL of the component. This property can only be applied initially.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sUrl New value for property <code>url</code>
 * @returns {sap.ui.core.ComponentContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setUrl = function(sUrl) { return new sap.ui.core.ComponentContainer(); };

/**
 * Sets a new value for property {@link #getUsage usage}.
 * 
 * The component usage. If the ComponentContainer is used inside a
 * Component, this Component can define a usage which will be used for creating
 * the Component.
 * This property can only be applied initially.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sUsage New value for property <code>usage</code>
 * @returns {sap.ui.core.ComponentContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setUsage = function(sUsage) { return new sap.ui.core.ComponentContainer(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * Container width in CSS size
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.ui.core.ComponentContainer} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ComponentContainer.prototype.setWidth = function(sWidth) { return new sap.ui.core.ComponentContainer(); };


// ---- sap.ui.core.ComponentLifecycle --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.ComponentLifecycle.toString = function() { return ""; };

// ---- sap.ui.core.ComponentMetadata --------------------------------------------------------------------------

/**
 * Creates a new metadata object for a Component subclass.
 * 
 * @param {string} sClassName Fully qualified name of the class that is described by this metadata object
 * @param {object} oStaticInfo Static info to construct the metadata from
 * 
 * @public
 * @class
 * @version 1.48.4
 * @since 1.9.2
 * 
 */
sap.ui.core.ComponentMetadata = function(sClassName,oStaticInfo) {};
/**
 * Returns the name of the Component (which is the namespace only with the module name)
 * @return {string} Component name
 * @public
 * 
 */
sap.ui.core.ComponentMetadata.prototype.getComponentName = function() { return ""; };

/**
 * Returns array of components specified in the metadata of the Component.
 * If not specified or the array is empty, the return value is null.
 * <p>
 * <b>Important:</b></br>
 * If a Component is loaded using the manifest URL (or according the
 * "manifest first" strategy), this function ignores the entries of the
 * manifest file! It returns only the entries which have been defined in
 * the Component metadata or in the proper Component manifest.
 * 
 * @return {string[]} Required Components.
 * @public
 * @deprecated Since 1.27.1. Please use {@link sap.ui.core.Component#getManifestEntry}("/sap.ui5/dependencies/components")
 * 
 */
sap.ui.core.ComponentMetadata.prototype.getComponents = function() { return new Array(); };

/**
 * Returns a copy of the configuration property to disallow modifications.
 * If no key is specified it returns the complete configuration property
 * 
 * @param {string} [sKey] Key of the configuration property
 * @param {boolean} [bDoNotMerge] If set to <code>true</code>, only the local configuration is returned
 * @return {object} the value of the configuration property
 * @public
 * @since 1.15.1
 * @deprecated Since 1.27.1. Please use {@link sap.ui.core.Component#getManifestEntry}("/sap.ui5/config")
 * 
 */
sap.ui.core.ComponentMetadata.prototype.getConfig = function(sKey,bDoNotMerge) { return new Object(); };

/**
 * Returns the custom Component configuration entry with the specified key (this must be a JSON object).
 * If no key is specified, the return value is null.
 * 
 * Example:
 * <code>
 *   sap.ui.core.Component.extend("sample.Component", {
 *       metadata: {
 *           "my.custom.config" : {
 *               "property1" : true,
 *               "property2" : "Something else"
 *           }
 *       }
 *   });
 * </code>
 * 
 * The configuration above can be accessed via <code>sample.Component.getMetadata().getCustomEntry("my.custom.config")</code>.
 * 
 * @param {string} sKey Key of the custom configuration (must be prefixed with a namespace)
 * @param {boolean} bMerged Indicates whether the custom configuration is merged with the parent custom configuration of the Component.
 * @return {Object} custom Component configuration with the specified key.
 * @public
 * @deprecated Since 1.27.1. Please use the sap.ui.core.ComponentMetadata#getManifestEntry
 * 
 */
sap.ui.core.ComponentMetadata.prototype.getCustomEntry = function(sKey,bMerged) { return null; };

/**
 * Returns the dependencies defined in the metadata of the Component. If not specified, the return value is null.
 * <p>
 * <b>Important:</b></br>
 * If a Component is loaded using the manifest URL (or according the
 * "manifest first" strategy), this function ignores the entries of the
 * manifest file! It returns only the entries which have been defined in
 * the Component metadata or in the proper Component manifest.
 * 
 * @return {Object} Component dependencies.
 * @public
 * @deprecated Since 1.27.1. Please use {@link sap.ui.core.Component#getManifestEntry}("/sap.ui5/dependencies")
 * 
 */
sap.ui.core.ComponentMetadata.prototype.getDependencies = function() { return null; };

/**
 * Returns the array of the included files that the Component requires such
 * as CSS and JavaScript. If not specified or the array is empty, the return
 * value is null.
 * <p>
 * <b>Important:</b></br>
 * If a Component is loaded using the manifest URL (or according the
 * "manifest first" strategy), this function ignores the entries of the
 * manifest file! It returns only the entries which have been defined in
 * the Component metadata or in the proper Component manifest.
 * 
 * @return {string[]} Included files.
 * @public
 * @deprecated Since 1.27.1. Please use {@link sap.ui.core.Component#getManifestEntry}("/sap.ui5/resources")
 * 
 */
sap.ui.core.ComponentMetadata.prototype.getIncludes = function() { return new Array(); };

/**
 * Returns array of libraries specified in metadata of the Component, that
 * are automatically loaded when an instance of the component is created.
 * If not specified or the array is empty, the return value is null.
 * <p>
 * <b>Important:</b></br>
 * If a Component is loaded using the manifest URL (or according the
 * "manifest first" strategy), this function ignores the entries of the
 * manifest file! It returns only the entries which have been defined in
 * the Component metadata or in the proper Component manifest.
 * 
 * @return {string[]} Required libraries.
 * @public
 * @deprecated Since 1.27.1. Please use {@link sap.ui.core.Component#getManifestEntry}("/sap.ui5/dependencies/libs")
 * 
 */
sap.ui.core.ComponentMetadata.prototype.getLibs = function() { return new Array(); };

/**
 * Returns the manifest defined in the metadata of the Component.
 * If not specified, the return value is null.
 * @return {Object} manifest.
 * @public
 * @since 1.27.1
 * @deprecated  Since 1.33.0. Please use the sap.ui.core.Component#getManifest
 * 
 */
sap.ui.core.ComponentMetadata.prototype.getManifest = function() { return null; };

/**
 * Returns the configuration of a manifest section or the value for a
 * specific path. If no section or key is specified, the return value is null.
 * 
 * Example:
 * <code>
 *   {
 *     "sap.ui5": {
 *       "dependencies": {
 *         "libs": {
 *           "sap.m": {}
 *         },
 *         "components": {
 *           "my.component.a": {}
 *         }
 *       }
 *   });
 * </code>
 * 
 * The configuration above can be accessed in the following ways:
 * <ul>
 * <li><b>By section/namespace</b>: <code>oComponent.getMetadata().getManifestEntry("sap.ui5")</code></li>
 * <li><b>By path</b>: <code>oComponent.getMetadata().getManifestEntry("/sap.ui5/dependencies/libs")</code></li>
 * </ul>
 * 
 * By section/namespace returns the configuration for the specified manifest
 * section and by path allows to specify a concrete path to a dedicated entry
 * inside the manifest. The path syntax always starts with a slash (/).
 * 
 * @param {string} sKey Either the manifest section name (namespace) or a concrete path
 * @param {boolean} [bMerged] Indicates whether the custom configuration is merged with the parent custom configuration of the Component.
 * @return {any|null} Value of the manifest section or the key (could be any kind of value)
 * @public
 * @since 1.27.1
 * @deprecated  Since 1.33.0. Please use the sap.ui.core.Component#getManifest
 * 
 */
sap.ui.core.ComponentMetadata.prototype.getManifestEntry = function(sKey,bMerged) { return null; };

/**
 * Returns the manifest object.
 * @return {sap.ui.core.Manifest} manifest.
 * @public
 * @since 1.33.0
 * 
 */
sap.ui.core.ComponentMetadata.prototype.getManifestObject = function() { return new sap.ui.core.Manifest(); };

/**
 * Returns the version of the metadata which could be 1 or 2. 1 is for legacy
 * metadata whereas 2 is for the manifest.
 * @return {int} metadata version (1: legacy metadata, 2: manifest)
 * @protected
 * @since 1.27.1
 * 
 */
sap.ui.core.ComponentMetadata.prototype.getMetadataVersion = function() { return 0; };

/**
 * Returns the raw manifest defined in the metadata of the Component.
 * If not specified, the return value is null.
 * @return {Object} manifest
 * @public
 * @since 1.29.0
 * @deprecated  Since 1.33.0. Please use the sap.ui.core.Component#getManifest
 * 
 */
sap.ui.core.ComponentMetadata.prototype.getRawManifest = function() { return null; };

/**
 * Returns the required version of SAPUI5 defined in the metadata of the
 * Component. If returned value is null, then no special UI5 version is
 * required.
 * <p>
 * <b>Important:</b></br>
 * If a Component is loaded using the manifest URL (or according the
 * "manifest first" strategy), this function ignores the entries of the
 * manifest file! It returns only the entries which have been defined in
 * the Component metadata or in the proper Component manifest.
 * 
 * @return {string} Required version of UI5 or if not specified then null.
 * @public
 * @deprecated Since 1.27.1. Please use {@link sap.ui.core.Component#getManifestEntry}("/sap.ui5/dependencies/minUI5Version")
 * 
 */
sap.ui.core.ComponentMetadata.prototype.getUI5Version = function() { return ""; };

/**
 * Returns the version of the component. If not specified, the return value
 * is null.
 * <p>
 * <b>Important:</b></br>
 * If a Component is loaded using the manifest URL (or according the
 * "manifest first" strategy), this function ignores the entries of the
 * manifest file! It returns only the entries which have been defined in
 * the Component metadata or in the proper Component manifest.
 * 
 * @return {string} The version of the component.
 * @public
 * @deprecated Since 1.34.2. Please use {@link sap.ui.core.Component#getManifestEntry}("/sap.app/applicationVersion/version")
 * 
 */
sap.ui.core.ComponentMetadata.prototype.getVersion = function() { return ""; };

/**
 * Returns whether the class of this metadata is a component base class
 * or not.
 * @return {boolean} true if it is sap.ui.core.Component or sap.ui.core.UIComponent
 * @protected
 * @since 1.33.0
 * 
 */
sap.ui.core.ComponentMetadata.prototype.isBaseClass = function() { return false; };


// ---- sap.ui.core.Configuration --------------------------------------------------------------------------

/**
 * Creates a new Configuration object.
 * 
 * 
 * @class Collects and stores the configuration of the current environment.
 * 
 * The Configuration is initialized once when the {@link sap.ui.core.Core} is created.
 * There are different ways to set the environment configuration (in ascending priority):
 * <ol>
 * <li>System defined defaults
 * <li>Server wide defaults, read from /sap-ui-config.json
 * <li>Properties of the global configuration object window["sap-ui-config"]
 * <li>A configuration string in the data-sap-ui-config attribute of the bootstrap tag
 * <li>Individual data-sap-ui-xyz attributes of the bootstrap tag
 * <li>Using URL parameters
 * <li>Setters in this Configuration object (only for some parameters)
 * </ol>
 * 
 * That is, attributes of the DOM reference override the system defaults, URL parameters
 * override the DOM attributes (where empty URL parameters set the parameter back to its
 * system default). Calling setters at runtime will override any previous settings
 * calculated during object creation.
 * 
 * The naming convention for parameters is:
 * <ul>
 * <li>in the URL : sap-ui-<i>PARAMETER-NAME</i>="value"
 * <li>in the DOM : data-sap-ui-<i>PARAMETER-NAME</i>="value"
 * </ul>
 * where <i>PARAMETER-NAME</i> is the name of the parameter in lower case.
 * 
 * Values of boolean parameters are case insensitive where "true" and "x" are interpreted as true.
 * 
 * @extends sap.ui.base.Object
 * @constructor
 * @public
 * 
 */
sap.ui.core.Configuration = function() {};
/**
 * Applies multiple changes to the configuration at once.
 * 
 * If the changed settings contain localization related settings like <code>language</code>
 * or <ode>calendarType</code>, then only a single <code>localizationChanged</code> event will
 * be fired. As the framework has to inform all existing components, elements, models etc.
 * about localization changes, using <code>applySettings</code> can significantly reduce the
 * overhead for multiple changes, esp. when they occur after the UI has been created already.
 * 
 * The <code>mSettings</code> can contain any property <code><i>xyz</i></code> for which a
 * setter method <code>set<i>XYZ</i></code> exists in the API of this class.
 * Similarly, values for the {@link sap.ui.core.Configuration.FormatSettings format settings}
 * API can be provided in a nested object with name <code>formatSettings</code>.
 * 
 * 
 * @example <caption>Apply <code>language</code>, <code>calendarType</code> and several legacy
 *          format settings in one call</caption>
 * 
 * sap.ui.getCore().getConfiguration().applySettings({
 *     language: 'de',
 *     calendarType: sap.ui.core.CalendarType.Gregorian,
 *     formatSettings: {
 *         legacyDateFormat: '1',
 *         legacyTimeFormat: '1',
 *         legacyNumberFormat: '1'
 *     }
 * });
 * 
 * @param {object} mSettings Configuration options to apply
 * @returns {sap.ui.core.Configuration} Returns <code>this</code> to allow method chaining
 * @public
 * @since 1.38.6
 * 
 */
sap.ui.core.Configuration.prototype.applySettings = function(mSettings) { return new sap.ui.core.Configuration(); };

/**
 * Creates a new subclass of class sap.ui.core.Configuration with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Configuration.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns whether the accessibility mode is used or not.
 * @return {boolean} whether the accessibility mode is used or not
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getAccessibility = function() { return false; };

/**
 * Returns whether the animations are globally used.
 * @return {boolean} whether the animations are globally used
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getAnimation = function() { return false; };

/**
 * Base URLs to AppCacheBuster ETag-Index files.
 * 
 * @returns {string[]} array of base URLs
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getAppCacheBuster = function() { return new Array(); };

/**
 * Object defining the callback hooks for the AppCacheBuster like e.g.
 * <code>handleURL</code>, <code>onIndexLoad</code> or <code>onIndexLoaded</code>.
 * 
 * @returns {object} object containing the callback functions for the AppCacheBuster
 * @sap-restricted
 * 
 */
sap.ui.core.Configuration.prototype.getAppCacheBusterHooks = function() { return new Object(); };

/**
 * The loading mode (sync|async|batch) of the AppCacheBuster (sync is default)
 * 
 * @returns {string} "sync" | "async"
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getAppCacheBusterMode = function() { return ""; };

/**
 * The name of the application to start or empty.
 * 
 * @returns {string} name of the application
 * @public
 * @deprecated Since 1.15.1. Please use the rootComponent configuration option {@link sap.ui.core.Configuration#getRootComponent}.
 * 
 */
sap.ui.core.Configuration.prototype.getApplication = function() { return ""; };

/**
 * Returns whether the framework automatically adds automatically
 * the ARIA role 'application' to the HTML body or not.
 * @return {boolean}
 * @since 1.27.0
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getAutoAriaBodyRole = function() { return false; };

/**
 * Returns the used compatibility version for the given feature.
 * 
 * @param {string} sFeature the key of desired feature
 * @return {jQuery.sap.Version} the used compatibility version
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getCompatibilityVersion = function(sFeature) { return new jQuery.sap.Version(); };

/**
 * Return whether the controller code is deactivated. During design mode the.
 * 
 * @returns {boolean} whether the activation of the controller code is suppressed or not
 * @since 1.26.4
 * private
 * @sap-restricted sap.watt com.sap.webide
 * 
 */
sap.ui.core.Configuration.prototype.getControllerCodeDeactivated = function() { return false; };

/**
 * Returns whether the page runs in debug mode.
 * @return {boolean} whether the page runs in debug mode
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getDebug = function() { return false; };

/**
 * Return whether the design mode is active or not.
 * 
 * @returns {boolean} whether the design mode is active or not.
 * @since 1.13.2
 * private
 * @sap-restricted sap.watt com.sap.webide
 * 
 */
sap.ui.core.Configuration.prototype.getDesignMode = function() { return false; };

/**
 * Flag, whether the customizing is disabled or not.
 * 
 * @returns {boolean} true if customizing is disabled
 * @private
 * @sap-restricted
 * 
 */
sap.ui.core.Configuration.prototype.getDisableCustomizing = function() { return false; };

/**
 * Returns whether the Fiori2Adaptation is on.
 * @return {boolean|string} false - no adaptation, true - full adaptation, comma-separated list - partial adaptation
 * Possible values: style, collapse, title, back, hierarchy
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getFiori2Adaptation = function() { return false; };

/**
 * Returns the format locale string with language and region code. Falls back to
 * language configuration, in case it has not been explicitly defined.
 * 
 * @return {string} the format locale string with language and country code
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getFormatLocale = function() { return ""; };

/**
 * Returns a configuration object that bundles the format settings of UI5.
 * 
 * @return {sap.ui.core.Configuration.FormatSettings} A FormatSettings object.
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getFormatSettings = function() { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * frameOptions mode (allow/deny/trusted).
 * 
 * @return {string} frameOptions mode
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getFrameOptions = function() { return ""; };

/**
 * Returns whether the UI5 control inspector is displayed.
 * Has only an effect when the sap-ui-debug module has been loaded
 * @return {boolean} whether the UI5 control inspector is displayed
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getInspect = function() { return false; };

/**
 * Returns a string that identifies the current language.
 * 
 * The value returned by this methods in most cases corresponds to the exact value that has been
 * configured by the user or application or that has been determined from the user agent settings.
 * It has not been normalized, but has been validated against a relaxed version of
 * {@link http://www.ietf.org/rfc/bcp/bcp47.txt BCP47}, allowing underscores ('_') instead of the
 * suggested dashes ('-') and not taking the case of letters into account.
 * 
 * The exceptions mentioned above affect languages that have been specified via the URL parameter
 * <code>sap-language</code>. That parameter by definition represents an SAP logon language code
 * ('ABAP language'). Most but not all of these language codes are valid ISO639 two-letter languages
 * and as such are valid BCP47 language tags. For better BCP47 compliance, the framework
 * maps the following non-BCP47 SAP logon codes to a BCP47 substitute:
 * <pre>
 *    "ZH"  -->  "zh-Hans"         // script 'Hans' added to distinguish it from zh-Hant
 *    "ZF"  -->  "zh-Hant"         // ZF is not a valid ISO639 code, use the compliant language + script 'Hant'
 * 		 "    "1Q"  -->  "en-US-x-saptrc"  // special language code for supportability (tracing),
 *                                    represented as en-US with a private extension
 *    "2Q"  -->  "en-US-x-sappsd"  // special language code for supportability (pseudo translation),
 *                                    represented as en-US with a private extension
 * </pre>
 * 
 * For a normalized BCP47 tag, call {@link #getLanguageTag} or call {@link getLocale} to get a
 * {@link sap.ui.core.Locale Locale} object matching the language.
 * 
 * @return {string} Language string as configured
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getLanguage = function() { return ""; };

/**
 * Returns a BCP47-compliant language tag for the current language.
 * 
 * The return value of this method is especially useful for an HTTP <code>Accept</code> header.
 * 
 * @return {string} The language tag for the current language, conforming to BCP47
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getLanguageTag = function() { return ""; };

/**
 * Returns a Locale object for the current language.
 * 
 * The Locale is derived from the {@link #getLanguage language} property.
 * 
 * @return {sap.ui.core.Locale} The locale
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getLocale = function() { return new sap.ui.core.Locale(); };

/**
 * Flag whether a Component should load the manifest first.
 * 
 * @returns {boolean} true if a Component should load the manifest first
 * @public
 * @since 1.33.0
 * 
 */
sap.ui.core.Configuration.prototype.getManifestFirst = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.core.Configuration.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.Configuration.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns whether there should be an exception on any duplicate element IDs.
 * @return {boolean} whether there should be an exception on any duplicate element IDs
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getNoDuplicateIds = function() { return false; };

/**
 * Returns whether the text origin information is collected.
 * @return {boolean} whether the text info is collected
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getOriginInfo = function() { return false; };

/**
 * The name of the root component to start or empty.
 * 
 * @returns {string} name of the root component
 * @public
 * @experimental Since 1.15.1
 * 
 */
sap.ui.core.Configuration.prototype.getRootComponent = function() { return ""; };

/**
 * Returns whether the page uses the RTL text direction.
 * 
 * If no mode has been explicitly set (neither true nor false),
 * the mode is derived from the current language setting.
 * 
 * @return {boolean} whether the page uses the RTL text direction
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getRTL = function() { return false; };

/**
 * Returns an SAP logon language for the current language.
 * 
 * @return {string} The SAP logon language code for the current language
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getSAPLogonLanguage = function() { return ""; };

/**
 * Return whether the activation of the controller code is suppressed.
 * 
 * @returns {boolean} whether the activation of the controller code is suppressed or not
 * @since 1.13.2
 * private
 * @sap-restricted sap.watt com.sap.webide
 * 
 */
sap.ui.core.Configuration.prototype.getSuppressDeactivationOfControllerCode = function() { return false; };

/**
 * Returns the theme name
 * @return {string} the theme name
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getTheme = function() { return ""; };

/**
 * Prefix to be used for automatically generated control IDs.
 * Default is a double underscore "__".
 * 
 * @returns {string} the prefix to be used
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getUIDPrefix = function() { return ""; };

/**
 * Returns the version of the framework.
 * 
 * Similar to <code>sap.ui.version</code>.
 * 
 * @return {jQuery.sap.Version} the version
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getVersion = function() { return new jQuery.sap.Version(); };

/**
 * URL of the whitelist service.
 * 
 * @return {string} whitelist service URL
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.getWhitelistService = function() { return ""; };

/**
 * Sets the new calendar type to be used from now on in locale dependent functionalities (for example,
 * formatting, translation texts, etc.).
 * 
 * @param {sap.ui.core.CalendarType|null} sCalendarType the new calendar type. Set it with null to clear the calendar type
 *   and the calendar type is calculated based on the format settings and current locale.
 * @return {sap.ui.core.Configuration} <code>this</code> to allow method chaining
 * @public
 * @since 1.28.6
 * 
 */
sap.ui.core.Configuration.prototype.setCalendarType = function(sCalendarType) { return new sap.ui.core.Configuration(); };

/**
 * Sets a new format locale to be used from now on for retrieving locale
 * specific formatters. Modifying this setting does not have an impact on
 * the retrieval of translated texts!
 * 
 * Can either be set to a concrete value (a BCP47 or Java locale compliant
 * language tag) or to <code>null</code>. When set to <code>null</code> (default
 * value) then locale specific formatters are retrieved for the current language.
 * 
 * After changing the format locale, the framework tries to update localization
 * specific parts of the UI. See the documentation of {@link #setLanguage} for
 * details and restrictions.
 * 
 * <b>Note</b>: When a format locale is set, it has higher priority than a number,
 * date or time format defined with a call to <code>setLegacyNumberFormat</code>,
 * <code>setLegacyDateFormat</code> or <code>setLegacyTimeFormat<code>.
 * 
 * <b>Note</b>: See documentation of {@link #setLanguage} for restrictions.
 * 
 * @param {string|null} sFormatLocale the new format locale as a BCP47 compliant language tag;
 *   case doesn't matter and underscores can be used instead of dashes to separate
 *   components (compatibility with Java Locale IDs)
 * @return {sap.ui.core.Configuration} <code>this</code> to allow method chaining
 * @public
 * @throws {Error} When <code>sFormatLocale</code> is given, but is not a valid BCP47 language
 *   tag or Java locale identifier
 * 
 */
sap.ui.core.Configuration.prototype.setFormatLocale = function(sFormatLocale) { return new sap.ui.core.Configuration(); };

/**
 * Sets a new language to be used from now on for language/region dependent
 * functionality (e.g. formatting, data types, translated texts, ...).
 * 
 * When the language can't be interpreted as a BCP47 language (using the relaxed syntax
 * described in {@link #getLanguage}, an error will be thrown.
 * 
 * When the language has changed, the Core will fire its
 * {@link sap.ui.core.Core#event:localizationChanged localizationChanged} event.
 * 
 * 
 * <h3>Restrictions</h3>
 * 
 * The framework <strong>does not</strong> guarantee that already created, language
 * dependent objects will be updated by this call. It therefore remains best practice
 * for applications to switch the language early, e.g. before any language dependent
 * objects are created. Applications that need to support more dynamic changes of
 * the language should listen to the <code>localizationChanged</code> event and adapt
 * all language dependent objects that they use (e.g. by rebuilding their UI).
 * 
 * Currently, the framework notifies the following objects about a change of the
 * localization settings before it fires the <code>localizationChanged</code> event:
 * 
 * <ul>
 * <li>date and number data types that are used in property bindings or composite
 *     bindings in existing Elements, Controls, UIAreas or Components</li>
 * <li>ResourceModels currently assigned to the Core, a UIArea, Component,
 *     Element or Control</li>
 * <li>Elements or Controls that implement the <code>onlocalizationChanged</code> hook
 *     (note the lowercase 'l' in onlocalizationChanged)</li>
 * </ul>
 * 
 * It furthermore derives the RTL mode from the new language, if no explicit RTL
 * mode has been set. If the RTL mode changes, the following additional actions will be taken:
 * 
 * <ul>
 * <li>the URLs of already loaded library theme files will be changed</li>
 * <li>the <code>dir</code> attribute of the page will be changed to reflect the new mode.</li>
 * <li>all UIAreas will be invalidated (which results in a rendering of the whole UI5 UI)</li>
 * </ul>
 * 
 * This method does not accept SAP language codes for <code>sLanguage</code>. Instead, a second
 * parameter <code>sSAPLogonLanguage</code> can be provided with an SAP language code corresponding
 * to the given language. A given value will be returned by the {@link #getSAPLogonLanguage} method.
 * It is up to the caller to provide a consistent pair of BCP47 language and SAP language code.
 * The SAP language code is only checked to be of length 2 and must consist of letters or digits only.
 * 
 * <b>Note</b>: When using this method please take note of and respect the above mentioned restrictions.
 * 
 * @param {string} sLanguage the new language as a BCP47 compliant language tag; case doesn't matter
 *   and underscores can be used instead of dashes to separate components (compatibility with Java Locale IDs)
 * @param {string} [sSAPLogonLanguage] SAP language code that corresponds to the <code>sLanguage</code>;
 *   if a value is specified, future calls to <code>getSAPLogonLanguage</code> will return that value;
 *   if no value is specified, the framework will use the ISO639 language part of <code>sLanguage</code>
 *   as SAP Logon language.
 * @throws {Error} When <code>sLanguage</code> can't be interpreted as a BCP47 language or when
 *   <code>sSAPLanguage</code> is given and can't be interpreted as SAP language code.
 * @return {sap.ui.core.Configuration} <code>this</code> to allow method chaining
 * 
 * @see http://scn.sap.com/docs/DOC-14377
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.setLanguage = function(sLanguage,sSAPLogonLanguage) { return new sap.ui.core.Configuration(); };

/**
 * Sets the character orientation mode to be used from now on.
 * 
 * Can either be set to a concrete value (true meaning right-to-left,
 * false meaning left-to-right) or to <code>null</code> which means that
 * the character orientation mode should be derived from the current
 * language (incl. region) setting.
 * 
 * After changing the character orientation mode, the framework tries
 * to update localization specific parts of the UI. See the documentation of
 * {@link #setLanguage} for details and restrictions.
 * 
 * <b>Note</b>: See documentation of {@link #setLanguage} for restrictions.
 * 
 * @param {boolean|null} bRTL new character orientation mode or <code>null</code>
 * @return {sap.ui.core.Configuration} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Configuration.prototype.setRTL = function(bRTL) { return new sap.ui.core.Configuration(); };


// ---- sap.ui.core.Configuration.FormatSettings --------------------------------------------------------------------------

/**
 * 
 * @class Encapsulates configuration settings that are related to data formatting/parsing.
 * 
 * <b>Note:</b> When format configuration settings are modified through this class,
 * UI5 only ensures that formatter objects created after that point in time will honor
 * the modifications. To be on the safe side, applications should do any modifications
 * early in their lifecycle or recreate any model/UI that is locale dependent.
 * @extends sap.ui.base.Object
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings = function() {};
/**
 * Creates a new subclass of class sap.ui.core.Configuration.FormatSettings with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Configuration.FormatSettings.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the currently set date pattern or undefined if no pattern has been defined.
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getDatePattern = function() {  };

/**
 * Returns the locale to be used for formatting.
 * 
 * If no such locale has been defined, this method falls back to the language,
 * see {@link sap.ui.core.Configuration#getLanguage Configuration.getLanguage()}.
 * 
 * If any user preferences for date, time or number formatting have been set,
 * and if no format locale has been specified, then a special private use subtag
 * is added to the locale, indicating to the framework that these user preferences
 * should be applied.
 * 
 * @return {sap.ui.core.Locale} the format locale
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getFormatLocale = function() { return new sap.ui.core.Locale(); };

/**
 * Returns the currently set customizing data for Islamic calendar support
 * 
 * @return {object[]} Returns an array contains the customizing data. Each element in the array has properties: dateFormat, islamicMonthStart, gregDate. For details, please see {@link #setLegacyDateCalendarCustomizing}
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getLegacyDateCalendarCustomizing = function() { return new Array(); };

/**
 * Returns the currently set legacy ABAP date format (its id) or undefined if none has been set.
 * 
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getLegacyDateFormat = function() {  };

/**
 * Returns the currently set legacy ABAP number format (its id) or undefined if none has been set.
 * 
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getLegacyNumberFormat = function() {  };

/**
 * Returns the currently set legacy ABAP time format (its id) or undefined if none has been set.
 * 
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getLegacyTimeFormat = function() {  };

/**
 * Returns a metadata object for class sap.ui.core.Configuration.FormatSettings.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.Configuration.FormatSettings.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the currently set number symbol of the given type or undefined if no symbol has been defined.
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getNumberSymbol = function() {  };

/**
 * Returns the currently set time pattern or undefined if no pattern has been defined.
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.getTimePattern = function() {  };

/**
 * Defines the preferred format pattern for the given date format style.
 * 
 * Calling this method with a null or undefined pattern removes a previously set pattern.
 * 
 * If a pattern is defined, it will be preferred over patterns derived from the current locale.
 * 
 * See class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.
 * 
 * After changing the date pattern, the framework tries to update localization
 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
 * for details and restrictions.
 * 
 * @param {string} sStyle must be one of short, medium, long or full.
 * @param {string} sPattern the format pattern to be used in LDML syntax.
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setDatePattern = function(sStyle,sPattern) { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * Defines the day used as the first day of the week.
 * 
 * The day is set as an integer value between 0 (Sunday) and 6 (Saturday).
 * Calling this method with a null or undefined symbol removes a previously set value.
 * 
 * If a value is defined, it will be preferred over values derived from the current locale.
 * 
 * Usually in the US the week starts on Sunday while in most European countries on Monday.
 * There are special cases where you want to have the first day of week set independent of the
 * user locale.
 * 
 * After changing the first day of week, the framework tries to update localization
 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
 * for details and restrictions.
 * 
 * @param {number} iValue must be an integer value between 0 and 6
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setFirstDayOfWeek = function(iValue) { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * Allows to specify the customizing data for Islamic calendar support
 * 
 * @param {object[]} aMappings contains the customizing data for the support of Islamic calendar.
 * @param {string} aMappings[].dateFormat The date format
 * @param {string} aMappings[].islamicMonthStart The Islamic date
 * @param {string} aMappings[].gregDate The corresponding Gregorian date
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setLegacyDateCalendarCustomizing = function(aMappings) { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * Allows to specify one of the legacy ABAP date formats.
 * 
 * This method modifies the date patterns for 'short' and 'medium' style with the corresponding ABAP
 * format. When called with a null or undefined format id, any previously applied format will be removed.
 * 
 * After changing the legacy date format, the framework tries to update localization
 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
 * for details and restrictions.
 * 
 * Note: Iranian date format 'C' is NOT yet supported by UI5. It's accepted by this method for convenience
 * (user settings from ABAP system can be used without filtering), but it's ignored. Instead, the formats
 * from the current format locale will be used and a warning will be logged.
 * 
 * @param {string} sFormatId id of the ABAP data format (one of '1','2','3','4','5','6','7','8','9','A','B','C')
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setLegacyDateFormat = function(sFormatId) { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * Allows to specify one of the legacy ABAP number format.
 * 
 * This method will modify the 'group' and 'decimal' symbols. When called with a null
 * or undefined format id, any previously applied format will be removed.
 * 
 * After changing the legacy number format, the framework tries to update localization
 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
 * for details and restrictions.
 * 
 * @param {string} sFormatId id of the ABAP number format set (one of ' ','X','Y')
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setLegacyNumberFormat = function(sFormatId) { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * Allows to specify one of the legacy ABAP time formats.
 * 
 * This method sets the time patterns for 'short' and 'medium' style to the corresponding ABAP
 * formats and sets the day period texts to "AM"/"PM" or "am"/"pm" respectively. When called
 * with a null or undefined format id, any previously applied format will be removed.
 * 
 * After changing the legacy time format, the framework tries to update localization
 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
 * for details and restrictions.
 * 
 * @param {string} sFormatId id of the ABAP time format (one of '0','1','2','3','4')
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setLegacyTimeFormat = function(sFormatId) { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * Defines the string to be used for the given number symbol.
 * 
 * Calling this method with a null or undefined symbol removes a previously set symbol string.
 * Note that an empty string is explicitly allowed.
 * 
 * If a symbol is defined, it will be preferred over symbols derived from the current locale.
 * 
 * See class {@link sap.ui.core.format.NumberFormat} for details about the symbols.
 * 
 * After changing the number symbol, the framework tries to update localization
 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
 * for details and restrictions.
 * 
 * @param {string} sStyle must be one of decimal, group, plusSign, minusSign.
 * @param {string} sSymbol will be used to represent the given symbol type
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setNumberSymbol = function(sStyle,sSymbol) { return new sap.ui.core.Configuration.FormatSettings(); };

/**
 * Defines the preferred format pattern for the given time format style.
 * 
 * Calling this method with a null or undefined pattern removes a previously set pattern.
 * 
 * If a pattern is defined, it will be preferred over patterns derived from the current locale.
 * 
 * See class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.
 * 
 * After changing the time pattern, the framework tries to update localization
 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
 * for details and restrictions.
 * 
 * @param {string} sStyle must be one of short, medium, long or full.
 * @param {string} sPattern the format pattern to be used in LDML syntax.
 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Configuration.FormatSettings.prototype.setTimePattern = function(sStyle,sPattern) { return new sap.ui.core.Configuration.FormatSettings(); };


// ---- sap.ui.core.Control --------------------------------------------------------------------------

/**
 * Creates and initializes a new control with the given <code>sId</code> and settings.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBusy busy} : boolean (default: false)</li>
 * <li>{@link #getBusyIndicatorDelay busyIndicatorDelay} : int (default: 1000)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getFieldGroupIds fieldGroupIds} : string[] (default: [])</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:validateFieldGroup validateFieldGroup} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] Optional ID for the new control; generated automatically if no non-empty ID is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] Object with initial settings for the new control
 * @public
 * 
 * @class Base Class for Controls.
 * @extends sap.ui.core.Element
 * @abstract
 * @version 1.48.4
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.Control = function(sId,mSettings) {};
/**
 * Event is fired if a logical field group defined by <code>fieldGroupIds</code> of a control was left or the user explicitly pressed a validation key combination.
 * Use this event to validate data of the controls belonging to a field group.
 * See {@link sap.ui.core.Control#setFieldGroupIds}.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string[]} oControlEvent.getParameters.fieldGroupIds field group IDs of the logical field groups to validate
 * @public
 * 
 */
sap.ui.core.Control.prototype.validateFieldGroup = function(oControlEvent) {  };

/**
 * The string given as "sStyleClass" will be added to the "class" attribute of this control's root HTML element.
 * 
 * This method is intended to be used to mark controls as being of a special type for which
 * special styling can be provided using CSS selectors that reference this style class name.
 * 
 * <pre>
 * Example:
 *    myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
 * 
 * ...and in CSS:
 *    .myRedTextButton {
 *       color: red;
 *    }
 * </pre>
 * 
 * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then
 * make the text in this particular button red.
 * 
 * Only characters allowed inside HTML attributes are allowed.
 * Quotes are not allowed and this method will ignore any strings containing quotes.
 * Strings containing spaces are interpreted as multiple custom style classes which are split by space and can be removed
 * individually later by calling removeStyleClass.
 * Multiple calls with the same sStyleClass will have no different effect than calling once.
 * If sStyleClass is null, empty string or it contains quotes, the call is ignored.
 * 
 * @param {string} sStyleClass the CSS class name to be added
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.addStyleClass = function(sStyleClass) { return new sap.ui.core.Control(); };

/**
 * Defines whether the user can select text inside this control.
 * Defaults to <code>true</code> as long as this method has not been called.
 * 
 * <b>Note:</b>This only works in IE and Safari; for Firefox the element's style must
 * be set to:
 * <pre>
 *   -moz-user-select: none;
 * </pre>
 * in order to prevent text selection.
 * 
 * @param {boolean} bAllow whether to allow text selection or not
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.allowTextSelection = function(bAllow) { return new sap.ui.core.Control(); };

/**
 * Allows binding handlers for any native browser event to the root HTML element of this Control. This internally handles
 * DOM element replacements caused by re-rendering.
 * 
 * <b>IMPORTANT:</b></br>
 * This should be only used as FALLBACK when the Control events do not cover a specific use-case! Always try using
 * SAPUI5 control events, as e.g. accessibility-related functionality is then provided automatically.
 * E.g. when working with a <code>sap.ui.commons.Button</code>, always use the Button's "press" event, not the native "click" event, because
 * "press" is also guaranteed to be fired when certain keyboard activity is supposed to trigger the Button.
 * 
 * In the event handler, <code>this</code> refers to the Control - not to the root DOM element like in jQuery. While the DOM element can
 * be used and modified, the general caveats for working with SAPUI5 control DOM elements apply. In particular the DOM element
 * may be destroyed and replaced by a new one at any time, so modifications that are required to have permanent effect may not
 * be done. E.g. use {@link sap.ui.core.Control.prototype.addStyleClass} instead if the modification is of visual nature.
 * 
 * Use {@link #detachBrowserEvent} to remove the event handler(s) again.
 * 
 * @param {string} [sEventType] A string containing one or more JavaScript event types, such as "click" or "blur".
 * @param {function} [fnHandler] A function to execute each time the event is triggered.
 * @param {object} [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.attachBrowserEvent = function(sEventType,fnHandler,oListener) { return new sap.ui.core.Control(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:validateFieldGroup validateFieldGroup} event of this <code>sap.ui.core.Control</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.core.Control</code> itself.
 * 
 * Event is fired if a logical field group defined by <code>fieldGroupIds</code> of a control was left or the user explicitly pressed a validation key combination.
 * Use this event to validate data of the controls belonging to a field group.
 * See {@link sap.ui.core.Control#setFieldGroupIds}.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.Control</code> itself
 * 
 * @returns {sap.ui.core.Control} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.attachValidateFieldGroup = function(oData,fnFunction,oListener) { return new sap.ui.core.Control(); };

/**
 * Returns whether the control has a given field group.
 * If <code>vFieldGroupIds</code> is not given it checks whether at least one field group ID is given for this control.
 * If <code>vFieldGroupIds</code> is an empty array or empty string, true is returned if there is no field group ID set for this control.
 * If <code>vFieldGroupIds</code> is a string array or a string all expected field group IDs are checked and true is returned if all are contained for given for this control.
 * The comma delimiter can be used to separate multiple field group IDs in one string.
 * 
 * @param {string|string[]} [vFieldGroupIds] ID of the field group or an array of field group IDs to match
 * @return {boolean} true if a field group ID matches
 * @public
 * 
 */
sap.ui.core.Control.prototype.checkFieldGroupIds = function(vFieldGroupIds) { return false; };

/**
 * Overrides {@link sap.ui.core.Element#clone Element.clone} to clone additional
 * internal state.
 * 
 * The additionally cloned information contains:
 * <ul>
 * <li>browser event handlers attached with {@link #attachBrowserEvent}
 * <li>text selection behavior
 * <li>style classes added with {@link #addStyleClass}
 * </ul>
 * 
 * @param {string} [sIdSuffix] a suffix to be appended to the cloned element id
 * @param {string[]} [aLocalIds] an array of local IDs within the cloned hierarchy (internally used)
 * @return {sap.ui.core.Element} reference to the newly created clone
 * @protected
 * 
 */
sap.ui.core.Control.prototype.clone = function(sIdSuffix,aLocalIds) { return new sap.ui.core.Element(); };

/**
 * Removes event handlers which have been previously attached using {@link #attachBrowserEvent}.
 * 
 * Note: listeners are only removed, if the same combination of event type, callback function
 * and context object is given as in the call to <code>attachBrowserEvent</code>.
 * 
 * @param {string} [sEventType] A string containing one or more JavaScript event types, such as "click" or "blur".
 * @param {function} [fnHandler] The function that is to be no longer executed.
 * @param {object} [oListener] The context object that was given in the call to <code>attachBrowserEvent</code>.
 * @public
 * 
 */
sap.ui.core.Control.prototype.detachBrowserEvent = function(sEventType,fnHandler,oListener) {  };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:validateFieldGroup validateFieldGroup} event of this <code>sap.ui.core.Control</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.core.Control} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Control.prototype.detachValidateFieldGroup = function(fnFunction,oListener) { return new sap.ui.core.Control(); };

/**
 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Control.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:validateFieldGroup validateFieldGroup} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {string[]} [mParameters.fieldGroupIds] field group IDs of the logical field groups to validate
 * 
 * @returns {sap.ui.core.Control} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Control.prototype.fireValidateFieldGroup = function(mParameters) { return new sap.ui.core.Control(); };

/**
 * This function (if available on the concrete control) provides
 * the current accessibility state of the control.
 * 
 * Applications must not call this hook method directly, it is called by the framework.
 * 
 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
 * 
 * <pre>
 * MyControl.prototype.getAccessibilityInfo = function() {
 *    return {
 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
 *                            // the role.
 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
 *                            // translated text.
 *                            // Note: The type and the enabled/editable state must not be handled here.
 *      focusable: true,      // Boolean which describes whether the control can get the focus.
 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
 *                            // <code>null</code> can be provided.
 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
 *                            // <code>null</code> can be provided.
 *      children: []          // Aggregations of the given control (e.g. when the control is a layout). Primitive aggregations will be ignored.
 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
 *                            //       layout should).
 *    };
 * };
 * </pre>
 * 
 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
 * 
 * @return {object} Current accessibility state of the control.
 * @since 1.37.0
 * @protected
 * 
 */
sap.ui.core.Control.prototype.getAccessibilityInfo = function() { return new Object(); };

/**
 * Gets current value of property {@link #getBusy busy}.
 * 
 * Whether the control is currently in busy state.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>busy</code>
 * 
 * @public
 * 
 */
sap.ui.core.Control.prototype.getBusy = function() { return false; };

/**
 * Gets current value of property {@link #getBusyIndicatorDelay busyIndicatorDelay}.
 * 
 * The delay in milliseconds, after which the busy indicator will show up for this control.
 * 
 * Default value is <code>1000</code>.
 * @returns {int} Value of property <code>busyIndicatorDelay</code>
 * 
 * @public
 * 
 */
sap.ui.core.Control.prototype.getBusyIndicatorDelay = function() { return 0; };

/**
 * Returns a list of all child controls with a field group ID.
 * See {@link #checkFieldGroupIds checkFieldGroupIds} for a description of the
 * <code>vFieldGroupIds</code> parameter.
 * Associated controls are not taken into account.
 * 
 * @param {string|string[]} [vFieldGroupIds] ID of the field group or an array of field group IDs to match
 * @return {sap.ui.core.Control[]} The list of controls with a field group ID
 * @public
 * 
 */
sap.ui.core.Control.prototype.getControlsByFieldGroupId = function(vFieldGroupIds) { return new Array(); };

/**
 * Returns a copy of the field group IDs array. Modification of the field group IDs
 * need to call {@link #setFieldGroupIds setFieldGroupIds} to apply the changes.
 * 
 * @return {string[]} copy of the field group IDs
 * @public
 * 
 */
sap.ui.core.Control.prototype.getFieldGroupIds = function() { return new Array(); };

/**
 * Returns the DOMNode Id to be used for the "labelFor" attribute of the label.
 * 
 * By default, this is the Id of the control itself.
 * 
 * @return {string} Id to be used for the <code>labelFor</code>
 * @public
 * 
 */
sap.ui.core.Control.prototype.getIdForLabel = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.Control.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.Control.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns a renderer for this control instance.
 * 
 * It is retrieved using the RenderManager as done during rendering.
 * 
 * @return {object} a Renderer suitable for this Control instance.
 * @protected
 * 
 */
sap.ui.core.Control.prototype.getRenderer = function() { return new Object(); };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.ui.core.Control.prototype.getVisible = function() { return false; };

/**
 * Returns true if the given style class or all multiple style classes which are generated by splitting the given string with space are already set on the control
 * via previous call(s) to addStyleClass().
 * 
 * @param {string} sStyleClass the style to check for
 * @type boolean
 * @return whether the given style(s) has been set before
 * @public
 * 
 */
sap.ui.core.Control.prototype.hasStyleClass = function(sStyleClass) { return false; };

/**
 * Triggers rerendering of this element and its children.
 * 
 * As <code>sap.ui.core.Element</code> "bubbles up" the invalidate, changes to children
 * potentially result in rerendering of the whole sub tree.
 * 
 * The <code>oOrigin</code> parameter was introduced to allow parent controls to limit
 * their rerendering to certain areas that have been invalidated by their children.
 * As there is no strong guideline for control developers to provide the parameter, it is
 * not a reliable source of information. It is therefore not recommended in general to use
 * it, only in scenarios where a control and its descendants know each other very well
 * (e.g. complex controls where parent and children have the same code owner).
 * 
 * @param {sap.ui.base.ManagedObject} [oOrigin] Child control for which the method was called
 * @protected
 * 
 */
sap.ui.core.Control.prototype.invalidate = function(oOrigin) {  };

/**
 * Check if the control is currently in busy state.
 * 
 * @public
 * @deprecated As of 1.15, use {@link #getBusy} instead
 * @return boolean
 * 
 */
sap.ui.core.Control.prototype.isBusy = function() {  };

/**
 * Function is called when the rendering of the control is completed.
 * 
 * Applications must not call this hook method directly, it is called by the framework.
 * 
 * Subclasses of Control should override this hook to implement any necessary actions after the rendering.
 * @protected
 * 
 */
sap.ui.core.Control.prototype.onAfterRendering = function() {  };

/**
 * Function is called before the rendering of the control is started.
 * 
 * Applications must not call this hook method directly, it is called by the framework.
 * 
 * Subclasses of Control should override this hook to implement any necessary actions before the rendering.
 * @protected
 * 
 */
sap.ui.core.Control.prototype.onBeforeRendering = function() {  };

/**
 * Puts <code>this</code> control into the specified container (<code>oRef</code>) at the given
 * position (<code>oPosition</code>).
 * 
 * First it is checked whether <code>oRef</code> is a container element / control (has a
 * multiple aggregation with type <code>sap.ui.core.Control</code> and name 'content') or is an Id String
 * of such a container.
 * If this is not the case <code>oRef</code> can either be a Dom Reference or Id String of the UIArea
 * (if it does not yet exist implicitly a new UIArea is created),
 * 
 * The <code>oPosition</code> can be one of the following:
 * 
 * <ul>
 *  <li>"first": The control is added as the first element to the container.</li>
 *  <li>"last": The control is added as the last element to the container (default).</li>
 *  <li>"only": All existing children of the container are removed (not destroyed!) and the control is added as new child.</li>
 *  <li><i>index</i>: The control is added at the specified <i>index</i> to the container.</li>
 * </ul>
 * 
 * @param {string|Element|sap.ui.core.Control} oRef container into which the control should be put
 * @param {string|int} [vPosition="last"] Describes the position where the control should be put into the container
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.placeAt = function(oRef,vPosition) { return new sap.ui.core.Control(); };

/**
 * Removes the given string from the list of custom style classes that have been set previously.
 * Regular style classes like "sapUiBtn" cannot be removed.
 * 
 * @param {string} sStyleClass the style to be removed
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.removeStyleClass = function(sStyleClass) { return new sap.ui.core.Control(); };

/**
 * Tries to replace its DOM reference by re-rendering.
 * @protected
 * 
 */
sap.ui.core.Control.prototype.rerender = function() {  };

/**
 * Set the controls busy state.
 * 
 * @param {boolean} bBusy The new busy state to be set
 * @return {sap.ui.core.Control} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.setBusy = function(bBusy) { return new sap.ui.core.Control(); };

/**
 * Define the delay, after which the busy indicator will show up.
 * 
 * @public
 * @param {int} iDelay The delay in ms
 * @return {sap.ui.core.Control} <code>this</code> to allow method chaining
 * 
 */
sap.ui.core.Control.prototype.setBusyIndicatorDelay = function(iDelay) { return new sap.ui.core.Control(); };

/**
 * Sets a new value for property {@link #getFieldGroupIds fieldGroupIds}.
 * 
 * The IDs of a logical field group that this control belongs to. All fields in a logical field group should share the same <code>fieldGroupId</code>.
 * Once a logical field group is left, the validateFieldGroup event is raised.
 * 
 * See {@link sap.ui.core.Control#attachValidateFieldGroup}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>[]</code>.
 * @param {string[]} sFieldGroupIds New value for property <code>fieldGroupIds</code>
 * @returns {sap.ui.core.Control} Reference to <code>this</code> in order to allow method chaining
 * @since 1.31
 * 
 * @public
 * 
 */
sap.ui.core.Control.prototype.setFieldGroupIds = function(sFieldGroupIds) { return new sap.ui.core.Control(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.ui.core.Control} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Control.prototype.setVisible = function(bVisible) { return new sap.ui.core.Control(); };

/**
 * The string given as "sStyleClass" will be be either added to or removed from the "class" attribute of this control's root HTML element,
 * depending on the value of "bAdd": if bAdd is true, sStyleClass will be added.
 * If bAdd is not given, sStyleClass will be removed if it is currently present and will be added if not present.
 * If sStyleClass is null or empty string, the call is ignored.
 * 
 * See addStyleClass and removeStyleClass for further documentation.
 * 
 * @param {string} sStyleClass the CSS class name to be added or removed
 * @param {boolean} bAdd whether sStyleClass should be added (or removed); when this parameter is not given, sStyleClass will be toggled (removed, if present, and added if not present)
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Control.prototype.toggleStyleClass = function(sStyleClass,bAdd) { return new sap.ui.core.Control(); };

/**
 * Triggers the <code>validateFieldGroup</code> event for this control.
 * 
 * Called by <code>sap.ui.core.UIArea</code> if a field group should be validated after it lost
 * the focus or when the key combination was pressed that was configured to trigger validation
 * (defined in the UI area member <code>UIArea._oFieldGroupValidationKey</code>).
 * 
 * See {@link #attachValidateFieldGroup}.
 * 
 * @public
 * 
 */
sap.ui.core.Control.prototype.triggerValidateFieldGroup = function() {  };


// ---- sap.ui.core.Core --------------------------------------------------------------------------

/**
 * 
 * @class Core Class of the SAP UI Library.
 * 
 * This class boots the Core framework and makes it available for the application
 * via method <code>sap.ui.getCore()</code>.
 * 
 * Example:
 * <pre>
 * 
 *   var oCore = sap.ui.getCore();
 * 
 * </pre>
 * 
 * With methods of the Core framework you can {@link #attachInit execute code} after the framework has been initialized.
 * It provides access to the {@link #getConfiguration configuration} and exposes events that
 * an application or a control can register to (e.g. {@link #event:localizationChanged localizationChanged},
 * {@link #event:parseError parseError}, {@link #event:validationError validationError},
 * {@link #event:formatError formatError}, {@link #event:validationSuccess validationSuccess}).
 * 
 * Example:
 * <pre>
 * 
 *   oCore.attachInit(function() {
 *     if ( oCore.getConfiguration().getRTL() ) {
 *       ...
 *     }
 *   });
 * 
 *   oCore.attachLocalizationChanged(function(oEvent) {
 *     ...
 *   });
 * 
 * </pre>
 * 
 * @extends sap.ui.base.Object
 * @final
 * @version 1.48.4
 * @constructor
 * @public
 * 
 */
sap.ui.core.Core = function() {};
/**
 * The 'formatError' event is fired when a value formatting fails. This can happen when a value stored in the model cannot be formatted to be displayed in an element property.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the format error occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the format error occurred
 * @param {sap.ui.model.Type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the format error occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the format error)
 * @param {object} oControlEvent.getParameters.exception The exception object which occurred and has more information about the format error
 * @public
 * 
 */
sap.ui.core.Core.prototype.formatError = function(oControlEvent) {  };

/**
 * Fired when any of the localization relevant configuration settings has changed
 * (e.g. language, rtl, formatLocale, datePattern, timePattern, numberSymbol, legacy formats).
 * 
 * The parameter <code>changes</code> contains additional information about the change.
 * It is a plain object that can contain one or more of the following properties
 * <ul>
 *   <li>language - the language setting has changed</li>
 *   <li>rtl - the character orientation mode (aka 'LTR/RTL mode') has changed</li>
 *   <li>formatLocale - the format locale has changed</li>
 * </ul>
 * (there might be other, currently undocumented settings)
 * 
 * The value for each property will be the new corresponding setting.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {object} oEvent.getParameters.changes a map of the changed localization properties
 * @public
 * 
 */
sap.ui.core.Core.prototype.localizationChanged = function(oEvent) {  };

/**
 * The 'parseError' event is fired when input parsing fails.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the parse error occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the parse error occurred
 * @param {sap.ui.model.Type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the parse error occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the parse error)
 * @param {object} oControlEvent.getParameters.exception The exception object which occurred and has more information about the parse error
 * @public
 * 
 */
sap.ui.core.Core.prototype.parseError = function(oControlEvent) {  };

/**
 * Fired after a theme has been applied.
 * 
 * More precisely, this event is fired when any of the following conditions is met:
 * <ul>
 *   <li>the initially configured theme has been applied after core init</li>
 *   <li>the theme has been changed and is now applied (see {@link #applyTheme})</li>
 *   <li>a library has been loaded dynamically after core init (e.g. with
 *       <code>sap.ui.getCore().loadLibrary(...)</code> and the current theme
 *       has been applied for it</li>
 * </ul>
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.theme Theme name
 * @public
 * 
 */
sap.ui.core.Core.prototype.ThemeChanged = function(oControlEvent) {  };

/**
 * The 'validationError' event is fired when validation of the input fails.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the validation error occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the validation error occurred
 * @param {sap.ui.model.Type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the validation error occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the validation error)
 * @param {object} oControlEvent.getParameters.exception The exception object which occurred and has more information about the validation error
 * @public
 * 
 */
sap.ui.core.Core.prototype.validationError = function(oControlEvent) {  };

/**
 * The 'validationSuccess' event is fired when a value validation was successfully completed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the successful validation occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the successfull validation occurred
 * @param {sap.ui.model.Type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the validation occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the validation)
 * @public
 * 
 */
sap.ui.core.Core.prototype.validationSuccess = function(oControlEvent) {  };

/**
 * Enforces an immediate update of the visible UI (aka "rendering").
 * 
 * In general, applications should avoid calling this method and
 * instead let the framework manage any necessary rendering.
 * @public
 * 
 */
sap.ui.core.Core.prototype.applyChanges = function() {  };

/**
 * Applies the theme with the given name (by loading the respective style sheets, which does not disrupt the application).
 * 
 * By default, the theme files are expected to be located at path relative to the respective control library ([libraryLocation]/themes/[themeName]).
 * Different locations can be configured by using the method setThemePath() or by using the second parameter "sThemeBaseUrl" of applyTheme().
 * Usage of this second parameter is a shorthand for setThemePath and internally calls setThemePath, so the theme location is then known.
 * 
 * sThemeBaseUrl is a single URL to specify the default location of all theme files. This URL is the base folder below which the control library folders
 * are located. E.g. if the CSS files are not located relative to the root location of UI5, but instead they are at locations like
 *    http://my.server/myapp/resources/sap/ui/core/themes/my_theme/library.css
 * then the URL that needs to be given is:
 *    http://my.server/myapp/resources
 * All theme resources are then loaded from below this folder - except if for a certain library a different location has been registered.
 * 
 * If the theme resources are not all either below this base location or  with their respective libraries, then setThemePath must be
 * used to configure individual locations.
 * 
 * @param {string} sThemeName the name of the theme to be loaded
 * @param {string} [sThemeBaseUrl] the (optional) base location of the theme
 * @public
 * 
 */
sap.ui.core.Core.prototype.applyTheme = function(sThemeName,sThemeBaseUrl) {  };

/**
 * Registers a listener for control events.
 * 
 * @param {function} fnFunction callback to be called for each control event
 * @param {object} [oListener] optional context object to call the callback on.
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachControlEvent = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'formatError' event of <code>sap.ui.core.Core</code>.<br/>
 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachFormatError = function(fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Registers a given function that is executed after the framework has been initialized.
 * 
 * The given function will either be called as soon as the framework has been initialized
 * or, if it has been initialized already, it will be called immediately.
 * 
 * @param {function} fnFunction Function to be after initialization of the framework
 * @public
 * @since 1.13.2
 * 
 */
sap.ui.core.Core.prototype.attachInit = function(fnFunction) {  };

/**
 * Registers a given function that is executed after the framework has been initialized.
 * 
 * The method is executed only once and only if the framework has not been initialized already.
 * This could be checked by calling {@link #isInitialized}, but in most cases it is more convenient to
 * use {@link #attachInit} instead. This guarantees that the given function is executed exactly once,
 * independent of the state of the framework.
 * 
 * @param {function} fnFunction Function that is called after initialization of the framework
 * @public
 * @deprecated since 1.13.2 Register with the more convenient {@link #attachInit} function instead
 * 
 */
sap.ui.core.Core.prototype.attachInitEvent = function(fnFunction) {  };

/**
 * Registers a listener to the central interval timer.
 * 
 * @param {function} fnFunction callback to be called periodically
 * @param {object} [oListener] optional context object to call the callback on.
 * @since 1.16.0
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachIntervalTimer = function(fnFunction,oListener) {  };

/**
 * Register a listener for the <code>localizationChanged</code> event.
 * 
 * @param {function} fnFunction callback to be called
 * @param {object} oListener context object to cal lthe function on.
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachLocalizationChanged = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'parseError' event of <code>sap.ui.core.Core</code>.<br/>
 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachParseError = function(oData,fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Attach event-handler <code>fnFunction</code> to the <code>ThemeChanged</code> event of this <code>sap.ui.core.Core</code>.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function.
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachThemeChanged = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'validationError' event of <code>sap.ui.core.Core</code>.<br/>
 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachValidationError = function(oData,fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'validationSuccess' event of <code>sap.ui.core.Core</code>.<br/>
 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.attachValidationSuccess = function(oData,fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Returns a list of all controls with a field group ID.
 * See {@link sap.ui.core.Control#checkFieldGroupIds Control.prototype.checkFieldGroupIds} for a description of the
 * <code>vFieldGroupIds</code> parameter.
 * 
 * @param {string|string[]} [vFieldGroupIds] ID of the field group or an array of field group IDs to match
 * @return {sap.ui.core.Control[]} The list of controls with matching field group IDs
 * @public
 * 
 */
sap.ui.core.Core.prototype.byFieldGroupId = function(vFieldGroupIds) { return new Array(); };

/**
 * Returns the registered element for the given id, if any.
 * @param {string} sId
 * @return {sap.ui.core.Element} the element for the given id
 * @public
 * 
 */
sap.ui.core.Core.prototype.byId = function(sId) { return new sap.ui.core.Element(); };

/**
 * Creates a component with the provided id and settings.
 * 
 * When the optional parameter <code>sUrl</code> is given, then all request for resources of the
 * library will be redirected to the given Url. This is convenience for a call to
 * <pre>
 *   jQuery.sap.registerModulePath(sName, sUrl);
 * </pre>
 * 
 * @param {string|object} vComponent name of the component to import or object containing all needed parameters
 * @param {string} [vComponent.name] name of the component to import
 * @param {string} [vComponent.url] URL to load the component from
 * @param {string} [vComponent.id] ID for the component instance
 * @param {object} [vComponent.settings] settings object for the component
 * @param {string} [vComponent.componentData] user specific data which is available during the whole lifecycle of the component
 * @param {string} [sUrl] the URL to load the component from
 * @param {string} [sId] the ID for the component instance
 * @param {object} [mSettings] the settings object for the component
 * @public
 * 
 */
sap.ui.core.Core.prototype.createComponent = function(vComponent,sUrl,sId,mSettings) {  };

/**
 * Returns a new instance of the RenderManager for exclusive use by the caller.
 * 
 * The caller must take care to destroy the render manager when it is no longer needed.
 * Calling this method before the Core has been {@link #isInitialized initialized},
 * is not recommended.
 * 
 * @return {sap.ui.core.RenderManager} New instance of the RenderManager
 * @public
 * 
 */
sap.ui.core.Core.prototype.createRenderManager = function() { return new sap.ui.core.RenderManager(); };

/**
 * Creates a new sap.ui.core.UIArea.
 * 
 * @param {string|Element} oDomRef a DOM Element or ID string of the UIArea
 * @return {sap.ui.core.UIArea} a new UIArea
 * @public
 * @deprecated Use <code>setRoot()</code> instead!
 * 
 */
sap.ui.core.Core.prototype.createUIArea = function(oDomRef) { return new sap.ui.core.UIArea(); };

/**
 * Unregisters a listener for control events.
 * 
 * A listener will only be unregistered if the same function/context combination
 * is given as in the attachControlEvent call.
 * 
 * @param {function} fnFunction function to unregister
 * @param {object} [oListener] context object given during registration
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachControlEvent = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'formatError' event of <code>sap.ui.core.Core</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The callback function to unregister
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachFormatError = function(fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Unregisters a listener for the central interval timer.
 * 
 * A listener will only be unregistered if the same function/context combination
 * is given as in the attachIntervalTimer call.
 * 
 * @param {function} fnFunction function to unregister
 * @param {object} [oListener] context object given during registration
 * @since 1.16.0
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachIntervalTimer = function(fnFunction,oListener) {  };

/**
 * Unregister a listener from the <code>localizationChanged</code> event.
 * 
 * The listener will only be unregistered if the same function/context combination
 * is given as in the call to <code>attachLocalizationListener</code>.
 * 
 * @param {function} fnFunction callback to be deregistered
 * @param {object} oListener context object given in a previous call to attachLocalizationChanged.
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachLocalizationChanged = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'parseError' event of <code>sap.ui.core.Core</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The callback function to unregister.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachParseError = function(fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Detach event-handler <code>fnFunction</code> from the <code>ThemeChanged</code> event of this <code>sap.ui.core.Core</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] Object on which the given function had to be called.
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachThemeChanged = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'validationError' event of <code>sap.ui.core.Core</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The callback function to unregister
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachValidationError = function(fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'validationSuccess' event of <code>sap.ui.core.Core</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.detachValidationSuccess = function(fnFunction,oListener) { return new sap.ui.core.Core(); };

/**
 * Creates a new subclass of class sap.ui.core.Core with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Core.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event formatError to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * <li>'exception' of type <code>object</code> </li>
 * </ul>
 * 
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Core.prototype.fireFormatError = function(mArguments) { return new sap.ui.core.Core(); };

/**
 * Fire event parseError to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * <li>'exception' of type <code>object</code> </li>
 * </ul>
 * 
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Core.prototype.fireParseError = function(mArguments) { return new sap.ui.core.Core(); };

/**
 * Fire event <code>ThemeChanged</code> to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {object} [mParameters.theme] Theme name
 * @protected
 * 
 */
sap.ui.core.Core.prototype.fireThemeChanged = function(mParameters) {  };

/**
 * Fire event validationError to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * <li>'exception' of type <code>object</code> </li>
 * </ul>
 * 
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Core.prototype.fireValidationError = function(mArguments) { return new sap.ui.core.Core(); };

/**
 * Fire event validationSuccess to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * </ul>
 * 
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Core.prototype.fireValidationSuccess = function(mArguments) { return new sap.ui.core.Core(); };

/**
 * Returns the instance of the application (if exists).
 * 
 * @return {sap.ui.app.Application} instance of the current application
 * @public
 * @deprecated Since 1.15.1. The Component class is enhanced to take care about the Application code.
 * 
 */
sap.ui.core.Core.prototype.getApplication = function() { return new sap.ui.app.Application(); };

/**
 * Returns the registered component for the given id, if any.
 * @param {string} sId
 * @return {sap.ui.core.Component} the component for the given id
 * @public
 * 
 */
sap.ui.core.Core.prototype.getComponent = function(sId) { return new sap.ui.core.Component(); };

/**
 * Returns the Configuration of the Core.
 * 
 * @return {sap.ui.core.Configuration} the Configuration of the current Core.
 * @public
 * 
 */
sap.ui.core.Core.prototype.getConfiguration = function() { return new sap.ui.core.Configuration(); };

/**
 * Returns the registered element for the given ID, if any.
 * @param {string} sId
 * @return {sap.ui.core.Element} the element for the given id
 * @deprecated use <code>sap.ui.core.Core.byId</code> instead!
 * @public
 * 
 */
sap.ui.core.Core.prototype.getControl = function(sId) { return new sap.ui.core.Element(); };

/**
 * Returns the Id of the control/element currently in focus.
 * @return {string} the Id of the control/element currently in focus.
 * @public
 * 
 */
sap.ui.core.Core.prototype.getCurrentFocusedControlId = function() { return ""; };

/**
 * Returns the registered element for the given ID, if any.
 * @param {string} sId
 * @return {sap.ui.core.Element} the element for the given id
 * @deprecated use <code>sap.ui.core.Core.byId</code> instead!
 * @public
 * 
 */
sap.ui.core.Core.prototype.getElementById = function(sId) { return new sap.ui.core.Element(); };

/**
 * Returns the event bus.
 * @return {sap.ui.core.EventBus} the event bus
 * @since 1.8.0
 * @public
 * 
 */
sap.ui.core.Core.prototype.getEventBus = function() { return new sap.ui.core.EventBus(); };

/**
 * Retrieves a resource bundle for the given library and locale.
 * 
 * If only one argument is given, it is assumed to be the libraryName. The locale
 * then falls back to the current {@link sap.ui.core.Configuration#getLanguage session locale}.
 * If no argument is given, the library also falls back to a default: "sap.ui.core".
 * 
 * @param {string} [sLibraryName='sap.ui.core'] name of the library to retrieve the bundle for
 * @param {string} [sLocale] locale to retrieve the resource bundle for
 * @return {jQuery.sap.util.ResourceBundle} the best matching resource bundle for the given parameters or undefined
 * @public
 * 
 */
sap.ui.core.Core.prototype.getLibraryResourceBundle = function(sLibraryName,sLocale) { return new jQuery.sap.util.ResourceBundle(); };

/**
 * Returns a map of library info objects for all currently loaded libraries,
 * keyed by their names.
 * 
 * The structure of the library info objects matches the structure of the info object
 * that the {@link #initLibrary} method expects. Only property names documented with
 * <code>initLibrary</code> should be accessed, any additional properties might change or
 * disappear in future. When a property does not exists, its default value (as documented
 * with <code>initLibrary</code>) should be assumed.
 * 
 * <b>Note:</b> The returned info objects must not be modified. They might be a living
 * copy of the internal data (for efficiency reasons) and the framework is not prepared
 * to handle modifications to these objects.
 * 
 * @return {map} Map of library info objects keyed by the library names.
 * @public
 * 
 */
sap.ui.core.Core.prototype.getLoadedLibraries = function() { return null; };

/**
 * Returns the active <code>MessageManager</code> instance.
 * 
 * @return {sap.ui.core.message.MessageManager}
 * @public
 * @since 1.33.0
 * 
 */
sap.ui.core.Core.prototype.getMessageManager = function() { return new sap.ui.core.message.MessageManager(); };

/**
 * Returns a metadata object for class sap.ui.core.Core.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.Core.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Get the model with the given model name.
 * 
 * The name can be omitted to reference the default model or it must be a non-empty string.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
 * 
 * @param {string|undefined} [sName] name of the model to be retrieved
 * @return {sap.ui.model.Model} oModel
 * @public
 * 
 */
sap.ui.core.Core.prototype.getModel = function(sName) { return new sap.ui.model.Model(); };

/**
 * @public
 * @deprecated Since version 0.15.0. Replaced by <code>createRenderManager()</code>
 * 
 */
sap.ui.core.Core.prototype.getRenderManager = function() {  };

/**
 * Returns the instance of the root component (if exists).
 * 
 * @return {sap.ui.core.Component} instance of the current root component
 * @public
 * 
 */
sap.ui.core.Core.prototype.getRootComponent = function() { return new sap.ui.core.Component(); };

/**
 * Returns the static, hidden area DOM element belonging to this core instance.
 * 
 * It can be used e.g. for hiding elements like Popups, Shadow, Blocklayer etc.
 * 
 * If it is not yet available, a DIV is created and appended to the body.
 * 
 * @return {Element} the static, hidden area DOM element belonging to this core instance.
 * @throws {Error} an Error if the document is not yet ready
 * @public
 * 
 */
sap.ui.core.Core.prototype.getStaticAreaRef = function() { return null; };

/**
 * Returns the registered template for the given id, if any.
 * @param {string} sId
 * @return {sap.ui.core.Component} the template for the given id
 * @public
 * @deprecated Since 1.29.1 Require 'sap/ui/core/tmpl/Template' and use {@link sap.ui.core.tmpl.Template.byId Template.byId} instead.
 * 
 */
sap.ui.core.Core.prototype.getTemplate = function(sId) { return new sap.ui.core.Component(); };

/**
 * Returns a UIArea if the given ID/Element belongs to one.
 * 
 * @public
 * @param {string|Element} o a DOM Element or ID string of the UIArea
 * @return {sap.ui.core.UIArea} a UIArea with a given id or dom ref.
 * 
 */
sap.ui.core.Core.prototype.getUIArea = function(o) { return new sap.ui.core.UIArea(); };

/**
 * Returns <code>true</code> if there are any pending rendering tasks or when
 * such rendering tasks are currently being executed.
 * 
 * @return {boolean} true if there are pending (or executing) rendering tasks.
 * @public
 * 
 */
sap.ui.core.Core.prototype.getUIDirty = function() { return false; };

/**
 * Check if a Model is set to the core
 * @return {boolean} true or false
 * @public
 * 
 */
sap.ui.core.Core.prototype.hasModel = function() { return false; };

/**
 * Includes a library theme into the current page (if a variant is specified it
 * will include the variant library theme)
 * @param {string} sLibName the name of the UI library
 * @param {string} [sVariant] the variant to include (optional)
 * @param {string} [sQuery] to be used only by the Core
 * @public
 * 
 */
sap.ui.core.Core.prototype.includeLibraryTheme = function(sLibName,sVariant,sQuery) {  };

/**
 * Provides the framework with information about a library.
 * 
 * This method is intended to be called exactly once while the main module of a library
 * (its <code>library.js</code> module) is executing, typically at its begin. The single
 * parameter <code>oLibInfo</code> is an info object that describes the content of the library.
 * 
 * When the <code>oLibInfo</code> has been processed, a normalized version of it will be kept
 * and will be returned as library information in later calls to {@link #getLoadedLibraries}.
 * Finally, <code>initLibrary</code> fires (the currently private) {@link #event:LibraryChanged}
 * event with operation 'add' for the newly loaded library.
 * 
 * 
 * <h3>Side Effects</h3>
 * 
 * While analyzing the <code>oLibInfo</code>, the framework takes some additional actions:
 * 
 * <ul>
 * <li>If the info object contains a list of <code>interfaces</code>, they will be registered
 * with the {@link sap.ui.base.DataType} class to make them available as aggregation types
 * in managed objects.</li>
 * 
 * <li>If the object contains a list of <code>controls</code> or <code>elements</code>,
 * {@link sap.ui.lazyRequire lazy stubs} will be created for their constructor as well as for
 * their static <code>extend</code> and <code>getMetadata</code> methods.<br>
 * <b>Note:</b> Future versions might abandon the concept of lazy stubs as it requires synchronous
 * XMLHttpRequests which have been deprecated (see {@link http://xhr.spec.whatwg.org}). To be on the
 * safe side, productive applications should always require any modules that they directly depend on.</li>
 * 
 * <li>With the <code>noLibraryCSS</code> property, the library can be marked as 'theming-free'.
 * Otherwise, the framework will add a &lt;link&gt; tag to the page's head, pointing to the library's
 * theme-specific stylesheet. The creation of such a &lt;link&gt; tag can be suppressed with the
 * {@link sap.ui.core.Configuration global configuration option} <code>preloadLibCss</code>.
 * It can contain a list of library names for which no stylesheet should be included.
 * This is e.g. useful when an application merges the CSS for multiple libraries and already
 * loaded the resulting stylesheet.</li>
 * 
 * <li>If a list of library <code>dependencies</code> is specified in the info object, those
 * libraries will be loaded synchronously by <code>initLibrary</code>.<br>
 * <b>Note:</b> Dependencies between libraries don't have to be modeled as AMD dependencies.
 * Only when enums or types from an additional library are used in the coding of the
 * <code>library.js</code> module, the library should be additionally listed in the AMD dependencies.</li>
 * </ul>
 * 
 * Last but not least, higher layer frameworks might want to include their own metadata for libraries.
 * The property <code>extensions</code> might contain such additional metadata. Its structure is not defined
 * by the framework, but it is strongly suggested that each extension only occupies a single property
 * in the <code>extensions</code> object and that the name of that property contains some namespace
 * information (e.g. library name that introduces the feature) to avoid conflicts with other extensions.
 * The framework won't touch the content of <code>extensions</code> but will make it available
 * in the library info objects returned by {@link #getLoadedLibraries}.
 * 
 * 
 * <h3>Relationship to Descriptor for Libraries (manifest.json)</h3>
 * 
 * The information contained in <code>oLibInfo</code> is partially redundant to the content of the descriptor
 * for the same library (its <code>manifest.json</code> file). Future versions of UI5 might ignore the information
 * provided in <code>oLibInfo</code> and might evaluate the descriptor file instead. Library developers therefore
 * should keep the information in both files in sync.
 * 
 * When the <code>manifest.json</code> is generated from the <code>.library</code> file (which is the default
 * for UI5 libraries built with Maven), then the content of the <code>.library</code> and <code>library.js</code>
 * files must be kept in sync.
 * 
 * @param {object} oLibInfo Info object for the library
 * @param {string} [oLibInfo.name] Name of the library; when given it must match the name by which the library has been loaded
 * @param {string} oLibInfo.version Version of the library
 * @param {string[]} [oLibInfo.dependencies=[]] List of libraries that this library depends on; names are in dot notation (e.g. "sap.ui.core")
 * @param {string[]} [oLibInfo.types=[]] List of names of types that this library provides; names are in dot notation (e.g. "sap.ui.core.CSSSize")
 * @param {string[]} [oLibInfo.interfaces=[]] List of names of interface types that this library provides; names are in dot notation (e.g. "sap.ui.core.PopupInterface")
 * @param {string[]} [oLibInfo.controls=[]] Names of control types that this library provides; names are in dot notation (e.g. "sap.ui.core.ComponentContainer")
 * @param {string[]} [oLibInfo.elements=[]] Names of element types that this library provides (excluding controls); names are in dot notation (e.g. "sap.ui.core.Item")
 * @param {boolean} [oLibInfo.noLibraryCSS=false] Indicates whether the library doesn't provide / use theming.
 *                        When set to true, no library.css will be loaded for this library
 * @param {object} [oLibInfo.extensions] Potential extensions of the library metadata; structure not defined by the UI5 core framework.
 * @public
 * 
 */
sap.ui.core.Core.prototype.initLibrary = function(oLibInfo) {  };

/**
 * Returns true if the Core has already been initialized. This means that instances
 * of RenderManager etc. do already exist and the init event has already been fired
 * (and will not be fired again).
 * 
 * @return {boolean} whether the Core has already been initialized
 * @public
 * 
 */
sap.ui.core.Core.prototype.isInitialized = function() { return false; };

/**
 * Returns the locked state of the <code>sap.ui.core.Core</code>
 * @return {boolean} locked state
 * @public
 * 
 */
sap.ui.core.Core.prototype.isLocked = function() { return false; };

/**
 * Check if the script is running on mobile
 * @return {boolean} true or false
 * @public
 * 
 */
sap.ui.core.Core.prototype.isMobile = function() { return false; };

/**
 * Used to find out whether a certain DOM element is the static area
 * 
 * @param {object} oDomRef
 * @return {boolean} whether the given DomRef is the StaticAreaRef
 * @protected
 * 
 */
sap.ui.core.Core.prototype.isStaticAreaRef = function(oDomRef) { return false; };

/**
 * Returns true, if the styles of the current theme are already applied, false otherwise.
 * 
 * This function must not be used before the init event of the Core.
 * If the styles are not yet applied a theme changed event will follow when the styles will be applied.
 * 
 * @return {boolean} whether the styles of the current theme are already applied
 * @public
 * 
 */
sap.ui.core.Core.prototype.isThemeApplied = function() { return false; };

/**
 * Loads a set of libraries, preferably asynchronously.
 * 
 * The module loading is still synchronous, so if a library loads additional modules besides
 * its library.js file, those modules might be loaded synchronously by the library.js
 * The async loading is only supported by the means of the library-preload.js(on) files, so if a
 * library doesn't provide a preload or when the preload is deactivated (configuration, debug mode)
 * then this API falls back to synchronous loading. However, the contract (Promise) remains valid
 * and a Promise will be returned if async is specified - even when the real loading
 * is done synchronously.
 * 
 * @param {string[]} aLibraries set of libraries that should be loaded
 * @param {object} [mOptions] configuration options
 * @param {boolean} [mOptions.async=true] whether to load the libraries async (default)
 * @param {boolean} [mOptions.preloadOnly=false] whether to preload the libraries only (default is to require them as well)
 * @returns {Promise|undefined} returns a Promise in async mode, otherwise <code>undefined</code>
 * 
 * @experimental Since 1.27.0 This API is not mature yet and might be changed or removed completely.
 * Productive code should not use it, except code that is delivered as part of UI5.
 * @private
 * @sap-restricted sap.ui.core,sap.ushell
 * 
 */
sap.ui.core.Core.prototype.loadLibraries = function(aLibraries,mOptions) { return null; };

/**
 * Loads the given library and its dependencies and makes it available to the application.
 * 
 * When library preloads are not suppressed for the given library, then a library-preload bundle
 * will be loaded for it. By default, the bundle will be loaded synchronously (for compatibility
 * reasons). Only when the optional parameter <code>vUrl</code> is given as <code>true</code> or as
 * a configuration object with a property of <code>async:true</code>, then the bundle will be loaded
 * asynchronously and a <code>Promise</code> will be returned (preferred usage).
 * 
 * After preloading the bundle, dependency information from the bundle is evaluated and any
 * missing libraries are also preloaded.
 * 
 * Only then the library entry module (named <code><i>your/lib</i>/library.js</code>) will be required
 * and executed. The module is supposed to call <code>sap.ui.getCore().initLibrary(...)</code>
 * providing the framework with additional metadata about the library, e.g. its version, the set of contained
 * enums, types, interfaces, controls and elements and whether the library requires CSS. If the library
 * requires CSS, a &lt;link&gt; will be added to the page referring to the corresponding <code>library.css</code>
 * stylesheet for the library and the current theme.
 * 
 * When the optional parameter <code>vUrl</code> is given as a string or when a configuration object is given
 * with a non-empty, string-valued property <code>url</code>, then that URL will be registered for the
 * namespace of the library and all resources will be loaded from that location. This is convenience for
 * a call like
 * <pre>
 *   jQuery.sap.registerModulePath(sLibrary, vUrl); // or vUrl.url resp.
 * </pre>
 * 
 * When the given library has been loaded already, no further action will be taken, especially, a given
 * URL will not be registered! In the case of asynchronous loading, a Promise will be returned, but will be
 * resolved immediately.
 * 
 * @param {string} sLibrary name of the library to load
 * @param {string|boolean|object} [vUrl] URL to load the library from or the async flag or a complex configuration object
 * @param {string} [vUrl.url] URL to load the library from
 * @param {boolean} [vUrl.async] Whether to load the library asynchronously
 * @returns {Object|Promise} An info object for the library (sync) or a Promise (async)
 * @public
 * 
 */
sap.ui.core.Core.prototype.loadLibrary = function(sLibrary,vUrl) { return null; };

/**
 * Locks the Core. No browser events are dispatched to the controls.
 * 
 * Lock should be called before and after the dom is modified for rendering, roundtrips...
 * Exceptions might be the case for asynchronous UI behavior
 * @public
 * 
 */
sap.ui.core.Core.prototype.lock = function() {  };

/**
 * Registers a Plugin to the <code>sap.ui.core.Core</code>, which lifecycle
 * will be managed (start and stop).
 * <br/>
 * Plugin object need to implement two methods:
 * <ul>
 *   <li><code>startPlugin(oCore)</code>: will be invoked, when the Plugin
 *       should start (as parameter the reference to the Core will be provided</li>
 *   <li><code>stopPlugin()</code>: will be invoked, when the Plugin should stop</li>
 * </ul>
 * 
 * @param {object} oPlugin reference to a Plugin object
 * @public
 * 
 */
sap.ui.core.Core.prototype.registerPlugin = function(oPlugin) {  };

/**
 * Sets or unsets a model for the given model name.
 * 
 * The <code>sName</code> must either be <code>undefined</code> (or omitted) or a non-empty string.
 * When the name is omitted, the default model is set/unset.
 * 
 * When <code>oModel</code> is <code>null</code> or <code>undefined</code>, a previously set model
 * with that name is removed from the Core.
 * 
 * Any change (new model, removed model) is propagated to all existing UIAreas and their descendants
 * as long as a descendant doesn't have its own model set for the given name.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
 * 
 * @param {sap.ui.model.Model} oModel the model to be set or <code>null</code> or <code>undefined</code>
 * @param {string} [sName] the name of the model or <code>undefined</code>
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Core.prototype.setModel = function(oModel,sName) { return new sap.ui.core.Core(); };

/**
 * Implicitly creates a new <code>UIArea</code> (or reuses an exiting one) for the given DOM reference and
 * adds the given control reference to the UIAreas content (existing content will be removed).
 * 
 * @param {string|Element} oDomRef a DOM Element or Id (string) of the UIArea
 * @param {sap.ui.base.Interface | sap.ui.core.Control}
 *            oControl the Control that should be the added to the <code>UIArea</code>.
 * @public
 * @deprecated Use function <code>oControl.placeAt(oDomRef, "only")</code> of <code>sap.ui.core.Control</code> instead.
 * 
 */
sap.ui.core.Core.prototype.setRoot = function(oDomRef,oControl) {  };

/**
 * Defines the root directory from below which UI5 should load the theme with the given name.
 * Optionally allows restricting the setting to parts of a theme covering specific control libraries.
 * 
 * Example:
 * <pre>
 *   sap.ui.getCore().setThemeRoot("my_theme", "https://mythemeserver.com/allThemes");
 *   sap.ui.getCore().applyTheme("my_theme");
 * </pre>
 * 
 * will cause the following file to be loaded (assuming that the bootstrap is configured to load
 *  libraries <code>sap.m</code> and <code>sap.ui.layout</code>):
 * <pre>
 *   https://mythemeserver.com/allThemes/sap/ui/core/themes/my_theme/library.css
 *   https://mythemeserver.com/allThemes/sap/ui/layout/themes/my_theme/library.css
 *   https://mythemeserver.com/allThemes/sap/m/themes/my_theme/library.css
 * </pre>
 * 
 * If parts of the theme are at different locations (e.g. because you provide a standard theme
 * like "sap_belize" for a custom control library and this self-made part of the standard theme is at a
 * different location than the UI5 resources), you can also specify for which control libraries the setting
 * should be used, by giving an array with the names of the respective control libraries as second parameter:
 * <pre>
 *   sap.ui.getCore().setThemeRoot("sap_belize", ["my.own.library"], "https://mythemeserver.com/allThemes");
 * </pre>
 * 
 * This will cause the Belize theme to be loaded from the UI5 location for all standard libs.
 * Resources for styling the <code>my.own.library</code> controls will be loaded from the configured
 * location:
 * <pre>
 *   https://openui5.hana.ondemand.com/resources/sap/ui/core/themes/sap_belize/library.css
 *   https://openui5.hana.ondemand.com/resources/sap/ui/layout/themes/sap_belize/library.css
 *   https://openui5.hana.ondemand.com/resources/sap/m/themes/sap_belize/library.css
 *   https://mythemeserver.com/allThemes/my/own/library/themes/sap_belize/library.css
 * </pre>
 * 
 * If the custom theme should be loaded initially (via bootstrap attribute), the <code>themeRoots</code>
 * property of the <code>window["sap-ui-config"]</code> object must be used instead of calling
 * <code>sap.ui.getCore().setThemeRoot(...)</code> in order to configure the theme location early enough.
 * 
 * @param {string} sThemeName Name of the theme for which to configure the location
 * @param {string[]} [aLibraryNames] Optional library names to which the configuration should be restricted
 * @param {string} sThemeBaseUrl Base URL below which the CSS file(s) will be loaded from
 * @return {sap.ui.core.Core} the Core, to allow method chaining
 * @since 1.10
 * @public
 * 
 */
sap.ui.core.Core.prototype.setThemeRoot = function(sThemeName,aLibraryNames,sThemeBaseUrl) { return new sap.ui.core.Core(); };

/**
 * Unlocks the Core.
 * 
 * Browser events are dispatched to the controls again after this method is called.
 * @public
 * 
 */
sap.ui.core.Core.prototype.unlock = function() {  };

/**
 * Unregisters a Plugin out of the <code>sap.ui.core.Core</code>
 * 
 * @param {object} oPlugin reference to a Plugin object
 * @public
 * 
 */
sap.ui.core.Core.prototype.unregisterPlugin = function(oPlugin) {  };


// ---- sap.ui.core.CSSColor --------------------------------------------------------------------------


// ---- sap.ui.core.CSSSize --------------------------------------------------------------------------


// ---- sap.ui.core.CSSSizeShortHand --------------------------------------------------------------------------


// ---- sap.ui.core.CustomData --------------------------------------------------------------------------

/**
 * Constructor for a new CustomData.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getValue value} : any</li>
 * <li>{@link #getWriteToDom writeToDom} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Contains a single key/value pair of custom data attached to an Element. See method data().
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.CustomData = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.CustomData with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.CustomData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * The key of the data in this CustomData object.
 * When the data is just stored, it can be any string, but when it is to be written to HTML (writeToDom == true) then it must also be a valid HTML attribute name (it must conform to the sap.ui.core.ID type and may contain no colon) to avoid collisions, it also may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
 * If any restriction is violated, a warning will be logged and nothing will be written to the DOM.
 * 
 * @returns {string} Value of property <code>key</code>
 * 
 * @public
 * 
 */
sap.ui.core.CustomData.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.CustomData.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.CustomData.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * The data stored in this CustomData object.
 * When the data is just stored, it can be any JS type, but when it is to be written to HTML (writeToDom == true) then it must be a string.
 * If this restriction is violated, a warning will be logged and nothing will be written to the DOM.
 * 
 * @returns {any} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.ui.core.CustomData.prototype.getValue = function() { return null; };

/**
 * Gets current value of property {@link #getWriteToDom writeToDom}.
 * 
 * If set to "true" and the value is of type "string" and the key conforms to the documented restrictions, this custom data is written to the HTML root element of the control as a "data-*" attribute.
 * If the key is "abc" and the value is "cde", the HTML will look as follows:
 * &lt;SomeTag ... data-abc="cde" ... &gt;
 * Thus the application can provide stable attributes by data binding which can be used for styling or identification purposes.
 * ATTENTION: use carefully to not create huge attributes or a large number of them.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>writeToDom</code>
 * @since 1.9.0
 * 
 * @public
 * 
 */
sap.ui.core.CustomData.prototype.getWriteToDom = function() { return false; };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * The key of the data in this CustomData object.
 * When the data is just stored, it can be any string, but when it is to be written to HTML (writeToDom == true) then it must also be a valid HTML attribute name (it must conform to the sap.ui.core.ID type and may contain no colon) to avoid collisions, it also may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
 * If any restriction is violated, a warning will be logged and nothing will be written to the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.ui.core.CustomData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.CustomData.prototype.setKey = function(sKey) { return new sap.ui.core.CustomData(); };

/**
 * Sets a new value for property {@link #getValue value}.
 * 
 * The data stored in this CustomData object.
 * When the data is just stored, it can be any JS type, but when it is to be written to HTML (writeToDom == true) then it must be a string.
 * If this restriction is violated, a warning will be logged and nothing will be written to the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oValue New value for property <code>value</code>
 * @returns {sap.ui.core.CustomData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.CustomData.prototype.setValue = function(oValue) { return new sap.ui.core.CustomData(); };

/**
 * Sets a new value for property {@link #getWriteToDom writeToDom}.
 * 
 * If set to "true" and the value is of type "string" and the key conforms to the documented restrictions, this custom data is written to the HTML root element of the control as a "data-*" attribute.
 * If the key is "abc" and the value is "cde", the HTML will look as follows:
 * &lt;SomeTag ... data-abc="cde" ... &gt;
 * Thus the application can provide stable attributes by data binding which can be used for styling or identification purposes.
 * ATTENTION: use carefully to not create huge attributes or a large number of them.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bWriteToDom New value for property <code>writeToDom</code>
 * @returns {sap.ui.core.CustomData} Reference to <code>this</code> in order to allow method chaining
 * @since 1.9.0
 * 
 * @public
 * 
 */
sap.ui.core.CustomData.prototype.setWriteToDom = function(bWriteToDom) { return new sap.ui.core.CustomData(); };


// ---- sap.ui.core.DeclarativeSupport --------------------------------------------------------------------------

/**
 * @class Static class for enabling declarative UI support.
 * @version 1.48.4
 * @since 1.7.0
 * @public
 * 
 */
sap.ui.core.DeclarativeSupport = function() {};
/**
 * Enhances the given DOM element by parsing the Control and Elements info and creating
 * the SAPUI5 controls for them.
 * 
 * @param {Element} oElement the DOM element to compile
 * @param {sap.ui.core.mvc.HTMLView} [oView] The view instance to use
 * @param {boolean} [isRecursive] Whether the call of the function is recursive.
 * @public
 * 
 */
sap.ui.core.DeclarativeSupport.compile = function(oElement,oView,isRecursive) {  };


// ---- sap.ui.core.delegate --------------------------------------------------------------------------


// ---- sap.ui.core.delegate.ItemNavigation --------------------------------------------------------------------------

/**
 * Creates an <code>ItemNavigation</code> delegate that can be attached to controls requiring
 * capabilities for keyboard navigation between items.
 * 
 * 
 * @class Delegate for the navigation between DOM nodes with the keyboard.
 * 
 * The <code>ItemNavigation</code> provides keyboard and mouse navigation between DOM nodes representing items.
 * This means that controls rendering a list of items can attach this delegate to get a common keyboard and mouse support
 * to navigate between these items.
 * It is possible to navigate between the items via the arrow keys.
 * If needed, paging using the Page Up and Page Down keys is possible. (To activate call <code>setPageSize</code> with a value &gt; 0.)
 * HOME and END keys are also supported.
 * Focusing an item via mouse also is also supported. For mouse navigation, the <code>mousedown</code> event is used.
 * 
 * As the <code>ItemNavigation</code> works with DOM nodes, the items and the control area must be provided as
 * DOM references. There is one root DOM reference (set via <code>setRootDomRef</code>).
 * All item DOM references (set via <code>setItemDomRefs</code>) must be places somewhere inside of this root DOM reference.
 * Only focusable items are used for the navigation, meaning disabled items or separator items are just ignored by navigating
 * through the items. In some cases however, it makes sense to put the non-focusable items in the array of the DOM references to
 * keep the indexes stable or like in the calling control.
 * <b>Hint:</b> To make a DOM reference focusable a <code>tabindex</code> of -1 can be set.
 * 
 * <b>Note</b> After re-rendering of the control or changing the DOM nodes of the control, the
 * DOM references of the <code>ItemNavigation</code> must be updated. Then the same item
 * (corresponding to the index) will get the focus.
 * 
 * The <code>ItemNavigation</code> adjusts the <code>tabindex</code> of all DOM references relating to the current
 * focused item. So if the control containing the items gets the focus (e.g. via tab navigation),
 * it is always the focused items which will be focused.
 * 
 * <b>Note:</b> If the <code>ItemNavigation</code> is nested in another <code>ItemNavigation</code>
 * (e.g. <code>SegmentedButton</code> in <code>Toolbar</code>), the <code>RootDomRef</code> will always have <code>tabindex</code> -1.
 * 
 * Per default the <code>ItemNavigation</code> cycles over the items.
 * It navigates again to the first item if the Arrow Down or Arrow Right key is pressed while
 * the last item has the focus. It navigates to the last item if arrow up or
 * arrow left is pressed while the first item has the focus.
 * If you want to stop the navigation at the first and last item,
 * call the <code>setCycling</code> method with a value of <code>false</code>.
 * 
 * It is possible to have multiple columns in the item navigation. If multiple columns
 * are used, the keyboard navigation changes. The Arrow Right and Arrow Left keys will take the user to the next or previous
 * item, and the Arrow Up and Arrow Down keys will navigate the same way but in a vertical direction.
 * 
 * The <code>ItemNavigation</code> also allows setting a selected index that is used to identify
 * the selected item. Initially, if no other focus is set, the selected item will be the focused one.
 * Note that navigating through the items will not change the selected item, only the focus.
 * (For example a radio group has one selected item.)
 * 
 * @extends sap.ui.base.EventProvider
 * 
 * @param {Element} oDomRef The root DOM reference that includes all items
 * @param {Element[]} aItemDomRefs Array of DOM references representing the items for the navigation
 * @param {boolean} [bNotInTabChain=false] Whether the selected element should be in the tab chain or not
 * 
 * @version 1.48.4
 * @constructor
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation = function(oDomRef,aItemDomRefs,bNotInTabChain) {};
/**
 * The 'afterFocus' event is fired after the actual item is focused.
 * The control can register to this event and react on the focus change.
 * @event
 * @param {int} index Index of the item
 * @param {jQuery.Event} event Event that leads to the focus change
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.afterFocus = function(index,event) {  };

/**
 * The 'beforeFocus' event is fired before the actual item is focused.
 * @event
 * @param {int} index Index of the item
 * @param {jQuery.Event} event Event that leads to the focus change
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.beforeFocus = function(index,event) {  };

/**
 * The 'borderReached' event is fired if the border of the items is reached and
 * no cycling is used, meaning an application can react on this.
 * 
 * For example if the first item is focused and the Arrow Left key is pressed.
 * @event
 * @param {int} index Index of the item
 * @param {jQuery.Event} event Event that leads to the focus change
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.borderReached = function(index,event) {  };

/**
 * The 'focusAgain' event is fired if the current focused item is focused again
 * (e.g. click again on focused item.)
 * @event
 * @param {int} index Index of the item
 * @param {jQuery.Event} event Event that leads to the focus change
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.focusAgain = function(index,event) {  };

/**
 * The 'focusLeave' event fired if the focus is set outside the control handled by the <code>ItemNavigation</code>.
 * @event
 * @param {int} index Index of the item
 * @param {jQuery.Event} event Event that leads to the focus change
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.focusLeave = function(index,event) {  };

/**
 * Creates a new subclass of class sap.ui.core.delegate.ItemNavigation with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.delegate.ItemNavigation.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns disabled modifiers
 * These modifiers will not be handled by the <code>ItemNavigation</code>
 * 
 * @param {object} oDisabledModifiers Object that includes event type with disabled keys as an array
 * @return {object} Object that includes event type with disabled keys as an array
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.getDisabledModifiers = function(oDisabledModifiers) { return new Object(); };

/**
 * Returns the array of item DOM references
 * 
 * @return {Element[]} Array of item DOM references
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.getItemDomRefs = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.ui.core.delegate.ItemNavigation.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.delegate.ItemNavigation.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the root DOM reference surrounding the items
 * 
 * @return {Element} Root DOM reference
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.getRootDomRef = function() { return null; };

/**
 * Check whether given event has disabled modifier or not
 * 
 * @param {jQuery.Event} oEvent jQuery event
 * @return {Boolean} Flag if disabled modifiers are set
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.hasDisabledModifier = function(oEvent) { return null; };

/**
 * Sets whether the items are displayed in columns.
 * 
 * If columns are used, the Arrow Up and Arrow Down keys navigate to the next or previous
 * item of the column. If the first or last item of the column is reached, the next focused
 * item is then in the next or previous column.
 * 
 * @param {int} iColumns Count of columns for the table mode or cycling mode
 * @param {boolean} bNoColumnChange Forbids jumping to an other column with Arrow Up and Arrow Down keys
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setColumns = function(iColumns,bNoColumnChange) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets whether the <code>ItemNavigation</code> should cycle through the items.
 * 
 * If cycling is disabled the navigation stops at the first and last item, if the corresponding arrow keys are used.
 * 
 * @param {boolean} bCycling Set to true if cycling should be done, else false
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setCycling = function(bCycling) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets the disabled modifiers
 * These modifiers will not be handled by the <code>ItemNavigation</code>
 * 
 * <pre>
 * Example: Disable shift + up handling of the <code>ItemNavigation</code>
 * 
 * oItemNavigation.setDisabledModifiers({
 *     sapnext : ["shift"]
 * });
 * 
 * Possible keys are : "shift", "alt", "ctrl", "meta"
 * Possible events are : "sapnext", "sapprevious", "saphome", "sapend"
 * </pre>
 * 
 * @param {Object} oDisabledModifiers Object that includes event type with disabled keys as an array
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setDisabledModifiers = function(oDisabledModifiers) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets behavior of HOME and END keys if columns are used.
 * 
 * @param {boolean} bStayInRow HOME -> go to first item in row; END -> go to last item in row
 * @param {boolean} bCtrlEnabled HOME/END with CTRL -> go to first/last item of all
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setHomeEndColumnMode = function(bStayInRow,bCtrlEnabled) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets the item DOM references as an array for the items
 * 
 * @param {Element[]} aItemDomRefs Array of DOM references or DOM node list object, representing the items
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setItemDomRefs = function(aItemDomRefs) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets the page size of the item navigation to allow Page Up and Page Down keys.
 * 
 * @param {int} iPageSize The page size, needs to be at least 1
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setPageSize = function(iPageSize) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets the root DOM reference surrounding the items
 * 
 * @param {object} oDomRef Root DOM reference
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setRootDomRef = function(oDomRef) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets the selected index if the used control supports selection.
 * 
 * @param {int} iIndex Index of the first selected item
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setSelectedIndex = function(iIndex) { return new sap.ui.core.delegate.ItemNavigation(); };

/**
 * Sets whether the <code>ItemNavigation</code> should use the table mode to navigate through
 * the items (navigation in a grid).
 * 
 * @param {boolean} bTableMode Set to true if table mode should be used, else false
 * @param {boolean} [bTableList] This sets a different behavior for table mode.
 * In this mode we keep using table navigation but there are some differences. e.g.
 * <ul>
 * 	<li>Page-up moves focus to the first row, not to the first cell like in table mode</li>
 * 	<li>Page-down moves focus to the last row, not to the last cell like in table mode</li>
 * </ul>
 * 
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.delegate.ItemNavigation.prototype.setTableMode = function(bTableMode,bTableList) { return new sap.ui.core.delegate.ItemNavigation(); };


// ---- sap.ui.core.delegate.ScrollEnablement --------------------------------------------------------------------------

/**
 * Creates a ScrollEnablement delegate that can be attached to Controls requiring
 * capabilities for scrolling of a certain part of their DOM.
 * 
 * 
 * @class Delegate for touch scrolling on mobile devices
 * 
 * This delegate uses native scrolling of mobile and desktop browsers. Third party scrolling libraries are not supported.
 * 
 * Controls that implement ScrollEnablement should additionally provide the getScrollDelegate method that returns
 * the current instance of this delegate object
 * 
 * @extends sap.ui.base.Object
 * 
 * @param {sap.ui.core.Control} oControl the Control of which this Scroller is the delegate
 * @param {string} sScrollContentDom the Id of the element within the DOM of the Control which should be scrollable
 * @param {object} oConfig the configuration of the scroll delegate
 * @param {boolean} [oConfig.horizontal=false] Whether the element should be scrollable horizontally
 * @param {boolean} [oConfig.vertical=false] Whether the element should be scrollable vertically
 * @param {boolean} [oConfig.zynga=false] @deprecated since 1.42, the parameter has no effect
 * @param {boolean} [oConfig.iscroll=false] @deprecated since 1.42, the parameter has no effect
 * @param {boolean} [oConfig.preventDefault=false] @deprecated since 1.42, the parameter has no effect
 * @param {boolean} [oConfig.nonTouchScrolling=false] If true, the delegate will also be active to allow touch like scrolling with the mouse on non-touch platforms.
 * @param {string} [oConfig.scrollContainerId=""] Native scrolling does not need content wrapper. In this case, ID of the container element should be provided.
 * 
 * @constructor
 * @protected
 * @version 1.48.4
 * 
 */
sap.ui.core.delegate.ScrollEnablement = function(oControl,sScrollContentDom,oConfig) {};
/**
 * Destroys this Scrolling delegate.
 * 
 * This function must be called by the control which uses this delegate in the <code>exit</code> function.
 * @protected
 * 
 */
sap.ui.core.delegate.ScrollEnablement.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.delegate.ScrollEnablement with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.delegate.ScrollEnablement.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Calculates scroll position of a child of a container.
 * @param {HTMLElement | jQuery} vElement An element(DOM or jQuery) for which the scroll position will be calculated.
 * @returns {object} Position object.
 * @protected
 * 
 */
sap.ui.core.delegate.ScrollEnablement.prototype.getChildPosition = function(vElement) { return new Object(); };

/**
 * Get current setting for horizontal scrolling.
 * 
 * @return {boolean} true if horizontal scrolling is enabled
 * @protected
 * @since 1.9.1
 * 
 */
sap.ui.core.delegate.ScrollEnablement.prototype.getHorizontal = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.core.delegate.ScrollEnablement.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.delegate.ScrollEnablement.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Get current setting for vertical scrolling.
 * 
 * @return {boolean} true if vertical scrolling is enabled
 * @protected
 * @since 1.9.1
 * 
 */
sap.ui.core.delegate.ScrollEnablement.prototype.getVertical = function() { return false; };

/**
 * Refreshes this Scrolling delegate.
 * 
 * @protected
 * 
 */
sap.ui.core.delegate.ScrollEnablement.prototype.refresh = function() {  };

/**
 * Scrolls to an element within a container.
 * @param {HTMLElement} oElement A DOM element.
 * @param {int} [iTime=0] The duration of animated scrolling in milliseconds. To scroll immediately without animation, give 0 as value.
 * @returns {sap.ui.core.delegate.ScrollEnablement}
 * @protected
 * 
 */
sap.ui.core.delegate.ScrollEnablement.prototype.scrollToElement = function(oElement,iTime) { return new sap.ui.core.delegate.ScrollEnablement(); };

/**
 * Setter for property <code>bounce</code>.
 * 
 * @param {boolean} bBounce new value for property <code>bounce</code>.
 * @protected
 * @since 1.17
 * @deprecated since 1.42
 * 
 */
sap.ui.core.delegate.ScrollEnablement.prototype.setBounce = function(bBounce) {  };

/**
 * Sets GrowingList control to scroll container
 * 
 * @param {function} fnScrollLoadCallback Scrolling callback
 * @param {sap.m.ListGrowingDirection} sScrollLoadDirection Scrolling direction
 * @protected
 * @since 1.11.0
 * 
 */
sap.ui.core.delegate.ScrollEnablement.prototype.setGrowingList = function(fnScrollLoadCallback,sScrollLoadDirection) {  };

/**
 * Enable or disable horizontal scrolling.
 * 
 * @param {boolean} bHorizontal set true to enable horizontal scrolling, false - to disable
 * @protected
 * 
 */
sap.ui.core.delegate.ScrollEnablement.prototype.setHorizontal = function(bHorizontal) {  };

/**
 * Sets IconTabBar control to scroll container
 * 
 * @param {sap.m.IconTabBar} oIconTabBar instance
 * @param {function} fnScrollEndCallback callback function for the scroll end event
 * @param {function} fnScrollStartCallback callback function for the scroll start event
 * @protected
 * @since 1.16.1
 * 
 */
sap.ui.core.delegate.ScrollEnablement.prototype.setIconTabBar = function(oIconTabBar,fnScrollEndCallback,fnScrollStartCallback) {  };

/**
 * Set overflow control on top of scroll container.
 * 
 * @param {sap.ui.core.Control} oControl Top control that should be normally hidden over
 * the top border of the scroll container (pull-down content).
 * @protected
 * @since 1.9.2
 * 
 */
sap.ui.core.delegate.ScrollEnablement.prototype.setPullDown = function(oControl) {  };

/**
 * Enable or disable vertical scrolling.
 * 
 * @param {boolean} bVertical set true to enable vertical scrolling, false - to disable
 * @protected
 * 
 */
sap.ui.core.delegate.ScrollEnablement.prototype.setVertical = function(bVertical) {  };


// ---- sap.ui.core.Design --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.Design.toString = function() { return ""; };

// ---- sap.ui.core.Dock --------------------------------------------------------------------------


// ---- sap.ui.core.Element --------------------------------------------------------------------------

/**
 * Constructs and initializes a UI Element with the given <code>sId</code> and settings.
 * 
 * If the optional <code>mSettings</code> are given, they must be a JSON-like object (object literal)
 * that defines values for properties, aggregations, associations or events keyed by their name.
 * 
 * <b>Valid Names:</b>
 * 
 * The property (key) names supported in the object literal are exactly the (case sensitive)
 * names documented in the JSDoc for the properties, aggregations, associations and events
 * of the control and its base classes. Note that for  0..n aggregations and associations this
 * usually is the plural name, whereas it is the singular name in case of 0..1 relations.
 * 
 * If a key name is ambiguous for a specific control class (e.g. a property has the same
 * name as an event), then this method prefers property, aggregation, association and
 * event in that order. To resolve such ambiguities, the keys can be prefixed with
 * <code>aggregation:</code>, <code>association:</code> or <code>event:</code>.
 * In that case the keys must be quoted due to the ':'.
 * 
 * Each subclass should document the set of supported names in its constructor documentation.
 * 
 * <b>Valid Values:</b>
 * 
 * <ul>
 * <li>for normal properties, the value has to be of the correct simple type (no type conversion occurs)
 * <li>for 0..1 aggregations, the value has to be an instance of the aggregated control or element type
 * <li>for 0..n aggregations, the value has to be an array of instances of the aggregated type
 * <li>for 0..1 associations, an instance of the associated type or an id (string) is accepted
 * <li>0..n associations are not supported yet
 * <li>for events either a function (event handler) is accepted or an array of length 2
 *     where the first element is a function and the 2nd element is an object to invoke the method on.
 * </ul>
 * 
 * Special aggregation <code>dependents</code> is connected to the lifecycle management and databinding,
 * but not rendered automatically and can be used for popups or other dependent controls or elements.
 * This allows the definition of popup controls in declarative views and enables propagation of model
 * and context information to them.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTooltip tooltip} : sap.ui.core.TooltipBase|string</li>
 * <li>{@link #getCustomData customData} : sap.ui.core.CustomData[]</li>
 * <li>{@link #getLayoutData layoutData} : sap.ui.core.LayoutData</li>
 * <li>{@link #getDependents dependents} : sap.ui.core.Element[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control; generated automatically if no non-empty id is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] optional map/JSON-object with initial property values, aggregated objects etc. for the new element
 * 
 * @class Base Class for Elements.
 * @extends sap.ui.base.ManagedObject
 * @version 1.48.4
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.Element = function(sId,mSettings) {};
/**
 * Returns the best suitable DOM node that represents this Element wrapped as jQuery object.
 * I.e. the element returned by {@link sap.ui.core.Element#getDomRef} is wrapped and returned.
 * 
 * If an ID suffix is given, the ID of this Element is concatenated with the suffix
 * (separated by a single dash) and the DOM node with that compound ID will be wrapped by jQuery.
 * This matches the UI5 naming convention for named inner DOM nodes of a control.
 * 
 * @param {string} [sSuffix] ID suffix to get a jQuery object for
 * @return {jQuery} The jQuery wrapped element's DOM reference
 * @protected
 * 
 */
sap.ui.core.Element.prototype.$ = function(sSuffix) { return null; };

/**
 * Registers the given event handler to change events of the screen width/closest media container width, based on the range set with the specified name.
 * 
 * @param fnFunction
 * @param oListener
 * @param sName
 * @private
 * @sap-restricted
 * 
 */
sap.ui.core.Element.prototype._attachMediaContainerWidthChange = function(fnFunction,oListener,sName) {  };

/**
 * Removes a previously attached event handler from the change events of the screen width/closest media container width.
 * @param fnFunction
 * @param oListener
 * @param sName
 * @private
 * @sap-restricted
 * 
 */
sap.ui.core.Element.prototype._detachMediaContainerWidthChange = function(fnFunction,oListener,sName) {  };

/**
 * Returns the current media range of the Device or the closest media container
 * 
 * @param sName
 * @returns {map}
 * @private
 * @sap-restricted
 * 
 */
sap.ui.core.Element.prototype._getCurrentMediaContainerRange = function(sName) { return null; };

/**
 * Returns the contextual width of an element, if set, or <code>undefined</code> otherwise
 * @returns {*}
 * @private
 * @sap-restricted
 * 
 */
sap.ui.core.Element.prototype._getMediaContainerWidth = function() { return null; };

/**
 * Adds some customData to the aggregation {@link #getCustomData customData}.
 * @param {sap.ui.core.CustomData}
 *            oCustomData the customData to add; if empty, nothing is inserted
 * @returns {sap.ui.core.Element} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.addCustomData = function(oCustomData) { return new sap.ui.core.Element(); };

/**
 * Adds some dependent to the aggregation {@link #getDependents dependents}.
 * @param {sap.ui.core.Element}
 *            oDependent the dependent to add; if empty, nothing is inserted
 * @returns {sap.ui.core.Element} Reference to <code>this</code> in order to allow method chaining
 * @since 1.19
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.addDependent = function(oDependent) { return new sap.ui.core.Element(); };

/**
 * Adds a delegate that listens to the events that are fired on this element (as opposed to events which are fired BY this element).
 * 
 * When this element is cloned, the same delegate will be added to all clones. This behavior is well-suited for applications which want to add delegates
 * that also work with templates in aggregation bindings.
 * For control development the internal "addDelegate" method which does not clone delegates by default may be more suitable, as typically each control instance takes care of its own delegates.
 * 
 * To avoid double registrations, all registrations of the given delegate are first
 * removed and then the delegate is added.
 * 
 * <strong>Important:</strong> If event delegates were added the delegate will still be called even if
 * the event was processed and/or cancelled via <code>preventDefault</code> by the Element or another event delegate.
 * <code>preventDefault</code> only prevents the event from bubbling.
 * It should be checked e.g. in the event delegate's listener whether an Element is still enabled via <code>getEnabled</code>.
 * Additionally there might be other things that delegates need to check depending on the event
 * (e.g. not adding a key twice to an output string etc.).
 * 
 * @param {object} oDelegate the delegate object
 * @param {object} [oThis] if given, this object will be the "this" context in the listener methods; default is the delegate object itself
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @since 1.9.0
 * @public
 * 
 */
sap.ui.core.Element.prototype.addEventDelegate = function(oDelegate,oThis) { return new sap.ui.core.Element(); };

/**
 * Applies the focus info.
 * 
 * To be overwritten by the specific control method.
 * 
 * @param {object} oFocusInfo
 * @protected
 * 
 */
sap.ui.core.Element.prototype.applyFocusInfo = function(oFocusInfo) {  };

/**
 * Bind the object to the referenced entity in the model, which is used as the binding context
 * to resolve bound properties or aggregations of the object itself and all of its children
 * relatively to the given path.
 * If a relative binding path is used, this will be applied whenever the parent context changes.
 * There is no difference between {@link sap.ui.core.Element#bindElement} and {@link sap.ui.base.ManagedObject#bindObject}.
 * @param {string|object} vPath the binding path or an object with more detailed binding options
 * @param {string} vPath.path the binding path
 * @param {object} [vPath.parameters] map of additional parameters for this binding
 * @param {string} [vPath.model] name of the model
 * @param {object} [vPath.events] map of event listeners for the binding events
 * @param {object} [mParameters] map of additional parameters for this binding (only taken into account when vPath is a string in that case the properties described for vPath above are valid here).
 * The supported parameters are listed in the corresponding model-specific implementation of <code>sap.ui.model.ContextBinding</code>.
 * 
 * @return {sap.ui.core.Element} reference to the instance itself
 * @public
 * 
 */
sap.ui.core.Element.prototype.bindElement = function(vPath,mParameters) { return new sap.ui.core.Element(); };

/**
 * Create a clone of this Element.
 * 
 * Calls <code>ManagedObject#clone</code> and additionally clones event delegates.
 * 
 * @param {string} [sIdSuffix] Suffix to be appended to the cloned element ID
 * @param {string[]} [aLocalIds] Array of local IDs within the cloned hierarchy (internally used)
 * @return {sap.ui.base.ManagedObject} reference to the newly created clone
 * @protected
 * 
 */
sap.ui.core.Element.prototype.clone = function(sIdSuffix,aLocalIds) { return new sap.ui.base.ManagedObject(); };

/**
 * Creates a new Element from the given data.
 * 
 * If <code>vData</code> is an Element already, that element is returned.
 * If <code>vData</code> is an object (literal), then a new element is created with <code>vData</code> as settings.
 * The type of the element is either determined by a property named <code>Type</code> in the <code>vData</code> or
 * by a type information in the <code>oKeyInfo</code> object
 * @param {sap.ui.core.Element|object} vData Data to create the element from
 * @param {object} [oKeyInfo] An entity information (e.g. aggregation info)
 * @param {string} [oKeyInfo.type] Type info for the entity
 * @public
 * @static
 * @deprecated As of 1.44, use the more flexible {@link sap.ui.base.ManagedObject.create}.
 * 
 */
sap.ui.core.Element.create = function(vData,oKeyInfo) {  };

/**
 * Attaches custom data to an <code>Element</code> or retrieves attached data.
 * 
 * Usage:
 * <pre>
 *    data("myKey", myData)
 * </pre>
 * Attaches <code>myData</code> (which can be any JS data type, e.g. a number, a string, an object, or a function)
 * to this element, under the given key "myKey". If the key already exists,the value will be updated.
 * 
 * <pre>
 *    data("myKey", myData, writeToDom)
 * </pre>
 * Attaches <code>myData</code> to this element, under the given key "myKey" and (if <code>writeToDom</code>
 * is true) writes key and value to the HTML. If the key already exists,the value will be updated.
 * While <code>oValue</code> can be any JS data type to be attached, it must be a string to be also
 * written to DOM. The key must also be a valid HTML attribute name (it must conform to <code>sap.ui.core.ID</code>
 * and may contain no colon) and may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
 * 
 * <pre>
 *    data("myKey")
 * </pre>
 * Retrieves whatever data has been attached to this element (using the key "myKey") before
 * 
 * <pre>
 *    data("myKey", null)
 * </pre>
 * Removes whatever data has been attached to this element (using the key "myKey") before
 * 
 * <pre>
 *    data(null)
 * </pre>
 * Removes all data
 * 
 * <pre>
 *    data()
 * </pre>
 * Returns all data, as a map
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.data = function() {  };

/**
 * Creates metadata for a UI Element by extending the Object Metadata.
 * 
 * @param {string} sClassName name of the class to build the metadata for
 * @param {object} oStaticInfo static information used to build the metadata
 * @param {function} [fnMetaImpl] constructor to be used for the metadata
 * @return {object} the created metadata
 * @static
 * @public
 * @deprecated Since 1.3.1. Use the static <code>extend</code> method of the desired base class (e.g. {@link sap.ui.core.Element.extend})
 * 
 */
sap.ui.core.Element.defineClass = function(sClassName,oStaticInfo,fnMetaImpl) { return new Object(); };

/**
 * Cleans up the resources associated with this element and all its children.
 * 
 * After an element has been destroyed, it can no longer be used in the UI!
 * 
 * Applications should call this method if they don't need the element any longer.
 * 
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element is not marked for redraw
 * @public
 * 
 */
sap.ui.core.Element.prototype.destroy = function(bSuppressInvalidate) {  };

/**
 * Destroys all the customData in the aggregation {@link #getCustomData customData}.
 * @returns {sap.ui.core.Element} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.destroyCustomData = function() { return new sap.ui.core.Element(); };

/**
 * Destroys all the dependents in the aggregation {@link #getDependents dependents}.
 * @returns {sap.ui.core.Element} Reference to <code>this</code> in order to allow method chaining
 * @since 1.19
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.destroyDependents = function() { return new sap.ui.core.Element(); };

/**
 * Destroys the layoutData in the aggregation {@link #getLayoutData layoutData}.
 * @returns {sap.ui.core.Element} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.destroyLayoutData = function() { return new sap.ui.core.Element(); };

/**
 * Destroys the tooltip in the aggregation
 * named <code>tooltip</code>.
 * @return {sap.ui.core.Element} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Element.prototype.destroyTooltip = function() { return new sap.ui.core.Element(); };

/**
 * Allows the parent of a control to enhance the aria information during rendering.
 * 
 * This function is called by the RenderManager's writeAccessibilityState method
 * for the parent of the currently rendered control - if the parent implements it.
 * @param {sap.ui.core.Element} oElement the Control/Element for which aria properties are rendered
 * @param {object} mAriaProps map of aria properties keyed by there name (without prefix "aria-")
 * @return {object} map of enhanced aria properties
 * @protected
 * @abstract
 * 
 */
sap.ui.core.Element.prototype.enhanceAccessibilityState = function(oElement,mAriaProps) { return new Object(); };

/**
 * Cleans up the element instance before destruction.
 * 
 * Applications must not call this hook method directly, it is called by the framework
 * when the element is {@link #destroy destroyed}.
 * 
 * Subclasses of Element should override this hook to implement any necessary cleanup.
 * @protected
 * 
 */
sap.ui.core.Element.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.Element with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Element.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Searches and returns an array of child elements and controls which are
 * referenced within an aggregation or aggregations of child elements/controls.
 * This can be either done recursive or not.
 * 
 * <b>Take care: this operation might be expensive.</b>
 * @param {boolean}
 *          bRecursive true, if all nested children should be returned.
 * @return {sap.ui.core.Element[]} array of child elements and controls
 * @public
 * 
 */
sap.ui.core.Element.prototype.findElements = function(bRecursive) { return new Array(); };

/**
 * Fires the given event and notifies all listeners. Listeners must not change
 * the content of the event.
 * 
 * @param {string} sEventId the event id
 * @param {object} mParameters the parameter map
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Element.prototype.fireEvent = function(sEventId,mParameters) { return new sap.ui.core.Element(); };

/**
 * Sets the focus to the stored focus DOM reference
 * @public
 * 
 */
sap.ui.core.Element.prototype.focus = function() {  };

/**
 * Gets content of aggregation {@link #getCustomData customData}.
 * 
 * Custom Data, a data structure like a map containing arbitrary key value pairs.
 * 
 * @returns {sap.ui.core.CustomData[]}
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.getCustomData = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getDependents dependents}.
 * 
 * Dependents are not rendered, but their databinding context and lifecycle are bound to the aggregating Element.
 * 
 * @returns {sap.ui.core.Element[]}
 * @since 1.19
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.getDependents = function() { return new Array(); };

/**
 * Returns the best suitable DOM Element that represents this UI5 Element.
 * By default the DOM Element with the same ID as this Element is returned.
 * Subclasses should override this method if the lookup via id is not sufficient.
 * 
 * Note that such a DOM Element does not necessarily exist in all cases.
 * Some elements or controls might not have a DOM representation at all (e.g.
 * a naive FlowLayout) while others might not have one due to their current
 * state (e.g. an initial, not yet rendered control).
 * 
 * If an ID suffix is given, the ID of this Element is concatenated with the suffix
 * (separated by a single dash) and the DOM node with that compound ID will be returned.
 * This matches the UI5 naming convention for named inner DOM nodes of a control.
 * 
 * @param {string} [sSuffix] ID suffix to get the DOMRef for
 * @return {Element} The Element's DOM Element sub DOM Element or null
 * @protected
 * 
 */
sap.ui.core.Element.prototype.getDomRef = function(sSuffix) { return null; };

/**
 * Get the element binding object for a specific model
 * 
 * @param {string} sModelName the name of the model
 * @return {sap.ui.model.Binding} the element binding for the given model name
 * @public
 * 
 */
sap.ui.core.Element.prototype.getElementBinding = function(sModelName) { return new sap.ui.model.Binding(); };

/**
 * Returns the DOM Element that should get the focus.
 * 
 * To be overwritten by the specific control method.
 * 
 * @return {Element} Returns the DOM Element that should get the focus
 * @protected
 * 
 */
sap.ui.core.Element.prototype.getFocusDomRef = function() { return null; };

/**
 * Returns an object representing the serialized focus information
 * To be overwritten by the specific control method
 * @type object
 * @return an object representing the serialized focus information
 * @protected
 * 
 */
sap.ui.core.Element.prototype.getFocusInfo = function() { return new Object(); };

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 * 
 */
sap.ui.core.Element.prototype.getInterface = function() {  };

/**
 * Gets content of aggregation {@link #getLayoutData layoutData}.
 * 
 * Defines the layout constraints for this control when it is used inside a Layout.
 * LayoutData classes are typed classes and must match the embedding Layout.
 * See VariantLayoutData for aggregating multiple alternative LayoutData instances to a single Element.
 * 
 * @returns {sap.ui.core.LayoutData}
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.getLayoutData = function() { return new sap.ui.core.LayoutData(); };

/**
 * Returns the runtime metadata for this UI element.
 * 
 * When using the defineClass method, this function is automatically created and returns
 * a runtime representation of the design time metadata.
 * @return {object} runtime metadata
 * @public
 * 
 */
sap.ui.core.Element.prototype.getMetadata = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.ui.core.Element.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.Element.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the tooltip for this element if any or an undefined value.
 * The tooltip can either be a simple string or a subclass of
 * {@link sap.ui.core.TooltipBase}.
 * 
 * Callers that are only interested in tooltips of type string (e.g. to render
 * them as a <code>title</code> attribute), should call the convenience method
 * {@link #getTooltip_AsString} instead. If they want to get a tooltip text no
 * matter where it comes from (be it a string tooltip or the text from a TooltipBase
 * instance) then they could call {@link #getTooltip_Text} instead.
 * 
 * @return {string|sap.ui.core.TooltipBase} The tooltip for this Element.
 * @public
 * 
 */
sap.ui.core.Element.prototype.getTooltip = function() { return ""; };

/**
 * Returns the tooltip for this element but only if it is a simple string.
 * Otherwise an undefined value is returned.
 * 
 * @return {string} string tooltip or undefined
 * @public
 * 
 */
sap.ui.core.Element.prototype.getTooltip_AsString = function() { return ""; };

/**
 * Returns the main text for the current tooltip or undefined if there is no such text.
 * If the tooltip is an object derived from sap.ui.core.Tooltip, then the text property
 * of that object is returned. Otherwise the object itself is returned (either a string
 * or undefined or null).
 * 
 * @return {string} text of the current tooltip or undefined
 * @public
 * 
 */
sap.ui.core.Element.prototype.getTooltip_Text = function() { return ""; };

/**
 * Checks for the provided <code>sap.ui.core.CustomData</code> in the aggregation {@link #getCustomData customData}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.CustomData}
 *           oCustomData The customData whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.indexOfCustomData = function(oCustomData) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Element</code> in the aggregation {@link #getDependents dependents}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Element}
 *           oDependent The dependent whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * @since 1.19
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.indexOfDependent = function(oDependent) { return 0; };

/**
 * Initializes the element instance after creation.
 * 
 * Applications must not call this hook method directly, it is called by the framework
 * while the constructor of an element is executed.
 * 
 * Subclasses of Element should override this hook to implement any necessary initialization.
 * @protected
 * 
 */
sap.ui.core.Element.prototype.init = function() {  };

/**
 * Inserts a customData into the aggregation {@link #getCustomData customData}.
 * 
 * @param {sap.ui.core.CustomData}
 *            oCustomData the customData to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the customData should be inserted at; for
 *              a negative value of <code>iIndex</code>, the customData is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the customData is inserted at
 *              the last position
 * @returns {sap.ui.core.Element} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.insertCustomData = function(oCustomData,iIndex) { return new sap.ui.core.Element(); };

/**
 * Inserts a dependent into the aggregation {@link #getDependents dependents}.
 * 
 * @param {sap.ui.core.Element}
 *            oDependent the dependent to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the dependent should be inserted at; for
 *              a negative value of <code>iIndex</code>, the dependent is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the dependent is inserted at
 *              the last position
 * @returns {sap.ui.core.Element} Reference to <code>this</code> in order to allow method chaining
 * @since 1.19
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.insertDependent = function(oDependent,iIndex) { return new sap.ui.core.Element(); };

/**
 * This function either calls set[sPropertyName] or get[sPropertyName] with the specified property name
 * depending if an <code>oValue</code> is provided or not.
 * 
 * @param {string}  sPropertyName name of the property to set
 * @param {any}     [oValue] value to set the property to
 * @return {any|sap.ui.core.Element} Returns <code>this</code> to allow method chaining in case of setter and the property value in case of getter
 * @public
 * @deprecated Since 1.28.0 The contract of this method is not fully defined and its write capabilities overlap with applySettings
 * 
 */
sap.ui.core.Element.prototype.prop = function(sPropertyName,oValue) { return null; };

/**
 * Removes all the controls from the aggregation {@link #getCustomData customData}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.CustomData[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.removeAllCustomData = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getDependents dependents}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Element[]} An array of the removed elements (might be empty)
 * @since 1.19
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.removeAllDependents = function() { return new Array(); };

/**
 * Removes a customData from the aggregation {@link #getCustomData customData}.
 * 
 * @param {int | string | sap.ui.core.CustomData} vCustomData The customData to remove or its index or id
 * @returns {sap.ui.core.CustomData} The removed customData or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.removeCustomData = function(vCustomData) { return new sap.ui.core.CustomData(); };

/**
 * Removes a dependent from the aggregation {@link #getDependents dependents}.
 * 
 * @param {int | string | sap.ui.core.Element} vDependent The dependent to remove or its index or id
 * @returns {sap.ui.core.Element} The removed dependent or <code>null</code>
 * @since 1.19
 * 
 * @public
 * 
 */
sap.ui.core.Element.prototype.removeDependent = function(vDependent) { return new sap.ui.core.Element(); };

/**
 * Removes the given delegate from this element.
 * 
 * This method will remove all registrations of the given delegate, not only one.
 * 
 * @param {object} oDelegate the delegate object
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @since 1.9.0
 * @public
 * 
 */
sap.ui.core.Element.prototype.removeEventDelegate = function(oDelegate) { return new sap.ui.core.Element(); };

/**
 * This triggers immediate rerendering of its parent and thus of itself and its children.<br/> As <code>sap.ui.core.Element</code> "bubbles up" the
 * rerender, changes to child-<code>Elements</code> will also result in immediate rerendering of the whole sub tree.
 * @protected
 * 
 */
sap.ui.core.Element.prototype.rerender = function() {  };

/**
 * Sets the {@link sap.ui.core.LayoutData} defining the layout constraints
 * for this control when it is used inside a layout.
 * 
 * @param {sap.ui.core.LayoutData} oLayoutData
 * @public
 * 
 */
sap.ui.core.Element.prototype.setLayoutData = function(oLayoutData) {  };

/**
 * Sets a new tooltip for this object. The tooltip can either be a simple string
 * (which in most cases will be rendered as the <code>title</code> attribute of this
 * Element) or an instance of {@link sap.ui.core.TooltipBase}.
 * 
 * If a new tooltip is set, any previously set tooltip is deactivated.
 * 
 * @param {string|sap.ui.core.TooltipBase} vTooltip
 * @public
 * 
 */
sap.ui.core.Element.prototype.setTooltip = function(vTooltip) {  };

/**
 * Returns a simple string representation of this element.
 * 
 * Mainly useful for tracing purposes.
 * @public
 * @return {string} a string description of this element
 * 
 */
sap.ui.core.Element.prototype.toString = function() { return ""; };

/**
 * Removes the defined binding context of this object, all bindings will now resolve
 * relative to the parent context again.
 * 
 * @param {string} sModelName
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 * 
 */
sap.ui.core.Element.prototype.unbindElement = function(sModelName) { return new sap.ui.base.ManagedObject(); };


// ---- sap.ui.core.EnabledPropagator --------------------------------------------------------------------------

/**
 * @class Helper Class for enhancement of a Control with propagation of enabled property.
 * 
 * <b>This constructor should be applied to the prototype of a control</b>
 * 
 * Example:
 * <code>
 * sap.ui.core.EnabledPropagator.call(<i>Some-Control</i>.prototype, <i>Default-value, ...</i>);
 * </code>
 * e.g.
 * <code>
 * sap.ui.core.EnabledPropagator.call(sap.ui.commons.Button.prototype);
 * </code>
 * @version 1.48.4
 * @param {boolean} [bDefault=true] the value that should be used as default value for the enhancement of the control.
 * @param {boolean} [bLegacy=false] whether the introduced property should use the old name 'Enabled'
 * @public
 * 
 */
sap.ui.core.EnabledPropagator = function(bDefault,bLegacy) {};

// ---- sap.ui.core.EventBus --------------------------------------------------------------------------

/**
 * Creates an instance of EventBus.
 * 
 * 
 * @class Provides eventing capabilities for applications like firing events and attaching or detaching event
 *        handlers for events which are notified when events are fired.
 * 
 * @extends sap.ui.base.Object
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.8.0
 * 
 */
sap.ui.core.EventBus = function() {};
/**
 * Cleans up the internal structures and removes all event handlers.
 * 
 * The object must not be used anymore after destroy was called.
 * 
 * @see sap.ui.base.Object#destroy
 * @public
 * 
 */
sap.ui.core.EventBus.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.EventBus with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.EventBus.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.EventBus.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.EventBus.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Fires an event using the specified settings and notifies all attached event handlers.
 * 
 * @param {string}
 *            [sChannelId] The channel of the event to fire. If not given, the default channel is used. The channel <code>"sap.ui"</code> is
 *                         reserved by the UI5 framework. An application might listen to events on this channel but is not allowed
 *                         to publish its own events there.
 * @param {string}
 *            sEventId The identifier of the event to fire
 * @param {object}
 *            [oData] The parameters which should be carried by the event
 * @public
 * 
 */
sap.ui.core.EventBus.prototype.publish = function(sChannelId,sEventId,oData) {  };

/**
 * Attaches an event handler to the event with the given identifier on the given event channel.
 * 
 * @param {string}
 *            [sChannelId] The channel of the event to subscribe to. If not given, the default channel is used.
 *                         The channel <code>"sap.ui"</code> is reserved by the UI5 framework. An application might listen to
 *                         events on this channel but is not allowed to publish its own events there.
 * @param {string}
 *            sEventId The identifier of the event to listen for
 * @param {function}
 *            fnFunction The handler function to call when the event occurs. This function will be called in the context of the
 *                       <code>oListener</code> instance (if present) or on the event bus instance. The channel is provided as first argument of the handler, and
 *                       the event identifier is provided as the second argument. The parameter map carried by the event is provided as the third argument (if present).
 *                       Handlers must not change the content of this map.
 * @param {object}
 *            [oListener] The object that wants to be notified when the event occurs (<code>this</code> context within the
 *                        handler function). If it is not specified, the handler function is called in the context of the event bus.
 * @return {sap.ui.core.EventBus} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.EventBus.prototype.subscribe = function(sChannelId,sEventId,fnFunction,oListener) { return new sap.ui.core.EventBus(); };

/**
 * Attaches an event handler, called one time only, to the event with the given identifier on the given event channel.
 * 
 * When the event occurs, the handler function is called and the handler registration is automatically removed afterwards.
 * 
 * @param {string}
 *            [sChannelId] The channel of the event to subscribe to. If not given, the default channel is used.
 *                         The channel <code>"sap.ui"</code> is reserved by the UI5 framework. An application might listen to
 *                         events on this channel but is not allowed to publish its own events there.
 * @param {string}
 *            sEventId The identifier of the event to listen for
 * @param {function}
 *            fnFunction The handler function to call when the event occurs. This function will be called in the context of the
 *                       <code>oListener</code> instance (if present) or on the event bus instance. The channel is provided as first argument of the handler, and
 *                       the event identifier is provided as the second argument. The parameter map carried by the event is provided as the third argument (if present).
 *                       Handlers must not change the content of this map.
 * @param {object}
 *            [oListener] The object that wants to be notified when the event occurs (<code>this</code> context within the
 *                        handler function). If it is not specified, the handler function is called in the context of the event bus.
 * @since 1.32.0
 * @return {sap.ui.core.EventBus} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.EventBus.prototype.subscribeOnce = function(sChannelId,sEventId,fnFunction,oListener) { return new sap.ui.core.EventBus(); };

/**
 * Removes a previously subscribed event handler from the event with the given identifier on the given event channel.
 * 
 * The passed parameters must match those used for registration with {@link #subscribe } beforehand!
 * 
 * @param {string}
 *            [sChannelId] The channel of the event to unsubscribe from. If not given, the default channel is used.
 * @param {string}
 *            sEventId The identifier of the event to unsubscribe from
 * @param {function}
 *            fnFunction The handler function to unsubscribe from the event
 * @param {object}
 *            [oListener] The object that wanted to be notified when the event occurred
 * @return {sap.ui.core.EventBus} Returns <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.EventBus.prototype.unsubscribe = function(sChannelId,sEventId,fnFunction,oListener) { return new sap.ui.core.EventBus(); };


// ---- sap.ui.core.format --------------------------------------------------------------------------


// ---- sap.ui.core.format.DateFormat --------------------------------------------------------------------------

/**
 * Constructor for DateFormat - must not be used: To get a DateFormat instance, please use getDateInstance, getDateTimeInstance or getTimeInstance.
 * 
 * @class
 * The DateFormat is a static class for formatting and parsing single date and time values or date and time intervals according
 * to a set of format options.
 * 
 * Supported format options are pattern based on Unicode LDML Date Format notation.
 * If no pattern is specified a default pattern according to the locale settings is used.
 * 
 * @public
 * @see http://unicode.org/reports/tr35/#Date_Field_Symbol_Table
 * 
 */
sap.ui.core.format.DateFormat = function() {};
/**
 * Format a date according to the given format options.
 * 
 * @param {Date|Date[]} vJSDate the value to format
 * @param {boolean} bUTC whether to use UTC
 * @return {string} the formatted output value. If an invalid date is given, an empty string is returned.
 * @public
 * 
 */
sap.ui.core.format.DateFormat.prototype.format = function(vJSDate,bUTC) { return ""; };

/**
 * Get a date instance of the DateFormat, which can be used for formatting.
 * 
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {string} [oFormatOptions.format] @since 1.34.0 contains pattern symbols (e.g. "yMMMd" or "Hms") which will be converted into the pattern in the used locale, which matches the wanted symbols best.
 *  The symbols must be in canonical order, that is: Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w/W), Day-Of-Week (E/e/c), Day (d/D), Hour (h/H/k/K/j/J), Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x)
 *  See http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems
 * @param {string} [oFormatOptions.pattern] a data pattern in LDML format. It is not verified whether the pattern represents only a date.
 * @param {string} [oFormatOptions.style] can be either 'short, 'medium', 'long' or 'full'. If no pattern is given, a locale dependent default date pattern of that style is used from the LocaleData class.
 * @param {boolean} [oFormatOptions.strictParsing] if true, by parsing it is checked if the value is a valid date
 * @param {boolean} [oFormatOptions.relative] if true, the date is formatted relatively to todays date if it is within the given day range, e.g. "today", "yesterday", "in 5 days"
 * @param {int[]} [oFormatOptions.relativeRange] the day range used for relative formatting. If oFormatOptions.relatvieScale is set to default value 'day', the relativeRange is by default [-6, 6], which means only the last 6 days, today and the next 6 days are formatted relatively. Otherwise when oFormatOptions.relativeScale is set to 'auto', all dates are formatted relatively.
 * @param {string} [oFormatOptions.relativeScale="day"] if 'auto' is set, new relative time format is switched on for all Date/Time Instances. The relative scale is chosen depending on the difference between the given date and now.
 * @param {string} [oFormatOptions.relativeStyle="wide"] @since 1.32.10, 1.34.4 the style of the relative format. The valid values are "wide", "short", "narrow"
 * @param {boolean} [oFormatOptions.interval=false] @since 1.48.0 if true, the [format]{@link sap.ui.core.format.DateFormat#format} method expects an array with two dates as the first argument and formats them as interval. Further interval "Jan 10, 2008 - Jan 12, 2008" will be formatted as "Jan 10-12, 2008" if the 'format' option is set with necessary symbols.
 *   Otherwise the two given dates are formatted separately and concatenated with local dependent pattern.
 * @param {boolean} [oFormatOptions.UTC] if true, the date is formatted and parsed as UTC instead of the local timezone
 * @param {sap.ui.core.CalendarType} [oFormatOptions.calendarType] The calender type which is used to format and parse the date. This value is by default either set in configuration or calculated based on current locale.
 * @param {sap.ui.core.Locale} [oLocale] Locale to ask for locale specific texts/settings
 * @return {sap.ui.core.format.DateFormat} date instance of the DateFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.DateFormat.getDateInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.DateFormat(); };

/**
 * Get a datetime instance of the DateFormat, which can be used for formatting.
 * 
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {string} [oFormatOptions.format] @since 1.34.0 contains pattern symbols (e.g. "yMMMd" or "Hms") which will be converted into the pattern in the used locale, which matches the wanted symbols best.
 *  The symbols must be in canonical order, that is: Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w/W), Day-Of-Week (E/e/c), Day (d/D), Hour (h/H/k/K/j/J), Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x)
 *  See http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems
 * @param {string} [oFormatOptions.pattern] a datetime pattern in LDML format. It is not verified whether the pattern represents a full datetime.
 * @param {string} [oFormatOptions.style] can be either 'short, 'medium', 'long' or 'full'. For datetime you can also define mixed styles, separated with a slash, where the first part is the date style and the second part is the time style (e.g. "medium/short"). If no pattern is given, a locale dependent default datetime pattern of that style is used from the LocaleData class.
 * @param {boolean} [oFormatOptions.strictParsing] if true, by parsing it is checked if the value is a valid datetime
 * @param {boolean} [oFormatOptions.relative] if true, the date is formatted relatively to todays date if it is within the given day range, e.g. "today", "yesterday", "in 5 days"@param {boolean} [oFormatOptions.UTC] if true, the date is formatted and parsed as UTC instead of the local timezone
 * @param {int[]} [oFormatOptions.relativeRange] the day range used for relative formatting. If oFormatOptions.relatvieScale is set to default value 'day', the relativeRange is by default [-6, 6], which means only the last 6 days, today and the next 6 days are formatted relatively. Otherwise when oFormatOptions.relativeScale is set to 'auto', all dates are formatted relatively.
 * @param {string} [oFormatOptions.relativeScale="day"] if 'auto' is set, new relative time format is switched on for all Date/Time Instances. The relative scale is chosen depending on the difference between the given date and now.
 * @param {string} [oFormatOptions.relativeStyle="wide"] @since 1.32.10, 1.34.4 the style of the relative format. The valid values are "wide", "short", "narrow"
 * @param {boolean} [oFormatOptions.interval=false] @since 1.48.0 if true, the [format]{@link sap.ui.core.format.DateFormat#format} method expects an array with two dates as the first argument and formats them as interval. Further interval "Jan 10, 2008 - Jan 12, 2008" will be formatted as "Jan 10-12, 2008" if the 'format' option is set with necessary symbols.
 *   Otherwise the two given dates are formatted separately and concatenated with local dependent pattern.
 * @param {boolean} [oFormatOptions.UTC] if true, the date is formatted and parsed as UTC instead of the local timezone
 * @param {sap.ui.core.CalendarType} [oFormatOptions.calendarType] The calender type which is used to format and parse the date. This value is by default either set in configuration or calculated based on current locale.
 * @param {sap.ui.core.Locale} [oLocale] Locale to ask for locale specific texts/settings
 * @return {sap.ui.core.format.DateFormat} datetime instance of the DateFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.DateFormat.getDateTimeInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.DateFormat(); };

/**
 * Get a time instance of the DateFormat, which can be used for formatting.
 * 
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {string} [oFormatOptions.format] @since 1.34.0 contains pattern symbols (e.g. "yMMMd" or "Hms") which will be converted into the pattern in the used locale, which matches the wanted symbols best.
 *  The symbols must be in canonical order, that is: Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w/W), Day-Of-Week (E/e/c), Day (d/D), Hour (h/H/k/K/j/J), Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x)
 *  See http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems
 * @param {string} [oFormatOptions.pattern] a time pattern in LDML format. It is not verified whether the pattern only represents a time.
 * @param {string} [oFormatOptions.style] can be either 'short, 'medium', 'long' or 'full'. If no pattern is given, a locale dependent default time pattern of that style is used from the LocaleData class.
 * @param {boolean} [oFormatOptions.strictParsing] if true, by parsing it is checked if the value is a valid time
 * @param {boolean} [oFormatOptions.relative] if true, the date is formatted relatively to todays date if it is within the given day range, e.g. "today", "yesterday", "in 5 days"
 * @param {int[]} [oFormatOptions.relativeRange] the day range used for relative formatting. If oFormatOptions.relatvieScale is set to default value 'day', the relativeRange is by default [-6, 6], which means only the last 6 days, today and the next 6 days are formatted relatively. Otherwise when oFormatOptions.relativeScale is set to 'auto', all dates are formatted relatively.
 * @param {string} [oFormatOptions.relativeScale="day"] if 'auto' is set, new relative time format is switched on for all Date/Time Instances. The relative scale is chosen depending on the difference between the given date and now.
 * @param {string} [oFormatOptions.relativeStyle="wide"] @since 1.32.10, 1.34.4 the style of the relative format. The valid values are "wide", "short", "narrow"
 * @param {boolean} [oFormatOptions.interval=false] @since 1.48.0 if true, the [format]{@link sap.ui.core.format.DateFormat#format} method expects an array with two dates as the first argument and formats them as interval. Further interval "Jan 10, 2008 - Jan 12, 2008" will be formatted as "Jan 10-12, 2008" if the 'format' option is set with necessary symbols.
 *   Otherwise the two given dates are formatted separately and concatenated with local dependent pattern.
 * @param {boolean} [oFormatOptions.UTC] if true, the time is formatted and parsed as UTC instead of the local timezone
 * @param {sap.ui.core.CalendarType} [oFormatOptions.calendarType] The calender type which is used to format and parse the date. This value is by default either set in configuration or calculated based on current locale.
 * @param {sap.ui.core.Locale} [oLocale] Locale to ask for locale specific texts/settings
 * @return {sap.ui.core.format.DateFormat} time instance of the DateFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.DateFormat.getTimeInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.DateFormat(); };

/**
 * Parse a string which is formatted according to the given format options.
 * 
 * @param {string} sValue the string containing a formatted date/time value
 * @param {boolean} bUTC whether to use UTC, if no timezone is contained
 * @param {boolean} bStrict to use strict value check
 * @return {Date} the parsed value
 * @public
 * 
 */
sap.ui.core.format.DateFormat.prototype.parse = function(sValue,bUTC,bStrict) { return null; };


// ---- sap.ui.core.format.FileSizeFormat --------------------------------------------------------------------------

/**
 * Constructor for FileSizeFormat - must not be used: To get a FileSizeFormat instance, please use getInstance.
 * 
 * 
 * @class
 * The FileSizeFormat is a static class for formatting and parsing numeric file size values according
 * to a set of format options.
 * 
 * Supports the same options as {@link sap.ui.core.format.NumberFormat.getFloatInstance NumberFormat.getFloatInstance}
 * For format options which are not specified default values according to the type and locale settings are used.
 * 
 * Supported format options (additional to NumberFormat):
 * <ul>
 * <li>binaryFilesize: if true, base 2 is used: 1 Kibibyte = 1024 Byte, ... , otherwise base 10 is used: 1 Kilobyte = 1000 Byte (Default is false)</li>
 * </ul>
 * 
 * @public
 * @extends sap.ui.base.Object
 * 
 */
sap.ui.core.format.FileSizeFormat = function() {};
/**
 * Creates a new subclass of class sap.ui.core.format.FileSizeFormat with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.format.FileSizeFormat.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Format a filesize (in bytes) according to the given format options.
 * 
 * @param {number|string} oValue the number (or hex string) to format
 * @return {string} the formatted output value
 * @public
 * 
 */
sap.ui.core.format.FileSizeFormat.prototype.format = function(oValue) { return ""; };

/**
 * Get an instance of the FileSizeFormat, which can be used for formatting.
 * 
 * If no locale is given, the currently configured
 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
 * 
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {sap.ui.core.Locale} [oLocale] Locale to get the formatter for
 * @return {sap.ui.core.format.FileSizeFormat} instance of the FileSizeFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.FileSizeFormat.getInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.FileSizeFormat(); };

/**
 * Returns a metadata object for class sap.ui.core.format.FileSizeFormat.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.format.FileSizeFormat.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Parse a string which is formatted according to the given format options.
 * 
 * @param {string} sValue the string containing a formatted filesize value
 * @return {number} the parsed value in bytes
 * @public
 * 
 */
sap.ui.core.format.FileSizeFormat.prototype.parse = function(sValue) { return 0.0; };


// ---- sap.ui.core.format.NumberFormat --------------------------------------------------------------------------

/**
 * Constructor for NumberFormat - must not be used: To get a NumberFormat instance, please use getInstance, getFloatInstance or getIntegerInstance.
 * 
 * 
 * @class
 * The NumberFormat is a static class for formatting and parsing numeric values according
 * to a set of format options.
 * 
 * @public
 * @param {object} [oFormatOptions] The option object which support the following parameters. If no options is given, default values according to the type and locale settings are used.
 * @param {int} [oFormatOptions.minIntegerDigits] defines minimal number of non-decimal digits
 * @param {int} [oFormatOptions.maxIntegerDigits] defines maximum number of non-decimal digits
 * @param {int} [oFormatOptions.minFractionDigits] defines minimal number of decimal digits
 * @param {int} [oFormatOptions.maxFractionDigits] defines maximum number of decimal digits
 * @param {int} [oFormatOptions.decimals] defines the number of decimal digits
 * @param {int} [oFormatOptions.shortDecimals] defines the number of decimal in the shortified format string. If this isn't specified, the 'decimals' options is used
 * @param {int} [oFormatOptions.shortLimit] only use short number formatting for values above this limit
 * @param {int} [oFormatOptions.shortRefNumber] @since 1.40 specifies a number from which the scale factor for 'short' or 'long' style format is generated. The generated scale factor is
 *  used for all numbers which are formatted with this format instance. This option has effect only when the option 'style' is set to 'short' or 'long'. This option is by default set
 *  with undefined which means the scale factor is selected automatically for each number being formatted.
 * @param {boolean} [oFormatOptions.showScale=true] @since 1.40 specifies whether the scale factor is shown in the formatted number. This option takes effect only when the 'style' options is set to either 'short' or 'long'.
 * @param {int} [oFormatOptions.precision] defines the number precision, number of decimals is calculated dependent on the integer digits
 * @param {string} [oFormatOptions.pattern] CLDR number pattern which is used to format the number
 * @param {boolean} [oFormatOptions.groupingEnabled] defines whether grouping is enabled (show the grouping separators)
 * @param {string} [oFormatOptions.groupingSeparator] defines the used grouping separator
 * @param {int} [oFormatOptions.groupingSize] defines the grouping size in digits, the default is three
 * @param {int} [oFormatOptions.groupingBaseSize] defines the grouping base size in digits, in case it is different from the grouping size (e.g. indian grouping)
 * @param {string} [oFormatOptions.decimalSeparator] defines the used decimal separator
 * @param {string} [oFormatOptions.plusSign] defines the used plus symbol
 * @param {string} [oFormatOptions.minusSign] defines the used minus symbol
 * @param {boolean} [oFormatOptions.parseAsString] @since 1.28.2 defines whether to output string from parse function in order to keep the precision for big numbers. Numbers in scientific notation are parsed
 *  back to the standard notation. For example ".5e-3" is parsed to "0.0005".
 * @param {string} [oFormatOptions.style] defines the style of format. Valid values are 'short, 'long' or 'standard' (based on CLDR decimalFormat). Numbers are formatted into compact forms when it's set to
 * 'short' or 'long'. When this option is set, the default value of option 'precision' is set to 2. This can be changed by setting either min/maxFractionDigits, decimals, shortDecimals or precision option.
 * @param {sap.ui.core.format.NumberFormat.RoundingMode} [oFormatOptions.roundingMode] specifies a rounding behavior for discarding the digits after the maximum fraction digits
 *  defined by maxFractionDigits. Rounding will only be applied, if the passed value if of type number. This can be assigned by value in {@link sap.ui.core.format.NumberFormat.RoundingMode RoundingMode}
 *  or a function which will be used for rounding the number. The function is called with two parameters: the number and how many decimal digits should be reserved.
 * @param {boolean} [oFormatOptions.showMeasure] defines whether the measure according to the format is shown in the formatted string
 * @param {boolean} [oFormatOptions.currencyCode] defines whether the currency is shown as code in currency format. The currency symbol is displayed when this is set to false and there's symbol defined
 *  for the given currency code.
 * @param {string} [oFormatOptions.currencyContext] It can be set either with 'standard' (the default value) or with 'accounting' for an accounting specific currency display
 * @param {number} [oFormatOptions.emptyString=NaN] @since 1.30.0 defines what empty string is parsed as and what is formatted as empty string. The allowed values are only NaN, null or 0.
 *  The 'format' and 'parse' are done in a symmetric way which means when this parameter is set to NaN, empty string is parsed as NaN and NaN is formatted as empty string.
 * @extends sap.ui.base.Object
 * 
 */
sap.ui.core.format.NumberFormat = function(oFormatOptions) {};
/**
 * Creates a new subclass of class sap.ui.core.format.NumberFormat with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.format.NumberFormat.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Format a number according to the given format options.
 * 
 * @param {number|array} oValue the number to format or an array which contains the number to format and the sMeasure parameter
 * @param {string} [sMeasure] a measure which has an impact on the formatting
 * @return {string} the formatted output value
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.prototype.format = function(oValue,sMeasure) { return ""; };

/**
 * Get a currency instance of the NumberFormat, which can be used for formatting.
 * 
 * If no locale is given, the currently configured
 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
 * 
 * <p>
 * This instance has HALF_AWAY_FROM_ZERO set as default rounding mode.
 * Please set the roundingMode property in oFormatOptions to change the
 * default value.
 * </p>
 * 
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {sap.ui.core.Locale} [oLocale] Locale to get the formatter for
 * @return {sap.ui.core.format.NumberFormat} integer instance of the NumberFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.getCurrencyInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.NumberFormat(); };

/**
 * Get a float instance of the NumberFormat, which can be used for formatting.
 * 
 * If no locale is given, the currently configured
 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
 * 
 * <p>
 * This instance has HALF_AWAY_FROM_ZERO set as default rounding mode.
 * Please set the roundingMode property in oFormatOptions to change the
 * default value.
 * </p>
 * 
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {sap.ui.core.Locale} [oLocale] Locale to get the formatter for
 * @return {sap.ui.core.format.NumberFormat} float instance of the NumberFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.getFloatInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.NumberFormat(); };

/**
 * Get an integer instance of the NumberFormat, which can be used for formatting.
 * 
 * If no locale is given, the currently configured
 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
 * 
 * <p>
 * This instance has TOWARDS_ZERO set as default rounding mode.
 * Please set the roundingMode property in oFormatOptions to change the
 * default value.
 * </p>
 * 
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {sap.ui.core.Locale} [oLocale] Locale to get the formatter for
 * @return {sap.ui.core.format.NumberFormat} integer instance of the NumberFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.getIntegerInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.NumberFormat(); };

/**
 * Returns a metadata object for class sap.ui.core.format.NumberFormat.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.format.NumberFormat.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Get a percent instance of the NumberFormat, which can be used for formatting.
 * 
 * If no locale is given, the currently configured
 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
 * 
 * <p>
 * This instance has HALF_AWAY_FROM_ZERO set as default rounding mode.
 * Please set the roundingMode property in oFormatOptions to change the
 * default value.
 * </p>
 * 
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {sap.ui.core.Locale} [oLocale] Locale to get the formatter for
 * @return {sap.ui.core.format.NumberFormat} integer instance of the NumberFormat
 * @static
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.getPercentInstance = function(oFormatOptions,oLocale) { return new sap.ui.core.format.NumberFormat(); };

/**
 * Parse a string which is formatted according to the given format options.
 * 
 * @param {string} sValue the string containing a formatted numeric value
 * @return {number|array} the parsed value or an array which contains the parsed value and the currency code (symbol) when the NumberFormat is a currency instance
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.prototype.parse = function(sValue) { return 0.0; };


// ---- sap.ui.core.format.NumberFormat.RoundingMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.format.NumberFormat.RoundingMode.toString = function() { return ""; };

// ---- sap.ui.core.Fragment --------------------------------------------------------------------------

/**
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * 
 * @classdesc Fragments support the definition of light-weight stand-alone UI control trees.
 * This class acts as factory which returns the UI control tree defined inside the Fragments. When used within declarative Views,
 * the Fragment content is imported and seamlessly integrated into the View.
 * 
 * Fragments are used similar as sap.ui.core.mvc.Views, but Fragments do not have a Controller on their own (they may know one, though),
 * they are not a Control, they are not part of the UI tree and they have no representation in HTML.
 * By default, in contrast to declarative Views, they do not do anything to guarantee ID uniqueness.
 * 
 * But like Views they can be defined in several Formats (XML, declarative HTML, JavaScript; support for other types can be plugged in),
 * the declaration syntax is the same as in declarative Views and the name and location of the Fragment files is similar to Views.
 * Controller methods can also be referenced in the declarations, but as Fragments do not have their own controllers,
 * this requires the Fragments to be used within a View which does have a controller.
 * That controller is used, then.
 * 
 * Do not call the Fragment constructor directly!
 * 
 * 
 * Use-cases for Fragments are e.g.:
 * - Modularization of UIs without fragmenting the controller structure
 * - Re-use of UI parts
 * - 100%-declarative definition of Views
 * 
 * @class
 * @extends sap.ui.base.ManagedObject
 * @version 1.48.4
 * @public
 * 
 */
sap.ui.core.Fragment = function() {};
/**
 * Returns an Element/Control by its ID in the context of the Fragment with the given ID
 * 
 * @param {string} sFragmentId
 * @param {string} sId
 * 
 * @return Element by its ID and Fragment ID
 * @public
 * @static
 * 
 */
sap.ui.core.Fragment.byId = function(sFragmentId,sId) {  };

/**
 * Returns the ID which a Control with the given ID in the context of the Fragment with the given ID would have
 * 
 * @param {string} sFragmentId
 * @param {string} sId
 * 
 * @return the prefixed ID
 * @public
 * @static
 * 
 */
sap.ui.core.Fragment.createId = function(sFragmentId,sId) {  };

/**
 * Creates a new subclass of class sap.ui.core.Fragment with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Fragment.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.Fragment.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.Fragment.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getType type}.
 * 
 * @returns {string} Value of property <code>type</code>
 * 
 * @public
 * 
 */
sap.ui.core.Fragment.prototype.getType = function() { return ""; };

/**
 * Registers a new Fragment type
 * 
 * @param {string} sType the Fragment type. Types "XML", "HTML" and JS" are built-in and always available.
 * @param {object} oFragmentImpl an object having a property "init" of type "function" which is called on Fragment instantiation with the settings map as argument
 * @public
 * 
 */
sap.ui.core.Fragment.registerType = function(sType,oFragmentImpl) {  };

/**
 * Sets a new value for property {@link #getType type}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sType New value for property <code>type</code>
 * @returns {sap.ui.core.Fragment} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Fragment.prototype.setType = function(sType) { return new sap.ui.core.Fragment(); };


// ---- sap.ui.core.History --------------------------------------------------------------------------

/**
 * Creates an instance of the History.
 * 
 * Attention: The Web Storage API which is used by this class stores the data on the client.
 * Therefore do not use this API for confidential information.
 * 
 * 
 * @class History handles the history of certain controls (e.g. sap.ui.commons.SearchField).
 * 
 * @param {string} sId id for the history
 * @param {object} [mSettings] optional map/JSON-object with additional settings
 * 
 * @extends sap.ui.base.Object
 * @version 1.48.4
 * @constructor
 * @protected
 * 
 */
sap.ui.core.History = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.History with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.History.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.History.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.History.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.HorizontalAlign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.HorizontalAlign.toString = function() { return ""; };

// ---- sap.ui.core.HTML --------------------------------------------------------------------------

/**
 * Constructor for a new HTML.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContent content} : string</li>
 * <li>{@link #getPreferDOM preferDOM} : boolean (default: true)</li>
 * <li>{@link #getSanitizeContent sanitizeContent} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Embeds standard HTML in an SAPUI5 control tree.
 * 
 * Security Hint: By default, the HTML content (property 'content') is not sanitized and therefore
 * open to XSS attacks. Applications that want to show user defined input in an HTML control, should
 * either sanitize the content on their own or activate automatic sanitizing through the
 * {@link #setSanitizeContent sanitizeContent} property.
 * 
 * Although this control inherits the <code>tooltip</code> aggregation/property and the
 * <code>hasStyleClass</code>, <code>addStyleClass</code>, <code>removeStyleClass</code> and
 * <code>toggleStyleClass</code> methods from its base class, it doesn't support them.
 * Instead, the defined HTML content can contain a tooltip (title attribute) or custom CSS classes.
 * 
 * For further hints about usage restrictions for this control, see also the documentation of the
 * <code>content</code> property.
 * 
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.HTML = function(sId,mSettings) {};
/**
 * Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.
 * 
 * When the control doesn't have string content and no preserved DOM existed for this control,
 * then this event will fire, but there won't be a DOM node for this control.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {boolean} oControlEvent.getParameters.isPreservedDOM Whether the current DOM of the control has been preserved (true) or not (e.g.
 * rendered from content property or it is an empty HTML control).
 * @public
 * 
 */
sap.ui.core.HTML.prototype.afterRendering = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterRendering afterRendering} event of this <code>sap.ui.core.HTML</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.core.HTML</code> itself.
 * 
 * Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.
 * 
 * When the control doesn't have string content and no preserved DOM existed for this control,
 * then this event will fire, but there won't be a DOM node for this control.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.HTML</code> itself
 * 
 * @returns {sap.ui.core.HTML} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.core.HTML.prototype.attachAfterRendering = function(oData,fnFunction,oListener) { return new sap.ui.core.HTML(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterRendering afterRendering} event of this <code>sap.ui.core.HTML</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.core.HTML} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.HTML.prototype.detachAfterRendering = function(fnFunction,oListener) { return new sap.ui.core.HTML(); };

/**
 * Creates a new subclass of class sap.ui.core.HTML with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.HTML.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterRendering afterRendering} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {boolean} [mParameters.isPreservedDOM] Whether the current DOM of the control has been preserved (true) or not (e.g.
 * rendered from content property or it is an empty HTML control).
 * 
 * @returns {sap.ui.core.HTML} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.core.HTML.prototype.fireAfterRendering = function(mParameters) { return new sap.ui.core.HTML(); };

/**
 * Gets current value of property {@link #getContent content}.
 * 
 * HTML content to be displayed, defined as a string.
 * 
 * The content is converted to DOM nodes with a call to <code>new jQuery(content)</code>, so any
 * restrictions for the jQuery constructor apply to the content of the HTML control as well.
 * 
 * Some of these restrictions (there might be others!) are:
 * <ul>
 * <li>the content must be enclosed in tags, pure text is not supported. </li>
 * <li>if the content contains script tags, they will be executed but they will not appear in the
 *     resulting DOM tree. When the contained code tries to find the corresponding script tag,
 *     it will fail.</li>
 * </ul>
 * 
 * Please consider to consult the jQuery documentation as well.
 * 
 * The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content
 * (e.g. <code>setContent("&lt;div/>&lt;div/>")</code>), but this is not a guaranteed feature.
 * The accepted content might be restricted to single root nodes in future versions.
 * To notify applications about this fact, a warning is written in the log when multiple root nodes are used.
 * 
 * When changing the content dynamically, ensure that the ID of the root node remains the same as the HTML
 * control's ID. Otherwise it cannot be guaranteed that certain lifecycle events take place.
 * 
 * @returns {string} Value of property <code>content</code>
 * 
 * @public
 * 
 */
sap.ui.core.HTML.prototype.getContent = function() { return ""; };

/**
 * @param {string} [sSuffix=''] Suffix of the Element to be retrieved or empty
 * @return {Element} The element's DOM reference or null
 * @public
 * 
 */
sap.ui.core.HTML.prototype.getDomRef = function(sSuffix) { return null; };

/**
 * Returns a metadata object for class sap.ui.core.HTML.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.HTML.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPreferDOM preferDOM}.
 * 
 * Whether existing DOM content is preferred over the given content string.
 * 
 * There are two scenarios where this flag is relevant (when set to true):
 * <ul>
 * <li>for the initial rendering: when an HTML control is added to a UIArea for the first time
 *     and if the root node of that UIArea contained DOM content with the same id as the HTML
 *     control, then that content will be used for rendering instead of any specified string
 *     content</li>
 * <li>any follow-up rendering: when an HTML control is rendered for the second or any later
 *     time and the preferDOM flag is set, then the DOM from the first rendering is preserved
 *     and not replaced by the string content</li>
 * </ul>
 * 
 * As preserving the existing DOM is the most common use case of the HTML control, the default value is true.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>preferDOM</code>
 * 
 * @public
 * 
 */
sap.ui.core.HTML.prototype.getPreferDOM = function() { return false; };

/**
 * Gets current value of property {@link #getSanitizeContent sanitizeContent}.
 * 
 * Whether to run the HTML sanitizer once the content (HTML markup) is applied or not.
 * 
 * To configure allowed URLs please use the whitelist API via jQuery.sap.addUrlWhitelist.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>sanitizeContent</code>
 * 
 * @public
 * 
 */
sap.ui.core.HTML.prototype.getSanitizeContent = function() { return false; };

/**
 * Gets current value of property {@link #getVisible visible}.
 * 
 * Specifies whether the control is visible. Invisible controls are not rendered.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>visible</code>
 * 
 * @public
 * 
 */
sap.ui.core.HTML.prototype.getVisible = function() { return false; };

/**
 * Sets a new value for property {@link #getContent content}.
 * 
 * HTML content to be displayed, defined as a string.
 * 
 * The content is converted to DOM nodes with a call to <code>new jQuery(content)</code>, so any
 * restrictions for the jQuery constructor apply to the content of the HTML control as well.
 * 
 * Some of these restrictions (there might be others!) are:
 * <ul>
 * <li>the content must be enclosed in tags, pure text is not supported. </li>
 * <li>if the content contains script tags, they will be executed but they will not appear in the
 *     resulting DOM tree. When the contained code tries to find the corresponding script tag,
 *     it will fail.</li>
 * </ul>
 * 
 * Please consider to consult the jQuery documentation as well.
 * 
 * The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content
 * (e.g. <code>setContent("&lt;div/>&lt;div/>")</code>), but this is not a guaranteed feature.
 * The accepted content might be restricted to single root nodes in future versions.
 * To notify applications about this fact, a warning is written in the log when multiple root nodes are used.
 * 
 * When changing the content dynamically, ensure that the ID of the root node remains the same as the HTML
 * control's ID. Otherwise it cannot be guaranteed that certain lifecycle events take place.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sContent New value for property <code>content</code>
 * @returns {sap.ui.core.HTML} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.HTML.prototype.setContent = function(sContent) { return new sap.ui.core.HTML(); };

/**
 * Sets some new DOM content for this HTML control. The content will replace the existing content
 * after the next rendering. Properties are not modified, but preferDOM should be set to true.
 * 
 * @param {Element} oDom the new DOM content
 * @return {sap.ui.core.HTML} <code>this</code> to facilitate method chaining
 * @public
 * 
 */
sap.ui.core.HTML.prototype.setDOMContent = function(oDom) { return new sap.ui.core.HTML(); };

/**
 * Sets a new value for property {@link #getPreferDOM preferDOM}.
 * 
 * Whether existing DOM content is preferred over the given content string.
 * 
 * There are two scenarios where this flag is relevant (when set to true):
 * <ul>
 * <li>for the initial rendering: when an HTML control is added to a UIArea for the first time
 *     and if the root node of that UIArea contained DOM content with the same id as the HTML
 *     control, then that content will be used for rendering instead of any specified string
 *     content</li>
 * <li>any follow-up rendering: when an HTML control is rendered for the second or any later
 *     time and the preferDOM flag is set, then the DOM from the first rendering is preserved
 *     and not replaced by the string content</li>
 * </ul>
 * 
 * As preserving the existing DOM is the most common use case of the HTML control, the default value is true.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bPreferDOM New value for property <code>preferDOM</code>
 * @returns {sap.ui.core.HTML} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.HTML.prototype.setPreferDOM = function(bPreferDOM) { return new sap.ui.core.HTML(); };

/**
 * Sets a new value for property {@link #getSanitizeContent sanitizeContent}.
 * 
 * Whether to run the HTML sanitizer once the content (HTML markup) is applied or not.
 * 
 * To configure allowed URLs please use the whitelist API via jQuery.sap.addUrlWhitelist.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bSanitizeContent New value for property <code>sanitizeContent</code>
 * @returns {sap.ui.core.HTML} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.HTML.prototype.setSanitizeContent = function(bSanitizeContent) { return new sap.ui.core.HTML(); };

/**
 * Sets a new value for property {@link #getVisible visible}.
 * 
 * Specifies whether the control is visible. Invisible controls are not rendered.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVisible New value for property <code>visible</code>
 * @returns {sap.ui.core.HTML} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.HTML.prototype.setVisible = function(bVisible) { return new sap.ui.core.HTML(); };


// ---- sap.ui.core.Icon --------------------------------------------------------------------------

/**
 * Constructor for a new Icon.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSrc src} : sap.ui.core.URI</li>
 * <li>{@link #getSize size} : sap.ui.core.CSSSize</li>
 * <li>{@link #getColor color} : string</li>
 * <li>{@link #getHoverColor hoverColor} : string</li>
 * <li>{@link #getActiveColor activeColor} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getBackgroundColor backgroundColor} : string</li>
 * <li>{@link #getHoverBackgroundColor hoverBackgroundColor} : string</li>
 * <li>{@link #getActiveBackgroundColor activeBackgroundColor} : string</li>
 * <li>{@link #getDecorative decorative} : boolean (default: true)</li>
 * <li>{@link #getUseIconTooltip useIconTooltip} : boolean (default: true)</li>
 * <li>{@link #getAlt alt} : string</li>
 * <li>{@link #getNoTabStop noTabStop} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Icon uses embedded font instead of pixel image. Comparing to image, Icon is easily scalable, color can be altered live and various effects can be added using css.
 * 
 * A set of built in Icons is available and they can be fetched by calling sap.ui.core.IconPool.getIconURI and set this value to the src property on the Icon.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.IFormContent
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.11.1
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.Icon = function(sId,mSettings) {};
/**
 * This event is fired when icon is pressed/activated by the user. When a handler is attached to this event, the Icon gets tab stop. If you want to disable this behavior, set the noTabStop property to true.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.Icon.prototype.press = function(oControlEvent) {  };

/**
 * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @param {sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.addAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.Icon(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:press press} event of this <code>sap.ui.core.Icon</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.core.Icon</code> itself.
 * 
 * This event is fired when icon is pressed/activated by the user. When a handler is attached to this event, the Icon gets tab stop. If you want to disable this behavior, set the noTabStop property to true.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.Icon</code> itself
 * 
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.core.Icon.prototype.attachPress = function(oData,fnFunction,oListener) { return new sap.ui.core.Icon(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:press press} event of this <code>sap.ui.core.Icon</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.detachPress = function(fnFunction,oListener) { return new sap.ui.core.Icon(); };

/**
 * Creates a new subclass of class sap.ui.core.Icon with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Icon.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:press press} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Icon.prototype.firePress = function(mParameters) { return new sap.ui.core.Icon(); };

/**
 * @see sap.ui.core.Control#getAccessibilityInfo
 * @protected
 * 
 */
sap.ui.core.Icon.prototype.getAccessibilityInfo = function() {  };

/**
 * Gets current value of property {@link #getActiveBackgroundColor activeBackgroundColor}.
 * 
 * Background color for Icon in active state.
 * 
 * @returns {string} Value of property <code>activeBackgroundColor</code>
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getActiveBackgroundColor = function() { return ""; };

/**
 * Gets current value of property {@link #getActiveColor activeColor}.
 * 
 * This color is shown when icon is pressed/activated by the user.
 * 
 * @returns {string} Value of property <code>activeColor</code>
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getActiveColor = function() { return ""; };

/**
 * Gets current value of property {@link #getAlt alt}.
 * 
 * This defines the alternative text which is used for outputting the aria-label attribute on the DOM.
 * 
 * @returns {string} Value of property <code>alt</code>
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getAlt = function() { return ""; };

/**
 * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.
 * 
 * @returns {sap.ui.core.ID[]}
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getAriaLabelledBy = function() { return new Array(); };

/**
 * Gets current value of property {@link #getBackgroundColor backgroundColor}.
 * 
 * Background color of the Icon in normal state.
 * 
 * @returns {string} Value of property <code>backgroundColor</code>
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getBackgroundColor = function() { return ""; };

/**
 * Gets current value of property {@link #getColor color}.
 * 
 * The color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.
 * 
 * @returns {string} Value of property <code>color</code>
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getColor = function() { return ""; };

/**
 * Gets current value of property {@link #getDecorative decorative}.
 * 
 * A decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Tab stop isn't affected by this property anymore and it's now controlled by the existence of press event handler and the noTabStop property.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>decorative</code>
 * @since 1.16.4
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getDecorative = function() { return false; };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * This is the height of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getHoverBackgroundColor hoverBackgroundColor}.
 * 
 * Background color for Icon in hover state. This property has no visual effect when run on mobile device.
 * 
 * @returns {string} Value of property <code>hoverBackgroundColor</code>
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getHoverBackgroundColor = function() { return ""; };

/**
 * Gets current value of property {@link #getHoverColor hoverColor}.
 * 
 * This color is shown when icon is hovered. This property has no visual effect when run on mobile device.
 * 
 * @returns {string} Value of property <code>hoverColor</code>
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getHoverColor = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.Icon.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.Icon.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getNoTabStop noTabStop}.
 * 
 * Defines whether the tab stop of icon is controlled by the existence of press event handler. When it's set to false, Icon control has tab stop when press event handler is attached.
 * If it's set to true, Icon control never has tab stop no matter whether press event handler exists or not.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>noTabStop</code>
 * @since 1.30.1
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getNoTabStop = function() { return false; };

/**
 * Gets current value of property {@link #getSize size}.
 * 
 * Since Icon uses font, this property will be applied to the css font-size property on the rendered DOM element.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>size</code>
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getSrc src}.
 * 
 * This property should be set by the return value of calling sap.ui.core.IconPool.getIconURI with an Icon name parameter and an optional collection parameter which is required when using application extended Icons. A list of standard FontIcon is available here.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>src</code>
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getSrc = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getUseIconTooltip useIconTooltip}.
 * 
 * Decides whether a default Icon tooltip should be used if no tooltip is set.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>useIconTooltip</code>
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getUseIconTooltip = function() { return false; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * This is the width of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @returns {sap.ui.core.ID[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.removeAllAriaLabelledBy = function() { return new Array(); };

/**
 * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
 * @param {int | sap.ui.core.ID | sap.ui.core.Control} vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
 * @returns {sap.ui.core.ID} The removed ariaLabelledBy or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.removeAriaLabelledBy = function(vAriaLabelledBy) { return new sap.ui.core.ID(); };

/**
 * Sets a new value for property {@link #getActiveBackgroundColor activeBackgroundColor}.
 * 
 * Background color for Icon in active state.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sActiveBackgroundColor New value for property <code>activeBackgroundColor</code>
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setActiveBackgroundColor = function(sActiveBackgroundColor) { return new sap.ui.core.Icon(); };

/**
 * Sets a new value for property {@link #getActiveColor activeColor}.
 * 
 * This color is shown when icon is pressed/activated by the user.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sActiveColor New value for property <code>activeColor</code>
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setActiveColor = function(sActiveColor) { return new sap.ui.core.Icon(); };

/**
 * Sets a new value for property {@link #getAlt alt}.
 * 
 * This defines the alternative text which is used for outputting the aria-label attribute on the DOM.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sAlt New value for property <code>alt</code>
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setAlt = function(sAlt) { return new sap.ui.core.Icon(); };

/**
 * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
 * 
 * Background color of the Icon in normal state.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sBackgroundColor New value for property <code>backgroundColor</code>
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setBackgroundColor = function(sBackgroundColor) { return new sap.ui.core.Icon(); };

/**
 * Sets a new value for property {@link #getColor color}.
 * 
 * The color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sColor New value for property <code>color</code>
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setColor = function(sColor) { return new sap.ui.core.Icon(); };

/**
 * Sets a new value for property {@link #getDecorative decorative}.
 * 
 * A decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Tab stop isn't affected by this property anymore and it's now controlled by the existence of press event handler and the noTabStop property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bDecorative New value for property <code>decorative</code>
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * @since 1.16.4
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setDecorative = function(bDecorative) { return new sap.ui.core.Icon(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * This is the height of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setHeight = function(sHeight) { return new sap.ui.core.Icon(); };

/**
 * Sets a new value for property {@link #getHoverBackgroundColor hoverBackgroundColor}.
 * 
 * Background color for Icon in hover state. This property has no visual effect when run on mobile device.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sHoverBackgroundColor New value for property <code>hoverBackgroundColor</code>
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setHoverBackgroundColor = function(sHoverBackgroundColor) { return new sap.ui.core.Icon(); };

/**
 * Sets a new value for property {@link #getHoverColor hoverColor}.
 * 
 * This color is shown when icon is hovered. This property has no visual effect when run on mobile device.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sHoverColor New value for property <code>hoverColor</code>
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setHoverColor = function(sHoverColor) { return new sap.ui.core.Icon(); };

/**
 * Sets a new value for property {@link #getNoTabStop noTabStop}.
 * 
 * Defines whether the tab stop of icon is controlled by the existence of press event handler. When it's set to false, Icon control has tab stop when press event handler is attached.
 * If it's set to true, Icon control never has tab stop no matter whether press event handler exists or not.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bNoTabStop New value for property <code>noTabStop</code>
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30.1
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setNoTabStop = function(bNoTabStop) { return new sap.ui.core.Icon(); };

/**
 * Sets a new value for property {@link #getSize size}.
 * 
 * Since Icon uses font, this property will be applied to the css font-size property on the rendered DOM element.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sSize New value for property <code>size</code>
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setSize = function(sSize) { return new sap.ui.core.Icon(); };

/**
 * Sets a new value for property {@link #getSrc src}.
 * 
 * This property should be set by the return value of calling sap.ui.core.IconPool.getIconURI with an Icon name parameter and an optional collection parameter which is required when using application extended Icons. A list of standard FontIcon is available here.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sSrc New value for property <code>src</code>
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setSrc = function(sSrc) { return new sap.ui.core.Icon(); };

/**
 * Sets a new value for property {@link #getUseIconTooltip useIconTooltip}.
 * 
 * Decides whether a default Icon tooltip should be used if no tooltip is set.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bUseIconTooltip New value for property <code>useIconTooltip</code>
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * @since 1.30.0
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setUseIconTooltip = function(bUseIconTooltip) { return new sap.ui.core.Icon(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * This is the width of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.ui.core.Icon} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Icon.prototype.setWidth = function(sWidth) { return new sap.ui.core.Icon(); };


// ---- sap.ui.core.IconColor --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.IconColor.toString = function() { return ""; };

// ---- sap.ui.core.IconPool --------------------------------------------------------------------------

/**
 * Register an additional icon to the sap.ui.core.IconPool.
 * 
 * @param {string} iconName the name of the icon.
 * @param {string} collectionName the name of icon collection. The built in icons are with empty collectionName, so if additional icons need to be registered in IconPool, the collectionName can't be empty.
 * @param {object} iconInfo the icon info which contains the following properties:
 * @param {string} iconInfo.fontFamily is the name of the font when importing the font using @font-face in CSS
 * @param {string|string[]} iconInfo.content is the special hexadecimal code without the prefix, for example "e000" or several of them
 * @param {boolean} [iconInfo.overWrite=false] indicates if already registered icons should be overwritten when the same name and collection are given. The built in icons can never be overwritten.
 * @param {boolean} [iconInfo.suppressMirroring=false] indicates whether this icon should NOT be mirrored in RTL (right to left) mode.
 * @param {jQuery.sap.util.ResourceBundle} [iconInfo.resourceBundle] ResourceBundle to be used for translation. Key format: "Icon.<iconName>".
 * 
 * @return {object} the info object of the registered icon which has the name, collection, uri, fontFamily, content and suppressMirroring properties.
 * @static
 * @public
 * 
 * @memberof sap.ui.core.IconPool
 */
sap.ui.core.IconPool.addIcon = function(iconName,collectionName,iconInfo) { return new Object(); };

/**
 * Creates an instance of {@link sap.ui.core.Icon} if the given URI is an icon URI, otherwise the given constructor is called.
 * The given URI is set to the src property of the control.
 * 
 * @param {string|object} setting contains the properties which will be used to instantiate the returned control. It should contain at least a property named src. If it's given with a string type, it will be taken as the value of src property.
 * @param {function} constructor the constructor function which is called when the given URI isn't an icon URI
 * @return {sap.ui.core.Control} either an instance of sap.ui.core.Icon or instance created by calling the given constructor
 * @static
 * @public
 * 
 * @memberof sap.ui.core.IconPool
 */
sap.ui.core.IconPool.createControlByURI = function(setting,constructor) { return new sap.ui.core.Control(); };

/**
 * Returns all names of registered collections in IconPool
 * 
 * @return {array} An array contains all of the registered collections' names.
 * @static
 * @public
 * 
 * @memberof sap.ui.core.IconPool
 */
sap.ui.core.IconPool.getIconCollectionNames = function() { return null; };

/**
 * Returns the icon url based on the given mime type
 * 
 * @param {string} sMimeType the mime type of a file (e.g. "application/zip")
 * @return {string} the icon url (e.g. "sap-icon://attachment-zip-file")
 * @static
 * @public
 * @since 1.25.0
 * 
 * @memberof sap.ui.core.IconPool
 */
sap.ui.core.IconPool.getIconForMimeType = function(sMimeType) { return ""; };

/**
 * Returns an info object for the icon with the given <code>iconName</code> and <code>collectionName</code>.
 * 
 * Instead of giving name and collection, a complete icon-URI can be provided as <code>iconName</code>.
 * The method will determine name and collection from the URI, see {@link #.isIconURI IconPool.isIconURI}
 * for details.
 * 
 * The returned info object has the following properties:
 * <ul>
 * <li><code>string: name</code> Name of the icon</li>
 * <li><code>string: collection</code> Name of the collection that contains the icon or <code>undefined</code> in case of the default collection</li>
 * <li><code>string: uri</code> Icon URI that identifies the icon</li>
 * <li><code>string: fontFamily</code> CSS font family to use for this icon</li>
 * <li><code>string: content</code> Character sequence that represents the icon in the icon font</li>
 * <li><code>string: text</code> Alternative text describing the icon (optional, might be empty)</li>
 * <li><code>boolean: suppressMirroring</code> Whether the icon needs no mirroring in right-to-left mode</li>
 * </ul>
 * 
 * @param {string} iconName Name of the icon, must not be empty
 * @param {string} [collectionName] Name of the icon collection; to access built-in icons, omit the collection name
 * @return {object} Info object for the icon or <code>undefined</code> when the icon can't be found.
 * @static
 * @public
 * 
 * @memberof sap.ui.core.IconPool
 */
sap.ui.core.IconPool.getIconInfo = function(iconName,collectionName) { return new Object(); };

/**
 * Returns all name of icons that are registered under the given collection.
 * @param {string} collectionName the name of collection where icon names are retrieved.
 * @return {array} An array contains all of the registered icon names under the given collection.
 * @static
 * @public
 * 
 * @memberof sap.ui.core.IconPool
 */
sap.ui.core.IconPool.getIconNames = function(collectionName) { return null; };

/**
 * Returns the URI of the icon in the pool which has the given <code>iconName</code> and <code>collectionName</code>.
 * 
 * @param {string} iconName Name of the icon, must not be empty
 * @param {string} [collectionName] Name of the icon collection; to access built-in icons, omit the collection name
 * @return {string} URI of the icon or <code>undefined</code> if the icon can't be found in the IconPool
 * @static
 * @public
 * 
 * @memberof sap.ui.core.IconPool
 */
sap.ui.core.IconPool.getIconURI = function(iconName,collectionName) { return ""; };

/**
 * Returns whether the given <code>uri</code> is an icon URI.
 * 
 * A string is an icon URI when it can be parsed as a URI and when it has one of the two forms
 * <ul>
 * <li>sap-icon://collectionName/iconName</li>
 * <li>sap-icon://iconName</li>
 * </ul>
 * where collectionName and iconName must be non-empty.
 * 
 * @param {string} uri The URI to check
 * @return {boolean} Whether the URI matches the icon URI format
 * @static
 * @public
 * 
 * @memberof sap.ui.core.IconPool
 */
sap.ui.core.IconPool.isIconURI = function(uri) { return false; };


// ---- sap.ui.core.IContextMenu --------------------------------------------------------------------------


// ---- sap.ui.core.ID --------------------------------------------------------------------------


// ---- sap.ui.core.IFormContent --------------------------------------------------------------------------

/**
 * In the <code>Form</code> control all content controls are positioned on a grid cell base. By default
 * the controls use the full width of the used grid cell. But for some controls (like image controls),
 * this is not the desired behavior. In this case the control must keep its original width.
 * 
 * @return {boolean} true if the <code>Form</code> is not allowed to adjust the width of the control to use the cell's width
 * @since 1.48.0
 * @public
 * 
 */
sap.ui.core.IFormContent.getFormDoNotAdjustWidth = function() { return false; };


// ---- sap.ui.core.ImeMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.ImeMode.toString = function() { return ""; };

// ---- sap.ui.core.IntervalTrigger --------------------------------------------------------------------------

/**
 * Creates an instance of EventBus.
 * 
 * 
 * @class Provides a trigger that triggers in a set interval and calls all
 *        registered listeners. If the interval is <= 0 the trigger is
 *        switched off and won't trigger at all.
 * @param {int}
 *            iInterval is the interval the trigger should be used. If the
 *            trigger is >0 triggering starts/runs and if the interval is
 *            set to <=0 triggering stops.
 * 
 * @extends sap.ui.base.Object
 * @version 1.48.4
 * @constructor
 * @public
 * @since 1.11.0
 * 
 */
sap.ui.core.IntervalTrigger = function(iInterval) {};
/**
 * Adds a listener to the list that should be triggered.
 * 
 * @public
 * @param {function}
 *            fnFunction is the called function that should be called when
 *            the trigger want to trigger the listener.
 * @param {object}
 *            [oListener] that should be triggered.
 * 
 */
sap.ui.core.IntervalTrigger.prototype.addListener = function(fnFunction,oListener) {  };

/**
 * Destructor method for objects.
 * 
 * @public
 * 
 */
sap.ui.core.IntervalTrigger.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.IntervalTrigger with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.IntervalTrigger.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 * 
 */
sap.ui.core.IntervalTrigger.prototype.getInterface = function() {  };

/**
 * Returns a metadata object for class sap.ui.core.IntervalTrigger.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.IntervalTrigger.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Removes corresponding listener from list.
 * 
 * @public
 * @param {function}
 *            fnFunction is the previously registered function
 * @param {object}
 *            [oListener] that should be removed
 * 
 */
sap.ui.core.IntervalTrigger.prototype.removeListener = function(fnFunction,oListener) {  };

/**
 * Sets the trigger interval. If the value is >0 triggering will start if
 * there are any registered listeners. If the interval is set to <=0
 * triggering will stop.
 * 
 * @public
 * @param {int}
 *            iInterval sets the interval in milliseconds when a new
 *            triggering should occur.
 * 
 */
sap.ui.core.IntervalTrigger.prototype.setInterval = function(iInterval) {  };


// ---- sap.ui.core.InvisibleText --------------------------------------------------------------------------

/**
 * Constructor for a new InvisibleText.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: )</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * An InvisibleText is used to bring hidden texts to the UI for screen reader support. The hidden text can e.g. be referenced
 * in the ariaLabelledBy or ariaDescribedBy associations of other controls.
 * 
 * The inherited properties busy, busyIndicatorDelay and visible and the aggregation tooltip is not supported by this control.
 * 
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.27.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.InvisibleText = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.InvisibleText with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.InvisibleText.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.InvisibleText.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.InvisibleText.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * The text of the InvisibleText.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.ui.core.InvisibleText.prototype.getText = function() { return ""; };

/**
 * @return {sap.ui.core.InvisibleText} Returns <code>this</code> to allow method chaining
 * @public
 * @deprecated Local BusyIndicator is not supported by control.
 * 
 */
sap.ui.core.InvisibleText.prototype.setBusy = function() { return new sap.ui.core.InvisibleText(); };

/**
 * @return {sap.ui.core.InvisibleText} Returns <code>this</code> to allow method chaining
 * @public
 * @deprecated Local BusyIndicator is not supported by control.
 * 
 */
sap.ui.core.InvisibleText.prototype.setBusyIndicatorDelay = function() { return new sap.ui.core.InvisibleText(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * The text of the InvisibleText.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.ui.core.InvisibleText} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.InvisibleText.prototype.setText = function(sText) { return new sap.ui.core.InvisibleText(); };

/**
 * @return {sap.ui.core.InvisibleText} Returns <code>this</code> to allow method chaining
 * @public
 * @deprecated Tooltip is not supported by control.
 * 
 */
sap.ui.core.InvisibleText.prototype.setTooltip = function() { return new sap.ui.core.InvisibleText(); };

/**
 * @return {sap.ui.core.InvisibleText} Returns <code>this</code> to allow method chaining
 * @public
 * @deprecated Property visible is not supported by control.
 * 
 */
sap.ui.core.InvisibleText.prototype.setVisible = function() { return new sap.ui.core.InvisibleText(); };

/**
 * Adds <code>this</code> control into the static, hidden area UI area container.
 * 
 * @return {sap.ui.core.InvisibleText} Returns <code>this</code> to allow method chaining
 * @public
 * @see sap.ui.core.Control#placeAt
 * 
 */
sap.ui.core.InvisibleText.prototype.toStatic = function() { return new sap.ui.core.InvisibleText(); };


// ---- sap.ui.core.IShrinkable --------------------------------------------------------------------------


// ---- sap.ui.core.Item --------------------------------------------------------------------------

/**
 * Constructor for a new Item.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)</li>
 * <li>{@link #getKey key} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * A control base type.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.Item = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Item.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getEnabled enabled}.
 * 
 * Enabled items can be selected.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>enabled</code>
 * 
 * @public
 * 
 */
sap.ui.core.Item.prototype.getEnabled = function() { return false; };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * Can be used as input for subsequent actions.
 * 
 * @returns {string} Value of property <code>key</code>
 * 
 * @public
 * 
 */
sap.ui.core.Item.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.Item.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.Item.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * The text to be displayed for the item.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.ui.core.Item.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTextDirection textDirection}.
 * 
 * Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.
 * 
 * Default value is <code>Inherit</code>.
 * @returns {sap.ui.core.TextDirection} Value of property <code>textDirection</code>
 * 
 * @public
 * 
 */
sap.ui.core.Item.prototype.getTextDirection = function() { return new sap.ui.core.TextDirection(); };

/**
 * Sets a new value for property {@link #getEnabled enabled}.
 * 
 * Enabled items can be selected.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bEnabled New value for property <code>enabled</code>
 * @returns {sap.ui.core.Item} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Item.prototype.setEnabled = function(bEnabled) { return new sap.ui.core.Item(); };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * Can be used as input for subsequent actions.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.ui.core.Item} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Item.prototype.setKey = function(sKey) { return new sap.ui.core.Item(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * The text to be displayed for the item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.ui.core.Item} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Item.prototype.setText = function(sText) { return new sap.ui.core.Item(); };

/**
 * Sets a new value for property {@link #getTextDirection textDirection}.
 * 
 * Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Inherit</code>.
 * @param {sap.ui.core.TextDirection} sTextDirection New value for property <code>textDirection</code>
 * @returns {sap.ui.core.Item} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Item.prototype.setTextDirection = function(sTextDirection) { return new sap.ui.core.Item(); };


// ---- sap.ui.core.Label --------------------------------------------------------------------------


// ---- sap.ui.core.LabelEnablement --------------------------------------------------------------------------

/**
 * This function should be called on a label control to enrich it's functionality.
 * 
 * <b>Usage:</b>
 * The function can be called with a control prototype:
 * <code>
 * sap.ui.core.LabelEnablement.enrich(my.Label.prototype);
 * </code>
 * Or the function can be called on instance level in the init function of a label control:
 * <code>
 * my.Label.prototype.init: function(){
 *    sap.ui.core.LabelEnablement.enrich(this);
 * }
 * </code>
 * 
 * <b>Preconditions:</b>
 * The given control must implement the interface sap.ui.core.Label and have an association 'labelFor' with cardinality 0..1.
 * This function extends existing API functions. Ensure not to override this extensions AFTER calling this function.
 * 
 * <b>What does this function do?</b>
 * 
 * A mechanismn is added that ensures that a bidirectional reference between the label and it's labeled control is established:
 * The label references the labeled control via the html 'for' attribute (@see sap.ui.core.LabelEnablement#writeLabelForAttribute).
 * If the labeled control supports the aria-labelledby attribute. A reference to the label is added automatically.
 * 
 * In addition an alternative to apply a for reference without influencing the labelFor association of the API is applied (e.g. used by Form).
 * For this purpose the functions setAlternativeLabelFor and getLabelForRendering are added.
 * 
 * @param {sap.ui.core.Control} oControl the label control which should be enriched with further label functionality.
 * @throws Error if the given control cannot be enriched to violated preconditions (see above)
 * @protected
 * 
 * @memberof sap.ui.core.LabelEnablement
 */
sap.ui.core.LabelEnablement.enrich = function(oControl) {  };

/**
 * Returns an array of ids of the labels referencing the given element
 * 
 * @param {sap.ui.core.Element} oElement The element whose referencing labels should be returned
 * @returns {string[]} an array of ids of the labels referencing the given element
 * @public
 * 
 * @memberof sap.ui.core.LabelEnablement
 */
sap.ui.core.LabelEnablement.getReferencingLabels = function(oElement) { return new Array(); };

/**
 * Returns <code>true</code> when the given control is required (property 'required') or one of its referencing labels, <code>false</code> otherwise.
 * 
 * @param {sap.ui.core.Element} oElement The element which should be checked for its required state
 * @returns {boolean} <code>true</code> when the given control is required (property 'required') or one of its referencing labels, <code>false</code> otherwise
 * @public
 * @since 1.29.0
 * 
 * @memberof sap.ui.core.LabelEnablement
 */
sap.ui.core.LabelEnablement.isRequired = function(oElement) { return false; };

/**
 * Helper function for the label control to render the html 'for' attribute. This function should be called
 * at the desired location in the renderer code of the label control.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render-output-buffer.
 * @param {sap.ui.core.Label} oLabel The label for which the 'for' html attribute should be written to the render-output-buffer.
 * @protected
 * 
 * @memberof sap.ui.core.LabelEnablement
 */
sap.ui.core.LabelEnablement.writeLabelForAttribute = function(oRenderManager,oLabel) {  };


// ---- sap.ui.core.LayoutData --------------------------------------------------------------------------

/**
 * Constructor for a new LayoutData.
 * 
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * A layout data base type.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.LayoutData = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.LayoutData with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.LayoutData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.LayoutData.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.LayoutData.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.ListItem --------------------------------------------------------------------------

/**
 * Constructor for a new ListItem.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : string</li>
 * <li>{@link #getAdditionalText additionalText} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * An item that is used in lists or list-similar controls such as DropdownBox, for example.
 * The element foresees the usage of additional texts displayed in a second column.
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.ListItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.ListItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.ListItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getAdditionalText additionalText}.
 * 
 * Some additional text of type string, optionally to be displayed along with this item.
 * 
 * @returns {string} Value of property <code>additionalText</code>
 * 
 * @public
 * 
 */
sap.ui.core.ListItem.prototype.getAdditionalText = function() { return ""; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * The icon belonging to this list item instance.
 * This can be a URI to an image or an icon font URI.
 * 
 * @returns {string} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.ui.core.ListItem.prototype.getIcon = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.ListItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.ListItem.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sets a new value for property {@link #getAdditionalText additionalText}.
 * 
 * Some additional text of type string, optionally to be displayed along with this item.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sAdditionalText New value for property <code>additionalText</code>
 * @returns {sap.ui.core.ListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ListItem.prototype.setAdditionalText = function(sAdditionalText) { return new sap.ui.core.ListItem(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * The icon belonging to this list item instance.
 * This can be a URI to an image or an icon font URI.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIcon New value for property <code>icon</code>
 * @returns {sap.ui.core.ListItem} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ListItem.prototype.setIcon = function(sIcon) { return new sap.ui.core.ListItem(); };


// ---- sap.ui.core.LocalBusyIndicator --------------------------------------------------------------------------

/**
 * Constructor for a new LocalBusyIndicator.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100px)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100px)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The LocalBusyIndicator is a special version of the
 * BusyIndicator. This one doesn't block the whole screen - it just
 * blocks the corresponding control and puts a local animation over the
 * control. To use the functionality of this control the corresponding
 * control needs to be enabled via the 'LocalBusyIndicatorSupport'
 * accordingly to the ListBox control (see the init-function of the
 * ListBox).
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.11.0
 * @deprecated Since version 1.14.2.
 * The LocalBusyIndicator Control is not needed anymore by the new implementation of the LBI. Hence, it is not used anymore.
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.LocalBusyIndicator = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.LocalBusyIndicator with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.LocalBusyIndicator.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * This property is the height of the control that has to
 * be covered. With this height the position of the animation can be
 * properly set.
 * 
 * Default value is <code>100px</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.ui.core.LocalBusyIndicator.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.ui.core.LocalBusyIndicator.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.LocalBusyIndicator.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * This property is the width of the control that has to
 * be covered. With this width the position of the animation can be
 * properly set.
 * 
 * Default value is <code>100px</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.ui.core.LocalBusyIndicator.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * This property is the height of the control that has to
 * be covered. With this height the position of the animation can be
 * properly set.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100px</code>.
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.ui.core.LocalBusyIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.LocalBusyIndicator.prototype.setHeight = function(sHeight) { return new sap.ui.core.LocalBusyIndicator(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * This property is the width of the control that has to
 * be covered. With this width the position of the animation can be
 * properly set.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100px</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.ui.core.LocalBusyIndicator} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.LocalBusyIndicator.prototype.setWidth = function(sWidth) { return new sap.ui.core.LocalBusyIndicator(); };


// ---- sap.ui.core.Locale --------------------------------------------------------------------------

/**
 * Creates an instance of the Locale.
 * 
 * 
 * @class Locale represents a locale setting, consisting of a language, script, region, variants, extensions and private use section.
 * 
 * @param {string} sLocaleId the locale identifier, in format en-US or en_US.
 * 
 * @extends sap.ui.base.Object
 * @version 1.48.4
 * @constructor
 * @public
 * 
 */
sap.ui.core.Locale = function(sLocaleId) {};
/**
 * Creates a new subclass of class sap.ui.core.Locale with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Locale.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Get the locale extension as a single string or <code>null</code>.
 * 
 * The extension always consists of a singleton character (not 'x'),
 * a dash '-' and one or more extension token, each separated
 * again with a dash.
 * 
 * Use {@link #getExtensions} to get the individual extension tokens as an array.
 * 
 * @return {string} the extension
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getExtension = function() { return ""; };

/**
 * Get the locale extensions as an array of tokens.
 * 
 * The leading singleton and the separating dashes are not part of the result.
 * If there is no extensions section in the locale tag, an empty array is returned.
 * 
 * @return {string[]} the individual extension sections
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getExtensionSubtags = function() { return new Array(); };

/**
 * Get the locale language.
 * 
 * Note that the case might differ from the original script tag
 * (Lower case is enforced as recommended by BCP47/ISO639).
 * 
 * @return {string} the language code
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getLanguage = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.Locale.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.Locale.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Get the locale private use section or <code>null</code>.
 * 
 * @return {string} the private use section
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getPrivateUse = function() { return ""; };

/**
 * Get the locale private use section as an array of tokens.
 * 
 * The leading singleton and the separating dashes are not part of the result.
 * If there is no private use section in the locale tag, an empty array is returned.
 * 
 * @return {string[]} the tokens of the private use section
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getPrivateUseSubtags = function() { return new Array(); };

/**
 * Get the locale region or <code>null</code> if none was specified.
 * 
 * Note that the case might differ from the original script tag
 * (Upper case is enforced as recommended by BCP47/ISO3166-1).
 * 
 * @return {string} the ISO3166-1 region code (2-letter or 3-digits)
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getRegion = function() { return ""; };

/**
 * Best guess to get a proper SAP Logon Language for this locale.
 * 
 * Conversions taken into account:
 * <ul>
 * <li>use the language part only</li>
 * <li>convert old ISO639 codes to newer ones (e.g. 'iw' to 'he')</li>
 * <li>for Chinese, map 'Traditional Chinese' to SAP proprietary code 'zf'</li>
 * <li>map private extensions x-sap1q and x-sap2q to SAP pseudo languages '1Q' and '2Q'</li>
 * <li>remove ext. language sub tags</li>
 * <li>convert to uppercase</li>
 * </ul>
 * 
 * Note that the conversion also returns a result for languages that are not
 * supported by the default set of SAP languages. This method has no knowledge
 * about the concrete languages of any given backend system.
 * 
 * @return {string} a language code that should
 * @public
 * @since 1.17.0
 * @deprecated As of 1.44, use {@link sap.ui.core.Configuration#getSAPLogonLanguage} instead
 *   as that class allows to configure an SAP Logon language.
 * 
 */
sap.ui.core.Locale.prototype.getSAPLogonLanguage = function() { return ""; };

/**
 * Get the locale script or <code>null</code> if none was specified.
 * 
 * Note that the case might differ from the original language tag
 * (Upper case first letter and lower case reminder enforced as
 * recommended by BCP47/ISO15924)
 * 
 * @return {string} the script code or null
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getScript = function() { return ""; };

/**
 * Get the locale variants as a single string or <code>null</code>.
 * 
 * Multiple variants are separated by a dash '-'.
 * 
 * @return {string} the variant or null
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getVariant = function() { return ""; };

/**
 * Get the locale variants as an array of individual variants.
 * 
 * The separating dashes are not part of the result.
 * If there is no variant section in the locale tag, an empty array is returned.
 * 
 * @return {string[]} the individual variant sections
 * @public
 * 
 */
sap.ui.core.Locale.prototype.getVariantSubtags = function() { return new Array(); };


// ---- sap.ui.core.LocaleData --------------------------------------------------------------------------

/**
 * Creates an instance of LocaleData for the given locale.
 * 
 * 
 * @class Provides access to locale-specific data, like date formats, number formats, currencies, etc.
 * 
 * @param {sap.ui.core.Locale} oLocale the locale
 * 
 * @extends sap.ui.base.Object
 * @version 1.48.4
 * @public
 * 
 */
sap.ui.core.LocaleData = function(oLocale) {};
/**
 * Creates a new subclass of class sap.ui.core.LocaleData with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.LocaleData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the defined pattern for representing the calendar week number.
 * 
 * @param {string} sStyle the style of the pattern. It can only be either "wide" or "narrow".
 * @param {number} iWeekNumber the week number
 * @return {string} the week number string
 * 
 * @public
 * @since 1.32.0
 * 
 */
sap.ui.core.LocaleData.prototype.getCalendarWeek = function(sStyle,iWeekNumber) { return ""; };

/**
 * Get combined datetime pattern with given date and and time style.
 * 
 * @param {string} sDateStyle the required style for the date part
 * @param {string} sTimeStyle the required style for the time part
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {string} the combined datetime pattern
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getCombinedDateTimePattern = function(sDateStyle,sTimeStyle,sCalendarType) { return ""; };

/**
 * Get combined interval pattern using a given pattern and the fallback interval pattern.
 * 
 * If a skeleton based pattern is not available or not wanted, this method can be used to create an interval
 * pattern based on a given pattern, using the fallback interval pattern.
 * 
 * @param {string} sPattern the single date pattern to use within the interval pattern
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {string} the calculated interval pattern
 * @since 1.46
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getCombinedIntervalPattern = function(sPattern,sCalendarType) { return ""; };

/**
 * Returns the currency code which is corresponded with the given currency symbol.
 * 
 * @param {string} sCurrencySymbol The currency symbol which needs to be converted to currency code
 * @return {string} The corresponded currency code defined for the given currency symbol. The given currency symbol is returned if no currency code can be found by using the given currency symbol.
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.core.LocaleData.prototype.getCurrencyCodeBySymbol = function(sCurrencySymbol) { return ""; };

/**
 * Returns the number of digits of the specified currency.
 * 
 * @param {string} sCurrency ISO 4217 currency code
 * @returns {int} digits of the currency
 * @public
 * @since 1.21.1
 * 
 */
sap.ui.core.LocaleData.prototype.getCurrencyDigits = function(sCurrency) { return 0; };

/**
 * Get currency format pattern.
 * 
 * @param {string} sContext the context of the currency pattern (standard or accounting)
 * @returns {string} The pattern
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getCurrencyPattern = function(sContext) { return ""; };

/**
 * Returns the currency symbol for the specified currency, if no symbol is found the ISO 4217 currency code is returned.
 * 
 * @param {string} sCurrency ISO 4217 currency code
 * @returns {string} the currency symbol
 * @public
 * @since 1.21.1
 * 
 */
sap.ui.core.LocaleData.prototype.getCurrencySymbol = function(sCurrency) { return ""; };

/**
 * Get custom datetime pattern for a given skeleton format.
 * 
 * The format string does contain pattern symbols (e.g. "yMMMd" or "Hms") and will be converted into the pattern in the used
 * locale, which matches the wanted symbols best. The symbols must be in canonical order, that is:
 * Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w/W), Day-Of-Week (E/e/c), Day (d/D),
 * Hour (h/H/k/K/), Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x)
 * 
 * See http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems
 * 
 * @param {string} sSkeleton the wanted skeleton format for the datetime pattern
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {string} the best matching datetime pattern
 * @since 1.34
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getCustomDateTimePattern = function(sSkeleton,sCalendarType) { return ""; };

/**
 * Get interval pattern for a given skeleton format.
 * 
 * The format string does contain pattern symbols (e.g. "yMMMd" or "Hms") and will be converted into the pattern in the used
 * locale, which matches the wanted symbols best. The symbols must be in canonical order, that is:
 * Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w/W), Day-Of-Week (E/e/c), Day (d/D),
 * Hour (h/H/k/K/), Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x)
 * 
 * See http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems
 * 
 * @param {string} sSkeleton the wanted skeleton format for the datetime pattern
 * @param {string} sGreatestDiff the symbol matching the greatest difference in the two dates to format
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {string} the best matching interval pattern
 * @since 1.46
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getCustomIntervalPattern = function(sSkeleton,sGreatestDiff,sCalendarType) { return ""; };

/**
 * Get date pattern in format "short", "medium", "long" or "full".
 * 
 * @param {string} sStyle the required style for the date pattern
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {string} the selected date pattern
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getDatePattern = function(sStyle,sCalendarType) { return ""; };

/**
 * Get datetime pattern in style "short", "medium", "long" or "full".
 * 
 * @param {string} sStyle the required style for the datetime pattern
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {string} the selected datetime pattern
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getDateTimePattern = function(sStyle,sCalendarType) { return ""; };

/**
 * Get day periods in width "narrow", "abbreviated" or "wide".
 * 
 * @param {string} sWidth the required width for the day period names
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {array} array of day periods (AM, PM)
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getDayPeriods = function(sWidth,sCalendarType) { return null; };

/**
 * Get standalone day periods in width "narrow", "abbreviated" or "wide".
 * 
 * @param {string} sWidth the required width for the day period names
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {array} array of day periods (AM, PM)
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getDayPeriodsStandAlone = function(sWidth,sCalendarType) { return null; };

/**
 * Get day names in width "narrow", "abbreviated" or "wide".
 * 
 * @param {string} sWidth the required width for the day names
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {array} array of day names (starting with Sunday)
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getDays = function(sWidth,sCalendarType) { return null; };

/**
 * Get stand alone day names in width "narrow", "abbreviated" or "wide".
 * 
 * @param {string} sWidth the required width for the day names
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {array} array of day names (starting with Sunday)
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getDaysStandAlone = function(sWidth,sCalendarType) { return null; };

/**
 * Returns the short decimal formats (like 1K, 1M....).
 * 
 * @param {string} sStyle short or long
 * @param {string} sNumber 1000, 10000 ...
 * @param {string} sPlural one or other (if not exists other is used)
 * @returns {string} decimal format
 * @public
 * @since 1.25.0
 * 
 */
sap.ui.core.LocaleData.prototype.getDecimalFormat = function(sStyle,sNumber,sPlural) { return ""; };

/**
 * Get decimal format pattern.
 * 
 * @returns {string} The pattern
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getDecimalPattern = function() { return ""; };

/**
 * Returns the display name for a time unit (second, minute, hour, day, week, month, year).
 * 
 * @param {string} sType Type (second, minute, hour, day, week, month, year)
 * @param {string} [sStyle="wide"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
 * returns {string} display name
 * @public
 * @since 1.34.0
 * 
 */
sap.ui.core.LocaleData.prototype.getDisplayName = function(sType,sStyle) {  };

/**
 * Returns the map of era IDs to era dates.
 * 
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar
 * @return {array} the array of eras containing objects with either an _end or _start property with a date
 * @public
 * @since 1.32.0
 * 
 */
sap.ui.core.LocaleData.prototype.getEraDates = function(sCalendarType) { return null; };

/**
 * Returns array of eras.
 * 
 * @param {string} sWidth the style of the era name. It can be 'wide', 'abbreviated' or 'narrow'
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar
 * @return {array} the array of eras
 * @public
 * @since 1.32.0
 * 
 */
sap.ui.core.LocaleData.prototype.getEras = function(sWidth,sCalendarType) { return null; };

/**
 * Returns the day that usually is regarded as the first day
 * of a week in the current locale.
 * 
 * Days are encoded as integer where Sunday=0, Monday=1 etc.
 * 
 * All week data information in the CLDR is provided for territories (countries).
 * If the locale of this LocaleData doesn't contain country information (e.g. if it
 * contains only a language), then the "likelySubtag" information of the CLDR
 * is taken into account to guess the "most likely" territory for the locale.
 * 
 * @returns {int} first day of week
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getFirstDayOfWeek = function() { return 0; };

/**
 * Returns the interval format with the given Id (see CLDR documentation for valid Ids)
 * or the fallback format if no interval format with that Id is known.
 * 
 * The empty Id ("") might be used to retrieve the interval format fallback.
 * 
 * @param {string} sId Id of the interval format, e.g. "d-d"
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {string} interval format string with placeholders {0} and {1}
 * @public
 * @since 1.17.0
 * 
 */
sap.ui.core.LocaleData.prototype.getIntervalPattern = function(sId,sCalendarType) { return ""; };

/**
 * Get locale specific language names.
 * 
 * @returns {object} map of locale specific language names
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getLanguages = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.ui.core.LocaleData.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.LocaleData.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the required minimal number of days for the first week of a year.
 * 
 * This is the minimal number of days of the week which must be contained in the new year
 * for the week to become the first week of the year. Depending on the country, this
 * is just a single day (in the US) or at least 4 days (in most of Europe).
 * 
 * All week data information in the CLDR is provided for territories (countries).
 * If the locale of this LocaleData doesn't contain country information (e.g. if it
 * contains only a language), then the "likelySubtag" information of the CLDR
 * is taken into account to guess the "most likely" territory for the locale.
 * 
 * @returns {int} minimal number of days
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getMinimalDaysInFirstWeek = function() { return 0; };

/**
 * Get month names in width "narrow", "abbreviated" or "wide".
 * 
 * @param {string} sWidth the required width for the month names
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {array} array of month names (starting with January)
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getMonths = function(sWidth,sCalendarType) { return null; };

/**
 * Get stand alone month names in width "narrow", "abbreviated" or "wide".
 * 
 * @param {string} sWidth the required width for the month names
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {array} array of month names (starting with January)
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getMonthsStandAlone = function(sWidth,sCalendarType) { return null; };

/**
 * Get number symbol "decimal", "group", "plusSign", "minusSign", "percentSign".
 * 
 * @param {string} sType the required type of symbol
 * @returns {string} the selected number symbol
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getNumberSymbol = function(sType) { return ""; };

/**
 * Get orientation (left-to-right or right-to-left).
 * 
 * @returns {string} character orientation for this locale
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getOrientation = function() { return ""; };

/**
 * Get percent format pattern.
 * 
 * @returns {string} The pattern
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getPercentPattern = function() { return ""; };

/**
 * Returns the preferred calendar type for the current locale which exists in {@link sap.ui.core.CalendarType}
 * 
 * @returns {sap.ui.core.CalendarType} the preferred calendar type
 * @public
 * @since 1.28.6
 * 
 */
sap.ui.core.LocaleData.prototype.getPreferredCalendarType = function() { return new sap.ui.core.CalendarType(); };

/**
 * Returns the preferred hour pattern symbol (h for 12, H for 24 hours) for the current locale.
 * 
 * returns {string} the preferred hour symbol
 * @public
 * @since 1.34
 * 
 */
sap.ui.core.LocaleData.prototype.getPreferredHourSymbol = function() {  };

/**
 * Get quarter names in width "narrow", "abbreviated" or "wide".
 * 
 * @param {string} sWidth the required width for the quarter names
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {array} array of quarters
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getQuarters = function(sWidth,sCalendarType) { return null; };

/**
 * Get stand alone quarter names in width "narrow", "abbreviated" or "wide".
 * 
 * @param {string} sWidth the required width for the quarter names
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {array} array of quarters
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getQuartersStandAlone = function(sWidth,sCalendarType) { return null; };

/**
 * Returns the relative day resource pattern (like "Today", "Yesterday", "{0} days ago") based on the given
 * difference of days (0 means today, 1 means tommorrow, -1 means yesterday, ...).
 * 
 * @param {int} iDiff the difference in days
 * @param {string} [sStyle="wide"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
 * @returns {string} the relative day resource pattern
 * @public
 * @since 1.25.0
 * 
 */
sap.ui.core.LocaleData.prototype.getRelativeDay = function(iDiff,sStyle) { return ""; };

/**
 * Returns the relative resource pattern with unit 'hour' (like "in {0} hour(s)", "{0} hour(s) ago" under locale 'en') based on the given
 * difference value (positive value means in the future and negative value means in the past).
 * 
 * There's no pattern defined for 0 difference and the function returns null if 0 is given. In the 0 difference case, you can use the getRelativeMinute or getRelativeSecond
 * function to format the difference using unit 'minute' or 'second'.
 * 
 * @param {int} iDiff the difference in hours
 * @param {string} [sStyle="wide"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
 * @returns {string|null} the relative resource pattern in unit 'hour'. The method returns null if 0 is given as parameter.
 * @public
 * @since 1.31.0
 * 
 */
sap.ui.core.LocaleData.prototype.getRelativeHour = function(iDiff,sStyle) { return ""; };

/**
 * Returns the relative resource pattern with unit 'minute' (like "in {0} minute(s)", "{0} minute(s) ago" under locale 'en') based on the given
 * difference value (positive value means in the future and negative value means in the past).
 * 
 * There's no pattern defined for 0 difference and the function returns null if 0 is given. In the 0 difference case, you can use the getRelativeSecond
 * function to format the difference using unit 'second'.
 * 
 * @param {int} iDiff the difference in minutes
 * @param {string} [sStyle="wide"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
 * @returns {string|null} the relative resource pattern in unit 'minute'. The method returns null if 0 is given as parameter.
 * @public
 * @since 1.31.0
 * 
 */
sap.ui.core.LocaleData.prototype.getRelativeMinute = function(iDiff,sStyle) { return ""; };

/**
 * Returns the relative month resource pattern (like "This month", "Last month", "{0} months ago") based on the given
 * difference of months (0 means this month, 1 means next month, -1 means last month, ...).
 * 
 * @param {int} iDiff the difference in months
 * @param {string} [sStyle="wide"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
 * @returns {string} the relative month resource pattern
 * @public
 * @since 1.25.0
 * 
 */
sap.ui.core.LocaleData.prototype.getRelativeMonth = function(iDiff,sStyle) { return ""; };

/**
 * Returns the relative format pattern with given scale (year, month, week, ...) and difference value.
 * 
 * @param {string} sScale the scale the relative pattern is needed for
 * @param {int} iDiff the difference in the given scale unit
 * @param {boolean} [bFuture] whether a future or past pattern should be used
 * @param {string} [sStyle="wide"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
 * @returns {string} the relative format pattern
 * @public
 * @since 1.34
 * 
 */
sap.ui.core.LocaleData.prototype.getRelativePattern = function(sScale,iDiff,bFuture,sStyle) { return ""; };

/**
 * Returns relative time patterns for the given scales as an array of objects containing scale, value and pattern.
 * 
 * The array may contain the following values: "year", "month", "week", "day", "hour", "minute" and "second". If
 * no scales are given, patterns for all available scales will be returned.
 * 
 * The return array will contain objects looking like:
 * <pre>
 * {
 *     scale: "minute",
 *     sign: 1,
 *     pattern: "in {0} minutes"
 * }
 * </pre>
 * 
 * @param {string[]} aScales The scales for which the available patterns should be returned
 * @param {string} [sStyle="wide"] @since 1.32.10, 1.34.4 The style of the scale patterns. The valid values are "wide", "short" and "narrow".
 * @returns {object[]} An array of all relative time patterns
 * @public
 * @since 1.34
 * 
 */
sap.ui.core.LocaleData.prototype.getRelativePatterns = function(aScales,sStyle) { return new Array(); };

/**
 * Returns the relative resource pattern with unit 'second' (like now, "in {0} seconds", "{0} seconds ago" under locale 'en') based on the given
 * difference value (0 means now, positive value means in the future and negative value means in the past).
 * 
 * @param {int} iDiff the difference in seconds
 * @param {string} [sStyle="wide"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
 * @returns {string} the relative resource pattern in unit 'second'
 * @public
 * @since 1.31.0
 * 
 */
sap.ui.core.LocaleData.prototype.getRelativeSecond = function(iDiff,sStyle) { return ""; };

/**
 * Returns the relative week resource pattern (like "This week", "Last week", "{0} weeks ago") based on the given
 * difference of weeks (0 means this week, 1 means next week, -1 means last week, ...).
 * 
 * @param {int} iDiff the difference in weeks
 * @param {string} [sStyle="wide"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
 * @returns {string} the relative week resource pattern
 * @public
 * @since 1.31.0
 * 
 */
sap.ui.core.LocaleData.prototype.getRelativeWeek = function(iDiff,sStyle) { return ""; };

/**
 * Returns the relative year resource pattern (like "This year", "Last year", "{0} year ago") based on the given
 * difference of years (0 means this year, 1 means next year, -1 means last year, ...).
 * 
 * @param {int} iDiff the difference in years
 * @param {string} [sStyle="wide"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
 * @returns {string} the relative year resource pattern
 * @public
 * @since 1.25.0
 * 
 */
sap.ui.core.LocaleData.prototype.getRelativeYear = function(iDiff,sStyle) { return ""; };

/**
 * Get locale specific script names.
 * 
 * @returns {object} map of locale specific script names
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getScripts = function() { return new Object(); };

/**
 * Get locale specific territory names.
 * 
 * @returns {object} map of locale specific territory names
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getTerritories = function() { return new Object(); };

/**
 * Get time pattern in style "short", "medium", "long" or "full".
 * 
 * @param {string} sStyle the required style for the date pattern
 * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.
 * @returns {string} the selected time pattern
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getTimePattern = function(sStyle,sCalendarType) { return ""; };

/**
 * Returns the last day of a weekend for the given locale.
 * 
 * Days are encoded in the same way as for {@link #getFirstDayOfWeek}.
 * 
 * All week data information in the CLDR is provided for territories (countries).
 * If the locale of this LocaleData doesn't contain country information (e.g. if it
 * contains only a language), then the "likelySubtag" information of the CLDR
 * is taken into account to guess the "most likely" territory for the locale.
 * 
 * @returns {int} last day of weekend
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getWeekendEnd = function() { return 0; };

/**
 * Returns the first day of a weekend for the given locale.
 * 
 * Days are encoded in the same way as for {@link #getFirstDayOfWeek}.
 * 
 * All week data information in the CLDR is provided for territories (countries).
 * If the locale of this LocaleData doesn't contain country information (e.g. if it
 * contains only a language), then the "likelySubtag" information of the CLDR
 * is taken into account to guess the "most likely" territory for the locale.
 * 
 * @returns {int} first day of weekend
 * @public
 * 
 */
sap.ui.core.LocaleData.prototype.getWeekendStart = function() { return 0; };


// ---- sap.ui.core.Manifest --------------------------------------------------------------------------

/**
 * Creates and initializes a manifest wrapper which provides API access to
 * the content of the manifest.
 * 
 * 
 * @param {object}
 *            oManifest the manifest object
 * @param {object}
 *            [mOptions] (optional) the configuration options
 * @param {string}
 *            [mOptions.componentName] (optional) the name of the component
 * @param {string}
 *            [mOptions.baseUrl] (optional) the base URL which is used to resolve relative URLs against
 * @param {boolean}
 *            [mOptions.process=true] (optional) Flag whether the manifest object should be processed or not
 *            which means that the placeholders will be replaced with resource bundle values
 * 
 * 
 * @public
 * 
 * @class The Manifest class.
 * @extends sap.ui.base.Object
 * @version 1.48.4
 * @since 1.33.0
 * 
 */
sap.ui.core.Manifest = function(oManifest,mOptions) {};
/**
 * Creates a new subclass of class sap.ui.core.Manifest with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Manifest.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the Component name which is defined in the manifest as
 * <code>sap.ui5/componentName</code> or <code>sap.app/id</code>
 * 
 * @return {string} the component name
 * @public
 * 
 */
sap.ui.core.Manifest.prototype.getComponentName = function() { return ""; };

/**
 * Returns the configuration of a manifest section or the value for a
 * specific path. If no key is specified, the return value is null.
 * 
 * Example:
 * <code>
 *   {
 *     "sap.ui5": {
 *       "dependencies": {
 *         "libs": {
 *           "sap.m": {}
 *         },
 *         "components": {
 *           "my.component.a": {}
 *         }
 *       }
 *   });
 * </code>
 * 
 * The configuration above can be accessed in the following ways:
 * <ul>
 * <li><b>By section/namespace</b>: <code>oManifest.getEntry("sap.ui5")</code></li>
 * <li><b>By path</b>: <code>oManifest.getEntry("/sap.ui5/dependencies/libs")</code></li>
 * </ul>
 * 
 * By section/namespace returns the configuration for the specified manifest
 * section and by path allows to specify a concrete path to a dedicated entry
 * inside the manifest. The path syntax always starts with a slash (/).
 * 
 * @param {string} sKey Either the manifest section name (namespace) or a concrete path
 * @return {any|null} Value of the key (could be any kind of value)
 * @public
 * 
 */
sap.ui.core.Manifest.prototype.getEntry = function(sKey) { return null; };

/**
 * Returns the manifest defined in the metadata of the component.
 * If not specified, the return value is null.
 * 
 * @return {Object} manifest.
 * @public
 * 
 */
sap.ui.core.Manifest.prototype.getJson = function() { return null; };

/**
 * Returns a metadata object for class sap.ui.core.Manifest.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.Manifest.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the raw manifest defined in the metadata of the component.
 * If not specified, the return value is null.
 * 
 * @return {Object} manifest
 * @public
 * 
 */
sap.ui.core.Manifest.prototype.getRawJson = function() { return null; };

/**
 * Function to load the manifest by URL
 * 
 * @param {object} mOptions the configuration options
 * @param {string} mOptions.manifestUrl URL of the manifest
 * @param {string} [mOptions.componentName] name of the component
 * @param {boolean} [mOptions.async] Flag whether to load the manifest async or not (defaults to false)
 * @param {boolean} [mOptions.failOnError] Flag whether to fail if an error occurs or not (defaults to true)
 * @return {sap.ui.core.Manifest|Promise} Manifest object or for asynchronous calls an ECMA Script 6 Promise object will be returned.
 * @protected
 * 
 */
sap.ui.core.Manifest.load = function(mOptions) { return new sap.ui.core.Manifest(); };


// ---- sap.ui.core.Message --------------------------------------------------------------------------

/**
 * Constructor for a new Message.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTimestamp timestamp} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getLevel level} : sap.ui.core.MessageType (default: None)</li>
 * <li>{@link #getReadOnly readOnly} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * This element used to provide messages. Rendering must be done within the control that uses this kind of element.
 * 
 * Its default level is none.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.Message = function(sId,mSettings) {};
/**
 * Compares the given message with <code>this</code> message. The types of
 * {@link sap.ui.core.MessageType} are ordered from "Error" > "Warning" > "Success" >
 * "Information" > "None".
 * 
 * See  {@link sap.ui.core.Message.compareByType}
 * 
 * @param {sap.ui.core.Message} oOther message to compare with this one
 * @return {int} returns <code>0</code> if both messages are at
 *         the same level. <code>-1</code> if <code>this</code>
 *         message has a lower level. <code>1</code> if <code>this</code>
 *         message has a higher level.
 * @public
 * 
 */
sap.ui.core.Message.prototype.compareByType = function(oOther) { return 0; };

/**
 * Compares two given messages with each other.
 * 
 * The types of {@link sap.ui.core.MessageType} are ordered from "Error" > "Warning" > "Success" >
 * "Information" > "None".
 * 
 * @param {sap.ui.core.Message} oMessage1 first message to compare
 * @param {sap.ui.core.Message} oMessage2 second message to compare
 * @return {int} returns <code>0</code> if both messages are at
 *         the same level. <code>-1</code> if <code>this</code>
 *         message has a lower level. <code>1</code> if <code>this</code>
 *         message has a higher level.
 * @static
 * @public
 * 
 */
sap.ui.core.Message.compareByType = function(oMessage1,oMessage2) { return 0; };

/**
 * Creates a new subclass of class sap.ui.core.Message with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Message.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the icon's default URI depending on given size.
 * 
 * There are default icons for messages available that can be used this way. If no
 * parameter is given, the size will be 16x16 per default. If larger icons are needed,
 * the parameter "32x32" might be given.
 * 
 * @param {string} sSize
 *         If parameter is not set the default icon's size will be 16x16. If parameter
 *         is set to "32x32" the icon size will be 32x32.
 * @return {sap.ui.core.URI} URI of the default icon.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.Message.prototype.getDefaultIcon = function(sSize) { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * A possible icon URI of the message
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.ui.core.Message.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getLevel level}.
 * 
 * Setting the message's level.
 * 
 * Default value is <code>None</code>.
 * @returns {sap.ui.core.MessageType} Value of property <code>level</code>
 * 
 * @public
 * 
 */
sap.ui.core.Message.prototype.getLevel = function() { return new sap.ui.core.MessageType(); };

/**
 * Returns a metadata object for class sap.ui.core.Message.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.Message.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getReadOnly readOnly}.
 * 
 * Determines whether the message should be read only. This helps the application to handle a message a different way if the application differentiates between read-only and common messages.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>readOnly</code>
 * @since 1.19.0
 * 
 * @public
 * 
 */
sap.ui.core.Message.prototype.getReadOnly = function() { return false; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Message text
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.ui.core.Message.prototype.getText = function() { return ""; };

/**
 * Gets current value of property {@link #getTimestamp timestamp}.
 * 
 * Message's timestamp. It is just a simple String that will be used without any transformation. So the application that uses messages needs to format the timestamp to its own needs.
 * 
 * @returns {string} Value of property <code>timestamp</code>
 * 
 * @public
 * 
 */
sap.ui.core.Message.prototype.getTimestamp = function() { return ""; };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * A possible icon URI of the message
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.ui.core.Message} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Message.prototype.setIcon = function(sIcon) { return new sap.ui.core.Message(); };

/**
 * Sets a new value for property {@link #getLevel level}.
 * 
 * Setting the message's level.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>None</code>.
 * @param {sap.ui.core.MessageType} sLevel New value for property <code>level</code>
 * @returns {sap.ui.core.Message} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Message.prototype.setLevel = function(sLevel) { return new sap.ui.core.Message(); };

/**
 * Sets a new value for property {@link #getReadOnly readOnly}.
 * 
 * Determines whether the message should be read only. This helps the application to handle a message a different way if the application differentiates between read-only and common messages.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bReadOnly New value for property <code>readOnly</code>
 * @returns {sap.ui.core.Message} Reference to <code>this</code> in order to allow method chaining
 * @since 1.19.0
 * 
 * @public
 * 
 */
sap.ui.core.Message.prototype.setReadOnly = function(bReadOnly) { return new sap.ui.core.Message(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Message text
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.ui.core.Message} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Message.prototype.setText = function(sText) { return new sap.ui.core.Message(); };

/**
 * Sets a new value for property {@link #getTimestamp timestamp}.
 * 
 * Message's timestamp. It is just a simple String that will be used without any transformation. So the application that uses messages needs to format the timestamp to its own needs.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sTimestamp New value for property <code>timestamp</code>
 * @returns {sap.ui.core.Message} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Message.prototype.setTimestamp = function(sTimestamp) { return new sap.ui.core.Message(); };


// ---- sap.ui.core.message --------------------------------------------------------------------------


// ---- sap.ui.core.message.ControlMessageProcessor --------------------------------------------------------------------------

/**
 * Constructor for a new ControlMessageProcessor
 * 
 * 
 * @class
 * The ControlMessageProcessor implementation.
 * This MessageProcessor is able to handle Messages with the following target syntax:
 * 		'ControlID/PropertyName'
 * Creating an instance of this class using the "new" keyword always results in the same instance (Singleton).
 * 
 * @extends sap.ui.core.message.MessageProcessor
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.core.message.ControlMessageProcessor = function() {};
/**
 * Check Messages and update controls with messages
 * @protected
 * 
 */
sap.ui.core.message.ControlMessageProcessor.prototype.checkMessages = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.message.ControlMessageProcessor with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageProcessor.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.message.ControlMessageProcessor.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.message.ControlMessageProcessor.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.message.ControlMessageProcessor.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Set Messages to check
 * @param {map}
 *         vMessages map of messages: {'target': [array of messages],...}
 * @protected
 * 
 */
sap.ui.core.message.ControlMessageProcessor.prototype.setMessages = function(vMessages) {  };


// ---- sap.ui.core.message.Message --------------------------------------------------------------------------

/**
 * Constructor for a new Message.
 * 
 * @class
 * @extends sap.ui.base.Object
 * @version 1.48.4
 * 
 * @constructor
 * 
 * @param {object} [mParameters] (optional) a map which contains the following parameter properties:
 * @param {string} [mParameters.id] The message id: will be defaulted if no id is set
 * @param {string} [mParameters.message] The message text
 * @param {string} [mParameters.description] The message description
 * @param {string} [mParameters.additionalText] The message additionalText
 * @param {sap.ui.core.MessageType} [mParameters.type] The message type
 * @param {string} [mParameters.code] The message code
 * @param {sap.ui.core.message.MessageProcessor} [mParameters.processor]
 * @param {string} [mParameters.target] The message target: The syntax MessageProcessor dependent. Read the documentation of the respective MessageProcessor.
 * @param {boolean} [mParameters.persistent] Sets message persistent: If persistent is set <code>true</code> the message lifecycle controlled by the application
 * @param {int} [mParameters.date=Date.now()] Sets message date which can be used to remove old messages. Number of milliseconds elapsed since 1 January 1970 00:00:00 UTC
 * 
 * @public
 * 
 */
sap.ui.core.message.Message = function(mParameters) {};
/**
 * Creates a new subclass of class sap.ui.core.message.Message with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.message.Message.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.message.Message.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.message.Message.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.message.MessageManager --------------------------------------------------------------------------

/**
 * Constructor for a new MessageManager.
 * 
 * 
 * @class
 * 
 * @extends sap.ui.base.EventProvider
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.core.message.MessageManager = function() {};
/**
 * Add messages to MessageManager
 * 
 * @param {sap.ui.core.message.Message|sap.ui.core.message.Message[]} vMessages Array of sap.ui.core.message.Message or single sap.ui.core.message.Message
 * @public
 * 
 */
sap.ui.core.message.MessageManager.prototype.addMessages = function(vMessages) {  };

/**
 * destroy MessageManager
 * @deprecated
 * @public
 * 
 */
sap.ui.core.message.MessageManager.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.message.MessageManager with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.message.MessageManager.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Get the MessageModel
 * @return {sap.ui.model.message.MessageModel} oMessageModel The Message Model
 * @public
 * 
 */
sap.ui.core.message.MessageManager.prototype.getMessageModel = function() { return new sap.ui.model.message.MessageModel(); };

/**
 * Returns a metadata object for class sap.ui.core.message.MessageManager.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.message.MessageManager.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Register MessageProcessor
 * 
 * @param {sap.ui.core.message.MessageProcessor} oProcessor The MessageProcessor
 * @public
 * 
 */
sap.ui.core.message.MessageManager.prototype.registerMessageProcessor = function(oProcessor) {  };

/**
 * Register ManagedObject: Validation and Parse errors are handled by the MessageManager for this object
 * 
 * @param {sap.ui.base.ManagedObject} oObject The sap.ui.base.ManagedObject
 * @param {boolean} bHandleValidation Handle validation for this object. If set to true validation/parse events creates Messages and cancel event.
 * 					If set to false only the event will be canceled, but no messages will be created
 * @public
 * 
 */
sap.ui.core.message.MessageManager.prototype.registerObject = function(oObject,bHandleValidation) {  };

/**
 * Remove all messages
 * @public
 * 
 */
sap.ui.core.message.MessageManager.prototype.removeAllMessages = function() {  };

/**
 * Remove given Messages
 * 
 * @param {sap.ui.core.message.Message|sap.ui.core.message.Message[]} vMessages - The message(s) to be removed.
 * @public
 * 
 */
sap.ui.core.message.MessageManager.prototype.removeMessages = function(vMessages) {  };

/**
 * Deregister MessageProcessor
 * @param {sap.ui.core.message.MessageProcessor} oProcessor The MessageProcessor
 * @public
 * 
 */
sap.ui.core.message.MessageManager.prototype.unregisterMessageProcessor = function(oProcessor) {  };

/**
 * Unregister ManagedObject
 * 
 * @param {sap.ui.base.ManagedObject} oObject The sap.ui.base.ManagedObject
 * @public
 * 
 */
sap.ui.core.message.MessageManager.prototype.unregisterObject = function(oObject) {  };


// ---- sap.ui.core.message.MessageParser --------------------------------------------------------------------------

/**
 * Abstract MessageParser class to be inherited in back-end specific implementations.
 * 
 * 
 * @class
 * @classdesc
 *   This is an abstract base class for MessageParser objects.
 * @extends sap.ui.base.Object
 * @version 1.48.4
 * @public
 * @abstract
 * 
 */
sap.ui.core.message.MessageParser = function() {};
/**
 * Creates a new subclass of class sap.ui.core.message.MessageParser with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.message.MessageParser.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.message.MessageParser.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.message.MessageParser.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the registered processor on which the events for message handling can be fired
 * 
 * @return {sap.ui.core.message.MessageProcessor} The currently set MessageProcessor or null if none is set
 * @protected
 * 
 */
sap.ui.core.message.MessageParser.prototype.getProcessor = function() { return new sap.ui.core.message.MessageProcessor(); };

/**
 * Abstract parse method must be implemented in the inheriting class.
 * 
 * @public
 * @abstract
 * 
 */
sap.ui.core.message.MessageParser.prototype.parse = function() {  };

/**
 * This method is used by the model to register itself as MessageProcessor for this parser
 * 
 * @param {sap.ui.core.message.MessageProcessor} oProcessor - The MessageProcessor that can be used to fire events
 * @return {sap.ui.core.message.MessageParser} Instance reference for method chaining
 * @protected
 * 
 */
sap.ui.core.message.MessageParser.prototype.setProcessor = function(oProcessor) { return new sap.ui.core.message.MessageParser(); };


// ---- sap.ui.core.message.MessageProcessor --------------------------------------------------------------------------

/**
 * Constructor for a new MessageProcessor
 * 
 * 
 * @class
 * This is an abstract base class for MessageProcessor objects.
 * @abstract
 * 
 * @extends sap.ui.base.EventProvider
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.core.message.MessageProcessor = function() {};
/**
 * Attach event-handler <code>fnFunction</code> to the 'messageChange' event of this <code>sap.ui.core.message.MessageProcessor</code>.<br/>
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this MessageProcessor is used.
 * 
 * @return {sap.ui.core.message.MessageProcessor} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.message.MessageProcessor.prototype.attachMessageChange = function(oData,fnFunction,oListener) { return new sap.ui.core.message.MessageProcessor(); };

/**
 * Implement in inheriting classes
 * @abstract
 * @return {sap.ui.model.ListBinding}
 * @public
 * 
 */
sap.ui.core.message.MessageProcessor.prototype.checkMessage = function() { return new sap.ui.model.ListBinding(); };

/**
 * Destroys the MessageProcessor Instance
 * @public
 * 
 */
sap.ui.core.message.MessageProcessor.prototype.destroy = function() {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'sap.ui.core.message.MessageProcessor' event of this <code>sap.ui.core.message.MessageProcessor</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.message.MessageProcessor} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.message.MessageProcessor.prototype.detachMessageChange = function(fnFunction,oListener) { return new sap.ui.core.message.MessageProcessor(); };

/**
 * Creates a new subclass of class sap.ui.core.message.MessageProcessor with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.message.MessageProcessor.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event messageChange to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * 
 * @return {sap.ui.core.message.MessageProcessor} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.message.MessageProcessor.prototype.fireMessageChange = function(mArguments) { return new sap.ui.core.message.MessageProcessor(); };

/**
 * Returns the ID of the MessageProcessor instance
 * 
 * @return {string} sId The MessageProcessor ID
 * @public
 * 
 */
sap.ui.core.message.MessageProcessor.prototype.getId = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.message.MessageProcessor.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.message.MessageProcessor.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Implement in inheriting classes
 * @abstract
 * @param {map}
 *         vMessages map of messages: {'target': [array of messages],...}
 * @public
 * 
 */
sap.ui.core.message.MessageProcessor.prototype.setMessages = function(vMessages) {  };


// ---- sap.ui.core.MessageType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.MessageType.toString = function() { return ""; };

// ---- sap.ui.core.mvc --------------------------------------------------------------------------


// ---- sap.ui.core.mvc.Controller --------------------------------------------------------------------------

/**
 * Instantiates a (MVC-style) controller. Consumers should call the constructor only in the
 * typed controller scenario. In the generic controller use case, they should use
 * {@link sap.ui.controller} instead.
 * 
 * 
 * @class A generic controller implementation for the UI5 Model-View-Controller concept.
 * 
 * Can either be used as a generic controller which is enriched on the fly with methods
 * and properties (see {@link sap.ui.controller}) or  as a base class for typed controllers.
 * 
 * @param {string|object[]} sName The name of the controller to instantiate. If a controller is defined as real sub-class,
 *                                   the "arguments" of the sub-class constructor should be given instead.
 * @public
 * @extends sap.ui.base.EventProvider
 * 
 */
sap.ui.core.mvc.Controller = function(sName) {};
/**
 * Returns an Element of the connected view with the given local ID.
 * 
 * Views automatically prepend their own ID as a prefix to created Elements
 * to make the IDs unique even in the case of multiple view instances.
 * This method helps to find an element by its local ID only.
 * 
 * If no view is connected or if the view doesn't contain an element with
 * the given local ID, undefined is returned.
 * 
 * @param {string} sId View-local ID
 * @return {sap.ui.core.Element} Element by its (view local) ID
 * @public
 * 
 */
sap.ui.core.mvc.Controller.prototype.byId = function(sId) { return new sap.ui.core.Element(); };

/**
 * Converts a view local ID to a globally unique one by prepending
 * the view ID.
 * 
 * If no view is connected, undefined is returned.
 * 
 * @param {string} sId View-local ID
 * @return {string} Prefixed ID
 * @public
 * 
 */
sap.ui.core.mvc.Controller.prototype.createId = function(sId) { return ""; };

/**
 * Creates a new subclass of class sap.ui.core.mvc.Controller with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.Controller.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.mvc.Controller.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.Controller.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets the component of the controller's view
 * 
 * If there is no Component connected to the view or the view is not connected to the controller,
 * undefined is returned.
 * 
 * @return {sap.ui.core.Component} Component instance
 * @since 1.23.0
 * @public
 * 
 */
sap.ui.core.mvc.Controller.prototype.getOwnerComponent = function() { return new sap.ui.core.Component(); };

/**
 * Returns the view associated with this controller or undefined.
 * @return {sap.ui.core.mvc.View} View connected to this controller.
 * @public
 * 
 */
sap.ui.core.mvc.Controller.prototype.getView = function() { return new sap.ui.core.mvc.View(); };

/**
 * This method is called every time the View is rendered, after the HTML is placed in the DOM-Tree. It can be
 * used to apply additional changes to the DOM after the Renderer has finished.
 * (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the
 * method does not exist, it will simply not be called.)
 * 
 * @see sap.ui.core.Control.prototype.onAfterRendering
 * @abstract
 * @protected
 * 
 */
sap.ui.core.mvc.Controller.prototype.onAfterRendering = function() {  };

/**
 * This method is called every time the View is rendered, before the Renderer is called and the HTML is placed in
 * the DOM-Tree. It can be used to perform clean-up-tasks before re-rendering.
 * (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the
 * method does not exist, it will simply not be called.)
 * 
 * @see sap.ui.core.Control.prototype.onBeforeRendering
 * @abstract
 * @protected
 * 
 */
sap.ui.core.mvc.Controller.prototype.onBeforeRendering = function() {  };

/**
 * This method is called upon desctuction of the View. The controller should perform its internal destruction in
 * this hook. It is only called once per View instance, unlike the onBeforeRendering and onAfterRendering
 * hooks.
 * (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the
 * method does not exist, it will simply not be called.)
 * @abstract
 * @protected
 * 
 */
sap.ui.core.mvc.Controller.prototype.onExit = function() {  };

/**
 * This method is called upon initialization of the View. The controller can perform its internal setup in
 * this hook. It is only called once per View instance, unlike the onBeforeRendering and onAfterRendering
 * hooks.
 * (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the
 * method does not exist, it will simply not be called.)
 * @abstract
 * @protected
 * 
 */
sap.ui.core.mvc.Controller.prototype.onInit = function() {  };

/**
 * Registers a callback module, which provides code enhancements for the
 * lifecycle and event handler functions of a specific controller. The code
 * enhancements are returned either in sync or async mode.
 * 
 * The extension provider module provides the <code>getControllerExtensions</code> function
 * which returns either directly an array of objects or a Promise that returns an array
 * of objects when it resolves. These objects are object literals defining the
 * methods and properties of the controller in a similar way as {@link sap.ui.controller}.
 * 
 * 
 * <b>Example for a callback module definition (sync):</b>
 * <pre>
 * sap.ui.define("my/custom/sync/ExtensionProvider", ['jquery.sap.global'], function(jQuery) {
 *   var ExtensionProvider = function() {};
 *   ExtensionProvider.prototype.getControllerExtensions = function(sControllerName, sComponentId, bAsync) {
 *     if (!bAsync && sControllerName == "my.own.Controller") {
 *       // IMPORTANT: only return extensions for a specific controller
 *       return [{
 *         onInit: function() {
 *           // Do something here...
 *         },
 *         onAfterRendering: function() {
 *           // Do something here...
 *         },
 *         onButtonClick: function(oEvent) {
 *           // Handle the button click event
 *         }
 *       }
 *     }];
 *   };
 *   return ExtensionProvider;
 * }, true);
 * </pre>
 * 
 * 
 * <b>Example for a callback module definition (async):</b>
 * <pre>
 * sap.ui.define("my/custom/async/ExtensionProvider", ['jquery.sap.global'], function(jQuery) {
 *   var ExtensionProvider = function() {};
 *   ExtensionProvider.prototype.getControllerExtensions = function(sControllerName, sComponentId, bAsync) {
 *     if (bAsync && sControllerName == "my.own.Controller") {
 *       // IMPORTANT:
 *       // only return a Promise for a specific controller since it
 *       // requires the View/Controller and its parents to run in async
 *       // mode!
 *       return new Promise(function(fnResolve, fnReject) {
 *         fnResolve([{
 *           onInit: function() {
 *             // Do something here...
 *           },
 *           onAfterRendering: function() {
 *             // Do something here...
 *           },
 *           onButtonClick: function(oEvent) {
 *             // Handle the button click event
 *           }
 *         }]);
 *       }
 *     };
 *   };
 *   return ExtensionProvider;
 * }, true);
 * </pre>
 * 
 * 
 * The lifecycle functions <code>onInit</code>, <code>onExit</code>,
 * <code>onBeforeRendering</code> and <code>onAfterRendering</code>
 * are added before or after the lifecycle functions of the original
 * controller. The event handler functions, such as <code>onButtonClick</code>,
 * are replacing the original controller's function.
 * 
 * When using an async extension provider you need to ensure that the
 * view is loaded in async mode.
 * 
 * In both cases, return <code>undefined</code> if no controller extension shall be applied.
 * 
 * @param {string} sExtensionProvider the module name of the extension provider
 * 
 * See {@link sap.ui.controller} for an overview of the available functions for controllers.
 * @since 1.34.0
 * @public
 * 
 */
sap.ui.core.mvc.Controller.registerExtensionProvider = function(sExtensionProvider) {  };


// ---- sap.ui.core.mvc.HTMLView --------------------------------------------------------------------------

/**
 * Constructor for a new mvc/HTMLView.
 * 
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * A view defined/constructed by declarative HTML.
 * @extends sap.ui.core.mvc.View
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.9.2
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.mvc.HTMLView = function(sId,mSettings) {};
/**
 * Flag for feature detection of asynchronous loading/rendering
 * @public
 * @since 1.30
 * 
 */
sap.ui.core.mvc.HTMLView.asyncSupport = undefined

/**
 * Creates a new subclass of class sap.ui.core.mvc.HTMLView with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.HTMLView.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.mvc.HTMLView.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.HTMLView.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.mvc.JSONView --------------------------------------------------------------------------

/**
 * Constructor for a new mvc/JSONView.
 * 
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * A View defined using JSON.
 * @extends sap.ui.core.mvc.View
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.mvc.JSONView = function(sId,mSettings) {};
/**
 * Flag for feature detection of asynchronous loading/rendering
 * @public
 * @since 1.30
 * 
 */
sap.ui.core.mvc.JSONView.asyncSupport = undefined

/**
 * Creates a new subclass of class sap.ui.core.mvc.JSONView with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.JSONView.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.mvc.JSONView.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.JSONView.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.mvc.JSView --------------------------------------------------------------------------

/**
 * Constructor for a new mvc/JSView.
 * 
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * A View defined/constructed by JavaScript code.
 * @extends sap.ui.core.mvc.View
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.mvc.JSView = function(sId,mSettings) {};
/**
 * Flag for feature detection of asynchronous loading/rendering
 * @public
 * @since 1.30
 * 
 */
sap.ui.core.mvc.JSView.asyncSupport = undefined

/**
 * A method to be implemented by JSViews, returning the View UI.
 * While for declarative View types like XMLView or JSONView the user interface definition is declared in a separate file,
 * JSViews programmatically construct the UI. This happens in the createContent method which every JSView needs to implement.
 * The View implementation can construct the complete UI in this method - or only return the root control and create the rest of the UI lazily later on.
 * 
 * @return {sap.ui.core.Control} a control or (typically) tree of controls representing the View user interface
 * @public
 * 
 */
sap.ui.core.mvc.JSView.prototype.createContent = function() { return new sap.ui.core.Control(); };

/**
 * Creates a new subclass of class sap.ui.core.mvc.JSView with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.JSView.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * A method to be implemented by JSViews, returning the flag whether to prefix
 * the IDs of controls automatically or not if the controls are created inside
 * the {@link sap.ui.core.mvc.JSView#createContent} function. By default this
 * feature is not activated.
 * 
 * You can overwrite this function and return true to activate the automatic
 * prefixing.
 * 
 * @since 1.15.1
 * @return {boolean} true, if the controls IDs should be prefixed automatically
 * @protected
 * 
 */
sap.ui.core.mvc.JSView.prototype.getAutoPrefixId = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.core.mvc.JSView.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.JSView.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.mvc.TemplateView --------------------------------------------------------------------------

/**
 * Constructor for a new mvc/TemplateView.
 * 
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * A view defined in a template.
 * @extends sap.ui.core.mvc.View
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.16.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.mvc.TemplateView = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.mvc.TemplateView with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.TemplateView.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.mvc.TemplateView.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.TemplateView.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.mvc.View --------------------------------------------------------------------------

/**
 * Constructor for a new View.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getViewName viewName} : string</li>
 * <li>{@link #getDisplayBlock displayBlock} : boolean (default: false)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:afterInit afterInit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeExit beforeExit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeRendering beforeRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class A base class for Views.
 * 
 * Introduces the relationship to a Controller, some basic visual appearance settings like width and height
 * and provides lifecycle events.
 * 
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.mvc.View = function(sId,mSettings) {};
/**
 * Fired when the View has parsed the UI description and instantiated the contained controls (/control tree).
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.afterInit = function(oControlEvent) {  };

/**
 * Fired when the View has been (re-)rendered and its HTML is present in the DOM.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.afterRendering = function(oControlEvent) {  };

/**
 * Fired when the view has received the request to destroy itself, but before it has destroyed anything.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.beforeExit = function(oControlEvent) {  };

/**
 * Fired before this View is re-rendered. Use to unbind event handlers from HTML elements etc.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.beforeRendering = function(oControlEvent) {  };

/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.addContent = function(oContent) { return new sap.ui.core.mvc.View(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterInit afterInit} event of this <code>sap.ui.core.mvc.View</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.
 * 
 * Fired when the View has parsed the UI description and instantiated the contained controls (/control tree).
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself
 * 
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.attachAfterInit = function(oData,fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterRendering afterRendering} event of this <code>sap.ui.core.mvc.View</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.
 * 
 * Fired when the View has been (re-)rendered and its HTML is present in the DOM.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself
 * 
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.attachAfterRendering = function(oData,fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeExit beforeExit} event of this <code>sap.ui.core.mvc.View</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.
 * 
 * Fired when the view has received the request to destroy itself, but before it has destroyed anything.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself
 * 
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.attachBeforeExit = function(oData,fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeRendering beforeRendering} event of this <code>sap.ui.core.mvc.View</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.
 * 
 * Fired before this View is re-rendered. Use to unbind event handlers from HTML elements etc.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself
 * 
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.attachBeforeRendering = function(oData,fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Returns an element by its ID in the context of the view.
 * 
 * @param {string} sId View local ID of the element
 * @return {sap.ui.core.Element} element by its ID or <code>undefined</code>
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.byId = function(sId) { return new sap.ui.core.Element(); };

/**
 * Override clone method to avoid conflict between generic cloning of content
 * and content creation as defined by the UI5 Model View Controller lifecycle.
 * 
 * For more details see the development guide section about Model View Controller in UI5.
 * 
 * @param {string} [sIdSuffix] a suffix to be appended to the cloned element id
 * @param {string[]} [aLocalIds] an array of local IDs within the cloned hierarchy (internally used)
 * @return {sap.ui.core.Element} reference to the newly created clone
 * @protected
 * 
 */
sap.ui.core.mvc.View.prototype.clone = function(sIdSuffix,aLocalIds) { return new sap.ui.core.Element(); };

/**
 * Convert the given view local element ID to a globally unique ID
 * by prefixing it with the view ID.
 * 
 * @param {string} sId View local ID of the element
 * @return {string} prefixed id
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.createId = function(sId) { return ""; };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.destroyContent = function() { return new sap.ui.core.mvc.View(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterInit afterInit} event of this <code>sap.ui.core.mvc.View</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.detachAfterInit = function(fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterRendering afterRendering} event of this <code>sap.ui.core.mvc.View</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.detachAfterRendering = function(fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeExit beforeExit} event of this <code>sap.ui.core.mvc.View</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.detachBeforeExit = function(fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeRendering beforeRendering} event of this <code>sap.ui.core.mvc.View</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.detachBeforeRendering = function(fnFunction,oListener) { return new sap.ui.core.mvc.View(); };

/**
 * Creates a new subclass of class sap.ui.core.mvc.View with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.View.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterInit afterInit} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.core.mvc.View.prototype.fireAfterInit = function(mParameters) { return new sap.ui.core.mvc.View(); };

/**
 * Fires event {@link #event:afterRendering afterRendering} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.core.mvc.View.prototype.fireAfterRendering = function(mParameters) { return new sap.ui.core.mvc.View(); };

/**
 * Fires event {@link #event:beforeExit beforeExit} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.core.mvc.View.prototype.fireBeforeExit = function(mParameters) { return new sap.ui.core.mvc.View(); };

/**
 * Fires event {@link #event:beforeRendering beforeRendering} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.core.mvc.View.prototype.fireBeforeRendering = function(mParameters) { return new sap.ui.core.mvc.View(); };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * Child Controls of the view
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getContent = function() { return new Array(); };

/**
 * Returns the view's Controller instance or null for a controller-less View.
 * 
 * @return {object} Controller of this view.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.mvc.View.prototype.getController = function() { return new Object(); };

/**
 * An (optional) method to be implemented by Views. When no controller instance is given at View instantiation time
 * AND this method exists and returns the (package and class) name of a controller, the View tries to load and
 * instantiate the controller and to connect it to itself.
 * 
 * @return {string} the name of the controller
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getControllerName = function() { return ""; };

/**
 * Gets current value of property {@link #getDisplayBlock displayBlock}.
 * 
 * Whether the CSS display should be set to "block".
 * Set this to "true" if the default display "inline-block" causes a vertical scrollbar with Views that are set to 100% height.
 * Do not set this to "true" if you want to display other content in the same HTML parent on either side of the View (setting to "true" may push that other content to the next/previous line).
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>displayBlock</code>
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getDisplayBlock = function() { return false; };

/**
 * Gets current value of property {@link #getHeight height}.
 * 
 * The height
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>height</code>
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getHeight = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns the local ID of an element by removing the view ID prefix or
 * <code>null</code> if the ID does not contain a prefix.
 * 
 * @param {string} sId Prefixed ID
 * @return {string} ID without prefix or <code>null</code>
 * @public
 * @since 1.39.0
 * 
 */
sap.ui.core.mvc.View.prototype.getLocalId = function(sId) { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.mvc.View.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.View.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the info object which is also passed to the preprocessors
 * @see sap.ui.core.mvc.View.Preprocessor.process
 * 
 * @param {boolean} bSync Describes the view execution, true if sync
 * @returns {object} Info object for the view
 * 
 * @protected
 * 
 */
sap.ui.core.mvc.View.prototype.getPreprocessorInfo = function(bSync) { return new Object(); };

/**
 * Returns user specific data object
 * 
 * @return {object} viewData
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getViewData = function() { return new Object(); };

/**
 * Gets current value of property {@link #getViewName viewName}.
 * 
 * Name of the View
 * 
 * @returns {string} Value of property <code>viewName</code>
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getViewName = function() { return ""; };

/**
 * Gets current value of property {@link #getWidth width}.
 * 
 * The width
 * 
 * Default value is <code>100%</code>.
 * @returns {sap.ui.core.CSSSize} Value of property <code>width</code>
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.getWidth = function() { return new sap.ui.core.CSSSize(); };

/**
 * Checks if any preprocessors are active for the specified type
 * 
 * @param {string} sType Type of the preprocessor, e.g. "raw", "xml" or "controls"
 * @returns {boolean} <code>true</code> if a preprocessor is active
 * @protected
 * 
 */
sap.ui.core.mvc.View.prototype.hasPreprocessor = function(sType) { return false; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.insertContent = function(oContent,iIndex) { return new sap.ui.core.mvc.View(); };

/**
 * Creates a Promise representing the state of the view initialization.
 * 
 * For views that are loading asynchronously (by setting async=true) this Promise is created by view
 * initialization. Synchronously loading views get wrapped in an immediately resolving Promise.
 * 
 * @since 1.30
 * @public
 * @return {Promise} resolves with the complete view instance, reject with any thrown error
 * 
 */
sap.ui.core.mvc.View.prototype.loaded = function() { return null; };

/**
 * Register a preprocessor for all views of a specific type.
 * 
 * The preprocessor can be registered for several stages of view initialization, which are
 * dependent on the view type, e.g. "raw", "xml" or already initialized "controls". If there is a preprocessor
 * passed to or activated at the view instance already, that one is used. When several preprocessors are registered
 * for one hook, it has to be made sure that they do not conflict when being processed serially.
 * 
 * It can be either a module name as string of an implementation of {@link sap.ui.core.mvc.View.Preprocessor} or a
 * function with a signature according to {@link sap.ui.core.mvc.View.Preprocessor.process}.
 * 
 * <strong>Note</strong>: Preprocessors only work in async views and will be ignored when the view is instantiated
 * in sync mode by default, as this could have unexpected side effects. You may override this behaviour by setting the
 * <code>bSyncSupport</code> flag to <code>true</code>.
 * 
 * @protected
 * @static
 * @param {string} sType
 * 		the type of content to be processed
 * @param {string|function} vPreprocessor
 * 		module path of the preprocessor implementation or a preprocessor function
 * @param {string} sViewType
 * 		type of the calling view, e.g. <code>XML</code>
 * @param {boolean} bSyncSupport
 * 		declares if the vPreprocessor ensures safe sync processing. This means the preprocessor will be executed
 * 		also for sync views. Please be aware that any kind of async processing (like Promises, XHR, etc) may
 * 		break the view initialization and lead to unexpected results.
 * @param {boolean} [bOnDemand]
 * 		on-demand preprocessor which enables developers to quickly activate the preprocessor for a view,
 * 		by setting <code>preprocessors : { xml }</code>, for example. This should be false except for very special
 * 		cases. There can only be one on-demand preprocessor per content type.
 * @param {object} [mSettings]
 * 		optional configuration for preprocessor
 * 
 */
sap.ui.core.mvc.View.registerPreprocessor = function(sType,vPreprocessor,sViewType,bSyncSupport,bOnDemand,mSettings) {  };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Executes preprocessors for a type of source
 * 
 * @param {string} sType
 *   the type of preprocessor, e.g. "raw", "xml" or "controls"
 * @param {object|string|Element} vSource
 *   the view source as a JSON object, a raw text, an XML document element or a Promise resolving with those
 * @param {boolean} [bSync]
 *   describes the view execution, true if sync
 * @returns {Promise|object|string|Element}
 *   a promise resolving with the processed source or an error | the source when bSync=true
 * @protected
 * 
 */
sap.ui.core.mvc.View.prototype.runPreprocessor = function(sType,vSource,bSync) { return null; };

/**
 * Sets a new value for property {@link #getDisplayBlock displayBlock}.
 * 
 * Whether the CSS display should be set to "block".
 * Set this to "true" if the default display "inline-block" causes a vertical scrollbar with Views that are set to 100% height.
 * Do not set this to "true" if you want to display other content in the same HTML parent on either side of the View (setting to "true" may push that other content to the next/previous line).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bDisplayBlock New value for property <code>displayBlock</code>
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.setDisplayBlock = function(bDisplayBlock) { return new sap.ui.core.mvc.View(); };

/**
 * Sets a new value for property {@link #getHeight height}.
 * 
 * The height
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sHeight New value for property <code>height</code>
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.setHeight = function(sHeight) { return new sap.ui.core.mvc.View(); };

/**
 * Sets a new value for property {@link #getViewName viewName}.
 * 
 * Name of the View
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sViewName New value for property <code>viewName</code>
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.setViewName = function(sViewName) { return new sap.ui.core.mvc.View(); };

/**
 * Sets a new value for property {@link #getWidth width}.
 * 
 * The width
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100%</code>.
 * @param {sap.ui.core.CSSSize} sWidth New value for property <code>width</code>
 * @returns {sap.ui.core.mvc.View} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.mvc.View.prototype.setWidth = function(sWidth) { return new sap.ui.core.mvc.View(); };


// ---- sap.ui.core.mvc.View.Preprocessor --------------------------------------------------------------------------

/**
 * Processing method that must be implemented by a Preprocessor.
 * @public
 * @static
 * @abstract
 * @param {object} vSource the source to be processed
 * @param {object} oViewInfo identification information about the calling instance
 * @param {string} oViewInfo.id the id
 * @param {string} oViewInfo.name the name
 * @param {string} oViewInfo.componentId the id of the owning Component
 * @param {string} oViewInfo.caller
 * 		identifies the caller of this preprocessor; basis for log or exception messages
 * @param {object} [mSettings]
 * 		settings object containing the settings provided with the preprocessor
 * @return {object|Promise}
 * 		the processed resource or a promise which resolves with the processed resource or an error according to the
 * 		declared preprocessor sync capability
 * 
 */
sap.ui.core.mvc.View.Preprocessor.process = function(vSource,oViewInfo,mSettings) { return new Object(); };


// ---- sap.ui.core.mvc.ViewType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.mvc.ViewType.toString = function() { return ""; };

// ---- sap.ui.core.mvc.XMLView --------------------------------------------------------------------------

/**
 * Constructor for a new mvc/XMLView.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * This class does not have its own settings, but all settings applicable to the base type
 * {@link sap.ui.core.mvc.View#constructor sap.ui.core.mvc.View} can be used.
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * A View defined using (P)XML and HTML markup.
 * 
 * <strong>Note:</strong><br>
 * Be aware that modifications of the content aggregation of this control are not supported due to technical reasons.
 * This includes calls to all content modifying methods like <code>addContent></code> etc., but also the implicit
 * removal of controls contained by the content aggregation. For example the destruction of a Control via the <code>
 * destroy</code> method. All functions can be called but may not work properly or lead to unexpected side effects.
 * 
 * <strong>Note:</strong><br>
 * On root level, you can only define content for the default aggregation, e.g. without adding the <code>&lt;content&gt;</code> tag. If
 * you want to specify content for another aggregation of a view like <code>dependents</code>, place it in a child
 * control's dependents aggregation or add it by using {@link sap.ui.core.mvc.XMLView#addDependent}.
 * 
 * @extends sap.ui.core.mvc.View
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.mvc.XMLView = function(sId,mSettings) {};
/**
 * Flag for feature detection of asynchronous loading/rendering
 * @public
 * @since 1.30
 * 
 */
sap.ui.core.mvc.XMLView.asyncSupport = undefined

/**
 * Creates a new subclass of class sap.ui.core.mvc.XMLView with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.XMLView.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.mvc.XMLView.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.mvc.XMLView.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Register a preprocessor for all views of a specific type.
 * 
 * The preprocessor can be registered for several stages of view initialization, for xml views these are
 * either the plain "xml" or the already initialized "controls" , see {@link sap.ui.core.mvc.XMLView.PreprocessorType}.
 * For each type one preprocessor is executed. If there is a preprocessor passed to or activated at the
 * view instance already, that one is used. When several preprocessors are registered for one hook, it has to be made
 * sure, that they do not conflict when beeing processed serially.
 * 
 * It can be either a module name as string of an implementation of {@link sap.ui.core.mvc.View.Preprocessor} or a
 * function with a signature according to {@link sap.ui.core.mvc.View.Preprocessor.process}.
 * 
 * <strong>Note</strong>: Preprocessors work only in async views and will be ignored when the view is instantiated
 * in sync mode by default, as this could have unexpected side effects. You may override this behaviour by setting the
 * bSyncSupport flag to true.
 * 
 * @public
 * @static
 * @param {string|sap.ui.core.mvc.XMLView.PreprocessorType} sType
 * 		the type of content to be processed
 * @param {string|function} vPreprocessor
 * 		module path of the preprocessor implementation or a preprocessor function
 * @param {boolean} bSyncSupport
 * 		declares if the vPreprocessor ensures safe sync processing. This means the preprocessor will be executed
 * 		also for sync views. Please be aware that any kind of async processing (like Promises, XHR, etc) may
 * 		break the view initialization and lead to unexpected results.
 * @param {boolean} [bOnDemand]
 * 		ondemand preprocessor which enables developers to quickly activate the preprocessor for a view,
 * 		by setting <code>preprocessors : { xml }</code>, for example.
 * @param {object} [mSettings]
 * 		optional configuration for preprocessor
 * 
 */
sap.ui.core.mvc.XMLView.registerPreprocessor = function(sType,vPreprocessor,bSyncSupport,bOnDemand,mSettings) {  };


// ---- sap.ui.core.mvc.XMLView.PreprocessorType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.mvc.XMLView.PreprocessorType.toString = function() { return ""; };

// ---- sap.ui.core.OpenState --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.OpenState.toString = function() { return ""; };

// ---- sap.ui.core.Orientation --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.Orientation.toString = function() { return ""; };

// ---- sap.ui.core.Percentage --------------------------------------------------------------------------


// ---- sap.ui.core.Popup --------------------------------------------------------------------------

/**
 * Creates an instance of <code>sap.ui.core.Popup</code> that can be used to open controls as a Popup,
 * visually appearing in front of other controls.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Associations
 * <ul>
 * <li>{@link #getChildPopups childPopups} : (sap.ui.core.ID | sap.ui.core.Popup)[]</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:opened opened} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:closed closed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * 
 * @class Popup Class is a helper class for controls that want themselves or
 * parts of themselves or even other aggregated or composed controls
 * or plain HTML content to popup on the screen like menues, dialogs, drop down boxes.
 * 
 * It allows the controls to be aligned to other dom elements
 * using the {@link sap.ui.core.Popup.Dock} method. With it you can define where
 * the popup should be docked. One can dock the popup to the top bottom left or right side
 * of a dom ref.
 * 
 * In the case that the popup has no space to show itself in the view port
 * of the current window it tries to open itself to
 * the inverted direction.
 * 
 * <strong>Since 1.12.3</strong> it is possible to add further DOM-element-ids that can get the focus
 * when 'autoclose' is enabled. E.g. the RichTextEditor with running TinyMCE uses this method to
 * be able to focus the Popups of the TinyMCE if the RichTextEditor runs within a Popup/Dialog etc.
 * 
 *  To provide an additional DOM-element that can get the focus the following should be done:
 * 	// create an object with the corresponding DOM-id
 * 	var oObject = {
 * 		id : "this_is_the_most_valuable_id_of_the_DOM_element"
 * 	};
 * 
 * 	// add the event prefix for adding an element to the ID of the corresponding Popup
 * 	var sEventId = "sap.ui.core.Popup.addFocusableContent-" + oPopup.getId();
 * 
 * 	// fire the event with the created event-id and the object with the DOM-id
 * 	sap.ui.getCore().getEventBus().publish("sap.ui", sEventId, oObject);
 * 
 * @param {sap.ui.core.Control | sap.ui.core.Element | DOMNode} oContent the content to render in the popup. In case of sap.ui.core.Element or DOMNode, the content must be present in the page (i.e. rendered). In case of sap.ui.core.Control, the Popup ensures rendering before opening.
 * @param {boolean} [bModal=false] whether the popup should be opened in a modal way (i.e. with blocking background). Setting this to "true" effectively blocks all attempts to focus content outside the modal popup. A modal popup also automatically sets the focus back to whatever was focused when the popup opened.
 * @param {boolean} [bShadow=true] whether the popup should be have a visual shadow underneath (shadow appearance depends on active theme and browser support)
 * @param {boolean} [bAutoClose=false] whether the popup should automatically close when the focus moves out of the popup
 * 
 * @constructor
 * @public
 * @extends sap.ui.base.ManagedObject
 * 
 */
sap.ui.core.Popup = function(oContent,bModal,bShadow,bAutoClose) {};
/**
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.Popup.prototype.closed = function(oControlEvent) {  };

/**
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.Popup.prototype.opened = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:closed closed} event of this <code>sap.ui.core.Popup</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.core.Popup</code> itself.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.Popup</code> itself
 * 
 * @returns {sap.ui.core.Popup} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.attachClosed = function(oData,fnFunction,oListener) { return new sap.ui.core.Popup(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:opened opened} event of this <code>sap.ui.core.Popup</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.core.Popup</code> itself.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.Popup</code> itself
 * 
 * @returns {sap.ui.core.Popup} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.attachOpened = function(oData,fnFunction,oListener) { return new sap.ui.core.Popup(); };

/**
 * Closes the popup.
 * 
 * If the Popup is already closed or in the process of closing, calling this method does nothing.
 * If the Popup is in the process of being opened and closed with a duration of 0, calling this method does nothing.
 * If the Popup is in the process of being opened and closed with an animation duration, the animation will be chained, but this functionality is dangerous,
 * may lead to inconsistent behavior and is thus not recommended and may even be removed.
 * 
 * @param {int} [iDuration] animation duration in milliseconds; default is the jQuery preset "fast".  For iDuration == 0 the closing happens synchronously without animation.
 * @public
 * 
 */
sap.ui.core.Popup.prototype.close = function(iDuration) {  };

/**
 * Closes and destroys this instance of Popup.
 * Does not destroy the hosted content.
 * @public
 * 
 */
sap.ui.core.Popup.prototype.destroy = function() {  };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:closed closed} event of this <code>sap.ui.core.Popup</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.core.Popup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Popup.prototype.detachClosed = function(fnFunction,oListener) { return new sap.ui.core.Popup(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:opened opened} event of this <code>sap.ui.core.Popup</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.core.Popup} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Popup.prototype.detachOpened = function(fnFunction,oListener) { return new sap.ui.core.Popup(); };

/**
 * When the Popup is being destroyed all corresponding references should be
 * deleted as well to prevent any memory leaks.
 * 
 * @public
 * 
 */
sap.ui.core.Popup.prototype.exit = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.Popup with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Popup.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:closed closed} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.core.Popup} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Popup.prototype.fireClosed = function(mParameters) { return new sap.ui.core.Popup(); };

/**
 * Fires event {@link #event:opened opened} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.core.Popup} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.core.Popup.prototype.fireOpened = function(mParameters) { return new sap.ui.core.Popup(); };

/**
 * Determines whether the pop-up should auto closes or not.
 * 
 * @returns {boolean}
 * @since 1.16
 * @public
 * 
 */
sap.ui.core.Popup.prototype.getAutoClose = function() { return false; };

/**
 * Returns this Popup's content.
 * @return {sap.ui.core.Control | DOMRef } the content that has been set previously (if any)
 * @public
 * 
 */
sap.ui.core.Popup.prototype.getContent = function() { return new sap.ui.core.Control(); };

/**
 * This returns true/false if the default followOf method should be used. If a separate followOf-handler was previously added
 * the correspodning function is returned.
 * 
 * @returns {boolean | function} if a function was set it is returned otherwise a boolean value whether the follow of is activated
 * @since 1.13.0
 * @public
 * 
 */
sap.ui.core.Popup.prototype.getFollowOf = function() { return false; };

/**
 * Returns the last z-index that has been handed out. does not increase the internal z-index counter.
 * 
 * @returns {Number}
 * @public
 * 
 */
sap.ui.core.Popup.prototype.getLastZIndex = function() { return null; };

/**
 * Returns the last z-index that has been handed out. does not increase the internal z-index counter.
 * 
 * @returns {Number}
 * @public
 * 
 */
sap.ui.core.Popup.getLastZIndex = function() { return null; };

/**
 * Returns a metadata object for class sap.ui.core.Popup.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.Popup.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the value if a Popup is of modal type
 * 
 * @return {boolean] bModal whether the Popup is of modal type
 * @public
 * 
 */
sap.ui.core.Popup.prototype.getModal = function() {  };

/**
 * Returns the next available z-index on top of the existing/previous popups. Each call increases the internal z-index counter and the returned z-index.
 * 
 * @returns {Number} the next z-index on top of the Popup stack
 * @public
 * 
 */
sap.ui.core.Popup.prototype.getNextZIndex = function() { return null; };

/**
 * Returns the next available z-index on top of the existing/previous popups. Each call increases the internal z-index counter and the returned z-index.
 * 
 * @returns {Number} the next z-index on top of the Popup stack
 * @public
 * 
 */
sap.ui.core.Popup.getNextZIndex = function() { return null; };

/**
 * Returns whether the Popup is currently open, closed, or transitioning between these states.
 * 
 * @returns {sap.ui.core.OpenState} whether the Popup is opened
 * @public
 * 
 */
sap.ui.core.Popup.prototype.getOpenState = function() { return new sap.ui.core.OpenState(); };

/**
 * Returns whether the Popup is currently open (this includes opening and
 * closing animations).
 * 
 * @returns {boolean} whether the Popup is opened (or currently being
 *                            opened or closed)
 * @public
 * 
 */
sap.ui.core.Popup.prototype.isOpen = function() { return false; };

/**
 * Opens the popup's content at the position either specified here or beforehand via {@link #setPosition}.
 * Content must be capable of being positioned via "position:absolute;"
 * All parameters are optional (open() may be called without any parameters). iDuration may just be omitted, but if any of "at", "of", "offset", "collision" is given, also the preceding positioning parameters ("my", at",...) must be given.
 * 
 * If the Popup's OpenState is different from "CLOSED" (i.e. if the Popup is already open, opening or closing), the call is ignored.
 * 
 * @param {int} [iDuration] animation duration in milliseconds; default is the jQuery preset "fast". For iDuration == 0 the opening happens synchronously without animation.
 * @param {sap.ui.core.Popup.Dock} [my=sap.ui.core.Popup.Dock.CenterCenter] the popup content's reference position for docking
 * @param {sap.ui.core.Popup.Dock} [at=sap.ui.core.Popup.Dock.CenterCenter] the "of" element's reference point for docking to
 * @param {string | sap.ui.core.Element | DOMRef | jQuery | jQuery.Event} [of=document] specifies the reference element to which the given content should dock to
 * @param {string} [offset='0 0'] the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.
 * @param {string} [collision='flip'] defines how the position of an element should be adjusted in case it overflows the window in some direction.
 * @param {boolean} [followOf=false] defines whether the popup should follow the dock reference when the reference changes its position.
 * @public
 * 
 */
sap.ui.core.Popup.prototype.open = function(iDuration,my,at,of,offset,collision,followOf) {  };

/**
 * Sets the animation functions to use for opening and closing the Popup. Any null value will be ignored and not change the respective animation function.
 * When called, the animation functions receive three parameters:
 * - the jQuery object wrapping the DomRef of the popup
 * - the requested animation duration
 * - a function that MUST be called once the animation has completed
 * 
 * @param {function} fnOpen
 * @param {function} fnClose
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setAnimations = function(fnOpen,fnClose) { return new sap.ui.core.Popup(); };

/**
 * Used to specify whether the Popup should close as soon as
 * - for non-touch environment: the focus leaves
 * - for touch environment: user clicks the area which is outside the popup itself, the dom elemnt which popup aligns to (except document),
 *  and one of the autoCloseAreas set by calling setAutoCloseAreas.
 * @param {boolean} bAutoClose whether the Popup should close as soon as the focus leaves
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setAutoClose = function(bAutoClose) { return new sap.ui.core.Popup(); };

/**
 * Sets the additional areas in the page that are considered part of the Popup when autoclose is enabled.
 * - non-touch environment: if the focus leaves the Popup but immediately enters one of these areas, the Popup does NOT close.
 * - touch environment: if user clicks one of these areas, the Popup does NOT close.
 * 
 * @param {DomRef[]|sap.ui.core.Element[]|string[]} aAutoCloseAreas an array containing DOM elements, sap.ui.core.Element
 *  or an ID which are considered part of the Popup; a value of null removes all previous areas
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setAutoCloseAreas = function(aAutoCloseAreas) { return new sap.ui.core.Popup(); };

/**
 * Sets the content this instance of the Popup should render.
 * Content must be capable of being positioned via position:absolute;
 * @param {sap.ui.core.Control | DOMRef } oContent
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setContent = function(oContent) { return new sap.ui.core.Popup(); };

/**
 * Sets the durations for opening and closing animations.
 * Null values and values < 0 are ignored.
 * A duration of 0 means no animation.
 * Default value is "fast" which is the jQuery constant for "200 ms".
 * 
 * @param {int} iOpenDuration in milliseconds
 * @param {int} iCloseDuration in milliseconds
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setDurations = function(iOpenDuration,iCloseDuration) { return new sap.ui.core.Popup(); };

/**
 * This enabled/disables the Popup to follow its opening reference. If the Popup is open and a followOf should
 * be set the corresponding listener will be attached.
 * 
 * @param {boolean | function | null} followOf a boolean value enabled/disables the default followOf-Handler. Or an individual handler can be given.
 * null deletes all followOf settings.
 * @since 1.13.0
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setFollowOf = function(followOf) {  };

/**
 * Sets the ID of the element that should be focused once the popup opens.
 * If the given ID is the ID of an existing Control, this Control's focusDomRef will be focused instead, which may be an HTML element with a different ID (usually a sub-element inside the Control).
 * If no existing element ID is supplied and the Popup is modal or auto-close, the Popup will instead focus the first focusable element.
 * 
 * @param {string} sId the ID of the DOM element to focus
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setInitialFocusId = function(sId) {  };

/**
 * Set an initial z-index that should be used by all Popup so all Popups start at least
 * with the set z-index.
 * If the given z-index is lower than any current available z-index the highest z-index will be used.
 * 
 * @param {Number} iInitialZIndex is the initial z-index
 * @public
 * @since 1.30.0
 * 
 */
sap.ui.core.Popup.setInitialZIndex = function(iInitialZIndex) {  };

/**
 * Used to specify whether the Popup should be modal. A modal popup will put some fading "block layer" over the background and
 * prevent attempts to put the focus outside/below the popup.
 * Setting this while the popup is open will change "block layer" immediately.
 * 
 * @param {boolean} bModal whether the Popup is of modal type
 * @param {string} [sModalCSSClass] a CSS class (or space-separated list of classes) that should be added to the block layer
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setModal = function(bModal,sModalCSSClass) { return new sap.ui.core.Popup(); };

/**
 * Sets the position of the Popup (if you refer to a Control as anchor then do not
 * use the DOMRef of the control which might change after re-renderings).
 * Optional parameters can only be omitted when all subsequent parameters are omitted as well.
 * 
 * @param {sap.ui.core.Popup.Dock} my specifies which point of the given Content should be aligned
 * @param {sap.ui.core.Popup.Dock | {left: sap.ui.core.CSSSize, top: sap.ui.core.CSSSize}} at specifies the point of the reference element to which the given Content should be aligned
 * @param {string | sap.ui.core.Element | DOMRef | jQuery | jQuery.Event} [of=document] specifies the reference element to which the given content should be aligned as specified in the other parameters
 * @param {string} [offset='0 0'] the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.
 * @param {string} [collision] defines how the position of an element should be adjusted in case it overflows the window in some direction. The valid values that refer to jQuery-UI's position parameters are "flip", "fit" and "none".
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setPosition = function(my,at,of,offset,collision) { return new sap.ui.core.Popup(); };

/**
 * Determines whether the Popup should have a shadow (in supporting browsers).
 * This also affects a currently open popup.
 * 
 * @param {boolean} bShowShadow whether to show a shadow
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.Popup.prototype.setShadow = function(bShowShadow) { return new sap.ui.core.Popup(); };


// ---- sap.ui.core.Popup.Dock --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.Popup.Dock.toString = function() { return ""; };

// ---- sap.ui.core.PopupInterface --------------------------------------------------------------------------


// ---- sap.ui.core.Priority --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.Priority.toString = function() { return ""; };

// ---- sap.ui.core.Renderer --------------------------------------------------------------------------

/**
 * Creates a new static renderer class that extends a given renderer.
 * 
 * This method can be used with two signatures that are explained below.
 * In both variants, the returned renderer class inherits all properties (methods, fields)
 * from the given parent renderer class. Both variants also add an 'extend' method to the
 * created renderer class that behaves like the new signature of this <code>Renderer.extend</code>
 * method, but creates subclasses of the new class, not of <code>sap.ui.core.Renderer</code>.
 * 
 * <b>New Signature</b><br>
 * In the new signature variant, two parameters must be given: a qualified name
 * for the new renderer (its class name), and an optional object literal that contains
 * methods or fields to be added to the new renderer class.
 * 
 * This signature has been designed to resemble the class extension mechanism as
 * provided by {@link sap.ui.base.Object.extend Object.extend}.
 * 
 * <pre>
 * sap.ui.define(['sap/ui/core/Renderer'],
 *     function(Renderer) {
 *     "use strict";
 * 
 *     var LabelRenderer = Renderer.extend('sap.m.LabelRenderer', {
 *         render: function(oRM, oControl) {
 * 
 *             renderPreamble(oRM, oControl);
 * 
 *             // implementation core renderer logic here
 * 
 *             renderPostamble(oRM, oControl);
 * 
 *         },
 * 
 *         renderPreamble : function(oRM, oControl) {
 *         ...
 *         },
 * 
 *         renderPostamble : function(oRM, oControl) {
 *         ...
 *         }
 * 
 *     });
 * 
 *     return LabelRenderer;
 * });
 * </pre>
 * 
 * The extension of Renderers works across multiple levels. A FancyLabelRenderer can
 * extend the above LabelRenderer:
 * 
 * <pre>
 * sap.ui.define(['sap/m/LabelRenderer'],
 *     function(LabelRenderer) {
 *     "use strict";
 * 
 *     var FancyLabelRenderer = LabelRenderer.extend('sap.mylib.FancyLabelRenderer', {
 *         render: function(oRM, oControl) {
 * 
 *             // call base renderer
 *             LabelRenderer.renderPreamble(oRM, oControl);
 * 
 *             // ... do your own fancy rendering here
 * 
 *             // call base renderer again
 *             LabelRenderer.renderPostamble(oRM, oControl);
 *         }
 *     });
 * 
 *     return FancyLabelRenderer;
 * });
 * </pre>
 * 
 * <b>Note:</b> the new signature no longer requires the <code>bExport</code> flag to be set for
 * the enclosing {@link sap.ui.define} call. The Renderer base class takes care of the necessary
 * global export of the renderer. This allows Non-SAP developers to write a renderer that complies with
 * the documented restriction for <code>sap.ui.define</code> (no use of bExport = true outside
 * sap.ui.core projects).
 * 
 * <b>Deprecated Signature</b><br>
 * The deprecated old signature expects just one parameter: a renderer that should be extended.
 * With that signature the renderer can't be exported globally as the name of the renderer class
 * is not known.
 * 
 * For compatibility reasons, the class created by the deprecated signature contains a property
 * <code>_super</code> that references the parent class. It shouldn't be used by applications / control
 * developers as it doesn't work reliably for deeper inheritance chains: if the old variant of
 * <code>Renderer.extend</code> is used on two or more levels of the inheritance hierarchy, the
 * <code>_super</code> property of the resulting renderer class will always point to the implementation
 * of the base renderer of the last call to extend. Instead of using <code>this._super</code>, renderer
 * implementations should use the new signature variant and access the base implementation of a method
 * via the AMD reference to the base renderer (as shown in the FancyLabelRenderer example above).
 * 
 * @param {string|object} vName either the name of the new renderer class (new signature) or the base
 *                              renderer to extend (deprecated signature)
 * @param {object} [oRendererInfo] methods and/or properties that should be added to the new renderer class
 * @return {object} a new static renderer class that can be enriched further
 * @public
 * 
 * @memberof sap.ui.core.Renderer
 */
sap.ui.core.Renderer.extend = function(vName,oRendererInfo) { return new Object(); };

/**
 * Returns the TextAlignment for the provided configuration.
 * 
 * @param {sap.ui.core.TextAlign} oTextAlign the text alignment of the Control
 * @param {sap.ui.core.TextDirection} oTextDirection the text direction of the Control
 * @returns {string} the actual text alignment that must be set for this environment
 * @protected
 * 
 * @memberof sap.ui.core.Renderer
 */
sap.ui.core.Renderer.getTextAlign = function(oTextAlign,oTextDirection) { return ""; };


// ---- sap.ui.core.RenderManager --------------------------------------------------------------------------

/**
 * Creates an instance of the RenderManager.
 * 
 * Applications or controls must not call the <code>RenderManager</code> constructor on their own
 * but should use the {@link sap.ui.core.Core#createRenderManager sap.ui.getCore().createRenderManager()}
 * method to create an instance for their exclusive use.
 * 
 * @class RenderManager that will take care for rendering Controls.
 * 
 * For the default rendering task of UI5, a shared RenderManager is created and owned by <code>sap.ui.core.Core</code>.
 * Controls or other code that want to render controls outside the default rendering task
 * can create a private instance of RenderManager by calling the
 * {@link sap.ui.core.Core#createRenderManager sap.ui.getCore().createRenderManager()} method.
 * When such a private instance is no longer needed, it should be {@link #destroy destroyed}.
 * 
 * Control renderers only have access to a subset of the public and protected instance methods of
 * this class. The instance methods {@link #flush}, {@link #render} and {@link #destroy} are not part
 * of that subset and are reserved to the owner of the corresponding RenderManager instance.
 * Renderers will use the provided methods to create their HTML output. The RenderManager will
 * collect the HTML output and inject the final HTML DOM at the desired location.
 * 
 * 
 * <h3>Renderers</h3>
 * When the {@link #renderControl} method of the RenderManager is invoked, it will retrieve
 * the default renderer for that control. By convention, the default renderer is implemented in its
 * own namespace (static class) which matches the name of the control's class with the additional
 * suffix 'Renderer'. So for a control <code>sap.m.Input</code> the default renderer will be searched
 * for under the global name <code>sap.m.Input<i>Renderer</i></code>.
 * 
 * 
 * @see sap.ui.core.Core
 * @see sap.ui.getCore
 * 
 * @extends Object
 * @version 1.48.4
 * @constructor
 * @public
 * 
 */
sap.ui.core.RenderManager = function() {};
/**
 * Adds a class to the class collection if the name is not empty or null.
 * The class collection is flushed if it is written to the buffer using {@link #writeClasses}
 * 
 * @param {string} sName name of the class to be added; null values are ignored
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * @SecSink {0|XSS} Classes are written to HTML without validation
 * 
 */
sap.ui.core.RenderManager.prototype.addClass = function(sName) { return new sap.ui.core.RenderManager(); };

/**
 * Adds a style property to the style collection if the value is not empty or null
 * The style collection is flushed if it is written to the buffer using {@link #writeStyle}
 * 
 * @param {string} sName Name of the CSS property to write
 * @param {string|float|int} value Value to write
 * @return {sap.ui.core.RenderManager} This render manager instance to allow chaining
 * @public
 * @SecSink {0 1|XSS} Styles are written to HTML without validation
 * 
 */
sap.ui.core.RenderManager.prototype.addStyle = function(sName,value) { return new sap.ui.core.RenderManager(); };

/**
 * Cleans up the rendering state of the given control without rendering it.
 * 
 * A control is responsible for the rendering of all its child controls.
 * But in some cases it makes sense that a control only renders a subset of its children
 * based on some criterion. For example, a typical carousel control might, for performance
 * reasons, only render the currently visible children (and maybe some child before and
 * after the visible area to facilitate slide-in / slide-out animations), but not all children.
 * This leads to situations where a child had been rendered before, but shouldn't be rendered
 * anymore after an update of the carousel's position. The DOM related state of that child then
 * must be cleaned up correctly, e.g. by de-registering resize handlers or native event handlers.
 * <code>cleanupControlWithoutRendering</code> helps with that task by triggering the same
 * activities that the normal rendering triggers before the rendering of a control
 * (e.g. it fire the <code>BeforeRendering</code> event). It just doesn't call the renderer
 * and the control will not receive an <code>AfterRendering</code> event.
 * 
 * The following example shows how <code>renderControl</code> and <code>cleanupControlWithoutRendering</code>
 * should be used:
 * 
 * <pre>
 *   CarouselRenderer.render = function(rm, oCarousel){
 * 
 *     ...
 * 
 *     oCarousel.getPages().forEach( oPage ) {
 *        if ( oCarousel.isPageToBeRendered( oPage ) ) {
 *           rm.renderControl( oPage ); // onBeforeRendering, render, later onAfterRendering
 *        } else {
 *           rm.cleanupControlWithoutRendering( oPage ); // onBeforeRendering
 *        }
 *     }
 * 
 *     ...
 * 
 *   };
 * </pre>
 * 
 * <h3>DOM Removal</h3>
 * The method does not remove the DOM of the given control. The caller of this method has
 * to take care to remove it at some later point in time. It should indeed be <i>later</i>,
 * not <i>before</i> as the <code>onBeforeRendering</code> hook of the control might need
 * access to the old DOM for a proper cleanup.
 * 
 * For parents which are rendered with the normal mechanism as shown in the example above,
 * the removal of the old child DOM is guaranteed. The whole DOM of the parent control
 * (including the DOM of the no longer rendered child) will be replaced with new DOM (no
 * longer containing the child) when the rendering cycle finishes.
 * 
 * <b>Note:</b>: the functionality of this method is different from the default handling for
 * invisible controls (controls with <code>visible == false</code>). The standard rendering
 * for invisible controls still renders a placeholder DOM. This allows re-rendering of the
 * invisible control once it becomes visible again without a need to render its parent, too.
 * Children that are cleaned up with this method here, are supposed to have no more DOM at all.
 * Rendering them later on therefore requires an involvement (typically: a rendering) of
 * their parent.
 * 
 * @param {sap.ui.core.Control} oControl Control that should be cleaned up
 * @public
 * @since 1.22.9
 * 
 */
sap.ui.core.RenderManager.prototype.cleanupControlWithoutRendering = function(oControl) {  };

/**
 * Creates the ID to be used for the invisible Placeholder DOM element.
 * This method can be used to get direct access to the placeholder DOM element.
 * Also statically available as RenderManager.createInvisiblePlaceholderId()
 * 
 * @param {sap.ui.core.Element} oElement - The Element instance for which to create the placeholder ID
 * @returns {string} The ID used for the invisible Placeholder of this element
 * @static
 * @protected
 * 
 */
sap.ui.core.RenderManager.createInvisiblePlaceholderId = function(oElement) { return ""; };

/**
 * Cleans up the resources associated with this instance.
 * 
 * After the instance has been destroyed, it must not be used anymore.
 * Applications should call this function if they don't need the instance any longer.
 * 
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.destroy = function() {  };

/**
 * Searches "to-be-preserved" nodes for the given control id.
 * 
 * @param {string} sId control id to search content for.
 * @return {jQuery} a jQuery collection representing the found content
 * @public
 * @static
 * 
 */
sap.ui.core.RenderManager.findPreservedContent = function(sId) { return null; };

/**
 * Renders the content of the rendering buffer into the provided DOM node.
 * 
 * This function must not be called within control renderers.
 * 
 * Usage:
 * <pre>
 * 
 *   // Create a new instance of the RenderManager
 *   var rm = sap.ui.getCore().createRenderManager();
 * 
 *   // Use the writer API to fill the buffers
 *   rm.write(...);
 *   rm.renderControl(oControl);
 *   rm.write(...);
 *   ...
 * 
 *   // Finally flush the buffer into the provided DOM node (The current content is removed)
 *   rm.flush(oDomNode);
 * 
 *   // If the instance is not needed anymore, destroy it
 *   rm.destroy();
 * 
 * </pre>
 * 
 * @param {Element} oTargetDomNode Node in the DOM where the buffer should be flushed into
 * @param {boolean} bDoNotPreserve Determines whether the content is preserved (<code>false</code>) or not (<code>true</code>)
 * @param {boolean|int} vInsert Determines whether the buffer of the target DOM node is expanded (<code>true</code>) or
 *                  replaced (<code>false</code>), or the new entry is inserted at a specific position
 *                  (value of type <code>int</code>)
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.flush = function(oTargetDomNode,bDoNotPreserve,vInsert) {  };

/**
 * Returns the configuration object
 * Shortcut for <code>sap.ui.getCore().getConfiguration()</code>
 * @return {sap.ui.core.Configuration} the configuration object
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.getConfiguration = function() { return new sap.ui.core.Configuration(); };

/**
 * Renders the given {@link sap.ui.core.Control} and finally returns
 * the content of the rendering buffer.
 * Ensures the buffer is restored to the state before calling this method.
 * 
 * @param {sap.ui.core.Control}
 *            oControl the Control whose HTML should be returned.
 * @return {string} the resulting HTML of the provided control
 * @deprecated Since version 0.15.0. Use <code>flush()</code> instead render content outside the rendering phase.
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.getHTML = function(oControl) { return ""; };

/**
 * Returns the hidden area reference belonging to this window instance.
 * 
 * @return {Element} the hidden area reference belonging to this core instance.
 * @public
 * @static
 * 
 */
sap.ui.core.RenderManager.getPreserveAreaRef = function() { return null; };

/**
 * Returns the renderer class for a given control instance
 * 
 * @param {sap.ui.core.Control} oControl the control that should be rendered
 * @return the renderer class for a given control instance
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.getRenderer = function(oControl) {  };

/**
 * Returns the renderer class for a given control instance
 * 
 * @param {sap.ui.core.Control}
 *            oControl the control that should be rendered
 * @type function
 * @return the renderer class for a given control instance
 * @static
 * @public
 * 
 */
sap.ui.core.RenderManager.getRenderer = function(oControl) { return function() {}; };

/**
 * Collects descendants of the given root node that need to be preserved before the root node
 * is wiped out. The "to-be-preserved" nodes are moved to a special, hidden 'preserve' area.
 * 
 * A node is declared "to-be-preserved" when it has the <code>data-sap-ui-preserve</code>
 * attribute set. When the optional parameter <code>bPreserveNodesWithId</code> is set to true,
 * then nodes with an id are preserved as well and their <code>data-sap-ui-preserve</code> attribute
 * is set automatically. This option is used by UIAreas when they render for the first time and
 * simplifies the handling of predefined HTML content in a web page.
 * 
 * The "to-be-preserved" nodes are searched with a depth first search and moved to the 'preserve'
 * area in the order that they are found. So for direct siblings the order should be stable.
 * 
 * @param {Element} oRootNode to search for "to-be-preserved" nodes
 * @param {boolean} [bPreserveRoot=false] whether to preserve the root itself
 * @param {boolean} [bPreserveNodesWithId=false] whether to preserve nodes with an id as well
 * @public
 * @static
 * 
 */
sap.ui.core.RenderManager.preserveContent = function(oRootNode,bPreserveRoot,bPreserveNodesWithId) {  };

/**
 * Renders the given control to the provided DOMNode.
 * 
 * If the control is already rendered in the provided DOMNode the DOM of the control is replaced. If the control
 * is already rendered somewhere else the current DOM of the control is removed and the new DOM is appended
 * to the provided DOMNode.
 * 
 * This function must not be called within control renderers.
 * 
 * @param {sap.ui.core.Control} oControl the Control that should be rendered.
 * @param {Element} oTargetDomNode The node in the DOM where the result of the rendering should be inserted.
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.render = function(oControl,oTargetDomNode) {  };

/**
 * Turns the given control into its HTML representation and appends it to the
 * rendering buffer.
 * 
 * If the given control is undefined or null, then nothing is rendered.
 * 
 * @param {sap.ui.core.Control} oControl the control that should be rendered
 * @returns {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.renderControl = function(oControl) { return new sap.ui.core.RenderManager(); };

/**
 * @param {string} sKey
 * @deprecated Not implemented - DO NOT USE
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.translate = function(sKey) {  };

/**
 * Write the given texts to the buffer
 * @param {...string|number} sText (can be a number too)
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * @SecSink {*|XSS}
 * 
 */
sap.ui.core.RenderManager.prototype.write = function(sText) { return new sap.ui.core.RenderManager(); };

/**
 * @deprecated Not implemented - DO NOT USE
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeAcceleratorKey = function() { return new sap.ui.core.RenderManager(); };

/**
 * Writes the accessibility state (see WAI-ARIA specification) of the provided element into the HTML
 * based on the element's properties and associations.
 * 
 * The ARIA properties are only written when the accessibility feature is activated in the UI5 configuration.
 * 
 * The following properties/values to ARIA attribute mappings are done (if the element does have such properties):
 * <ul>
 * <li><code>editable===false</code> => <code>aria-readonly="true"</code></li>
 * <li><code>enabled===false</code> => <code>aria-disabled="true"</code></li>
 * <li><code>visible===false</code> => <code>aria-hidden="true"</code></li>
 * <li><code>required===true</code> => <code>aria-required="true"</code></li>
 * <li><code>selected===true</code> => <code>aria-selected="true"</code></li>
 * <li><code>checked===true</code> => <code>aria-checked="true"</code></li>
 * </ul>
 * 
 * In case of the required attribute also the Label controls which referencing the given element in their 'for' relation
 * are taken into account to compute the <code>aria-required</code> attribute.
 * 
 * Additionally, the association <code>ariaDescribedBy</code> and <code>ariaLabelledBy</code> are used to write
 * the ID lists of the ARIA attributes <code>aria-describedby</code> and <code>aria-labelledby</code>.
 * 
 * Label controls that reference the given element in their 'for' relation are automatically added to the
 * <code>aria-labelledby</code> attributes.
 * 
 * Note: This function is only a heuristic of a control property to ARIA attribute mapping. Control developers
 * have to check whether it fulfills their requirements. In case of problems (for example the RadioButton has a
 * <code>selected</code> property but must provide an <code>aria-checked</code> attribute) the auto-generated
 * result of this function can be influenced via the parameter <code>mProps</code> as described below.
 * 
 * The parameter <code>mProps</code> can be used to either provide additional attributes which should be added and/or
 * to avoid the automatic generation of single ARIA attributes. The 'aria-' prefix will be prepended automatically to the keys
 * (Exception: Attribute 'role' does not get the prefix 'aria-').
 * 
 * Examples:
 * <code>{hidden : true}</code> results in <code>aria-hidden="true"</code> independent of the presence or absence of
 * the visibility property.
 * <code>{hidden : null}</code> ensures that no <code>aria-hidden</code> attribute is written independent of the presence
 * or absence of the visibility property.
 * The function behaves in the same way for the associations <code>ariaDescribedBy</code> and <code>ariaLabelledBy</code>.
 * To append additional values to the auto-generated <code>aria-describedby</code> and <code>aria-labelledby</code> attributes
 * the following format can be used:
 * <code>{describedby : {value: "id1 id2", append: true}}</code> => <code>aria-describedby="ida idb id1 id2"</code> (assuming that "ida idb"
 * is the auto-generated part based on the association <code>ariaDescribedBy</code>).
 * 
 * @param {sap.ui.core.Element}
 *            [oElement] the element whose accessibility state should be rendered
 * @param {Object}
 *            [mProps] a map of properties that should be added additionally or changed.
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeAccessibilityState = function(oElement,mProps) { return new sap.ui.core.RenderManager(); };

/**
 * Writes the attribute and its value into the HTML.
 * 
 * For details about the escaping refer to {@link jQuery.sap.encodeHTML}
 * 
 * @param {string} sName Name of the attribute
 * @param {string | number | boolean} vValue Value of the attribute
 * @return {sap.ui.core.RenderManager} This render manager instance to allow chaining
 * @public
 * @SecSink {0 1|XSS} Attributes are written to HTML without validation
 * 
 */
sap.ui.core.RenderManager.prototype.writeAttribute = function(sName,vValue) { return new sap.ui.core.RenderManager(); };

/**
 * Writes the attribute and a value into the HTML, the value will be encoded.
 * 
 * The value is properly encoded to avoid XSS attacks.
 * 
 * @param {string} sName Name of the attribute
 * @param {any} vValue Value of the attribute
 * @return {sap.ui.core.RenderManager} This render manager instance to allow chaining
 * @public
 * @SecSink {0|XSS}
 * 
 */
sap.ui.core.RenderManager.prototype.writeAttributeEscaped = function(sName,vValue) { return new sap.ui.core.RenderManager(); };

/**
 * Writes and flushes the class collection (all CSS classes added by "addClass()" since the last flush).
 * Also writes the custom style classes added by the application with "addStyleClass(...)". Custom classes are
 * added by default from the currently rendered control. If an oElement is given, this Element's custom style
 * classes are added instead. If oElement === false, no custom style classes are added.
 * 
 * @param {sap.ui.core.Element | boolean} [oElement] an Element from which to add custom style classes (instead of adding from the control itself)
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeClasses = function(oElement) { return new sap.ui.core.RenderManager(); };

/**
 * Writes the controls data into the HTML.
 * Control Data consists at least of the id of a control
 * @param {sap.ui.core.Control} oControl the control whose identifying information should be written to the buffer
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeControlData = function(oControl) { return new sap.ui.core.RenderManager(); };

/**
 * Writes the elements data into the HTML.
 * Element Data consists at least of the id of an element
 * @param {sap.ui.core.Element} oElement the element whose identifying information should be written to the buffer
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeElementData = function(oElement) { return new sap.ui.core.RenderManager(); };

/**
 * Escape text for HTML and write it to the buffer.
 * 
 * For details about the escaping refer to {@link jQuery.sap.encodeHTML}
 * 
 * @param {any} sText
 * @param {boolean} bLineBreaks Whether to convert line breaks into <br> tags
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeEscaped = function(sText,bLineBreaks) { return new sap.ui.core.RenderManager(); };

/**
 * Writes either an &lt;img&gt; tag for normal URI or a &lt;span&gt; tag with needed properties for an icon URI.
 * 
 * Additional classes and attributes can be added to the tag with the second and third parameter.
 * All of the given attributes are escaped for security consideration.
 * 
 * When an &lt;img&gt; tag is rendered, the following two attributes are added by default
 * and can be overwritten with corresponding values in the <code>mAttributes</code> parameter:
 * <ul>
 * <li><code>role: "presentation"</code></Li>
 * <li><code>alt: ""</code></li>
 * </ul>
 * 
 * @param {sap.ui.core.URI} sURI URI of an image or of an icon registered in {@link sap.ui.core.IconPool}
 * @param {array|string} [aClasses] Additional classes that are added to the rendered tag
 * @param {object} [mAttributes] Additional attributes that will be added to the rendered tag
 * @returns {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeIcon = function(sURI,aClasses,mAttributes) { return new sap.ui.core.RenderManager(); };

/**
 * Writes necessary invisible control/element placeholder data into the HTML.
 * 
 * Controls should use this method only if the standard implementation of the RenderManager doesn't fit their needs.
 * That standard implementation renders an invisible &lt;span&gt; element for controls with <code>visible:false</code> to improve
 * re-rendering performance. Due to the fault tolerance of the HTML5 standard, such &lt;span&gt; elements are accepted in many
 * scenarios and won't appear in the render tree of the browser, However, in some cases, controls may need to write a different
 * element when the &lt;span&gt; is not an allowed element (e.g. within the &lt;tr&gt; or &lt;li&gt; group).
 * 
 * The caller needs to start an opening HTML tag, then call this method, then complete the opening and closing tag.
 * 
 * <pre>
 * 
 *   oRenderManager.write("&lt;tr");
 *   oRenderManager.writeInvisiblePlaceholderData(oControl);
 *   oRenderManager.write("&gt;&lt;/tr");
 * 
 * </pre>
 * 
 * @param {sap.ui.core.Element} oElement An instance of sap.ui.core.Element
 * @return {sap.ui.core.RenderManager} This render manager instance to allow chaining
 * @protected
 * 
 */
sap.ui.core.RenderManager.prototype.writeInvisiblePlaceholderData = function(oElement) { return new sap.ui.core.RenderManager(); };

/**
 * Writes and flushes the style collection
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * 
 */
sap.ui.core.RenderManager.prototype.writeStyles = function() { return new sap.ui.core.RenderManager(); };


// ---- sap.ui.core.ResizeHandler --------------------------------------------------------------------------

/**
 * Deregisters a previously registered handler for resize events with the given registration ID.
 * 
 * @param {string} sId
 *            The registration ID of the handler to deregister. The ID was provided by function {@link sap.ui.core.ResizeHandler.register}
 *            when the handler was registered.
 * @public
 * 
 * @memberof sap.ui.core.ResizeHandler
 */
sap.ui.core.ResizeHandler.deregister = function(sId) {  };

/**
 * Creates a new subclass of class sap.ui.core.ResizeHandler with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 * @memberof sap.ui.core.ResizeHandler
 */
sap.ui.core.ResizeHandler.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.ResizeHandler.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 * @memberof sap.ui.core.ResizeHandler
 */
sap.ui.core.ResizeHandler.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Registers the given event handler for resize events on the given DOM element or control.
 * 
 * <b>Note:</b> This function must not be used before the UI5 framework is initialized.
 * Please use the {@link sap.ui.core.Core#attachInit init event} of UI5 if you are not sure whether this is the case.
 * 
 * The resize handler periodically checks the dimensions of the registered reference. Whenever it detects changes, an event is fired.
 * Be careful when changing dimensions within the event handler which might cause another resize event and so on.
 * 
 * The available parameters of the resize event are:
 * <ul>
 * <li><code>oEvent.target</code>: The DOM element of which the dimensions were checked</li>
 * <li><code>oEvent.size.width</code>: The current width of the DOM element in pixels</li>
 * <li><code>oEvent.size.height</code>: The current height of the DOM element in pixels</li>
 * <li><code>oEvent.oldSize.width</code>: The previous width of the DOM element in pixels</li>
 * <li><code>oEvent.oldSize.height</code>: The previous height of the DOM element in pixels</li>
 * <li><code>oEvent.control</code>: The control which was given during registration of the event handler (if present)</li>
 * </ul>
 * 
 * @param {DOMRef|sap.ui.core.Control} oRef The control or the DOM reference for which the given event handler should be registered (beside the window)
 * @param {function} fHandler
 *             The event handler which should be called whenever the size of the given reference is changed.
 *             The event object is passed as first argument to the event handler. See the description of this function for more details about the available parameters of this event.
 * @return {string}
 *             A registration ID which can be used for deregistering the event handler, see {@link sap.ui.core.ResizeHandler.deregister}.
 *             If the UI5 framework is not yet initialized <code>null</code> is returned.
 * @public
 * 
 * @memberof sap.ui.core.ResizeHandler
 */
sap.ui.core.ResizeHandler.register = function(oRef,fHandler) { return ""; };


// ---- sap.ui.core.routing.HashChanger --------------------------------------------------------------------------

/**
 * 
 * @class Class for manipulating and receiving changes of the browserhash with the hasher framework.
 * Fires a "hashChanged" event if the browser hash changes.
 * @extends sap.ui.base.EventProvider
 * 
 * @public
 * 
 */
sap.ui.core.routing.HashChanger = function() {};
/**
 * The 'hashChanged' event is fired when the URL hash is changed
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.oldHash The URL hash before it's changed
 * @param {object} oEvent.getParameters.newHash The new URL hash
 * @protected
 * 
 */
sap.ui.core.routing.HashChanger.prototype.hashChanged = function(oEvent) {  };

/**
 * The 'hashReplaced' event is fired when {@link sap.ui.core.routing.HashChanger#replaceHash} is called
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.sHash The URL hash
 * @protected
 * 
 */
sap.ui.core.routing.HashChanger.prototype.hashReplaced = function(oEvent) {  };

/**
 * The 'hashSet' event is fired when {@link sap.ui.core.routing.HashChanger#setHash} is called
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.sHash The URL hash
 * @protected
 * 
 */
sap.ui.core.routing.HashChanger.prototype.hashSet = function(oEvent) {  };

/**
 * Cleans the event registration
 * @see sap.ui.base.Object.prototype.destroy
 * @protected
 * 
 */
sap.ui.core.routing.HashChanger.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.core.routing.HashChanger with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.routing.HashChanger.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires the hashchanged event, may be extended to modify the hash before fireing the event
 * @param {string} newHash the new hash of the browser
 * @param {string} oldHash - the previous hash
 * @protected
 * 
 */
sap.ui.core.routing.HashChanger.prototype.fireHashChanged = function(newHash,oldHash) {  };

/**
 * Gets the current hash
 * 
 * @return {string} the current hash
 * @public
 * 
 */
sap.ui.core.routing.HashChanger.prototype.getHash = function() { return ""; };

/**
 * Gets a global singleton of the HashChanger. The singleton will get created when this function is invoked for the first time.
 * @public
 * @static
 * 
 */
sap.ui.core.routing.HashChanger.getInstance = function() {  };

/**
 * Returns a metadata object for class sap.ui.core.routing.HashChanger.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.routing.HashChanger.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Will start listening to hashChanges with the parseHash function.
 * This will also fire a hashchanged event with the initial hash.
 * 
 * @public
 * @return false if it was initialized before, true if it was initialized the first time
 * 
 */
sap.ui.core.routing.HashChanger.prototype.init = function() {  };

/**
 * Replaces the hash to a certain value. When using the replace function no browser history is written.
 * If you want to have an entry in the browser history, please use set setHash function.
 * @param {string} sHash the hash
 * @public
 * 
 */
sap.ui.core.routing.HashChanger.prototype.replaceHash = function(sHash) {  };

/**
 * Sets the hashChanger to a new instance, destroys the old one and copies all its event listeners to the new one
 * @param {sap.ui.core.routing.HashChanger} oHashChanger the new instance for the global singleton
 * @protected
 * 
 */
sap.ui.core.routing.HashChanger.replaceHashChanger = function(oHashChanger) {  };

/**
 * Sets the hash to a certain value. When using the set function a browser history  entry is written.
 * If you do not want to have an entry in the browser history, please use set replaceHash function.
 * @param {string} sHash the hash
 * @public
 * 
 */
sap.ui.core.routing.HashChanger.prototype.setHash = function(sHash) {  };


// ---- sap.ui.core.routing.History --------------------------------------------------------------------------

/**
 * Used to determine the {@link sap.ui.core.routing.HistoryDirection} of the current or a future navigation,
 * done with a {@link sap.ui.core.routing.Router} or {@link sap.ui.core.routing.HashChanger}.
 * 
 * <strong>ATTENTION:</strong> this class will not be accurate if someone does hash-replacement without the named classes above
 * If you are manipulating the hash directly this class is not supported anymore.
 * 
 * @param {sap.ui.core.routing.HashChanger} oHashChanger required, without a HashChanger this class cannot work. The class needs to be aware of the hash-changes.
 * @public
 * @class
 * 
 */
sap.ui.core.routing.History = function(oHashChanger) {};
/**
 * Determines what the navigation direction for a newly given hash would be
 * It will say Unknown if there is a history foo - bar (current history) - foo
 * If you now ask for the direction of the hash "foo" you get Unknown because it might be backwards or forwards.
 * For hash replacements, the history stack will be replaced at this position for the history.
 * @param {string} [sNewHash] optional, if this parameter is not passed the last hashChange is taken.
 * @returns {sap.ui.core.routing.HistoryDirection} or undefined, if no navigation has taken place yet.
 * @public
 * 
 */
sap.ui.core.routing.History.prototype.getDirection = function(sNewHash) { return new sap.ui.core.routing.HistoryDirection(); };

/**
 * @public
 * @returns { sap.ui.core.routing.History } a global singleton that gets created as soon as the sap.ui.core.routing.History is required
 * 
 */
sap.ui.core.routing.History.getInstance = function() { return new sap.ui.core.routing.History(); };

/**
 * gets the previous hash in the history - if the last direction was Unknown or there was no navigation yet, undefined will be returned
 * @returns {string} or undefined
 * @public
 * 
 */
sap.ui.core.routing.History.prototype.getPreviousHash = function() { return ""; };


// ---- sap.ui.core.routing.HistoryDirection --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.routing.HistoryDirection.toString = function() { return ""; };

// ---- sap.ui.core.routing.Route --------------------------------------------------------------------------

/**
 * Instantiates an SAPUI5 Route
 * 
 * 
 * @class
 * @param {sap.ui.core.routing.Router} The router instance, the route will be added to.
 * @param {object} oConfig configuration object for the route
 * @param {string} oConfig.name the name of the route - it will be used to retrieve the route from the router, it needs to be unique per router instance.</li>
 * @param {string} [oConfig.pattern] the url pattern where it needs to match again. A pattern may consist of the following:
 * <ul>
 * <li>
 * hardcoded parts: "pattern" : "product/settings" - this pattern will only match if the hash of the browser is product/settings and no arguments will be passed to the events of the route.</br>
 * </li>
 * <li>
 * mandatory parameters: "pattern" : "product/{id}" - {id} is a mandatory parameter, e. g. the following hashes would match: product/5, product/3. The pattenMatched event will get 5 or 3 passed as id in its arguments.The hash product/ will not match.</br>
 * </li>
 * <li>
 * optional parameters: "pattern" : "product/{id}/detail/:detailId:" - :detailId: is an optional parameter, e. g. the following hashes would match: product/5/detail, product/3/detail/2</br>
 * </li>
 * <li>
 * query parameters: "pattern" : "product{?query}" // {?query} allows you to pass queries with any parameters, e. g. the following hashes would match: product?first=firstValue, product?first=firstValue&second=secondValue</br>
 * </li>
 * <li>
 * rest as string parameters: "pattern" : ":all*:" - this pattern will define an optional variable that will pass the whole hash as string to the routing events. It may be used to define a catchall route, e. g. the following hashes would match: foo, product/5/3, product/5/detail/3/foo. You can also combine it with the other variables but make sure a variable with a * is the last one.</br>
 * </ul>
 * @param {boolean} [oConfig.greedy] @since 1.27: default: false - By default only the first route matching the hash, will fire events. If greedy is turned on for a route its events will be fired even if another route has already matched.
 * @param {String} [oConfig.parent] @since 1.32 This property contains the information about the route which nests this route in the form: "[componentName:]routeName". The nesting routes pattern will be prefixed to this routes pattern and hence the nesting route also matches if this one matches.
 * @param {string|string[]} [oConfig.target] one or multiple name of targets {@link sap.ui.core.routing.Targets}. As soon as the route matches, the target will be displayed. All the deprecated parameters are ignored, if a target is used.
 * @param {string} [oConfig.view] @deprecated since 1.28 - use target.viewName. The name of a view that will be created, the first time this route will be matched. To place the view into a Control use the targetAggregation and targetControl. Views will only be created once per Router.</li>
 * @param {string} [oConfig.viewType] @deprecated since 1.28 - use target.viewType. The type of the view that is going to be created. eg: "XML", "JS"</li>
 * @param {string} [oConfig.viewPath] @deprecated since 1.28 - use target.viewPath. A prefix that will be prepended in front of the view eg: view is set to "myView" and viewPath is set to "myApp" - the created view will be "myApp.myView".</li>
 * @param {string} [oConfig.targetParent] @deprecated since 1.28 - use config.rootView (only available in the config). the id of the parent of the targetControl - This should be the id view your targetControl is located in. By default, this will be the view created by a component, or if the Route is a subroute the view of the parent route is taken. You only need to specify this, if you are not using a router created by a component on your top level routes.</li>
 * @param {string} [oConfig.targetControl] @deprecated since 1.28 - use target.controlId. Views will be put into a container Control, this might be a {@link sap.ui.ux3.Shell} control or a {@link sap.m.NavContainer} if working with mobile, or any other container. The id of this control has to be put in here.</li>
 * @param {string} [oConfig.targetAggregation] @deprecated since 1.28 - use target.controlAggregation. The name of an aggregation of the targetControl, that contains views. Eg: a {@link sap.m.NavContainer} has an aggregation "pages", another Example is the {@link sap.ui.ux3.Shell} it has "content".</li>
 * @param {boolean} [oConfig.clearTarget] @deprecated since 1.28 - use target.clearControlAggregation. Default is false. Defines a boolean that can be passed to specify if the aggregation should be cleared before adding the View to it. When using a {@link sap.ui.ux3.Shell} this should be true. For a {@link sap.m.NavContainer} it should be false.</li>
 * @param {object} [oConfig.subroutes] @deprecated since 1.28 - use targets.parent. one or multiple routeconfigs taking all of these parameters again. If a subroute is hit, it will fire tge routeMatched event for all its parents. The routePatternMatched event will only be fired for the subroute not the parents. The routing will also display all the targets of the subroutes and its parents.
 * @param {sap.ui.core.routing.Route} [oParent] The parent route - if a parent route is given, the routeMatched event of this route will also trigger the route matched of the parent and it will also create the view of the parent(if provided).
 * 
 * @public
 * @extends sap.ui.base.EventProvider
 * 
 */
sap.ui.core.routing.Route = function(The,oConfig,oParent) {};
/**
 * The 'beforeMatched' event is fired before the corresponding target is loaded and placed, when the current URL hash matches:
 * <pre>
 *  a. the pattern of the route.
 *  b. the pattern of its sub-route.
 *  c. the pattern of its nested route. When this occurs, the 'nestedRoute' parameter is set with the instance of nested route.
 * </pre>
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.name The name of the route
 * @param {object} oEvent.getParameters.arguments A key-value pair object which contains the arguments defined in the route
 *  resolved with the corresponding information from the current URL hash
 * @param {object} oEvent.getParameters.config The configuration object of the route
 * @param {sap.ui.core.routing.Route} [oEvent.getParameters.nestedRoute] The nested route instance of this route. The event
 *  is fired on this route because the pattern in the nested route is matched with the current URL hash. This parameter can be
 *  used to decide whether the current route is matched because of its nested child route. For more information about nested
 *  child route please refer to the documentation of oConfig.parent in {@link sap.ui.core.routing.Route#constructor}
 * @public
 * @since 1.46.1
 * 
 */
sap.ui.core.routing.Route.prototype.beforeMatched = function(oEvent) {  };

/**
 * The 'matched' event is fired, when the current URL hash matches:
 * <pre>
 *  a. the pattern of the route.
 *  b. the pattern of its sub-route.
 *  c. the pattern of its nested route. When this occurs, the 'nestedRoute' parameter is set with the instance of nested route.
 * </pre>
 * 
 * Please refer to event {@link sap.ui.core.routing.Route#event:patternMatched|patternMatched} for getting notified only when its own pattern is matched with the URL hash not its sub-routes or nested route.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.name The name of the route
 * @param {object} oEvent.getParameters.arguments A key-value pair object which contains the arguments defined in the route
 *  resolved with the corresponding information from the current URL hash
 * @param {object} oEvent.getParameters.config The configuration object of the route
 * @param {sap.ui.core.routing.Route} [oEvent.getParameters.nestedRoute] The nested route instance of this route. The event
 *  is fired on this route because the pattern in the nested route is matched with the current URL hash. This parameter can be
 *  used to decide whether the current route is matched because of its nested child route. For more information about nested
 *  child route please refer to the documentation of oConfig.parent in {@link sap.ui.core.routing.Route#constructor}
 * @public
 * 
 */
sap.ui.core.routing.Route.prototype.matched = function(oEvent) {  };

/**
 * The 'patternMatched' event is fired, only when the current URL hash matches the pattern of the route.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.name The name of the route
 * @param {object} oEvent.getParameters.arguments A key-value pair object which contains the arguments defined in the route
 *  resolved with the corresponding information from the current URL hash
 * @param {object} oEvent.getParameters.config The configuration object of the route
 * @public
 * 
 */
sap.ui.core.routing.Route.prototype.patternMatched = function(oEvent) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'beforeMatched' event of this <code>sap.ui.core.routing.Route</code>.<br/>
 * 
 * 
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.core.routing.Route} <code>this</code> to allow method chaining
 * @public
 * @since 1.46.1
 * 
 */
sap.ui.core.routing.Route.prototype.attachBeforeMatched = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Route(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'matched' event of this <code>sap.ui.core.routing.Route</code>.<br/>
 * 
 * 
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.core.routing.Route} <code>this</code> to allow method chaining
 * @public
 * @since 1.25.1
 * 
 */
sap.ui.core.routing.Route.prototype.attachMatched = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Route(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'patternMatched' event of this <code>sap.ui.core.routing.Route</code>.<br/>
 * 
 * 
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.core.routing.Route} <code>this</code> to allow method chaining
 * @public
 * @since 1.25.1
 * 
 */
sap.ui.core.routing.Route.prototype.attachPatternMatched = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Route(); };

/**
 * Destroys a route
 * 
 * @public
 * @returns { sap.ui.core.routing.Route } this for chaining.
 * 
 */
sap.ui.core.routing.Route.prototype.destroy = function() { return new sap.ui.core.routing.Route(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'beforeMatched' event of this <code>sap.ui.core.routing.Route</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Route} <code>this</code> to allow method chaining
 * @public
 * @since 1.46.1
 * 
 */
sap.ui.core.routing.Route.prototype.detachBeforeMatched = function(fnFunction,oListener) { return new sap.ui.core.routing.Route(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'matched' event of this <code>sap.ui.core.routing.Route</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Route} <code>this</code> to allow method chaining
 * @public
 * @since 1.25.1
 * 
 */
sap.ui.core.routing.Route.prototype.detachMatched = function(fnFunction,oListener) { return new sap.ui.core.routing.Route(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'patternMatched' event of this <code>sap.ui.core.routing.Route</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Route} <code>this</code> to allow method chaining
 * @public
 * @since 1.25.1
 * 
 */
sap.ui.core.routing.Route.prototype.detachPatternMatched = function(fnFunction,oListener) { return new sap.ui.core.routing.Route(); };

/**
 * Creates a new subclass of class sap.ui.core.routing.Route with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.routing.Route.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event beforeMatched to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * 
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @protected
 * @since 1.46.1
 * 
 */
sap.ui.core.routing.Route.prototype.fireBeforeMatched = function(mArguments) { return new sap.ui.core.routing.Router(); };

/**
 * Returns a metadata object for class sap.ui.core.routing.Route.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.routing.Route.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Return the pattern of the route. If there are multiple patterns, the first pattern is returned
 * 
 * @return {string} the routes pattern
 * @public
 * 
 */
sap.ui.core.routing.Route.prototype.getPattern = function() { return ""; };

/**
 * Returns the URL for the route and replaces the placeholders with the values in oParameters
 * 
 * @param {object} oParameters Parameters for the route
 * @return {string} the unencoded pattern with interpolated arguments
 * @public
 * 
 */
sap.ui.core.routing.Route.prototype.getURL = function(oParameters) { return ""; };


// ---- sap.ui.core.routing.Router --------------------------------------------------------------------------

/**
 * Instantiates an SAPUI5 Router
 * 
 * 
 * @class
 * @extends sap.ui.base.EventProvider
 * 
 * @param {object|object[]} [oRoutes] may contain many Route configurations as {@link sap.ui.core.routing.Route#constructor}.<br/>
 * Each of the routes contained in the array/object will be added to the router.<br/>
 * 
 * One way of defining routes is an array:
 * <pre>
 * [
 *     //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
 *     {
 *         name: "firstRoute"
 *         pattern : "usefulPattern"
 *     },
 *     //Will create a route called 'anotherRoute'
 *     {
 *         name: "anotherRoute"
 *         pattern : "anotherPattern"
 *     }
 * ]
 * </pre>
 * 
 * The alternative way of defining routes is an Object.
 * If you choose this way, the name attribute is the name of the property.
 * <pre>
 * {
 *     //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
 *     firstRoute : {
 *         pattern : "usefulPattern"
 *     },
 *     //Will create a route called 'anotherRoute'
 *     anotherRoute : {
 *         pattern : "anotherPattern"
 *     }
 * }
 * </pre>
 * The values that may be provided are the same as in {@link sap.ui.core.routing.Route#constructor}
 * 
 * @param {object} [oConfig] Default values for route configuration - also takes the same parameters as {@link sap.ui.core.routing.Target#constructor}.<br/>
 * This config will be used for routes and for targets, used in the router<br/>
 * Eg: if the config object specifies :
 * <pre>
 * <code>
 * {
 *     viewType : "XML"
 * }
 * </code>
 * </pre>
 * The targets look like this:
 * <pre>
 * {
 *     xmlTarget : {
 *         ...
 *     },
 *     jsTarget : {
 *         viewType : "JS"
 *         ...
 *     }
 * }
 * </pre>
 * Then the effective config will look like this:
 * <pre>
 * {
 *     xmlTarget : {
 *         viewType : "XML"
 *         ...
 *     },
 *     jsTarget : {
 *         viewType : "JS"
 *         ...
 *     }
 * }
 * </pre>
 * 
 * Since the xmlTarget does not specify its viewType, XML is taken from the config object. The jsTarget is specifying it, so the viewType will be JS.
 * @param {string|string[]} [oConfig.bypassed.target] @since 1.28. One or multiple names of targets that will be displayed, if no route of the router is matched.<br/>
 * A typical use case is a not found page.<br/>
 * The current hash will be passed to the display event of the target.<br/>
 * <b>Example:</b>
 * <pre>
 * <code>
 *     new Router(
 *     // Routes
 *     [
 *         // Any route here
 *     ],
 *     {
 *         bypassed: {
 *             // you will find this name in the target config
 *             target: "notFound"
 *         }
 *     },
 *     // You should only use this constructor when you are not using a router with a component. Please use the metadata of a component to define your routes and targets. The documentation can be found here: {@link sap.ui.core.UIComponent.extend}.
 *     null,
 *     // Target config
 *     {
 *          //same name as in the config.bypassed.target
 *          notFound: {
 *              viewName: "notFound",
 *              ...
 *              // more properties to place the view in the correct container
 *          }
 *     });
 * </code>
 * </pre>
 * @param {boolean} [oConfig.async=false] @since 1.34. Whether the views which are loaded within this router instance asyncly. The default value is set to false.
 * @param {sap.ui.core.UIComponent} [oOwner] the Component of all the views that will be created by this Router,<br/>
 * will get forwarded to the {@link sap.ui.core.routing.Views#constructor}.<br/>
 * If you are using the componentMetadata to define your routes you should skip this parameter.
 * @param {object} [oTargetsConfig]
 * available @since 1.28 the target configuration, see {@link sap.ui.core.routing.Targets#constructor} documentation (the options object).<br/>
 * You should use Targets to create and display views. Since 1.28 the route should only contain routing relevant properties.<br/>
 * <b>Example:</b>
 * <pre>
 * <code>
 *     new Router(
 *     // Routes
 *     [
 *         {
 *             // no view creation related properties are in the route
 *             name: "startRoute",
 *             //no hash
 *             pattern: "",
 *             // you can find this target in the targetConfig
 *             target: "welcome"
 *         }
 *     ],
 *     // Default values shared by routes and Targets
 *     {
 *         viewNamespace: "my.application.namespace",
 *         viewType: "XML"
 *     },
 *     // You should only use this constructor when you are not using a router with a component.
 *     // Please use the metadata of a component to define your routes and targets.
 *     // The documentation can be found here: {@link sap.ui.core.UIComponent.extend}.
 *     null,
 *     // Target config
 *     {
 *          //same name as in the route called 'startRoute'
 *          welcome: {
 *              // All properties for creating and placing a view go here or in the config
 *              viewName: "Welcome",
 *              controlId: "app",
 *              controlAggregation: "pages"
 *          }
 *     })
 * </code>
 * </pre>
 * @public
 * 
 */
sap.ui.core.routing.Router = function(oRoutes,oConfig,oOwner,oTargetsConfig) {};
/**
 * The 'beforeRouteMatched' event is fired before the corresponding target is loaded and placed, when the current URL hash matches:
 * <pre>
 *  a. the pattern of a route in this router.
 *  b. the pattern of its sub-route.
 *  c. the pattern of its nested route. When this occurs, the 'nestedRoute' parameter is set with the instance of nested route.
 * </pre>
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.name The name of the route
 * @param {object} oEvent.getParameters.arguments A key-value pair object which contains the arguments defined in the route
 *  resolved with the corresponding information from the current URL hash
 * @param {object} oEvent.getParameters.config The configuration object of the route
 * @param {sap.ui.core.routing.Route} [oEvent.getParameters.nestedRoute] The nested route instance of this route. The event
 *  is fired on this route because the pattern in the nested route is matched with the current URL hash. This parameter can be
 *  used to decide whether the current route is matched because of its nested child route. For more information about nested
 *  child route please refer to the documentation of oConfig.parent in {@link sap.ui.core.routing.Route#constructor}
 * @public
 * @since 1.46.1
 * 
 */
sap.ui.core.routing.Router.prototype.beforeRouteMatched = function(oEvent) {  };

/**
 * The 'bypassed' event is fired, when no route of the router matches the changed URL hash
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.hash the current URL hash which did not match any route
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.bypassed = function(oEvent) {  };

/**
 * The 'routeMatched' event is fired, when the current URL hash matches:
 * <pre>
 *  a. the pattern of a route in this router.
 *  b. the pattern of its sub-route.
 *  c. the pattern of its nested route. When this occurs, the 'nestedRoute' parameter is set with the instance of nested route.
 * </pre>
 * 
 * Please refer to event {@link sap.ui.core.routing.Router#event:routePatternMatched|routePatternMatched} for getting notified only when a route's own pattern is matched with the URL hash not its sub-routes.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.name The name of the route
 * @param {object} oEvent.getParameters.arguments A key-value pair object which contains the arguments defined in the route
 *  resolved with the corresponding information from the current URL hash
 * @param {object} oEvent.getParameters.config The configuration object of the route
 * @param {sap.ui.core.routing.Route} [oEvent.getParameters.nestedRoute] The nested route instance of this route. The event
 *  is fired on this route because the pattern in the nested route is matched with the current URL hash. This parameter can be
 *  used to decide whether the current route is matched because of its nested child route. For more information about nested
 *  child route please refer to the documentation of oConfig.parent in {@link sap.ui.core.routing.Route#constructor}
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.routeMatched = function(oEvent) {  };

/**
 * The 'routePatternMatched' event is fired, only when the current URL hash matches the pattern of a route in this router.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.name The name of the route
 * @param {object} oEvent.getParameters.arguments A key-value pair object which contains the arguments defined in the route
 *  resolved with the corresponding information from the current URL hash
 * @param {object} oEvent.getParameters.config The configuration object of the route
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.routePatternMatched = function(oEvent) {  };

/**
 * Will be fired when the title of the "TitleTarget" in the currently matching Route has been changed.
 * 
 * <pre>
 * A "TitleTarget" is resolved as the following:
 *  1. When the Route only has one target configured, the "TitleTarget" is resolved with this target when its {@link sap.ui.core.routing.Targets#constructor|title} options is set.
 *  2. When the Route has more than one target configured, the "TitleTarget" is resolved by default with the first target which has a {@link sap.ui.core.routing.Targets#constructor|title} option.
 *  3. When the {@link sap.ui.core.routing.Route#constructor|titleTarget} option on the Route is configured, this specific target is then used as the "TitleTarget".
 * </pre>
 * @event
 * @param {object} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.title The current displayed title
 * @param {array} oEvent.getParameters.history An array which contains the history of previous titles
 * @param {string} oEvent.getParameters.history[].title The title
 * @param {string} oEvent.getParameters.history[].hash The hash
 * @param {boolean} oEvent.getParameters.history[].isHome The app home indicator
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.titleChanged = function(oEvent) {  };

/**
 * Adds a route to the router
 * 
 * @param {object} oConfig configuration object for the route @see sap.ui.core.routing.Route#constructor
 * @param {sap.ui.core.routing.Route} oParent The parent route - if a parent route is given, the routeMatched event of this route will also trigger the route matched of the parent and it will also create the view of the parent (if provided).
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.addRoute = function(oConfig,oParent) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'beforeRouteMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * 
 * 
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.attachBeforeRouteMatched = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'bypassed' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * The event will get fired, if none of the routes of the routes is matching. <br/>
 * 
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.attachBypassed = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'routeMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * 
 * 
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.attachRouteMatched = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'routePatternMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
 * 
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.attachRoutePatternMatched = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'titleChanged' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 * oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function.
 * 
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.attachTitleChanged = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'viewCreated' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 * oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @deprecated Since 1.28 use {@link #getViews} instead.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.attachViewCreated = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Removes the router from the hash changer @see sap.ui.core.routing.HashChanger
 * 
 * @public
 * @returns { sap.ui.core.routing.Router } this for chaining.
 * 
 */
sap.ui.core.routing.Router.prototype.destroy = function() { return new sap.ui.core.routing.Router(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'beforeRouteMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.detachBeforeRouteMatched = function(fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'bypassed' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * The event will get fired, if none of the routes of the routes is matching. <br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.detachBypassed = function(fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'routeMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.detachRouteMatched = function(fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'routePatternMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.detachRoutePatternMatched = function(fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'titleChanged' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.detachTitleChanged = function(fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'viewCreated' event of this <code>sap.ui.core.routing.Router</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @deprecated Since 1.28 use {@link #getViews} instead.
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.detachViewCreated = function(fnFunction,oListener) { return new sap.ui.core.routing.Router(); };

/**
 * Creates a new subclass of class sap.ui.core.routing.Router with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.routing.Router.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event beforeRouteMatched to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * 
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.routing.Router.prototype.fireBeforeRouteMatched = function(mArguments) { return new sap.ui.core.routing.Router(); };

/**
 * Fire event bypassed to attached listeners.
 * The event will get fired, if none of the routes of the routes is matching. <br/>
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * 
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.routing.Router.prototype.fireBypassed = function(mArguments) { return new sap.ui.core.routing.Router(); };

/**
 * Fire event routeMatched to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * 
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.routing.Router.prototype.fireRouteMatched = function(mArguments) { return new sap.ui.core.routing.Router(); };

/**
 * Fire event routePatternMatched to attached listeners.
 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * 
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.routing.Router.prototype.fireRoutePatternMatched = function(mArguments) { return new sap.ui.core.routing.Router(); };

/**
 * Fire event viewCreated to attached listeners.
 * 
 * @deprecated Since 1.28 use {@link #getViews} instead.
 * @param {object} [mArguments] the arguments to pass along with the event.
 * 
 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.routing.Router.prototype.fireViewCreated = function(mArguments) { return new sap.ui.core.routing.Router(); };

/**
 * Returns a metadata object for class sap.ui.core.routing.Router.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.routing.Router.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the Route with a name, if no route is found undefined is returned
 * 
 * @param {string} sName Name of the route
 * @return {sap.ui.core.routing.Route} the route with the provided name or undefined.
 * @public
 * @since 1.25.1
 * 
 */
sap.ui.core.routing.Router.prototype.getRoute = function(sName) { return new sap.ui.core.routing.Route(); };

/**
 * Get a registered router
 * 
 * @param {string} sName Name of the router
 * @return {sap.ui.core.routing.Router} The router with the specified name, else undefined
 * @public
 * 
 */
sap.ui.core.routing.Router.getRouter = function(sName) { return new sap.ui.core.routing.Router(); };

/**
 * Returns the instance of Targets, if you pass a targets config to the router
 * 
 * @public
 * @returns {sap.ui.core.routing.Targets|undefined} The instance of targets, the router uses to place views or undefined if you did not specify the targets parameter in the router's constructor.
 * 
 */
sap.ui.core.routing.Router.prototype.getTargets = function() { return new sap.ui.core.routing.Targets(); };

/**
 * Returns the title history.
 * 
 * History entry example:
 * <code>
 * 	{
 * 		title: "TITLE", // The displayed title
 * 		hash: "HASH" // The url hash
 * 		isHome: "true/false" // The app home indicator
 * 	}
 * </code>
 * 
 * @return {array} An array which contains the history entries.
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.getTitleHistory = function() { return null; };

/**
 * Returns the URL for the route and replaces the placeholders with the values in oParameters
 * 
 * @param {string} sName Name of the route
 * @param {object} [oParameters] Parameters for the route
 * @return {string} the unencoded pattern with interpolated arguments
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.getURL = function(sName,oParameters) { return ""; };

/**
 * Returns a cached view for a given name or creates it if it does not yet exists
 * 
 * @deprecated Since 1.28.1 use {@link #getViews} instead.
 * @param {string} sViewName Name of the view
 * @param {string} sViewType Type of the view
 * @param {string} sViewId Optional view id
 * @return {sap.ui.core.mvc.View} the view instance
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.getView = function(sViewName,sViewType,sViewId) { return new sap.ui.core.mvc.View(); };

/**
 * Returns the views instance created by the router
 * 
 * @return {sap.ui.core.routing.Views} the Views instance
 * @public
 * @since 1.28
 * 
 */
sap.ui.core.routing.Router.prototype.getViews = function() { return new sap.ui.core.routing.Views(); };

/**
 * Attaches the router to the hash changer @see sap.ui.core.routing.HashChanger
 * 
 * @param {boolean} [bIgnoreInitialHash=false] @since 1.48.0 whether the current url hash shouldn't be parsed after the router is initialized
 * @public
 * @returns {sap.ui.core.routing.Router} this for chaining.
 * 
 */
sap.ui.core.routing.Router.prototype.initialize = function(bIgnoreInitialHash) { return new sap.ui.core.routing.Router(); };

/**
 * Navigates to a specific route defining a set of parameters. The Parameters will be URI encoded - the characters ; , / ? : @ & = + $ are reserved and will not be encoded.
 * If you want to use special characters in your oParameters, you have to encode them (encodeURIComponent).
 * 
 * IF the given route name can't be found, an error message is logged to the console and the hash will be changed to empty string.
 * 
 * @param {string} sName Name of the route
 * @param {object} [oParameters] Parameters for the route
 * @param {boolean} [bReplace=false] If set to <code>true</code>, the hash is replaced, and there will be no entry in the browser history, if set to <code>false</code>, the hash is set and the entry is stored in the browser history.
 * @public
 * @returns {sap.ui.core.routing.Router} this for chaining.
 * 
 */
sap.ui.core.routing.Router.prototype.navTo = function(sName,oParameters,bReplace) { return new sap.ui.core.routing.Router(); };

/**
 * Will trigger routing events + place targets for routes matching the string
 * 
 * @param {string} sNewHash a new hash
 * @protected
 * 
 */
sap.ui.core.routing.Router.prototype.parse = function(sNewHash) {  };

/**
 * Registers the router to access it from another context. Use sap.ui.routing.Router.getRouter() to receive the instance
 * 
 * @param {string} sName Name of the router
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.register = function(sName) {  };

/**
 * Adds or overwrites a view in the viewcache of the router, the viewname serves as a key
 * 
 * @deprecated Since 1.28 use {@link #getViews} instead.
 * @param {string} sViewName Name of the view
 * @param {sap.ui.core.mvc.View} oView the view instance
 * @since 1.22
 * @public
 * @returns {sap.ui.core.routing.Router} @since 1.28 the this pointer for chaining
 * 
 */
sap.ui.core.routing.Router.prototype.setView = function(sViewName,oView) { return new sap.ui.core.routing.Router(); };

/**
 * Stops to listen to the hashChange of the browser.</br>
 * If you want the router to start again, call initialize again.
 * @returns { sap.ui.core.routing.Router } this for chaining.
 * @public
 * 
 */
sap.ui.core.routing.Router.prototype.stop = function() { return new sap.ui.core.routing.Router(); };


// ---- sap.ui.core.routing.Target --------------------------------------------------------------------------

/**
 * Provides a convenient way for placing views into the correct containers of your application.<br/>
 * The main benefit of Targets is lazy loading: you do not have to create the views until you really need them.<br/>
 * <b>Don't call this constructor directly</b>, use {@link sap.ui.core.routing.Targets} instead, it will create instances of a Target.<br/>
 * If you are using the mobile library, please use the {@link sap.m.routing.Targets} constructor, please read the documentation there.<br/>
 * 
 * 
 * @class
 * @param {object} oOptions all of the parameters defined in {@link sap.m.routing.Targets#constructor} are accepted here, except for children you need to specify the parent.
 * @param {sap.ui.core.routing.Views} oViews All views required by this target will get created by the views instance using {@link sap.ui.core.routing.Views#getView}
 * @param {sap.ui.core.routing.Target} [oParent] the parent of this target. Will also get displayed, if you display this target. In the config you have the fill the children property {@link sap.m.routing.Targets#constructor}
 * @public
 * @since 1.28.1
 * @extends sap.ui.base.EventProvider
 * 
 */
sap.ui.core.routing.Target = function(oOptions,oViews,oParent) {};
/**
 * Will be fired when a target is displayed
 * 
 * Could be triggered by calling the display function or by the @link sap.ui.core.routing.Router when a target is referenced in a matching route.
 * @event
 * @param {object} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {object} oEvent.getParameters.view The view that got displayed.
 * @param {object} oEvent.getParameters.control The control that now contains the view in the controlAggregation
 * @param {object} oEvent.getParameters.config The options object passed to the constructor {@link sap.ui.core.routing.Target#constructor}
 * @param {object} oEvent.getParameters.data The data passed into the {@link sap.ui.core.routing.Target#display} function
 * @public
 * 
 */
sap.ui.core.routing.Target.prototype.display = function(oEvent) {  };

/**
 * This function is called between the target view is loaded and the view is added to the container.
 * 
 * This function can be used for applying modification on the view or the container to make the rerendering occur
 * together with the later aggregation change.
 * 
 * @protected
 * @param {object} mArguments
 * @param {sap.ui.core.Control} mArguments.container the container where the view will be added
 * @param {sap.ui.core.Control} mArguments.view the view which will be added to the container
 * @param {object} [mArguments.data] the data passed from {@link sap.ui.core.routing.Target#display} method
 * @since 1.46.1
 * 
 */
sap.ui.core.routing.Target.prototype._beforePlacingViewIntoContainer = function(mArguments) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'display' event of this <code>sap.ui.core.routing.Target</code>.<br/>
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 * oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function.
 * 
 * @return {sap.ui.core.routing.Target} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Target.prototype.attachDisplay = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Target(); };

/**
 * Destroys the target, will be called by {@link sap.m.routing.Targets} don't call this directly.
 * 
 * @protected
 * @returns { sap.ui.core.routing.Target } this for chaining.
 * 
 */
sap.ui.core.routing.Target.prototype.destroy = function() { return new sap.ui.core.routing.Target(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'display' event of this <code>sap.ui.core.routing.Target</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Target} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Target.prototype.detachDisplay = function(fnFunction,oListener) { return new sap.ui.core.routing.Target(); };

/**
 * Creates a view and puts it in an aggregation of a control that has been defined in the {@link sap.ui.core.routing.Target#constructor}.
 * @param {*} [vData] an object that will be passed to the display event in the data property. If the target has parents, the data will also be passed to them.
 * @return {Promise} resolves with {name: *, view: *, control: *} if the target can be successfully displayed otherwise it resolves with {name: *, error: *}
 * @public
 * 
 */
sap.ui.core.routing.Target.prototype.display = function(vData) { return null; };

/**
 * Creates a new subclass of class sap.ui.core.routing.Target with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.routing.Target.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event created to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.routing.Target} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.routing.Target.prototype.fireDisplay = function(mArguments) { return new sap.ui.core.routing.Target(); };

/**
 * Returns a metadata object for class sap.ui.core.routing.Target.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.routing.Target.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.routing.Targets --------------------------------------------------------------------------

/**
 * Provides a convenient way for placing views into the correct containers of your application.
 * The main benefit of Targets is lazy loading: you do not have to create the views until you really need them.
 * If you are using the mobile library, please use {@link sap.m.routing.Targets} instead of this class.
 * 
 * 
 * @class
 * @extends sap.ui.base.EventProvider
 * @param {object} oOptions
 * @param {sap.ui.core.routing.Views} oOptions.views the views instance will create the views of all the targets defined, so if 2 targets have the same viewName, the same instance of the view will be displayed.
 * @param {object} [oOptions.config] this config allows all the values oOptions.targets.anyName allows, these will be the default values for properties used in the target.<br/>
 * For example if you are only using xmlViews in your app you can specify viewType="XML" so you don't have to repeat this in every target.<br/>
 * If a target specifies viewType="JS", the JS will be stronger than the XML here is an example.
 * 
 * <pre>
 * <code>
 * {
 *     config: {
 *         viewType : "XML"
 *     }
 *     targets : {
 *         xmlTarget : {
 *             ...
 *         },
 *         jsTarget : {
 *             viewType : "JS"
 *             ...
 *         }
 *     }
 * }
 * </code>
 * </pre>
 * Then the effective config that will be used looks like this:
 * <pre>
 * <code>
 * {
 *     xmlTarget : {
 *         // coming from the defaults
 *         viewType : "XML"
 *         ...
 *     },
 *     jsTarget : {
 *        // XML is overwritten by the "JS" of the targets property
 *        viewType : "JS"
 *       ...
 *     }
 * }
 * </code>
 * </pre>
 * 
 * @param {string} [oOptions.config.rootView]
 * The id of the rootView - This should be the id of the view that contains the control with the controlId
 * since the control will be retrieved by calling the {@link sap.ui.core.mvc.View#byId} function of the rootView.
 * If you are using a component and add the routing.targets <b>do not set this parameter</b>,
 * since the component will set the rootView to the view created by the {@link sap.ui.core.UIComponent#createContent} function.
 * If you specify the "parent" property of a target, the control will not be searched in the root view but in the view Created by the parent (see parent documentation).
 * @param {boolean} [oOptions.config.async=false] @since 1.34 Whether the views which are created through this Targets are loaded asyncly. This option can be set only when the Targets
 * is used standalone without the involvement of a Router. Otherwise the async option is inherited from the Router.
 * @param {object} oOptions.targets One or multiple targets in a map.
 * @param {object} oOptions.targets.anyName a new target, the key severs as a name. An example:
 * <pre>
 * <code>
 * {
 *     targets: {
 *         welcome: {
 *             viewName: "Welcome",
 *             viewType: "XML",
 *             ....
 *             // Other target parameters
 *         },
 *         goodbye: {
 *             viewName: "Bye",
 *             viewType: "JS",
 *             ....
 *             // Other target parameters
 *         }
 *     }
 * }
 * </code>
 * </pre>
 * 
 * This will create two targets named 'welcome' and 'goodbye' you can display both of them or one of them using the {@link #display} function.
 * 
 * @param {string} oOptions.targets.anyName.viewName The name of a view that will be created.
 * To place the view into a Control use the controlAggregation and controlId. Views will only be created once per viewName.
 * <pre>
 * <code>
 * {
 *     targets: {
 *         // If display("masterWelcome") is called, the master view will be placed in the 'MasterPages' of a control with the id splitContainter
 *         masterWelcome: {
 *             viewName: "Welcome",
 *             controlId: "splitContainer",
 *             controlAggregation: "masterPages"
 *         },
 *         // If display("detailWelcome") is called after the masterWelcome, the view will be removed from the master pages and added to the detail pages, since the same instance is used. Also the controls inside of the view will have the same state.
 *         detailWelcome: {
 *             // same view here, that's why the same instance is used
 *             viewName: "Welcome",
 *             controlId: "splitContainer",
 *             controlAggregation: "detailPages"
 *         }
 *     }
 * }
 * </code>
 * </pre>
 * 
 * If you want to have a second instance of the welcome view you can use the following:
 * 
 * 
 * 
 * <pre>
 * <code>
 * // Some code you execute before you display the taget named 'detailWelcome':
 * var oView = sap.ui.view(({ viewName : "Welcome", type : sap.ui.core.mvc.ViewType.XML});
 * oTargets.getViews().setView("WelcomeWithAlias", oView)
 * 
 * {
 *     targets: {
 *         // If display("masterWelcome") is called, the master viewName will be placed in the 'MasterPages' of a control with the id splitContainter
 *         masterWelcome: {
 *             viewName: "Welcome",
 *             controlId: "splitContainer",
 *             controlAggregation: "masterPages"
 *         },
 *         // If display("detailWelcome") is called after the masterWelcome, a second instance with an own controller instance will be added in the detail pages.
 *         detailWelcome: {
 *             // same viewName here, that's why the same instance is used
 *             viewName: "WelcomeWithAlias",
 *             controlId: "splitContainer",
 *             controlAggregation: "detailPages"
 *         }
 *     }
 * }
 * </code>
 * </pre>
 * 
 * 
 * @param {string} [oOptions.targets.anyName.viewType]
 * The type of the view that is going to be created. These are the supported types: {@link sap.ui.core.mvc.ViewType}.
 * You always have to provide a viewType except if you are using {@link sap.ui.core.routing.Views#setView}.
 * @param {string} [oOptions.targets.anyName.viewPath]
 * A prefix that will be prepended in front of the viewName.<br/>
 * <b>Example:</b> viewName is set to "myView" and viewPath is set to "myApp" - the created viewName will be "myApp.myView".
 * @param {string} [oOptions.targets.anyName.viewId] The id of the created view.
 * This is will be prefixed with the id of the component set to the views instance provided in oOptions.views. For details see {@link sap.ui.core.routing.Views#getView}.
 * @param {string} [oOptions.targets.anyName.targetParent]
 * The id of the parent of the controlId - This should be the id of the view that contains your controlId,
 * since the target control will be retrieved by calling the {@link sap.ui.core.mvc.View#byId} function of the targetParent. By default,
 * this will be the view created by a component, so you do not have to provide this parameter.
 * If you are using children, the view created by the parent of the child is taken.
 * You only need to specify this, if you are not using a Targets instance created by a component
 * and you should give the id of root view of your application to this property.
 * @param {string} [oOptions.targets.anyName.controlId] The id of the control where you want to place the view created by this target.
 * The view of the target will be put into this container Control, using the controlAggregation property. You have to specify both properties or the target will not be able to place itself.
 * An example for containers are {@link sap.ui.ux3.Shell} with the aggregation 'content' or a {@link sap.m.NavContainer} with the aggregation 'pages'.
 * 
 * @param {string} [oOptions.targets.anyName.controlAggregation] The name of an aggregation of the controlId, that contains views.
 * Eg: a {@link sap.m.NavContainer} has an aggregation 'pages', another Example is the {@link sap.ui.ux3.Shell} it has 'content'.
 * @param {boolean} [oOptions.targets.anyName.clearControlAggregation] Defines a boolean that can be passed to specify if the aggregation should be cleared
 * - all items will be removed - before adding the View to it.
 * When using a {@link sap.ui.ux3.Shell} this should be true. For a {@link sap.m.NavContainer} it should be false. When you use the {@link sap.m.routing.Router} the default will be false.
 * @param {string} [oOptions.targets.anyName.parent] A reference to another target, using the name of the target.
 * If you display a target that has a parent, the parent will also be displayed.
 * Also the control you specify with the controlId parameter, will be searched inside of the view of the parent not in the rootView, provided in the config.
 * The control will be searched using the byId function of a view. When it is not found, the global id is checked.
 * <br/>
 * The main usecase for the parent property is placing a view inside a smaller container of a view, which is also created by targets.
 * This is useful for lazy loading views, only if the user really navigates to this part of your application.
 * <br/>
 * <b>Example:</b>
 * Our aim is to lazy load a tab of an IconTabBar (a control that displays a view initially and when a user clicks on it the view changes).
 * It's a perfect candidate to lazy load something inside of it.
 * <br/>
 * <b>Example app structure:</b><br/>
 * We have a rootView that is returned by the createContent function of our UIComponent. This view contains an sap.m.App control with the id 'myApp'
 * <pre>
 * <code>
 * &lt;View xmlns="sap.m"&gt;
 *     &lt;App id="myApp"/&gt;
 * &lt;/View&gt;
 * </code>
 * </pre>
 * an xml view called 'Detail'
 * <pre>
 * <code>
 * &lt;View xmlns="sap.m"&gt;
 *     &lt;IconTabBar&gt;
 *         &lt;items&gt;
 *             &lt;IconTabFilter&gt;
 *                 &lt;!-- content of our first tab --&gt;
 *             &lt;IconTabFilter&gt;
 *             &lt;IconTabFilter id="mySecondTab"&gt;
 *                 &lt;!-- nothing here, since we will lazy load this one with a target --&gt;
 *             &lt;IconTabFilter&gt;
 *         &lt;/items&gt;
 *     &lt;/IconTabBar&gt;
 * &lt;/View&gt;
 * </code>
 * </pre>
 * and a view called 'SecondTabContent', this one contains our content we want to have lazy loaded.
 * Now we need to create our Targets instance with a config matching our app:
 * <pre>
 * <code>
 *     new Targets({
 *         //Creates our views except for root, we created this one before - when using a component you
 *         views: new Views(),
 *         config: {
 *             // all of our views have that type
 *             viewType: 'XML',
 *             // a reference to the app control in the rootView created by our UIComponent
 *             controlId: 'myApp',
 *             // An app has a pages aggregation where the views need to be put into
 *             controlAggregation: 'pages'
 *         },
 *         targets: {
 *             detail: {
 *                 viewName: 'Detail'
 *             },
 *             secondTabContent: {
 *                 // A reference to the detail target defined above
 *                 parent: 'detail',
 *                 // A reference to the second Tab container in the Detail view. Here the target does not look in the rootView, it looks in the Parent view (Detail).
 *                 controlId: 'mySecondTab',
 *                 // An IconTabFilter has an aggregation called content so we need to overwrite the pages set in the config as default.
 *                 controlAggregation: 'content',
 *                 // A view containing the content
 *                 viewName: 'SecondTabContent'
 *             }
 *         }
 *     });
 * </code>
 * </pre>
 * 
 * Now if we call <code> oTargets.display("secondTabContent") </code>, 2 views will be created: Detail and SecondTabContent.
 * The 'Detail' view will be put into the pages aggregation of the App. And afterwards the 'SecondTabContent' view will be put into the content Aggregation of the second IconTabFilter.
 * So a parent will always be created before the target referencing it.
 * 
 * @since 1.28.1
 * @public
 * 
 */
sap.ui.core.routing.Targets = function(oOptions) {};
/**
 * Will be fired when a target is displayed
 * 
 * Could be triggered by calling the display function or by the {@link sap.ui.core.routing.Router} when a target is referenced in a matching route.
 * @event
 * @param {object} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {object} oEvent.getParameters.view The view that got displayed.
 * @param {object} oEvent.getParameters.control The control that now contains the view in the controlAggregation
 * @param {object} oEvent.getParameters.config The options object passed to the constructor {@link sap.ui.core.routing.Targets#constructor}
 * @param {object} oEvent.getParameters.name The name of the target firing the event
 * @param {object} oEvent.getParameters.data The data passed into the {@link sap.ui.core.routing.Targets#display} function
 * @public
 * 
 */
sap.ui.core.routing.Targets.prototype.display = function(oEvent) {  };

/**
 * Will be fired when the title of the "TitleTarget" has been changed.
 * 
 * <pre>
 * A "TitleTarget" is resolved as the following:
 *  1. When the {@link sap.ui.core.routing.Targets#display|display} is called with only one target, the "TitleTarget" is resolved with this target when its {@link sap.ui.core.routing.Targets#constructor|title} options is set.
 *  2. When the {@link sap.ui.core.routing.Targets#display|display} is called with more than one target, the "TitleTarget" is resolved by default with the first target which has a {@link sap.ui.core.routing.Targets#constructor|title} option.
 *  3. When the 'sTitleTarget' parameter of {@link sap.ui.core.routing.Targets#display|display} is given, this specific target is then used as the "TitleTarget".
 * </pre>
 * @event
 * @param {object} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.title The current displayed title
 * @param {string} oEvent.getParameters.name The name of the displayed target
 * @public
 * 
 */
sap.ui.core.routing.Targets.prototype.titleChanged = function(oEvent) {  };

/**
 * Creates a target by using the given name and options. If there's already a target with the same name exists, the existing target is kept from being overwritten and an error log will be written to the development console.
 * 
 * @param {string} sName the name of a target
 * @param {object} oTarget the options of a target. The option names are the same as the ones in "oOptions.targets.anyName" of {@link #constructor}.
 * @returns {sap.ui.core.routing.Targets} Targets itself for method chaining
 * @public
 * 
 * 
 */
sap.ui.core.routing.Targets.prototype.addTarget = function(sName,oTarget) { return new sap.ui.core.routing.Targets(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'display' event of this <code>sap.ui.core.routing.Targets</code>.<br/>
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 * oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function.
 * 
 * @return {sap.ui.core.routing.Targets} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Targets.prototype.attachDisplay = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Targets(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'titleChanged' event of this <code>sap.ui.core.routing.Targets</code>.<br/>
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 * oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function.
 * 
 * @return {sap.ui.core.routing.Targets} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Targets.prototype.attachTitleChanged = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Targets(); };

/**
 * Destroys the targets instance and all created targets. Does not destroy the views instance passed to the constructor. It has to be destroyed separately.
 * @public
 * @returns { sap.ui.core.routing.Targets } this for chaining.
 * 
 */
sap.ui.core.routing.Targets.prototype.destroy = function() { return new sap.ui.core.routing.Targets(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'display' event of this <code>sap.ui.core.routing.Targets</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Targets} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Targets.prototype.detachDisplay = function(fnFunction,oListener) { return new sap.ui.core.routing.Targets(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'titleChanged' event of this <code>sap.ui.core.routing.Targets</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Targets} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Targets.prototype.detachTitleChanged = function(fnFunction,oListener) { return new sap.ui.core.routing.Targets(); };

/**
 * Creates a view and puts it in an aggregation of the specified control.
 * 
 * @param {string|string[]} vTargets the key of the target as specified in the {@link #constructor}. To display multiple targets you may also pass an array of keys.
 * @param {object} [oData] an object that will be passed to the display event in the data property. If the target has parents, the data will also be passed to them.
 * @param {string} [sTitleTarget] the name of the target from which the title option is taken for firing the {@link sap.ui.core.routing.Targets#event:titleChanged|titleChanged} event
 * @public
 * @returns {sap.ui.core.routing.Targets|Promise} this pointer for chaining or a Promise
 * 
 */
sap.ui.core.routing.Targets.prototype.display = function(vTargets,oData,sTitleTarget) { return new sap.ui.core.routing.Targets(); };

/**
 * Creates a new subclass of class sap.ui.core.routing.Targets with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.routing.Targets.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event created to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.routing.Targets} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Targets.prototype.fireDisplay = function(mArguments) { return new sap.ui.core.routing.Targets(); };

/**
 * Returns a metadata object for class sap.ui.core.routing.Targets.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.routing.Targets.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns a target by its name (if you pass myTarget: { view: "myView" }) in the config myTarget is the name.
 * 
 * @param {string|string[]} vName the name of a single target or the name of multiple targets
 * @return {sap.ui.core.routing.Target|undefined|sap.ui.core.routing.Target[]} The target with the coresponding name or undefined. If an array way passed as name this will return an array with all found targets. Non existing targets will not be returned but will log an error.
 * @public
 * 
 */
sap.ui.core.routing.Targets.prototype.getTarget = function(vName) { return new sap.ui.core.routing.Target(); };

/**
 * Returns the views instance passed to the constructor
 * 
 * @return {sap.ui.core.routing.Views} the views instance
 * @public
 * 
 */
sap.ui.core.routing.Targets.prototype.getViews = function() { return new sap.ui.core.routing.Views(); };


// ---- sap.ui.core.routing.Views --------------------------------------------------------------------------

/**
 * Instantiates a view repository that creates and caches views. If it is destroyed, all the Views it created are destroyed.
 * Usually you do not have to create instances of this class, it is used by the {@link sap.ui.core.routing.Router}.
 * If you are using {@link sap.ui.core.routing.Targets} without using a {@link sap.ui.core.UIComponent} you have to create an instance of this class.
 * They will create an instance on their own, or if they are used with a {@link sap.ui.core.UIComponent} they will share the same instance of Views.
 * 
 * 
 * @class
 * @extends sap.ui.base.EventProvider
 * @public
 * @since 1.28.1
 * @param {object} oOptions
 * @param {sap.ui.core.UIComponent} [oOptions.component] the owner of all the views that will be created by this Instance.
 * @param {boolean} [oOptions.async=false] @since 1.34 Whether the views which are created through this Views are loaded asyncly. This option can be set only when the Views
 * is used standalone without the involvement of a Router. Otherwise the async option is inherited from the Router.
 * 
 */
sap.ui.core.routing.Views = function(oOptions) {};
/**
 * If a view is created the event will be fired.
 * It will not be fired, if a view was read from the cache of the Views object.
 * @event
 * @param {sap.ui.base.Event} oEvent refer to {@link sap.ui.base.EventProvider} for details about getSource and getParameters
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {sap.ui.core.mvc.View} oEvent.getParameters.view the instance of the created view.
 * @param {object} oEvent.getParameters.viewOptions The view options passed to {@link sap.ui.view}
 * @public
 * 
 */
sap.ui.core.routing.Views.prototype.created = function(oEvent) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'created' event of this <code>sap.ui.core.routing.Views</code>.<br/>
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The function to call, when the event occurs. This function will be called on the
 * oListener-instance (if present) or in a 'static way'.
 * @param {object} [oListener] Object on which to call the given function.
 * 
 * @return {sap.ui.core.routing.Views} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Views.prototype.attachCreated = function(oData,fnFunction,oListener) { return new sap.ui.core.routing.Views(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'created' event of this <code>sap.ui.core.routing.Views</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} oListener Object on which the given function had to be called.
 * @return {sap.ui.core.routing.Views} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.routing.Views.prototype.detachCreated = function(fnFunction,oListener) { return new sap.ui.core.routing.Views(); };

/**
 * Creates a new subclass of class sap.ui.core.routing.Views with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.routing.Views.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event created to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.routing.Views} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.routing.Views.prototype.fireCreated = function(mArguments) { return new sap.ui.core.routing.Views(); };

/**
 * Returns a metadata object for class sap.ui.core.routing.Views.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.routing.Views.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns a cached view, for a given name. If it does not exist yet, it will create the view with the provided options.
 * If you provide a viewId, it will be prefixed with the viewId of the component.
 * 
 * @param {object} oOptions see {@link sap.ui.view} for the documentation.
 * The viewId you pass into the options will be prefixed with the id of the component you pass into the constructor.
 * So you can retrieve the view later by calling the {@link sap.ui.core.UIComponent#byId} function of the UIComponent.
 * 
 * @param {string} oOptions.viewName If you do not use setView please see {@link sap.ui.view} for the documentation. This is used as a key in the cache of the Views instance. If you want to retrieve a view that has been given an alternative name in {@link #setView} you need to provide the same name here and you can skip all the other viewOptions.
 * @return {Promise} A promise that is resolved when the view is loaded {@link sap.ui.core.mvc.View#loaded}. The view instance will be passed to the promise.
 * @public
 * 
 */
sap.ui.core.routing.Views.prototype.getView = function(oOptions) { return null; };

/**
 * Adds or overwrites a view in the cache of the Views instance. The viewName serves as a key for caching.
 * 
 * If the second parameter is set to null or undefined, the previous cache view under the same name isn't managed by the Views instance.
 * The lifecycle (for example the destroy of the view) of the view instance should be maintained by additional code.
 * 
 * 
 * @param {string} sViewName Name of the view, may differ from the actual viewName of the oView parameter provided, since you can retrieve this view per {@link #.getView}.
 * @param {sap.ui.core.mvc.View|null|undefined} oView the view instance
 * @return {sap.ui.core.routing.Views} this for chaining.
 * @public
 * 
 */
sap.ui.core.routing.Views.prototype.setView = function(sViewName,oView) { return new sap.ui.core.routing.Views(); };


// ---- sap.ui.core.ScrollBar --------------------------------------------------------------------------

/**
 * Constructor for a new ScrollBar.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVertical vertical} : boolean (default: true)</li>
 * <li>{@link #getScrollPosition scrollPosition} : int</li>
 * <li>{@link #getSize size} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentSize contentSize} : sap.ui.core.CSSSize</li>
 * <li>{@link #getSteps steps} : int</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:scroll scroll} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * The ScrollBar control can be used for virtual scrolling of a certain area.
 * This means: to simulate a very large scrollable area when technically the area is small and the control takes care of displaying the respective part only. E.g. a Table control can take care of only rendering the currently visible rows and use this ScrollBar control to make the user think he actually scrolls through a long list.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.ScrollBar = function(sId,mSettings) {};
/**
 * Scroll event.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {sap.ui.core.ScrollBarAction} oControlEvent.getParameters.action Actions are: Click on track, button, drag of thumb, or mouse wheel click.
 * @param {boolean} oControlEvent.getParameters.forward Direction of scrolling: back (up) or forward (down).
 * @param {int} oControlEvent.getParameters.newScrollPos Current Scroll position either in pixels or in steps.
 * @param {int} oControlEvent.getParameters.oldScrollPos Old Scroll position - can be in pixels or in steps.
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.scroll = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:scroll scroll} event of this <code>sap.ui.core.ScrollBar</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.core.ScrollBar</code> itself.
 * 
 * Scroll event.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.ScrollBar</code> itself
 * 
 * @returns {sap.ui.core.ScrollBar} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.attachScroll = function(oData,fnFunction,oListener) { return new sap.ui.core.ScrollBar(); };

/**
 * Binds the mouse wheel scroll event of the control that has the scrollbar to the scrollbar itself.
 * 
 * @param {string} oOwnerDomRef
 *         Dom ref of the control that uses the scrollbar
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.ScrollBar.prototype.bind = function(oOwnerDomRef) {  };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:scroll scroll} event of this <code>sap.ui.core.ScrollBar</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.core.ScrollBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.detachScroll = function(fnFunction,oListener) { return new sap.ui.core.ScrollBar(); };

/**
 * Creates a new subclass of class sap.ui.core.ScrollBar with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.ScrollBar.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:scroll scroll} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @param {sap.ui.core.ScrollBarAction} [mParameters.action] Actions are: Click on track, button, drag of thumb, or mouse wheel click.
 * @param {boolean} [mParameters.forward] Direction of scrolling: back (up) or forward (down).
 * @param {int} [mParameters.newScrollPos] Current Scroll position either in pixels or in steps.
 * @param {int} [mParameters.oldScrollPos] Old Scroll position - can be in pixels or in steps.
 * 
 * @returns {sap.ui.core.ScrollBar} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.core.ScrollBar.prototype.fireScroll = function(mParameters) { return new sap.ui.core.ScrollBar(); };

/**
 * Gets current value of property {@link #getContentSize contentSize}.
 * 
 * Size of the scrollable content (in pixels).
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>contentSize</code>
 * 
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getContentSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * Returns a metadata object for class sap.ui.core.ScrollBar.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.ScrollBar.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getScrollPosition scrollPosition}.
 * 
 * Scroll position in steps or pixels.
 * 
 * @returns {int} Value of property <code>scrollPosition</code>
 * 
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getScrollPosition = function() { return 0; };

/**
 * Gets current value of property {@link #getSize size}.
 * 
 * Size of the Scrollbar (in pixels).
 * 
 * @returns {sap.ui.core.CSSSize} Value of property <code>size</code>
 * 
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getSize = function() { return new sap.ui.core.CSSSize(); };

/**
 * Gets current value of property {@link #getSteps steps}.
 * 
 * Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.
 * 
 * @returns {int} Value of property <code>steps</code>
 * 
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getSteps = function() { return 0; };

/**
 * Gets current value of property {@link #getVertical vertical}.
 * 
 * Orientation. Defines if the Scrollbar is vertical or horizontal.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>vertical</code>
 * 
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.getVertical = function() { return false; };

/**
 * Page Down is used to scroll one page forward.
 * 
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.ScrollBar.prototype.pageDown = function() {  };

/**
 * Page Up is used to scroll one page back.
 * 
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.ScrollBar.prototype.pageUp = function() {  };

/**
 * Sets a new value for property {@link #getContentSize contentSize}.
 * 
 * Size of the scrollable content (in pixels).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sContentSize New value for property <code>contentSize</code>
 * @returns {sap.ui.core.ScrollBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.setContentSize = function(sContentSize) { return new sap.ui.core.ScrollBar(); };

/**
 * Sets a new value for property {@link #getScrollPosition scrollPosition}.
 * 
 * Scroll position in steps or pixels.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iScrollPosition New value for property <code>scrollPosition</code>
 * @returns {sap.ui.core.ScrollBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.setScrollPosition = function(iScrollPosition) { return new sap.ui.core.ScrollBar(); };

/**
 * Sets a new value for property {@link #getSize size}.
 * 
 * Size of the Scrollbar (in pixels).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.CSSSize} sSize New value for property <code>size</code>
 * @returns {sap.ui.core.ScrollBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.setSize = function(sSize) { return new sap.ui.core.ScrollBar(); };

/**
 * Sets a new value for property {@link #getSteps steps}.
 * 
 * Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iSteps New value for property <code>steps</code>
 * @returns {sap.ui.core.ScrollBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.setSteps = function(iSteps) { return new sap.ui.core.ScrollBar(); };

/**
 * Sets a new value for property {@link #getVertical vertical}.
 * 
 * Orientation. Defines if the Scrollbar is vertical or horizontal.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bVertical New value for property <code>vertical</code>
 * @returns {sap.ui.core.ScrollBar} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.ScrollBar.prototype.setVertical = function(bVertical) { return new sap.ui.core.ScrollBar(); };

/**
 * Unbinds the mouse wheel scroll event of the control that has the scrollbar
 * 
 * @param {string} oOwnerDomRef
 *         Dom ref of the Control that uses the scrollbar
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.ScrollBar.prototype.unbind = function(oOwnerDomRef) {  };


// ---- sap.ui.core.ScrollBarAction --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.ScrollBarAction.toString = function() { return ""; };

// ---- sap.ui.core.Scrolling --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.Scrolling.toString = function() { return ""; };

// ---- sap.ui.core.search.OpenSearchProvider --------------------------------------------------------------------------

/**
 * Constructor for a new search/OpenSearchProvider.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSuggestUrl suggestUrl} : sap.ui.core.URI</li>
 * <li>{@link #getSuggestType suggestType} : string (default: json)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.search.SearchProvider#constructor sap.ui.core.search.SearchProvider}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * A SearchProvider which uses the OpenSearch protocol (either JSON or XML).
 * @extends sap.ui.core.search.SearchProvider
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.search.OpenSearchProvider = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.search.OpenSearchProvider with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.search.SearchProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.search.OpenSearchProvider.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.search.OpenSearchProvider.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.search.OpenSearchProvider.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSuggestType suggestType}.
 * 
 * The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.
 * 
 * Default value is <code>json</code>.
 * @returns {string} Value of property <code>suggestType</code>
 * 
 * @public
 * 
 */
sap.ui.core.search.OpenSearchProvider.prototype.getSuggestType = function() { return ""; };

/**
 * Gets current value of property {@link #getSuggestUrl suggestUrl}.
 * 
 * The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.
 * 
 * @returns {sap.ui.core.URI} Value of property <code>suggestUrl</code>
 * 
 * @public
 * 
 */
sap.ui.core.search.OpenSearchProvider.prototype.getSuggestUrl = function() { return new sap.ui.core.URI(); };

/**
 * Sets a new value for property {@link #getSuggestType suggestType}.
 * 
 * The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>json</code>.
 * @param {string} sSuggestType New value for property <code>suggestType</code>
 * @returns {sap.ui.core.search.OpenSearchProvider} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.search.OpenSearchProvider.prototype.setSuggestType = function(sSuggestType) { return new sap.ui.core.search.OpenSearchProvider(); };

/**
 * Sets a new value for property {@link #getSuggestUrl suggestUrl}.
 * 
 * The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sSuggestUrl New value for property <code>suggestUrl</code>
 * @returns {sap.ui.core.search.OpenSearchProvider} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.search.OpenSearchProvider.prototype.setSuggestUrl = function(sSuggestUrl) { return new sap.ui.core.search.OpenSearchProvider(); };

/**
 * Call this function to get suggest values from the search provider.
 * The given callback function is called with the suggest value (type 'string', 1st parameter)
 * and an array of the suggestions (type '[string]', 2nd parameter).
 * 
 * @param {string} sValue The value for which suggestions are requested.
 * @param {function} fCallback The callback function which is called when the suggestions are available.
 * @type void
 * @public
 * 
 */
sap.ui.core.search.OpenSearchProvider.prototype.suggest = function(sValue,fCallback) { return null; };


// ---- sap.ui.core.search.SearchProvider --------------------------------------------------------------------------

/**
 * Constructor for a new search/SearchProvider.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Abstract base class for all SearchProviders which can be e.g. attached to a SearchField. Do not create instances of this class, but use a concrete sub class instead.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.search.SearchProvider = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.search.SearchProvider with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.search.SearchProvider.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Icon of the Search Provider
 * 
 * @returns {string} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.ui.core.search.SearchProvider.prototype.getIcon = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.search.SearchProvider.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.search.SearchProvider.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Icon of the Search Provider
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIcon New value for property <code>icon</code>
 * @returns {sap.ui.core.search.SearchProvider} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.search.SearchProvider.prototype.setIcon = function(sIcon) { return new sap.ui.core.search.SearchProvider(); };

/**
 * Call this function to get suggest values from the search provider.
 * The given callback function is called with the suggest value (type 'string', 1st parameter)
 * and an array of the suggestions (type '[string]', 2nd parameter).
 * 
 * @param {string} sValue The value for which suggestions are requested.
 * @param {function} fnCallback The callback function which is called when the suggestions are available.
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.search.SearchProvider.prototype.suggest = function(sValue,fnCallback) {  };


// ---- sap.ui.core.SeparatorItem --------------------------------------------------------------------------

/**
 * Constructor for a new SeparatorItem.
 * 
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * An item that provides a visual separation. It borrows all its methods from the classes sap.ui.core.Item, sap.ui.core.Element,
 * sap.ui.base.EventProvider, and sap.ui.base.Object.
 * @extends sap.ui.core.Item
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.SeparatorItem = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.SeparatorItem with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.SeparatorItem.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.SeparatorItem.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.SeparatorItem.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.TextAlign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.TextAlign.toString = function() { return ""; };

// ---- sap.ui.core.TextDirection --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.TextDirection.toString = function() { return ""; };

// ---- sap.ui.core.theming --------------------------------------------------------------------------


// ---- sap.ui.core.theming.Parameters --------------------------------------------------------------------------

/**
 * Returns the scopes from current theming parameters.
 * 
 * @private
 * @sap-restricted sap.ui.core
 * @param {boolean} [bAvoidLoading] Whether loading of parameters should be avoided
 * @return {array} Scope names
 * 
 * @memberof sap.ui.core.theming.Parameters
 */
sap.ui.core.theming.Parameters._getScopes = function(bAvoidLoading) { return null; };

/**
 * Returns the current value for one or more theming parameters, depending on the given arguments.
 * <ul>
 * <li>If no parameter is given a key-value map containing all parameters is returned</li>
 * <li>If a <code>string</code> is given as first parameter the value is returned as a <code>string</code></li>
 * <li>If an <code>array</code> is given as first parameter a key-value map containing all parameters from the <code>array</code> is returned</li>
 * </ul>
 * <p>The returned key-value maps are a copy so changing values in the map does not have any effect</p>
 * 
 * @param {string | string[]} vName the (array with) CSS parameter name(s)
 * @param {sap.ui.core.Element} [oElement]
 *                           Element / control instance to take into account when looking for a parameter value.
 *                           This can make a difference when a parameter value is overridden in a theme scope set via a CSS class.
 * @returns {string | object | undefined} the CSS parameter value(s)
 * 
 * @public
 * 
 * @memberof sap.ui.core.theming.Parameters
 */
sap.ui.core.theming.Parameters.get = function(vName,oElement) { return ""; };

/**
 * Returns the active scope(s) for a given control by looking up the hierarchy.
 * 
 * The lookup navigates the DOM hierarchy if it's available. Otherwise if controls aren't rendered yet,
 * it navigates the control hierarchy. By navigating the control hierarchy, inner-html elements
 * with the respective scope classes can't get recognized as the Custom Style Class API does only for
 * root elements.
 * 
 * @private
 * @sap-restricted sap.viz
 * @param {object} oElement element/control instance
 * @return {array<array<string>>} Two dimensional array with scopes in bottom up order
 * 
 * @memberof sap.ui.core.theming.Parameters
 */
sap.ui.core.theming.Parameters.getActiveScopesFor = function(oElement) { return new array.<array.<string>>(); };

/**
 * Resets the CSS parameters which finally will reload the parameters
 * the next time they are queried via the method <code>get</code>.
 * 
 * @public
 * 
 * @memberof sap.ui.core.theming.Parameters
 */
sap.ui.core.theming.Parameters.reset = function() {  };


// ---- sap.ui.core.Title --------------------------------------------------------------------------

/**
 * Constructor for a new Title.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getLevel level} : sap.ui.core.TitleLevel (default: Auto)</li>
 * <li>{@link #getEmphasized emphasized} : boolean (default: false)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Represents a title element that can be used for aggregation with other controls
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.16.0
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.Title = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.Title with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.Title.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getEmphasized emphasized}.
 * 
 * If set the title is displayed emphasized.
 * This feature is nor supported by all controls using the Title.control.
 * 
 * Default value is <code>false</code>.
 * @returns {boolean} Value of property <code>emphasized</code>
 * 
 * @public
 * 
 */
sap.ui.core.Title.prototype.getEmphasized = function() { return false; };

/**
 * Gets current value of property {@link #getIcon icon}.
 * 
 * Defines the URL for icon display
 * 
 * @returns {sap.ui.core.URI} Value of property <code>icon</code>
 * 
 * @public
 * 
 */
sap.ui.core.Title.prototype.getIcon = function() { return new sap.ui.core.URI(); };

/**
 * Gets current value of property {@link #getLevel level}.
 * 
 * Defines the level of the title. If set to auto the level of the title is chosen by the control rendering the title.
 * 
 * Currently not all controls using the Title.control supporting this property.
 * 
 * Default value is <code>Auto</code>.
 * @returns {sap.ui.core.TitleLevel} Value of property <code>level</code>
 * 
 * @public
 * 
 */
sap.ui.core.Title.prototype.getLevel = function() { return new sap.ui.core.TitleLevel(); };

/**
 * Returns a metadata object for class sap.ui.core.Title.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.Title.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * Defines the title text
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.ui.core.Title.prototype.getText = function() { return ""; };

/**
 * Sets a new value for property {@link #getEmphasized emphasized}.
 * 
 * If set the title is displayed emphasized.
 * This feature is nor supported by all controls using the Title.control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>false</code>.
 * @param {boolean} bEmphasized New value for property <code>emphasized</code>
 * @returns {sap.ui.core.Title} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Title.prototype.setEmphasized = function(bEmphasized) { return new sap.ui.core.Title(); };

/**
 * Sets a new value for property {@link #getIcon icon}.
 * 
 * Defines the URL for icon display
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {sap.ui.core.URI} sIcon New value for property <code>icon</code>
 * @returns {sap.ui.core.Title} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Title.prototype.setIcon = function(sIcon) { return new sap.ui.core.Title(); };

/**
 * Sets a new value for property {@link #getLevel level}.
 * 
 * Defines the level of the title. If set to auto the level of the title is chosen by the control rendering the title.
 * 
 * Currently not all controls using the Title.control supporting this property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>Auto</code>.
 * @param {sap.ui.core.TitleLevel} sLevel New value for property <code>level</code>
 * @returns {sap.ui.core.Title} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Title.prototype.setLevel = function(sLevel) { return new sap.ui.core.Title(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * Defines the title text
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.ui.core.Title} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.Title.prototype.setText = function(sText) { return new sap.ui.core.Title(); };


// ---- sap.ui.core.TitleLevel --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.TitleLevel.toString = function() { return ""; };

// ---- sap.ui.core.tmpl.DOMAttribute --------------------------------------------------------------------------

/**
 * Constructor for a new tmpl/DOMAttribute.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getValue value} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Represents a DOM attribute of a DOM element.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.15
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.tmpl.DOMAttribute = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.tmpl.DOMAttribute with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.DOMAttribute.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.tmpl.DOMAttribute.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.DOMAttribute.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * Name of the DOM attribute
 * 
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMAttribute.prototype.getName = function() { return ""; };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * Value of the DOM attribute
 * 
 * @returns {string} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMAttribute.prototype.getValue = function() { return ""; };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * Name of the DOM attribute
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.ui.core.tmpl.DOMAttribute} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMAttribute.prototype.setName = function(sName) { return new sap.ui.core.tmpl.DOMAttribute(); };

/**
 * Sets a new value for property {@link #getValue value}.
 * 
 * Value of the DOM attribute
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sValue New value for property <code>value</code>
 * @returns {sap.ui.core.tmpl.DOMAttribute} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMAttribute.prototype.setValue = function(sValue) { return new sap.ui.core.tmpl.DOMAttribute(); };


// ---- sap.ui.core.tmpl.DOMElement --------------------------------------------------------------------------

/**
 * Constructor for a new tmpl/DOMElement.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTag tag} : string (default: span)</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} : sap.ui.core.tmpl.DOMAttribute[] (default)</li>
 * <li>{@link #getElements elements} : sap.ui.core.tmpl.DOMElement[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Represents a DOM element. It allows to use databinding for the properties and nested DOM attributes.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.15
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.tmpl.DOMElement = function(sId,mSettings) {};
/**
 * Adds some attribute to the aggregation {@link #getAttributes attributes}.
 * @param {sap.ui.core.tmpl.DOMAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @returns {sap.ui.core.tmpl.DOMElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.addAttribute = function(oAttribute) { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Adds some element to the aggregation {@link #getElements elements}.
 * @param {sap.ui.core.tmpl.DOMElement}
 *            oElement the element to add; if empty, nothing is inserted
 * @returns {sap.ui.core.tmpl.DOMElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.addElement = function(oElement) { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Returns the value of a DOM attribute if available or undefined if the DOM attribute is not available when using this method with the parameter name only.
 * When using the method with the parameter name and value the method acts as a setter and sets the value of a DOM attribute.
 * In this case the return value is the reference to this DOM element to support method chaining. If you pass null as value of the attribute the attribute will be removed.
 * 
 * @param {string} sName
 *         The name of the DOM attribute.
 * @param {string} sValue
 *         The value of the DOM attribute. If the value is undefined the DOM attribute will be removed.
 * @return {any} value of attribute or <code>this</code> when called as a setter
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.attr = function(sName,sValue) { return null; };

/**
 * Destroys all the attributes in the aggregation {@link #getAttributes attributes}.
 * @returns {sap.ui.core.tmpl.DOMElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.destroyAttributes = function() { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Destroys all the elements in the aggregation {@link #getElements elements}.
 * @returns {sap.ui.core.tmpl.DOMElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.destroyElements = function() { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Creates a new subclass of class sap.ui.core.tmpl.DOMElement with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.DOMElement.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getAttributes attributes}.
 * 
 * DOM attributes which are rendered as part of the DOM element and bindable
 * 
 * @returns {sap.ui.core.tmpl.DOMAttribute[]}
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.getAttributes = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getElements elements}.
 * 
 * Nested DOM elements to support nested bindable structures
 * 
 * @returns {sap.ui.core.tmpl.DOMElement[]}
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.getElements = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.ui.core.tmpl.DOMElement.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.DOMElement.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getTag tag}.
 * 
 * The HTML-tag of the DOM element which contains the text
 * 
 * Default value is <code>span</code>.
 * @returns {string} Value of property <code>tag</code>
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.getTag = function() { return ""; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * The text content of the DOM element
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.getText = function() { return ""; };

/**
 * Checks for the provided <code>sap.ui.core.tmpl.DOMAttribute</code> in the aggregation {@link #getAttributes attributes}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.tmpl.DOMAttribute}
 *           oAttribute The attribute whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.indexOfAttribute = function(oAttribute) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.tmpl.DOMElement</code> in the aggregation {@link #getElements elements}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.tmpl.DOMElement}
 *           oElement The element whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.indexOfElement = function(oElement) { return 0; };

/**
 * Inserts a attribute into the aggregation {@link #getAttributes attributes}.
 * 
 * @param {sap.ui.core.tmpl.DOMAttribute}
 *            oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the attribute should be inserted at; for
 *              a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the attribute is inserted at
 *              the last position
 * @returns {sap.ui.core.tmpl.DOMElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.insertAttribute = function(oAttribute,iIndex) { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Inserts a element into the aggregation {@link #getElements elements}.
 * 
 * @param {sap.ui.core.tmpl.DOMElement}
 *            oElement the element to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the element should be inserted at; for
 *              a negative value of <code>iIndex</code>, the element is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the element is inserted at
 *              the last position
 * @returns {sap.ui.core.tmpl.DOMElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.insertElement = function(oElement,iIndex) { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Removes all the controls from the aggregation {@link #getAttributes attributes}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.tmpl.DOMAttribute[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.removeAllAttributes = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getElements elements}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.tmpl.DOMElement[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.removeAllElements = function() { return new Array(); };

/**
 * Removes the DOM attribute for the given name and returns the reference to this DOM element to support method chaining.
 * 
 * @param {string} sName
 *         The name of the DOM attribute.
 * @return {sap.ui.core.tmpl.DOMElement}
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.removeAttr = function(sName) { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Removes a attribute from the aggregation {@link #getAttributes attributes}.
 * 
 * @param {int | string | sap.ui.core.tmpl.DOMAttribute} vAttribute The attribute to remove or its index or id
 * @returns {sap.ui.core.tmpl.DOMAttribute} The removed attribute or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.removeAttribute = function(vAttribute) { return new sap.ui.core.tmpl.DOMAttribute(); };

/**
 * Removes a element from the aggregation {@link #getElements elements}.
 * 
 * @param {int | string | sap.ui.core.tmpl.DOMElement} vElement The element to remove or its index or id
 * @returns {sap.ui.core.tmpl.DOMElement} The removed element or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.removeElement = function(vElement) { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Sets a new value for property {@link #getTag tag}.
 * 
 * The HTML-tag of the DOM element which contains the text
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>span</code>.
 * @param {string} sTag New value for property <code>tag</code>
 * @returns {sap.ui.core.tmpl.DOMElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.setTag = function(sTag) { return new sap.ui.core.tmpl.DOMElement(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * The text content of the DOM element
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.ui.core.tmpl.DOMElement} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.DOMElement.prototype.setText = function(sText) { return new sap.ui.core.tmpl.DOMElement(); };


// ---- sap.ui.core.tmpl.HandlebarsTemplate --------------------------------------------------------------------------

/**
 * Creates and initializes a new handlebars template with the given <code>sId</code>
 * and settings.
 * 
 * The set of allowed entries in the <code>mSettings</code> object depends on
 * the concrete subclass and is described there.
 * 
 * 
 * @param {string}
 *            [sId] optional id for the new template; generated automatically if
 *            no non-empty id is given Note: this can be omitted, no matter
 *            whether <code>mSettings</code> will be given or not!
 * @param {object}
 *            [mSettings] optional map/JSON-object with initial settings for the
 *            new component instance
 * @public
 * 
 * @class The class for Handlebars Templates.
 * @extends sap.ui.core.tmpl.Template
 * @abstract
 * @version 1.48.4
 * @since 1.15
 * 
 */
sap.ui.core.tmpl.HandlebarsTemplate = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.tmpl.HandlebarsTemplate with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.tmpl.Template.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.HandlebarsTemplate.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.tmpl.HandlebarsTemplate.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.HandlebarsTemplate.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.core.tmpl.Template --------------------------------------------------------------------------

/**
 * Creates and initializes a new template with the given <code>sId</code> and
 * settings.
 * 
 * The set of allowed entries in the <code>mSettings</code> object depends on
 * the concrete subclass and is described there.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContent content} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * 
 * @param {string}
 *            [sId] optional id for the new template; generated automatically if
 *            no non-empty id is given Note: this can be omitted, no matter
 *            whether <code>mSettings</code> will be given or not!
 * @param {object}
 *            [mSettings] optional map/JSON-object with initial settings for the
 *            new component instance
 * @public
 * 
 * @class Base Class for Template.
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @version 1.48.4
 * @since 1.15
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.tmpl.Template = function(sId,mSettings) {};
/**
 * Returns the registered template for the given ID, if any.
 * @param {string} sId
 * @return {sap.ui.core.tmpl.Template} the template for the given ID
 * @public
 * 
 */
sap.ui.core.tmpl.Template.byId = function(sId) { return new sap.ui.core.tmpl.Template(); };

/**
 * Creates an anonymous TemplateControl for the Template.
 * 
 * @param {string} sId the control ID
 * @param {object} [oContext] the context for the renderer/templating
 * @param {sap.ui.core.mvc.View} oView
 * @return {sap.ui.core.tmpl.TemplateControl} the created control instance
 * @public
 * 
 */
sap.ui.core.tmpl.Template.prototype.createControl = function(sId,oContext,oView) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Declares a new control based on this template and returns the created
 * class / constructor function. The class is based on the information coming
 * from the abstract functions <code>createMetadata</code> and
 * <code>createRenderer</code>.
 * 
 * @param {string} sControl the fully qualified name of the control
 * @return {function} the created class / constructor function
 * @public
 * 
 */
sap.ui.core.tmpl.Template.prototype.declareControl = function(sControl) { return function() {}; };

/**
 * Creates a new subclass of class sap.ui.core.tmpl.Template with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.Template.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getContent content}.
 * 
 * The Template definition as a String.
 * 
 * @returns {string} Value of property <code>content</code>
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.Template.prototype.getContent = function() { return ""; };

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 * 
 */
sap.ui.core.tmpl.Template.prototype.getInterface = function() {  };

/**
 * Returns a metadata object for class sap.ui.core.tmpl.Template.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.Template.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * parses the given path and extracts the model and path
 * 
 * @param {string} sPath the path
 * @return {object} the model and the path
 * 
 * @protected
 * @static
 * 
 */
sap.ui.core.tmpl.Template.parsePath = function(sPath) { return new Object(); };

/**
 * Creates an anonymous TemplateControl for the Template and places the control
 * into the specified DOM element.
 * 
 * @param {string|DomRef} oRef the id or the DOM reference where to render the template
 * @param {object} [oContext] The context to use to evaluate the Template. It will be applied as value for the context property of the created control.
 * @param {string|int} [vPosition] Describes the position where the control should be put into the container
 * @param {boolean} bInline
 * @return {sap.ui.core.tmpl.TemplateControl} the created control instance
 * @public
 * 
 */
sap.ui.core.tmpl.Template.prototype.placeAt = function(oRef,oContext,vPosition,bInline) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Sets a new value for property {@link #getContent content}.
 * 
 * The Template definition as a String.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sContent New value for property <code>content</code>
 * @returns {sap.ui.core.tmpl.Template} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.Template.prototype.setContent = function(sContent) { return new sap.ui.core.tmpl.Template(); };


// ---- sap.ui.core.tmpl.TemplateControl --------------------------------------------------------------------------

/**
 * Constructor for a new tmpl/TemplateControl.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContext context} : object</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getTemplate template} : (sap.ui.core.ID | sap.ui.core.tmpl.Template)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link #event:beforeRendering beforeRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * This is the base class for all template controls. Template controls are declared based on templates.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.15
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.tmpl.TemplateControl = function(sId,mSettings) {};
/**
 * Fired when the Template Control has been (re-)rendered and its HTML is present in the DOM.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.afterRendering = function(oControlEvent) {  };

/**
 * Fired before this Template Control is re-rendered. Use to unbind event handlers from HTML elements etc.
 * @event
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.beforeRendering = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:afterRendering afterRendering} event of this <code>sap.ui.core.tmpl.TemplateControl</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.core.tmpl.TemplateControl</code> itself.
 * 
 * Fired when the Template Control has been (re-)rendered and its HTML is present in the DOM.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.tmpl.TemplateControl</code> itself
 * 
 * @returns {sap.ui.core.tmpl.TemplateControl} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.attachAfterRendering = function(oData,fnFunction,oListener) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:beforeRendering beforeRendering} event of this <code>sap.ui.core.tmpl.TemplateControl</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.core.tmpl.TemplateControl</code> itself.
 * 
 * Fired before this Template Control is re-rendered. Use to unbind event handlers from HTML elements etc.
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.tmpl.TemplateControl</code> itself
 * 
 * @returns {sap.ui.core.tmpl.TemplateControl} Reference to <code>this</code> in order to allow method chaining
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.attachBeforeRendering = function(oData,fnFunction,oListener) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Creates a pseudo binding for an aggregation to get notified once the property
 * changes to invalidate the control and trigger a re-rendering.
 * 
 * @param {string} sPath the binding path
 * @return {any} the value of the path
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.bindList = function(sPath) { return null; };

/**
 * Creates a pseudo binding for a property to get notified once the property
 * changes to invalidate the control and trigger a re-rendering.
 * 
 * @param {string} sPath the binding path
 * @return {any} the value of the path
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.bindProp = function(sPath) { return null; };

/**
 * compiles (creates and registers) a new control
 * 
 * @param {object} mSettings the settings for the new control
 * @param {string} [sParentPath] the parent path for the control
 * @param {boolean} [bDoNotAdd] if true, then the control will not be
 *          added to the _controls aggregation
 * @param {sap.ui.core.mvc.View} oView
 * @return {sap.ui.core.Control} new control instance
 * 
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.createControl = function(mSettings,sParentPath,bDoNotAdd,oView) { return new sap.ui.core.Control(); };

/**
 * compiles (creates and registers) a new DOM element
 * 
 * @param {object} mSettings the settings for the new DOM element
 * @param {string} [sParentPath] the parent path for the DOM element
 * @param {boolean} [bDoNotAdd] if true, then the control will not be
 *          added to the _controls aggregation
 * @return {sap.ui.core.Control} new DOM element instance
 * 
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.createDOMElement = function(mSettings,sParentPath,bDoNotAdd) { return new sap.ui.core.Control(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:afterRendering afterRendering} event of this <code>sap.ui.core.tmpl.TemplateControl</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.core.tmpl.TemplateControl} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.detachAfterRendering = function(fnFunction,oListener) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:beforeRendering beforeRendering} event of this <code>sap.ui.core.tmpl.TemplateControl</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.core.tmpl.TemplateControl} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.detachBeforeRendering = function(fnFunction,oListener) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Creates a new subclass of class sap.ui.core.tmpl.TemplateControl with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.TemplateControl.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:afterRendering afterRendering} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.core.tmpl.TemplateControl} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.fireAfterRendering = function(mParameters) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Fires event {@link #event:beforeRendering beforeRendering} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.core.tmpl.TemplateControl} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.fireBeforeRendering = function(mParameters) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Gets current value of property {@link #getContext context}.
 * 
 * The context is a data object. It can be used for default template expressions. A change of the context object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By default the context is an empty object.
 * 
 * @returns {object} Value of property <code>context</code>
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.getContext = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.ui.core.tmpl.TemplateControl.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.tmpl.TemplateControl.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * ID of the element which is the current target of the association {@link #getTemplate template}, or <code>null</code>.
 * 
 * @returns {sap.ui.core.ID}
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.getTemplate = function() { return new sap.ui.core.ID(); };

/**
 * Returns the instance specific renderer for an anonymous template control.
 * 
 * @return {function} the instance specific renderer function
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.getTemplateRenderer = function() { return function() {}; };

/**
 * checks whether the control is inline or not
 * 
 * @return {boolean} flag, whether to control is inline or not
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.isInline = function() { return false; };

/**
 * Sets a new value for property {@link #getContext context}.
 * 
 * The context is a data object. It can be used for default template expressions. A change of the context object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By default the context is an empty object.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {object} oContext New value for property <code>context</code>
 * @returns {sap.ui.core.tmpl.TemplateControl} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.setContext = function(oContext) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Sets the associated {@link #getTemplate template}.
 * @param {sap.ui.core.ID | sap.ui.core.tmpl.Template} oTemplate ID of an element which becomes the new target of this template association; alternatively, an element instance may be given
 * @returns {sap.ui.core.tmpl.TemplateControl} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.setTemplate = function(oTemplate) { return new sap.ui.core.tmpl.TemplateControl(); };

/**
 * Sets the instance specific renderer for an anonymous template control.
 * 
 * @param {function} fnRenderer the instance specific renderer function
 * @return {sap.ui.core.tmpl.Template} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.tmpl.TemplateControl.prototype.setTemplateRenderer = function(fnRenderer) { return new sap.ui.core.tmpl.Template(); };


// ---- sap.ui.core.Toolbar --------------------------------------------------------------------------


// ---- sap.ui.core.TooltipBase --------------------------------------------------------------------------

/**
 * Constructor for a new TooltipBase.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: )</li>
 * <li>{@link #getOpenDuration openDuration} : int (default: 200)</li>
 * <li>{@link #getCloseDuration closeDuration} : int (default: 200)</li>
 * <li>{@link #getMyPosition myPosition} : sap.ui.core.Dock (default: begin top)</li>
 * <li>{@link #getAtPosition atPosition} : sap.ui.core.Dock (default: begin bottom)</li>
 * <li>{@link #getOffset offset} : string (default: 10 3)</li>
 * <li>{@link #getCollision collision} : sap.ui.core.Collision (default: flip)</li>
 * <li>{@link #getOpenDelay openDelay} : int (default: 500)</li>
 * <li>{@link #getCloseDelay closeDelay} : int (default: 100)</li>
 * </ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link #event:closed closed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Abstract class that can be extended in order to implement any extended tooltip. For example, RichTooltip Control is based on it. It provides the opening/closing behavior and the main "text" property.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.TooltipBase = function(sId,mSettings) {};
/**
 * This event is fired when the Tooltip has been closed
 * @event
 * @since 1.11.0
 * 
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.closed = function(oControlEvent) {  };

/**
 * Attaches event handler <code>fnFunction</code> to the {@link #event:closed closed} event of this <code>sap.ui.core.TooltipBase</code>.
 * 
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
 * otherwise it will be bound to this <code>sap.ui.core.TooltipBase</code> itself.
 * 
 * This event is fired when the Tooltip has been closed
 * 
 * @param {object}
 *            [oData] An application-specific payload object that will be passed to the event handler along with the event object when firing the event
 * @param {function}
 *            fnFunction The function to be called when the event occurs
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.core.TooltipBase</code> itself
 * 
 * @returns {sap.ui.core.TooltipBase} Reference to <code>this</code> in order to allow method chaining
 * @public
 * @since 1.11.0
 * 
 */
sap.ui.core.TooltipBase.prototype.attachClosed = function(oData,fnFunction,oListener) { return new sap.ui.core.TooltipBase(); };

/**
 * Detaches event handler <code>fnFunction</code> from the {@link #event:closed closed} event of this <code>sap.ui.core.TooltipBase</code>.
 * 
 * The passed function and listener object must match the ones used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to be called, when the event occurs
 * @param {object}
 *            oListener Context object on which the given function had to be called
 * @returns {sap.ui.core.TooltipBase} Reference to <code>this</code> in order to allow method chaining
 * @since 1.11.0
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.detachClosed = function(fnFunction,oListener) { return new sap.ui.core.TooltipBase(); };

/**
 * Creates a new subclass of class sap.ui.core.TooltipBase with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.TooltipBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fires event {@link #event:closed closed} to attached listeners.
 * 
 * @param {object} [mParameters] Parameters to pass along with the event
 * @returns {sap.ui.core.TooltipBase} Reference to <code>this</code> in order to allow method chaining
 * @protected
 * @since 1.11.0
 * 
 */
sap.ui.core.TooltipBase.prototype.fireClosed = function(mParameters) { return new sap.ui.core.TooltipBase(); };

/**
 * Gets current value of property {@link #getAtPosition atPosition}.
 * 
 * Optional. At position defines which position on the target control to align the positioned tooltip.
 * 
 * Default value is <code>begin bottom</code>.
 * @returns {sap.ui.core.Dock} Value of property <code>atPosition</code>
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getAtPosition = function() { return new sap.ui.core.Dock(); };

/**
 * Gets current value of property {@link #getCloseDelay closeDelay}.
 * 
 * Closing delay of the tooltip in milliseconds
 * 
 * Default value is <code>100</code>.
 * @returns {int} Value of property <code>closeDelay</code>
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getCloseDelay = function() { return 0; };

/**
 * Gets current value of property {@link #getCloseDuration closeDuration}.
 * 
 * Optional. Close Duration in milliseconds.
 * 
 * Default value is <code>200</code>.
 * @returns {int} Value of property <code>closeDuration</code>
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getCloseDuration = function() { return 0; };

/**
 * Gets current value of property {@link #getCollision collision}.
 * 
 * Optional. Collision - when the positioned element overflows the window in some direction, move it to an alternative position.
 * 
 * Default value is <code>flip</code>.
 * @returns {sap.ui.core.Collision} Value of property <code>collision</code>
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getCollision = function() { return new sap.ui.core.Collision(); };

/**
 * Returns a metadata object for class sap.ui.core.TooltipBase.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.TooltipBase.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMyPosition myPosition}.
 * 
 * Optional. My position defines which position on the extended tooltip being positioned to align with the target control.
 * 
 * Default value is <code>begin top</code>.
 * @returns {sap.ui.core.Dock} Value of property <code>myPosition</code>
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getMyPosition = function() { return new sap.ui.core.Dock(); };

/**
 * Gets current value of property {@link #getOffset offset}.
 * 
 * Optional. Offset adds these left-top values to the calculated position.
 * Example: "10 3".
 * 
 * Default value is <code>10 3</code>.
 * @returns {string} Value of property <code>offset</code>
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getOffset = function() { return ""; };

/**
 * Gets current value of property {@link #getOpenDelay openDelay}.
 * 
 * Opening delay of the tooltip in milliseconds
 * 
 * Default value is <code>500</code>.
 * @returns {int} Value of property <code>openDelay</code>
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getOpenDelay = function() { return 0; };

/**
 * Gets current value of property {@link #getOpenDuration openDuration}.
 * 
 * Optional. Open Duration in milliseconds.
 * 
 * Default value is <code>200</code>.
 * @returns {int} Value of property <code>openDuration</code>
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getOpenDuration = function() { return 0; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.
 * 
 * Default value is <code></code>.
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.getText = function() { return ""; };

/**
 * Sets a new value for property {@link #getAtPosition atPosition}.
 * 
 * Optional. At position defines which position on the target control to align the positioned tooltip.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>begin bottom</code>.
 * @param {sap.ui.core.Dock} sAtPosition New value for property <code>atPosition</code>
 * @returns {sap.ui.core.TooltipBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setAtPosition = function(sAtPosition) { return new sap.ui.core.TooltipBase(); };

/**
 * Sets a new value for property {@link #getCloseDelay closeDelay}.
 * 
 * Closing delay of the tooltip in milliseconds
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>100</code>.
 * @param {int} iCloseDelay New value for property <code>closeDelay</code>
 * @returns {sap.ui.core.TooltipBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setCloseDelay = function(iCloseDelay) { return new sap.ui.core.TooltipBase(); };

/**
 * Sets a new value for property {@link #getCloseDuration closeDuration}.
 * 
 * Optional. Close Duration in milliseconds.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>200</code>.
 * @param {int} iCloseDuration New value for property <code>closeDuration</code>
 * @returns {sap.ui.core.TooltipBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setCloseDuration = function(iCloseDuration) { return new sap.ui.core.TooltipBase(); };

/**
 * Sets a new value for property {@link #getCollision collision}.
 * 
 * Optional. Collision - when the positioned element overflows the window in some direction, move it to an alternative position.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>flip</code>.
 * @param {sap.ui.core.Collision} sCollision New value for property <code>collision</code>
 * @returns {sap.ui.core.TooltipBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setCollision = function(sCollision) { return new sap.ui.core.TooltipBase(); };

/**
 * Sets a new value for property {@link #getMyPosition myPosition}.
 * 
 * Optional. My position defines which position on the extended tooltip being positioned to align with the target control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>begin top</code>.
 * @param {sap.ui.core.Dock} sMyPosition New value for property <code>myPosition</code>
 * @returns {sap.ui.core.TooltipBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setMyPosition = function(sMyPosition) { return new sap.ui.core.TooltipBase(); };

/**
 * Sets a new value for property {@link #getOffset offset}.
 * 
 * Optional. Offset adds these left-top values to the calculated position.
 * Example: "10 3".
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>10 3</code>.
 * @param {string} sOffset New value for property <code>offset</code>
 * @returns {sap.ui.core.TooltipBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setOffset = function(sOffset) { return new sap.ui.core.TooltipBase(); };

/**
 * Sets a new value for property {@link #getOpenDelay openDelay}.
 * 
 * Opening delay of the tooltip in milliseconds
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>500</code>.
 * @param {int} iOpenDelay New value for property <code>openDelay</code>
 * @returns {sap.ui.core.TooltipBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setOpenDelay = function(iOpenDelay) { return new sap.ui.core.TooltipBase(); };

/**
 * Sets a new value for property {@link #getOpenDuration openDuration}.
 * 
 * Optional. Open Duration in milliseconds.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>200</code>.
 * @param {int} iOpenDuration New value for property <code>openDuration</code>
 * @returns {sap.ui.core.TooltipBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setOpenDuration = function(iOpenDuration) { return new sap.ui.core.TooltipBase(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code></code>.
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.ui.core.TooltipBase} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.TooltipBase.prototype.setText = function(sText) { return new sap.ui.core.TooltipBase(); };


// ---- sap.ui.core.UIArea --------------------------------------------------------------------------

/**
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getDependents dependents} : sap.ui.core.Control[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * 
 * @class An area in a page that hosts a tree of UI elements.
 * 
 * Provides means for event-handling, rerendering, etc.
 * 
 * Special aggregation "dependents" is connected to the lifecycle management and databinding,
 * but not rendered automatically and can be used for popups or other dependent controls. This allows
 * definition of popup controls in declarative views and enables propagation of model and context
 * information to them.
 * 
 * @extends sap.ui.base.ManagedObject
 * @version 1.48.4
 * @param {sap.ui.core.Core} oCore internal API of the <core>Core</code> that manages this UIArea
 * @param {object} [oRootNode] reference to the Dom Node that should be 'hosting' the UI Area.
 * @public
 * 
 */
sap.ui.core.UIArea = function(oCore,oRootNode) {};
/**
 * Adds some content to the aggregation {@link #getContent content}.
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @returns {sap.ui.core.UIArea} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.addContent = function(oContent) { return new sap.ui.core.UIArea(); };

/**
 * Adds some dependent to the aggregation {@link #getDependents dependents}.
 * @param {sap.ui.core.Control}
 *            oDependent the dependent to add; if empty, nothing is inserted
 * @returns {sap.ui.core.UIArea} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.addDependent = function(oDependent) { return new sap.ui.core.UIArea(); };

/**
 * Destroys all the content in the aggregation {@link #getContent content}.
 * @returns {sap.ui.core.UIArea} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.destroyContent = function() { return new sap.ui.core.UIArea(); };

/**
 * Destroys all the dependents in the aggregation {@link #getDependents dependents}.
 * @returns {sap.ui.core.UIArea} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.destroyDependents = function() { return new sap.ui.core.UIArea(); };

/**
 * Creates a new subclass of class sap.ui.core.UIArea with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.UIArea.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Provide getBindingContext, as UIArea can be parent of an element.
 * @return {null} Always returns null.
 * 
 * @protected
 * 
 */
sap.ui.core.UIArea.prototype.getBindingContext = function() { return null; };

/**
 * Gets content of aggregation {@link #getContent content}.
 * 
 * Content that is displayed in the UIArea.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.getContent = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getDependents dependents}.
 * 
 * Dependent objects whose lifecycle is bound to the UIarea but which are not automatically rendered by the UIArea.
 * 
 * @returns {sap.ui.core.Control[]}
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.getDependents = function() { return new Array(); };

/**
 * Returns the Core's event provider as new eventing parent to enable control event bubbling to the core to ensure compatibility with the core validation events.
 * 
 * @return {sap.ui.base.EventProvider} the parent event provider
 * @protected
 * 
 */
sap.ui.core.UIArea.prototype.getEventingParent = function() { return new sap.ui.base.EventProvider(); };

/**
 * Returns this <code>UIArea</code>'s id (as determined from provided RootNode).
 * @return {string|null} id of this UIArea
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.getId = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.UIArea.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.UIArea.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the content control of this <code>UIArea</code> at the specified index.
 * If no index is given the first content control is returned.
 * 
 * @param {int} idx index of the control in the content of this <code>UIArea</code>
 * @return {sap.ui.core.Control} the content control of this <code>UIArea</code> at the specified index.
 * @public
 * @deprecated use function <code>getContent</code> instead
 * 
 */
sap.ui.core.UIArea.prototype.getRootControl = function(idx) { return new sap.ui.core.Control(); };

/**
 * Returns the Root Node hosting this instance of <code>UIArea</code>.
 * 
 * @return {Element} the Root Node hosting this instance of <code>UIArea</code>.
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.getRootNode = function() { return null; };

/**
 * Returns this UI area. Needed to stop recursive calls from an element to its parent.
 * 
 * @return {sap.ui.core.UIArea} this
 * @protected
 * 
 */
sap.ui.core.UIArea.prototype.getUIArea = function() { return new sap.ui.core.UIArea(); };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getContent content}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oContent The content whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.indexOfContent = function(oContent) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation {@link #getDependents dependents}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.Control}
 *           oDependent The dependent whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.indexOfDependent = function(oDependent) { return 0; };

/**
 * Inserts a content into the aggregation {@link #getContent content}.
 * 
 * @param {sap.ui.core.Control}
 *            oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the content should be inserted at; for
 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the content is inserted at
 *              the last position
 * @returns {sap.ui.core.UIArea} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.insertContent = function(oContent,iIndex) { return new sap.ui.core.UIArea(); };

/**
 * Inserts a dependent into the aggregation {@link #getDependents dependents}.
 * 
 * @param {sap.ui.core.Control}
 *            oDependent the dependent to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the dependent should be inserted at; for
 *              a negative value of <code>iIndex</code>, the dependent is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the dependent is inserted at
 *              the last position
 * @returns {sap.ui.core.UIArea} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.insertDependent = function(oDependent,iIndex) { return new sap.ui.core.UIArea(); };

/**
 * Will be used as end-point for invalidate-bubbling from controls up their hierarchy.<br/> Triggers re-rendering of
 * the UIAreas content.
 * @protected
 * 
 */
sap.ui.core.UIArea.prototype.invalidate = function() {  };

/**
 * Checks whether the control is still valid (is in the DOM)
 * 
 * @return {boolean} True if the control is still in the active DOM
 * @protected
 * 
 */
sap.ui.core.UIArea.prototype.isActive = function() { return false; };

/**
 * Returns whether rerendering is currently suppressed on this UIArea
 * @return boolean
 * @protected
 * 
 */
sap.ui.core.UIArea.prototype.isInvalidateSuppressed = function() {  };

/**
 * Returns the locked state of the <code>sap.ui.core.UIArea</code>
 * @return {boolean} locked state
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.isLocked = function() { return false; };

/**
 * Locks this instance of UIArea.
 * 
 * Rerendering and eventing will not be active as long as no
 * {@link #unlock} is called.
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.lock = function() {  };

/**
 * Removes all the controls from the aggregation {@link #getContent content}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.removeAllContent = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getDependents dependents}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.Control[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.removeAllDependents = function() { return new Array(); };

/**
 * Removes a content from the aggregation {@link #getContent content}.
 * 
 * @param {int | string | sap.ui.core.Control} vContent The content to remove or its index or id
 * @returns {sap.ui.core.Control} The removed content or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.removeContent = function(vContent) { return new sap.ui.core.Control(); };

/**
 * Removes a dependent from the aggregation {@link #getDependents dependents}.
 * 
 * @param {int | string | sap.ui.core.Control} vDependent The dependent to remove or its index or id
 * @returns {sap.ui.core.Control} The removed dependent or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.removeDependent = function(vDependent) { return new sap.ui.core.Control(); };

/**
 * Sets the root control to be displayed in this UIArea.
 * 
 * First, all old content controls (if any) will be detached from this UIArea (e.g. their parent
 * relationship to this UIArea will be cut off). Then the parent relationship for the new
 * content control (if not empty) will be set to this UIArea and finally, the UIArea will
 * be marked for re-rendering.
 * 
 * The real re-rendering happens whenever the re-rendering is called. Either implicitly
 * at the end of any control event or by calling sap.ui.getCore().applyChanges().
 * 
 * @param {sap.ui.base.Interface | sap.ui.core.Control}
 *            oRootControl the Control that should be the Root for this <code>UIArea</code>.
 * @public
 * @deprecated use functions <code>removeAllContent</code> and <code>addContent</code> instead
 * 
 */
sap.ui.core.UIArea.prototype.setRootControl = function(oRootControl) {  };

/**
 * Allows setting the Root Node hosting this instance of <code>UIArea</code>.<br/> The Dom Ref must have an Id that
 * will be used as Id for this instance of <code>UIArea</code>.
 * 
 * @param {object}
 *            oRootNode the hosting Dom Ref for this instance of <code>UIArea</code>.
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.setRootNode = function(oRootNode) {  };

/**
 * Un-Locks this instance of UIArea.
 * 
 * Rerendering and eventing will now be enabled again.
 * 
 * @public
 * 
 */
sap.ui.core.UIArea.prototype.unlock = function() {  };


// ---- sap.ui.core.UIComponent --------------------------------------------------------------------------

/**
 * Base Class for UIComponent.
 * 
 * If you are extending a UIComponent make sure you read the {@link #.extend} documentation since the metadata is special.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Component#constructor sap.ui.core.Component}
 * can be used as well.
 * 
 * @class
 * Creates and initializes a new UIComponent with the given <code>sId</code> and
 * settings.
 * 
 * The set of allowed entries in the <code>mSettings</code> object depends on
 * the concrete subclass and is described there. See {@link sap.ui.core.Component}
 * for a general description of this argument.
 * 
 * @param {string}
 *            [sId] Optional ID for the new control; generated automatically if
 *            no non-empty ID is given Note: this can be omitted, no matter
 *            whether <code>mSettings</code> will be given or not!
 * @param {object}
 *            [mSettings] optional map/JSON-object with initial settings for the
 *            new component instance
 * @public
 * 
 * @extends sap.ui.core.Component
 * @abstract
 * @version 1.48.4
 * @since 1.9.2
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.UIComponent = function(sId,mSettings) {};
/**
 * Returns an element by its ID in the context of the component.
 * 
 * @param {string} sId Component local ID of the element
 * @return {sap.ui.core.Element} element by its ID or <code>undefined</code>
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.byId = function(sId) { return new sap.ui.core.Element(); };

/**
 * Hook method to create the content (UI Control Tree) of this component.
 * 
 * The default implementation in this class reads the name (and optionally type) of a root view from the
 * descriptor for this component (path <code>/sap.ui5/rootView</code>) or, for backward compatibility,
 * just the name from static component metadata (property <code>rootView</code>). When no type is specified,
 * it defaults to XML. The method then calls the {@link sap.ui.view view factory} to instantiate the root
 * view and returns the result.
 * 
 * When there is no root view configuration, <code>null</code> will be returned.
 * 
 * This method can be overwritten by subclasses if the default implementation doesn't fit their needs.
 * Subclasses are not limited to views as return type but may return any control, but only a single control
 * (can be the root of a larger control tree, however).
 * 
 * @returns {sap.ui.core.mvc.View|sap.ui.core.Control} Root control of the UI tree or <code>null</code> if none is configured
 * @throws {Error} When the root view configuration could not be interpreted; subclasses might throw errors also for other reasons
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.createContent = function() { return new sap.ui.core.mvc.View(); };

/**
 * Convert the given component local element ID to a globally unique ID
 * by prefixing it with the component ID.
 * 
 * @param {string} sId Component local ID of the element
 * @return {string} prefixed id
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.createId = function(sId) { return ""; };

/**
 * Creates a new subclass of class sap.ui.core.UIComponent with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Component.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.UIComponent.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * A method to be implemented by UIComponents, returning the flag whether to prefix
 * the IDs of controls automatically or not if the controls are created inside
 * the {@link sap.ui.core.UIComponent#createContent} function. By default this
 * feature is not activated.
 * 
 * You can overwrite this function and return <code>true</code> to activate the automatic
 * prefixing. In addition the default behavior can be configured in the manifest
 * by specifying the entry <code>sap.ui5/autoPrefixId</code>.
 * 
 * @since 1.15.1
 * @return {boolean} true, if the Controls IDs should be prefixed automatically
 * @protected
 * 
 */
sap.ui.core.UIComponent.prototype.getAutoPrefixId = function() { return false; };

/**
 * @see sap.ui.base.EventProvider#getEventingParent
 * @protected
 * 
 */
sap.ui.core.UIComponent.prototype.getEventingParent = function() {  };

/**
 * Returns the local ID of an element by removing the component ID prefix or
 * <code>null</code> if the ID does not contain a prefix.
 * 
 * @param {string} sId Prefixed ID
 * @return {string} ID without prefix or <code>null</code>
 * @public
 * @since 1.39.0
 * 
 */
sap.ui.core.UIComponent.prototype.getLocalId = function(sId) { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.UIComponent.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.UIComponent.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the content of {@link sap.ui.core.UIComponent#createContent}.
 * If you specified a <code>rootView</code> in your metadata or in the descriptor file (manifest.json),
 * you will get the instance of the root view.
 * This getter will only return something if the {@link sap.ui.core.UIComponent#init} function was invoked.
 * If <code>createContent</code> is not implemented, and there is no root view, it will return <code>null</code>. Here is an example:
 * <code>
 *     <pre>
 *          var MyExtension = UIComponent.extend("my.Component", {
 *               metadata: {
 *                    rootView: "my.View"
 *               },
 *               init: function () {
 *                    this.getRootControl(); // returns null
 *                    UIComponent.prototype.init.apply(this, arguments);
 *                    this.getRootControl(); // returns the view "my.View"
 *               }
 *          });
 *     </pre>
 * </code>
 * @protected
 * @since 1.44.0
 * @returns {sap.ui.core.Control} the control created by {@link sap.ui.core.UIComponent#createContent}
 * 
 */
sap.ui.core.UIComponent.prototype.getRootControl = function() { return new sap.ui.core.Control(); };

/**
 * Returns the reference to the router instance which has been created by
 * the UIComponent once the routes in the routing metadata has been defined.
 * @since 1.16.1
 * @return {sap.ui.core.routing.Router} the router instance
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.getRouter = function() { return new sap.ui.core.routing.Router(); };

/**
 * Returns the reference to the router instance. The passed controller or view
 * has to be created in the context of a UIComponent to return the router
 * instance. Otherwise this function will return undefined.
 * You may define the routerClass property in the config section of the routing to make the Component create your router extension.
 * Example:
 * routing: {
 * 	config: {
 * 		routerClass : myAppNamespace.MyRouterClass
 * 		...
 * }
 * ...
 * @param {sap.ui.core.mvc.View|sap.ui.core.mvc.Controller} oControllerOrView either a view or controller
 * @return {sap.ui.core.routing.Router} the router instance
 * @since 1.16.1
 * @public
 * 
 */
sap.ui.core.UIComponent.getRouterFor = function(oControllerOrView) { return new sap.ui.core.routing.Router(); };

/**
 * Returns the reference to the Targets instance which has been created by
 * the UIComponent once the targets in the routing metadata has been defined.
 * If routes have been defined, it will be the Targets instance created and used by the router.
 * @since 1.28
 * @return {sap.ui.core.routing.Targets} the targets instance
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.getTargets = function() { return new sap.ui.core.routing.Targets(); };

/**
 * Returns the reference to the UIArea of the container.
 * 
 * @return {sap.ui.core.UIArea} reference to the UIArea of the container
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.getUIArea = function() { return new sap.ui.core.UIArea(); };

/**
 * Initializes the Component instance after creation.
 * 
 * Applications must not call this hook method directly, it is called by the
 * framework while the constructor of a Component is executed.
 * 
 * Subclasses of Component should override this hook to implement any necessary
 * initialization. <b>When overriding this function make sure to invoke the
 * init function of the UIComponent as well!</b>
 * 
 * @protected
 * 
 */
sap.ui.core.UIComponent.prototype.init = function() {  };

/**
 * Function is called when the rendering of the ComponentContainer is completed.
 * 
 * Applications must not call this hook method directly, it is called from ComponentContainer.
 * 
 * Subclasses of UIComponent override this hook to implement any necessary actions after the rendering.
 * 
 * @protected
 * 
 */
sap.ui.core.UIComponent.prototype.onAfterRendering = function() {  };

/**
 * Function is called when the rendering of the ComponentContainer is started.
 * 
 * Applications must not call this hook method directly, it is called from ComponentContainer.
 * 
 * Subclasses of UIComponent override this hook to implement any necessary actions before the rendering.
 * 
 * @protected
 * 
 */
sap.ui.core.UIComponent.prototype.onBeforeRendering = function() {  };

/**
 * Renders the the root control of the UIComponent.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager a RenderManager instance
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.render = function(oRenderManager) {  };

/**
 * Sets the reference to the ComponentContainer - later required for the
 * determination of the UIArea for the UIComponent.
 * 
 * @param {sap.ui.core.ComponentContainer} oContainer reference to a ComponentContainer
 * @return {sap.ui.core.UIComponent} reference to this instance to allow method chaining
 * @public
 * 
 */
sap.ui.core.UIComponent.prototype.setContainer = function(oContainer) { return new sap.ui.core.UIComponent(); };


// ---- sap.ui.core.URI --------------------------------------------------------------------------


// ---- sap.ui.core.util.Export --------------------------------------------------------------------------

/**
 * Constructor for a new Export.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getExportType exportType} : sap.ui.core.util.ExportType</li>
 * <li>{@link #getColumns columns} : sap.ui.core.util.ExportColumn[]</li>
 * <li>{@link #getRows rows} : sap.ui.core.util.ExportRow[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Export provides the possibility to generate a list of data in a specific format / type, e.g. CSV to use it in other programs / applications.
 * @extends sap.ui.core.Control
 * @version 1.48.4
 * @since 1.22.0
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.core.util.Export = function(sId,mSettings) {};
/**
 * Adds some column to the aggregation {@link #getColumns columns}.
 * @param {sap.ui.core.util.ExportColumn}
 *            oColumn the column to add; if empty, nothing is inserted
 * @returns {sap.ui.core.util.Export} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.addColumn = function(oColumn) { return new sap.ui.core.util.Export(); };

/**
 * Adds some row to the aggregation {@link #getRows rows}.
 * @param {sap.ui.core.util.ExportRow}
 *            oRow the row to add; if empty, nothing is inserted
 * @returns {sap.ui.core.util.Export} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.addRow = function(oRow) { return new sap.ui.core.util.Export(); };

/**
 * Binds aggregation {@link #getColumns columns} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.ui.core.util.Export} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.bindColumns = function(oBindingInfo) { return new sap.ui.core.util.Export(); };

/**
 * Binds aggregation {@link #getRows rows} to model data.
 * 
 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
 * detailed description of the possible properties of <code>oBindingInfo</code>.
 * @param {object} oBindingInfo The binding information
 * @returns {sap.ui.core.util.Export} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.bindRows = function(oBindingInfo) { return new sap.ui.core.util.Export(); };

/**
 * Destroys all the columns in the aggregation {@link #getColumns columns}.
 * @returns {sap.ui.core.util.Export} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.destroyColumns = function() { return new sap.ui.core.util.Export(); };

/**
 * Destroys the exportType in the aggregation {@link #getExportType exportType}.
 * @returns {sap.ui.core.util.Export} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.destroyExportType = function() { return new sap.ui.core.util.Export(); };

/**
 * Destroys all the rows in the aggregation {@link #getRows rows}.
 * @returns {sap.ui.core.util.Export} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.destroyRows = function() { return new sap.ui.core.util.Export(); };

/**
 * Creates a new subclass of class sap.ui.core.util.Export with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.Export.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Generates the file content and returns a Promise
 * with the instance as context (this).<br>
 * The promise will be resolved with the generated content
 * as a string.
 * 
 * <p><b>Please note: The return value was changed from jQuery Promises to standard ES6 Promises.
 * jQuery specific Promise methods ('done', 'fail', 'always', 'pipe' and 'state') are still available but should not be used.
 * Please use only the standard methods 'then' and 'catch'!</b></p>
 * 
 * @return {Promise} Promise object
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.generate = function() { return null; };

/**
 * Gets content of aggregation {@link #getColumns columns}.
 * 
 * Columns for the Export.
 * 
 * @returns {sap.ui.core.util.ExportColumn[]}
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.getColumns = function() { return new Array(); };

/**
 * Gets content of aggregation {@link #getExportType exportType}.
 * 
 * Type that generates the content.
 * 
 * @returns {sap.ui.core.util.ExportType}
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.getExportType = function() { return new sap.ui.core.util.ExportType(); };

/**
 * Returns a metadata object for class sap.ui.core.util.Export.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.util.Export.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getRows rows}.
 * 
 * Rows of the Export.
 * 
 * @returns {sap.ui.core.util.ExportRow[]}
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.getRows = function() { return new Array(); };

/**
 * Checks for the provided <code>sap.ui.core.util.ExportColumn</code> in the aggregation {@link #getColumns columns}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.util.ExportColumn}
 *           oColumn The column whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.indexOfColumn = function(oColumn) { return 0; };

/**
 * Checks for the provided <code>sap.ui.core.util.ExportRow</code> in the aggregation {@link #getRows rows}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.util.ExportRow}
 *           oRow The row whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.indexOfRow = function(oRow) { return 0; };

/**
 * Inserts a column into the aggregation {@link #getColumns columns}.
 * 
 * @param {sap.ui.core.util.ExportColumn}
 *            oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the column should be inserted at; for
 *              a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the column is inserted at
 *              the last position
 * @returns {sap.ui.core.util.Export} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.insertColumn = function(oColumn,iIndex) { return new sap.ui.core.util.Export(); };

/**
 * Inserts a row into the aggregation {@link #getRows rows}.
 * 
 * @param {sap.ui.core.util.ExportRow}
 *            oRow the row to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the row should be inserted at; for
 *              a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the row is inserted at
 *              the last position
 * @returns {sap.ui.core.util.Export} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.insertRow = function(oRow,iIndex) { return new sap.ui.core.util.Export(); };

/**
 * Removes all the controls from the aggregation {@link #getColumns columns}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.util.ExportColumn[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.removeAllColumns = function() { return new Array(); };

/**
 * Removes all the controls from the aggregation {@link #getRows rows}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.util.ExportRow[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.removeAllRows = function() { return new Array(); };

/**
 * Removes a column from the aggregation {@link #getColumns columns}.
 * 
 * @param {int | string | sap.ui.core.util.ExportColumn} vColumn The column to remove or its index or id
 * @returns {sap.ui.core.util.ExportColumn} The removed column or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.removeColumn = function(vColumn) { return new sap.ui.core.util.ExportColumn(); };

/**
 * Removes a row from the aggregation {@link #getRows rows}.
 * 
 * @param {int | string | sap.ui.core.util.ExportRow} vRow The row to remove or its index or id
 * @returns {sap.ui.core.util.ExportRow} The removed row or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.removeRow = function(vRow) { return new sap.ui.core.util.ExportRow(); };

/**
 * Generates the file content, triggers a download / save action and
 * returns a Promise with the instance as context (this).<br>
 * The promise will be resolved with the generated content
 * as a string.
 * <p><b>For information about browser support, see <code>sap.ui.core.util.File.save</code></b></p>
 * 
 * <p><b>Please note: The return value was changed from jQuery Promises to standard ES6 Promises.
 * jQuery specific Promise methods ('done', 'fail', 'always', 'pipe' and 'state') are still available but should not be used.
 * Please use only the standard methods 'then' and 'catch'!</b></p>
 * 
 * @param {string} [sFileName] file name, defaults to 'data'
 * @return {Promise} Promise object
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.saveFile = function(sFileName) { return null; };

/**
 * Sets the aggregated {@link #getExportType exportType}.
 * @param {sap.ui.core.util.ExportType} oExportType The exportType to set
 * @returns {sap.ui.core.util.Export} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.setExportType = function(oExportType) { return new sap.ui.core.util.Export(); };

/**
 * Unbinds aggregation {@link #getColumns columns} from model data.
 * @returns {sap.ui.core.util.Export} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.unbindColumns = function() { return new sap.ui.core.util.Export(); };

/**
 * Unbinds aggregation {@link #getRows rows} from model data.
 * @returns {sap.ui.core.util.Export} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.Export.prototype.unbindRows = function() { return new sap.ui.core.util.Export(); };


// ---- sap.ui.core.util.ExportCell --------------------------------------------------------------------------

/**
 * Constructor for a new ExportCell.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContent content} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Contains content that can be used to export data. Used in {@link sap.ui.core.util.ExportColumn ExportColumn} / {@link sap.ui.core.util.Export Export}.
 * @extends sap.ui.core.Element
 * @version 1.48.4
 * @since 1.22.0
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.core.util.ExportCell = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.util.ExportCell with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportCell.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getContent content}.
 * 
 * Cell content.
 * 
 * @returns {string} Value of property <code>content</code>
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportCell.prototype.getContent = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.util.ExportCell.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportCell.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sets a new value for property {@link #getContent content}.
 * 
 * Cell content.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sContent New value for property <code>content</code>
 * @returns {sap.ui.core.util.ExportCell} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportCell.prototype.setContent = function(sContent) { return new sap.ui.core.util.ExportCell(); };


// ---- sap.ui.core.util.ExportColumn --------------------------------------------------------------------------

/**
 * Constructor for a new ExportCell.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * </ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTemplate template} : sap.ui.core.util.ExportCell</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Can have a name and a cell template.
 * @extends sap.ui.base.ManagedObject
 * @version 1.48.4
 * @since 1.22.0
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.core.util.ExportColumn = function(sId,mSettings) {};
/**
 * Destroys the template in the aggregation {@link #getTemplate template}.
 * @returns {sap.ui.core.util.ExportColumn} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportColumn.prototype.destroyTemplate = function() { return new sap.ui.core.util.ExportColumn(); };

/**
 * Creates a new subclass of class sap.ui.core.util.ExportColumn with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportColumn.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.util.ExportColumn.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportColumn.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * Column name.
 * 
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportColumn.prototype.getName = function() { return ""; };

/**
 * Gets content of aggregation {@link #getTemplate template}.
 * 
 * Cell template for column.
 * 
 * @returns {sap.ui.core.util.ExportCell}
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportColumn.prototype.getTemplate = function() { return new sap.ui.core.util.ExportCell(); };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * Column name.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.ui.core.util.ExportColumn} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportColumn.prototype.setName = function(sName) { return new sap.ui.core.util.ExportColumn(); };

/**
 * Sets the aggregated {@link #getTemplate template}.
 * @param {sap.ui.core.util.ExportCell} oTemplate The template to set
 * @returns {sap.ui.core.util.ExportColumn} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportColumn.prototype.setTemplate = function(oTemplate) { return new sap.ui.core.util.ExportColumn(); };


// ---- sap.ui.core.util.ExportRow --------------------------------------------------------------------------

/**
 * Constructor for a new ExportRow.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCells cells} : sap.ui.core.util.ExportCell[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Internally used in {@link sap.ui.core.util.Export Export}.
 * @extends sap.ui.base.ManagedObject
 * @version 1.48.4
 * @since 1.22.0
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.core.util.ExportRow = function(sId,mSettings) {};
/**
 * Adds some cell to the aggregation {@link #getCells cells}.
 * @param {sap.ui.core.util.ExportCell}
 *            oCell the cell to add; if empty, nothing is inserted
 * @returns {sap.ui.core.util.ExportRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportRow.prototype.addCell = function(oCell) { return new sap.ui.core.util.ExportRow(); };

/**
 * Destroys all the cells in the aggregation {@link #getCells cells}.
 * @returns {sap.ui.core.util.ExportRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportRow.prototype.destroyCells = function() { return new sap.ui.core.util.ExportRow(); };

/**
 * Creates a new subclass of class sap.ui.core.util.ExportRow with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportRow.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets content of aggregation {@link #getCells cells}.
 * 
 * Cells for the Export.
 * 
 * @returns {sap.ui.core.util.ExportCell[]}
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportRow.prototype.getCells = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.ui.core.util.ExportRow.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportRow.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks for the provided <code>sap.ui.core.util.ExportCell</code> in the aggregation {@link #getCells cells}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.util.ExportCell}
 *           oCell The cell whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportRow.prototype.indexOfCell = function(oCell) { return 0; };

/**
 * Inserts a cell into the aggregation {@link #getCells cells}.
 * 
 * @param {sap.ui.core.util.ExportCell}
 *            oCell the cell to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the cell should be inserted at; for
 *              a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the cell is inserted at
 *              the last position
 * @returns {sap.ui.core.util.ExportRow} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportRow.prototype.insertCell = function(oCell,iIndex) { return new sap.ui.core.util.ExportRow(); };

/**
 * Removes all the controls from the aggregation {@link #getCells cells}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.util.ExportCell[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportRow.prototype.removeAllCells = function() { return new Array(); };

/**
 * Removes a cell from the aggregation {@link #getCells cells}.
 * 
 * @param {int | string | sap.ui.core.util.ExportCell} vCell The cell to remove or its index or id
 * @returns {sap.ui.core.util.ExportCell} The removed cell or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportRow.prototype.removeCell = function(vCell) { return new sap.ui.core.util.ExportCell(); };


// ---- sap.ui.core.util.ExportType --------------------------------------------------------------------------

/**
 * Constructor for a new ExportType.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getFileExtension fileExtension} : string</li>
 * <li>{@link #getMimeType mimeType} : string</li>
 * <li>{@link #getCharset charset} : string</li>
 * <li>{@link #getByteOrderMark byteOrderMark} : boolean (default: undefined)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Base export type. Subclasses can be used for {@link sap.ui.core.util.Export Export}.
 * @extends sap.ui.base.ManagedObject
 * @version 1.48.4
 * @since 1.22.0
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.core.util.ExportType = function(sId,mSettings) {};
/**
 * Handles the generation process of the file.<br>
 * 
 * @param {sap.ui.core.util.Export} oExport export instance
 * @return {string} content
 * 
 * @protected
 * 
 */
sap.ui.core.util.ExportType.prototype._generate = function(oExport) { return ""; };

/**
 * Creates a cell "generator" (inspired by ES6 Generators)
 * 
 * @return {Generator} generator
 * @protected
 * 
 */
sap.ui.core.util.ExportType.prototype.cellGenerator = function() { return null; };

/**
 * Creates a column "generator" (inspired by ES6 Generators)
 * 
 * @return {Generator} generator
 * @protected
 * 
 */
sap.ui.core.util.ExportType.prototype.columnGenerator = function() { return null; };

/**
 * Creates a new subclass of class sap.ui.core.util.ExportType with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportType.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Generates the file content.<br>
 * Should be implemented by the individual types!
 * 
 * @return {string} content
 * 
 * @protected
 * 
 */
sap.ui.core.util.ExportType.prototype.generate = function() { return ""; };

/**
 * Gets current value of property {@link #getByteOrderMark byteOrderMark}.
 * 
 * Whether to prepend an unicode byte order mark when saving as a file (only applies for utf-8 charset).
 * 
 * Default value is <code>undefined</code>.
 * @returns {boolean} Value of property <code>byteOrderMark</code>
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportType.prototype.getByteOrderMark = function() { return false; };

/**
 * Gets current value of property {@link #getCharset charset}.
 * 
 * Charset.
 * 
 * @returns {string} Value of property <code>charset</code>
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportType.prototype.getCharset = function() { return ""; };

/**
 * Returns the number of columns.
 * 
 * @return {int} count
 * 
 * @protected
 * 
 */
sap.ui.core.util.ExportType.prototype.getColumnCount = function() { return 0; };

/**
 * Gets current value of property {@link #getFileExtension fileExtension}.
 * 
 * File extension.
 * 
 * @returns {string} Value of property <code>fileExtension</code>
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportType.prototype.getFileExtension = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.util.ExportType.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportType.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getMimeType mimeType}.
 * 
 * MIME type.
 * 
 * @returns {string} Value of property <code>mimeType</code>
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportType.prototype.getMimeType = function() { return ""; };

/**
 * Returns the number of rows.
 * 
 * @return {int} count
 * 
 * @protected
 * 
 */
sap.ui.core.util.ExportType.prototype.getRowCount = function() { return 0; };

/**
 * Creates a row "generator" (inspired by ES6 Generators)
 * 
 * @return {Generator} generator
 * @protected
 * 
 */
sap.ui.core.util.ExportType.prototype.rowGenerator = function() { return null; };

/**
 * Sets a new value for property {@link #getByteOrderMark byteOrderMark}.
 * 
 * Whether to prepend an unicode byte order mark when saving as a file (only applies for utf-8 charset).
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>undefined</code>.
 * @param {boolean} bByteOrderMark New value for property <code>byteOrderMark</code>
 * @returns {sap.ui.core.util.ExportType} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportType.prototype.setByteOrderMark = function(bByteOrderMark) { return new sap.ui.core.util.ExportType(); };

/**
 * Sets a new value for property {@link #getCharset charset}.
 * 
 * Charset.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sCharset New value for property <code>charset</code>
 * @returns {sap.ui.core.util.ExportType} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportType.prototype.setCharset = function(sCharset) { return new sap.ui.core.util.ExportType(); };

/**
 * Sets a new value for property {@link #getFileExtension fileExtension}.
 * 
 * File extension.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sFileExtension New value for property <code>fileExtension</code>
 * @returns {sap.ui.core.util.ExportType} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportType.prototype.setFileExtension = function(sFileExtension) { return new sap.ui.core.util.ExportType(); };

/**
 * Sets a new value for property {@link #getMimeType mimeType}.
 * 
 * MIME type.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sMimeType New value for property <code>mimeType</code>
 * @returns {sap.ui.core.util.ExportType} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportType.prototype.setMimeType = function(sMimeType) { return new sap.ui.core.util.ExportType(); };


// ---- sap.ui.core.util.ExportTypeCSV --------------------------------------------------------------------------

/**
 * Constructor for a new ExportTypeCSV.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSeparatorChar separatorChar} : string (default: ,)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.util.ExportType#constructor sap.ui.core.util.ExportType}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * CSV export type. Can be used for {@link sap.ui.core.util.Export Export}.
 * 
 * Please note that there could be an issue with the separator char depending on the user's system language in some programs such as Microsoft Excel.
 * To prevent those issues use the data-import functionality which enables the possibility to explicitly set the separator char that should be used.
 * This way the content will be displayed correctly.
 * 
 * Potential formulas (cell data starts with one of = + - @) will be escaped by prepending a single quote.
 * As the export functionality is intended to be used with actual (user) data there is no reason to allow formulas.
 * 
 * @extends sap.ui.core.util.ExportType
 * @version 1.48.4
 * @since 1.22.0
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.core.util.ExportTypeCSV = function(sId,mSettings) {};
/**
 * Creates a new subclass of class sap.ui.core.util.ExportTypeCSV with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.util.ExportType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportTypeCSV.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Generates the file content.
 * 
 * @return {string} content
 * @protected
 * 
 */
sap.ui.core.util.ExportTypeCSV.prototype.generate = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.core.util.ExportTypeCSV.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.util.ExportTypeCSV.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getSeparatorChar separatorChar}.
 * 
 * Separator char.
 * 
 * Value needs to be exactly one character or empty for default.
 * 
 * Default value is <code>,</code>.
 * @returns {string} Value of property <code>separatorChar</code>
 * 
 * @public
 * 
 */
sap.ui.core.util.ExportTypeCSV.prototype.getSeparatorChar = function() { return ""; };

/**
 * Setter for property <code>separatorChar</code>.
 * 
 * Value needs to be exactly one character or empty for default. Default value is ','.
 * 
 * @param {string} sSeparatorChar  new value for property <code>separatorChar</code>
 * @return {sap.ui.core.util.ExportTypeCSV} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.util.ExportTypeCSV.prototype.setSeparatorChar = function(sSeparatorChar) { return new sap.ui.core.util.ExportTypeCSV(); };


// ---- sap.ui.core.util.File --------------------------------------------------------------------------

/**
 * <p>Triggers a download / save action of the given file.</p>
 * 
 * <p>There are limitations for this feature in some browsers:<p>
 * 
 * <p><b>Safari (OS X / iOS)</b><br>
 * A new window/tab will be opened. In OS X the user has to manually save the file (CMD + S), choose "page source" and specify a filename.
 * In iOS the content can be opened in another app (Mail, Notes, ...) or copied to the clipboard.
 * In case the popup blocker prevents this action, an error will be thrown which can be used to notify the user to disable it.</p>
 * 
 * <p><b>Android Browser</b><br>
 * Not supported</p>
 * 
 * <p><b>Windows Phone 10 Edge</b><br>
 * Not supported</p>
 * 
 * @param {string} sData file content
 * @param {string} sFileName file name
 * @param {string} sFileExtension file extension
 * @param {string} sMimeType file mime-type
 * @param {string} sCharset file charset
 * @param {boolean} [bByteOrderMark] Whether to prepend an unicode byte order mark (only applies for utf-8 charset).
 *                                   Default is <code>false</code> except when <code>sFileExtension</code> = <code>csv/code> it is <code>true</code> (compatibility reasons).
 * 
 * @public
 * 
 * @memberof sap.ui.core.util.File
 */
sap.ui.core.util.File.save = function(sData,sFileName,sFileExtension,sMimeType,sCharset,bByteOrderMark) {  };


// ---- sap.ui.core.util.MockServer --------------------------------------------------------------------------

/**
 * Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or simple XHR calls, without
 * changing the application code. This class can also be used for qunit tests.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRootUri rootUri} : string</li>
 * <li>{@link #getRequests requests} : object[] (default: [])</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new server object; generated automatically if no non-empty id is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] optional map/JSON-object with initial property values, aggregated objects etc. for the new object
 * @param {object} [oScope] scope object for resolving string based type and formatter references in bindings
 * 
 * @class Class to mock http requests made to a remote server
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @version 1.48.4
 * @public
 * 
 */
sap.ui.core.util.MockServer = function(sId,mSettings,oScope) {};
/**
 * Enum for the method.
 * @public
 * 
 */
sap.ui.core.util.MockServer.HTTPMETHOD = undefined

/**
 * Attaches an event handler to be called after the built-in request processing of the mock server
 * @param {string} event type according to HTTP Method
 * @param {function} fnCallback - the name of the function that will be called at this exit
 * The callback function exposes an event with parameters, depending on the type of the request.
 * oEvent.getParameters() lists the parameters as per the request. Examples are:
 * oXhr : the request object; oFilteredData : the mock data entries that are about to be returned in the response; oEntry : the mock data entry that is about to be returned in the response;
 * @param {string} sEntitySet - (optional) the name of the entity set
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.attachAfter = function(event,fnCallback,sEntitySet) {  };

/**
 * Attaches an event handler to be called before the built-in request processing of the mock server
 * @param {string} event type according to HTTP Method
 * @param {function} fnCallback - the name of the function that will be called at this exit.
 * The callback function exposes an event with parameters, depending on the type of the request.
 * oEvent.getParameters() lists the parameters as per the request. Examples are:
 * oXhr : the request object; sUrlParams : the URL parameters of the request; sKeys : key properties of the requested entry; sNavProp/sNavName : name of navigation
 * @param {string} sEntitySet - (optional) the name of the entity set
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.attachBefore = function(event,fnCallback,sEntitySet) {  };

/**
 * Global configuration of all mock servers.
 * 
 * @param {object} mConfig the configuration object.
 * @param {boolean} [mConfig.autoRespond=true] If set true, all mock servers will respond automatically. If set false you have to call {@link sap.ui.core.util.MockServer#respond} method for response.
 * @param {int} [mConfig.autoRespondAfter=0] the time in ms after all mock servers should send their response.
 * @param {boolean} [mConfig.fakeHTTPMethods=false] If set to true, all mock server will find <code>_method</code> parameter in the POST body and use this to override the the actual method.
 * @public
 * 
 */
sap.ui.core.util.MockServer.config = function(mConfig) {  };

/**
 * Cleans up the resources associated with this object and all its aggregated children.
 * 
 * After an object has been destroyed, it can no longer be used in!
 * 
 * Applications should call this method if they don't need the object any longer.
 * 
 * @see sap.ui.base.ManagedObject#destroy
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.destroy = function(bSuppressInvalidate) {  };

/**
 * Stops and calls destroy on all registered servers. Use this method for cleaning up.
 * @public
 * 
 */
sap.ui.core.util.MockServer.destroyAll = function() {  };

/**
 * Removes a previously attached event handler
 * @param {string} event type according to HTTP Method
 * @param {function} fnCallback - the name of the function that will be called at this exit
 * @param {string} sEntitySet - (optional) the name of the entity set
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.detachAfter = function(event,fnCallback,sEntitySet) {  };

/**
 * Removes a previously attached event handler
 * @param {string} event type according to HTTP Method
 * @param {function} fnCallback - the name of the function that will be called at this exit
 * @param {string} sEntitySet - (optional) the name of the entity set
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.detachBefore = function(event,fnCallback,sEntitySet) {  };

/**
 * Creates a new subclass of class sap.ui.core.util.MockServer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.util.MockServer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the data model of the given EntitySet name.
 * 
 * @param sEntitySetName EntitySet name
 * @return {array} data model of the given EntitySet
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.getEntitySetData = function(sEntitySetName) { return null; };

/**
 * Returns a metadata object for class sap.ui.core.util.MockServer.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.util.MockServer.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for property <code>requests</code>.
 * 
 * Default value is <code>[]</code>
 * 
 * @return {object[]} the value of property <code>rootUri</code>
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.getRequests = function() { return new Array(); };

/**
 * Getter for property <code>rootUri</code>.
 * 
 * Default value is empty/<code>undefined</code>
 * 
 * @return {string} the value of property <code>rootUri</code>
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.getRootUri = function() { return ""; };

/**
 * Returns whether the server is started or not.
 * 
 * @return {boolean} whether the server is started or not.
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.isStarted = function() { return false; };

/**
 * Respond to a request, when the servers are configured not to automatically respond.
 * @public
 * 
 */
sap.ui.core.util.MockServer.respond = function() {  };

/**
 * Sets the data of the given EntitySet name with the given array.
 * @param sEntitySetName EntitySet name
 * @param aData
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.setEntitySetData = function(sEntitySetName,aData) {  };

/**
 * Setter for property <code>requests</code>.
 * 
 * Default value is is <code>[]</code>
 * 
 * Each array entry should consist of an array with the following properties / values:
 * 
 * <ul>
 * <li><b>method <string>: "GET"|"POST"|"DELETE|"PUT"</b>
 * <br>
 * (any HTTP verb)
 * </li>
 * <li><b>path <string>: "/path/to/resource"</b>
 * <br>
 * The path is converted to a regular expression, so it can contain normal regular expression syntax.
 * All regular expression groups are forwarded as arguments to the <code>response</code> function.
 * In addition to this, parameters can be written in this notation: <code>:param</code>. These placeholder will be replaced by regular expression groups.
 * </li>
 * <li><b>response <function>: function(xhr, param1, param2, ...) { }</b>
 * <br>
 * The xhr object can be used to respond on the request. Supported methods are:
 * <br>
 * <code>xhr.respond(iStatusCode, mHeaders, sBody)</code>
 * <br>
 * <code>xhr.respondJSON(iStatusCode, mHeaders, oJsonObjectOrString)</code>. By default a JSON header is set for response header
 * <br>
 * <code>xhr.respondXML(iStatusCode, mHeaders, sXmlString)</code>. By default an XML header is set for response header
 * <br>
 * <code>xhr.respondFile(iStatusCode, mHeaders, sFileUrl)</code>. By default the mime type of the file is set for response header
 * </li>
 * </ul>
 * 
 * @param {object[]} requests new value for property <code>requests</code>
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.setRequests = function(requests) {  };

/**
 * Setter for property <code>rootUri</code>. All request path URI are prefixed with this root URI if set.
 * 
 * Default value is empty/<code>undefined</code>
 * @param {string} rootUri new value for property <code>rootUri</code>
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.setRootUri = function(rootUri) {  };

/**
 * Simulates an existing OData service by sepcifiying the metadata URL and the base URL for the mockdata. The server
 * configures the request handlers depending on the service metadata. The mockdata needs to be stored individually for
 * each entity type in a separate JSON file. The name of the JSON file needs to match the name of the entity type. If
 * no base url for the mockdata is specified then the mockdata are generated from the metadata
 * 
 * @param {string} sMetadataUrl url to the service metadata document
 * @param {string|object} [vMockdataSettings] (optional) base url which contains the path to the mockdata, or an object which contains the following properties: sMockdataBaseUrl, bGenerateMissingMockData, aEntitySetsNames. See below for descriptions of these parameters. Ommit this parameter to produce random mock data based on the service metadata.
 * @param {string} [vMockdataSettings.sMockdataBaseUrl] base url which contains the mockdata as single .json files or the .json file containing the complete mock data
 * @param {boolean} [vMockdataSettings.bGenerateMissingMockData] true for the MockServer to generate mock data for missing .json files that are not found in sMockdataBaseUrl. Default value is false.
 * @param {array} [vMockdataSettings.aEntitySetsNames] list of entity set names to fetch. This parameter should be used to improve performance in case there are a lot of entity sets but only a few are needed to be fetched. Default value is empty - in this case all entity sets will be retrieved.
 * 
 * @since 1.13.2
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.simulate = function(sMetadataUrl,vMockdataSettings) {  };

/**
 * Starts the server.
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.start = function() {  };

/**
 * Starts all registered servers.
 * @public
 * 
 */
sap.ui.core.util.MockServer.startAll = function() {  };

/**
 * Stops the server.
 * @public
 * 
 */
sap.ui.core.util.MockServer.prototype.stop = function() {  };

/**
 * Stops all registered servers.
 * @public
 * 
 */
sap.ui.core.util.MockServer.stopAll = function() {  };


// ---- sap.ui.core.util.XMLPreprocessor --------------------------------------------------------------------------


// ---- sap.ui.core.util.XMLPreprocessor.IContext --------------------------------------------------------------------------

/**
 * Returns a context interface for the indicated part in case of the root formatter
 * of a composite binding. The new interface provides access to the original
 * settings, but only to the model and path of the indicated part:
 * <pre>
 * this.getInterface(i).getSetting(sName) === this.getSetting(sName);
 * this.getInterface(i).getModel() === this.getModel(i);
 * this.getInterface(i).getPath() === this.getPath(i);
 * </pre>
 * 
 * If a path is given, the new interface points to the resolved path as follows:
 * <pre>
 * this.getInterface(i, "foo/bar").getPath() === this.getPath(i) + "/foo/bar";
 * this.getInterface(i, "/absolute/path").getPath() === "/absolute/path";
 * </pre>
 * A formatter which is not at the root level of a composite binding can also
 * provide a path, but must not provide an index:
 * <pre>
 * this.getInterface("foo/bar").getPath() === this.getPath() + "/foo/bar";
 * this.getInterface("/absolute/path").getPath() === "/absolute/path";
 * </pre>
 * Note that at least one argument must be present.
 * 
 * @param {number} [iPart]
 *   index of part in case of the root formatter of a composite binding
 * @param {string} [sPath]
 *   a path, interpreted relative to <code>this.getPath(iPart)</code>
 * @returns {sap.ui.core.util.XMLPreprocessor.IContext}
 *   the context interface related to the indicated part
 * @throws {Error} in case an index is given but the current interface does not
 *   belong to the root formatter of a composite binding, or in case the given
 *   index is invalid (e.g. missing or out of range), or in case a path is missing
 *   because no index is given, or in case a path is given but the model cannot not
 *   create a binding context synchronously
 * @public
 * @since 1.31.0
 * 
 */
sap.ui.core.util.XMLPreprocessor.IContext.getInterface = function(iPart,sPath) { return new sap.ui.core.util.XMLPreprocessor.IContext(); };

/**
 * Returns the model related to the current formatter call.
 * 
 * @param {number} [iPart]
 *   index of part in case of the root formatter of a composite binding
 *   (since 1.31.0)
 * @returns {sap.ui.model.Model}
 *   the model related to the current formatter call, or (since 1.31.0)
 *   <code>undefined</code> in case of a root formatter if no <code>iPart</code> is
 *   given or if <code>iPart</code> is out of range
 * @public
 * 
 */
sap.ui.core.util.XMLPreprocessor.IContext.getModel = function(iPart) { return new sap.ui.model.Model(); };

/**
 * Returns the absolute path related to the current formatter call.
 * 
 * @param {number} [iPart]
 *   index of part in case of the root formatter of a composite binding
 *   (since 1.31.0)
 * @returns {string}
 *   the absolute path related to the current formatter call, or (since 1.31.0)
 *   <code>undefined</code> in case of a root formatter if no <code>iPart</code> is
 *   given or if <code>iPart</code> is out of range
 * @public
 * 
 */
sap.ui.core.util.XMLPreprocessor.IContext.getPath = function(iPart) { return ""; };

/**
 * Returns the value of the setting with the given name which was provided to the
 * XML template processing.
 * 
 * @param {string} sName
 *   the name of the setting
 * @returns {any}
 *   the value of the setting
 * @throws {Error}
 *   if the name is one of the reserved names: "bindingContexts", "models"
 * @public
 * 
 */
sap.ui.core.util.XMLPreprocessor.IContext.getSetting = function(sName) { return null; };


// ---- sap.ui.core.ValueState --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.ValueState.toString = function() { return ""; };

// ---- sap.ui.core.ValueStateSupport --------------------------------------------------------------------------

/**
 * Appends a generic success, warning or error message to the given tooltip text if the given Element
 * has a property "valueState" with one of these three states.
 * 
 * @param {sap.ui.core.Element} oElement the Element of which the tooltip needs to be modified
 * @param {string} sTooltipText the original tooltip text (may be null)
 * @returns {string} the given text, with appended success/warning/error text, if appropriate
 * 
 * @public
 * 
 * @memberof sap.ui.core.ValueStateSupport
 */
sap.ui.core.ValueStateSupport.enrichTooltip = function(oElement,sTooltipText) { return ""; };

/**
 * Returns a ValueState object based on the given integer value
 * 
 *  0 : ValueState.None
 *  1 : ValueState.Warning
 *  2 : ValueState.Success
 *  3 : ValueState.Error
 * 
 * @param {int} iState the state as an integer
 * @return {sap.ui.core.ValueState} the corresponding ValueState object
 * @static
 * @public
 * @since 1.25.0
 * 
 * @memberof sap.ui.core.ValueStateSupport
 */
sap.ui.core.ValueStateSupport.formatValueState = function(iState) { return new sap.ui.core.ValueState(); };

/**
 * Returns a generic success, warning or error message if the given Element
 * has a property "valueState" with one of these three states or the given ValueState
 * represents one of these states.
 * 
 * @param {sap.ui.core.Element|sap.ui.core.ValueState} vValue the Element of which the valueState needs to be checked, or the ValueState explicitly
 * @returns {string} the success/warning/error text, if appropriate; otherwise null
 * 
 * @public
 * 
 * @memberof sap.ui.core.ValueStateSupport
 */
sap.ui.core.ValueStateSupport.getAdditionalText = function(vValue) { return ""; };


// ---- sap.ui.core.VariantLayoutData --------------------------------------------------------------------------

/**
 * Constructor for a new VariantLayoutData.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMultipleLayoutData multipleLayoutData} : sap.ui.core.LayoutData[]</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}
 * can be used as well.
 * 
 * @param {string} [sId] id for the new control, generated automatically if no id is given
 * @param {object} [mSettings] initial settings for the new control
 * 
 * @class
 * Allows to add multiple LayoutData to one control in case that an easy switch of layouts (e.g. in a Form) is needed.
 * @extends sap.ui.core.LayoutData
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @since 1.9.2
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 * 
 */
sap.ui.core.VariantLayoutData = function(sId,mSettings) {};
/**
 * Adds some multipleLayoutData to the aggregation {@link #getMultipleLayoutData multipleLayoutData}.
 * @param {sap.ui.core.LayoutData}
 *            oMultipleLayoutData the multipleLayoutData to add; if empty, nothing is inserted
 * @returns {sap.ui.core.VariantLayoutData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.VariantLayoutData.prototype.addMultipleLayoutData = function(oMultipleLayoutData) { return new sap.ui.core.VariantLayoutData(); };

/**
 * Destroys all the multipleLayoutData in the aggregation {@link #getMultipleLayoutData multipleLayoutData}.
 * @returns {sap.ui.core.VariantLayoutData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.VariantLayoutData.prototype.destroyMultipleLayoutData = function() { return new sap.ui.core.VariantLayoutData(); };

/**
 * Creates a new subclass of class sap.ui.core.VariantLayoutData with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.VariantLayoutData.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.core.VariantLayoutData.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.VariantLayoutData.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets content of aggregation {@link #getMultipleLayoutData multipleLayoutData}.
 * 
 * Allows multiple LayoutData.
 * 
 * @returns {sap.ui.core.LayoutData[]}
 * 
 * @public
 * 
 */
sap.ui.core.VariantLayoutData.prototype.getMultipleLayoutData = function() { return new Array(); };

/**
 * Checks for the provided <code>sap.ui.core.LayoutData</code> in the aggregation {@link #getMultipleLayoutData multipleLayoutData}.
 * and returns its index if found or -1 otherwise.
 * @param {sap.ui.core.LayoutData}
 *           oMultipleLayoutData The multipleLayoutData whose index is looked for
 * @returns {int} The index of the provided control in the aggregation if found, or -1 otherwise
 * 
 * @public
 * 
 */
sap.ui.core.VariantLayoutData.prototype.indexOfMultipleLayoutData = function(oMultipleLayoutData) { return 0; };

/**
 * Inserts a multipleLayoutData into the aggregation {@link #getMultipleLayoutData multipleLayoutData}.
 * 
 * @param {sap.ui.core.LayoutData}
 *            oMultipleLayoutData the multipleLayoutData to insert; if empty, nothing is inserted
 * @param {int}
 *              iIndex the <code>0</code>-based index the multipleLayoutData should be inserted at; for
 *              a negative value of <code>iIndex</code>, the multipleLayoutData is inserted at position 0; for a value
 *              greater than the current size of the aggregation, the multipleLayoutData is inserted at
 *              the last position
 * @returns {sap.ui.core.VariantLayoutData} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.core.VariantLayoutData.prototype.insertMultipleLayoutData = function(oMultipleLayoutData,iIndex) { return new sap.ui.core.VariantLayoutData(); };

/**
 * Removes all the controls from the aggregation {@link #getMultipleLayoutData multipleLayoutData}.
 * 
 * Additionally, it unregisters them from the hosting UIArea.
 * @returns {sap.ui.core.LayoutData[]} An array of the removed elements (might be empty)
 * 
 * @public
 * 
 */
sap.ui.core.VariantLayoutData.prototype.removeAllMultipleLayoutData = function() { return new Array(); };

/**
 * Removes a multipleLayoutData from the aggregation {@link #getMultipleLayoutData multipleLayoutData}.
 * 
 * @param {int | string | sap.ui.core.LayoutData} vMultipleLayoutData The multipleLayoutData to remove or its index or id
 * @returns {sap.ui.core.LayoutData} The removed multipleLayoutData or <code>null</code>
 * 
 * @public
 * 
 */
sap.ui.core.VariantLayoutData.prototype.removeMultipleLayoutData = function(vMultipleLayoutData) { return new sap.ui.core.LayoutData(); };


// ---- sap.ui.core.VerticalAlign --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.VerticalAlign.toString = function() { return ""; };

// ---- sap.ui.core.Wrapping --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.Wrapping.toString = function() { return ""; };

// ---- sap.ui.core.ws.ReadyState --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.ws.ReadyState.toString = function() { return ""; };

// ---- sap.ui.core.ws.SapPcpWebSocket --------------------------------------------------------------------------

/**
 * Creates a new WebSocket connection and uses the pcp-protocol for communication.
 * 
 * 
 * @param {string} sUrl relative or absolute URL for WebSocket connection.
 * @param {array} [aProtocols] array of protocols as strings, a single protocol as a string.
 * Protocol(s) should be selected from {@link sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS}.
 * 
 * @public
 * 
 * @class WebSocket class implementing the pcp-protocol
 * @extends sap.ui.core.ws.WebSocket
 * @version 1.48.4
 * 
 */
sap.ui.core.ws.SapPcpWebSocket = function(sUrl,aProtocols) {};
/**
 * The 'message' event is fired, when a message was received.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.data Received data from the server.
 * @param {string} oControlEvent.getParameters.pcpFields Received pcpFields as a key-value map.
 * @public
 * 
 */
sap.ui.core.ws.SapPcpWebSocket.prototype.message = function(oControlEvent) {  };

/**
 * Creates a new subclass of class sap.ui.core.ws.SapPcpWebSocket with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.ws.WebSocket.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.ws.SapPcpWebSocket.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event 'message' to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.data] Received data from the server.
 * @param {string} [mArguments.pcpFields] Received pcpFields as a key-value map.
 * @return {sap.ui.core.ws.SapPcpWebSocket} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.ws.SapPcpWebSocket.prototype.fireMessage = function(mArguments) { return new sap.ui.core.ws.SapPcpWebSocket(); };

/**
 * Returns a metadata object for class sap.ui.core.ws.SapPcpWebSocket.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.ws.SapPcpWebSocket.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sends a message and optional pcp-header-fields using the pcp-protocol.<br>
 * <br>
 * If the connection is not yet opened, the message will be queued and sent
 * when the connection is established.
 * 
 * @param {string|Blob|ArrayBuffer} message message to send
 * @param {object} [oPcpFields] additional pcp-fields as key-value map
 * @return {sap.ui.core.ws.SapPcpWebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.SapPcpWebSocket.prototype.send = function(message,oPcpFields) { return new sap.ui.core.ws.SapPcpWebSocket(); };


// ---- sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS.toString = function() { return ""; };

// ---- sap.ui.core.ws.WebSocket --------------------------------------------------------------------------

/**
 * Creates a new WebSocket connection.
 * 
 * 
 * @param {string} sUrl relative or absolute URL for WebSocket connection.
 * @param {array} [aProtocols] array of protocols as strings, a single protocol as a string
 * @public
 * 
 * @class Basic WebSocket class
 * @extends sap.ui.base.EventProvider
 * @version 1.48.4
 * 
 */
sap.ui.core.ws.WebSocket = function(sUrl,aProtocols) {};
/**
 * The 'close' event is fired, when the connection was closed.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.code Close code provided by the server.
 * @param {string} oControlEvent.getParameters.reason Reason from server for closing the connection.
 * @param {string} oControlEvent.getParameters.wasClean Indicates whether the connection was cleanly closed or not.
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.close = function(oControlEvent) {  };

/**
 * The 'error' event is fired, when an error occurred.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.error = function(oControlEvent) {  };

/**
 * The 'message' event is fired, when a message was received.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.data Received data from the server.
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.message = function(oControlEvent) {  };

/**
 * The 'open' event is fired, when the connection was successfully opened.
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.open = function(oControlEvent) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'close' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this WebSocket is used.
 * 
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.attachClose = function(oData,fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'error' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this WebSocket is used.
 * 
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.attachError = function(oData,fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'message' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this WebSocket is used.
 * 
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.attachMessage = function(oData,fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'open' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this WebSocket is used.
 * 
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.attachOpen = function(oData,fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Closes the connection.
 * 
 * @param {int} [iCode] Status code that explains why the connection is closed. Must be either 1000, or between 3000 and 4999 (default 1000)
 * @param {string} [sReason] Closing reason as a string
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.close = function(iCode,sReason) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'close' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.detachClose = function(fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'error' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.detachError = function(fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'message' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.detachMessage = function(fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'open' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.detachOpen = function(fnFunction,oListener) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Creates a new subclass of class sap.ui.core.ws.WebSocket with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.core.ws.WebSocket.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event 'close' to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.code] Close code provided by the server.
 * @param {string} [mArguments.reason] Reason from server for closing the connection.
 * @param {string} [mArguments.wasClean] Indicates whether the connection was cleanly closed or not.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.ws.WebSocket.prototype.fireClose = function(mArguments) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Fire event 'error' to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.ws.WebSocket.prototype.fireError = function(mArguments) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Fire event 'message' to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.data] Received data from the server.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.ws.WebSocket.prototype.fireMessage = function(mArguments) { return new sap.ui.core.ws.WebSocket(); };

/**
 * Fire event 'open' to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.core.ws.WebSocket.prototype.fireOpen = function(mArguments) { return new sap.ui.core.ws.WebSocket(); };

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.getInterface = function() {  };

/**
 * Returns a metadata object for class sap.ui.core.ws.WebSocket.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.core.ws.WebSocket.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for the protocol selected by the server once the connection is open.
 * 
 * @returns {string} protocol
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.getProtocol = function() { return ""; };

/**
 * Getter for WebSocket readyState.
 * 
 * @returns {sap.ui.core.ws.ReadyState} readyState
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.getReadyState = function() { return new sap.ui.core.ws.ReadyState(); };

/**
 * Sends a message.<br>
 * <br>
 * If the connection is not yet opened, the message will be queued and sent
 * when the connection is established.
 * 
 * @param {string} sMessage Message to send
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.core.ws.WebSocket.prototype.send = function(sMessage) { return new sap.ui.core.ws.WebSocket(); };


// ---- sap.ui.Device --------------------------------------------------------------------------


// ---- sap.ui.Device.browser --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.browser.toString = function() { return ""; };

// ---- sap.ui.Device.browser.BROWSER --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.browser.BROWSER.toString = function() { return ""; };

// ---- sap.ui.Device.media --------------------------------------------------------------------------

/**
 * Registers the given event handler to change events of the screen width based on the range set with the specified name.
 * 
 * The event is fired whenever the screen width changes and the current screen width is in
 * a different interval of the given range set than before the width change.
 * 
 * The event handler is called with a single argument: a map <code>mParams</code> which provides the following information
 * about the entered interval:
 * <ul>
 * <li><code>mParams.from</code>: The start value (inclusive) of the entered interval as a number</li>
 * <li><code>mParams.to</code>: The end value (exclusive) range of the entered interval as a number or undefined for the last interval (infinity)</li>
 * <li><code>mParams.unit</code>: The unit used for the values above, e.g. <code>"px"</code></li>
 * <li><code>mParams.name</code>: The name of the entered interval, if available</li>
 * </ul>
 * 
 * @param {function}
 *            fnFunction The handler function to call when the event occurs. This function will be called in the context of the
 *                       <code>oListener</code> instance (if present) or on the <code>window</code> instance. A map with information
 *                       about the entered range set is provided as a single argument to the handler (see details above).
 * @param {object}
 *            [oListener] The object that wants to be notified when the event occurs (<code>this</code> context within the
 *                        handler function). If it is not specified, the handler function is called in the context of the <code>window</code>.
 * @param {string}
 *            sName The name of the range set to listen to. The range set must be initialized beforehand
 *                  ({@link sap.ui.Device.media.initRangeSet}). If no name is provided, the
 *                  {@link sap.ui.Device.media.RANGESETS.SAP_STANDARD default range set} is used.
 * @public
 * 
 * @memberof sap.ui.Device.media
 */
sap.ui.Device.media.attachHandler = function(fnFunction,oListener,sName) {  };

/**
 * Removes a previously attached event handler from the change events of the screen width.
 * 
 * The passed parameters must match those used for registration with {@link #.attachHandler} beforehand.
 * 
 * @param {function}
 *            fnFunction The handler function to detach from the event
 * @param {object}
 *            [oListener] The object that wanted to be notified when the event occurred
 * @param {string}
 *             sName The name of the range set to listen to. If no name is provided, the
 *                   {@link sap.ui.Device.media.RANGESETS.SAP_STANDARD default range set} is used.
 * @public
 * 
 * @memberof sap.ui.Device.media
 */
sap.ui.Device.media.detachHandler = function(fnFunction,oListener,sName) {  };

/**
 * Returns information about the current active range of the range set with the given name.
 * 
 * If the optional parameter <code>iWidth</iWidth> is given, the active range will be determined for that width,
 * otherwise it is determined for the current window size.
 * 
 * @param {string} sName The name of the range set. The range set must be initialized beforehand ({@link sap.ui.Device.media.initRangeSet})
 * @param {int} [iWidth] An optional width, based on which the range should be determined;
 *             If <code>iWidth</code> is not a number, the window size will be used.
 * @returns {map} Information about the current active interval of the range set. The returned map has the same structure as the argument of the event handlers ({@link sap.ui.Device.media.attachHandler})
 * @public
 * 
 * @memberof sap.ui.Device.media
 */
sap.ui.Device.media.getCurrentRange = function(sName,iWidth) { return null; };

/**
 * Returns <code>true</code> if a range set with the given name is already initialized.
 * 
 * @param {string} sName The name of the range set.
 * @return {boolean} Returns <code>true</code> if a range set with the given name is already initialized
 * @public
 * 
 * @memberof sap.ui.Device.media
 */
sap.ui.Device.media.hasRangeSet = function(sName) { return false; };

/**
 * Initializes a screen width media query range set.
 * 
 * This initialization step makes the range set ready to be used for one of the other functions in namespace <code>sap.ui.Device.media</code>.
 * The most important {@link sap.ui.Device.media.RANGESETS predefined range sets} are initialized automatically.
 * 
 * To make a not yet initialized {@link sap.ui.Device.media.RANGESETS predefined range set} ready to be used, call this function with the
 * name of the range set to be initialized:
 * <pre>
 * sap.ui.Device.media.initRangeSet(sap.ui.Device.media.RANGESETS.SAP_3STEPS);
 * </pre>
 * 
 * Alternatively it is possible to define custom range sets as shown in the following example:
 * <pre>
 * sap.ui.Device.media.initRangeSet("MyRangeSet", [200, 400], "px", ["Small", "Medium", "Large"]);
 * </pre>
 * This example defines the following named ranges:
 * <ul>
 * <li><code>"Small"</code>: For screens smaller than 200 pixels.</li>
 * <li><code>"Medium"</code>: For screens greater than or equal to 200 pixels and smaller than 400 pixels.</li>
 * <li><code>"Large"</code>: For screens greater than or equal to 400 pixels.</li>
 * </ul>
 * The range names are optional. If they are specified a CSS class (e.g. <code>sapUiMedia-MyRangeSet-Small</code>) is also
 * added to the document root depending on the current active range. This can be suppressed via parameter <code>bSuppressClasses</code>.
 * 
 * @param {string}
 *             sName The name of the range set to be initialized - either a {@link sap.ui.Device.media.RANGESETS predefined} or custom one.
 *                   The name must be a valid id and consist only of letters and numeric digits.
 * @param {int[]}
 *             [aRangeBorders] The range borders
 * @param {string}
 *             [sUnit] The unit which should be used for the values given in <code>aRangeBorders</code>.
 *                     The allowed values are <code>"px"</code> (default), <code>"em"</code> or <code>"rem"</code>
 * @param {string[]}
 *             [aRangeNames] The names of the ranges. The names must be a valid id and consist only of letters and digits. If names
 *             are specified, CSS classes are also added to the document root as described above. This behavior can be
 *             switched off explicitly by using <code>bSuppressClasses</code>. <b>Note:</b> <code>aRangeBorders</code> with <code>n</code> entries
 *             define <code>n+1</code> ranges. Therefore <code>n+1</code> names must be provided.
 * @param {boolean}
 *             [bSuppressClasses] Whether or not writing of CSS classes to the document root should be suppressed when
 *             <code>aRangeNames</code> are provided
 * @public
 * 
 * @memberof sap.ui.Device.media
 */
sap.ui.Device.media.initRangeSet = function(sName,aRangeBorders,sUnit,aRangeNames,bSuppressClasses) {  };

/**
 * Removes a previously initialized range set and detaches all registered handlers.
 * 
 * Only custom range sets can be removed via this function. Initialized predefined range sets
 * ({@link sap.ui.Device.media.RANGESETS}) cannot be removed.
 * 
 * @param {string} sName The name of the range set which should be removed.
 * @protected
 * 
 * @memberof sap.ui.Device.media
 */
sap.ui.Device.media.removeRangeSet = function(sName) {  };


// ---- sap.ui.Device.media.RANGESETS --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.media.RANGESETS.toString = function() { return ""; };

// ---- sap.ui.Device.orientation --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.orientation.toString = function() { return ""; };
/**
 * Registers the given event handler to orientation change events of the document's window.
 * 
 * The event is fired whenever the screen orientation changes and the width of the document's window
 * becomes greater than its height or the other way round.
 * 
 * The event handler is called with a single argument: a map <code>mParams</code> which provides the following information:
 * <ul>
 * <li><code>mParams.landscape</code>: If this flag is set to <code>true</code>, the screen is currently in landscape mode, otherwise in portrait mode.</li>
 * </ul>
 * 
 * @param {function}
 *            fnFunction The handler function to call when the event occurs. This function will be called in the context of the
 *                       <code>oListener</code> instance (if present) or on the <code>window</code> instance. A map with information
 *                       about the orientation is provided as a single argument to the handler (see details above).
 * @param {object}
 *            [oListener] The object that wants to be notified when the event occurs (<code>this</code> context within the
 *                        handler function). If it is not specified, the handler function is called in the context of the <code>window</code>.
 * @public
 * 
 * @memberof sap.ui.Device.orientation
 */
sap.ui.Device.orientation.attachHandler = function(fnFunction,oListener) {  };

/**
 * Removes a previously attached event handler from the orientation change events.
 * 
 * The passed parameters must match those used for registration with {@link #.attachHandler} beforehand.
 * 
 * @param {function}
 *            fnFunction The handler function to detach from the event
 * @param {object}
 *            [oListener] The object that wanted to be notified when the event occurred
 * @public
 * 
 * @memberof sap.ui.Device.orientation
 */
sap.ui.Device.orientation.detachHandler = function(fnFunction,oListener) {  };


// ---- sap.ui.Device.os --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.os.toString = function() { return ""; };

// ---- sap.ui.Device.os.OS --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.os.OS.toString = function() { return ""; };

// ---- sap.ui.Device.resize --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.resize.toString = function() { return ""; };
/**
 * Registers the given event handler to resize change events of the document's window.
 * 
 * The event is fired whenever the document's window size changes.
 * 
 * The event handler is called with a single argument: a map <code>mParams</code> which provides the following information:
 * <ul>
 * <li><code>mParams.height</code>: The height of the document's window in pixels.</li>
 * <li><code>mParams.width</code>: The width of the document's window in pixels.</li>
 * </ul>
 * 
 * @param {function}
 *            fnFunction The handler function to call when the event occurs. This function will be called in the context of the
 *                       <code>oListener</code> instance (if present) or on the <code>window</code> instance. A map with information
 *                       about the size is provided as a single argument to the handler (see details above).
 * @param {object}
 *            [oListener] The object that wants to be notified when the event occurs (<code>this</code> context within the
 *                        handler function). If it is not specified, the handler function is called in the context of the <code>window</code>.
 * @public
 * 
 * @memberof sap.ui.Device.resize
 */
sap.ui.Device.resize.attachHandler = function(fnFunction,oListener) {  };

/**
 * Removes a previously attached event handler from the resize events.
 * 
 * The passed parameters must match those used for registration with {@link #.attachHandler} beforehand.
 * 
 * @param {function}
 *            fnFunction The handler function to detach from the event
 * @param {object}
 *            [oListener] The object that wanted to be notified when the event occurred
 * @public
 * 
 * @memberof sap.ui.Device.resize
 */
sap.ui.Device.resize.detachHandler = function(fnFunction,oListener) {  };


// ---- sap.ui.Device.support --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.support.toString = function() { return ""; };

// ---- sap.ui.Device.system --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.Device.system.toString = function() { return ""; };

// ---- sap.ui.model --------------------------------------------------------------------------

/**
 * FormatException class
 * 
 * This exception is thrown, when an error occurs while trying to convert a value of the model to
 * a specific property value in the UI.
 * @public
 * 
 * @memberof sap.ui.model
 */
sap.ui.model.FormatException = function() {  };

/**
 * ParseException class
 * 
 * This exception is thrown, when a parse error occurs while converting a
 * string value to a specific property type in the model.
 * @public
 * 
 * @memberof sap.ui.model
 */
sap.ui.model.ParseException = function() {  };

/**
 * ValidateException class
 * 
 * This exception is thrown, when a validation error occurs while checking the
 * defined constraints for a type.
 * @public
 * 
 * @memberof sap.ui.model
 */
sap.ui.model.ValidateException = function() {  };


// ---- sap.ui.model.analytics --------------------------------------------------------------------------

/**
 * If called on an instance of an (v1/v2) ODataModel it will enrich it with analytics capabilities.
 * @experimental This module is only for experimental use!
 * @protected
 * 
 * @memberof sap.ui.model.analytics
 */
sap.ui.model.analytics.ODataModelAdapter = function() {  };


// ---- sap.ui.model.analytics.AnalyticalBinding --------------------------------------------------------------------------

/**
 * 
 * @class
 * Tree binding implementation for OData entity sets with aggregate semantics.
 * 
 * Note on the handling of different count modes:
 * The AnalyticalBinding always uses the OData $inlinecount system query option to determine the total
 * count of matching entities. It ignores the default count mode set in the ODataModel instance and the
 * count mode specified in the binding parameters. If the default count mode is None, a warning is added
 * to the log to remind the application that OData requests generated by the AnalyticalBinding will include
 * a $inlinecount. If a count mode has been specified in the binding parameters, an error message will be
 * logged if it is None, because the binding will still add the $inlinecount to OData requests. If a
 * binding count mode is set to Request or Both, a warning will be logged to remind the application that
 * the OData requests generated by the AnalyticalBinding will include a $inlinecount.
 * 
 * @param {sap.ui.model.Model} oModel
 * @param {string}
 *            sPath the path pointing to the tree / array that should be bound
 * @param {object}
 *            [oContext=null] the context object for this data binding
 * @param {array}
 *            [aSorter=null] predefined sorter/s contained in an array
 * @param {array}
 *            [aFilters=null] predefined filter/s contained in an array
 * @param {object}
 *            [mParameters=null] additional control parameters. Supported parameters are:
 *            <ul>
 *            <li>entitySet: if set, it explicitly specifies the entity set addressed by the last segment of the given binding path</li>
 *            <li>useBatchRequests: if true, multiple OData requests will be wrapped into a single batch request, wherever possible</li>
 *            <li>provideGrandTotals: if true, grand total values will be provided for all bound measure properties</li>
 *            <li>provideTotalResultSize: if true, the total number of matching entries in the bound OData entity set will be provided</li>
 *            <li>reloadSingleUnitMeasures: if true, the binding will check aggregated entries with multi-unit occurrences, if
 *            some measure properties have a unique unit and will trigger separate OData requests to fetch them</li>
 *            </ul>
 * 
 * @throws Will throw an error if no analytic query result object could be determined from the bound OData entity set, either from an explicitly
 *         given EntitySet (via optional mParameters.entitySet argument), or by default implicitly from
 *         the binding path (see mandatory sPath argument).
 * @extends sap.ui.model.TreeBinding
 * @experimental This module is only for experimental use!
 * @protected
 * 
 */
sap.ui.model.analytics.AnalyticalBinding = function(oModel,sPath,oContext,aSorter,aFilters,mParameters) {};
/**
 * Creates a new subclass of class sap.ui.model.analytics.AnalyticalBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Sets filters for matching only a subset of the entities in the bound OData entity set.
 * 
 * Invoking this function resets the state of the binding. Subsequent data requests such as calls to getNodeContexts() will
 * need to trigger OData requests in order to fetch the data that are in line with these filters.
 * @param {sap.ui.model.Filter[]|sap.ui.model.Filter}
 *            aFilter an Array of sap.ui.model.Filter objects or a single Filter instance.
 * @param {sap.ui.model.FilterType}
 *            [sFilterType=sap.ui.model.FilterType.Control] Type of the filter which should be adjusted.
 * @return {sap.ui.model.analytics.AnalyticalBinding}
 *            returns <code>this</code> to facilitate method chaining
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.filter = function(aFilter,sFilterType) { return new sap.ui.model.analytics.AnalyticalBinding(); };

/**
 * Gets the analytical information for a column with a given name.
 * @param sColumnName the column name.
 * @return {object}
 *            analytical information for the column; see {@link #updateAnalyticalInfo}
 *            for an explanation of the object structure
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getAnalyticalInfoForColumn = function(sColumnName) { return new Object(); };

/**
 * Gets analytical metadata for the bound OData entity set.
 * @return {sap.ui.model.analytics.odata4analytics.QueryResult} analytical metadata for the bound OData entity set
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getAnalyticalQueryResult = function() { return new sap.ui.model.analytics.odata4analytics.QueryResult(); };

/**
 * Gets details about the dimension properties included in the bound OData entity set.
 * @return {map}
 *            details for every dimension property addressed by its name. The details object provides these properties: name of the dimension,
 * keyPropertyName for the name of the property holding the dimension key, textPropertyName for the name of the property holding the
 * text for the dimension, aAttributeName listing all properties holding dimension attributes, grouped as indicator whether or not this
 * dimension is currently grouped, and analyticalInfo, which contains the binding information for this dimension passed from the
 * AnalyticalBinding's consumer via call to function updateAnalyticalInfo.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getDimensionDetails = function() { return null; };

/**
 * Get a download URL with the specified format considering the
 * sort/filter/custom parameters.
 * 
 * The download URL also takes into account the selected dimensions and measures,
 * depending on the given column definitions of the AnalyticalTable.
 * This is based on the visible/inResult flags of the columns, as well as integrity dependencies,
 * e.g. for mandatory Unit properties.
 * 
 * @param {string} sFormat Value for the $format Parameter
 * @return {string} URL which can be used for downloading
 * @since 1.24
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getDownloadUrl = function(sFormat) { return ""; };

/**
 * Gets the names of the filterable properties in the bound OData entity set.
 * @returns {array}
 *             names of properties that can be filtered.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getFilterablePropertyNames = function() { return null; };

/**
 * Gets a printable name for a group.
 * 
 * The printable name follows the pattern is <code>&lt;label&gt;:&lt;key-value&gt;[-&lt;text-value&gt;]</code>,
 * where <code>label</code> is the label of the dimension property used at the aggregation level for the group,
 * <code>key-value</code> is the key value of that dimension for the group, and <code>text-value</code> is the
 * value of the associated text property, if it is also used in the binding.
 * 
 * Whenever a formatter function has been defined for a column displaying the key or text of this dimension, the return value
 * of this function is applied for the group name instead of the respective key or text value.
 * @param {sap.ui.model.Context}
 *            oContext the parent context identifying the requested group.
 * @param {int}
 *            iLevel the level number of oContext (because the context might occur at multiple levels)
 * @return {string} a printable name for the group.
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getGroupName = function(oContext,iLevel) { return ""; };

/**
 * Gets the total number of contexts contained in a group, if known.
 * 
 * For a given group, be aware that the group size might vary over time. In principle, this can happen if the
 * bound set of OData entities includes measure properties with amount or quantity values. The AnalyticalBinding
 * recognizes situations where the OData service returns multiple entries for a single group entry due to the fact that a
 * measure property cannot be aggregated properly, because an amount exists in multiple currencies or a quantity exists
 * in multiple units. In such situations, the AnalyticalBinding substitutes these entries by a single representative, and
 * the group size gets reduced by the count of duplicate entries. Finally, since the Binding does not always fetch all children of
 * a group at once, but only a page with a certain range, such size changes might happen after every page access.
 * @param {sap.ui.model.Context}
 *            oContext the parent context identifying the requested group of child contexts.
 * @param {int}
 *            iLevel the level number of oContext (because the context might occur at multiple levels)
 * @return {int}
 *            The currently known group size, or -1, if not yet determined
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getGroupSize = function(oContext,iLevel) { return 0; };

/**
 * Gets details about the measure properties included in the bound OData entity set.
 * @return {map}
 *            details for every measure property addressed by its name. The details object provides these properties: name of the measure,
 * rawValuePropertyName for the name of the property holding the raw value, unitPropertyName for the name of the property holding the related
 * value unit or currency, if any, and analyticalInfo, which contains the binding information for this measure passed from the
 * AnalyticalBinding's consumer via call to function updateAnalyticalInfo.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getMeasureDetails = function() { return null; };

/**
 * Returns a metadata object for class sap.ui.model.analytics.AnalyticalBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets child contexts for a specified parent context.
 * 
 * Contexts are returned in a stable order imposed by the
 * dimension property that defines this aggregation level beneath the parent context: Either a sort order has been specified for this property,
 * or the entries are returned in ascending order of the values of this dimension property by default.
 * 
 * If any of the requested data is missing, an OData request will be triggered to load it.
 * @param {map}
 *            mParameters specifying the aggregation level for which contexts shall be fetched. Supported parameters are:
 * <ul>
 * <li>oContext: parent context identifying the requested group of child contexts</li>
 * <li>level: level number for oContext, because it might occur at multiple levels; context with group ID <code>"/"</code> has level 0</li>
 * <li>numberOfExpandedLevels: number of child levels that shall be fetched automatically</li>
 * <li>startIndex: index of first child entry to return from the parent context (zero-based)</li>
 * <li>length: number of entries to return; counting begins at the given start index</li>
 * <li>threshold: number of additional entries that shall be locally available in the binding for subsequent
 * accesses to child entries of the given parent context. </li>
 * </ul>
 * @return {array}
 *            Array containing the requested contexts of class sap.ui.model.Context, limited by the number of entries contained
 *            in the entity set at that aggregation level.
 *            The array will contain less than the requested number of contexts, if some are not locally available and an OData request is
 *            pending to fetch them. In this case, if the parameter numberOfExpandedLevels > 0, the array will be completely empty.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getNodeContexts = function(mParameters) { return null; };

/**
 * Gets the metadata of a property with a given name.
 * @param {string}
 *            sPropertyName The property name.
 * @return {object}
 *            OData metadata of this property or null if it does not exist.
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getProperty = function(sPropertyName) { return new Object(); };

/**
 * Gets the label of a property with a given name.
 * @param {string}
 *            sPropertyName The property name.
 * @returns {string}
 *            The heading maintained for this property or null if it does not exist.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getPropertyHeading = function(sPropertyName) { return ""; };

/**
 * Gets the label of a property with a given name.
 * @param {string}
 *            sPropertyName The property name.
 * @returns {string}
 *            The label maintained for this property or null if it does not exist.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getPropertyLabel = function(sPropertyName) { return ""; };

/**
 * Gets the quick info of a property with a given name.
 * @param {string}
 *            sPropertyName The property name.
 * @returns {string}
 *            The quick info maintained for this property or null if it does not exist.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getPropertyQuickInfo = function(sPropertyName) { return ""; };

/**
 * Gets the context for the root aggregation level representing the grand total for all bound measure properties.
 * 
 * The context is assigned to parent group ID <code>null</code>. If the binding is configured not to provide a grand total,
 * this context is empty. If data for this context is not locally available yet, an OData request will be triggered to load it.
 * 
 * This function must be called whenever the bound set of OData entities changes, e.g., by changing selected dimensions,
 * modifying filter conditions, etc.
 * @param {map}
 *            mParameters specifying how the top-most aggregation level shall be fetched. Supported parameters are:
 * <ul>
 * <li>numberOfExpandedLevels: number of child levels that shall be fetched automatically</li>
 * <li>startIndex: index of first entry to return from parent group ID <code>"/"</code> (zero-based)</li>
 * <li>length: number of entries to return at and after the given start index</li>
 * <li>threshold: number of additional entries that shall be locally available in the binding for subsequent
 * accesses to contexts of parent group ID <code>"/"</code> or below, if auto-expanding is selected</li>
 * </ul>
 * @return {array}
 *            Array with a single object of class sap.ui.model.Context for the root context,
 *            or an empty array if an OData request is pending to fetch requested contexts that are not yet locally available.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getRootContexts = function(mParameters) { return null; };

/**
 * Gets the names of the sortable properties in the bound OData entity set.
 * @returns {array}
 *             names of properties that can be used for sorting the result entities.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getSortablePropertyNames = function() { return null; };

/**
 * Gets the total number of entities in the bound OData entity set.
 * 
 * Counting takes place at the lowest aggregation level defined by the possible value combinations for the complete set of
 * dimension properties included in the bound entity set. This means that intermediate aggregate entities with
 * sub-totals at higher aggregation levels are not counted.
 * @return {int}
 *            the total number of addressed entities in the OData entity set
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.getTotalSize = function() { return 0; };

/**
 * Determines if the binding has the entries of a given aggregation level locally available.
 * 
 * If so, no further OData request is required to fetch any of them.
 * @param {sap.ui.model.Context}
 *            oContext the parent context identifying the aggregation level.
 * @param {int}
 *            iLevel the level number of oContext (because the context might occur at multiple levels).
 * @return {boolean}
 *            property of sap.ui.model.analytics.AnalyticalBinding.ContextsAvailabilityStatus,
 * indicating whether all, some, or none of the entries are locally available.
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.hasAvailableNodeContexts = function(oContext,iLevel) { return false; };

/**
 * Determines if the contexts in a specified group have further children. If so,
 * any of these group contexts can be a parent context of a nested sub-group in
 * a subsequent aggregation level.
 * @param {sap.ui.model.Context}
 *            oContext the parent context identifying the requested group of child contexts.
 * @param {map}
 *            mParameters The only supported parameter is level as the level number of oContext (because the context might occur at multiple levels)
 * @return {boolean}
 *            true if and only if the contexts in the specified group have further children.
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.hasChildren = function(oContext,mParameters) { return false; };

/**
 * Determines if any of the properties included in the bound OData entity set is a measure property.
 * @return {boolean}
 *            true if and only one or more properties are measure properties.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.hasMeasures = function() { return false; };

/**
 * Determines if a given name refers to a measure property
 * @param {string}
 *            sPropertyName The property name.
 * @return {boolean}
 *            true if and only if the bound OData entity set includes a measure property with this name.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.isMeasure = function(sPropertyName) { return false; };

/**
 * Loads child contexts of multiple groups.
 * @param {map}
 *            mGroupIdRanges specifies index ranges of child contexts to be loaded for multiple groups identified by their ID. A group index range is
 *            given by an object consisting of startIndex, length, threshold. For every group ID, the map holds an array of such range objects.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.loadGroups = function(mGroupIdRanges) {  };

/**
 * Determines if the binding has been configured to provide a grand total for the selected measure properties.
 * @return {boolean}
 *            true if and only if the binding provides a context for the grand totals of all selected measure properties.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.providesGrandTotal = function() { return false; };

/**
 * Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For service side models this should refetch
 * the data from the service. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter
 * bForceUpdate.
 * 
 * @param {boolean}
 *            [bForceUpdate] Update the bound control even if no data has been changed
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.refresh = function(bForceUpdate) {  };

/**
 * Sets sorters for retrieving the entities in the bound OData entity set in a specific order.
 * 
 * Invoking this function resets the state of the binding. Subsequent data requests such as calls to getNodeContexts() will
 * need to trigger OData requests in order to fetch the data that are in line with these sorters.
 * @param {sap.ui.model.Sorter|array}
 *            aSorter a sorter object or an array of sorter objects which define the sort order.
 * @return {sap.ui.model.analytics.AnalyticalBinding}
 *            returns <code>this</code> to facilitate method chaining.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.sort = function(aSorter) { return new sap.ui.model.analytics.AnalyticalBinding(); };

/**
 * Updates the binding's structure with new analytical information.
 * 
 * Analytical information is the mapping of UI columns to properties in the bound OData entity set. Every column object contains
 * the name of the bound property and in addition:
 * <ol>
 *   <li>A column bound to a dimension property has further boolean properties:
 *     <ul>
 *       <li>grouped: dimension will be used for building groups</li>
 *       <li>visible: if the column is visible, values for the related property will be fetched from the OData service</li>
 *       <li>inResult: if the column is not visible, but declared to be part of the result, values for the related property
 *       will also be fetched from the OData service</li>
 *     </ul>
 *   </li>
 *   <li>A column bound to a measure property has further boolean properties:
 *     <ul>
 *       <li>total: totals and sub-totals will be provided for the measure at all aggregation levels</li>
 *     </ul>
 *   </li>
 * </ol>
 * 
 * Invoking this function resets the state of the binding and subsequent data requests such as calls to getNodeContexts() will
 * need to trigger OData requests in order to fetch the data that are in line with this analytical information.
 * 
 * Please be aware that a call of this function might lead to additional back-end requests, as well as a control re-rendering later on.
 * Whenever possible use the API of the analytical control, instead of relying on the binding.
 * @param {array}
 *            aColumns an array with objects holding the analytical information for every column, from left to right.
 * @protected
 * 
 */
sap.ui.model.analytics.AnalyticalBinding.prototype.updateAnalyticalInfo = function(aColumns) {  };


// ---- sap.ui.model.analytics.AnalyticalTreeBindingAdapter --------------------------------------------------------------------------

/**
 * Adapter for TreeBindings to add the ListBinding functionality and use the
 * tree structure in list based controls.
 * @class
 * @experimental This module is only for experimental use!
 * @protected
 * 
 */
sap.ui.model.analytics.AnalyticalTreeBindingAdapter = function() {};
/**
 * Retrieves the currently set number of expanded levels from the Binding (commonly an AnalyticalBinding).
 * @protected
 * @returns {int} the number of expanded levels
 * 
 */
sap.ui.model.analytics.AnalyticalTreeBindingAdapter.prototype.getNumberOfExpandedLevels = function() { return 0; };

/**
 * Checks if the AnalyticalBinding has totaled measures available.
 * Used for rendering sum rows.
 * 
 * @public
 * @returns {boolean} wether the binding has totaled measures or not
 * 
 */
sap.ui.model.analytics.AnalyticalTreeBindingAdapter.prototype.hasTotaledMeasures = function() { return false; };

/**
 * Sets the number of expanded levels on the TreeBinding (commonly an AnalyticalBinding).
 * This is NOT the same as AnalyticalTreeBindingAdapter#collapse or AnalyticalTreeBindingAdapter#expand.
 * Setting the number of expanded levels leads to different requests.
 * This function is used by the AnalyticalTable for the ungroup/ungroup-all feature.
 * @param {int} iLevels the number of levels which should be expanded, minimum is 0
 * @protected
 * 
 */
sap.ui.model.analytics.AnalyticalTreeBindingAdapter.prototype.setNumberOfExpandedLevels = function(iLevels) {  };


// ---- sap.ui.model.analytics.BatchResponseCollector --------------------------------------------------------------------------

/**
 * Constructor for a batch response collecting component.
 * 
 * @classdesc Simple Response Collection Component, collects the responses for each sub-request inside a bigger batch request.
 * 
 * Also handles clean-up after all responses (either success or error) have been collected.
 * Instantiated in AnalyticalBinding.prototype._executeBatchRequest()
 * @constructor
 * @public
 * @param {object} [mParams] optional Setup-Parameter, @see BatchResponseCollector#setup
 * 
 */
sap.ui.model.analytics.BatchResponseCollector = function(mParams) {};
/**
 * Collects responses of type BatchResponseCollector.TYPE_SUCCESS and BatchResponseCollector.TYPE_ERROR.
 * 
 * Keeps track of all collected responses and fires the necessary events after all responses for the
 * requests, given in the constructor, have returned.
 * 
 * @public
 * @param {object} oResponse the response which should be collected
 * @param {string} [sResponseType] the type of the response, either BatchResponseCollector.TYPE_SUCCESS
 * 									or BatchResponseCollector.TYPE_ERROR
 * 
 */
sap.ui.model.analytics.BatchResponseCollector.prototype.collect = function(oResponse,sResponseType) {  };

/**
 * Convenience function to collect an error response.
 * 
 * Internally BatchResponseCollector#collect is called, the second parameter is set to BatchResponseCollector.TYPE_ERROR
 * 
 * @public
 * @param {object} oResponse the erroneous response object
 * 
 */
sap.ui.model.analytics.BatchResponseCollector.prototype.error = function(oResponse) {  };

/**
 * Setup-Function to initialize/reset the BatchResponseCollector.
 * 
 * @public
 * @param {object} [mParams] optional Setup-Parameter
 * @param {array} mParams.executedRequests an Array with detail informations for all executed batch sub-requests
 * @param {object} mParams.binding a reference to the AnalyticalBinding which started the batch request
 * @param {int} mParams.lastAnalyticalInfoVersion the analyticalInfo version at the time of the creation of this
 * 			BatchResponseCollector instance, this may change during the process of a pending request. Typically changed
 * 			via a call to AnalyticalBinding#updateAnalyticalInfo.
 * @param {function} mParam.success a success handler function, which is called after all requests in mParams.executedRequests
 * 			have returned.
 * @param {function} mParam.error an error handler function, which is called if one or more requests have returned with an error
 * 
 */
sap.ui.model.analytics.BatchResponseCollector.prototype.setup = function(mParams) {  };

/**
 * Convenience function to collect a success response.
 * 
 * Internally BatchResponseCollector#collect is called with second parameter BatchResponseCollector.TYPE_SUCCESS
 * 
 * @public
 * @param {object} oResponse the successful response, which should be collected
 * 
 */
sap.ui.model.analytics.BatchResponseCollector.prototype.success = function(oResponse) {  };


// ---- sap.ui.model.analytics.odata4analytics --------------------------------------------------------------------------

/**
 * Specify which components of the dimension shall be included in the value
 * set.
 * 
 * @param bIncludeText
 *            Indicator whether or not to include the dimension text (if
 *            available) in the value set.
 * @param bIncludeAttributes
 *            Indicator whether or not to include all dimension attributes
 *            (if available) in the value set.
 * @public
 * 
 * @memberof sap.ui.model.analytics.odata4analytics
 */
sap.ui.model.analytics.odata4analytics.includeDimensionTextAttributes = function(bIncludeText,bIncludeAttributes) {  };


// ---- sap.ui.model.analytics.odata4analytics.Dimension --------------------------------------------------------------------------

/**
 * Create a representation of a dimension provided by an analytic query. Do not create your own instances.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this dimension
 * @param {object}
 *            oProperty The DataJS object object representing the dimension
 * 
 * @constructor
 * 
 * @class Representation of a property annotated with
 *        sap:aggregation-role="dimension".
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension = function(oQueryResult,oProperty) {};
/**
 * Find attribute by name
 * 
 * @param {string}
 *            sName Attribute name
 * @returns {sap.ui.model.analytics.odata4analytics.Dimension} The dimension attribute
 *          object with this name or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.findAttributeByName = function(sName) { return new sap.ui.model.analytics.odata4analytics.Dimension(); };

/**
 * Get the names of all attributes included in this dimension
 * 
 * @returns {string[]} List of all attribute names
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getAllAttributeNames = function() { return new Array(); };

/**
 * Get all attributes of this dimension
 * 
 * @returns {object} An object with individual JS properties for each
 *          attribute of this dimension. The JS object properties all are
 *          objects of type odata4analytics.DimensionAttribute. The
 *          names of the JS object properties are given by the OData entity
 *          type property names representing the dimension attribute keys.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getAllAttributes = function() { return new Object(); };

/**
 * Get query result containing this dimension
 * 
 * @return {sap.ui.model.analytics.odata4analytics.QueryResult} The query result object
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getContainingQueryResult = function() { return new sap.ui.model.analytics.odata4analytics.QueryResult(); };

/**
 * Get associated hierarchy
 * 
 * @returns {object} The hierarchy object or null if there is none. It can
 *          be an instance of class
 *          odata4analytics.RecursiveHierarchy (TODO later: or a
 *          leveled hierarchy). Use methods isLeveledHierarchy and
 *          isRecursiveHierarchy to determine object type.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getHierarchy = function() { return new Object(); };

/**
 * Get the key property
 * 
 * @returns {object} The DataJS object representing the property for the
 *          dimension key
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getKeyProperty = function() { return new Object(); };

/**
 * Get label
 * 
 * @returns {string} The (possibly language-dependent) label text for this
 *          dimension
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getLabelText = function() { return ""; };

/**
 * Get master data entity set for this dimension
 * 
 * @return {sap.ui.model.analytics.odata4analytics.EntitySet} The master data entity set
 *         for this dimension, or null, if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getMasterDataEntitySet = function() { return new sap.ui.model.analytics.odata4analytics.EntitySet(); };

/**
 * Get the name of the dimension
 * 
 * @returns {string} The name of this dimension, which is identical to the
 *          name of the dimension key property in the entity type
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getName = function() { return ""; };

/**
 * Get super-ordinate dimension
 * 
 * @returns {object} The super-ordinate dimension or null if there is none
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getSuperOrdinateDimension = function() { return new Object(); };

/**
 * Get text property related to this dimension
 * 
 * @returns {object} The DataJS object representing the text property or
 *          null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.getTextProperty = function() { return new Object(); };

/**
 * Get indicator whether or not master data is available for this dimension
 * 
 * @returns {boolean} True iff master data is available
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Dimension.prototype.hasMasterData = function() { return false; };


// ---- sap.ui.model.analytics.odata4analytics.DimensionAttribute --------------------------------------------------------------------------

/**
 * Create a representation of a dimension attribute provided by an analytic
 * query. Do not create your own instances.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this dimension attribute
 * @param {object}
 *            oProperty The DataJS object object representing the dimension
 *            attribute
 * 
 * @constructor
 * 
 * @class Representation of a dimension attribute.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionAttribute = function(oQueryResult,oProperty) {};
/**
 * Get dimension
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.Dimension} The dimension object
 *          containing this attribute
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionAttribute.prototype.getDimension = function() { return new sap.ui.model.analytics.odata4analytics.Dimension(); };

/**
 * Get the key property
 * 
 * @returns {object} The DataJS object representing the property for the key
 *          of this dimension attribute
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionAttribute.prototype.getKeyProperty = function() { return new Object(); };

/**
 * Get label
 * 
 * @returns {string} The (possibly language-dependent) label text for this
 *          dimension attribute
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionAttribute.prototype.getLabelText = function() { return ""; };

/**
 * Get the name of the dimension attribute
 * 
 * @returns {string} The name of the dimension attribute, which is identical
 *          to the name of the property in the entity type holding the
 *          attribute value
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionAttribute.prototype.getName = function() { return ""; };

/**
 * Get text property related to this dimension attribute
 * 
 * @returns {object} The DataJS object representing the text property or
 *          null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionAttribute.prototype.getTextProperty = function() { return new Object(); };


// ---- sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest --------------------------------------------------------------------------

/**
 * Create a request object for interaction with a dimension value help. Such a
 * value help is served by either the query result entity set, in which case the
 * returned dimension members are limited to those also used in the query result
 * data. Or, the value help is populated by a master data entity set, if made
 * available by the service. In this case, the result will include all valid
 * members for that dimension.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.Dimension}
 *            oDimension Description of a dimension
 * @param {sap.ui.model.analytics.odata4analytics.ParameterizationRequest}
 *            oParameterizationRequest (optional) Request object for
 *            interactions with the parameterization of the query result or (not
 *            yet supported) master data entity set Such an object is required
 *            if the entity set holding the dimension members includes
 *            parameters.
 * @param {boolean}
 *            bUseMasterData (optional) Indicates use of master data for
 *            determining the dimension members.
 * 
 * @constructor
 * 
 * @class Creation of URIs for fetching a query dimension value set.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest = function(oDimension,oParameterizationRequest,bUseMasterData) {};
/**
 * Get the filter expression for this request.
 * 
 * Expressions are represented by separate objects. If none exists so far, a
 * new expression object gets created.
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.FilterExpression} The filter object
 *          associated to this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.getFilterExpression = function() { return new sap.ui.model.analytics.odata4analytics.FilterExpression(); };

/**
 * Returns the current page boundaries as object with properties
 * <code>start</code> and <code>end</code>. If the end of the page is
 * unbounded, <code>end</code> is null.
 * 
 * @returns {Object} the current page boundaries as object
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.getResultPageBoundaries = function() { return null; };

/**
 * Get the sort expression for this request.
 * 
 * Expressions are represented by separate objects. If none exists so far, a
 * new expression object gets created.
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.SortExpression} The sort object
 *          associated to this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.getSortExpression = function() { return new sap.ui.model.analytics.odata4analytics.SortExpression(); };

/**
 * Get the value of a query option for the OData request URI corresponding
 * to this request.
 * 
 * @param {String}
 *            sQueryOptionName Identifies the query option: $select,
 *            $filter,... or any custom query option
 * 
 * @returns {String} The value of the requested query option or null, if
 *          this option is not used for the OData request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.getURIQueryOptionValue = function(sQueryOptionName) { return null; };

/**
 * Get the URI to locate the entity set for the dimension memebers.
 * 
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @returns {String} The resource path of the URI pointing to the entity
 *          set. It is a relative URI unless a service root is given, which
 *          would then prefixed in order to return a complete URL.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.getURIToDimensionMemberEntitySet = function(sServiceRootURI) { return null; };

/**
 * Get the unescaped URI to fetch the dimension members, optionally
 * augmented by text and attributes.
 * 
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @returns {String} The unescaped URI that contains the OData resource path
 *          and OData system query options to express the request for the
 *          parameter value set..
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.getURIToDimensionMemberEntries = function(sServiceRootURI) { return null; };

/**
 * Set the filter expression for this request.
 * 
 * Expressions are represented by separate objects. Calling this method
 * replaces the filter object maintained by this request.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.FilterExpression}
 *            oFilter The filter object to be associated with this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.setFilterExpression = function(oFilter) {  };

/**
 * Set the parameterization request required for retrieving dimension
 * members directly from the query result, if it is parameterized.
 * 
 * @param oParameterizationRequest
 *            Request object for interactions with the parameterization of
 *            this query result
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.setParameterizationRequest = function(oParameterizationRequest) {  };

/**
 * Set further options to be applied for the OData request
 * 
 * @param {Boolean}
 *            bIncludeCount Indicates whether or not the result shall
 *            include a count for the returned entities. Default is not to
 *            include it. Pass null to keep current setting.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.setRequestOptions = function(bIncludeCount) {  };

/**
 * Specify that only a page of the query result shall be returned. A page is
 * described by its boundaries, that are row numbers for the first and last
 * rows in the query result to be returned.
 * 
 * @param {Number}
 *            start The first row of the query result to be returned.
 *            Numbering starts at 1. Passing null is equivalent to start
 *            with the first row.
 * @param {Number}
 *            end The last row of the query result to be returned. Passing
 *            null is equivalent to get all rows up to the end of the query
 *            result.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.setResultPageBoundaries = function(start,end) {  };

/**
 * Set the sort expression for this request.
 * 
 * Expressions are represented by separate objects. Calling this method
 * replaces the sort object maintained by this request.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.SortExpression}
 *            oSorter The sort object to be associated with this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest.prototype.setSortExpression = function(oSorter) {  };


// ---- sap.ui.model.analytics.odata4analytics.EntitySet --------------------------------------------------------------------------

/**
 * Create a representation of an OData entity set in the context of an analytic
 * query. Do not create your own instances.
 * 
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            set
 * @param {object}
 *            oSchema DataJS object for the schema surrounding the container of
 *            this entity set
 * @param {object}
 *            oContainer DataJS object for the container holding this entity set
 * @param {object}
 *            oEntitySet DataJS object for the entity set
 * @param {object}
 *            oEntityType DataJS object for the entity type
 * 
 * @constructor
 * 
 * @class Representation of an OData entity set.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntitySet = function(oModel,oSchema,oContainer,oEntitySet,oEntityType) {};
/**
 * Get entity type used for this entity set
 * 
 * @returns {object} The DataJS object representing the entity type
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntitySet.prototype.getEntityType = function() { return new Object(); };

/**
 * Get the fully qualified name for this entity type
 * 
 * @returns {string} The fully qualified name
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntitySet.prototype.getQName = function() { return ""; };

/**
 * Get full description for this entity set
 * 
 * @returns {object} The DataJS object representing the entity set
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntitySet.prototype.getSetDescription = function() { return new Object(); };

/**
 * Get names of properties in this entity set that can be updated
 * 
 * @returns {object} An object with individual JS properties for each
 *          updatable property. For testing whether propertyName is the name
 *          of an updatable property, use
 *          <code>getUpdatablePropertyNameSet()[propertyName]</code>. The
 *          included JS object properties are all set to true.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntitySet.prototype.getUpdatablePropertyNameSet = function() { return new Object(); };


// ---- sap.ui.model.analytics.odata4analytics.EntityType --------------------------------------------------------------------------

/**
 * Create a representation of an OData entity type in the context of an analytic
 * query. Do not create your own instances.
 * 
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {object}
 *            oEntityType DataJS object for the entity type
 * 
 * @constructor
 * 
 * @class Representation of an OData entity type.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType = function(oModel,oSchema,oEntityType) {};
/**
 * Find property by name
 * 
 * @param {string}
 *            sPropertyName Property name
 * @returns {object} The DataJS object representing the property or null if
 *          it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.findPropertyByName = function(sPropertyName) { return new Object(); };

/**
 * Get the names of all properties with an associated hierarchy
 * 
 * @returns {string[]} List of all property names
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getAllHierarchyPropertyNames = function() { return new Array(); };

/**
 * Get names of properties that can be filtered, that is they can be used in
 * $filter expressions
 * 
 * @returns {string[]} Array with names of properties that can be
 *          filtered.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getFilterablePropertyNames = function() { return new Array(); };

/**
 * Get heading of the property with specified name (identified by property
 * metadata annotation sap:heading)
 * 
 * @param {string}
 *            sPropertyName Property name
 * @returns {string} The heading string
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getHeadingOfProperty = function(sPropertyName) { return ""; };

/**
 * Get the hierarchy associated to a given property Based on the current
 * specification, hierarchies are always recursive. TODO: Extend behavior
 * when leveled hierarchies get in scope
 * 
 * @param {string}
 *            sName Parameter name
 * @returns {sap.ui.model.analytics.odata4analytics.RecursiveHierarchy} The hierarchy
 *          object or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getHierarchy = function(sName) { return new sap.ui.model.analytics.odata4analytics.RecursiveHierarchy(); };

/**
 * Get key properties of this type
 * 
 * @returns {string[]} The list of key property names
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getKeyProperties = function() { return new Array(); };

/**
 * Get label of the property with specified name (identified by property
 * metadata annotation sap:label)
 * 
 * @param {string}
 *            sPropertyName Property name
 * @returns {string} The label string
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getLabelOfProperty = function(sPropertyName) { return ""; };

/**
 * Get all properties
 * 
 * @return {object} Object with (JavaScript) properties, one for each (OData
 *         entity type) property. These (JavaScript) properties hold the
 *         DataJS object representing the property
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getProperties = function() { return new Object(); };

/**
 * Get properties for which filter restrictions have been specified
 * 
 * @returns {object} Object with (JavaScript) properties, one for each
 *          (OData entity type) property. The property value is from
 *          odata4analytics.EntityType.propertyFilterRestriction and
 *          indicates the filter restriction for this property.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getPropertiesWithFilterRestrictions = function() { return new Object(); };

/**
 * Get the fully qualified name for this entity type
 * 
 * @returns {string} The fully qualified name
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getQName = function() { return ""; };

/**
 * Get quick info of the property with specified name (identified by property
 * metadata annotation sap:quickinfo)
 * 
 * @param {string}
 *            sPropertyName Property name
 * @returns {string} The quick info string
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getQuickInfoOfProperty = function(sPropertyName) { return ""; };

/**
 * Get names of properties that must be filtered, that is they must appear
 * in every $filter expression
 * 
 * @returns {string[]} Array with names of properties that must be
 *          filtered.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getRequiredFilterPropertyNames = function() { return new Array(); };

/**
 * Get names of properties that can be sorted, that is they can be used in
 * $orderby expressions
 * 
 * @returns {string[]} Array with names of properties that can be
 *          sorted.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getSortablePropertyNames = function() { return new Array(); };

/**
 * Get the super-ordinate property related to the property with specified
 * name (identified by property metadata annotation sap:super-ordinate)
 * 
 * @param {string}
 *            sPropertyName Property name
 * @returns {object} The DataJS object representing the super-ordinate
 *          property or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getSuperOrdinatePropertyOfProperty = function(sPropertyName) { return new Object(); };

/**
 * Get the text property related to the property with specified name
 * (identified by property metadata annotation sap:text)
 * 
 * @param {string}
 *            sPropertyName Property name
 * @returns {object} The DataJS object representing the text property or
 *          null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getTextPropertyOfProperty = function(sPropertyName) { return new Object(); };

/**
 * Get full description for this entity type
 * 
 * @returns {object} The DataJS object representing the entity type
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.EntityType.prototype.getTypeDescription = function() { return new Object(); };


// ---- sap.ui.model.analytics.odata4analytics.FilterExpression --------------------------------------------------------------------------

/**
 * Create a representation of a filter expression for a given entity type. It can be rendered as value for the $filter system
 * query option.
 * 
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {sap.ui.model.analytics.odata4analytics.EntityType}
 *            oEntityType object for the entity type
 * 
 * @constructor
 * 
 * @class Representation of a $filter expression for an OData entity type.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression = function(oModel,oSchema,oEntityType) {};
/**
 * Add a condition to the filter expression.
 * 
 * Multiple conditions on the same property are combined with a logical OR first, and in a second step conditions for
 * different properties are combined with a logical AND.
 * 
 * @param {string}
 *            sPropertyName The name of the property bound in the condition
 * @param {sap.ui.model.FilterOperator}
 *            sOperator operator used for the condition
 * @param {object}
 *            oValue value to be used for this condition
 * @param {object}
 *            oValue2 (optional) as second value to be used for this condition
 * @throws Exception
 *             if the property is unknown or not filterable
 * @returns {sap.ui.model.analytics.odata4analytics.FilterExpression} This object for method chaining
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.addCondition = function(sPropertyName,sOperator,oValue,oValue2) { return new sap.ui.model.analytics.odata4analytics.FilterExpression(); };

/**
 * Add a set condition to the filter expression.
 * 
 * A set condition tests if the value of a property is included in a set of given values. It is a convenience method for
 * this particular use case eliminating the need for multiple API calls.
 * 
 * @param {string}
 *            sPropertyName The name of the property bound in the condition
 * @param {array}
 *            aValues values defining the set
 * @throws Exception
 *             if the property is unknown or not filterable
 * @returns {sap.ui.model.analytics.odata4analytics.FilterExpression} This object for method chaining
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.addSetCondition = function(sPropertyName,aValues) { return new sap.ui.model.analytics.odata4analytics.FilterExpression(); };

/**
 * Add an array of UI5 filter conditions to the filter expression.
 * 
 * The UI5 filter condition is combined with the other given conditions using a logical AND. This method
 * is particularly useful for passing forward already created UI5 filter arrays.
 * 
 * @param {sap.ui.model.Filter[]}
 *            aUI5Filter Array of UI5 filter objects
 * @returns {sap.ui.model.analytics.odata4analytics.FilterExpression} This object for method chaining
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.addUI5FilterConditions = function(aUI5Filter) { return new sap.ui.model.analytics.odata4analytics.FilterExpression(); };

/**
 * Check if request is compliant with basic filter constraints expressed in metadata:
 * 
 * (a) all properties required in the filter expression have been referenced (b) the single-value filter restrictions have been obeyed
 * 
 * @returns {boolean} The value true. In case the expression violates some of the rules, an exception with some explanatory
 *          message is thrown
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.checkValidity = function() { return false; };

/**
 * Clear expression from any conditions that may have been set previously
 * 
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.clear = function() {  };

/**
 * Get description for this entity type
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.EntityType} The object representing the entity type
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.getEntityType = function() { return new sap.ui.model.analytics.odata4analytics.EntityType(); };

/**
 * Get an array of SAPUI5 Filter objects corresponding to this expression.
 * 
 * @returns {sap.ui.model.Filter[]} List of filter objects representing this expression
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.getExpressionAsUI5FilterArray = function() { return new Array(); };

/**
 * Get the value for the OData system query option $filter corresponding to this expression.
 * 
 * @returns {string} The $filter value for the filter expression
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.getURIFilterOptionValue = function() { return ""; };

/**
 * Remove all conditions for some property from the filter expression.
 * 
 * All previously set conditions for some property are removed from the filter expression.
 * 
 * @param {string}
 *            sPropertyName The name of the property bound in the condition
 * @throws Exception
 *             if the property is unknown
 * @returns {sap.ui.model.analytics.odata4analytics.FilterExpression} This object for method chaining
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.FilterExpression.prototype.removeConditions = function(sPropertyName) { return new sap.ui.model.analytics.odata4analytics.FilterExpression(); };


// ---- sap.ui.model.analytics.odata4analytics.Measure --------------------------------------------------------------------------

/**
 * Create a representation of a measure provided by an analytic query. Do not create your own instances.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this measure
 * @param {object}
 *            oProperty The DataJS object object representing the measure
 * 
 * @constructor
 * 
 * @class Representation of a property annotated with
 *        sap:aggregation-role="measure".
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Measure = function(oQueryResult,oProperty) {};
/**
 * Get the text property associated to the raw value property holding the
 * formatted value related to this measure
 * 
 * @returns {object} The DataJS object representing the property holding the
 *          formatted value text of this measure or null if this measure
 *          does not have a unit
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Measure.prototype.getFormattedValueProperty = function() { return new Object(); };

/**
 * Get label
 * 
 * @returns {string} The (possibly language-dependent) label text for this
 *          measure
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Measure.prototype.getLabelText = function() { return ""; };

/**
 * Get the name of the measure
 * 
 * @returns {string} The name of the measure, which is identical to the name
 *          of the measure raw value property in the entity type
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Measure.prototype.getName = function() { return ""; };

/**
 * Get the raw value property
 * 
 * @returns {object} The DataJS object representing the property holding the
 *          raw value of this measure
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Measure.prototype.getRawValueProperty = function() { return new Object(); };

/**
 * Get the unit property related to this measure
 * 
 * @returns {object} The DataJS object representing the unit property or
 *          null if this measure does not have a unit
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Measure.prototype.getUnitProperty = function() { return new Object(); };

/**
 * Get indicator whether or not the measure is updatable
 * 
 * @returns {boolean} True iff the measure is updatable
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Measure.prototype.isUpdatable = function() { return false; };


// ---- sap.ui.model.analytics.odata4analytics.Model --------------------------------------------------------------------------

/**
 * Create a representation of the analytical semantics of OData service metadata
 * 
 * @param {object}
 *            oModelReference An instance of ReferenceByURI, ReferenceByModel or
 *            ReferenceWithWorkaround for locating the OData service.
 * @param {object}
 * 	          [mParameter] Additional parameters for controlling the model construction. Currently supported are:
 *            <li> sAnnotationJSONDoc - A JSON document providing extra annotations to the elements of the
 *                 structure of the given service
 *            </li>
 *            <li> modelVersion - Parameter to define which ODataModel version should be used, in you use
 *                 'odata4analytics.Model.ReferenceByURI': 1 (default), 2
 *                 see also: AnalyticalVersionInfo constants
 *            </li>
 * @constructor
 * 
 * @class Representation of an OData model with analytical annotations defined
 *        by OData4SAP.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model = function(oModelReference,mParameter) {};
/**
 * Find analytic query result by name
 * 
 * @param {string}
 *            sName Fully qualified name of query result entity set
 * @returns {sap.ui.model.analytics.odata4analytics.QueryResult} The query result object
 *          with this name or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model.prototype.findQueryResultByName = function(sName) { return new sap.ui.model.analytics.odata4analytics.QueryResult(); };

/**
 * Get the names of all query results (entity sets) offered by the model
 * 
 * @returns {string[]} List of all query result names
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model.prototype.getAllQueryResultNames = function() { return new Array(); };

/**
 * Get all query results offered by the model
 * 
 * @returns {object} An object with individual JS properties for each query
 *          result included in the model. The JS object properties all are
 *          objects of type odata4analytics.QueryResult. The names
 *          of the JS object properties are given by the entity set names
 *          representing the query results.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model.prototype.getAllQueryResults = function() { return new Object(); };

/**
 * Get underlying OData model provided by SAP UI5
 * 
 * @returns {object} The SAP UI5 representation of the model.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model.prototype.getODataModel = function() { return new Object(); };


// ---- sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel --------------------------------------------------------------------------

/**
 * Create a reference to an OData model already loaded elsewhere with the help
 * of SAP UI5.
 * 
 * @param {object}
 *            oModel holding the OData model.
 * @constructor
 * 
 * @class Handle to an already instantiated SAP UI5 OData model.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel = function(oModel) {};

// ---- sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI --------------------------------------------------------------------------

/**
 * Create a reference to an OData model by the URI of the related OData service.
 * 
 * @param {string}
 *            sURI holding the URI.
 * @constructor
 * 
 * @class Handle to an OData model by the URI pointing to it.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI = function(sURI) {};

// ---- sap.ui.model.analytics.odata4analytics.Model.ReferenceWithWorkaround --------------------------------------------------------------------------

/**
 * Create a reference to an OData model having certain workarounds activated. A
 * workaround is an implementation that changes the standard behavior of the API
 * to overcome some gap or limitation in the OData provider. The workaround
 * implementation can be conditionally activated by passing the identifier in
 * the constructor.
 * 
 * Known workaround identifiers are:
 * 
 * <li>"CreateLabelsFromTechnicalNames" - If a property has no label text, it
 * gets generated from the property name.</li>
 * 
 * <li>"IdentifyTextPropertiesByName" -If a dimension property has no text and
 * another property with the same name and an appended "Name", "Text" etc.
 * exists, they are linked via annotation.</li>
 * 
 * 
 * @param {object}
 *            oModel holding a reference to the OData model, obtained
 *            by odata4analytics.Model.ReferenceByModel or by
 *            sap.odata4analytics.Model.ReferenceByURI.
 * @param {string[]}
 *            aWorkaroundID listing all workarounds to be applied.
 * @constructor
 * 
 * @class Handle to an already instantiated SAP UI5 OData model.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Model.ReferenceWithWorkaround = function(oModel,aWorkaroundID) {};

// ---- sap.ui.model.analytics.odata4analytics.Parameter --------------------------------------------------------------------------

/**
 * Create a representation of a single parameter contained in a parameterization. Do not create your own instances.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.Parameterization}
 *            oParameterization The parameterization containing this parameter
 * @param {object}
 *            oProperty The DataJS object object representing the text property
 * 
 * @constructor
 * 
 * @class Representation of a property annotated with sap:parameter.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter = function(oParameterization,oProperty) {};
/**
 * Get parameterization containing this parameter
 * 
 * @return {sap.ui.model.analytics.odata4analytics.Parameterization} The parameterization
 *         object
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.getContainingParameterization = function() { return new sap.ui.model.analytics.odata4analytics.Parameterization(); };

/**
 * Get label
 * 
 * @returns {string} The (possibly language-dependent) label text for this
 *          parameter
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.getLabelText = function() { return ""; };

/**
 * Get the name of the parameter
 * 
 * @returns {string} The name of the parameter, which is identical with the
 *          name of the property representing the parameter in the
 *          parameterization entity type
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.getName = function() { return ""; };

/**
 * Get property for the parameter representing the peer boundary of the same
 * interval
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.Parameter} The parameter representing
 *          the peer boundary of the same interval. This means that if
 *          *this* parameter is a lower boundary, the returned object
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.getPeerIntervalBoundaryParameter = function() { return new sap.ui.model.analytics.odata4analytics.Parameter(); };

/**
 * Get property
 * 
 * @returns {object} The DataJS object representing the property of this
 *          parameter
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.getProperty = function() { return new Object(); };

/**
 * Get text property related to this parameter
 * 
 * @returns {object} The DataJS object representing the text property or
 *          null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.getTextProperty = function() { return new Object(); };

/**
 * Get the URI to locate the entity set holding the value set, if it is
 * available.
 * 
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @returns The resource path of the URI pointing to the entity set. It is a
 *          relative URI unless a service root is given, which would then
 *          prefixed in order to return a complete URL.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.getURIToValueEntitySet = function(sServiceRootURI) {  };

/**
 * Get indicator if the parameter represents an interval boundary
 * 
 * @returns {boolean} True iff it represents an interval boundary, otherwise
 *          false
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.isIntervalBoundary = function() { return false; };

/**
 * Get indicator if the parameter represents the lower boundary of an
 * interval
 * 
 * @returns {boolean} True iff it represents the lower boundary of an
 *          interval, otherwise false
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.isLowerIntervalBoundary = function() { return false; };

/**
 * Get indicator whether or not the parameter is optional
 * 
 * @returns {boolean} True iff the parameter is optional
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.isOptional = function() { return false; };

/**
 * Get indicator if a set of values is available for this parameter.
 * Typically, this is true for parameters with a finite set of known values
 * such as products, business partners in different roles, organization
 * units, and false for integer or date parameters
 * 
 * @returns {boolean} True iff a value set is available, otherwise false
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameter.prototype.isValueSetAvailable = function() { return false; };


// ---- sap.ui.model.analytics.odata4analytics.Parameterization --------------------------------------------------------------------------

/**
 * Create a representation of a parameterization for an analytic query. Do not create your own instances.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.EntityType}
 *            oEntityType The OData entity type for this parameterization
 * @param {sap.ui.model.analytics.odata4analytics.EntitySet}
 *            oEntitySet The OData entity set for this parameterization offered
 *            by the OData service
 * 
 * @class Representation of an entity type annotated with
 *        sap:semantics="parameters".
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization = function(oEntityType,oEntitySet) {};
/**
 * Find parameter by name
 * 
 * @param {string}
 *            sName Parameter name
 * @returns {sap.ui.model.analytics.odata4analytics.Parameter} The parameter object with
 *          this name or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization.prototype.findParameterByName = function(sName) { return new sap.ui.model.analytics.odata4analytics.Parameter(); };

/**
 * Get the names of all parameters part of the parameterization
 * 
 * @returns {string[]} List of all parameter names
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization.prototype.getAllParameterNames = function() { return new Array(); };

/**
 * Get all parameters included in this parameterization
 * 
 * @returns {object} An object with individual JS properties for each
 *          parameter included in the query result. The JS object properties
 *          all are objects of type odata4analytics.Parameter. The
 *          names of the JS object properties are given by the OData entity
 *          type property names representing the parameter keys.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization.prototype.getAllParameters = function() { return new Object(); };

/**
 * Get the entity set representing this query result in the OData model
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.EntitySet} The OData entity set
 *          representing this query result
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization.prototype.getEntitySet = function() { return new sap.ui.model.analytics.odata4analytics.EntitySet(); };

/**
 * Get the entity type defining the type of this query result in the OData
 * model
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.EntityType} The OData entity type for
 *          this query result
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization.prototype.getEntityType = function() { return new sap.ui.model.analytics.odata4analytics.EntityType(); };

/**
 * Get the name of the parameter
 * 
 * @returns {string} The name of the parameterization, which is identical
 *          with the name of the entity set representing the
 *          parameterization in the OData service
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization.prototype.getName = function() { return ""; };

/**
 * Get navigation property to query result
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.QueryResult} The parameter object with
 *          this name or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.Parameterization.prototype.getNavigationPropertyToQueryResult = function() { return new sap.ui.model.analytics.odata4analytics.QueryResult(); };


// ---- sap.ui.model.analytics.odata4analytics.ParameterizationRequest --------------------------------------------------------------------------

/**
 * Create a request object for interaction with a query parameterization.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.Parameterization}
 *            oParameterization Description of a query parameterization
 * 
 * @constructor
 * 
 * @class Creation of URIs for query parameterizations.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterizationRequest = function(oParameterization) {};
/**
 * Get the description of the parameterization on which this request
 * operates on
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.Parameterization} Description of a
 *          query parameterization
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterizationRequest.prototype.getParameterization = function() { return new sap.ui.model.analytics.odata4analytics.Parameterization(); };

/**
 * Get the URI to locate the entity set for the query parameterization.
 * 
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @returns The resource path of the URI pointing to the entity set. It is a
 *          relative URI unless a service root is given, which would then
 *          prefixed in order to return a complete URL.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterizationRequest.prototype.getURIToParameterizationEntitySet = function(sServiceRootURI) {  };

/**
 * Get the URI to locate the parameterization entity for the values assigned
 * to all parameters beforehand. Notice that a value must be supplied for
 * every parameter including those marked as optional. For optional
 * parameters, assign the special value that the service provider uses as an
 * "omitted" value. For example, for services based on BW Easy Queries, this
 * would be an empty string.
 * 
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @returns The resource path of the URI pointing to the entity set. It is a
 *          relative URI unless a service root is given, which would then
 *          prefixed in order to return a complete URL.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterizationRequest.prototype.getURIToParameterizationEntry = function(sServiceRootURI) {  };

/**
 * Assign a value to a parameter
 * 
 * @param {String}
 *            sParameterName Name of the parameter. In case of a range
 *            value, provide the name of the lower boundary parameter.
 * @param {String}
 *            sValue Assigned value. Pass null to remove a value assignment.
 * @param {String}
 *            sToValue Omit it or set it to null for single values. If set,
 *            it will be assigned to the upper boundary parameter
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterizationRequest.prototype.setParameterValue = function(sParameterName,sValue,sToValue) {  };


// ---- sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest --------------------------------------------------------------------------

/**
 * Create a request object for interaction with a query parameter value help.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.Parameter}
 *            oParameter Description of a query parameter
 * 
 * @constructor
 * 
 * @class Creation of URIs for fetching a query parameter value set.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest = function(oParameter) {};
/**
 * Get the filter expression for this request.
 * 
 * Expressions are represented by separate objects. If none exists so far, a
 * new expression object gets created.
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.FilterExpression} The filter object
 *          associated to this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest.prototype.getFilterExpression = function() { return new sap.ui.model.analytics.odata4analytics.FilterExpression(); };

/**
 * Get the sort expression for this request.
 * 
 * Expressions are represented by separate objects. If none exists so far, a
 * new expression object gets created.
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.SortExpression} The sort object
 *          associated to this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest.prototype.getSortExpression = function() { return new sap.ui.model.analytics.odata4analytics.SortExpression(); };

/**
 * Get the value of a query option for the OData request URI corresponding
 * to this request.
 * 
 * @param {String}
 *            sQueryOptionName Identifies the query option: $select,
 *            $filter,... or any custom query option
 * 
 * @returns {String} The value of the requested query option or null, if
 *          this option is not used for the OData request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest.prototype.getURIQueryOptionValue = function(sQueryOptionName) { return null; };

/**
 * Get the unescaped URI to fetch the parameter value set.
 * 
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @returns {String} The unescaped URI that contains the OData resource path
 *          and OData system query options to express the request for the
 *          parameter value set..
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest.prototype.getURIToParameterValueSetEntries = function(sServiceRootURI) { return null; };

/**
 * Specify which components of the parameter shall be included in the value
 * set.
 * 
 * @param bIncludeText
 *            Indicator whether or not to include the parameter text (if
 *            available) in the value set. Pass null to keep current
 *            setting.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest.prototype.includeParameterText = function(bIncludeText) {  };

/**
 * Set the filter expression for this request.
 * 
 * Expressions are represented by separate objects. Calling this method
 * replaces the filter object maintained by this request.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.FilterExpression}
 *            oFilter The filter object to be associated with this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest.prototype.setFilterExpression = function(oFilter) {  };

/**
 * Set the sort expression for this request.
 * 
 * Expressions are represented by separate objects. Calling this method
 * replaces the sort object maintained by this request.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.SortExpression}
 *            oSorter The sort object to be associated with this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest.prototype.setSortExpression = function(oSorter) {  };


// ---- sap.ui.model.analytics.odata4analytics.QueryResult --------------------------------------------------------------------------

/**
 * Create a representation of an analytic query. Do not create your own instances.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.Model}
 *            oModel The analytical model containing this query result entity
 *            set
 * @param {sap.ui.model.analytics.odata4analytics.EntityType}
 *            oEntityType The OData entity type for this query
 * @param {sap.ui.model.analytics.odata4analytics.EntitySet}
 *            oEntitySet The OData entity set for this query offered by the
 *            OData service
 * @param {sap.ui.model.analytics.odata4analytics.Parameterization}
 *            oParameterization The parameterization of this query, if any
 * 
 * @constructor
 * @this (QueryResult)
 * 
 * @class Representation of an entity type annotated with
 *        sap:semantics="aggregate".
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult = function(oModel,oEntityType,oEntitySet,oParameterization) {};
/**
 * Find dimension by name
 * 
 * @param {string}
 *            sName Dimension name
 * @returns {sap.ui.model.analytics.odata4analytics.Dimension} The dimension object with
 *          this name or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.findDimensionByName = function(sName) { return new sap.ui.model.analytics.odata4analytics.Dimension(); };

/**
 * Find dimension by property name
 * 
 * @param {string}
 *            sName Property name
 * @returns {sap.ui.model.analytics.odata4analytics.Dimension} The dimension object to
 *          which the given property name is related, because the property
 *          holds the dimension key, its text, or is an attribute of this
 *          dimension. If no such dimension exists, null is returned.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.findDimensionByPropertyName = function(sName) { return new sap.ui.model.analytics.odata4analytics.Dimension(); };

/**
 * Find measure by name
 * 
 * @param {string}
 *            sName Measure name
 * @returns {sap.ui.model.analytics.odata4analytics.Measure} The measure object with this
 *          name or null if it does not exist
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.findMeasureByName = function(sName) { return new sap.ui.model.analytics.odata4analytics.Measure(); };

/**
 * Find measure by property name
 * 
 * @param {string}
 *            sName Property name
 * @returns {sap.ui.model.analytics.odata4analytics.Measure} The measure object to which
 *          the given property name is related, because the property holds
 *          the raw measure value or its formatted value. If no such measure
 *          exists, null is returned.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.findMeasureByPropertyName = function(sName) { return new sap.ui.model.analytics.odata4analytics.Measure(); };

/**
 * Get the names of all dimensions included in the query result
 * 
 * @returns {string[]} List of all dimension names
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getAllDimensionNames = function() { return new Array(); };

/**
 * Get all dimensions included in this query result
 * 
 * @returns {object} An object with individual JS properties for each
 *          dimension included in the query result. The JS object properties
 *          all are objects of type odata4analytics.Dimension. The
 *          names of the JS object properties are given by the OData entity
 *          type property names representing the dimension keys.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getAllDimensions = function() { return new Object(); };

/**
 * Get the names of all measures included in the query result
 * 
 * @returns {string[]} List of all measure names
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getAllMeasureNames = function() { return new Array(); };

/**
 * Get all measures included in this query result
 * 
 * @returns {object} An object with individual JS properties for each
 *          measure included in the query result. The JS object properties
 *          all are objects of type odata4analytics.Measure. The
 *          names of the JS object properties are given by the OData entity
 *          type property names representing the measure raw values.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getAllMeasures = function() { return new Object(); };

/**
 * Get the entity set representing this query result in the OData model
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.EntitySet} The OData entity set
 *          representing this query result
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getEntitySet = function() { return new sap.ui.model.analytics.odata4analytics.EntitySet(); };

/**
 * Get the entity type defining the type of this query result in the OData
 * model
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.EntityType} The OData entity type for
 *          this query result
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getEntityType = function() { return new sap.ui.model.analytics.odata4analytics.EntityType(); };

/**
 * Get the analytical model containing the entity set for this query result
 * 
 * @returns {object} The analytical representation of the OData model
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getModel = function() { return new Object(); };

/**
 * Get the name of the query result
 * 
 * @returns {string} The fully qualified name of the query result, which is
 *          identical with the name of the entity set representing the query
 *          result in the OData service
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getName = function() { return ""; };

/**
 * Get the parameterization of this query result
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.Parameterization} The object for the
 *          parameterization or null if the query result is not
 *          parameterized
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getParameterization = function() { return new sap.ui.model.analytics.odata4analytics.Parameterization(); };

/**
 * Get property holding the totaled property list
 * 
 * @returns {object} The DataJS object representing this property
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResult.prototype.getTotaledPropertiesListProperty = function() { return new Object(); };


// ---- sap.ui.model.analytics.odata4analytics.QueryResultRequest --------------------------------------------------------------------------

/**
 * Create a request object for interaction with a query result.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.QueryResult}
 *            oQueryResult Description of a query parameterization
 * @param {sap.ui.model.analytics.odata4analytics.ParameterizationRequest}
 *            [oParameterizationRequest] Request object for
 *            interactions with the parameterization of this query. Only
 *            required if the query service includes parameters.
 * 
 * @constructor
 * 
 * @class Creation of URIs for fetching query results.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest = function(oQueryResult,oParameterizationRequest) {};
/**
 * Add one or more dimensions to the aggregation level
 * 
 * @param aDimensionName
 *            Array of dimension names to be added to the already defined
 *            aggregation level.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.addToAggregationLevel = function(aDimensionName) {  };

/**
 * Get the names of the dimensions included in the aggregation level
 * 
 * @returns {Array} The dimension names included in the aggregation level
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getAggregationLevel = function() { return null; };

/**
 * Get details about a dimensions included in the aggregation level
 * 
 * @param sDImensionName
 *            Name of a dimension included in the aggregation level of this
 *            request, for which details shall be returned
 * 
 * @returns {object} An object with three properties named key and text,
 *          both with Boolean values indicating whether the key and text of
 *          this dimension are included in this request. The third property
 *          named attributes is an array of attribute names of this
 *          dimension included in this request, or null, if there are none.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getAggregationLevelDetails = function(sDImensionName) { return new Object(); };

/**
 * Get the filter expression for this request.
 * 
 * Expressions are represented by separate objects. If none exists so far, a
 * new expression object gets created.
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.FilterExpression} The filter object
 *          associated to this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getFilterExpression = function() { return new sap.ui.model.analytics.odata4analytics.FilterExpression(); };

/**
 * Get the names of the measures included in the query result request
 * 
 * @returns {Array} The measure names included in the query result request
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getMeasureNames = function() { return null; };

/**
 * Retrieves the current parametrization request
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.ParameterizationRequest}
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getParameterizationRequest = function() { return new sap.ui.model.analytics.odata4analytics.ParameterizationRequest(); };

/**
 * Get the description of the query result on which this request operates on
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.QueryResult} Description of a query
 *          result
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getQueryResult = function() { return new sap.ui.model.analytics.odata4analytics.QueryResult(); };

/**
 * Returns the current page boundaries as object with properties
 * <code>start</code> and <code>end</code>. If the end of the page is
 * unbounded, <code>end</code> is null.
 * 
 * @returns {Object} the current page boundaries as object
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getResultPageBoundaries = function() { return null; };

/**
 * Get the sort expression for this request.
 * 
 * Expressions are represented by separate objects. If none exists so far, a
 * new expression object gets created.
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.SortExpression} The sort object
 *          associated to this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getSortExpression = function() { return new sap.ui.model.analytics.odata4analytics.SortExpression(); };

/**
 * Get the value of a query option for the OData request URI corresponding
 * to this request.
 * 
 * @param {String}
 *            sQueryOptionName Identifies the query option: $select,
 *            $filter,$orderby ... or any custom query option
 * 
 * @returns {String} The value of the requested query option or null, if
 *          this option is not used for the OData request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getURIQueryOptionValue = function(sQueryOptionName) { return null; };

/**
 * Get the URI to locate the entity set for the query result.
 * 
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * 
 * @returns {String} The resource path of the URI pointing to the entity
 *          set. It is a relative URI unless a service root is given, which
 *          would then prefixed in order to return a complete URL.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getURIToQueryResultEntitySet = function(sServiceRootURI) { return null; };

/**
 * Get the unescaped URI to fetch the query result.
 * 
 * @param {String}
 *            sServiceRootURI (optional) Identifies the root of the OData
 *            service
 * @param {String}
 *            sResourcePath (optional) OData resource path to be considered.
 *            If provided, it overwrites any parameterization object that
 *            might have been specified separately.
 * 
 * @returns {String} The unescaped URI that contains the OData resource path
 *          and OData system query options to express the aggregation level,
 *          filter expression and further options.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.getURIToQueryResultEntries = function(sServiceRootURI,sResourcePath) { return null; };

/**
 * Specify which dimension components shall be included in the query result.
 * The settings get applied to the currently defined aggregation level.
 * 
 * @param sDimensionName
 *            Name of the dimension for which the settings get applied.
 *            Specify null to apply the settings to all dimensions in the
 *            aggregation level.
 * @param bIncludeKey
 *            Indicator whether or not to include the dimension key in the
 *            query result. Pass null to keep current setting.
 * @param bIncludeText
 *            Indicator whether or not to include the dimension text (if
 *            available) in the query result. Pass null to keep current
 *            setting.
 * @param aAttributeName
 *            Array of dimension attribute names to be included in the
 *            result. Pass null to keep current setting. This argument is
 *            ignored if sDimensionName is null.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.includeDimensionKeyTextAttributes = function(sDimensionName,bIncludeKey,bIncludeText,aAttributeName) {  };

/**
 * Specify which measure components shall be included in the query result.
 * The settings get applied to the currently set measures.
 * 
 * @param sMeasureName
 *            Name of the measure for which the settings get applied.
 *            Specify null to apply the settings to all currently set
 *            measures.
 * @param bIncludeRawValue
 *            Indicator whether or not to include the raw value in the query
 *            result. Pass null to keep current setting.
 * @param bIncludeFormattedValue
 *            Indicator whether or not to include the formatted value (if
 *            available) in the query result. Pass null to keep current
 *            setting.
 * @param bIncludeUnit
 *            Indicator whether or not to include the unit (if available) in
 *            the query result. Pass null to keep current setting.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.includeMeasureRawFormattedValueUnit = function(sMeasureName,bIncludeRawValue,bIncludeFormattedValue,bIncludeUnit) {  };

/**
 * Remove one or more dimensions from the aggregation level. The method also
 * removed a potential sort expression on the dimension.
 * 
 * @param aDimensionName
 *            Array of dimension names to be removed from the already
 *            defined aggregation level.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.removeFromAggregationLevel = function(aDimensionName) {  };

/**
 * Set the aggregation level for the query result request. By default, the
 * query result will include the properties holding the keys of the given
 * dimensions. This setting can be changed using
 * includeDimensionKeyTextAttributes.
 * 
 * @param aDimensionName
 *            Array of dimension names to be part of the aggregation level.
 *            If null, the aggregation level includes all dimensions, if
 *            empty, no dimension is included.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setAggregationLevel = function(aDimensionName) {  };

/**
 * Set the filter expression for this request.
 * 
 * Expressions are represented by separate objects. Calling this method
 * replaces the filter object maintained by this request.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.FilterExpression}
 *            oFilter The filter object to be associated with this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setFilterExpression = function(oFilter) {  };

/**
 * Set the measures to be included in the query result request. By default,
 * the query result will include the properties holding the raw values of
 * the given measures. This setting can be changed using
 * includeMeasureRawFormattedValueUnit.
 * 
 * @param aMeasureName
 *            Array of measure names to be part of the query result request.
 *            If null, the request includes all measures, if empty, no
 *            measure is included.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setMeasures = function(aMeasureName) {  };

/**
 * Set the parameterization request required for interactions with the query
 * result of parameterized queries. This method provides an alternative way
 * to assign a parameterization request to a query result request.
 * 
 * @param oParameterizationRequest
 *            Request object for interactions with the parameterization of
 *            this query
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setParameterizationRequest = function(oParameterizationRequest) {  };

/**
 * Set further options to be applied for the OData request to fetch the
 * query result
 * 
 * @param {Boolean}
 *            bIncludeEntityKey Indicates whether or not the entity key
 *            should be returned for every entry in the query result.
 *            Default is not to include it. Pass null to keep current
 *            setting.
 * @param {Boolean}
 *            bIncludeCount Indicates whether or not the result shall
 *            include a count for the returned entities. Default is not to
 *            include it. Pass null to keep current setting.
 * @param {Boolean}
 *            bReturnNoEntities Indicates whether or not the result shall
 *            be empty. This will translate to $top=0 in the OData request and override
 *            any setting done with setResultPageBoundaries. The default is not to
 *            suppress entities in the result. Pass null to keep current setting.
 *            The main use case for this option is to create a request
 *            with $inlinecount returning an entity count.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setRequestOptions = function(bIncludeEntityKey,bIncludeCount,bReturnNoEntities) {  };

/**
 * Set the resource path to be considered for the OData request URI of this
 * query request object. This method provides an alternative way to assign a
 * path comprising a parameterization. If a path is provided, it overwrites
 * any parameterization object that might have been specified separately.
 * 
 * @param sResourcePath
 *            Resource path pointing to the entity set of the query result.
 *            Must include a valid parameterization if query contains
 *            parameters.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setResourcePath = function(sResourcePath) {  };

/**
 * Specify that only a page of the query result shall be returned. A page is
 * described by its boundaries, that are row numbers for the first and last
 * rows in the query result to be returned.
 * 
 * @param {Number}
 *            start The first row of the query result to be returned.
 *            Numbering starts at 1. Passing null is equivalent to start
 *            with the first row.
 * @param {Number}
 *            end The last row of the query result to be returned. Passing
 *            null is equivalent to get all rows up to the end of the query
 *            result.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setResultPageBoundaries = function(start,end) {  };

/**
 * Set the sort expression for this request.
 * 
 * Expressions are represented by separate objects. Calling this method
 * replaces the sort object maintained by this request.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.SortExpression}
 *            oSorter The sort object to be associated with this request.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.QueryResultRequest.prototype.setSortExpression = function(oSorter) {  };


// ---- sap.ui.model.analytics.odata4analytics.RecursiveHierarchy --------------------------------------------------------------------------

/**
 * Create a representation of a recursive hierarchy defined on one multiple
 * properties in an OData entity type query. Do not create your own instances.
 * 
 * @param {sap.ui.model.analytics.odata4analytics.EntityType}
 *            oEntityType object for the entity type
 * @param {object}
 *            oNodeIDProperty DataJS object for the property holding the
 *            hierarchy node ID identifying the hierarchy node to which the
 *            OData entry belongs
 * @param {object}
 *            oParentNodeIDProperty DataJS object for the property holding the
 *            node ID of the parent of the hierarchy node pointed to by the
 *            value of oNodeIDProperty
 * @param {object}
 *            oNodeLevelProperty DataJS object for the property holding the
 *            level number for the of the hierarchy node pointed to by the value
 *            of oNodeIDProperty
 * @param {object}
 *            oNodeValueProperty DataJS object for the property holding the data
 *            value for the of the hierarchy node pointed to by the value of
 *            oNodeIDProperty
 * 
 * @constructor
 * 
 * @class Representation of a recursive hierarchy.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.RecursiveHierarchy = function(oEntityType,oNodeIDProperty,oParentNodeIDProperty,oNodeLevelProperty,oNodeValueProperty) {};
/**
 * Get the property holding the node ID of the hierarchy node
 * 
 * @returns {object} The DataJS object representing this property
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.RecursiveHierarchy.prototype.getNodeIDProperty = function() { return new Object(); };

/**
 * Get the property holding the level of the hierarchy node
 * 
 * @returns {object} The DataJS object representing this property
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.RecursiveHierarchy.prototype.getNodeLevelProperty = function() { return new Object(); };

/**
 * Get the property holding the value that is structurally organized by the
 * hierarchy
 * 
 * @returns {object} The DataJS object representing this property
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.RecursiveHierarchy.prototype.getNodeValueProperty = function() { return new Object(); };

/**
 * Get the property holding the parent node ID of the hierarchy node
 * 
 * @returns {object} The DataJS object representing this property
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.RecursiveHierarchy.prototype.getParentNodeIDProperty = function() { return new Object(); };

/**
 * Get indicator if this is a leveled hierarchy
 * 
 * @returns {boolean} False
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.RecursiveHierarchy.prototype.isLeveledHierarchy = function() { return false; };

/**
 * Get indicator if this is a recursive hierarchy
 * 
 * @returns {boolean} True
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.RecursiveHierarchy.prototype.isRecursiveHierarchy = function() { return false; };


// ---- sap.ui.model.analytics.odata4analytics.SortExpression --------------------------------------------------------------------------

/**
 * Create a representation of an order by expression for a given entity type. It
 * can be rendered as value for the $orderby system query option.
 * 
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {sap.ui.model.analytics.odata4analytics.EntityType}
 *            oEntityType object for the entity type
 * 
 * @constructor
 * 
 * @class Representation of a $orderby expression for an OData entity type.
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression = function(oModel,oSchema,oEntityType) {};
/**
 * Add a condition to the order by expression. It replaces any previously specified
 * sort order for the property.
 * 
 * @param {string}
 *            sPropertyName The name of the property bound in the condition
 * @param {sap.ui.model.analytics.odata4analytics.SortOrder}
 *            sSortOrder sorting order used for the condition
 * @throws Exception
 *             if the property is unknown, not sortable or already added as
 *             sorter
 * @returns {sap.ui.model.analytics.odata4analytics.SortExpression} This object for method
 *          chaining
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression.prototype.addSorter = function(sPropertyName,sSortOrder) { return new sap.ui.model.analytics.odata4analytics.SortExpression(); };

/**
 * Clear expression from any sort conditions that may have been set
 * previously
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression.prototype.clear = function() {  };

/**
 * Get description for this entity type
 * 
 * @returns {sap.ui.model.analytics.odata4analytics.EntityType} The object representing the
 *          entity type
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression.prototype.getEntityType = function() { return new sap.ui.model.analytics.odata4analytics.EntityType(); };

/**
 * Get the first SAPUI5 Sorter object.
 * 
 * @returns {sap.ui.model.Sorter} first sorter object or null if empty
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression.prototype.getExpressionAsUI5Sorter = function() { return new sap.ui.model.Sorter(); };

/**
 * Get an array of SAPUI5 Sorter objects corresponding to this expression.
 * 
 * @returns {sap.ui.model.Sorter[]} List of sorter objects representing
 *          this expression
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression.prototype.getExpressionsAsUI5SorterArray = function() { return new Array(); };

/**
 * Get the value for the OData system query option $orderby corresponding to
 * this expression.
 * 
 * @param {object} oSelectedPropertyNames Object with properties requested for $select
 * 
 * @returns {string} The $orderby value for the sort expressions
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression.prototype.getURIOrderByOptionValue = function(oSelectedPropertyNames) { return ""; };

/**
 * Removes the order by expression for the given property name from the list
 * of order by expression. If no order by expression with this property name
 * exists the method does nothing.
 * 
 * @param {string}
 *            sPropertyName The name of the property to be removed from the
 *            condition
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortExpression.prototype.removeSorter = function(sPropertyName) {  };


// ---- sap.ui.model.analytics.odata4analytics.SortOrder --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.analytics.odata4analytics.SortOrder.toString = function() { return ""; };

// ---- sap.ui.model.Binding --------------------------------------------------------------------------

/**
 * Constructor for Binding class.
 * 
 * 
 * @class
 * The Binding is the object, which holds the necessary information for a data binding,
 * like the binding path and the binding context, and acts like an interface to the
 * model for the control, so it is the event provider for changes in the data model
 * and provides getters for accessing properties or lists.
 * 
 * @param {sap.ui.model.Model} oModel the model
 * @param {String} sPath the path
 * @param {sap.ui.model.Context} oContext the context object
 * @param {object} [mParameters]
 * @abstract
 * @public
 * @extends sap.ui.base.EventProvider
 * 
 */
sap.ui.model.Binding = function(oModel,sPath,oContext,mParameters) {};
/**
 * The 'change' event is fired, when the data of the Binding is changed from the model. The reason parameter of the event provides a hint where the change came from.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} [oEvent.getParameters.reason] A string stating the reason for the data change. Can be any string and new values can be added in the future.
 * @public
 * 
 */
sap.ui.model.Binding.prototype.change = function(oEvent) {  };

/**
 * The 'dataReceived' event is fired, when data was received from a backend. This event may also be fired when an error occured.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} [oEvent.getParameters.data] The data received. In error cases it will be undefined.
 * @public
 * 
 */
sap.ui.model.Binding.prototype.dataReceived = function(oEvent) {  };

/**
 * The 'dataRequested' event is fired, when data was requested from a backend.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @public
 * 
 */
sap.ui.model.Binding.prototype.dataRequested = function(oEvent) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'AggregatedDataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.attachAggregatedDataStateChange = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.model.Model</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @public
 * 
 */
sap.ui.model.Binding.prototype.attachChange = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'dataReceived' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @public
 * 
 */
sap.ui.model.Binding.prototype.attachDataReceived = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'dataRequested' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @public
 * 
 */
sap.ui.model.Binding.prototype.attachDataRequested = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'DataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.attachDataStateChange = function(fnFunction,oListener) {  };

/**
 * Attach multiple events.
 * 
 * @param {object} oEvents
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.attachEvents = function(oEvents) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'refresh' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.attachRefresh = function(fnFunction,oListener) {  };

/**
 * Removes all control messages for this binding from the MessageManager in addition to the standard clean-up tasks.
 * @see sap.ui.base.EventProvider#destroy
 * 
 * @public
 * 
 */
sap.ui.model.Binding.prototype.destroy = function() {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'AggregatedDataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.detachAggregatedDataStateChange = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.model.Model</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @public
 * 
 */
sap.ui.model.Binding.prototype.detachChange = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'dataReceived' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @public
 * 
 */
sap.ui.model.Binding.prototype.detachDataReceived = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'dataRequested' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @public
 * 
 */
sap.ui.model.Binding.prototype.detachDataRequested = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'DataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.detachDataStateChange = function(fnFunction,oListener) {  };

/**
 * Detach multiple events-
 * 
 * @param {object} oEvents
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.detachEvents = function(oEvents) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'refresh' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.detachRefresh = function(fnFunction,oListener) {  };

/**
 * Creates a new subclass of class sap.ui.model.Binding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.Binding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event dataReceived to attached listeners. This event may also be fired when an error occured.
 * @param {Map} mArguments the arguments to pass along with the event.
 * @param {object} [mArguments.data] the data received. In error cases it will be undefined.
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.fireDataReceived = function(mArguments) {  };

/**
 * Fire event dataRequested to attached listeners.
 * @param {Map} mArguments the arguments to pass along with the event.
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.fireDataRequested = function(mArguments) {  };

/**
 * Returns a metadata object for class sap.ui.model.Binding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.Binding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Initialize the binding. The message should be called when creating a binding.
 * The default implementation calls checkUpdate(true).
 * 
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.initialize = function() {  };

/**
 * Returns whether the binding is initial, which means it did not get an initial value yet
 * @return {boolean} whether binding is initial
 * @public
 * 
 */
sap.ui.model.Binding.prototype.isInitial = function() { return false; };

/**
 * Returns whether the binding is relative, which means it did not start with a /
 * @return {boolean} whether binding is relative
 * @public
 * 
 */
sap.ui.model.Binding.prototype.isRelative = function() { return false; };

/**
 * Returns true if the binding is suspended or false if not.
 * 
 * @return {boolean} whether binding is suspended
 * @public
 * 
 */
sap.ui.model.Binding.prototype.isSuspended = function() { return false; };

/**
 * Refreshes the binding, check whether the model data has been changed and fire change event
 * if this is the case. For server side models this should refetch the data from the server.
 * To update a control, even if no data has been changed, e.g. to reset a control after failed
 * validation, please use the parameter bForceUpdate.
 * 
 * @param {boolean} bForceUpdate Update the bound control even if no data has been changed
 * 
 * @public
 * 
 */
sap.ui.model.Binding.prototype.refresh = function(bForceUpdate) {  };

/**
 * Resumes the binding update. Change events will be fired again.
 * 
 * When the binding is resumed, a change event will be fired immediately, if the data has changed while the binding
 * was suspended. For serverside models, a request to the server will be triggered, if a refresh was requested
 * while the binding was suspended.
 * @public
 * 
 */
sap.ui.model.Binding.prototype.resume = function() {  };

/**
 * Suspends the binding update. No change events will be fired.
 * 
 * A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode.
 * Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings)
 * will also update and cause a change event although the binding is suspended.
 * @public
 * 
 */
sap.ui.model.Binding.prototype.suspend = function() {  };

/**
 * Determines if the binding should be updated by comparing the current model against a specified model.
 * @param {object} oModel The model instance to compare against
 * @returns {boolean} true if this binding should be updated
 * @protected
 * 
 */
sap.ui.model.Binding.prototype.updateRequired = function(oModel) { return false; };


// ---- sap.ui.model.BindingMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.BindingMode.toString = function() { return ""; };

// ---- sap.ui.model.ChangeReason --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.ChangeReason.toString = function() { return ""; };

// ---- sap.ui.model.ClientContextBinding --------------------------------------------------------------------------

/**
 * Constructor for ClientContextBinding
 * 
 * 
 * @class
 * The ContextBinding is a specific binding for a setting context for the model
 * 
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {Object} oContext
 * @param {Object} [mParameters]
 * @abstract
 * @public
 * @extends sap.ui.model.ContextBinding
 * 
 */
sap.ui.model.ClientContextBinding = function(oModel,sPath,oContext,mParameters) {};
/**
 * Creates a new subclass of class sap.ui.model.ClientContextBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.ClientContextBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.ClientContextBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.ClientContextBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.ClientModel --------------------------------------------------------------------------

/**
 * Constructor for a new ClientModel.
 * 
 * 
 * @class Model implementation for Client models
 * @abstract
 * @extends sap.ui.model.Model
 * @version 1.48.4
 * 
 * @param {object} oData URL where to load the data from
 * @constructor
 * @public
 * 
 */
sap.ui.model.ClientModel = function(oData) {};
/**
 * @see sap.ui.model.Model.prototype.destroy
 * @public
 * 
 */
sap.ui.model.ClientModel.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.model.ClientModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.ClientModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Force no caching.
 * @param {boolean} [bForceNoCache=false] whether to force not to cache
 * @public
 * 
 */
sap.ui.model.ClientModel.prototype.forceNoCache = function(bForceNoCache) {  };

/**
 * Returns the current data of the model.
 * Be aware that the returned object is a reference to the model data so all changes to that data will also change the model data.
 * 
 * @return the data object
 * @public
 * 
 */
sap.ui.model.ClientModel.prototype.getData = function() {  };

/**
 * Returns a metadata object for class sap.ui.model.ClientModel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.ClientModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * update all bindings
 * @param {boolean} bForceUpdate true/false: Default = false. If set to false an update
 * 					will only be done when the value of a binding changed.
 * @public
 * 
 */
sap.ui.model.ClientModel.prototype.updateBindings = function(bForceUpdate) {  };


// ---- sap.ui.model.ClientTreeBindingAdapter --------------------------------------------------------------------------

/**
 * Adapter for TreeBindings to add the ListBinding functionality and use the
 * tree structure in list based controls.
 * @class
 * @experimental This module is only for experimental use!
 * @protected
 * 
 */
sap.ui.model.ClientTreeBindingAdapter = function() {};

// ---- sap.ui.model.CompositeBinding --------------------------------------------------------------------------

/**
 * Constructor for CompositeBinding
 * 
 * 
 * @class
 * The CompositeBinding is used to bundle multiple property bindings which are be used to provide a single binding against
 * these property bindings.
 * 
 * @public
 * @extends sap.ui.model.PropertyBinding
 * 
 */
sap.ui.model.CompositeBinding = function() {};
/**
 * Attach event-handler <code>fnFunction</code> to the 'AggregatedDataStateChange' event of this
 * <code>sap.ui.model.CompositeBinding</code>. The CombinedDataStateChange event is fired asynchronously, meaning
 * that the datastate object given as parameter of the event contains all changes that were applied to the datastate
 * in the running thread.
 * 
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.CompositeBinding.prototype.attachAggregatedDataStateChange = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the '_change' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.CompositeBinding.prototype.attachChange = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'DataStateChange' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.CompositeBinding.prototype.attachDataStateChange = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'AggregatedDataStateChange' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.CompositeBinding.prototype.detachAggregatedDataStateChange = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the '_change' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.CompositeBinding.prototype.detachChange = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'DataStateChange' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * 
 */
sap.ui.model.CompositeBinding.prototype.detachDataStateChange = function(fnFunction,oListener) {  };

/**
 * Creates a new subclass of class sap.ui.model.CompositeBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.CompositeBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the property bindings contained in this composite binding.
 * 
 * @return {array} the property bindings in this composite binding
 * 
 * @public
 * 
 */
sap.ui.model.CompositeBinding.prototype.getBindings = function() { return null; };

/**
 * Returns the current external value of the bound target which is formatted via a type or formatter function.
 * 
 * @return {object} the current value of the bound target
 * 
 * @throws sap.ui.model.FormatException
 * 
 * @public
 * 
 */
sap.ui.model.CompositeBinding.prototype.getExternalValue = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.ui.model.CompositeBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.CompositeBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the raw values of the property bindings in an array.
 * 
 * @return {object} the values of the internal property bindings in an array
 * 
 * @public
 * 
 */
sap.ui.model.CompositeBinding.prototype.getValue = function() { return new Object(); };

/**
 * Initialize the binding. The message should be called when creating a binding.
 * The default implementation calls checkUpdate(true).
 * Prevent checkUpdate to be triggered while initializing nestend bindings, it is
 * sufficient to call checkUpdate when all nested bindings are initialized.
 * 
 * @protected
 * 
 */
sap.ui.model.CompositeBinding.prototype.initialize = function() {  };

/**
 * Suspends the binding update. No change events will be fired.
 * 
 * A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode.
 * Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings)
 * will also update and cause a change event although the binding is suspended.
 * @public
 * 
 */
sap.ui.model.CompositeBinding.prototype.resume = function() {  };

/**
 * Sets the external value of a composite binding. If no CompositeType is assigned to the binding, the default
 * implementation assumes a space separated list of values. This will cause the setValue to be called for each
 * nested binding, except for undefined values in the array.
 * 
 * @param {object} oValue the value to set for this binding
 * 
 * @public
 * 
 */
sap.ui.model.CompositeBinding.prototype.setExternalValue = function(oValue) {  };

/**
 * Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly.
 * The internal type is the property type of the element which the value is formatted to.
 * 
 * @param {sap.ui.model.CompositeType} oType the type for the binding
 * @param {String} sInternalType the internal type of the element property which this binding is bound against.
 * 
 * @public
 * 
 */
sap.ui.model.CompositeBinding.prototype.setType = function(oType,sInternalType) {  };

/**
 * Sets the values. This will cause the setValue to be called for each nested binding, except
 * for undefined values in the array.
 * 
 * @param {array} aValues the values to set for this binding
 * 
 * @public
 * 
 */
sap.ui.model.CompositeBinding.prototype.setValue = function(aValues) {  };

/**
 * Suspends the binding update. No change events will be fired.
 * 
 * A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode.
 * Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings)
 * will also update and cause a change event although the binding is suspended.
 * @public
 * 
 */
sap.ui.model.CompositeBinding.prototype.suspend = function() {  };

/**
 * Determines if the property bindings in the composite binding should be updated by calling updateRequired on all property bindings with the specified model.
 * @param {object} oModel The model instance to compare against
 * @returns {boolean} true if this binding should be updated
 * @protected
 * 
 */
sap.ui.model.CompositeBinding.prototype.updateRequired = function(oModel) { return false; };


// ---- sap.ui.model.CompositeDataState --------------------------------------------------------------------------

/**
 * 
 * @class
 * Provides and update the status data of a binding.
 * Depending on the models state and controls state changes, the data state is used to propagated changes to a control.
 * The control can react on these changes by implementing the <code>refreshDataState</code> method for the control.
 * Here the the data state object is passed as a parameter.
 * 
 * Using the {@link #getChanges getChanges} method the control can determine the changed properties and their old and new value.
 * <pre>
 *     //sample implementation to handle message changes
 *     myControl.prototype.refreshDataState = function(oDataState) {
 *        var aMessages = oDataState.getChanges().messages;
 *        if (aMessages) {
 *            for (var i = 0; i &lt; aMessages.length; i++) {
 *                console.log(aMessages.message);
 *            }
 *        }
 *     }
 * 
 *     //sample implementation to handle laundering state
 *     myControl.prototype.refreshDataState = function(oDataState) {
 *        var bLaundering = oDataState.getChanges().laundering || false;
 *        this.setBusy(bLaundering);
 *     }
 * 
 *     //sample implementation to handle dirty state
 *     myControl.prototype.refreshDataState = function(oDataState) {
 *        if (oDataState.isDirty()) console.log("Control " + this.getId() + " is now dirty");
 *     }
 * </pre>
 * 
 * Using the {@link #getProperty getProperty} method the control can read the properties of the data state. The properties are
 * <ul>
 *     <li><code>value</code> The value formatted by the formatter of the binding
 *     <li><code>originalValue</code> The original value of the model formatted by the formatter of the binding
 *     <li><code>invalidValue</code> The control value that was tried to be applied to the model but was rejected by a type validation
 *     <li><code>modelMessages</code> The messages that were applied to the binding by the <code>sap.ui.model.MessageModel</code>
 *     <li><code>controlMessages</code> The messages that were applied due to type validation errors
 *     <li><code>messages</code> All messages of the data state
 *      <li><code>dirty</code> true if the value was not yet confirmed by the server
 * </ul>
 * 
 * @extends sap.ui.model.DataState
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.model.CompositeDataState = function() {};
/**
 * Returns or sets whether the data state is changed.
 * As long as changed was not set to false the data state is dirty
 * and the corresponding binding will fire data state change events.
 * 
 * @param {boolean} [bNewState] the optional new state
 * @returns {boolean} whether the data state was changed.
 * @protected
 * 
 */
sap.ui.model.CompositeDataState.prototype.changed = function(bNewState) { return false; };

/**
 * Creates a new subclass of class sap.ui.model.CompositeDataState with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.DataState.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.CompositeDataState.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the changes of the data state in a map that the control can use in the
 * <code>refreshDataState</code> method.
 * The changed property's name is the key in the map. Each element in the map contains an object of below structure.
 * <pre>
 *    {
 *        oldValue : The old value of the property,
 *        value    : The new value of the property
 *    }
 * </pre>
 * The map only contains the changed properties.
 * 
 * @returns {map} the changed of the data state
 * @public
 * 
 */
sap.ui.model.CompositeDataState.prototype.getChanges = function() { return null; };

/**
 * Sets an array of control state messages.
 * 
 * @param {sap.ui.core.Message[]} the control messages
 * @return {sap.ui.model.DataState} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.CompositeDataState.prototype.getControlMessages = function(the) { return new sap.ui.model.DataState(); };

/**
 * Returns an array of the properties set on the inner datastates
 * 
 * @protected
 * 
 */
sap.ui.model.CompositeDataState.prototype.getInternalProperty = function() {  };

/**
 * Returns the dirty value of a binding that was rejected by a type validation.
 * This value was of an incorrect type and could not be applied to the model. If the
 * value was not rejected it will return null. In this case the current
 * model value can be accessed using the <code>getValue</code> method.
 * 
 * @returns {any} the value that was rejected or null
 * @public
 * 
 */
sap.ui.model.CompositeDataState.prototype.getInvalidValue = function() { return null; };

/**
 * Returns the array of all state messages or null.
 * This combines the model and control messages.
 * 
 * @returns {sap.ui.core.Message[]} the array of all messages or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
 * @public
 * 
 */
sap.ui.model.CompositeDataState.prototype.getMessages = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.ui.model.CompositeDataState.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.CompositeDataState.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the array of state messages of the model or undefined
 * 
 * @returns {sap.ui.core.Message[]} the array of messages of the model or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
 * @public
 * 
 */
sap.ui.model.CompositeDataState.prototype.getModelMessages = function() { return new Array(); };

/**
 * Returns whether the data state is dirty in the UI control.
 * A data state is dirty in the UI control if the entered value did not yet pass the type validation.
 * 
 * @returns {boolean} true if the data state is dirty
 * @public
 * 
 */
sap.ui.model.CompositeDataState.prototype.isControlDirty = function() { return false; };

/**
 * Returns whether the data state is dirty.
 * A data state is dirty if the value was changed
 * but is not yet confirmed by a server or the entered value did not yet pass the type validation.
 * 
 * @returns {boolean} true if the data state is dirty
 * @public
 * 
 */
sap.ui.model.CompositeDataState.prototype.isDirty = function() { return false; };

/**
 * Returns whether the data state is in laundering.
 * If data is send to the server the data state becomes laundering until the
 * data was accepted or rejected.
 * 
 * @returns {boolean} true if the data is laundering
 * @public
 * 
 */
sap.ui.model.CompositeDataState.prototype.isLaundering = function() { return false; };


// ---- sap.ui.model.CompositeType --------------------------------------------------------------------------

/**
 * Constructor for a new CompositeType.
 * 
 * 
 * @class
 * This is an abstract base class for composite types. Composite types have multiple input values and know
 * how to merge/split them upon formatting/parsing the value. Typical use case a currency or amount values.
 * 
 * Subclasses of CompositeTypes can define boolean properties in the constructor:
 * - bUseRawValues: the format and parse method will handle raw model values, types of embedded bindings are ignored
 * - bParseWithValues: the parse method call will include the current binding values as a third parameter
 * 
 * @abstract
 * 
 * @extends sap.ui.model.SimpleType
 * @version 1.48.4
 * 
 * @constructor
 * @param {object} [oFormatOptions] options as provided by concrete subclasses
 * @param {object} [oConstraints] constraints as supported by concrete subclasses
 * @public
 * 
 */
sap.ui.model.CompositeType = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.CompositeType with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.CompositeType.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Format the given set of values in model representation to an output value in the given
 * internal type. This happens according to the format options, if target type is 'string'.
 * If aValues is not defined or null, null will be returned.
 * @param {array} aValues the values to be formatted
 * @param {string} sInternalType the target type
 * @return {any} the formatted output value
 * 
 * @public
 * 
 */
sap.ui.model.CompositeType.prototype.formatValue = function(aValues,sInternalType) { return null; };

/**
 * Returns a metadata object for class sap.ui.model.CompositeType.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.CompositeType.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Parse a value of an internal type to the expected set of values of the model type.
 * @param {any} oValue the value to be parsed
 * @param {string} sInternalType the source type
 * @param {array} aCurrentValues the current values of all binding parts
 * @return {array} the parse result array
 * 
 * @public
 * 
 */
sap.ui.model.CompositeType.prototype.parseValue = function(oValue,sInternalType,aCurrentValues) { return null; };

/**
 * Validate whether a given value in model representation is valid and meets the
 * defined constraints (if any).
 * @param {array} aValues the set of values to be validated
 * 
 * @public
 * 
 */
sap.ui.model.CompositeType.prototype.validateValue = function(aValues) {  };


// ---- sap.ui.model.Context --------------------------------------------------------------------------

/**
 * Constructor for Context class.
 * 
 * 
 * @class
 * The Context is a pointer to an object in the model data, which is used to
 * allow definition of relative bindings, which are resolved relative to the
 * defined object.
 * Context elements are created either by the ListBinding for each list entry
 * or by using createBindingContext.
 * 
 * @param {sap.ui.model.Model} oModel the model
 * @param {String} sPath the binding path
 * @abstract
 * @public
 * @extends sap.ui.base.Object
 * 
 */
sap.ui.model.Context = function(oModel,sPath) {};
/**
 * Creates a new subclass of class sap.ui.model.Context with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.Context.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.Context.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.Context.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Getter for model
 * @public
 * @return {sap.ui.model.Model} the model
 * 
 */
sap.ui.model.Context.prototype.getModel = function() { return new sap.ui.model.Model(); };

/**
 * Gets the (model dependent) object the context points to or the object with the given relative binding path
 * @public
 * @param {String} [sPath] the binding path
 * @param {object} [mParameters] additional model specific parameters (optional)
 * @return {object} the context object
 * 
 */
sap.ui.model.Context.prototype.getObject = function(sPath,mParameters) { return new Object(); };

/**
 * Getter for path of the context itself or a subpath
 * @public
 * @param {String} sPath the binding path
 * @return {String} the binding path
 * 
 */
sap.ui.model.Context.prototype.getPath = function(sPath) { return null; };

/**
 * Gets the property with the given relative binding path
 * @public
 * @param {String} sPath the binding path
 * @return {any} the property value
 * 
 */
sap.ui.model.Context.prototype.getProperty = function(sPath) { return null; };


// ---- sap.ui.model.ContextBinding --------------------------------------------------------------------------

/**
 * Constructor for ContextBinding
 * 
 * 
 * @class
 * The ContextBinding is a specific binding for a setting context for the model
 * 
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {Object} oContext
 * @param {Object} [mParameters]
 * @param {Object} [oEvents] object defining event handlers
 * @abstract
 * @public
 * @extends sap.ui.model.Binding
 * 
 */
sap.ui.model.ContextBinding = function(oModel,sPath,oContext,mParameters,oEvents) {};
/**
 * Creates a new subclass of class sap.ui.model.ContextBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.ContextBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.ContextBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.ContextBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.control --------------------------------------------------------------------------


// ---- sap.ui.model.DataState --------------------------------------------------------------------------

/**
 * 
 * @class
 * Provides and update the status data of a binding.
 * Depending on the models state and controls state changes, the data state is used to propagated changes to a control.
 * The control can react on these changes by implementing the <code>refreshDataState</code> method for the control.
 * Here the the data state object is passed as a parameter.
 * 
 * Using the {@link #getChanges getChanges} method the control can determine the changed properties and their old and new value.
 * <pre>
 *     //sample implementation to handle message changes
 *     myControl.prototype.refreshDataState = function(oDataState) {
 *        var aMessages = oDataState.getChanges().messages;
 *        if (aMessages) {
 *            for (var i = 0; i &lt; aMessages.length; i++) {
 *                console.log(aMessages.message);
 *            }
 *        }
 *     }
 * 
 *     //sample implementation to handle laundering state
 *     myControl.prototype.refreshDataState = function(oDataState) {
 *        var bLaundering = oDataState.getChanges().laundering || false;
 *        this.setBusy(bLaundering);
 *     }
 * 
 *     //sample implementation to handle dirty state
 *     myControl.prototype.refreshDataState = function(oDataState) {
 *        if (oDataState.isDirty()) console.log("Control " + this.getId() + " is now dirty");
 *     }
 * </pre>
 * 
 * Using the {@link #getProperty getProperty} method the control can read the properties of the data state. The properties are
 * <ul>
 *     <li><code>value</code> The value formatted by the formatter of the binding
 *     <li><code>originalValue</code> The original value of the model formatted by the formatter of the binding
 *     <li><code>invalidValue</code> The control value that was tried to be applied to the model but was rejected by a type validation
 *     <li><code>modelMessages</code> The messages that were applied to the binding by the <code>sap.ui.model.MessageModel</code>
 *     <li><code>controlMessages</code> The messages that were applied due to type validation errors
 *     <li><code>messages</code> All messages of the data state
 *      <li><code>dirty</code> true if the value was not yet confirmed by the server
 * </ul>
 * 
 * @extends sap.ui.base.Object
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.model.DataState = function() {};
/**
 * Returns or sets whether the data state is changed.
 * As long as changed was not set to false the data state is dirty
 * and the corresponding binding will fire data state change events.
 * 
 * @param {boolean} [bNewState] the optional new state
 * @returns {boolean} whether the data state was changed.
 * @protected
 * 
 */
sap.ui.model.DataState.prototype.changed = function(bNewState) { return false; };

/**
 * Creates a new subclass of class sap.ui.model.DataState with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.DataState.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the changes of the data state in a map that the control can use in the
 * <code>refreshDataState</code> method.
 * The changed property's name is the key in the map. Each element in the map contains an object of below structure.
 * <pre>
 *    {
 *        oldValue : The old value of the property,
 *        value    : The new value of the property
 *    }
 * </pre>
 * The map only contains the changed properties.
 * 
 * @returns {map} the changed of the data state
 * @public
 * 
 */
sap.ui.model.DataState.prototype.getChanges = function() { return null; };

/**
 * Returns the array of state messages of the control or undefined.
 * 
 * @return {sap.ui.core.Message[]} the array of messages of the control or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
 * @public
 * 
 */
sap.ui.model.DataState.prototype.getControlMessages = function() { return new Array(); };

/**
 * Returns the dirty value of a binding that was rejected by a type validation.
 * This value was of an incorrect type and could not be applied to the model. If the
 * value was not rejected it will return null. In this case the current
 * model value can be accessed using the <code>getValue</code> method.
 * 
 * @returns {any} the value that was rejected or null
 * @public
 * 
 */
sap.ui.model.DataState.prototype.getInvalidValue = function() { return null; };

/**
 * Returns the array of all state messages or null.
 * This combines the model and control messages.
 * 
 * @returns {sap.ui.core.Message[]} the array of all messages or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
 * @public
 * 
 */
sap.ui.model.DataState.prototype.getMessages = function() { return new Array(); };

/**
 * Returns a metadata object for class sap.ui.model.DataState.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.DataState.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the array of state messages of the model or undefined
 * 
 * @returns {sap.ui.core.Message[]} the array of messages of the model or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
 * @public
 * 
 */
sap.ui.model.DataState.prototype.getModelMessages = function() { return new Array(); };

/**
 * Returns the formatted original value of the data.
 * The original value is the last confirmed value.
 * 
 * @returns {any} the original confirmed value of the server
 * @public
 * 
 */
sap.ui.model.DataState.prototype.getOriginalValue = function() { return null; };

/**
 * Returns the formatted value of the data state.
 * 
 * @returns {any} The value of the data.
 * @public
 * 
 */
sap.ui.model.DataState.prototype.getValue = function() { return null; };

/**
 * Returns whether the data state is dirty in the UI control.
 * A data state is dirty in the UI control if the entered value did not yet pass the type validation.
 * 
 * @returns {boolean} true if the data state is dirty
 * @public
 * 
 */
sap.ui.model.DataState.prototype.isControlDirty = function() { return false; };

/**
 * Returns whether the data state is dirty.
 * A data state is dirty if the value was changed
 * but is not yet confirmed by a server or the entered value did not yet pass the type validation.
 * 
 * @returns {boolean} true if the data state is dirty
 * @public
 * 
 */
sap.ui.model.DataState.prototype.isDirty = function() { return false; };

/**
 * Returns whether the data state is in laundering.
 * If data is send to the server the data state becomes laundering until the
 * data was accepted or rejected.
 * 
 * @returns {boolean} true if the data is laundering
 * @public
 * 
 */
sap.ui.model.DataState.prototype.isLaundering = function() { return false; };

/**
 * Sets an array of control state messages.
 * 
 * @param {sap.ui.core.Message[]} the control messages
 * @return {sap.ui.model.DataState} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.DataState.prototype.setControlMessages = function(the) { return new sap.ui.model.DataState(); };

/**
 * Sets the dirty value that was rejected by the type validation.
 * 
 * @param {any} vInvalidValue the value that was rejected by the type validation or null if the value was valid
 * @returns {sap.ui.model.DataState} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.DataState.prototype.setInvalidValue = function(vInvalidValue) { return new sap.ui.model.DataState(); };

/**
 * Sets the laundering state of the data state.
 * 
 * @param {boolean} bLaundering true if the state is laundering
 * @returns {sap.ui.model.DataState} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.DataState.prototype.setLaundering = function(bLaundering) { return new sap.ui.model.DataState(); };

/**
 * Sets an array of model state messages.
 * 
 * @param {array} the model messages for this data state.
 * @returns {sap.ui.model.DataState} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.DataState.prototype.setModelMessages = function(the) { return new sap.ui.model.DataState(); };

/**
 * Sets the formatted original value of the data.
 * 
 * @param {boolean} vOriginalValue the original value
 * @returns {sap.ui.model.DataState} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.DataState.prototype.setOriginalValue = function(vOriginalValue) { return new sap.ui.model.DataState(); };

/**
 * Sets the formatted value of the data state,
 * 
 * @param {any} vValue the value
 * @returns {sap.ui.model.DataState} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.DataState.prototype.setValue = function(vValue) { return new sap.ui.model.DataState(); };


// ---- sap.ui.model.Filter --------------------------------------------------------------------------

/**
 * Constructor for Filter.
 * 
 * You either pass a single object literal with the filter parameters or use the individual constructor arguments.
 * No matter which variant is used, only certain combinations of parameters are supported
 * (the following list uses the names from the object literal):
 * <ul>
 * <li>A <code>path</code>, <code>operator</code> and one or two values (<code>value1</code>, <code>value2</code>), depending on the operator</li>
 * <li>A <code>path</code> and a custom filter function <code>test</code></li>
 * <li>An array of other filters named <code>filters</code> and a Boolean flag <code>and</code> that specifies whether to combine
 *     the filters with an AND (<code>true</code>) or an OR (<code>false</code>) operator.</li>
 * </ul>
 * An error will be logged to the console if an invalid combination of parameters is provided.
 * Please note that a model implementation may not support a custom filter function, e.g. if the model does not perform client side filtering.
 * It also depends on the model implementation if the filtering is case sensitive or not.
 * See particular model documentation for details.
 * 
 * The filter operators <code>Any</code> and <code>All</code> are only supported in V4 OData models.
 * When creating a filter instance with these filter operators, the argument <code>variable</code> only accepts a string identifier and <code>condition</code> needs to be another filter instance.
 * 
 * 
 * @example <caption>Using an object with a path, an operator and one or two values</caption>
 * 
 *   sap.ui.define(['sap/ui/model/Filter', 'sap/ui/model/FilterOperator'], function(Filter, FilterOperator) {
 *     new sap.ui.model.Filter({
 *       path: "Price",
 *       operator: FilterOperator.BT,
 *       value1: 11.0,
 *       value2: 23.0
 *     });
 *   });
 * 
 * @example <caption>Using a path and a custom filter function</caption>
 * 
 *   new sap.ui.model.Filter({
 *     path: "Price",
 *     test: function(oValue) {
 *        ...
 *     }
 *   })
 * 
 * @example <caption>Combining a list of filters either with AND or OR</caption>
 * 
 *   new Filter({
 *     filters: [
 *       ...
 *       new Filter({
 *         path: 'Quantity',
 *         operator: FilterOperator.LT,
 *         value1: 20
 *       }),
 *       new Filter({
 *         path: 'Price',
 *         operator: FilterOperator.GT,
 *         value1: 14.0
 *       })
 *       ...
 *     ],
 *     and: true|false
 *   })
 * 
 * @example <caption>The filter operators <code>Any</code> and <code>All</code> map to the OData V4 lambda operators <code>any</code> and <code>all</code>.
 * They take a variable and another filter as parameter and evaluate it on either a collection property or a collection of entities.</caption>
 * 
 *   // find Orders where all of the 'Items' in the order have a 'Quantity' > 100
 *   // (assumes that Filter and FilterOperator have been declared as dependencies, see previous examples)
 *   new Filter({
 *     path: 'Items',
 *     operator: FilterOperator.All,
 *     variable: 'item',
 *     condition: new Filter({
 *       path: 'item/Quantity',
 *       operator: FilterOperator.GT,
 *       value1: 100.0
 *     })
 *   });
 * 
 * @example <caption>For the filter operator <code>Any</code> either both a lambda <code>variable</code> and a <code>condition</code> have to be given or neither.</caption>
 *   new Filter({
 *     path: 'Items',
 *     operator: FilterOperator.Any
 *   });
 * 
 * @example <caption>Legacy signature: Same as above, but using individual constructor arguments. Not supported for filter operators <code>Any</code> and <code>All</code>.</caption>
 * 
 *     new sap.ui.model.Filter(sPath, sOperator, vValue1, vValue2);
 *   OR
 *     new sap.ui.model.Filter(sPath, fnTest);
 *   OR
 *     new sap.ui.model.Filter(aFilters, bAnd);
 * 
 * @class
 * Filter for the list binding.
 * 
 * @param {object|string|sap.ui.model.Filter[]} vFilterInfo Filter info object or a path or an array of filters
 * @param {string} vFilterInfo.path Binding path for this filter
 * @param {function} vFilterInfo.test Function which is used to filter the items and which should return a Boolean value to indicate whether the current item passes the filter
 * @param {sap.ui.model.FilterOperator} vFilterInfo.operator Operator used for the filter
 * @param {object} vFilterInfo.value1 First value to use with the given filter operator
 * @param {object} [vFilterInfo.value2=null] Second value to use with the filter operator (only for some operators)
 * @param {string} [vFilterInfo.variable] The variable used in lambda operators (<code>Any</code> and <code>All</code>)
 * @param {sap.ui.model.Filter} [vFilterInfo.condition] A <code>Filter</code> instance which will be used as the condition for the lambda operator
 * @param {sap.ui.model.Filter[]} vFilterInfo.filters Array of filters on which logical conjunction is applied
 * @param {boolean} vFilterInfo.and Indicates whether an "AND" logical conjunction is applied on the filters. If it's set to <code>false</code>, an "OR" conjunction is applied
 * @param {sap.ui.model.FilterOperator|function|boolean} [vOperator] Either a filter operator or a custom filter function or a Boolean flag that defines how to combine multiple filters
 * @param {any} [vValue1] First value to use with the given filter operator
 * @param {any} [vValue2] Second value to use with the given filter operator (only for some operators)
 * @public
 * @extends sap.ui.base.Object
 * 
 */
sap.ui.model.Filter = function(vFilterInfo,vOperator,vValue1,vValue2) {};
/**
 * Creates a new subclass of class sap.ui.model.Filter with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.Filter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.Filter.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.Filter.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.FilterOperator --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.FilterOperator.toString = function() { return ""; };

// ---- sap.ui.model.FilterType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.FilterType.toString = function() { return ""; };

// ---- sap.ui.model.json --------------------------------------------------------------------------


// ---- sap.ui.model.json.JSONModel --------------------------------------------------------------------------

/**
 * Constructor for a new JSONModel.
 * 
 * 
 * @class
 * Model implementation for JSON format
 * 
 * The observation feature is experimental! When observation is activated, the application can directly change the
 * JS objects without the need to call setData, setProperty or refresh. Observation does only work for existing
 * properties in the JSON, it can not detect new properties or new array entries.
 * 
 * @extends sap.ui.model.ClientModel
 * @version 1.48.4
 * 
 * @param {object} oData either the URL where to load the JSON from or a JS object
 * @param {boolean} bObserve whether to observe the JSON data for property changes (experimental)
 * @constructor
 * @public
 * 
 */
sap.ui.model.json.JSONModel = function(oData,bObserve) {};
/**
 * Creates a new subclass of class sap.ui.model.json.JSONModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.json.JSONModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Serializes the current JSON data of the model into a string.
 * Note: May not work in Internet Explorer 8 because of lacking JSON support (works only if IE 8 mode is enabled)
 * 
 * @return {string} sJSON the JSON data serialized as string
 * @public
 * 
 */
sap.ui.model.json.JSONModel.prototype.getJSON = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.model.json.JSONModel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.json.JSONModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the value for the property with the given <code>sPropertyName</code>
 * 
 * @param {string} sPath the path to the property
 * @param {object} [oContext=null] the context which will be used to retrieve the property
 * @type any
 * @return the value of the property
 * @public
 * 
 */
sap.ui.model.json.JSONModel.prototype.getProperty = function(sPath,oContext) { return null; };

/**
 * Load JSON-encoded data from the server using a GET HTTP request and store the resulting JSON data in the model.
 * Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin policy,
 * the request can not successfully retrieve data from a different domain, subdomain, or protocol.
 * 
 * @param {string} sURL A string containing the URL to which the request is sent.
 * @param {object | string} [oParameters] A map or string that is sent to the server with the request.
 * Data that is sent to the server is appended to the URL as a query string.
 * If the value of the data parameter is an object (map), it is converted to a string and
 * url-encoded before it is appended to the URL.
 * @param {boolean} [bAsync=true] By default, all requests are sent asynchronous
 * (i.e. this is set to true by default). If you need synchronous requests, set this option to false.
 * Cross-domain requests do not support synchronous operation. Note that synchronous requests may
 * temporarily lock the browser, disabling any actions while the request is active.
 * @param {string} [sType=GET] The type of request to make ("POST" or "GET"), default is "GET".
 * Note: Other HTTP request methods, such as PUT and DELETE, can also be used here, but
 * they are not supported by all browsers.
 * @param {boolean} [bMerge=false] whether the data should be merged instead of replaced
 * @param {string} [bCache=false] force no caching if false. Default is false
 * @param {object} [mHeaders] An object of additional header key/value pairs to send along with the request
 * 
 * @public
 * 
 */
sap.ui.model.json.JSONModel.prototype.loadData = function(sURL,oParameters,bAsync,sType,bMerge,bCache,mHeaders) {  };

/**
 * Sets the JSON encoded data to the model.
 * 
 * @param {object} oData the data to set on the model
 * @param {boolean} [bMerge=false] whether to merge the data instead of replacing it
 * 
 * @public
 * 
 */
sap.ui.model.json.JSONModel.prototype.setData = function(oData,bMerge) {  };

/**
 * Sets the JSON encoded string data to the model.
 * 
 * @param {string} sJSONText the string data to set on the model
 * @param {boolean} [bMerge=false] whether to merge the data instead of replacing it
 * 
 * @public
 * 
 */
sap.ui.model.json.JSONModel.prototype.setJSON = function(sJSONText,bMerge) {  };

/**
 * Sets a new value for the given property <code>sPropertyName</code> in the model.
 * If the model value changed all interested parties are informed.
 * 
 * @param {string}  sPath path of the property to set
 * @param {any}     oValue value to set the property to
 * @param {object} [oContext=null] the context which will be used to set the property
 * @param {boolean} [bAsyncUpdate] whether to update other bindings dependent on this property asynchronously
 * @return {boolean} true if the value was set correctly and false if errors occurred like the entry was not found.
 * @public
 * 
 */
sap.ui.model.json.JSONModel.prototype.setProperty = function(sPath,oValue,oContext,bAsyncUpdate) { return false; };


// ---- sap.ui.model.json.JSONTreeBinding --------------------------------------------------------------------------

/**
 * 
 * @class
 * Tree binding implementation for JSON format.
 * 
 * The bound data can contain JSON objects and arrays. Both will be used to build the tree structure.
 * You can optionally define a set of arrays to be used for the tree structure in the parameter <code>arrayNames</code>.
 * If this parameter is given all other objects and arrays will be ignored.
 * 
 * @param {sap.ui.model.json.JSONModel} [oModel]
 * @param {string}
 *         sPath Path pointing to the tree or array that should be bound
 * @param {object}
 *         [oContext=null] Context object for this binding
 * @param {array}
 *         [aFilters=null] Predefined filters contained in an array
 * @param {object}
 *         [mParameters=null] Additional model-specific parameters
 * @param {string[]} [mParameters.arrayNames]
 * 			Keys of arrays to be used for building the tree structure. If not specified, all arrays and objects in the bound data will be used.
 * 			Note that for arrays nested inside differently named arrays, you need to add both to <code>arrayNames</code>. You always have to add the complete parent chain.
 * 			If any array is ignored, its child arrays will be ignored as well even if they have been added to <code>arrayNames</code>.
 * 
 * @protected
 * @extends sap.ui.model.ClientTreeBinding
 * 
 */
sap.ui.model.json.JSONTreeBinding = function(oModel,sPath,oContext,aFilters,mParameters) {};

// ---- sap.ui.model.ListBinding --------------------------------------------------------------------------

/**
 * Constructor for ListBinding
 * 
 * 
 * @class
 * The ListBinding is a specific binding for lists in the model, which can be used
 * to populate Tables or ItemLists.
 * 
 * @param {sap.ui.model.Model} oModel
 * @param {string} sPath
 * @param {sap.ui.model.Context} oContext
 * @param {array} [aSorters] initial sort order (can be either a sorter or an array of sorters)
 * @param {array} [aFilters] predefined filter/s (can be either a filter or an array of filters)
 * @param {object} [mParameters]
 * 
 * @public
 * @extends sap.ui.model.Binding
 * 
 */
sap.ui.model.ListBinding = function(oModel,sPath,oContext,aSorters,aFilters,mParameters) {};
/**
 * Attach event-handler <code>fnFunction</code> to the 'filter' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event. It now contains a parameter (reason : "filter") when a filter event is fired.
 * 
 */
sap.ui.model.ListBinding.prototype.attachFilter = function(fnFunction,oListener) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'sort' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event. It now contains a parameter (reason : "sort") when a sorter event is fired.
 * 
 */
sap.ui.model.ListBinding.prototype.attachSort = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'filter' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event.
 * 
 */
sap.ui.model.ListBinding.prototype.detachFilter = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'sort' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event.
 * 
 */
sap.ui.model.ListBinding.prototype.detachSort = function(fnFunction,oListener) {  };

/**
 * Creates a new subclass of class sap.ui.model.ListBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.ListBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Filters the list according to the filter definitions
 * @param {object[]} aFilters Array of filter objects
 * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
 * @return {sap.ui.model.ListBinding} returns <code>this</code> to facilitate method chaining
 * 
 * @public
 * 
 */
sap.ui.model.ListBinding.prototype.filter = function(aFilters,sFilterType) { return new sap.ui.model.ListBinding(); };

/**
 * Returns an array of binding contexts for the bound target list.
 * 
 * <strong>Note:</strong>The public usage of this method is deprecated, as calls from outside of controls will lead
 * to unexpected side effects. For avoidance use {@link sap.ui.model.ListBinding.prototype.getCurrentContexts}
 * instead.
 * @param {int} [iStartIndex=0] the startIndex where to start the retrieval of contexts
 * @param {int} [iLength=length of the list] determines how many contexts to retrieve beginning from the start index.
 * @return {sap.ui.model.Context[]} the array of contexts for each row of the bound list
 * 
 * @protected
 * 
 */
sap.ui.model.ListBinding.prototype.getContexts = function(iStartIndex,iLength) { return new Array(); };

/**
 * Returns an array of currently used binding contexts of the bound control
 * 
 * This method does not trigger any data requests from the backend or delta calculation, but just returns the context
 * array as last requested by the control. This can be used by the application to get access to the data currently
 * displayed by a list control.
 * 
 * @return {sap.ui.model.Context[]} the array of contexts for each row of the bound list
 * @since 1.28
 * @public
 * 
 */
sap.ui.model.ListBinding.prototype.getCurrentContexts = function() { return new Array(); };

/**
 * Returns list of distinct values for the given relative binding path
 * 
 * @param {string} sPath the relative binding path
 * @return {Array} the array of distinct values.
 * 
 * @public
 * 
 */
sap.ui.model.ListBinding.prototype.getDistinctValues = function(sPath) { return null; };

/**
 * Gets the group for the given context.
 * Must only be called if isGrouped() returns that grouping is enabled for this binding. The grouping will be
 * performed using the first sorter (in case multiple sorters are defined).
 * @param {sap.ui.model.Context} oContext the binding context
 * @public
 * @returns {object} the group object containing a key property and optional custom properties
 * @see sap.ui.model.Sorter#getGroup
 * 
 */
sap.ui.model.ListBinding.prototype.getGroup = function(oContext) { return new Object(); };

/**
 * Returns the number of entries in the list. This might be an estimated or preliminary length, in case
 * the full length is not known yet, see method isLengthFinal().
 * 
 * @return {int} returns the number of entries in the list
 * @since 1.24
 * @public
 * 
 */
sap.ui.model.ListBinding.prototype.getLength = function() { return 0; };

/**
 * Returns a metadata object for class sap.ui.model.ListBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.ListBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Indicates whether grouping is enabled for the binding.
 * Grouping is enabled for a list binding, if at least one sorter exists on the binding and the first sorter
 * is a grouping sorter.
 * @public
 * @returns {boolean} whether grouping is enabled
 * 
 */
sap.ui.model.ListBinding.prototype.isGrouped = function() { return false; };

/**
 * Returns whether the length which can be retrieved using getLength() is a known, final length,
 * or a preliminary or estimated length which may change if further data is requested.
 * 
 * @return {boolean} returns whether the length is final
 * @since 1.24
 * @public
 * 
 */
sap.ui.model.ListBinding.prototype.isLengthFinal = function() { return false; };

/**
 * Sorts the list according to the sorter object
 * @param {sap.ui.model.Sorter|Array} aSorters the Sorter object or an array of sorters which defines the sort order
 * @return {sap.ui.model.ListBinding} returns <code>this</code> to facilitate method chaining
 * @public
 * 
 */
sap.ui.model.ListBinding.prototype.sort = function(aSorters) { return new sap.ui.model.ListBinding(); };


// ---- sap.ui.model.message --------------------------------------------------------------------------


// ---- sap.ui.model.message.MessageModel --------------------------------------------------------------------------

/**
 * Constructor for a new JSONModel.
 * 
 * 
 * @class
 * Model implementation for Messages
 * 	 *
 * @extends sap.ui.model.ClientModel
 * @version 1.48.4
 * 
 * @param {sap.ui.core.message.MessageManager} oMessageManager The MessageManager instance
 * @constructor
 * @public
 * 
 */
sap.ui.model.message.MessageModel = function(oMessageManager) {};
/**
 * Creates a new subclass of class sap.ui.model.message.MessageModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.message.MessageModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.message.MessageModel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.message.MessageModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the value for the property with the given <code>sPropertyName</code>
 * 
 * @param {string} sPath the path to the property
 * @param {object} [oContext=null] the context which will be used to retrieve the property
 * @type any
 * @return the value of the property
 * @public
 * 
 */
sap.ui.model.message.MessageModel.prototype.getProperty = function(sPath,oContext) { return null; };

/**
 * Sets the message data to the model.
 * 
 * @param {object} oData the data to set on the model
 * 
 * @public
 * 
 */
sap.ui.model.message.MessageModel.prototype.setData = function(oData) {  };

/**
 * Sets a new value for the given property <code>sPropertyName</code> in the model.
 * If the model value changed all interested parties are informed.
 * 
 * @param {string}  sPath path of the property to set
 * @param {any}     oValue value to set the property to
 * @param {object} [oContext=null] the context which will be used to set the property
 * @public
 * 
 */
sap.ui.model.message.MessageModel.prototype.setProperty = function(sPath,oValue,oContext) {  };


// ---- sap.ui.model.MetaModel --------------------------------------------------------------------------

/**
 * Constructor for a new MetaModel.
 * 
 * 
 * @class Model implementation for meta models
 * @abstract
 * @extends sap.ui.model.Model
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.model.MetaModel = function() {};
/**
 * Creates a new subclass of class sap.ui.model.MetaModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.MetaModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.MetaModel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.MetaModel.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.Model --------------------------------------------------------------------------

/**
 * Constructor for a new Model.
 * 
 * Every Model is a MessageProcessor that is able to handle Messages with the normal binding path syntax in the target.
 * 
 * 
 * @class
 * This is an abstract base class for model objects.
 * @abstract
 * 
 * @extends sap.ui.core.message.MessageProcessor
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.model.Model = function() {};
/**
 * The 'parseError' event is fired when parsing of a model document (e.g. XML response) fails.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {int} oEvent.getParameters.errorCode
 * @param {string} oEvent.getParameters.url
 * @param {string} oEvent.getParameters.reason
 * @param {string} oEvent.getParameters.srcText
 * @param {int} oEvent.getParameters.line
 * @param {int} oEvent.getParameters.linepos
 * @param {int} oEvent.getParameters.filepos
 * @public
 * 
 */
sap.ui.model.Model.prototype.parseError = function(oEvent) {  };

/**
 * 
 * 
 * The 'propertyChange' event is fired when changes occur to a property value in the model. The event contains a reason parameter which describes the cause of the property value change.
 * Currently the event is only fired with reason <code>sap.ui.model.ChangeReason.Binding</code> which is fired when two way changes occur to a value of a property binding.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {sap.ui.model.ChangeReason} oEvent.getParameters.reason The cause of the property value change
 * @param {string} oEvent.getParameters.path The path of the property
 * @param {sap.ui.model.Context} [oEvent.getParameters.context] The binding context (if available)
 * @param {object} oEvent.getParameters.value The current value of the property
 * @public
 * 
 */
sap.ui.model.Model.prototype.propertyChange = function(oEvent) {  };

/**
 * The 'requestCompleted' event is fired, after a request has been completed (includes receiving a response),
 * no matter whether the request succeeded or not.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.url The url which was sent to the backend
 * @param {string} [oEvent.getParameters.type] The type of the request (if available)
 * @param {boolean} oEvent.getParameters.success if the request has been successful or not. In case of errors consult the optional errorobject parameter.
 * @param {object} [oEvent.getParameters.errorobject] If the request failed the error if any can be accessed in this property.
 * @param {boolean} [oEvent.getParameters.async] If the request is synchronous or asynchronous (if available)
 * @param {string} [oEvent.getParameters.info] Additional information for the request (if available) <strong>deprecated</strong>
 * @param {object} [oEvent.getParameters.infoObject] Additional information for the request (if available)
 * @public
 * 
 */
sap.ui.model.Model.prototype.requestCompleted = function(oEvent) {  };

/**
 * The 'requestFailed' event is fired, when data retrieval from a backend failed.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.message A text that describes the failure.
 * @param {string} oEvent.getParameters.statusCode HTTP status code returned by the request (if available)
 * @param {string} oEvent.getParameters.statusText The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [oEvent.getParameters.responseText] Response that has been received for the request, as a text string
 * @public
 * 
 */
sap.ui.model.Model.prototype.requestFailed = function(oEvent) {  };

/**
 * The 'requestSent' event is fired, after a request has been sent to a backend.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.url The url which is sent to the backend
 * @param {string} [oEvent.getParameters.type] The type of the request (if available)
 * @param {boolean} [oEvent.getParameters.async] If the request is synchronous or asynchronous (if available)
 * @param {string} [oEvent.getParameters.info] Additional information for the request (if available) <strong>deprecated</strong>
 * @param {object} [oEvent.getParameters.infoObject] Additional information for the request (if available)
 * @public
 * 
 */
sap.ui.model.Model.prototype.requestSent = function(oEvent) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'parseError' event of this <code>sap.ui.model.Model</code>.<br/>
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.attachParseError = function(oData,fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'propertyChange' event of this <code>sap.ui.model.Model</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.attachPropertyChange = function(oData,fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'requestCompleted' event of this <code>sap.ui.model.Model</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.attachRequestCompleted = function(oData,fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'requestFailed' event of this <code>sap.ui.model.Model</code>.<br/>
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.attachRequestFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'requestSent' event of this <code>sap.ui.model.Model</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.attachRequestSent = function(oData,fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Create ContextBinding
 * @abstract
 * @param {string | object}
 *         sPath the path pointing to the property that should be bound or an object
 *         which contains the following parameter properties: path, context, parameters
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional)
 * @param {object}
 *         [oEvents=null] event handlers can be passed to the binding ({change:myHandler})
 * @return {sap.ui.model.ContextBinding}
 * 
 * @public
 * 
 */
sap.ui.model.Model.prototype.bindContext = function(sPath,oContext,mParameters,oEvents) { return new sap.ui.model.ContextBinding(); };

/**
 * Implement in inheriting classes
 * @abstract
 * @param {string}
 *         sPath the path pointing to the list / array that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {sap.ui.model.Sorter}
 *         [aSorters=null] initial sort order (can be either a sorter or an array of sorters) (optional)
 * @param {array}
 *         [aFilters=null] predefined filter/s (can be either a filter or an array of filters) (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional)
 * @return {sap.ui.model.ListBinding}
 * @public
 * 
 */
sap.ui.model.Model.prototype.bindList = function(sPath,oContext,aSorters,aFilters,mParameters) { return new sap.ui.model.ListBinding(); };

/**
 * Implement in inheriting classes
 * @abstract
 * @param {string}
 *         sPath the path pointing to the property that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional)
 * @return {sap.ui.model.PropertyBinding}
 * 
 * @public
 * 
 */
sap.ui.model.Model.prototype.bindProperty = function(sPath,oContext,mParameters) { return new sap.ui.model.PropertyBinding(); };

/**
 * Implement in inheriting classes
 * @abstract
 * @param {string}
 *         sPath the path pointing to the tree / array that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {array}
 *         [aFilters=null] predefined filter/s contained in an array (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional)
 * @param {array}
 *         [aSorters=null] predefined sap.ui.model.sorter/s contained in an array (optional)
 * @return {sap.ui.model.TreeBinding}
 * @public
 * 
 */
sap.ui.model.Model.prototype.bindTree = function(sPath,oContext,aFilters,mParameters,aSorters) { return new sap.ui.model.TreeBinding(); };

/**
 * Checks whether the given filters contain an unsupported operator.
 * 
 * OData v1, v2 and Client Bindings cannot be filtered with <code>sap.ui.model.FilterOperator</code> <code>"Any"</code> and <code>"All"</code>.
 * The model property <code>mUnsupportedFilterOperators</code> can be configured in each model subclass
 * to describe the unsupported operators.
 * 
 * If any of the given filters contains nested filters, those are checked recursively.
 * 
 * @param {sap.ui.model.Filter|sap.ui.model.Filter[]} vFilters Single filter or an array of filter instances
 * @throws {Error} if at least one filter uses an <code>sap.ui.model.FilterOperator</code>
 *               that is not supported by the related model instance
 * @sap-restricted sap.ui.model
 * @protected
 * 
 */
sap.ui.model.Model.prototype.checkFilterOperation = function(vFilters) {  };

/**
 * Implement in inheriting classes
 * @abstract
 * @param {string}
 *         sPath the path to create the new context from
 * @param {object}
 * 		   [oContext=null] the context which should be used to create the new binding context
 * @param {object}
 * 		   [mParameters=null] the parameters used to create the new binding context
 * @param {function}
 *         [fnCallBack] the function which should be called after the binding context has been created
 * @param {boolean}
 *         [bReload] force reload even if data is already available. For server side models this should
 *                   refetch the data from the server
 * @return {sap.ui.model.Context} the binding context, if it could be created synchronously
 * 
 * @public
 * 
 */
sap.ui.model.Model.prototype.createBindingContext = function(sPath,oContext,mParameters,fnCallBack,bReload) { return new sap.ui.model.Context(); };

/**
 * Destroys the model and clears the model data.
 * A model implementation may override this function and perform model specific cleanup tasks e.g.
 * abort requests, prevent new requests, etc.
 * 
 * @see sap.ui.base.Object.prototype.destroy
 * @public
 * 
 */
sap.ui.model.Model.prototype.destroy = function() {  };

/**
 * Implement in inheriting classes
 * @abstract
 * @param {object}
 *         oContext to destroy
 * @public
 * 
 */
sap.ui.model.Model.prototype.destroyBindingContext = function(oContext) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'parseError' event of this <code>sap.ui.model.Model</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.detachParseError = function(fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'propertyChange' event of this <code>sap.ui.model.Model</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.detachPropertyChange = function(fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'requestCompleted' event of this <code>sap.ui.model.Model</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.detachRequestCompleted = function(fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'requestFailed' event of this <code>sap.ui.model.Model</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.detachRequestFailed = function(fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'requestSent' event of this <code>sap.ui.model.Model</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.detachRequestSent = function(fnFunction,oListener) { return new sap.ui.model.Model(); };

/**
 * Creates a new subclass of class sap.ui.model.Model with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageProcessor.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.Model.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event parseError to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {int} [mArguments.errorCode]
 * @param {string} [mArguments.url]
 * @param {string} [mArguments.reason]
 * @param {string} [mArguments.srcText]
 * @param {int} [mArguments.line]
 * @param {int} [mArguments.linepos]
 * @param {int} [mArguments.filepos]
 * 
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.Model.prototype.fireParseError = function(mArguments) { return new sap.ui.model.Model(); };

/**
 * Fire event propertyChange to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {sap.ui.model.ChangeReason} [mArguments.reason] The reason of the property change
 * @param {string} [mArguments.path] The path of the property
 * @param {object} [mArguments.context] the context of the property
 * @param {object} [mArguments.value] the value of the property
 * 
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.Model.prototype.firePropertyChange = function(mArguments) { return new sap.ui.model.Model(); };

/**
 * Fire event requestCompleted to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.url] The url which was sent to the backend.
 * @param {string} [mArguments.type] The type of the request (if available)
 * @param {boolean} [mArguments.async] If the request was synchronous or asynchronous (if available)
 * @param {string} [mArguments.info] additional information for the request (if available) <strong>deprecated</strong>
 * @param {object} [mArguments.infoObject] Additional information for the request (if available)
 * 
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.Model.prototype.fireRequestCompleted = function(mArguments) { return new sap.ui.model.Model(); };

/**
 * Fire event requestFailed to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * 
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.Model.prototype.fireRequestFailed = function(mArguments) { return new sap.ui.model.Model(); };

/**
 * Fire event requestSent to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.url] The url which is sent to the backend.
 * @param {string} [mArguments.type] The type of the request (if available)
 * @param {boolean} [mArguments.async] If the request is synchronous or asynchronous (if available)
 * @param {string} [mArguments.info] additional information for the request (if available) <strong>deprecated</strong>
 * @param {object} [mArguments.infoObject] Additional information for the request (if available)
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.Model.prototype.fireRequestSent = function(mArguments) { return new sap.ui.model.Model(); };

/**
 * Get the default binding mode for the model
 * 
 * @return {sap.ui.model.BindingMode} default binding mode of the model
 * 
 * @public
 * 
 */
sap.ui.model.Model.prototype.getDefaultBindingMode = function() { return new sap.ui.model.BindingMode(); };

/**
 * Get messages for path
 * 
 * @param {string} sPath The binding path
 * @protected
 * 
 */
sap.ui.model.Model.prototype.getMessagesByPath = function(sPath) {  };

/**
 * Returns a metadata object for class sap.ui.model.Model.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.Model.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the meta model associated with this model if it is available for the concrete
 * model type.
 * @abstract
 * @public
 * @returns {sap.ui.model.MetaModel} The meta model or undefined if no meta model exists.
 * 
 */
sap.ui.model.Model.prototype.getMetaModel = function() { return new sap.ui.model.MetaModel(); };

/**
 * Implement in inheriting classes
 * @abstract
 * 
 * @param {string}
 *         sPath the path to where to read the object
 * @param {object}
 * 		   [oContext=null] the context with which the path should be resolved
 * @param {object}
 *         [mParameters] additional model specific parameters
 * 
 * @public
 * 
 */
sap.ui.model.Model.prototype.getObject = function(sPath,oContext,mParameters) {  };

/**
 * Returns the original value for the property with the given path and context.
 * The original value is the value that was last responded by a server if using a server model implementation.
 * 
 * @param {string} sPath the path/name of the property
 * @param {object} [oContext] the context if available to access the property value
 * @returns {any} vValue the value of the property
 * @public
 * 
 */
sap.ui.model.Model.prototype.getOriginalProperty = function(sPath,oContext) { return null; };

/**
 * Implement in inheriting classes
 * @abstract
 * @param {string}
 *         sPath the path to where to read the attribute value
 * @param {object}
 * 		   [oContext=null] the context with which the path should be resolved
 * @public
 * 
 */
sap.ui.model.Model.prototype.getProperty = function(sPath,oContext) {  };

/**
 * Check if the specified binding mode is supported by the model.
 * 
 * @param {sap.ui.model.BindingMode} sMode the binding mode to check
 * 
 * @public
 * 
 */
sap.ui.model.Model.prototype.isBindingModeSupported = function(sMode) {  };

/**
 * Returns whether legacy path syntax is used
 * 
 * @return {boolean}
 * 
 * @public
 * 
 */
sap.ui.model.Model.prototype.isLegacySyntax = function() { return false; };

/**
 * Refresh the model.
 * This will check all bindings for updated data and update the controls if data has been changed.
 * 
 * @param {boolean} bForceUpdate Update controls even if data has not been changed
 * @public
 * 
 */
sap.ui.model.Model.prototype.refresh = function(bForceUpdate) {  };

/**
 * Set the default binding mode for the model. If the default binding mode should be changed,
 * this method should be called directly after model instance creation and before any binding creation.
 * Otherwise it is not guaranteed that the existing bindings will be updated with the new binding mode.
 * 
 * @param {sap.ui.model.BindingMode} sMode the default binding mode to set for the model
 * @returns {sap.ui.model.Model} this pointer for chaining
 * @public
 * 
 */
sap.ui.model.Model.prototype.setDefaultBindingMode = function(sMode) { return new sap.ui.model.Model(); };

/**
 * Enables legacy path syntax handling
 * 
 * This defines, whether relative bindings, which do not have a defined
 * binding context, should be compatible to earlier releases which means
 * they are resolved relative to the root element or handled strict and
 * stay unresolved until a binding context is set
 * 
 * @param {boolean} bLegacySyntax the path syntax to use
 * 
 * @public
 * 
 */
sap.ui.model.Model.prototype.setLegacySyntax = function(bLegacySyntax) {  };

/**
 * Sets messages
 * 
 * @param {object} mMessages Messages for this model
 * @public
 * 
 */
sap.ui.model.Model.prototype.setMessages = function(mMessages) {  };

/**
 * Set the maximum number of entries which are used for list bindings.
 * @param {int} iSizeLimit collection size limit
 * @public
 * 
 */
sap.ui.model.Model.prototype.setSizeLimit = function(iSizeLimit) {  };


// ---- sap.ui.model.odata --------------------------------------------------------------------------

/**
 * Adapter for TreeBindings to add the ListBinding functionality and use the
 * tree structure in list based controls.
 * Only usable with the sap.ui.table.TreeTable control.
 * The functions defined here are only available when you are using a TreeTable and an ODataModel.
 * @experimental This module is only for experimental and internal use!
 * @public
 * 
 * @memberof sap.ui.model.odata
 */
sap.ui.model.odata.ODataTreeBindingAdapter = function() {  };

/**
 * Adapter for TreeBindings to add the ListBinding functionality and use the
 * tree structure in list based controls.
 * @public
 * 
 * @memberof sap.ui.model.odata
 */
sap.ui.model.odata.ODataTreeBindingFlat = function() {  };


// ---- sap.ui.model.odata.AnnotationHelper --------------------------------------------------------------------------

/**
 * Creates a property setting (which is either a constant value or a binding info
 * object) from the given parts and from the optional root formatter function.
 * Each part can have one of the following types:
 * <ul>
 *   <li><code>boolean</code>, <code>number</code>, <code>undefined</code>: The part is
 *   a constant value.
 * 
 *   <li><code>string</code>: The part is a data binding expression with complex
 *   binding syntax (for example, as created by {@link #.format format}) and is parsed
 *   accordingly to create either a constant value or a binding info object. Proper
 *   backslash escaping must be used for constant values with curly braces.
 * 
 *   <li><code>object</code>: The part is a binding info object if it has a "path" or
 *   "parts" property, otherwise it is a constant value.
 * </ul>
 * If a binding info object is not the only part and has a "parts" property itself,
 * then it must have no other properties except "formatter"; this is the case for
 * expression bindings and data binding expressions created by {@link #.format format}.
 * 
 * If all parts are constant values, the resulting property setting is also a constant
 * value computed by applying the root formatter function to the constant parts once.
 * If at least one part is a binding info object, the resulting property setting is
 * also a binding info object and the root formatter function will be applied again and
 * again to the current values of all parts, no matter whether constant or variable.
 * 
 * Note: The root formatter function should not rely on its <code>this</code> value
 * because it depends on how the function is called.
 * 
 * Note: A single data binding expression can be given directly to
 * {@link sap.ui.base.ManagedObject#applySettings applySettings}, no need to call this
 * function first.
 * 
 * Example:
 * <pre>
 * function myRootFormatter(oValue1, oValue2, sFullName, sGreeting, iAnswer) {
 *     return ...; //TODO compute something useful from the given values
 * }
 * 
 * oSupplierContext = oMetaModel.getMetaContext("/ProductSet('HT-1021')/ToSupplier");
 * oValueContext = oMetaModel.createBindingContext("com.sap.vocabularies.UI.v1.DataPoint/Value", oSupplierContext);
 * 
 * vPropertySetting =  sap.ui.model.odata.AnnotationHelper.createPropertySetting([
 *     sap.ui.model.odata.AnnotationHelper.format(oValueContext),
 *     "{path : 'meta>Value', formatter : 'sap.ui.model.odata.AnnotationHelper.simplePath'}",
 *     "{:= 'Mr. ' + ${/FirstName} + ' ' + ${/LastName}}",
 *     "hello, world!",
 *     42
 * ], myRootFormatter);
 * 
 * oControl.applySettings({"someProperty" : vPropertySetting});
 * </pre>
 * 
 * @param {any[]} vParts
 *   array of parts
 * @param {function} [fnRootFormatter]
 *   root formatter function; default: <code>Array.prototype.join(., " ")</code>
 *   in case of multiple parts, just like
 *   {@link sap.ui.model.CompositeBinding#getExternalValue getExternalValue}
 * @returns {any|object}
 *   constant value or binding info object for a property as expected by
 *   {@link sap.ui.base.ManagedObject#applySettings applySettings}
 * @throws {Error}
 *   if some part has an unsupported type or refers to a function name which is not
 *   found
 * @public
 * @since 1.31.0
 * 
 * @memberof sap.ui.model.odata.AnnotationHelper
 */
sap.ui.model.odata.AnnotationHelper.createPropertySetting = function(vParts,fnRootFormatter) { return null; };

/**
 * A formatter function to be used in a complex binding inside an XML template view
 * in order to interpret OData V4 annotations. It knows about
 * <ul>
 *   <li> the "14.4 Constant Expressions" for "edm:Bool", "edm:Date",
 *   "edm:DateTimeOffset", "edm:Decimal", "edm:Float", "edm:Guid", "edm:Int",
 *   "edm:TimeOfDay".
 *   <li> the constant "14.4.11 Expression edm:String": This is turned into a fixed
 *   text (e.g. <code>"Width"</code>) or into a data binding expression (e.g. <code>
 *   "{/##/dataServices/schema/0/entityType/1/com.sap.vocabularies.UI.v1.FieldGroup#Dimensions/Data/0/Label/String}"
 *   </code>). Data binding expressions are used in case XML template processing has
 *   been started with the setting <code>bindTexts : true</code>. The purpose is to
 *   reference translatable texts from OData V4 annotations, especially for XML
 *   template processing at design time. Since 1.31.0, string constants that contain a
 *   simple binding <code>"{@i18n>...}"</code> to the hard-coded model name "@i18n"
 *   with arbitrary path are not turned into a fixed text, but kept as a data binding
 *   expression; this allows local annotation files to refer to a resource bundle for
 *   internationalization.
 *   <li> the dynamic "14.5.1 Comparison and Logical Operators": These are turned into
 *   expression bindings to perform the operations at run-time.
 *   <li> the dynamic "14.5.3 Expression edm:Apply":
 *   <ul>
 *     <li> "14.5.3.1.1 Function odata.concat": This is turned into a data binding
 *     expression relative to an entity.
 *     <li> "14.5.3.1.2 Function odata.fillUriTemplate": This is turned into an
 *     expression binding to fill the template at run-time.
 *     <li> "14.5.3.1.3 Function odata.uriEncode": This is turned into an expression
 *     binding to encode the parameter at run-time.
 *     <li> Apply functions may be nested arbitrarily.
 *   </ul>
 *   <li> the dynamic "14.5.6 Expression edm:If": This is turned into an expression
 *   binding to be evaluated at run-time. The expression is a conditional expression
 *   like <code>"{=condition ? expression1 : expression2}"</code>.
 *   <li> the dynamic "14.5.10 Expression edm:Null": This is turned into a
 *   <code>null</code> value. In <code>odata.concat</code> it is ignored.
 *   <li> the dynamic "14.5.12 Expression edm:Path" and "14.5.13 Expression
 *   edm:PropertyPath": This is turned into a data binding relative to an entity,
 *   including type information and constraints as available from metadata,
 *   e.g. <code>"{path : 'Name', type : 'sap.ui.model.odata.type.String',
 *   constraints : {'maxLength':'255'}}"</code>.
 *   Depending on the used type, some additional constraints of this type are set:
 *   <ul>
 *     <li>Edm.DateTime: The "displayFormat" constraint is set to the value of the
 *     "sap:display-format" annotation of the referenced property.
 *     <li>Edm.Decimal: The "precision" and "scale" constraints are set to the values
 *     of the corresponding attributes of the referenced property. The "minimum",
 *     "maximum", "minimumExclusive" and "maximumExlusive" constraints are set to the
 *     values of the corresponding "Org.OData.Validation.V1" annotation of the
 *     referenced property; note that in this case only constant expressions are
 *     supported to determine the annotation value.
 *     <li>Edm.String: The "maxLength" constraint is set to the value of the
 *     corresponding attribute of the referenced property and the "isDigitSequence"
 *     constraint is set to the value of the
 *     "com.sap.vocabularies.Common.v1.IsDigitSequence" annotation of the referenced
 *     property; note that in this case only constant expressions are supported to
 *     determine the annotation value.
 *   </ul>
 * </ul>
 * Unsupported or incorrect values are turned into a string nevertheless, but indicated
 * as such. Proper escaping is used to make sure that data binding syntax is not
 * corrupted. An error describing the problem is logged to the console in such a case.
 * 
 * Example:
 * <pre>
 * &lt;Text text="{path: 'meta>Value', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}" />
 * </pre>
 * 
 * @param {sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context} oInterface
 *   the callback interface related to the current formatter call
 * @param {any} [vRawValue]
 *   the raw value from the meta model, which is embedded within an entity set or
 *   entity type:
 *   <ul>
 *   <li>if this function is used as formatter the value
 *   is provided by the framework</li>
 *   <li>if this function is called directly, provide the parameter only if it is
 *   already calculated</li>
 *   <li>if the parameter is omitted, it is calculated automatically through
 *   <code>oInterface.getObject("")</code></li>
 *   </ul>
 * @returns {string}
 *   the resulting string value to write into the processed XML
 * @public
 * 
 * @memberof sap.ui.model.odata.AnnotationHelper
 */
sap.ui.model.odata.AnnotationHelper.format = function(oInterface,vRawValue) { return ""; };

/**
 * A formatter function to be used in a complex binding inside an XML template view
 * in order to interpret OData V4 annotations. It knows about the following dynamic
 * expressions:
 * <ul>
 * <li>"14.5.2 Expression edm:AnnotationPath"</li>
 * <li>"14.5.11 Expression edm:NavigationPropertyPath"</li>
 * <li>"14.5.12 Expression edm:Path"</li>
 * <li>"14.5.13 Expression edm:PropertyPath"</li>
 * </ul>
 * It returns a binding expression for a navigation path in an OData model, starting at
 * an entity.
 * Currently supports navigation properties. Term casts and annotations of
 * navigation properties terminate the navigation path.
 * 
 * Examples:
 * <pre>
 * &lt;template:if test="{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.getNavigationPath'}">
 *     &lt;form:SimpleForm binding="{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.getNavigationPath'}" />
 * &lt;/template:if>
 * </pre>
 * 
 * @param {sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context} oInterface
 *   the callback interface related to the current formatter call
 * @param {any} [vRawValue]
 *   the raw value from the meta model, e.g. <code>{AnnotationPath :
 *   "ToSupplier/@com.sap.vocabularies.Communication.v1.Address"}</code> or <code>
 *   {AnnotationPath : "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"}</code>;
 *   embedded within an entity set or entity type;
 *   <ul>
 *   <li>if this function is used as formatter the value
 *   is provided by the framework</li>
 *   <li>if this function is called directly, provide the parameter only if it is
 *   already calculated</li>
 *   <li>if the parameter is omitted, it is calculated automatically through
 *   <code>oInterface.getObject("")</code></li>
 *   </ul>
 * @returns {string}
 *   the resulting string value to write into the processed XML, e.g. "{ToSupplier}"
 *   or "{}" (in case no navigation is needed); returns "" in case the navigation path
 *   cannot be determined (this is treated as falsy in <code>template:if</code>
 *   statements!)
 * @public
 * 
 * @memberof sap.ui.model.odata.AnnotationHelper
 */
sap.ui.model.odata.AnnotationHelper.getNavigationPath = function(oInterface,vRawValue) { return ""; };

/**
 * Helper function for a <code>template:with</code> instruction that depending on how
 * it is called goes to the entity set with the given name or to the one determined
 * by the last navigation property. Supports the following dynamic expressions:
 * <ul>
 * <li>"14.5.2 Expression edm:AnnotationPath"</li>
 * <li>"14.5.11 Expression edm:NavigationPropertyPath"</li>
 * <li>"14.5.12 Expression edm:Path"</li>
 * <li>"14.5.13 Expression edm:PropertyPath"</li>
 * </ul>
 * 
 * Example:
 * <pre>
 *   &lt;template:with path="facet>Target" helper="sap.ui.model.odata.AnnotationHelper.gotoEntitySet" var="entitySet"/>
 *   &lt;template:with path="associationSetEnd>entitySet" helper="sap.ui.model.odata.AnnotationHelper.gotoEntitySet" var="entitySet"/>
 * </pre>
 * 
 * @param {sap.ui.model.Context} oContext
 *   a context which must point to a simple string or to an annotation (or annotation
 *   property) of type <code>Edm.AnnotationPath</code>,
 *   <code>Edm.NavigationPropertyPath</code>, <code>Edm.Path</code>, or
 *   <code>Edm.PropertyPath</code> embedded within an entity set or entity type;
 *   the context's model must be an {@link sap.ui.model.odata.ODataMetaModel}
 * @returns {string}
 *   the path to the entity set, or <code>undefined</code> if no such set is found. In
 *   this case, a warning is logged to the console.
 * @public
 * 
 * @memberof sap.ui.model.odata.AnnotationHelper
 */
sap.ui.model.odata.AnnotationHelper.gotoEntitySet = function(oContext) { return ""; };

/**
 * Helper function for a <code>template:with</code> instruction that goes to the
 * entity type with the qualified name which <code>oContext</code> points at.
 * 
 * Example: Assume that "entitySet" refers to an entity set within an OData meta model;
 * the helper function is then called on the "entityType" property of that entity set
 * (which holds the qualified name of the entity type) and in turn the path of that
 * entity type is assigned to the variable "entityType".
 * <pre>
 *   &lt;template:with path="entitySet>entityType" helper="sap.ui.model.odata.AnnotationHelper.gotoEntityType" var="entityType">
 * </pre>
 * 
 * @param {sap.ui.model.Context} oContext
 *   a context which must point to the qualified name of an entity type;
 *   the context's model must be an {@link sap.ui.model.odata.ODataMetaModel}
 * @returns {string}
 *   the path to the entity type with the given qualified name,
 *   or <code>undefined</code> if no such type is found. In this case, a warning is
 *   logged to the console.
 * @public
 * 
 * @memberof sap.ui.model.odata.AnnotationHelper
 */
sap.ui.model.odata.AnnotationHelper.gotoEntityType = function(oContext) { return ""; };

/**
 * Helper function for a <code>template:with</code> instruction that goes to the
 * function import with the name which <code>oContext</code> points at.
 * 
 * Example: Assume that "dataField" refers to a DataFieldForAction within an
 * OData meta model;
 * the helper function is then called on the "Action" property of that data field
 * (which holds an object with the qualified name of the function import in the
 * <code>String</code> property) and in turn the path of that function import
 * is assigned to the variable "function".
 * <pre>
 *   &lt;template:with path="dataField>Action"
 *   helper="sap.ui.model.odata.AnnotationHelper.gotoFunctionImport" var="function">
 * </pre>
 * @param {sap.ui.model.Context} oContext
 *   a context which must point to an object with a <code>String</code> property, which
 *   holds the qualified name of the function import;
 *   the context's model must be an {@link sap.ui.model.odata.ODataMetaModel}
 * @returns {string}
 *   the path to the function import with the given qualified name,
 *   or <code>undefined</code> if no function import is found. In this case, a warning
 *   is logged to the console.
 * @since 1.29.1
 * @public
 * 
 * @memberof sap.ui.model.odata.AnnotationHelper
 */
sap.ui.model.odata.AnnotationHelper.gotoFunctionImport = function(oContext) { return ""; };

/**
 * A formatter function to be used in a complex binding inside an XML template view
 * in order to interpret OData V4 annotations. It knows about the following dynamic
 * expressions:
 * <ul>
 * <li>"14.5.2 Expression edm:AnnotationPath"</li>
 * <li>"14.5.11 Expression edm:NavigationPropertyPath"</li>
 * <li>"14.5.12 Expression edm:Path"</li>
 * <li>"14.5.13 Expression edm:PropertyPath"</li>
 * </ul>
 * It returns the information whether the navigation path ends with an association end
 * with multiplicity "*". It throws an error if the navigation path has an association
 * end with multiplicity "*" which is not the last one.
 * Currently supports navigation properties. Term casts and annotations of
 * navigation properties terminate the navigation path.
 * 
 * Examples:
 * <pre>
 * &lt;template:if test="{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.isMultiple'}">
 * </pre>
 * 
 * @param {sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context} oInterface
 *   the callback interface related to the current formatter call
 * @param {any} [vRawValue]
 *   the raw value from the meta model, e.g. <code>{AnnotationPath :
 *   "ToSupplier/@com.sap.vocabularies.Communication.v1.Address"}</code> or <code>
 *   {AnnotationPath : "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"}</code>;
 *   embedded within an entity set or entity type;
 *   <ul>
 *   <li>if this function is used as formatter the value
 *   is provided by the framework</li>
 *   <li>if this function is called directly, provide the parameter only if it is
 *   already calculated</li>
 *   <li>if the parameter is omitted, it is calculated automatically through
 *   <code>oInterface.getObject("")</code></li>
 *   </ul>
 * @returns {string}
 *    <code>"true"</code> if the navigation path ends with an association end with
 *    multiplicity "*", <code>""</code> in case the navigation path cannot be
 *    determined, <code>"false"</code> otherwise (the latter are both treated as falsy
 *    in <code>template:if</code> statements!)
 * @throws {Error}
 *   if the navigation path has an association end with multiplicity "*" which is not
 *   the last one
 * @public
 * 
 * @memberof sap.ui.model.odata.AnnotationHelper
 */
sap.ui.model.odata.AnnotationHelper.isMultiple = function(oInterface,vRawValue) { return ""; };

/**
 * Helper function for a <code>template:with</code> instruction that resolves a dynamic
 * "14.5.2 Expression edm:AnnotationPath",
 * "14.5.11 Expression edm:NavigationPropertyPath", "14.5.12 Expression edm:Path" or
 * "14.5.13 Expression edm:PropertyPath".
 * Currently supports navigation properties and term casts.
 * 
 * Example:
 * <pre>
 *   &lt;template:with path="meta>Value" helper="sap.ui.model.odata.AnnotationHelper.resolvePath" var="target">
 * </pre>
 * 
 * @param {sap.ui.model.Context} oContext
 *   a context which must point to an annotation or annotation property of type
 *   <code>Edm.AnnotationPath</code>, <code>Edm.NavigationPropertyPath</code>,
 *   <code>Edm.Path</code> or <code>Edm.PropertyPath</code>, embedded within an entity
 *   set or entity type;
 *   the context's model must be an {@link sap.ui.model.odata.ODataMetaModel}
 * @returns {string}
 *   the path to the target, or <code>undefined</code> in case the path cannot be
 *   resolved. In this case, a warning is logged to the console.
 * @public
 * 
 * @memberof sap.ui.model.odata.AnnotationHelper
 */
sap.ui.model.odata.AnnotationHelper.resolvePath = function(oContext) { return ""; };

/**
 * Formatter function that is used in a complex binding inside an XML template view.
 * The function is used to interpret OData V4 annotations, supporting the same
 * annotations as {@link #.format format} but with a simplified output aimed at
 * design-time templating with smart controls.
 * 
 * In contrast to <code>format</code>, "14.5.12 Expression edm:Path" or
 * "14.5.13 Expression edm:PropertyPath" is turned into a simple binding path without
 * type or constraint information. In certain cases, a complex binding is required to
 * allow for proper escaping of the path.
 * 
 * Example:
 * <pre>
 *   &lt;sfi:SmartField value="{path: 'meta>Value', formatter: 'sap.ui.model.odata.AnnotationHelper.simplePath'}"/>
 * </pre>
 * 
 * @param {sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context} oInterface
 *   the callback interface related to the current formatter call
 * @param {any} [vRawValue]
 *   the raw value from the meta model, which is embedded within an entity set or
 *   entity type:
 *   <ul>
 *   <li>if this function is used as formatter the value
 *   is provided by the framework</li>
 *   <li>if this function is called directly, provide the parameter only if it is
 *   already calculated</li>
 *   <li>if the parameter is omitted, it is calculated automatically through
 *   <code>oInterface.getObject("")</code></li>
 *   </ul>
 * @returns {string}
 *   the resulting string value to write into the processed XML
 * @public
 * 
 * @memberof sap.ui.model.odata.AnnotationHelper
 */
sap.ui.model.odata.AnnotationHelper.simplePath = function(oInterface,vRawValue) { return ""; };


// ---- sap.ui.model.odata.BatchMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.odata.BatchMode.toString = function() { return ""; };

// ---- sap.ui.model.odata.CountMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.odata.CountMode.toString = function() { return ""; };

// ---- sap.ui.model.odata.Filter --------------------------------------------------------------------------

/**
 * Constructor for Filter
 * 
 * 
 * @class
 * Filter for the list binding
 * 
 * @param {string} sPath the binding path for this filter
 * @param {object[]} aValues Array of FilterOperators and their values: [{operator:"GE",value1:"val1"},{operator:"LE",value1:"val1"},{operator:"BT",value1:"val1",value2:"val2"}]
 * @param {boolean} [bAND=true] If true the values from aValues will be ANDed; otherwise ORed
 * @public
 * @extends sap.ui.base.Object
 * @deprecated Since 1.22. Please use the {@link sap.ui.model.Filter} instead.
 * 
 */
sap.ui.model.odata.Filter = function(sPath,aValues,bAND) {};
/**
 * Converts the <code>sap.ui.model.odata.Filter</code> into a
 * <code>sap.ui.model.Filter</code>.
 * 
 * @return {sap.ui.model.Filter} a <code>sap.ui.model.Filter</code> object
 * @public
 * 
 */
sap.ui.model.odata.Filter.prototype.convert = function() { return new sap.ui.model.Filter(); };

/**
 * Creates a new subclass of class sap.ui.model.odata.Filter with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.Filter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.odata.Filter.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.Filter.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.odata.ODataAnnotations --------------------------------------------------------------------------

/**
 * 
 * @param {string|string[]} aAnnotationURI The annotation-URL or an array of URLS that should be parsed and merged
 * @param {sap.ui.model.odata.ODataMetadata} oMetadata
 * @param {object} mParams
 * 
 * @class Implementation to access oData Annotations
 * @version
 * 1.48.4
 * 
 * @constructor
 * @public
 * @extends sap.ui.base.EventProvider
 * 
 */
sap.ui.model.odata.ODataAnnotations = function(aAnnotationURI,oMetadata,mParams) {};
/**
 * Adds either one URL or an array of URLs to be loaded and parsed. The result will be merged into the annotations
 * data which can be retrieved using the getAnnotations-method.
 * 
 * @param {string|string[]} vUrl Either one URL as string or an array of URL strings
 * @return {Promise} The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at
 *         least one failed to load. The argument is an object containing the annotations object, success (an array
 *         of sucessfully loaded URLs), fail (an array ob of failed URLs).
 * @public
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.addUrl = function(vUrl) { return null; };

/**
 * Attach event-handler <code>fnFunction</code> to the 'failed' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.odata.ODataAnnotations} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.attachFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataAnnotations(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'loaded' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.odata.ODataAnnotations} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.attachLoaded = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataAnnotations(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'failed' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataAnnotations} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.detachFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataAnnotations(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'loaded' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataAnnotations} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.detachLoaded = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataAnnotations(); };

/**
 * Creates a new subclass of class sap.ui.model.odata.ODataAnnotations with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataAnnotations.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event failed to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * 
 * @return {sap.ui.model.odata.ODataAnnotations} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.fireFailed = function(mArguments) { return new sap.ui.model.odata.ODataAnnotations(); };

/**
 * Fire event loaded to attached listeners.
 * 
 * @param {map} [mArguments] Map of arguments that will be given as parameters to teh event handler
 * @return {sap.ui.model.odata.ODataAnnotations} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.fireLoaded = function(mArguments) { return new sap.ui.model.odata.ODataAnnotations(); };

/**
 * returns the raw annotation data
 * 
 * @public
 * @returns {object} returns annotations data
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.getAnnotationsData = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.ui.model.odata.ODataAnnotations.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataAnnotations.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks whether annotations loading of at least one of the given URLs has already failed.
 * Note: For asynchronous annotations {@link #attachFailed} has to be used.
 * 
 * @public
 * @returns {boolean} whether annotations request has failed
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.isFailed = function() { return false; };

/**
 * Checks whether annotations from at least one source are available
 * 
 * @public
 * @returns {boolean} returns whether annotations is already loaded
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.isLoaded = function() { return false; };

/**
 * Set custom headers which are provided in a key/value map. These headers are used for all requests.
 * The Accept-Language header cannot be modified and is set using the Core's language setting.
 * 
 * To remove these headers simply set the mHeaders parameter to {}. Please also note that when calling this method
 * again all previous custom headers are removed unless they are specified again in the mCustomHeaders parameter.
 * 
 * @param {map} mHeaders the header name/value map.
 * @public
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.setHeaders = function(mHeaders) {  };

/**
 * Sets an XML document.
 * 
 * @param {object} oXMLDocument The XML document to parse for annotations
 * @param {string} sXMLContent The XML content as string to parse for annotations
 * @param {map} [mOptions] Additional options
 * @param {function} [mOptions.success] Success callback gets an objec as argument with the
 *                   properties "annotations" containing the parsed annotations and "xmlDoc"
 *                   containing the XML-Document that was returned by the request.
 * @param {function} [mOptions.error] Error callback gets an objec as argument with the
 *                   property "xmlDoc" containing the XML-Document that was returned by the
 *                   request and could not be correctly parsed.
 * @param {boolean}  [mOptions.fireEvents] If this option is set to true, events are fired as if the annotations
 *                   were loaded from a URL
 * @return {boolean} Whether or not parsing was successful
 * @public
 * 
 */
sap.ui.model.odata.ODataAnnotations.prototype.setXML = function(oXMLDocument,sXMLContent,mOptions) { return false; };


// ---- sap.ui.model.odata.ODataContextBinding --------------------------------------------------------------------------

/**
 * Constructor for odata.ODataContextBinding
 * 
 * 
 * @class
 * The ContextBinding is a specific binding for a setting context for the model
 * 
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {Object} oContext
 * @param {Object} [mParameters]
 * @abstract
 * @public
 * @extends sap.ui.model.ContextBinding
 * 
 */
sap.ui.model.odata.ODataContextBinding = function(oModel,sPath,oContext,mParameters) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.ODataContextBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataContextBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.odata.ODataContextBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataContextBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.odata.ODataListBinding --------------------------------------------------------------------------

/**
 * 
 * @class
 * List binding implementation for oData format.
 * 
 * @param {sap.ui.model.odata.ODataModel} oModel Model that this list binding belongs to
 * @param {string} sPath Path into the model data, relative to the given <code>oContext</code>
 * @param {sap.ui.model.Context} oContext Context that the <code>sPath</code> is based on
 * @param {array} [aSorters] Initial sort order (can be either a sorter or an array of sorters)
 * @param {array} [aFilters] Predefined filter/s (can be either a filter or an array of filters)
 * @param {object} [mParameters] A map which contains additional parameters for the binding
 * @param {string} [mParameters.expand] Value for the OData <code>$expand</code> query parameter which should be included in the request
 * @param {string} [mParameters.select] Value for the OData <code>$select</code> query parameter which should be included in the request
 * @param {map} [mParameters.custom] An optional map of custom query parameters. Custom parameters must not start with <code>$</code>
 * @param {sap.ui.model.odata.CountMode} [mParameters.countMode] Defines the count mode of this binding;
 *           if not specified, the default count mode of the <code>oModel</code> is applied
 * 
 * @public
 * @extends sap.ui.model.ListBinding
 * 
 */
sap.ui.model.odata.ODataListBinding = function(oModel,sPath,oContext,aSorters,aFilters,mParameters) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.ODataListBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataListBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * 
 * Filters the list.
 * 
 * When using sap.ui.model.Filter the filters are first grouped according to their binding path.
 * All filters belonging to a group are combined with OR and after that the
 * results of all groups are combined with AND.
 * Usually this means, all filters applied to a single table column
 * are combined with OR, while filters on different table columns are combined with AND.
 * Please note that a custom filter function is not supported.
 * 
 * @param {sap.ui.model.Filter[]|sap.ui.model.odata.Filter[]} aFilters Array of filter objects
 * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
 * @return {sap.ui.model.ListBinding} returns <code>this</code> to facilitate method chaining
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataListBinding.prototype.filter = function(aFilters,sFilterType) { return new sap.ui.model.ListBinding(); };

/**
 * Return contexts for the list
 * 
 * @param {int} [iStartIndex=0] the start index of the requested contexts
 * @param {int} [iLength] the requested amount of contexts
 * @param {int} [iThreshold=0]
 * @return {sap.ui.model.Context[]} the array of contexts for each row of the bound list
 * @protected
 * 
 */
sap.ui.model.odata.ODataListBinding.prototype.getContexts = function(iStartIndex,iLength,iThreshold) { return new Array(); };

/**
 * Get a download URL with the specified format considering the
 * sort/filter/custom parameters.
 * 
 * @param {string} sFormat Value for the $format Parameter
 * @return {string} URL which can be used for downloading
 * @since 1.24
 * @public
 * 
 */
sap.ui.model.odata.ODataListBinding.prototype.getDownloadUrl = function(sFormat) { return ""; };

/**
 * Returns a metadata object for class sap.ui.model.odata.ODataListBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataListBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Initialize binding. Fires a change if data is already available ($expand) or a refresh.
 * If metadata is not yet available, do nothing, method will be called again when
 * metadata is loaded.
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataListBinding.prototype.initialize = function() {  };

/**
 * Refreshes the binding, check whether the model data has been changed and fire change event
 * if this is the case. For server side models this should refetch the data from the server.
 * To update a control, even if no data has been changed, e.g. to reset a control after failed
 * validation, please use the parameter bForceUpdate.
 * 
 * @param {boolean} [bForceUpdate] Update the bound control even if no data has been changed
 * @public
 * 
 */
sap.ui.model.odata.ODataListBinding.prototype.refresh = function(bForceUpdate) {  };

/**
 * Sorts the list.
 * 
 * @param {sap.ui.model.Sorter|Array} aSorters the Sorter or an array of sorter objects object which define the sort order
 * @return {sap.ui.model.ListBinding} returns <code>this</code> to facilitate method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataListBinding.prototype.sort = function(aSorters) { return new sap.ui.model.ListBinding(); };


// ---- sap.ui.model.odata.ODataMessageParser --------------------------------------------------------------------------

/**
 * OData implementation of the sap.ui.core.message.MessageParser class. Parses message responses from the back-end.
 * 
 * 
 * @class
 * @classdesc
 *   OData implementation of the sap.ui.core.message.MessageParser class. Parses message responses from the back-end.
 * @extends sap.ui.core.message.MessageParser
 * @version 1.48.4
 * @public
 * @abstract
 * 
 */
sap.ui.model.odata.ODataMessageParser = function() {};
/**
 * Creates a new subclass of class sap.ui.model.odata.ODataMessageParser with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageParser.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataMessageParser.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the name of the header field that is used to parse the server messages
 * 
 * @return {string} The name of the header field
 * @public
 * 
 */
sap.ui.model.odata.ODataMessageParser.prototype.getHeaderField = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.model.odata.ODataMessageParser.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataMessageParser.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Parses the given response for messages, calculates the delta and fires the messageChange-event
 * on the MessageProcessor if messages are found.
 * 
 * @param {object} oResponse - The response from the server containing body and headers
 * @param {object} oRequest - The original request that lead to this response
 * @param {map} mGetEntities - A map containing the entities requested from the back-end as keys
 * @param {map} mChangeEntities - A map containing the entities changed on the back-end as keys
 * @return {void}
 * @public
 * 
 */
sap.ui.model.odata.ODataMessageParser.prototype.parse = function(oResponse,oRequest,mGetEntities,mChangeEntities) { return null; };

/**
 * Sets the header field name that should be used for parsing the JSON messages
 * 
 * @param {string} sFieldName - The name of the header field that should be used as source of the message object
 * @return {sap.ui.model.odata.ODataMessageParser} Instance reference for method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataMessageParser.prototype.setHeaderField = function(sFieldName) { return new sap.ui.model.odata.ODataMessageParser(); };


// ---- sap.ui.model.odata.ODataMetadata --------------------------------------------------------------------------

/**
 * Constructor for a new ODataMetadata.
 * 
 * 
 * @param {string} sMetadataURI needs the correct metadata uri including $metadata
 * @param {object} [mParams] optional map of parameters.
 * @param {boolean} [mParams.async=true] request is per default async
 * @param {string} [mParams.user] user for the service,
 * @param {string} [mParams.password] password for service
 * @param {object} [mParams.headers] (optional) map of custom headers which should be set with the request.
 * 
 * @class
 * Implementation to access oData metadata
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @extends sap.ui.base.EventProvider
 * 
 */
sap.ui.model.odata.ODataMetadata = function(sMetadataURI,mParams) {};
/**
 * Attach event-handler <code>fnFunction</code> to the 'failed' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.odata.ODataMetadata} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.attachFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataMetadata(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'loaded' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.odata.ODataMetadata} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.attachLoaded = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataMetadata(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'failed' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataMetadata} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.detachFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataMetadata(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'loaded' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataMetadata} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.detachLoaded = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataMetadata(); };

/**
 * Creates a new subclass of class sap.ui.model.odata.ODataMetadata with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataMetadata.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event failed to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * 
 * @return {sap.ui.model.odata.ODataMetadata} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.fireFailed = function(mArguments) { return new sap.ui.model.odata.ODataMetadata(); };

/**
 * Fire event loaded to attached listeners.
 * 
 * @return {sap.ui.model.odata.ODataMetadata} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.fireLoaded = function() { return new sap.ui.model.odata.ODataMetadata(); };

/**
 * Returns a metadata object for class sap.ui.model.odata.ODataMetadata.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataMetadata.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Return the metadata object
 * 
 * @return {Object} metdata object
 * @public
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.getServiceMetadata = function() { return null; };

/**
 * Get the the use-batch extension value if any
 * @return {boolean} true/false
 * @public
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.getUseBatch = function() { return false; };

/**
 * Checks whether metadata loading has already failed
 * 
 * @public
 * @returns {boolean} returns whether metadata request has failed
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.isFailed = function() { return false; };

/**
 * Checks whether metadata is available
 * 
 * @public
 * @returns {boolean} returns whether metadata is already loaded
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.isLoaded = function() { return false; };

/**
 * Returns a promise for the loaded state of the metadata
 * 
 * @public
 * @returns {Promise} returns a promise on metadata loaded state
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.loaded = function() { return null; };

/**
 * Refreshes the metadata creating a new request to the server.
 * Returns a new promise which can be resolved or rejected depending on the metadata loading state.
 * 
 * @returns {Promise} returns a promise on metadata loaded state
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataMetadata.prototype.refresh = function() { return null; };


// ---- sap.ui.model.odata.ODataMetaModel --------------------------------------------------------------------------

/**
 * DO NOT CALL this private constructor for a new <code>ODataMetaModel</code>,
 * but rather use {@link sap.ui.model.odata.ODataModel#getMetaModel getMetaModel} instead!
 * 
 * 
 * @param {sap.ui.model.odata.ODataMetadata} oMetadata
 *   the OData model's metadata object
 * @param {sap.ui.model.odata.ODataAnnotations} [oAnnotations]
 *   the OData model's annotations object
 * @param {object} [oODataModelInterface]
 *   the private interface object of the OData model which provides friend access to
 *   selected methods
 * @param {function} [oODataModelInterface.addAnnotationUrl]
 *   the {@link sap.ui.model.odata.v2.ODataModel#addAnnotationUrl addAnnotationUrl} method
 *   of the OData model, in case this feature is supported
 * @param {Promise} [oODataModelInterface.annotationsLoadedPromise]
 *   a promise which is resolved by the OData model once metadata and annotations have been
 *   fully loaded
 * 
 * @class Implementation of an OData meta model which offers a unified access to both OData V2
 * metadata and V4 annotations. It uses the existing {@link sap.ui.model.odata.ODataMetadata}
 * as a foundation and merges V4 annotations from the existing
 * {@link sap.ui.model.odata.ODataAnnotations} directly into the corresponding model element.
 * 
 * Also, annotations from the "http://www.sap.com/Protocols/SAPData" namespace are lifted up
 * from the <code>extensions</code> array and transformed from objects into simple properties
 * with an "sap:" prefix for their name. Note that this happens in addition, thus the
 * following example shows both representations. This way, such annotations can be addressed
 * via a simple relative path instead of searching an array.
 * <pre>
 * 		{
 * 			"name" : "BusinessPartnerID",
 * 			"extensions" : [{
 * 				"name" : "label",
 * 				"value" : "Bus. Part. ID",
 * 				"namespace" : "http://www.sap.com/Protocols/SAPData"
 * 			}],
 * 			"sap:label" : "Bus. Part. ID"
 * 		}
 * </pre>
 * 
 * As of 1.29.0, the corresponding vocabulary-based annotations for the following
 * "<a href="http://www.sap.com/Protocols/SAPData">SAP Annotations for OData Version 2.0</a>"
 * are added, if they are not yet defined in the V4 annotations:
 * <ul>
 * <li><code>label</code>;</li>
 * <li><code>creatable</code>, <code>deletable</code>, <code>deletable-path</code>,
 * <code>pageable</code>, <code>requires-filter</code>, <code>searchable</code>,
 * <code>topable</code>, <code>updatable</code> and <code>updatable-path</code> on entity sets;
 * </li>
 * <li><code>creatable</code> (since 1.41.0), <code>creatable-path</code> (since 1.41.0) and
 * <code>filterable</code> (since 1.39.0) on navigation properties;</li>
 * <li><code>aggregation-role</code> ("dimension" and "measure", both since 1.45.0),
 * <code>creatable</code>, <code>display-format</code> ("UpperCase" and "NonNegative"),
 * <code>field-control</code>, <code>filterable</code>, <code>filter-restriction</code>,
 * <code>heading</code>, <code>precision</code>, <code>quickinfo</code>,
 * <code>required-in-filter</code>, <code>sortable</code>, <code>text</code>, <code>unit</code>,
 * <code>updatable</code> and <code>visible</code> on properties;</li>
 * <li><code>semantics</code>; the following values are supported:
 * <ul>
 * <li>"bday", "city", "country", "email" (including support for types, for example
 * "email;type=home,pref"), "familyname", "givenname", "honorific", "middlename", "name",
 * "nickname", "note", "org", "org-unit", "org-role", "photo", "pobox", "region", "street",
 * "suffix", "tel" (including support for types, for example "tel;type=cell,pref"), "title" and
 * "zip" (mapped to V4 annotation <code>com.sap.vocabularies.Communication.v1.Contact</code>);
 * </li>
 * <li>"class", "dtend", "dtstart", "duration", "fbtype", "location", "status", "transp" and
 * "wholeday" (mapped to V4 annotation
 * <code>com.sap.vocabularies.Communication.v1.Event</code>);</li>
 * <li>"body", "from", "received", "sender" and "subject" (mapped to V4 annotation
 * <code>com.sap.vocabularies.Communication.v1.Message</code>);</li>
 * <li>"completed", "due", "percent-complete" and "priority" (mapped to V4 annotation
 * <code>com.sap.vocabularies.Communication.v1.Task</code>).</li>
 * </ul>
 * </ul>
 * For example:
 * <pre>
 * 		{
 * 			"name" : "BusinessPartnerID",
 * 			...
 * 			"sap:label" : "Bus. Part. ID",
 * 			"com.sap.vocabularies.Common.v1.Label" : {
 * 				"String" : "Bus. Part. ID"
 * 			}
 * 		}
 * </pre>
 * 
 * This model is read-only and thus only supports
 * {@link sap.ui.model.BindingMode.OneTime OneTime} binding mode. No events
 * ({@link sap.ui.model.Model#event:parseError parseError},
 * {@link sap.ui.model.Model#event:requestCompleted requestCompleted},
 * {@link sap.ui.model.Model#event:requestFailed requestFailed},
 * {@link sap.ui.model.Model#event:requestSent requestSent}) are fired!
 * 
 * Within the meta model, the objects are arranged in arrays.
 * <code>/dataServices/schema</code>, for example, is an array of schemas where each schema has
 * an <code>entityType</code> property with an array of entity types, and so on. So,
 * <code>/dataServices/schema/0/entityType/16</code> can be the path to the entity type with
 * name "Order" in the schema with namespace "MySchema". However, these paths are not stable:
 * If an entity type with lower index is removed from the schema, the path to
 * <code>Order</code> changes to <code>/dataServices/schema/0/entityType/15</code>.
 * 
 * To avoid problems with changing indexes, {@link sap.ui.model.Model#getObject getObject} and
 * {@link sap.ui.model.Model#getProperty getProperty} support XPath-like queries for the
 * indexes (since 1.29.1). Each index can be replaced by a query in square brackets. You can,
 * for example, address the schema using the path
 * <code>/dataServices/schema/[${namespace}==='MySchema']</code> or the entity using
 * <code>/dataServices/schema/[${namespace}==='MySchema']/entityType/[sap.ui.core==='Order']</code>.
 * 
 * The syntax inside the square brackets is the same as in expression binding. The query is
 * executed for each object in the array until the result is true (truthy) for the first time.
 * This object is then chosen.
 * 
 * <b>BEWARE:</b> Access to this OData meta model will fail before the promise returned by
 * {@link #loaded loaded} has been resolved!
 * @version 1.48.4
 * @extends sap.ui.model.MetaModel
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.ODataMetaModel = function(oMetadata,oAnnotations,oODataModelInterface) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.ODataMetaModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.MetaModel.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataMetaModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the OData meta model context corresponding to the given OData model path.
 * 
 * @param {string} [sPath]
 *   an absolute path pointing to an entity or property, e.g.
 *   "/ProductSet(1)/ToSupplier/BusinessPartnerID"; this equals the
 *   <a href="http://www.odata.org/documentation/odata-version-2-0/uri-conventions#ResourcePath">
 *   resource path</a> component of a URI according to OData V2 URI conventions
 * @returns {sap.ui.model.Context}
 *   the context for the corresponding metadata object, i.e. an entity type or its property,
 *   or <code>null</code> in case no path is given
 * @throws {Error} in case no context can be determined
 * @public
 * 
 */
sap.ui.model.odata.ODataMetaModel.prototype.getMetaContext = function(sPath) { return new sap.ui.model.Context(); };

/**
 * Returns a metadata object for class sap.ui.model.odata.ODataMetaModel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataMetaModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the OData association end corresponding to the given entity type's navigation
 * property of given name.
 * 
 * @param {object} oEntityType
 *   an entity type as returned by {@link #getODataEntityType getODataEntityType}
 * @param {string} sName
 *   the name of a navigation property within this entity type
 * @returns {object}
 *   the OData association end or <code>null</code> if no such association end is found
 * @public
 * 
 */
sap.ui.model.odata.ODataMetaModel.prototype.getODataAssociationEnd = function(oEntityType,sName) { return new Object(); };

/**
 * Returns the OData association <em>set</em> end corresponding to the given entity type's
 * navigation property of given name.
 * 
 * @param {object} oEntityType
 *   an entity type as returned by {@link #getODataEntityType getODataEntityType}
 * @param {string} sName
 *   the name of a navigation property within this entity type
 * @returns {object}
 *   the OData association set end or <code>null</code> if no such association set end is found
 * @public
 * 
 */
sap.ui.model.odata.ODataMetaModel.prototype.getODataAssociationSetEnd = function(oEntityType,sName) { return new Object(); };

/**
 * Returns the OData complex type with the given qualified name, either as a path or as an
 * object, as indicated.
 * 
 * @param {string} sQualifiedName
 *   a qualified name, e.g. "ACME.Address"
 * @param {boolean} [bAsPath=false]
 *   determines whether the complex type is returned as a path or as an object
 * @returns {object|string}
 *   (the path to) the complex type with the given qualified name; <code>undefined</code> (for
 *   a path) or <code>null</code> (for an object) if no such type is found
 * @public
 * 
 */
sap.ui.model.odata.ODataMetaModel.prototype.getODataComplexType = function(sQualifiedName,bAsPath) { return new Object(); };

/**
 * Returns the OData default entity container.
 * 
 * @param {boolean} [bAsPath=false]
 *   determines whether the entity container is returned as a path or as an object
 * @returns {object|string}
 *   (the path to) the default entity container; <code>undefined</code> (for a path) or
 *   <code>null</code> (for an object) if no such container is found
 * @public
 * 
 */
sap.ui.model.odata.ODataMetaModel.prototype.getODataEntityContainer = function(bAsPath) { return new Object(); };

/**
 * Returns the OData entity set with the given simple name from the default entity container.
 * 
 * @param {string} sName
 *   a simple name, e.g. "ProductSet"
 * @param {boolean} [bAsPath=false]
 *   determines whether the entity set is returned as a path or as an object
 * @returns {object|string}
 *   (the path to) the entity set with the given simple name; <code>undefined</code> (for a
 *   path) or <code>null</code> (for an object) if no such set is found
 * @public
 * 
 */
sap.ui.model.odata.ODataMetaModel.prototype.getODataEntitySet = function(sName,bAsPath) { return new Object(); };

/**
 * Returns the OData entity type with the given qualified name, either as a path or as an
 * object, as indicated.
 * 
 * @param {string} sQualifiedName
 *   a qualified name, e.g. "ACME.Product"
 * @param {boolean} [bAsPath=false]
 *   determines whether the entity type is returned as a path or as an object
 * @returns {object|string}
 *   (the path to) the entity type with the given qualified name; <code>undefined</code> (for a
 *   path) or <code>null</code> (for an object) if no such type is found
 * @public
 * 
 */
sap.ui.model.odata.ODataMetaModel.prototype.getODataEntityType = function(sQualifiedName,bAsPath) { return new Object(); };

/**
 * Returns the OData function import with the given simple or qualified name from the default
 * entity container or the respective entity container specified in the qualified name.
 * 
 * @param {string} sName
 *   a simple or qualified name, e.g. "Save" or "MyService.Entities/Save"
 * @param {boolean} [bAsPath=false]
 *   determines whether the function import is returned as a path or as an object
 * @returns {object|string}
 *   (the path to) the function import with the given simple name; <code>undefined</code> (for
 *   a path) or <code>null</code> (for an object) if no such function import is found
 * @public
 * @since 1.29.0
 * 
 */
sap.ui.model.odata.ODataMetaModel.prototype.getODataFunctionImport = function(sName,bAsPath) { return new Object(); };

/**
 * Returns the given OData type's property (not navigation property!) of given name.
 * 
 * If an array is given instead of a single name, it is consumed (via
 * <code>Array.prototype.shift</code>) piece by piece. Each element is interpreted as a
 * property name of the current type, and the current type is replaced by that property's type.
 * This is repeated until an element is encountered which cannot be resolved as a property name
 * of the current type anymore; in this case, the last property found is returned and
 * <code>vName</code> contains only the remaining names, with <code>vName[0]</code> being the
 * one which was not found.
 * 
 * Examples:
 * <ul>
 * <li> Get address property of business partner:
 * <pre>
 * var oEntityType = oMetaModel.getODataEntityType("GWSAMPLE_BASIC.BusinessPartner"),
 *     oAddressProperty = oMetaModel.getODataProperty(oEntityType, "Address");
 * oAddressProperty.name === "Address";
 * oAddressProperty.type === "GWSAMPLE_BASIC.CT_Address";
 * </pre>
 * </li>
 * <li> Get street property of address type:
 * <pre>
 * var oComplexType = oMetaModel.getODataComplexType("GWSAMPLE_BASIC.CT_Address"),
 *     oStreetProperty = oMetaModel.getODataProperty(oComplexType, "Street");
 * oStreetProperty.name === "Street";
 * oStreetProperty.type === "Edm.String";
 * </pre>
 * </li>
 * <li> Get address' street property directly from business partner:
 * <pre>
 * var aParts = ["Address", "Street"];
 * oMetaModel.getODataProperty(oEntityType, aParts) === oStreetProperty;
 * aParts.length === 0;
 * </pre>
 * </li>
 * <li> Trying to get address' foo property directly from business partner:
 * <pre>
 * aParts = ["Address", "foo"];
 * oMetaModel.getODataProperty(oEntityType, aParts) === oAddressProperty;
 * aParts.length === 1;
 * aParts[0] === "foo";
 * </pre>
 * </li>
 * </ul>
 * 
 * @param {object} oType
 *   a complex type as returned by {@link #getODataComplexType getODataComplexType}, or
 *   an entity type as returned by {@link #getODataEntityType getODataEntityType}
 * @param {string|string[]} vName
 *   the name of a property within this type (e.g. "Address"), or an array of such names (e.g.
 *   <code>["Address", "Street"]</code>) in order to drill-down into complex types;
 *   <b>BEWARE</b> that this array is modified by removing each part which is understood!
 * @param {boolean} [bAsPath=false]
 *   determines whether the property is returned as a path or as an object
 * @returns {object|string}
 *   (the path to) the last OData property found; <code>undefined</code> (for a path) or
 *   <code>null</code> (for an object) if no property was found at all
 * @public
 * 
 */
sap.ui.model.odata.ODataMetaModel.prototype.getODataProperty = function(oType,vName,bAsPath) { return new Object(); };

/**
 * Returns a <code>Promise</code> which is resolved with a map representing the
 * <code>com.sap.vocabularies.Common.v1.ValueList</code> annotations of the given property or
 * rejected with an error.
 * The key in the map provided on successful resolution is the qualifier of the annotation or
 * the empty string if no qualifier is defined. The value in the map is the JSON object for
 * the annotation. The map is empty if the property has no
 * <code>com.sap.vocabularies.Common.v1.ValueList</code> annotations.
 * 
 * @param {sap.ui.model.Context} oPropertyContext
 *   a model context for a structural property of an entity type or a complex type, as
 *   returned by {@link #getMetaContext getMetaContext}
 * @returns {Promise}
 *   a Promise that gets resolved as soon as the value lists as well as the required model
 *   elements have been loaded
 * @since 1.29.1
 * @public
 * 
 */
sap.ui.model.odata.ODataMetaModel.prototype.getODataValueLists = function(oPropertyContext) { return null; };

/**
 * Returns a promise which is fulfilled once the meta model data is loaded and can be used.
 * 
 * @public
 * @returns {Promise} a Promise
 * 
 */
sap.ui.model.odata.ODataMetaModel.prototype.loaded = function() { return null; };

/**
 * Refresh not supported by OData meta model!
 * 
 * @throws {Error}
 * @returns {void}
 * @public
 * 
 */
sap.ui.model.odata.ODataMetaModel.prototype.refresh = function() { return null; };

/**
 * Legacy syntax not supported by OData meta model!
 * 
 * @param {boolean} bLegacySyntax
 *   must not be true!
 * @throws {Error} if <code>bLegacySyntax</code> is true
 * @returns {void}
 * @public
 * 
 */
sap.ui.model.odata.ODataMetaModel.prototype.setLegacySyntax = function(bLegacySyntax) { return null; };


// ---- sap.ui.model.odata.ODataModel --------------------------------------------------------------------------

/**
 * Constructor for a new ODataModel.
 * 
 * 
 * @param {string} [sServiceUrl] base uri of the service to request data from; additional URL parameters appended here will be appended to every request
 * 								can be passed with the mParameters object as well: [mParameters.serviceUrl] A serviceURl is required!
 * @param {object} [mParameters] (optional) a map which contains the following parameter properties:
 * @param {boolean} [mParameters.json] if set true request payloads will be JSON, XML for false (default = false),
 * @param {string} [mParameters.user] user for the service,
 * @param {string} [mParameters.password] password for service,
 * @param {map} [mParameters.headers] a map of custom headers like {"myHeader":"myHeaderValue",...},
 * @param {boolean} [mParameters.tokenHandling] enable/disable XCSRF-Token handling (default = true),
 * @param {boolean} [mParameters.withCredentials] experimental - true when user credentials are to be included in a cross-origin request. Please note that this works only if all requests are asynchronous.
 * @param {object} [mParameters.loadMetadataAsync] (optional) determined if the service metadata request is sent synchronous or asynchronous. Default is false.
 * @param [mParameters.maxDataServiceVersion] (default = '2.0') please use the following string format e.g. '2.0' or '3.0'.
 * 									OData version supported by the ODataModel: '2.0',
 * @param {boolean} [mParameters.useBatch] when true all requests will be sent in batch requests (default = false),
 * @param {boolean} [mParameters.refreshAfterChange] enable/disable automatic refresh after change operations: default = true,
 * @param  {string|string[]} [mParameters.annotationURI] The URL (or an array of URLs) from which the annotation metadata should be loaded,
 * @param {boolean} [mParameters.loadAnnotationsJoined] Whether or not to fire the metadataLoaded-event only after annotations have been loaded as well,
 * @param {map} [mParameters.serviceUrlParams] map of URL parameters - these parameters will be attached to all requests,
 * @param {map} [mParameters.metadataUrlParams] map of URL parameters for metadata requests - only attached to $metadata request.
 * @param {string} [mParameters.defaultCountMode] sets the default count mode for the model. If not set, sap.ui.model.odata.CountMode.Both is used.
 * @param {map} [mParameters.metadataNamespaces] a map of namespaces (name => URI) used for parsing the service metadata.
 * @param {boolean} [mParameters.skipMetadataAnnotationParsing] Whether to skip the automated loading of annotations from the metadata document. Loading annotations from metadata does not have any effects (except the lost performance by invoking the parser) if there are not annotations inside the metadata document
 * 
 * @class
 * Model implementation for oData format
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @deprecated Please use {@link sap.ui.model.odata.v2.ODataModel} instead.
 * @extends sap.ui.model.Model
 * 
 */
sap.ui.model.odata.ODataModel = function(sServiceUrl,mParameters) {};
/**
 * Adds (a) new URL(s) to the be parsed for OData annotations, which are then merged into the annotations object
 * which can be retrieved by calling the getServiceAnnotations()-method. If a $metadata url is passed the data will
 * also be merged into the metadata object, which can be reached by calling the getServiceMetadata() method.
 * 
 * @param {string|string[]} vUrl - Either one URL as string or an array or URL strings
 * @return {Promise} The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at least one fails to load.
 * 					 If this promise resolves it returns the following parameters:
 * 					 annotations: The annotation object
 * 					 entitySets: An array of EntitySet objects containing the newly merged EntitySets from a $metadata requests.
 * 								 the structure is the same as in the metadata object reached by the getServiceMetadata() method.
 * 								 For non $metadata requests the array will be empty.
 * 
 * @protected
 * 
 */
sap.ui.model.odata.ODataModel.prototype.addAnnotationUrl = function(vUrl) { return null; };

/**
 * Adds new xml content to be parsed for OData annotations, which are then merged into the annotations object which
 * can be retrieved by calling the getServiceAnnotations()-method.
 * 
 * @param {string} sXMLContent - The string that should be parsed as annotation XML
 * @param {boolean} [bSuppressEvents=false] - Whether not to fire annotationsLoaded event on the annotationParser
 * @return {Promise} The Promise to parse the given XML-String, resolved if parsed without errors, rejected if errors occur
 * @protected
 * 
 */
sap.ui.model.odata.ODataModel.prototype.addAnnotationXML = function(sXMLContent,bSuppressEvents) { return null; };

/**
 * Appends the change batch operations to the end of the batch stack. Only PUT, POST or DELETE batch operations should be included in the specified array.
 * The operations in the array will be included in a single changeset. To embed change operations in different change sets call this method with the corresponding change operations again.
 * If an illegal batch operation is added to the change set nothing will be performed and false will be returned.
 * 
 * @param {any[]} aChangeOperations an array of change batch operations created via <code>createBatchOperation</code> and <code>sMethod</code> = POST, PUT, MERGE or DELETE
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.addBatchChangeOperations = function(aChangeOperations) {  };

/**
 * Appends the read batch operations to the end of the batch stack. Only GET batch operations should be included in the specified array.
 * If an illegal batch operation is added to the batch nothing will be performed and false will be returned.
 * 
 * @param {any[]} aReadOperations an array of read batch operations created via <code>createBatchOperation</code> and <code>sMethod</code> = GET
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.addBatchReadOperations = function(aReadOperations) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'annotationsFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.attachAnnotationsFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'annotationsLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.attachAnnotationsLoaded = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'metadataFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.attachMetadataFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'metadataLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.attachMetadataLoaded = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Creates a new list binding for this model.
 * 
 * @param {string} sPath Binding path, either absolute or relative to a given <code>oContext</code>
 * @param {sap.ui.model.Context} [oContext=null] Binding context referring to this model
 * @param {sap.ui.model.Sorter|sap.ui.model.Sorter[]} [aSorters=null] Initial sort order, can be either a sorter or an array of sorters
 * @param {sap.ui.model.Filter|sap.ui.model.Filter[]} [aFilters=null] Predefined filter/s, can be either a filter or an array of filters
 * @param {map} [mParameters] Map which contains additional parameters for the binding
 * @param {string} [mParameters.expand] Value for the OData <code>$expand</code> query parameter which should be included in the request
 * @param {string} [mParameters.select] Value for the OData <code>$select</code> query parameter which should be included in the request
 * @param {map} [mParameters.custom] Optional map of custom query parameters (name/value pairs); names of custom parameters must not start with <code>$</code>
 * @param {sap.ui.model.odata.CountMode} [mParameters.countMode] Defines the count mode of the new binding;
 *           if not specified, the default count mode of this model will be applied
 * @returns {sap.ui.model.ListBinding} oBinding new list binding object
 * @see sap.ui.model.Model.prototype.bindList
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.bindList = function(sPath,oContext,aSorters,aFilters,mParameters) { return new sap.ui.model.ListBinding(); };

/**
 * Trigger a request to the function import odata service that was specified in the model constructor.
 * 
 * @param {string} sFunctionName A string containing the name of the function to call.
 * 		The name is concatenated to the sServiceUrl which was specified in the model constructor.
 * @param {map} [mParameters] Optional parameter map containing any of the following properties:
 * @param {string} [mParameters.method] A string containing the type of method to call this function with
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @param {object} [mParameters.context] If specified the sPath has to be relative to the path given with the context.
 * @param {function} [mParameters.success] a callback function which is called when the data has been successfully retrieved.
 * 		The handler can have the following parameters: <code>oData<code> and <code>response</code>.
 * @param {function} [mParameters.error] a callback function which is called when the request failed.
 * 		The handler can have the parameter: <code>oError</code> which contains additional error information.
 * @param {boolean} [mParameters.async=false] Whether or not to send the request asynchronously. Default: false
 * 		In case sMethod is "GET", the request is always asynchronous.
 * 		Please be advised that this feature is officially unsupported as using asynchronous
 * 		requests can lead to data inconsistencies if the application does not make sure that
 * 		the request was completed before continuing to work with the data.
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.callFunction = function(sFunctionName,mParameters) { return new Object(); };

/**
 * Removes all operations in the current batch.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.clearBatch = function() {  };

/**
 * Trigger a POST request to the odata service that was specified in the model constructor. Please note that deep creates are not supported
 * and may not work.
 * 
 * @param {string} sPath A string containing the path to the collection where an entry
 * 		should be created. The path is concatenated to the sServiceUrl
 * 		which was specified in the model constructor.
 * @param {object} oData data of the entry that should be created.
 * @param {map} [mParameters] Optional parameter map containing any of the following properties:
 * @param {object} [mParameters.context] If specified the sPath has to be relative to the path given with the context.
 * @param {function} [mParameters.success] a callback function which is called when the data has
 * 		been successfully retrieved. The handler can have the
 * 		following parameters: oData and response.
 * @param {function} [mParameters.error] a callback function which is called when the request failed.
 * 		The handler can have the parameter <code>oError</code> which contains additional error information.
 * @param {boolean} [mParameters.async=false] Whether the request should be done asynchronously. Default: false
 * 		Please be advised that this feature is officially unsupported as using asynchronous
 * 		requests can lead to data inconsistencies if the application does not make sure that
 * 		the request was completed before continuing to work with the data.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * 
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.create = function(sPath,oData,mParameters) { return new Object(); };

/**
 * Creates a single batch operation (read or change operation) which can be used in a batch request.
 * 
 * @param {string} sPath A string containing the path to the collection or entry where the batch operation should be performed.
 * 						The path is concatenated to the sServiceUrl which was specified in the model constructor.
 * @param {string} sMethod for the batch operation. Possible values are GET, PUT, MERGE, POST, DELETE
 * @param {object} [oData] optional data payload which should be created, updated, deleted in a change batch operation.
 * @param {object} [oParameters] optional parameter for additional information introduced in SAPUI5 1.9.1,
 * @param {string} [oParameters.sETag] an ETag which can be used for concurrency control. If it is specified,
 *                  it will be used in an If-Match-Header in the request to the server for this entry.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.createBatchOperation = function(sPath,sMethod,oData,oParameters) {  };

/**
 * Creates a new entry object which is described by the metadata of the entity type of the
 * specified sPath Name. A context object is returned which can be used to bind
 * against the newly created object.
 * 
 * For each created entry a request is created and stored in a request queue.
 * The request queue can be submitted by calling submitChanges. To delete a created
 * entry from the request queue call deleteCreateEntry.
 * 
 * The optional vProperties parameter can be used as follows:
 * 
 *   - vProperties could be an array containing the property names which should be included
 *     in the new entry. Other properties defined in the entity type are not included.
 *   - vProperties could be an object which includes the desired properties and the values
 *     which should be used for the created entry.
 * 
 * If vProperties is not specified, all properties in the entity type will be included in the
 * created entry.
 * 
 * If there are no values specified the properties will have undefined values.
 * 
 * Please note that deep creates (including data defined by navigationproperties) are not supported
 * 
 * @param {String} sPath Name of the path to the collection
 * @param {array|object} vProperties An array that specifies a set of properties or the entry
 * @return {sap.ui.model.Context} oContext A Context object that point to the new created entry.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.createEntry = function(sPath,vProperties) { return new sap.ui.model.Context(); };

/**
 * Creates the key from the given collection name and property map
 * 
 * @param {string} sCollection The name of the collection
 * @param {object} oKeyParameters The object containing at least all the key properties of the entity type
 * @param {boolean} bDecode Whether the URI decoding should be applied on the key
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.createKey = function(sCollection,oKeyParameters,bDecode) {  };

/**
 * Deletes a created entry from the request queue and the model.
 * @param {sap.ui.model.Context} oContext The context object pointing to the created entry
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.deleteCreatedEntry = function(oContext) {  };

/**
 * @see sap.ui.model.Model.prototype.destroy
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.destroy = function() {  };

/**
 * Detach event-handler <code>fnFunction</code> from the 'annotationsFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.detachAnnotationsFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'annotationsLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.detachAnnotationsLoaded = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'metadataFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.detachMetadataFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'metadataLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.detachMetadataLoaded = function(fnFunction,oListener) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Creates a new subclass of class sap.ui.model.odata.ODataModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event annotationsFailed to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * 
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataModel.prototype.fireAnnotationsFailed = function(mArguments) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Fire event annotationsLoaded to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {sap.ui.model.odata.ODataAnnotations} [mArguments.annotations]  the annotations object.
 * 
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataModel.prototype.fireAnnotationsLoaded = function(mArguments) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Fire event metadataFailed to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * 
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataModel.prototype.fireMetadataFailed = function(mArguments) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Fire event metadataLoaded to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {sap.ui.model.odata.ODataMetadata} [mArguments.metadata]  the metadata object.
 * 
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.ODataModel.prototype.fireMetadataLoaded = function(mArguments) { return new sap.ui.model.odata.ODataModel(); };

/**
 * Force no caching
 * @param {boolean} [bForceNoCache=false] whether to force no caching
 * @public
 * @deprecated The caching should be controlled by the backend by setting the correct cache control header
 * 
 */
sap.ui.model.odata.ODataModel.prototype.forceNoCache = function(bForceNoCache) {  };

/**
 * Return requested data as object if the data has already been loaded and stored in the model.
 * 
 * @param {string} sPath A string containing the path to the data object that should be returned.
 * @param {object} [oContext] the optional context which is used with the sPath to retrieve the requested data.
 * @param {boolean} [bIncludeExpandEntries=null] This parameter should be set when a URI or custom parameter
 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
 * If false the associated/expanded entry properties are removed and not included in the
 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.
 * 
 * @return {object} oData Object containing the requested data if the path is valid.
 * @public
 * @deprecated please use {@link #getProperty} instead
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getData = function(sPath,oContext,bIncludeExpandEntries) { return new Object(); };

/**
 * Returns the default count mode for retrieving the count of collections
 * 
 * @returns {sap.ui.model.odata.CountMode}
 * @since 1.20
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getDefaultCountMode = function() { return new sap.ui.model.odata.CountMode(); };

/**
 * Returns all headers and custom headers which are stored in the OData model.
 * @return {object} the header map
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getHeaders = function() { return new Object(); };

/**
 * Returns the key part from the entry URI or the given context or object
 * 
 * @param {object|sap.ui.model.Context} oObject The context or object
 * @param {boolean} bDecode Whether the URI decoding should be applied on the key
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getKey = function(oObject,bDecode) {  };

/**
 * Returns a metadata object for class sap.ui.model.odata.ODataModel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns an instance of an OData meta model which offers a unified access to both OData V2
 * metadata and V4 annotations. It uses the existing {@link sap.ui.model.odata.ODataMetadata}
 * as a foundation and merges V4 annotations from the existing
 * {@link sap.ui.model.odata.ODataAnnotations} directly into the corresponding model element.
 * 
 * <b>BEWARE:</b> Access to this OData meta model will fail before the promise returned by
 * {@link sap.ui.model.odata.ODataMetaModel#loaded loaded} has been resolved!
 * 
 * @public
 * @returns {sap.ui.model.odata.ODataMetaModel} The meta model for this ODataModel
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getMetaModel = function() { return new sap.ui.model.odata.ODataMetaModel(); };

/**
 * Returns the value for the property with the given <code>sPath</code>.
 * If the path points to a navigation property which has been loaded via $expand then the <code>bIncludeExpandEntries</code>
 * parameter determines if the navigation property should be included in the returned value or not.
 * Please note that this currently works for 1..1 navigation properties only.
 * 
 * 
 * @param {string} sPath the path/name of the property
 * @param {object} [oContext] the context if available to access the property value
 * @param {boolean} [bIncludeExpandEntries=null] This parameter should be set when a URI or custom parameter
 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
 * If false the associated/expanded entry properties are removed and not included in the
 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.
 * @type any
 * @return the value of the property
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getProperty = function(sPath,oContext,bIncludeExpandEntries) { return null; };

/**
 * Returns the current security token. If the token has not been requested from the server it will be requested first.
 * 
 * @returns {string} the CSRF security token
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getSecurityToken = function() { return ""; };

/**
 * Return the annotation object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the
 * metadata has not been loaded yet.
 * In this case attach to the <code>annotationsLoaded</code> event to get notified when the annotations are available and then call this function.
 * 
 * @return {Object} metdata object
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getServiceAnnotations = function() { return null; };

/**
 * Return the metadata object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the
 * metadata has not been loaded yet.
 * In this case attach to the <code>metadataLoaded</code> event to get notified when the metadata is available and then call this function.
 * 
 * @return {Object} metdata object
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.getServiceMetadata = function() { return null; };

/**
 * Checks if there exist pending changes in the model created by the setProperty method.
 * @return {boolean} true/false
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.hasPendingChanges = function() { return false; };

/**
 * Returns whether this model supports the $count on its collections
 * This method is deprecated, please use getDefaultCountMode instead.
 * 
 * @returns {boolean}
 * @deprecated
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.isCountSupported = function() { return false; };

/**
 * Trigger a GET request to the odata service that was specified in the model constructor.
 * The data will not be stored in the model. The requested data is returned with the response.
 * 
 * @param {string} sPath A string containing the path to the data which should
 * 		be retrieved. The path is concatenated to the sServiceUrl
 * 		which was specified in the model constructor.
 * @param {map} [mParameters] Optional parameter map containing any of the following properties:
 * @param {object} [mParameters.context] If specified the sPath has to be is relative to the path
 * 		given with the context.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @param {boolean} [mParameters.async=true] true for asynchronous requests.
 * @param {array} [mParameters.filters] an array of sap.ui.model.Filter to be included in the request URL
 * @param {array} [mParameters.sorters] an array of sap.ui.model.Sorter to be included in the request URL
 * @param {function} [mParameters.success] a callback function which is called when the data has
 * 		been successfully retrieved. The handler can have the
 * 		following parameters: oData and response.
 * @param {function} [mParameters.error] a callback function which is called when the request
 * 		failed. The handler can have the parameter: oError which contains
 * additional error information.
 * 
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.read = function(sPath,mParameters) { return new Object(); };

/**
 * Refresh the model.
 * This will check all bindings for updated data and update the controls if data has been changed.
 * 
 * @param {boolean} [bForceUpdate=false] Force update of controls
 * @param {boolean} [bRemoveData=false] If set to true then the model data will be removed/cleared.
 * 					Please note that the data might not be there when calling e.g. getProperty too early before the refresh call returned.
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.refresh = function(bForceUpdate,bRemoveData) {  };

/**
 * refreshes the metadata for model, e.g. in case the first request for metadata has failed
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.refreshMetadata = function() {  };

/**
 * refresh XSRF token by performing a GET request against the service root URL.
 * 
 * @param {function} [fnSuccess] a callback function which is called when the data has
 *            					 been successfully retrieved.
 * @param {function} [fnError] a callback function which is called when the request failed. The handler can have the parameter: oError which contains
 *  additional error information.
 * 
 * @param {boolean} [bAsync=false] true for asynchronous requests.
 * 
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.refreshSecurityToken = function(fnSuccess,fnError,bAsync) { return new Object(); };

/**
 * Trigger a DELETE request to the odata service that was specified in the model constructor.
 * 
 * @param {string} sPath A string containing the path to the data that should be removed.
 * 		The path is concatenated to the sServiceUrl which was specified in the model constructor.
 * @param {object} [mParameters] Optional, can contain the following attributes: oContext, fnSuccess, fnError, sETag:
 * @param {object} [mParameters.context] If specified the sPath has to be relative to the path given with the context.
 * @param {function} [mParameters.success]  a callback function which is called when the data has been successfully retrieved.
 * 		The handler can have the following parameters: <code>oData<code> and <code>response</code>.
 * @param {function} [mParameters.error] a callback function which is called when the request failed.
 * 		The handler can have the parameter: <code>oError</code> which contains additional error information.
 * @param {string} [mParameters.eTag] If specified, the If-Match-Header will be set to this Etag.
 * @param {object} [mParameters.payload] if specified, this optional variable can be used to pass a payload into the delete function,
 * 		e.g. if the entry which should be deleted has not been bound to any control, but has been retrieved via read, only.
 * @param {boolean} [mParameters.async=false] Whether the request should be done asynchronously.
 * 		Please be advised that this feature is officially unsupported as using asynchronous
 * 		requests can lead to data inconsistencies if the application does not make sure that
 * 		the request was completed before continuing to work with the data.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * 
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.remove = function(sPath,mParameters) { return new Object(); };

/**
 * 
 * Resets the collected changes by the setProperty method and reloads the data from the server.
 * 
 * @param {function} [fnSuccess] a callback function which is called when the data has
 *            					 been successfully resetted. The handler can have the
 *            	                 following parameters: oData and response.
 * @param {function} [fnError] a callback function which is called when the request failed
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.resetChanges = function(fnSuccess,fnError) {  };

/**
 * Sets whether this OData service supports $count on its collections.
 * This method is deprecated, please use setDefaultCountMode instead.
 * 
 * @param {boolean} bCountSupported
 * @deprecated
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.setCountSupported = function(bCountSupported) {  };

/**
 * Sets the default mode how to retrieve the item count for a collection in this model.
 * 
 * The count can be determined in the following ways
 * <ul>
 * <li>by sending a separate <code>$count</code> request</li>
 * <li>by adding parameter <code>$inlinecount=allpages</code> to one or all data requests</li>
 * <li>a combination of the previous two</li>
 * <li>not at all (questions about the size of the collection can't be answered then)</li>
 * </ul>
 * See {@link sap.ui.model.odata.CountMode} for all enumeration values and more details.
 * 
 * Note that a call to this method does not modify the count mode for existing list bindings,
 * only bindings that are created afterwards will use the new mode when no mode is defined at their creation.
 * 
 * If no default count mode is set for an <code>ODataModel</code> (v1), the mode <code>Both</code>
 * will be used for compatibility reasons.
 * 
 * @param {sap.ui.model.odata.CountMode} sCountMode The new default count mode for this model
 * @since 1.20
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.setDefaultCountMode = function(sCountMode) {  };

/**
 * Set custom headers which are provided in a key/value map. These headers are used for requests against the OData backend.
 * Private headers which are set in the ODataModel cannot be modified.
 * These private headers are: accept, accept-language, x-csrf-token, MaxDataServiceVersion, DataServiceVersion.
 * 
 * To remove these headers simply set the mCustomHeaders parameter to null. Please also note that when calling this method again all previous custom headers
 * are removed unless they are specified again in the mCustomHeaders parameter.
 * 
 * @param {object} mHeaders the header name/value map.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.setHeaders = function(mHeaders) {  };

/**
 * Sets a new value for the given property <code>sPropertyName</code> in the model without triggering a server request.
 *  This can be done by the submitChanges method.
 * 
 *  Note: Only one entry of one collection can be updated at once. Otherwise a fireRejectChange event is fired.
 * 
 *  Before updating a different entry the existing changes of the current entry have to be submitted or resetted by the
 *  corresponding methods: submitChanges, resetChanges.
 * 
 *  IMPORTANT: All pending changes are resetted in the model if the application triggeres any kind of refresh
 *  on that entry. Make sure to submit the pending changes first. To determine if there are any pending changes call the hasPendingChanges method.
 * 
 * @param {string}  sPath path of the property to set
 * @param {any}     oValue value to set the property to
 * @param {object} [oContext=null] the context which will be used to set the property
 * @param {boolean} [bAsyncUpdate] whether to update other bindings dependent on this property asynchronously
 * @return {boolean} true if the value was set correctly and false if errors occurred like the entry was not found or another entry was already updated.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.setProperty = function(sPath,oValue,oContext,bAsyncUpdate) { return false; };

/**
 * Enable/Disable automatic updates of all Bindings after change operations
 * @param {boolean} bRefreshAfterChange
 * @public
 * @since 1.16.3
 * 
 */
sap.ui.model.odata.ODataModel.prototype.setRefreshAfterChange = function(bRefreshAfterChange) {  };

/**
 * Enable/Disable XCSRF-Token handling
 * @param {boolean} [bTokenHandling=true] whether to use token handling or not
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.setTokenHandlingEnabled = function(bTokenHandling) {  };

/**
 * Enable/Disable batch for all requests
 * @param {boolean} [bUseBatch=false] whether the requests should be encapsulated in a batch request
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.setUseBatch = function(bUseBatch) {  };

/**
 * Submits the collected changes in the batch which were collected via <code>addBatchReadOperations</code> or <code>addBatchChangeOperations</code>.
 * The batch will be cleared afterwards. If the batch is empty no request will be performed and false will be returned.
 * Note: No data will be stored in the model.
 * 
 * @param {function} [fnSuccess] a callback function which is called when the batch request has
 *            					 been successfully sent. Note: There might have errors occured in the single batch operations. These errors can be accessed in the
 *            aErrorResponses parameter in the callback handler.
 *            The handler can have the
 *            	                 following parameters: oData, oResponse and aErrorResponses.
 * 
 * @param {function} [fnError] a callback function which is called when the batch request failed. The handler can have the parameter: oError which contains
 * additional error information.
 * @param {boolean} [bAsync] true for asynchronous request. Default is true.
 * 
 * @param {boolean} bImportData
 * @return {object} an object which has an <code>abort</code> function to abort the current request. Returns false if no request will be performed because the batch is empty.
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.submitBatch = function(fnSuccess,fnError,bAsync,bImportData) { return new Object(); };

/**
 * Submits the collected changes which were collected by the setProperty method. A MERGE request will be triggered to only update the changed properties.
 * If a URI with a $expand System Query Option was used then the expand entries will be removed from the collected changes.
 * Changes to this entries should be done on the entry itself. So no deep updates are supported.
 * 
 * @param {function} [fnSuccess] a callback function which is called when the data has
 *            					 been successfully updated. The handler can have the
 *            	                 following parameters: oData and response.
 * @param {function} [fnError] a callback function which is called when the request failed. The handler can have the parameter: oError which contains
 * additional error information
 * @param {object} [oParameters] optional parameter for additional information introduced in SAPUI5 1.9.1
 * @param {string} [oParameters.sETag] an ETag which can be used for concurrency control. If it is specified, it will be used in an If-Match-Header in the request to the server for this entry.
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.submitChanges = function(fnSuccess,fnError,oParameters) { return new Object(); };

/**
 * Trigger a PUT/MERGE request to the odata service that was specified in the model constructor. Please note that deep updates are not supported
 * and may not work. These should be done seperate on the entry directly.
 * 
 * @param {string} sPath A string containing the path to the data that should be updated.
 * 		The path is concatenated to the sServiceUrl which was specified
 * 		in the model constructor.
 * @param {object} oData data of the entry that should be updated.
 * @param {map} [mParameters] Optional, can contain the following attributes:
 * @param {object} [mParameters.context] If specified the sPath has to be is relative to the path given with the context.
 * @param {function} [mParameters.success] a callback function which is called when the data has been successfully updated.
 * @param {function} [mParameters.error] a callback function which is called when the request failed.
 * 		The handler can have the parameter <code>oError</code> which contains additional error information.
 * @param {boolean} [mParameters.merge=false] trigger a MERGE request instead of a PUT request to perform a differential update
 * @param {string} [mParameters.eTag] If specified, the If-Match-Header will be set to this Etag.
 * @param {boolean} [mParameters.async=false] Whether the request should be done asynchronously.
 * 		Please be advised that this feature is officially unsupported as using asynchronous
 * 		requests can lead to data inconsistencies if the application does not make sure that
 * 		the request was completed before continuing to work with the data.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * 
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 * 
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.update = function(sPath,oData,mParameters) { return new Object(); };

/**
 * update all bindings
 * @param {boolean} [bForceUpdate=false] If set to false an update  will only be done when the value of a binding changed.
 * @public
 * 
 */
sap.ui.model.odata.ODataModel.prototype.updateBindings = function(bForceUpdate) {  };


// ---- sap.ui.model.odata.ODataPropertyBinding --------------------------------------------------------------------------

/**
 * 
 * 
 * @class
 * Property binding implementation for oData format
 * 
 * @param {sap.ui.model.Model} oModel
 * @param {string} sPath
 * @param {sap.ui.model.Context} oContext
 * @param {object} [mParameters]
 * 
 * @public
 * @extends sap.ui.model.PropertyBinding
 * 
 */
sap.ui.model.odata.ODataPropertyBinding = function(oModel,sPath,oContext,mParameters) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.ODataPropertyBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataPropertyBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.odata.ODataPropertyBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.ODataPropertyBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the current value of the bound target
 * @return {object} the current value of the bound target
 * @protected
 * 
 */
sap.ui.model.odata.ODataPropertyBinding.prototype.getValue = function() { return new Object(); };

/**
 * Initialize the binding. The message should be called when creating a binding.
 * If metadata is not yet available, do nothing, method will be called again when
 * metadata is loaded.
 * 
 * @protected
 * 
 */
sap.ui.model.odata.ODataPropertyBinding.prototype.initialize = function() {  };


// ---- sap.ui.model.odata.ODataUtils --------------------------------------------------------------------------

/**
 * Compares the given OData values based on their type. All date and time types can also be
 * compared with a number. This number is then interpreted as the number of milliseconds that
 * the corresponding date or time object should hold.
 * 
 * @param {any} vValue1
 *   the first value to compare
 * @param {any} vValue2
 *   the second value to compare
 * @param {string} [bAsDecimal=false]
 *   if <code>true</code>, the string values <code>vValue1</code> and <code>vValue2</code> are
 *   compared as a decimal number (only sign, integer and fraction digits; no exponential
 *   format). Otherwise they are recognized by looking at their types.
 * @return {int}
 *   the result of the compare: <code>0</code> if the values are equal, <code>-1</code> if the
 *   first value is smaller, <code>1</code> if the first value is larger, <code>NaN</code> if
 *   they cannot be compared
 * @since 1.29.1
 * @public
 * 
 * @memberof sap.ui.model.odata.ODataUtils
 */
sap.ui.model.odata.ODataUtils.compare = function(vValue1,vValue2,bAsDecimal) { return 0; };

/**
 * Formats a JavaScript value according to the given
 * <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * EDM type</a>.
 * 
 * @param {any} vValue the value to format
 * @param {string} sType the EDM type (e.g. Edm.Decimal)
 * @return {string} the formatted value
 * @public
 * 
 * @memberof sap.ui.model.odata.ODataUtils
 */
sap.ui.model.odata.ODataUtils.formatValue = function(vValue,sType) { return ""; };

/**
 * Returns a comparator function optimized for the given EDM type.
 * 
 * @param {string} sEdmType
 *   the EDM type
 * @returns {function}
 *   the comparator function taking two values of the given type and returning <code>0</code>
 *   if the values are equal, <code>-1</code> if the first value is smaller, <code>1</code> if
 *   the first value is larger and <code>NaN</code> if they cannot be compared (e.g. one value
 *   is <code>null</code> or <code>undefined</code>)
 * @since 1.29.1
 * @public
 * 
 * @memberof sap.ui.model.odata.ODataUtils
 */
sap.ui.model.odata.ODataUtils.getComparator = function(sEdmType) { return function() {}; };

/**
 * Adds an origin to the given service URL.
 * If an origin is already present, it will only be replaced if the parameters object contains the flag "force: true".
 * In case the URL already contains URL parameters, these will be kept.
 * As a parameter, a sole alias is sufficient. The parameters vParameters.system and vParameters.client however have to be given in pairs.
 * In case all three origin specifying parameters are given (system/client/alias), the alias has precedence.
 * 
 * Examples:
 * setOrigin("/backend/service/url/", "DEMO_123");
 * - result: /backend/service/url;o=DEMO_123/
 * 
 * setOrigin("/backend/service/url;o=OTHERSYS8?myUrlParam=true&x=4", {alias: "DEMO_123", force: true});
 * - result /backend/service/url;o=DEMO_123?myUrlParam=true&x=4
 * 
 * setOrigin("/backend/service/url/", {system: "DEMO", client: 134});
 * - result /backend/service/url;o=sid(DEMO.134)/
 * 
 * @param {string} sServiceURL the URL which will be enriched with an origin
 * @param {object|string} vParameters if string then it is asumed its the system alias, else if the argument is an object then additional Parameters can be given
 * @param {string} vParameters.alias the system alias which will be used as the origin
 * @param {string} vParameters.system the system id which will be used as the origin
 * @param {string} vParameters.client the system's client
 * @param {string} vParameters.force setting this flag to 'true' overrides the already existing origin
 * 
 * @public
 * @since 1.30.7
 * @returns {string} the service URL with the added origin.
 * 
 * @memberof sap.ui.model.odata.ODataUtils
 */
sap.ui.model.odata.ODataUtils.setOrigin = function(sServiceURL,vParameters) { return ""; };


// ---- sap.ui.model.odata.OperationMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.odata.OperationMode.toString = function() { return ""; };

// ---- sap.ui.model.odata.type --------------------------------------------------------------------------


// ---- sap.ui.model.odata.type.Boolean --------------------------------------------------------------------------

/**
 * Constructor for an OData primitive type <code>Edm.Boolean</code>.
 * 
 * 
 * @class This class represents the OData primitive type <a
 * href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * <code>Edm.Boolean</code></a>.
 * 
 * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel}
 * this type is represented as a <code>boolean</code>.
 * 
 * @extends sap.ui.model.odata.type.ODataType
 * @version 1.48.4
 * @param {object} [oFormatOptions]
 *   format options as defined in the interface of {@link sap.ui.model.SimpleType}; this
 *   type ignores them since it does not support any format options
 * @param {object} [oConstraints]
 *   constraints; {@link #validateValue validateValue} throws an error if any constraint is
 *   violated
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.Boolean = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.Boolean with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Boolean.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Formats the given boolean value to the given target type.
 * 
 * @param {boolean} bValue
 *   the value to be formatted
 * @param {string} sTargetType
 *   the target type; may be "any", "boolean", "string", or a type with one of these types as
 *   its {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   If the target type (or its primitive type) is "string", the result is "Yes" or "No" in the
 *   current {@link sap.ui.core.Configuration#getLanguage language}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {boolean|string}
 *   the formatted output value in the target type; <code>undefined</code> or <code>null</code>
 *   are formatted to <code>null</code>
 * @throws {sap.ui.model.FormatException}
 *   if <code>sTargetType</code> is unsupported
 * @public
 * 
 */
sap.ui.model.odata.type.Boolean.prototype.formatValue = function(bValue,sTargetType) { return false; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.Boolean.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Boolean.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   the type's name
 * @public
 * 
 */
sap.ui.model.odata.type.Boolean.prototype.getName = function() { return ""; };

/**
 * Parses the given value from the given type to a boolean.
 * 
 * @param {boolean|string} vValue
 *   the value to be parsed; the empty string and <code>null</code> are parsed to
 *   <code>null</code>
 * @param {string} sSourceType
 *   the source type (the expected type of <code>vValue</code>); may be "boolean", "string", or
 *   a type with one of these types as its
 *   {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {boolean}
 *   the parsed value
 * @throws {sap.ui.model.ParseException}
 *   if <code>sSourceType</code> is unsupported or if the given string is neither "Yes" nor
 *   "No" in the current {@link sap.ui.core.Configuration#getLanguage language}.
 * @public
 * 
 */
sap.ui.model.odata.type.Boolean.prototype.parseValue = function(vValue,sSourceType) { return false; };

/**
 * Validates whether the given value in model representation is valid and meets the given
 * constraints.
 * 
 * @param {boolean} bValue
 *   the value to be validated
 * @returns {void}
 * @throws {sap.ui.model.ValidateException} if the value is not valid
 * @public
 * 
 */
sap.ui.model.odata.type.Boolean.prototype.validateValue = function(bValue) { return null; };


// ---- sap.ui.model.odata.type.Byte --------------------------------------------------------------------------

/**
 * Constructor for a primitive type <code>Edm.Byte</code>.
 * 
 * 
 * @class This class represents the OData primitive type <a
 * href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * <code>Edm.Byte</code></a>.
 * 
 * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel}
 * this type is represented as a <code>number</code>.
 * 
 * @extends sap.ui.model.odata.type.Int
 * @version 1.48.4
 * 
 * @constructor
 * @param {object} [oFormatOptions]
 *   format options as defined in {@link sap.ui.core.format.NumberFormat}
 * @param {object} [oConstraints]
 *   constraints; {@link sap.ui.model.odata.type.Int#validateValue validateValue} throws an
 *   error if any constraint is violated
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted
 * @public
 * @since 1.27.1
 * 
 */
sap.ui.model.odata.type.Byte = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.Byte with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Byte.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.Byte.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Byte.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   the type's name
 * @public
 * 
 */
sap.ui.model.odata.type.Byte.prototype.getName = function() { return ""; };

/**
 * Returns the type's supported range as object with properties <code>minimum</code> and
 * <code>maximum</code>.
 * 
 * @returns {object} the range
 * @protected
 * 
 */
sap.ui.model.odata.type.Byte.prototype.getRange = function() { return new Object(); };


// ---- sap.ui.model.odata.type.Date --------------------------------------------------------------------------

/**
 * Constructor for an OData primitive type <code>Edm.Date</code>.
 * 
 * 
 * @class This class represents the OData V4 primitive type <code>Edm.Date</code>.
 * 
 * In {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a
 * <code>string</code> in the format "yyyy-mm-dd".
 * 
 * @extends sap.ui.model.odata.type.ODataType
 * @version 1.48.4
 * @param {object} [oFormatOptions]
 *   format options as defined in {@link sap.ui.core.format.DateFormat}
 * @param {object} [oConstraints]
 *   constraints; {@link #validateValue validateValue} throws an error if any constraint is
 *   violated
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted
 * @public
 * @since 1.37.0
 * @see http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html
 * 
 */
sap.ui.model.odata.type.Date = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.Date with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Date.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Formats the given value to the given target type.
 * 
 * @param {string} sValue
 *   the value to be formatted
 * @param {string} sTargetType
 *   the target type; may be "any", "string", or a type with one of these types as its
 *   {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {string}
 *   the formatted output value in the target type; <code>undefined</code> or <code>null</code>
 *   are formatted to <code>null</code>
 * @throws {sap.ui.model.FormatException}
 *   if <code>sTargetType</code> is unsupported
 * @public
 * 
 */
sap.ui.model.odata.type.Date.prototype.formatValue = function(sValue,sTargetType) { return ""; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.Date.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Date.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   the type's name
 * @public
 * 
 */
sap.ui.model.odata.type.Date.prototype.getName = function() { return ""; };

/**
 * Parses the given value to a date.
 * 
 * @param {string} sValue
 *   the value to be parsed, maps <code>""</code> to <code>null</code>
 * @param {string} sSourceType
 *   the source type (the expected type of <code>sValue</code>); must be "string", or a type
 *   with "string" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {string}
 *   the parsed value
 * @throws {sap.ui.model.ParseException}
 *   if <code>sSourceType</code> is unsupported
 * @public
 * 
 */
sap.ui.model.odata.type.Date.prototype.parseValue = function(sValue,sSourceType) { return ""; };

/**
 * Validates whether the given value in model representation is valid and meets the
 * given constraints.
 * 
 * @param {string} sValue
 *   the value to be validated
 * @returns {void}
 * @throws {sap.ui.model.ValidateException}
 *   if the value is not valid
 * @public
 * 
 */
sap.ui.model.odata.type.Date.prototype.validateValue = function(sValue) { return null; };


// ---- sap.ui.model.odata.type.DateTime --------------------------------------------------------------------------

/**
 * Constructor for a primitive type <code>Edm.DateTime</code>.
 * 
 * 
 * @class This class represents the OData V2 primitive type <a
 * href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * <code>Edm.DateTime</code></a>.
 * 
 * If you want to display a date and a time, prefer {@link
 * sap.ui.model.odata.type.DateTimeOffset}, specifically designed for this purpose.
 * 
 * Use <code>DateTime</code> with the SAP-specific annotation <code>display-format=Date</code>
 * (resp. the constraint <code>displayFormat: "Date"</code>) to display only a date.
 * 
 * In {@link sap.ui.model.odata.v2.ODataModel} this type is represented as a
 * <code>Date</code>. With the constraint <code>displayFormat: "Date"</code>, the time zone is
 * UTF and the time part is ignored, otherwise it is a date/time value in local time.
 * 
 * @extends sap.ui.model.odata.type.DateTimeBase
 * @version 1.48.4
 * @param {object} [oFormatOptions]
 *   format options as defined in {@link sap.ui.core.format.DateFormat}
 * @param {object} [oConstraints]
 *   constraints; {@link sap.ui.model.odata.type.DateTimeBase#validateValue validateValue}
 *   throws an error if any constraint is violated
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted
 * @param {string} [oConstraints.displayFormat=undefined]
 *   may be "Date", in this case only the date part is used, the time part is always 00:00:00
 *   and the time zone is UTC to avoid time-zone-related problems
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.DateTime = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.DateTime with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.DateTimeBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.DateTime.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.DateTime.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.DateTime.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   the type's name
 * @public
 * 
 */
sap.ui.model.odata.type.DateTime.prototype.getName = function() { return ""; };


// ---- sap.ui.model.odata.type.DateTimeBase --------------------------------------------------------------------------

/**
 * Base constructor for the primitive types <code>Edm.DateTime</code> and
 * <code>Edm.DateTimeOffset</code>.
 * 
 * 
 * @param {object} [oFormatOptions]
 *   Type-specific format options; see subtypes
 * @param {object} [oConstraints]
 *   Constraints; {@link #validateValue validateValue} throws an error if any constraint is
 *   violated
 * @param {boolean} [oConstraints.isDateOnly=false]
 *   If <code>true</code>, only the date part is used, the time part is always 00:00:00 and
 *   the time zone is UTC to avoid time-zone-related problems
 * @param {boolean|string} [oConstraints.nullable=true]
 *   If <code>true</code>, the value <code>null</code> is accepted
 * @param {boolean} [oConstraints.precision=0]
 *   The number of decimal places allowed in the seconds portion of a valid string value
 *   (OData V4 only); only integer values between 0 and 12 are valid (since 1.37.0)
 * 
 * @abstract
 * @class This is an abstract base class for the OData primitive types
 *   <code>Edm.DateTime</code> and <code>Edm.DateTimeOffset</code>.
 * @extends sap.ui.model.odata.type.ODataType
 * @public
 * @since 1.27.0
 * @version 1.48.4
 * 
 */
sap.ui.model.odata.type.DateTimeBase = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.DateTimeBase with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.DateTimeBase.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Formats the given value to the given target type.
 * 
 * @param {Date} oValue
 *   The value to be formatted, which is represented in the model as a <code>Date</code>
 *   instance (OData V2)
 * @param {string} sTargetType
 *   The target type, may be "any", "string", or a type with one of these types as its
 *   {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {Date|string}
 *   The formatted output value in the target type; <code>undefined</code> or <code>null</code>
 *   are formatted to <code>null</code>
 * @throws {sap.ui.model.FormatException}
 *   If <code>sTargetType</code> is not supported
 * 
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.DateTimeBase.prototype.formatValue = function(oValue,sTargetType) { return null; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.DateTimeBase.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.DateTimeBase.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Parses the given value to a <code>Date</code> instance (OData V2).
 * 
 * @param {string} sValue
 *   The value to be parsed; the empty string and <code>null</code> are parsed to
 *   <code>null</code>
 * @param {string} sSourceType
 *   The source type (the expected type of <code>sValue</code>), must be "string", or a type
 *   with "string" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {Date}
 *   The parsed value
 * @throws {sap.ui.model.ParseException}
 *   If <code>sSourceType</code> is not supported or if the given string cannot be parsed to a
 *   Date
 * 
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.DateTimeBase.prototype.parseValue = function(sValue,sSourceType) { return null; };

/**
 * Validates whether the given value in model representation is valid and meets the
 * defined constraints.
 * 
 * @param {Date} oValue
 *   The value to be validated
 * @returns {void}
 * @throws {sap.ui.model.ValidateException}
 *   If the value is not valid
 * 
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.DateTimeBase.prototype.validateValue = function(oValue) { return null; };


// ---- sap.ui.model.odata.type.DateTimeOffset --------------------------------------------------------------------------

/**
 * Constructor for a primitive type <code>Edm.DateTimeOffset</code>.
 * 
 * 
 * @class This class represents the OData primitive type <a
 *   href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 *   <code>Edm.DateTimeOffset</code></a>.
 * 
 *   In {@link sap.ui.model.odata.v2.ODataModel} this type is represented as a
 *   <code>Date</code> instance in local time. In {@link sap.ui.model.odata.v4.ODataModel} this
 *   type is represented as a <code>string</code> like "2014-11-27T13:47:26Z". See parameter
 *   <code>oConstraints.V4</code> for more information.
 * 
 * @extends sap.ui.model.odata.type.DateTimeBase
 * @version 1.48.4
 * @param {object} [oFormatOptions]
 *   Format options as defined in {@link sap.ui.core.format.DateFormat}
 * @param {object} [oConstraints]
 *   Constraints; {@link sap.ui.model.odata.type.DateTimeBase#validateValue validateValue}
 *   throws an error if any constraint is violated
 * @param {boolean|string} [oConstraints.nullable=true]
 *   If <code>true</code>, the value <code>null</code> is accepted
 * @param {boolean} [oConstraints.precision=0]
 *   The number of decimal places allowed in the seconds portion of a valid string value
 *   (OData V4 only); only integer values between 0 and 12 are valid (since 1.37.0)
 * @param {boolean} [oConstraints.V4=false]
 *   Whether OData V4 semantics apply and the model representation is expected to be a
 *   <code>string</code> like "2014-11-27T13:47:26Z" (see {@link #parseValue} and
 *   {@link #validateValue}); this type automatically adapts itself whenever it is used within
 *   an OData V4 model via {@link sap.ui.model.odata.v4.ODataPropertyBinding#setType}.
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.DateTimeOffset = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.DateTimeOffset with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.DateTimeBase.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.DateTimeOffset.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Formats the given value to the given target type.
 * 
 * @param {Date|string} vValue
 *   The value to be formatted, which is represented in the model as a <code>Date</code>
 *   instance (OData V2) or as a string like "2014-11-27T13:47:26Z" (OData V4); both
 *   representations are accepted independent of the model's OData version
 * @param {string} sTargetType
 *   The target type, may be "any", "string", or a type with one of these types as its
 *   {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {Date|string}
 *   The formatted output value in the target type; <code>undefined</code> or <code>null</code>
 *   are formatted to <code>null</code>
 * @throws {sap.ui.model.FormatException}
 *   If <code>sTargetType</code> is not supported
 * 
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.DateTimeOffset.prototype.formatValue = function(vValue,sTargetType) { return null; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.DateTimeOffset.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.DateTimeOffset.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   The type's name
 * @public
 * 
 */
sap.ui.model.odata.type.DateTimeOffset.prototype.getName = function() { return ""; };

/**
 * Parses the given value to a <code>Date</code> instance (OData V2) or a string like
 * "2014-11-27T13:47:26Z" (OData V4), depending on the model's OData version.
 * 
 * @param {string} sValue
 *   The value to be parsed; the empty string and <code>null</code> are parsed to
 *   <code>null</code>
 * @param {string} sSourceType
 *   The source type (the expected type of <code>sValue</code>), must be "string", or a type
 *   with "string" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {Date|string}
 *   The parsed value
 * @throws {sap.ui.model.ParseException}
 *   If <code>sSourceType</code> is not supported or if the given string cannot be parsed to a
 *   Date
 * 
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.DateTimeOffset.prototype.parseValue = function(sValue,sSourceType) { return null; };

/**
 * Validates whether the given value in model representation is valid and meets the
 * defined constraints, depending on the model's OData version.
 * 
 * @param {any} vValue
 *   The value to be validated
 * @returns {void}
 * @throws {sap.ui.model.ValidateException}
 *   If the value is not valid
 * 
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.DateTimeOffset.prototype.validateValue = function(vValue) { return null; };


// ---- sap.ui.model.odata.type.Decimal --------------------------------------------------------------------------

/**
 * Constructor for a primitive type <code>Edm.Decimal</code>.
 * 
 * 
 * @class This class represents the OData primitive type <a
 * href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * <code>Edm.Decimal</code></a>.
 * 
 * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel}
 * this type is represented as a <code>string</code>. It never uses exponential format ("1e-5").
 * 
 * @extends sap.ui.model.odata.type.ODataType
 * @version 1.48.4
 * @param {object} [oFormatOptions]
 *   format options as defined in {@link sap.ui.core.format.NumberFormat}. In contrast to
 *   NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.
 *   Note that <code>maxFractionDigits</code> and <code>minFractionDigits</code> are set to
 *   the value of the constraint <code>scale</code> unless it is "variable". They can however
 *   be overwritten.
 * @param {object} [oConstraints]
 *   constraints; {@link #validateValue validateValue} throws an error if any constraint is
 *   violated
 * @param {string} [oConstraints.maximum]
 *   the maximum value allowed
 * @param {boolean} [oConstraints.maximumExclusive=false]
 *   if <code>true</code>, the maximum value itself is not allowed
 * @param {string} [oConstraints.minimum]
 *   the minimum value allowed
 * @param {boolean} [oConstraints.minimumExclusive=false]
 *   if <code>true</code>, the minimum value itself is not allowed
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted
 * @param {int|string} [oConstraints.precision=Infinity]
 *   the maximum number of digits allowed
 * @param {int|string} [oConstraints.scale=0]
 *   the maximum number of digits allowed to the right of the decimal point; the number must be
 *   less than <code>precision</code> (if given). As a special case, "variable" is supported.
 * 
 *   The number of digits to the right of the decimal point may vary from zero to
 *   <code>scale</code>, and the number of digits to the left of the decimal point may vary
 *   from one to <code>precision</code> minus <code>scale</code>.
 * 
 *   The number is always displayed with exactly <code>scale</code> digits to the right of the
 *   decimal point (unless <code>scale</code> is "variable").
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.Decimal = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.Decimal with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Decimal.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Formats the given value to the given target type. When formatting to "string" the type's
 * constraint <code>scale</code> is taken into account.
 * 
 * @param {string} sValue
 *   the value to be formatted, which is represented as a string in the model
 * @param {string} sTargetType
 *   the target type; may be "any", "float", "int", "string", or a type with one of these types
 *   as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {number|string}
 *   the formatted output value in the target type; <code>undefined</code> or <code>null</code>
 *   are formatted to <code>null</code>
 * @throws {sap.ui.model.FormatException}
 *   if <code>sTargetType</code> is unsupported
 * @public
 * 
 */
sap.ui.model.odata.type.Decimal.prototype.formatValue = function(sValue,sTargetType) { return 0.0; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.Decimal.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Decimal.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   the type's name
 * @public
 * 
 */
sap.ui.model.odata.type.Decimal.prototype.getName = function() { return ""; };

/**
 * Parses the given value, which is expected to be of the given type, to a decimal in
 * <code>string</code> representation.
 * 
 * @param {string|number} vValue
 *   the value to be parsed; the empty string and <code>null</code> are parsed to
 *   <code>null</code>
 * @param {string} sSourceType
 *   the source type (the expected type of <code>vValue</code>); may be "float", "int",
 *   "string", or a type with one of these types as its
 *   {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {string}
 *   the parsed value
 * @throws {sap.ui.model.ParseException}
 *   if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a
 *   Decimal
 * @public
 * 
 */
sap.ui.model.odata.type.Decimal.prototype.parseValue = function(vValue,sSourceType) { return ""; };

/**
 * Validates whether the given value in model representation is valid and meets the
 * defined constraints.
 * 
 * @param {string} sValue
 *   the value to be validated
 * @returns {void}
 * @throws {sap.ui.model.ValidateException} if the value is not valid
 * @public
 * 
 */
sap.ui.model.odata.type.Decimal.prototype.validateValue = function(sValue) { return null; };


// ---- sap.ui.model.odata.type.Double --------------------------------------------------------------------------

/**
 * Constructor for a primitive type <code>Edm.Double</code>.
 * 
 * 
 * @class This class represents the OData primitive type <a
 * href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * <code>Edm.Double</code></a>.
 * 
 * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel}
 * this type is represented as a <code>number</code>.
 * 
 * @extends sap.ui.model.odata.type.ODataType
 * @version 1.48.4
 * @param {object} [oFormatOptions]
 *   format options as defined in {@link sap.ui.core.format.NumberFormat}. In contrast to
 *   NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.
 * @param {object} [oConstraints]
 *   constraints; {@link #validateValue validateValue} throws an error if any constraint is
 *   violated
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted
 * 
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.Double = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.Double with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Double.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Formats the given value to the given target type. When formatting to "string", very large
 * or very small values are formatted to the exponential format (e.g. "-3.14 E+15").
 * 
 * @param {number|string} vValue
 *   the value to be formatted, which is represented as a number in the model
 * @param {string} sTargetType
 *   the target type; may be "any", "float", "int", "string", or a type with one of these types
 *   as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {number|string}
 *   the formatted output value in the target type; <code>undefined</code> or <code>null</code>
 *   are formatted to <code>null</code>
 * @throws {sap.ui.model.FormatException}
 *   if <code>sTargetType</code> is unsupported
 * @public
 * 
 */
sap.ui.model.odata.type.Double.prototype.formatValue = function(vValue,sTargetType) { return 0.0; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.Double.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Double.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   the type's name
 * @public
 * 
 */
sap.ui.model.odata.type.Double.prototype.getName = function() { return ""; };

/**
 * Parses the given value, which is expected to be of the given type, to an Edm.Double in
 * <code>number</code> representation.
 * 
 * @param {string|number} vValue
 *   the value to be parsed; the empty string and <code>null</code> are parsed to
 *   <code>null</code>; note that there is no way to enter <code>Infinity</code> or
 *   <code>NaN</code> values
 * @param {string} sSourceType
 *   the source type (the expected type of <code>vValue</code>); may be "float", "int",
 *   "string", or a type with one of these types as its
 *   {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {number}
 *   the parsed value
 * @throws {sap.ui.model.ParseException}
 *   if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a
 *   Double
 * @public
 * @since 1.29.0
 * 
 */
sap.ui.model.odata.type.Double.prototype.parseValue = function(vValue,sSourceType) { return 0.0; };

/**
 * Validates whether the given value in model representation is valid and meets the
 * defined constraints.
 * 
 * @param {number} fValue
 *   the value to be validated
 * @returns {void}
 * @throws {sap.ui.model.ValidateException} if the value is not valid
 * @public
 * @since 1.29.0
 * 
 */
sap.ui.model.odata.type.Double.prototype.validateValue = function(fValue) { return null; };


// ---- sap.ui.model.odata.type.Guid --------------------------------------------------------------------------

/**
 * Constructor for an OData primitive type <code>Edm.Guid</code>.
 * 
 * 
 * @class This class represents the OData primitive type <a
 * href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * <code>Edm.Guid</code></a>.
 * 
 * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel}
 * this type is represented as a <code>string</code>.
 * 
 * @extends sap.ui.model.odata.type.ODataType
 * @version 1.48.4
 * @param {object} [oFormatOptions]
 *   format options as defined in the interface of {@link sap.ui.model.SimpleType}; this
 *   type ignores them since it does not support any format options
 * @param {object} [oConstraints]
 *   constraints; {@link #validateValue validateValue} throws an error if any constraint is
 *   violated
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.Guid = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.Guid with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Guid.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Formats the given value to the given target type.
 * 
 * @param {string} sValue
 *   the value to be formatted
 * @param {string} sTargetType
 *   the target type; may be "any", "string", or a type with one of these types as its
 *   {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {string}
 *   the formatted output value in the target type; <code>undefined</code> or <code>null</code>
 *   are formatted to <code>null</code>
 * @throws {sap.ui.model.FormatException}
 *   if <code>sTargetType</code> is unsupported
 * @public
 * 
 */
sap.ui.model.odata.type.Guid.prototype.formatValue = function(sValue,sTargetType) { return ""; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.Guid.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Guid.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   the type's name
 * @public
 * 
 */
sap.ui.model.odata.type.Guid.prototype.getName = function() { return ""; };

/**
 * Parses the given value to a GUID.
 * 
 * @param {string} sValue
 *   the value to be parsed, maps <code>""</code> to <code>null</code>
 * @param {string} sSourceType
 *   the source type (the expected type of <code>sValue</code>); must be "string", or
 *   a type with "string" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {string}
 *   the parsed value
 * @throws {sap.ui.model.ParseException}
 *   if <code>sSourceType</code> is unsupported
 * @public
 * 
 */
sap.ui.model.odata.type.Guid.prototype.parseValue = function(sValue,sSourceType) { return ""; };

/**
 * Validates whether the given value in model representation is valid and meets the
 * given constraints.
 * 
 * @param {string} sValue
 *   the value to be validated
 * @returns {void}
 * @throws {sap.ui.model.ValidateException}
 *   if the value is not valid
 * @public
 * 
 */
sap.ui.model.odata.type.Guid.prototype.validateValue = function(sValue) { return null; };


// ---- sap.ui.model.odata.type.Int --------------------------------------------------------------------------

/**
 * Constructor for a new <code>Int</code>.
 * 
 * 
 * @class This is an abstract base class for integer-based
 * <a href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * OData primitive types</a> like <code>Edm.Int16</code> or <code>Edm.Int32</code>.
 * 
 * @extends sap.ui.model.odata.type.ODataType
 * @version 1.48.4
 * 
 * @constructor
 * @param {object} [oFormatOptions]
 *   type-specific format options; see subtypes
 * @param {object} [oConstraints]
 *   constraints; {@link #validateValue validateValue} throws an error if any constraint is
 *   violated
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.Int = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.Int with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Int.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Formats the given value to the given target type.
 * When formatting to <code>string</code> the format options are used.
 * 
 * @param {number} iValue
 *   the value in model representation to be formatted
 * @param {string} sTargetType
 *   the target type; may be "any", "int", "float", "string", or a type with one of these types
 *   as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {number|string}
 *   the formatted output value in the target type; <code>undefined</code> or <code>null</code>
 *   are formatted to <code>null</code>
 * @throws {sap.ui.model.FormatException}
 *   if <code>sTargetType</code> is unsupported
 * @public
 * 
 */
sap.ui.model.odata.type.Int.prototype.formatValue = function(iValue,sTargetType) { return 0.0; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.Int.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Int.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Parses the given value, which is expected to be of the given source type, to an Int in
 * number representation.
 * @param {number|string} vValue
 *   the value to be parsed. The empty string and <code>null</code> are parsed to
 *   <code>null</code>.
 * @param {string} sSourceType
 *   the source type (the expected type of <code>vValue</code>); may be "float", "int",
 *   "string", or a type with one of these types as its
 *   {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @throws {sap.ui.model.ParseException}
 *   if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to an
 *   integer type
 * @returns {number}
 *   the parsed value
 * @public
 * 
 */
sap.ui.model.odata.type.Int.prototype.parseValue = function(vValue,sSourceType) { return 0.0; };

/**
 * Validates whether the given value in model representation is valid and meets the
 * defined constraints.
 * @param {number} iValue
 *   the value to be validated
 * @returns {void}
 * @throws {sap.ui.model.ValidateException}
 *   if the value is not in the allowed range of Int or if it is of invalid type.
 * @public
 * 
 */
sap.ui.model.odata.type.Int.prototype.validateValue = function(iValue) { return null; };


// ---- sap.ui.model.odata.type.Int16 --------------------------------------------------------------------------

/**
 * Constructor for a primitive type <code>Edm.Int16</code>.
 * 
 * 
 * @class This class represents the OData primitive type <a
 * href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * <code>Edm.Int16</code></a>.
 * 
 * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel}
 * this type is represented as a <code>number</code>.
 * 
 * @extends sap.ui.model.odata.type.Int
 * @version 1.48.4
 * 
 * @constructor
 * @param {object} [oFormatOptions]
 *   format options as defined in {@link sap.ui.core.format.NumberFormat}. In contrast to
 *   NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.
 * @param {object} [oConstraints]
 *   constraints; {@link sap.ui.model.odata.type.Int#validateValue validateValue} throws an
 *   error if any constraint is violated
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.Int16 = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.Int16 with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Int16.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.Int16.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Int16.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   the type's name
 * @public
 * 
 */
sap.ui.model.odata.type.Int16.prototype.getName = function() { return ""; };

/**
 * Returns the type's supported range as object with properties <code>minimum</code> and
 * <code>maximum</code>.
 * 
 * @returns {object} the range
 * @protected
 * 
 */
sap.ui.model.odata.type.Int16.prototype.getRange = function() { return new Object(); };


// ---- sap.ui.model.odata.type.Int32 --------------------------------------------------------------------------

/**
 * Constructor for a primitive type <code>Edm.Int32</code>.
 * 
 * 
 * @class This class represents the OData primitive type <a
 * href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * <code>Edm.Int32</code></a>.
 * 
 * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel}
 * this type is represented as a <code>number</code>.
 * 
 * @extends sap.ui.model.odata.type.Int
 * @version 1.48.4
 * 
 * @constructor
 * @param {object} [oFormatOptions]
 *   format options as defined in {@link sap.ui.core.format.NumberFormat}. In contrast to
 *   NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.
 * @param {object} [oConstraints]
 *   constraints; {@link sap.ui.model.odata.type.Int#validateValue validateValue} throws an
 *   error if any constraint is violated
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.Int32 = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.Int32 with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Int32.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.Int32.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Int32.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   the type's name
 * @public
 * 
 */
sap.ui.model.odata.type.Int32.prototype.getName = function() { return ""; };

/**
 * Returns the type's supported range as object with properties <code>minimum</code> and
 * <code>maximum</code>.
 * 
 * @returns {object} the range
 * @protected
 * 
 */
sap.ui.model.odata.type.Int32.prototype.getRange = function() { return new Object(); };


// ---- sap.ui.model.odata.type.Int64 --------------------------------------------------------------------------

/**
 * Constructor for a primitive type <code>Edm.Int64</code>.
 * 
 * 
 * @class This class represents the OData primitive type <a
 * href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * <code>Edm.Int64</code></a>.
 * 
 * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel}
 * this type is represented as a <code>string</code>.
 * 
 * @extends sap.ui.model.odata.type.ODataType
 * @version 1.48.4
 * 
 * @constructor
 * @param {object} [oFormatOptions]
 *   format options as defined in {@link sap.ui.core.format.NumberFormat}. In contrast to
 *   NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.
 * @param {object} oConstraints
 *   constraints; {@link #validateValue validateValue} throws an error if any constraint is
 *   violated
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted
 * @public
 * @since 1.27.1
 * 
 */
sap.ui.model.odata.type.Int64 = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.Int64 with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Int64.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Formats the given value to the given target type.
 * 
 * @param {string} sValue
 *   the value to be formatted, which is represented as a string in the model
 * @param {string} sTargetType
 *   the target type; may be "any", "float", "int", "string", or a type with one of these types
 *   as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {number|string}
 *   the formatted output value in the target type; <code>undefined</code> or <code>null</code>
 *   are formatted to <code>null</code>
 * @throws {sap.ui.model.FormatException}
 *   if <code>sTargetType</code> is unsupported
 *   or when formatting to "int" or "float" and <code>sValue</code>
 *   exceeds <code>Number.MIN/MAX_SAFE_INTEGER</code>
 * @public
 * 
 */
sap.ui.model.odata.type.Int64.prototype.formatValue = function(sValue,sTargetType) { return 0.0; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.Int64.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Int64.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   the type's name
 * @public
 * 
 */
sap.ui.model.odata.type.Int64.prototype.getName = function() { return ""; };

/**
 * Parses the given value, which is expected to be of the given type, to an Int64 in
 * <code>string</code> representation.
 * 
 * @param {string|number} vValue
 *   the value to be parsed; the empty string and <code>null</code> are parsed to
 *   <code>null</code>
 * @param {string} sSourceType
 *   the source type (the expected type of <code>vValue</code>); may be "float", "int",
 *   "string", or a type with one of these types as its
 *   {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {string}
 *   the parsed value
 * @throws {sap.ui.model.ParseException}
 *   if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a
 *   Int64
 * @public
 * 
 */
sap.ui.model.odata.type.Int64.prototype.parseValue = function(vValue,sSourceType) { return ""; };

/**
 * Validates whether the given value in model representation is valid and meets the
 * defined constraints.
 * 
 * @param {string} sValue
 *   the value to be validated
 * @returns {void}
 * @throws {sap.ui.model.ValidateException} if the value is not valid
 * @public
 * 
 */
sap.ui.model.odata.type.Int64.prototype.validateValue = function(sValue) { return null; };


// ---- sap.ui.model.odata.type.ODataType --------------------------------------------------------------------------

/**
 * Constructor for a new <code>ODataType</code>.
 * 
 * 
 * @class This class is an abstract base class for all OData primitive types (see {@link
 * http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_The_edm:Documentation_Element
 * OData V4 Edm Types} and
 * {@link http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem
 * OData V2 Edm Types}). All subtypes implement the interface of
 * {@link sap.ui.model.SimpleType}. That means they implement next to the constructor:
 * <ul>
 * <li>{@link sap.ui.model.SimpleType#getName getName}</li>
 * <li>{@link sap.ui.model.SimpleType#formatValue formatValue}</li>
 * <li>{@link sap.ui.model.SimpleType#parseValue parseValue}</li>
 * <li>{@link sap.ui.model.SimpleType#validateValue validateValue}</li>
 * </ul>
 * 
 * All ODataTypes are immutable. All format options and constraints are given to the
 * constructor, they cannot be modified later.
 * 
 * All ODataTypes use a locale-specific message when throwing an error caused by invalid
 * user input (e.g. if {@link sap.ui.model.odata.type.Double#parseValue Double.parseValue}
 * cannot parse the given value to a number, or if any type's {@link #validateValue
 * validateValue} gets a <code>null</code>, but the constraint <code>nullable</code> is
 * <code>false</code>).
 * 
 * @extends sap.ui.model.SimpleType
 * @version 1.48.4
 * @param {object} [oFormatOptions]
 *   type-specific format options; see subtypes
 * @param {object} [oConstraints]
 *   type-specific constraints (e.g. <code>oConstraints.nullable</code>), see subtypes
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.ODataType = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.ODataType with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.ODataType.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * @see sap.ui.base.Object#getInterface
 * 
 * @returns {object} this
 * @public
 * 
 */
sap.ui.model.odata.type.ODataType.prototype.getInterface = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.ODataType.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.ODataType.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.odata.type.Raw --------------------------------------------------------------------------

/**
 * Constructor for a placeholder for all unsupported OData primitive types.
 * 
 * 
 * @param {object} [oFormatOptions]
 *   Must be <code>undefined</code>
 * @param {object} [oConstraints]
 *   Must be <code>undefined</code>
 * @throws {Error}
 *   In case any arguments are given
 * @class This class represents a placeholder for all unsupported OData primitive types. It can
 *   only be used to retrieve raw values "as is" (i.e. <code>formatValue(vValue, "any")</code>),
 *   but not to actually convert to or from any other representation or to validate.
 * @extends sap.ui.model.odata.type.ODataType
 * @public
 * @since 1.37.0
 * @version 1.48.4
 * 
 */
sap.ui.model.odata.type.Raw = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.Raw with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Raw.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Formats the given value to the given target type.
 * 
 * @param {any} vValue
 *   The raw value to be retrieved "as is"
 * @param {string} sTargetType
 *   The target type; must be "any"
 * @returns {any}
 *   The raw value "as is"
 * @throws {sap.ui.model.FormatException}
 *   If <code>sTargetType</code> is not "any"
 * 
 * @public
 * @see sap.ui.model.SimpleType#formatValue
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.type.Raw.prototype.formatValue = function(vValue,sTargetType) { return null; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.Raw.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Raw.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   The type's name
 * 
 * @public
 * @see sap.ui.model.Type#getName
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.type.Raw.prototype.getName = function() { return ""; };

/**
 * Method not supported
 * 
 * @throws {sap.ui.model.ParseException}
 * 
 * @public
 * @see sap.ui.model.SimpleType#parseValue
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.type.Raw.prototype.parseValue = function() {  };

/**
 * Method not supported
 * 
 * @throws {sap.ui.model.ValidateException}
 * 
 * @public
 * @see sap.ui.model.SimpleType#validateValue
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.type.Raw.prototype.validateValue = function() {  };


// ---- sap.ui.model.odata.type.SByte --------------------------------------------------------------------------

/**
 * Constructor for a primitive type <code>Edm.SByte</code>.
 * 
 * 
 * @class This class represents the OData primitive type <a
 * href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * <code>Edm.SByte</code></a>.
 * 
 * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel}
 * this type is represented as a <code>number</code>.
 * 
 * @extends sap.ui.model.odata.type.Int
 * @version 1.48.4
 * 
 * @constructor
 * @param {object} [oFormatOptions]
 *   format options as defined in {@link sap.ui.core.format.NumberFormat}
 * @param {object} [oConstraints]
 *   constraints; {@link sap.ui.model.odata.type.Int#validateValue validateValue} throws an
 *   error if any constraint is violated
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.SByte = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.SByte with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.SByte.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.SByte.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.SByte.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   the type's name
 * @public
 * 
 */
sap.ui.model.odata.type.SByte.prototype.getName = function() { return ""; };

/**
 * Returns the type's supported range as object with properties <code>minimum</code> and
 * <code>maximum</code>.
 * 
 * @returns {object} the range
 * @protected
 * 
 */
sap.ui.model.odata.type.SByte.prototype.getRange = function() { return new Object(); };


// ---- sap.ui.model.odata.type.Single --------------------------------------------------------------------------

/**
 * Constructor for a primitive type <code>Edm.Single</code>.
 * 
 * 
 * @class This class represents the OData primitive type <a
 * href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * <code>Edm.Single</code></a>.
 * 
 * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel}
 * this type is represented as a <code>number</code>.
 * 
 * @extends sap.ui.model.odata.type.ODataType
 * @version 1.48.4
 * @param {object} [oFormatOptions]
 *   format options as defined in {@link sap.ui.core.format.NumberFormat}. In contrast to
 *   NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.
 * @param {object} [oConstraints]
 *   constraints; {@link #validateValue validateValue} throws an error if any constraint is
 *   violated
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted
 * @public
 * @since 1.27.1
 * 
 */
sap.ui.model.odata.type.Single = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.Single with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Single.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Formats the given value to the given target type.
 * 
 * @param {string|number} vValue
 *   the value to be formatted, which is represented as a number in the model
 * @param {string} sTargetType
 *   the target type; may be "any", "float", "int", "string", or a type with one of these types
 *   as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {number|string}
 *   the formatted output value in the target type; <code>undefined</code> or <code>null</code>
 *   are formatted to <code>null</code>
 * @throws {sap.ui.model.FormatException}
 *   if <code>sTargetType</code> is unsupported
 * @public
 * 
 */
sap.ui.model.odata.type.Single.prototype.formatValue = function(vValue,sTargetType) { return 0.0; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.Single.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Single.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   the type's name
 * @public
 * 
 */
sap.ui.model.odata.type.Single.prototype.getName = function() { return ""; };

/**
 * Parses the given value, which is expected to be of the given type, to an Edm.Single in
 * <code>number</code> representation.
 * 
 * @param {string|number} vValue
 *   the value to be parsed; the empty string and <code>null</code> are parsed to
 *   <code>null</code>; note that there is no way to enter <code>Infinity</code> or
 *   <code>NaN</code> values
 * @param {string} sSourceType
 *   the source type (the expected type of <code>vValue</code>); may be "float", "int",
 *   "string", or a type with one of these types as its
 *   {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {number}
 *   the parsed value
 * @throws {sap.ui.model.ParseException}
 *   if <code>sSourceType</code> is unsupported or if the given string cannot be parsed to a
 *   Single
 * @public
 * @since 1.29.0
 * 
 */
sap.ui.model.odata.type.Single.prototype.parseValue = function(vValue,sSourceType) { return 0.0; };

/**
 * Validates whether the given value in model representation is valid and meets the
 * defined constraints.
 * 
 * @param {number} fValue
 *   the value to be validated
 * @returns {void}
 * @throws {sap.ui.model.ValidateException} if the value is not valid
 * @public
 * @since 1.29.0
 * 
 */
sap.ui.model.odata.type.Single.prototype.validateValue = function(fValue) { return null; };


// ---- sap.ui.model.odata.type.String --------------------------------------------------------------------------

/**
 * Constructor for an OData primitive type <code>Edm.String</code>.
 * 
 * 
 * @class This class represents the OData primitive type <a
 * href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * <code>Edm.String</code></a>.
 * 
 * In both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel}
 * this type is represented as a <code>string</code>.
 * 
 * @extends sap.ui.model.odata.type.ODataType
 * @version 1.48.4
 * @param {object} [oFormatOptions]
 *   format options as defined in the interface of {@link sap.ui.model.SimpleType}; this
 *   type ignores them since it does not support any format options
 * @param {object} [oConstraints]
 *   constraints; {@link #validateValue validateValue} throws an error if any constraint is
 *   violated
 * @param {boolean|string} [oConstraints.isDigitSequence=false]
 *   if <code>true</code>, the value is handled as a sequence of digits; while formatting
 *   leading zeros are removed from the value and while parsing the value is enhanced with
 *   leading zeros (if a maxLength constraint is given) or leading zeros are removed from the
 *   value (if no maxLength constraint is given); this constraint is supported since 1.35.0.
 *   To make this type behave as ABAP type NUMC, use
 *   <code>oConstraints.isDigitSequence=true</code> together with
 *   <code>oConstraints.maxLength</code>.
 * @param {int|string} [oConstraints.maxLength]
 *   the maximal allowed length of the string; unlimited if not defined
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted. The constraint
 *   <code>nullable=false</code> is interpreted as "input is mandatory"; empty user input is
 *   rejected then.
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.String = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.String with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.String.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Formats the given value to the given target type.
 * If <code>isDigitSequence</code> constraint of this type is set to <code>true</code> and the
 * target type is any or string and the given value contains only digits, the leading zeros are
 * truncated.
 * 
 * @param {string} sValue
 *   the value to be formatted
 * @param {string} sTargetType
 *   the target type; may be "any", "boolean", "float", "int" or "string".
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {string|number|boolean}
 *   the formatted output value in the target type; <code>undefined</code> is always formatted
 *   to <code>null</code>; <code>null</code> is formatted to "" if the target type is "string".
 * @throws {sap.ui.model.FormatException}
 *   if <code>sTargetType</code> is unsupported or the string cannot be formatted to the target
 *   type
 * @public
 * 
 */
sap.ui.model.odata.type.String.prototype.formatValue = function(sValue,sTargetType) { return ""; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.String.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.String.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   the type's name
 * @public
 * 
 */
sap.ui.model.odata.type.String.prototype.getName = function() { return ""; };

/**
 * Parses the given value which is expected to be of the given type to a string.
 * If <code>isDigitSequence</code> constraint of this type is set to <code>true</code> and
 * the parsed string is a sequence of digits, then the parsed string is either enhanced with
 * leading zeros, if <code>maxLength</code> constraint is given, or leading zeros are removed
 * from parsed string.
 * 
 * Note: An empty input string (<code>""</code>) is parsed to <code>null</code>. This value will
 * be rejected with a {@link sap.ui.model.ValidateException ValidateException} by
 * {@link #validateValue} if the constraint <code>nullable</code> is <code>false</code>.
 * 
 * @param {string|number|boolean} vValue
 *   the value to be parsed
 * @param {string} sSourceType
 *   the source type (the expected type of <code>vValue</code>).
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {string}
 *   the parsed value or <code>null</code> if <code>vValue</code> is <code>""</code>
 * @throws {sap.ui.model.ParseException}
 *   if <code>sSourceType</code> is unsupported
 * @public
 * 
 */
sap.ui.model.odata.type.String.prototype.parseValue = function(vValue,sSourceType) { return ""; };

/**
 * Validates whether the given value in model representation is valid and meets the
 * defined constraints.
 * 
 * @param {string} sValue
 *   the value to be validated
 * @returns {void}
 * @throws {sap.ui.model.ValidateException} if the value is not valid
 * @public
 * 
 */
sap.ui.model.odata.type.String.prototype.validateValue = function(sValue) { return null; };


// ---- sap.ui.model.odata.type.Time --------------------------------------------------------------------------

/**
 * Constructor for an OData primitive type <code>Edm.Time</code>.
 * 
 * 
 * @class This class represents the OData V2 primitive type <a
 * href="http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem">
 * <code>Edm.Time</code></a>.
 * 
 * In {@link sap.ui.model.odata.v2.ODataModel ODataModel} this type is represented as an
 * object with two properties:
 * <ul>
 * <li><code>__edmType</code> with the value "Edm.Time"
 * <li><code>ms</code> with the number of milliseconds since midnight
 * </ul>
 * 
 * @extends sap.ui.model.odata.type.ODataType
 * @version 1.48.4
 * @param {object} [oFormatOptions]
 *   format options as defined in {@link sap.ui.core.format.DateFormat}
 * @param {object} [oConstraints]
 *   constraints; {@link #validateValue validateValue} throws an error if any constraint is
 *   violated
 * @param {boolean|string} [oConstraints.nullable=true]
 *   if <code>true</code>, the value <code>null</code> is accepted
 * @public
 * @since 1.27.0
 * 
 */
sap.ui.model.odata.type.Time = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.Time with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Time.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Formats the given value to the given target type
 * 
 * @param {object} oValue
 *   the value in model representation to be formatted.
 * @param {string} oValue.__edmType
 *   the type has to be "Edm.Time"
 * @param {number} oValue.ms
 *   the time in milliseconds
 * @param {string} sTargetType
 *   the target type; may be "any", "string", or a type with one of these types as its
 *   {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {string}
 *   the formatted output value in the target type; <code>undefined</code> or <code>null</code>
 *   are formatted to <code>null</code>
 * @throws {sap.ui.model.FormatException}
 *   if <code>sTargetType</code> is unsupported
 * @public
 * 
 */
sap.ui.model.odata.type.Time.prototype.formatValue = function(oValue,sTargetType) { return ""; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.Time.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.Time.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   the type's name
 * @public
 * 
 */
sap.ui.model.odata.type.Time.prototype.getName = function() { return ""; };

/**
 * Parses the given value, which is expected to be of the given type, to a time object.
 * 
 * @param {string} sValue
 *   the value to be parsed, maps <code>""</code> to <code>null</code>
 * @param {string} sSourceType
 *   the source type (the expected type of <code>sValue</code>); must be "string", or a type
 *   with "string" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {object}
 *   the parsed value as described in {@link #formatValue formatValue}
 * @throws {sap.ui.model.ParseException}
 *   if <code>sSourceType</code> is unsupported
 * @public
 * 
 */
sap.ui.model.odata.type.Time.prototype.parseValue = function(sValue,sSourceType) { return new Object(); };

/**
 * Validates whether the given value in model representation is valid and meets the
 * defined constraints.
 * 
 * @param {object} oValue
 *   the value to be validated
 * @returns {void}
 * @throws {sap.ui.model.ValidateException} if the value is not valid
 * @public
 * 
 */
sap.ui.model.odata.type.Time.prototype.validateValue = function(oValue) { return null; };


// ---- sap.ui.model.odata.type.TimeOfDay --------------------------------------------------------------------------

/**
 * Constructor for an OData primitive type <code>Edm.TimeOfDay</code>.
 * 
 * 
 * @param {object} [oFormatOptions]
 *   Format options as defined in {@link sap.ui.core.format.DateFormat}
 * @param {object} [oConstraints]
 *   Constraints; {@link #validateValue validateValue} throws an error if any constraint is
 *   violated
 * @param {boolean} [oConstraints.nullable=true]
 *   If <code>true</code>, the value <code>null</code> is accepted
 * @param {number} [oConstraints.precision=0]
 *   The number of decimal places allowed in the seconds portion of a valid value; must be an
 *   integer between 0 and 12, otherwise the default value 0 is used.
 * @class This class represents the OData V4 primitive type {@link
 *   http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_The_edm:Documentation_Element
 *   <code>Edm.TimeOfDay</code>}.
 *   In {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a
 *   <code>string</code>.
 * @extends sap.ui.model.odata.type.ODataType
 * @public
 * @since 1.37.0
 * @version 1.48.4
 * 
 */
sap.ui.model.odata.type.TimeOfDay = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.type.TimeOfDay with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.TimeOfDay.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Formats the given value to the given target type.
 * 
 * @param {string} sValue
 *   The value to be formatted, which is represented as a string in the model
 * @param {string} sTargetType
 *   The target type, may be "any", "string", or a type with one of these types as its
 *   {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information
 * @returns {string}
 *   The formatted output value in the target type; <code>undefined</code> or <code>null</code>
 *   are formatted to <code>null</code>
 * @throws {sap.ui.model.FormatException}
 *   If <code>sValue</code> is not a valid OData V4 Edm.TimeOfDay value or if
 *   <code>sTargetType</code> is not supported
 * 
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.type.TimeOfDay.prototype.formatValue = function(sValue,sTargetType) { return ""; };

/**
 * Returns a metadata object for class sap.ui.model.odata.type.TimeOfDay.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.type.TimeOfDay.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the type's name.
 * 
 * @returns {string}
 *   The type's name
 * 
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.type.TimeOfDay.prototype.getName = function() { return ""; };

/**
 * Parses the given value, which is expected to be of the given type, to a string with an
 * OData V4 Edm.TimeOfDay value.
 * 
 * @param {string} sValue
 *   The value to be parsed, maps <code>""</code> to <code>null</code>
 * @param {string} sSourceType
 *   The source type (the expected type of <code>sValue</code>), must be "string", or a type
 *   with "string" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}.
 *   See {@link sap.ui.model.odata.type} for more information.
 * @returns {string}
 *   The parsed value
 * @throws {sap.ui.model.ParseException}
 *   If <code>sSourceType</code> is not supported or if the value is invalid and cannot be
 *   parsed
 * 
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.type.TimeOfDay.prototype.parseValue = function(sValue,sSourceType) { return ""; };

/**
 * Validates the given value in model representation and meets the type's constraints.
 * 
 * @param {string} sValue
 *   The value to be validated
 * @returns {void}
 * @throws {sap.ui.model.ValidateException}
 *   If the value is not valid
 * 
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.type.TimeOfDay.prototype.validateValue = function(sValue) { return null; };


// ---- sap.ui.model.odata.UpdateMethod --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.odata.UpdateMethod.toString = function() { return ""; };

// ---- sap.ui.model.odata.v2 --------------------------------------------------------------------------


// ---- sap.ui.model.odata.v2.ODataAnnotations --------------------------------------------------------------------------

/**
 * Creates a new instance of the ODataAnnotations annotation loader.
 * 
 * 
 * @param {sap.ui.model.odata.ODataMetadata} oMetadata Metadata object with the metadata information needed to parse the annotations
 * @param {map} mOptions Obligatory options
 * @param {string|map|string[]|map[]} mOptions.source One or several annotation sources. See {@link sap.ui.model.odata.v2.ODataAnnotations#addSource} for more details
 * @param {map} mOptions.headers A map of headers to be sent with every request. See {@link sap.ui.model.odata.v2.ODataAnnotations#setHeaders} for more details
 * @param {boolean} mOptions.skipMetadata If set to <code>true</code>, the metadata document will not be parsed for annotations;
 * @public
 * 
 * @class Annotation loader for OData V2 services
 * @version
 * 1.48.4
 * 
 * @public
 * @since 1.37.0
 * @extends sap.ui.base.EventProvider
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations = function(oMetadata,mOptions) {};
/**
 * Adds one or several sources to the annotation loader. Sources will be loaded instantly but merged only after
 * the previously added source has either been successfully merged or failed.
 * 
 * @param {string|string[]|ODataAnnotations~Source|ODataAnnotations~Source[]} vSource One or several
 *        annotation source(s). Can be either a string or a map of the type <code>ODataAnnotations~Source</code> or an array
 *        containing several (either strings or source objects).
 * @returns {Promise} The promise to (load,) parse and merge the given source(s). The Promise resolves on success
 *          with an array of maps containing properties <code>source</code> and <code>data</code>. See the parameters of the <code>success</code>
 *          event for more details. The promise fails in case at least one source could not be (loaded,) parsed or
 *          merged with an array of objects containing Errors and/or Success objects.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.addSource = function(vSource) { return null; };

/**
 * This event exists for compatibility with the old Annotation loader
 * Attaches the given callback to the <code>allFailed</code> event. This event is fired when no annotation from a group of
 * sources was successfully (loaded,) parsed and merged.
 * The parameter <code>result</code> will be set on the event argument and contains an array of Errors in the order in which
 * the sources had been added.
 * 
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The event callback. This function will be called in the context of the oListener
 *        object if given as the next argument.
 * @param {object} [oListener] Object to use as context of the callback. If empty, the global context is used.
 * @return {sap.ui.model.odata.v2.ODataAnnotations} <code>this</code>-reference to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.attachAllFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataAnnotations(); };

/**
 * Attaches the given callback to the <code>error</code> event, which is fired whenever a source cannot be loaded, parsed or
 * merged into the annotation data.
 * The following parameters will be set on the event object that is given to the callback function:
 *   <code>source</code> - A map containing the properties <code>type</code> - containing either "url" or "xml" - and <code>data</code> containing
 *              the data given as source, either a URL or an XML string depending on how the source was added.
 *   <code>error</code>  - An Error object describing the problem that occurred
 * 
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The event callback. This function will be called in the context of the oListener
 *        object if given as the next argument.
 * @param {object} [oListener] Object to use as context of the callback. If empty, the global context is used.
 * @return {sap.ui.model.odata.v2.ODataAnnotations} <code>this</code>-reference to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.attachError = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataAnnotations(); };

/**
 * Attaches the given callback to the <code>failed</code> event. This event is fired when at least one annotation from a group
 * of sources was not successfully (loaded,) parsed or merged.
 * The parameter <code>result</code> will be set on the event argument and contains an array of Errors in the order in which
 * the sources had been added.
 * 
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The event callback. This function will be called in the context of the oListener
 *        object if given as the next argument.
 * @param {object} [oListener] Object to use as context of the callback. If empty, the global context is used.
 * @return {sap.ui.model.odata.v2.ODataAnnotations} <code>this</code>-reference to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.attachFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataAnnotations(); };

/**
 * Attaches the given callback to the <code>loaded</code> event. This event is fired when all annotations from a group of
 * sources was successfully (loaded,) parsed and merged.
 * The parameter <code>result</code> will be set on the event argument and contains an array of all loaded sources as well
 * as Errors in the order in which they had been added.
 * 
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The event callback. This function will be called in the context of the oListener
 *        object if given as the next argument.
 * @param {object} [oListener] Object to use as context of the callback. If empty, the global context is used.
 * @return {sap.ui.model.odata.v2.ODataAnnotations} <code>this</code>-reference to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.attachLoaded = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataAnnotations(); };

/**
 * This event exists for compatibility with the old Annotation loader
 * Attaches the given callback to the <code>someLoaded</code> event. This event is fired when at least one annotation from a
 * group of sources was successfully (loaded,) parsed and merged.
 * The parameter <code>result</code> will be set on the event argument and contains an array of all loaded sources as well
 * as Errors in the order in which they had been added.
 * 
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The event callback. This function will be called in the context of the oListener
 *        object if given as the next argument.
 * @param {object} [oListener] Object to use as context of the callback. If empty, the global context is used.
 * @return {sap.ui.model.odata.v2.ODataAnnotations} <code>this</code>-reference to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.attachSomeLoaded = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataAnnotations(); };

/**
 * Attaches the given callback to the <code>success</code> event, which is fired whenever a source has been successfully
 * (loaded,) parsed and merged into the annotation data.
 * The following parameters will be set on the event object that is given to the callback function:
 *   <code>source</code> - A map containing the properties <code>type</code> - containing either "url" or "xml" - and <code>data</code> containing
 *              the data given as source, either a URL or an XML string depending on how the source was added.
 * 
 * @param {object} [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function} fnFunction The event callback. This function will be called in the context of the oListener
 *        object if given as the next argument.
 * @param {object} [oListener] Object to use as context of the callback. If empty, the global context is used.
 * @return {sap.ui.model.odata.v2.ODataAnnotations} <code>this</code>-reference to allow method chaining.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.attachSuccess = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataAnnotations(); };

/**
 * Detaches the given callback from the <code>allFailed</code> event.
 * The passed function and listener object must match the ones previously used for attaching to the event.
 * 
 * @param {function} fnFunction The event callback previously used with {@link sap.ui.model.odata.v2.ODataAnnotations#attachFailed}.
 * @param {object} [oListener] The same (if any) context object that was used when attaching to the <code>error</code> event.
 * @return {sap.ui.model.odata.v2.ODataAnnotations} <code>this</code>-reference to allow method chaining.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.detachAllFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataAnnotations(); };

/**
 * Detaches the given callback from the <code>error</code> event.
 * The passed function and listener object must match the ones previously used for attaching to the event.
 * 
 * @param {function} fnFunction The event callback previously used with {@link sap.ui.model.odata.v2.ODataAnnotations#attachError}.
 * @param {object} [oListener] The same (if any) context object that was used when attaching to the <code>error</code> event.
 * @return {sap.ui.model.odata.v2.ODataAnnotations} <code>this</code>-reference to allow method chaining.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.detachError = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataAnnotations(); };

/**
 * Detaches the given callback from the <code>failed</code> event.
 * The passed function and listener object must match the ones previously used for attaching to the event.
 * 
 * @param {function} fnFunction The event callback previously used with {@link sap.ui.model.odata.v2.ODataAnnotations#attachFailed}.
 * @param {object} [oListener] The same (if any) context object that was used when attaching to the <code>error</code> event.
 * @return {sap.ui.model.odata.v2.ODataAnnotations} <code>this</code>-reference to allow method chaining.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.detachFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataAnnotations(); };

/**
 * Detaches the given callback from the <code>loaded</code> event.
 * The passed function and listener object must match the ones previously used for attaching to the event.
 * 
 * @param {function} fnFunction The event callback previously used with {@link sap.ui.model.odata.v2.ODataAnnotations#attachLoaded}.
 * @param {object} [oListener] The same (if any) context object that was used when attaching to the <code>error</code> event.
 * @return {sap.ui.model.odata.v2.ODataAnnotations} <code>this</code>-reference to allow method chaining.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.detachLoaded = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataAnnotations(); };

/**
 * Detaches the given callback from the <code>someLoaded</code> event.
 * The passed function and listener object must match the ones previously used for attaching to the event.
 * 
 * @param {function} fnFunction The event callback previously used with {@link sap.ui.model.odata.v2.ODataAnnotations#attachSomeLoaded}.
 * @param {object} [oListener] The same (if any) context object that was used when attaching to the <code>error</code> event.
 * @return {sap.ui.model.odata.v2.ODataAnnotations} <code>this</code>-reference to allow method chaining.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.detachSomeLoaded = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataAnnotations(); };

/**
 * Detaches the given callback from the <code>success</code> event.
 * The passed function and listener object must match the ones previously used for attaching to the event.
 * 
 * @param {function} fnFunction The event callback previously used with {@link sap.ui.model.odata.v2.ODataAnnotations#attachSuccess}.
 * @param {object} [oListener] The same (if any) context object that was used when attaching to the <code>success</code> event.
 * @return {sap.ui.model.odata.v2.ODataAnnotations} <code>this</code>-reference to allow method chaining.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.detachSuccess = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataAnnotations(); };

/**
 * Creates a new subclass of class sap.ui.model.odata.v2.ODataAnnotations with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * V1 API Compatibility method. @see sap.ui.model.odata.v2.ODataAnnotations#getData
 * Returns the parsed and merged annotation data object
 * 
 * @public
 * @returns {object} returns annotations data
 * @deprecated
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.getAnnotationsData = function() { return new Object(); };

/**
 * Returns the parsed and merged annotation data object
 * 
 * @public
 * @returns {object} returns annotations data
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.getData = function() { return new Object(); };

/**
 * Returns a metadata object for class sap.ui.model.odata.v2.ODataAnnotations.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns a promise that resolves when the annotation sources that were added up to this point were successfully
 * (loaded,) parsed and merged
 * 
 * @returns {Promise} The Promise that resolves/rejects after the last added sources have been processed
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.loaded = function() { return null; };

/**
 * Set custom headers which are provided in a key/value map. These headers are used for all requests.
 * The "Accept-Language" header cannot be modified and is set using the core's language setting.
 * 
 * To remove these headers, simply set the <code>mHeaders</code> parameter to <code>{}</code>. Please also note that when calling this method
 * again all previous custom headers are removed unless they are specified again in the <code>mCustomHeaders</code> parameter.
 * 
 * @param {map} mHeaders the header name/value map.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataAnnotations.prototype.setHeaders = function(mHeaders) {  };


// ---- sap.ui.model.odata.v2.ODataContextBinding --------------------------------------------------------------------------

/**
 * Constructor for odata.ODataContextBinding
 * 
 * 
 * @class
 * The ContextBinding is a specific binding for a setting context for the model
 * 
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {Object} oContext
 * @param {map} [mParameters] a map which contains additional parameters for the binding.
 * @param {string} [mParameters.expand] for the OData <code>$expand</code> query option parameter which should be included in the request
 * @param {string} [mParameters.select] for the OData <code>$select</code> query option parameter which should be included in the request
 * @param {map} [mParameters.custom] an optional map of custom query parameters. Custom parameters must not start with <code>$</code>.
 * @abstract
 * @public
 * @extends sap.ui.model.ContextBinding
 * 
 */
sap.ui.model.odata.v2.ODataContextBinding = function(oModel,sPath,oContext,mParameters) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.v2.ODataContextBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v2.ODataContextBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.odata.v2.ODataContextBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v2.ODataContextBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * @see sap.ui.model.ContextBinding.prototype.refresh
 * 
 * @param {boolean} [bForceUpdate] Update the bound control even if no data has been changed
 * @param {string} [sGroupId] The group Id for the refresh
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataContextBinding.prototype.refresh = function(bForceUpdate,sGroupId) {  };


// ---- sap.ui.model.odata.v2.ODataListBinding --------------------------------------------------------------------------

/**
 * 
 * @class
 * List binding implementation for oData format.
 * 
 * @param {sap.ui.model.odata.v2.ODataModel} oModel Model that this list binding belongs to
 * @param {string} sPath Path into the model data, relative to the given <code>oContext</code>
 * @param {sap.ui.model.Context} oContext Context that the <code>sPath</code> is based on
 * @param {sap.ui.model.Sorter|sap.ui.model.Sorter[]} [aSorters] Initial sort order, can be either a sorter or an array of sorters
 * @param {sap.ui.model.Filter|sap.ui.model.Filter[]} [aFilters] Predefined filters, can be either a filter or an array of filters
 * @param {map} [mParameters] A map which contains additional parameters for the binding
 * @param {string} [mParameters.expand] Value for the OData <code>$expand</code> query parameter which should be included in the request
 * @param {string} [mParameters.select] Value for the OData <code>$select</code> query parameter which should be included in the request
 * @param {map} [mParameters.custom] An optional map of custom query parameters. Custom parameters must not start with <code>$</code>
 * @param {sap.ui.model.odata.CountMode} [mParameters.countMode] Defines the count mode of this binding;
 *           if not specified, the default count mode of the <code>oModel</code> is applied
 * @param {sap.ui.model.odata.OperationMode} [mParameters.operationMode] Defines the operation mode of this binding
 * @param {boolean} [mParameters.faultTolerant] Turns on the fault tolerance mode, data is not reset if a back-end request returns an error
 * @param {string} [mParameters.batchGroupId] Sets the batch group ID to be used for requests originating from this binding
 * @param {int} [mParameters.threshold] Threshold that defines how many entries should be fetched at least
 *                                      by the binding if <code>operationMode</code> is set to <code>Auto</code>
 *                                      (See documentation for {@link sap.ui.model.odata.OperationMode.Auto})
 * 
 * @public
 * @extends sap.ui.model.ListBinding
 * 
 */
sap.ui.model.odata.v2.ODataListBinding = function(oModel,sPath,oContext,aSorters,aFilters,mParameters) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.v2.ODataListBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v2.ODataListBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Filters the list.
 * 
 * When using <code>sap.ui.model.Filter</code> the filters are first grouped according to their binding path.
 * All filters belonging to the same group are combined with OR and after that the
 * results of all groups are combined with AND.
 * Usually this means, all filters applied to a single table column
 * are combined with OR, while filters on different table columns are combined with AND.
 * Please note that a custom filter function is only supported with operation mode <code>sap.ui.model.odata.OperationMode.Client</code>.
 * 
 * @param {sap.ui.model.Filter|sap.ui.model.Filter[]} aFilters Single filter or array of filter objects
 * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
 * @param {boolean} [bReturnSuccess=false] Whether the success indicator should be returned instead of <code>this</code>
 * @return {sap.ui.model.ListBinding} Reference to <code>this</code> to facilitate method chaining or a boolean success indicator
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataListBinding.prototype.filter = function(aFilters,sFilterType,bReturnSuccess) { return new sap.ui.model.ListBinding(); };

/**
 * Return contexts for the list.
 * 
 * @param {int} [iStartIndex] The start index of the requested contexts
 * @param {int} [iLength] The requested amount of contexts
 * @param {int} [iThreshold] The threshold value
 * @return {sap.ui.model.Context[]} The array of contexts for each row of the bound list
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataListBinding.prototype.getContexts = function(iStartIndex,iLength,iThreshold) { return new Array(); };

/**
 * Get a download URL with the specified format considering the
 * sort/filter/custom parameters.
 * 
 * @param {string} sFormat Value for the $format Parameter
 * @return {string} URL which can be used for downloading
 * @since 1.24
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataListBinding.prototype.getDownloadUrl = function(sFormat) { return ""; };

/**
 * Return the length of the list.
 * 
 * In case the final length is unknown (e.g. when searching on a large dataset), this will
 * return an estimated length.
 * 
 * @return {number} The length
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataListBinding.prototype.getLength = function() { return 0.0; };

/**
 * Returns a metadata object for class sap.ui.model.odata.v2.ODataListBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v2.ODataListBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Initialize binding.
 * 
 * Fires a change if data is already available ($expand) or a refresh.
 * If metadata is not yet available, do nothing, method will be called again when
 * metadata is loaded.
 * 
 * @returns {sap.ui.model.odata.v2.ODataListBinding} oBinding The binding instance
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataListBinding.prototype.initialize = function() { return new sap.ui.model.odata.v2.ODataListBinding(); };

/**
 * Refreshes the binding, check whether the model data has been changed and fire change event
 * if this is the case. For server side models this should refetch the data from the server.
 * To update a control, even if no data has been changed, e.g. to reset a control after failed
 * validation, please use the parameter bForceUpdate.
 * 
 * @param {boolean} [bForceUpdate] Update the bound control even if no data has been changed
 * @param {string} [sGroupId] The group Id for the refresh
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataListBinding.prototype.refresh = function(bForceUpdate,sGroupId) {  };

/**
 * Sorts the list.
 * 
 * @param {sap.ui.model.Sorter|sap.ui.model.Sorter[]} aSorters A new sorter or an array of sorters which define the sort order
 * @param {boolean} [bReturnSuccess=false] Whether the success indicator should be returned instead of <code>this</code>
 * @return {sap.ui.model.ListBinding} Reference to <code>this</code> to facilitate method chaining or the success indicator
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataListBinding.prototype.sort = function(aSorters,bReturnSuccess) { return new sap.ui.model.ListBinding(); };


// ---- sap.ui.model.odata.v2.ODataModel --------------------------------------------------------------------------

/**
 * Constructor for a new ODataModel.
 * 
 * 
 * @param {string|object} serviceUrl Base URI of the service to request data from;
 * additional URL parameters appended here will be appended to every request.
 * If you pass an object it will be interpreted as the parameter object (second parameter).
 * Then <code>mParameters.serviceUrl</code> is a required parameter.
 * @param {object} [mParameters] Map which contains the following parameter properties:
 * @param {boolean} [mParameters.json=true] If set true request payloads will be JSON, XML for <code>false</code>
 * @param {string} [mParameters.user] User for the service
 * @param {string} [mParameters.password] Password for service
 * @param {map} [mParameters.headers] Map of custom headers (name/value pairs) like {"myHeader":"myHeaderValue",...}
 * @param {boolean} [mParameters.tokenHandling=true] Enable/disable XCSRF-Token handling
 * @param {boolean} [mParameters.withCredentials] Experimental - <code>true</code> when user credentials are to be included in a cross-origin request. Please note that this works only if all requests are asynchronous.
 * @param [mParameters.maxDataServiceVersion='2.0'] Please use the following string format e.g. '2.0' or '3.0'.
 * 									OData version supported by the ODataModel: '2.0',
 * @param {boolean} [mParameters.useBatch=true] Whether all requests should be sent in batch requests
 * @param {boolean} [mParameters.refreshAfterChange=true] Enable/disable automatic refresh after change operations
 * @param  {string|string[]} [mParameters.annotationURI] The URL (or an array of URLs) from which the annotation metadata should be loaded,
 * @param {boolean} [mParameters.loadAnnotationsJoined] Whether the <code>metadataLoaded</code> event will be fired only after all annotations have been loaded as well
 * @param {map} [mParameters.serviceUrlParams] Map of URL parameters (name/value pairs) - these parameters will be attached to all requests
 * @param {map} [mParameters.metadataUrlParams] Map of URL parameters for metadata requests - only attached to a <code>$metadata</code> request
 * @param {string} [mParameters.defaultBindingMode=OneWay] Sets the default binding mode for the model
 * @param {string} [mParameters.defaultCountMode=sap.ui.model.odata.CountMode.Request] Sets the default count mode for the model
 * @param {string} [mParameters.defaultOperationMode=sap.ui.model.odata.OperationMode.Server] Sets the default operation mode for the model
 * @param {string} [mParameters.defaultUpdateMethod=sap.ui.model.odata.UpdateMethod.Merge] Default update method which is used for all update requests
 * @param {map} [mParameters.metadataNamespaces] Map of namespaces (name => URI) used for parsing the service metadata
 * @param {boolean} [mParameters.skipMetadataAnnotationParsing] Whether to skip the automated loading of annotations from the metadata document. Loading annotations from metadata does not have any effects (except the lost performance by invoking the parser) if there are not annotations inside the metadata document
 * @param {boolean} [mParameters.disableHeadRequestForToken=false] Set this flag to <code>true</code> if your service does not support <code>HEAD</code> requests for fetching the service document (and thus the CSRF-token) to avoid sending a <code>HEAD</code>-request before falling back to <code>GET</code>
 * @param {boolean} [mParameters.sequentializeRequests=false] Whether to sequentialize all requests, needed in case the service cannot handle parallel requests
 * @param {boolean} [mParameters.disableSoftStateHeader=false] Set this flag to <code>true</code> if you don´t want to start a new soft state session with context ID (<code>SID</code>) through header mechanism. This is useful if you want to share an <code>SID</code> between different browser windows
 * @param {string[]} [mParameters.bindableResponseHeaders=null] Set this array to make custom response headers bindable via the entity's "__metadata/headers" property
 * 
 * @class
 * Model implementation for oData format
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @extends sap.ui.model.Model
 * 
 */
sap.ui.model.odata.v2.ODataModel = function(serviceUrl,mParameters) {};
/**
 * Fired, when the annotations document failed to loaded.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {Error[]} oEvent.getParameters.result An array of Errors
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.annotationsFailed = function(oEvent) {  };

/**
 * Fired, when the annotations document was successfully loaded.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {sap.ui.model.odata.v2.ODataAnnotations~Source[]} oEvent.getParameters.result One or several annotation source(s)
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.annotationsLoaded = function(oEvent) {  };

/**
 * Fired after a request has been completed (includes receiving a response),
 * no matter whether the request succeeded or not.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.ID The request ID
 * @param {string} oEvent.getParameters.url The URL which is sent to the backend
 * @param {string} oEvent.getParameters.method The HTTP method
 * @param {map} oEvent.getParameters.headers The request headers
 * @param {boolean} oEvent.getParameters.success Request was successful or not
 * @param {boolean} oEvent.getParameters.async If the request is synchronous or asynchronous (if available)
 * @param {array} oEvent.getParameters.requests Array of embedded requests ($batch)
 * Each request object within the array contains the following properties: url, method, headers, response object
 * @param {object} oEvent.getParameters.response The response object - empty object if no response:
 * The response object contains the following properties: message, success, headers, statusCode, statusText, responseText
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.batchRequestCompleted = function(oEvent) {  };

/**
 * Fired, when a batch request failed.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.ID The request ID
 * @param {string} oEvent.getParameters.url The URL which is sent to the backend
 * @param {string} oEvent.getParameters.method The HTTP method
 * @param {map} oEvent.getParameters.headers The request headers
 * @param {boolean} oEvent.getParameters.async If the request is synchronous or asynchronous (if available)
 * @param {boolean} oEvent.getParameters.success Request was successful or not
 * @param {object} oEvent.getParameters.response The response object - empty object if no response
 * The response object contains the following properties: message, success, headers, statusCode, statusText, responseText
 * @param {array} oEvent.getParameters.requests Array of embedded requests ($batch)
 * Each request object within the array contains the following properties: url, method, headers, response object
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.batchRequestFailed = function(oEvent) {  };

/**
 * Fired after a request has been sent to a backend.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.url The URL which is sent to the backend
 * @param {string} [oEvent.getParameters.type] The type of the request (if available)
 * @param {boolean} [oEvent.getParameters.async] If the request is synchronous or asynchronous (if available)
 * @param {array} oEvent.getParameters.requests Array of embedded requests ($batch)
 * Each request object within the array contains the following properties: url, method, headers
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.batchRequestSent = function(oEvent) {  };

/**
 * Fired, when the metadata document has failed to load.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.metadata The parsed metadata
 * @param {string} oEvent.getParameters.message A text that describes the failure.
 * @param {string} oEvent.getParameters.statusCode HTTP status code returned by the request (if available)
 * @param {string} oEvent.getParameters.statusText The status as a text, details not specified, intended only for diagnosis output
 * @param {string} oEvent.getParameters.responseText Response that has been received for the request, as a text string
 * @param {object} oEvent.getParameters.response The response object - empty object if no response
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.metadataFailed = function(oEvent) {  };

/**
 * Fired, when the metadata document was successfully loaded.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.metadata The parsed metadata
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.metadataLoaded = function(oEvent) {  };

/**
 * Fired, after a request has been completed (includes receiving a response),
 * no matter whether the request succeeded or not.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.ID The request ID
 * @param {string} oEvent.getParameters.url The URL which is sent to the backend
 * @param {string} oEvent.getParameters.method The HTTP method
 * @param {map} oEvent.getParameters.headers The request headers
 * @param {boolean} oEvent.getParameters.success Request was successful or not
 * @param {boolean} oEvent.getParameters.async If the request is synchronous or asynchronous (if available)
 * @param {object} oEvent.getParameters.response The response object - empty object if no response:
 * The response object contains the following properties: message, success, headers, statusCode, statusText, responseText
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.requestCompleted = function(oEvent) {  };

/**
 * Fired, when data retrieval from a backend failed.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.ID The request ID
 * @param {string} oEvent.getParameters.url The URL which is sent to the backend
 * @param {string} oEvent.getParameters.method The HTTP method
 * @param {map} oEvent.getParameters.headers The request headers
 * @param {boolean} oEvent.getParameters.async If the request is synchronous or asynchronous (if available)
 * @param {boolean} oEvent.getParameters.success Request was successful or not
 * @param {object} oEvent.getParameters.response The response object - empty object if no response
 * The response object contains the following properties: message, success, headers, statusCode, statusText, responseText
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.requestFailed = function(oEvent) {  };

/**
 * Fired, after a request has been sent to a backend.
 * 
 * Note: Subclasses might add additional parameters to the event object. Optional parameters can be omitted.
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.ID The request ID
 * @param {string} oEvent.getParameters.url The URL which is sent to the backend
 * @param {string} oEvent.getParameters.method The HTTP method
 * @param {map} oEvent.getParameters.headers The request headers
 * @param {boolean} oEvent.getParameters.async If the request is synchronous or asynchronous (if available)
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.requestSent = function(oEvent) {  };

/**
 * Adds (a) new URL(s) whose content should be parsed as OData annotations, which are then merged into the annotations object
 * which can be retrieved by calling the {@link #getServiceAnnotations}-method. If a <code>$metadata</code> URL is passed,
 * the data will also be merged into the metadata object, which can be reached by calling the {@link #getServiceMetadata} method.
 * 
 * @param {string|string[]} vUrl - Either one URL as string or an array of URL strings
 * @return {Promise} The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at least one fails to load.
 * 					 If this promise resolves it returns an object with the following properties:
 * 					 <code>annotations</code>: The annotation object
 * 					 <code>entitySets</code>: An array of EntitySet objects containing the newly merged EntitySets from a <code>$metadata</code> requests.
 * 								 The structure is the same as in the metadata object reached by the <code>getServiceMetadata()</code> method.
 * 								 For non-<code>$metadata</code> requests the array will be empty.
 * 
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.addAnnotationUrl = function(vUrl) { return null; };

/**
 * Adds new XML content to be parsed for OData annotations, which are then merged into the annotations object which
 * can be retrieved by calling the {@link #getServiceAnnotations}-method.
 * 
 * @param {string} sXMLContent - The string that should be parsed as annotation XML
 * @param {boolean} [bSuppressEvents=false] - Whether not to fire annotationsLoaded event on the annotationParser
 * @return {Promise} The Promise to parse the given XML-String, resolved if parsed without errors, rejected if errors occur
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.addAnnotationXML = function(sXMLContent,bSuppressEvents) { return null; };

/**
 * Returns a promise that resolves with an array containing information about the initially loaded annotations.
 * 
 * <b>Important</b>: This covers the annotations that were given to the model constructor, not the ones that might have
 * been added later on using the protected API method {@link #addAnnotationUrl}. In order to get information about those,
 * the event <code>annotationsLoaded</code> can be used.
 * 
 * @returns {Promise} A promise to load the annotation URLs that were given to the model on instantiation
 * 
 * @public
 * @since 1.42
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.annotationsLoaded = function() { return null; };

/**
 * Attach event-handler <code>fnFunction</code> to the <code>annotationsFailed</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.attachAnnotationsFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the <code>annotationsLoaded</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.attachAnnotationsLoaded = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the <code>batchRequestCompleted</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.attachBatchRequestCompleted = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the <code>batchRequestFailed</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.attachBatchRequestFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the <code>requestSent</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.attachBatchRequestSent = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the <code>metadataFailed</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.attachMetadataFailed = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the <code>metadataLoaded</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 * 
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.attachMetadataLoaded = function(oData,fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Creates new context binding for this model.
 * 
 * @see sap.ui.model.Model.prototype.bindContext
 * @param {string} sPath Resolved path
 * @param {sap.ui.model.Context} oContext Context object
 * @param {map} [mParameters] Map of parameters
 * @returns {sap.ui.model.ContextBinding} The new context binding
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.bindContext = function(sPath,oContext,mParameters) { return new sap.ui.model.ContextBinding(); };

/**
 * Creates a new list binding for this model.
 * 
 * @param {string} sPath Binding path, either absolute or relative to a given <code>oContext</code>
 * @param {sap.ui.model.Context} [oContext] Binding context referring to this model
 * @param {sap.ui.model.Sorter|sap.ui.model.Sorter[]} [aSorters] Initial sort order, can be either a sorter or an array of sorters
 * @param {sap.ui.model.Filter|sap.ui.model.Filter[]} [aFilters] Predefined filters, can be either a filter or an array of filters
 * @param {map} [mParameters] Map which contains additional parameters for the binding
 * @param {string} [mParameters.expand] Value for the OData <code>$expand</code> query parameter which should be included in the request
 * @param {string} [mParameters.select] Value for the OData <code>$select</code> query parameter which should be included in the request
 * @param {map} [mParameters.custom] Optional map of custom query parameters (name/value pairs); names of custom parameters must not start with <code>$</code>
 * @param {sap.ui.model.odata.CountMode} [mParameters.countMode] Count mode for this binding;
 *           if not specified, the default count mode for this model is used
 * @param {sap.ui.model.odata.OperationMode} [mParameters.operationMode] Operation mode for this binding;
 *           if not specified, the default operation mode of this model is used
 * @param {boolean} [mParameters.faultTolerant] Turns on the fault tolerance mode, data is not reset if a backend request returns an error
 * @param {string} [mParameters.batchGroupId] Sets the batch group ID to be used for requests originating from this binding
 * @param {int} [mParameters.threshold] Threshold that defines how many entries should be fetched at least
 *                                      by the binding if <code>operationMode</code> is set to <code>Auto</code>
 *                                      (See documentation for {@link sap.ui.model.odata.OperationMode.Auto})
 * @returns {sap.ui.model.ListBinding} The new list binding
 * @see sap.ui.model.Model.prototype.bindList
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.bindList = function(sPath,oContext,aSorters,aFilters,mParameters) { return new sap.ui.model.ListBinding(); };

/**
 * Creates a new property binding for this model.
 * 
 * @see sap.ui.model.Model.prototype.bindProperty
 * @param {string} sPath Path pointing to the property that should be bound;
 *                 either an absolute path or a path relative to a given <code>oContext</code>
 * @param {object} [oContext] A context object for the new binding
 * @param {map} [mParameters] Map of optional parameters for the binding; the ODataModel (v2) currently supports no additional parameters
 * @returns {sap.ui.model.PropertyBinding} The new property binding
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.bindProperty = function(sPath,oContext,mParameters) { return new sap.ui.model.PropertyBinding(); };

/**
 * Creates a new tree binding for this model.
 * 
 * @see sap.ui.model.Model.prototype.bindTree
 * @param {string} sPath Binding path, either absolute or relative to a given <code>oContext</code>
 * @param {sap.ui.model.Context} [oContext] Binding context referring to this model
 * @param {sap.ui.model.Filter|sap.ui.model.Filter[]} [aFilters] Predefined filters, can be either a filter or an array of filters
 * @param {map} [mParameters] Map of parameters for the tree binding
 * @param {object} [mParameters.treeAnnotationProperties] This parameter defines the mapping between data properties and
 * 														the hierarchy used to visualize the tree, if not provided by the services metadata.
 * 														For correct metadata annotation, please check the "SAP Annotations for OData Version 2.0" Specification.
 * @param {int} [mParameters.treeAnnotationProperties.hierarchyLevelFor] Mapping to the property holding the level information,
 * @param {string} [mParameters.treeAnnotationProperties.hierarchyNodeFor] Mapping to the property holding the hierarchy node ID,
 * @param {string} [mParameters.treeAnnotationProperties.hierarchyParentNodeFor] Mapping to the property holding the parent node ID,
 * @param {string} [mParameters.treeAnnotationProperties.hierarchyDrillStateFor] Mapping to the property holding the drill state for the node,
 * @param {string} [mParameters.treeAnnotationProperties.hierarchyNodeDescendantCountFor] Mapping to the property holding the descendant count for the node.
 * @param {object} [mParameters.navigation] A map describing the navigation properties between entity sets, which should be used for constructing and paging the tree.
 * @param {int} [mParameters.numberOfExpandedLevels=0] This property defines the number of levels, which will be expanded initially.
 * 												   Please be aware, that this property leads to multiple backend requests. Default value is 0.
 * @param {int} [mParameters.rootLevel=0] The root level is the level of the topmost tree nodes, which will be used as an entry point for OData services.
 * 										Conforming to the "SAP Annotations for OData Version 2.0" Specification, the root level must start at 0.
 * 										Default value is therefore 0.
 * @param {string} [mParameters.batchGroupId] Deprecated - use <code>groupId</code> instead: sets the batch group ID to be used for requests originating from this binding
 * @param {string} [mParameters.groupId] ID of a request group; requests belonging to the same group will be bundled in one batch request
 * @param {sap.ui.model.odata.OperationMode} [mParameters.operationMode] Operation mode for this binding; defaults to the model's default operation mode when not specified
 * @param {int} [mParameters.threshold] A threshold, which will be used if the operation mode is set to <code>Auto</code>.
 * 										In case of <code>OperationMode.Auto</code>, the binding tries to fetch (at least) as many entries as the threshold.
 * 										Also see API documentation for {@link sap.ui.model.odata.OperationMode.Auto}.
 * @param {boolean} [mParameters.useServersideApplicationFilters] Set this flag if <code>$filter</code> statements should be used for the <code>$count/$inlinecount</code> and data retrieval in the <code>OperationMode.Auto</code>.
 * 													 Only use this if your backend supports prefiltering the tree and is capable of responding a complete tree hierarchy,
 * 													 including all inner nodes. To construct the hierarchy on the client, it is mandatory that all filter matches include their complete
 * 													 parent chain up to the root level.
 * 													 <code>OperationMode.Client</code> will still request the complete collection without filters, since they will be applied on the client.
 * @param {boolean} [mParameters.treeState] A tree state handle can be given to the <code>ODataTreeBinding</code> when two conditions are met:
 * 											 The binding is running in <code>OperationMode.Client</code> AND the <code>sap.ui.table.TreeTable</code> is used.
 * 											 The feature is only available when using the <code>ODataTreeBindingAdapter</code>, which is automatically applied when using the <code>sap.ui.table.TreeTable</code>.
 * 											 The tree state handle will contain all necessary information to expand the tree to the given state.
 * 											 This feature is not supported in <code>OperationMode.Server</code> and <code>OperationMode.Auto</code>.
 * 											 Please see also the {@link sap.ui.model.odata.ODataTreeBindingAdapter#getCurrentTreeState getCurrentTreeState} function in the
 * 											 class <code>ODataTreeBindingAdapter</code>.
 * @param {sap.ui.model.Sorter[]} [aSorters] An array of predefined sorters
 * @returns {sap.ui.model.TreeBinding} The new tree binding
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.bindTree = function(sPath,oContext,aFilters,mParameters,aSorters) { return new sap.ui.model.TreeBinding(); };

/**
 * Trigger a request to the function import OData service that was specified in the model constructor.
 * 
 * If the return type of the function import is either an entity type or a collection of an entity type,
 * then the changes are reflected in the model. Otherwise they are ignored, and the <code>response</code> can
 * be processed in the <code>success</code> callback.
 * 
 * @param {string} sFunctionName A string containing the name of the function to call. The name is concatenated to the service URL which was
 *        specified in the model constructor.
 * @param {map} [mParameters] Optional parameter map containing any of the following properties:
 * @param {string} [mParameters.method='GET'] HTTP method to use for the function call, should match the metadata for the function import
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @param {function} [mParameters.success] A callback function which is called when the data has been successfully retrieved. The handler can have
 *        the following parameters: <code>oData<code> and <code>response</code>.
 * @param {function} [mParameters.error] A callback function which is called when the request failed.
 * 		The handler can have the parameter: <code>oError</code> which contains additional error information.
 * @param {map} [mParameters.headers] A map of headers for this request
 * @param {string} [mParameters.batchGroupId] Deprecated - use <code>groupId</code> instead
 * @param {string} [mParameters.groupId] ID of a request group; requests belonging to the same group will be bundled in one batch request
 * @param {string} [mParameters.eTag] If the function import changes an entity, the ETag for this entity could be passed with this parameter
 * @param {string} [mParameters.changeSetId] ID of the <code>ChangeSet</code> that this request should belong to
 * @param {string} [mParameters.refreshAfterChange] Defines whether to update all bindings after submitting this change operation. See {@link #setRefreshAfterChange}
 * 	           If given, this overrules the model-wide <code>refreshAfterChange</code> flag for this operation only.
 * 
 * @return {object} An object which has a <code>contextCreated</code> function that returns a <code>Promise</code>.
 *         This resolves with the created {@link sap.ui.model.Context}.
 *         In addition it has an <code>abort</code> function to abort the current request.
 * 
 * @public
 * 
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.callFunction = function(sFunctionName,mParameters) { return new Object(); };

/**
 * Trigger a <code>POST</code> request to the OData service that was specified in the model constructor.
 * 
 * Please note that deep creates are not supported and may not work.
 * 
 * @param {string} sPath A string containing the path to the collection where an entry
 * 		should be created. The path is concatenated to the service URL
 * 		which was specified in the model constructor.
 * @param {object} oData Data of the entry that should be created.
 * @param {map} [mParameters] Optional parameter map containing any of the following properties:
 * @param {object} [mParameters.context] If specified , <code>sPath</code> has to be relative to the path given with the context.
 * @param {function} [mParameters.success] A callback function which is called when the data has
 * 		been successfully retrieved. The handler can have the
 * 		following parameters: <code>oData</code> and <code>response</code>. The <code>oData</code> parameter contains the data of the newly created entry if it is provided by the backend.
 * 		The <code>response</code> parameter contains information about the response of the request.
 * @param {function} [mParameters.error] A callback function which is called when the request failed.
 * 		The handler can have the parameter <code>oError</code> which contains additional error information.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @param {map} [mParameters.headers] A map of headers for this request
 * @param {string} [mParameters.batchGroupId] Deprecated - use <code>groupId</code> instead
 * @param {string} [mParameters.groupId] ID of a request group; requests belonging to the same group will be bundled in one batch request
 * @param {string} [mParameters.changeSetId] ID of the <code>ChangeSet</code> that this request should belong to
 * @param {string} [mParameters.refreshAfterChange] Defines whether to update all bindings after submitting this change operation. See {@link #setRefreshAfterChange}
 * 	           If given, this overrules the model-wide <code>refreshAfterChange</code> flag for this operation only.
 * @return {object} An object which has an <code>abort</code> function to abort the current request.
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.create = function(sPath,oData,mParameters) { return new Object(); };

/**
 * Creates a binding context for the given path.
 * 
 * If the data of the context is not yet available, it can not be created, but first the
 * entity needs to be fetched from the server asynchronously. In case no callback function
 * is provided, the request will not be triggered.
 * 
 * @see sap.ui.model.Model.prototype.createBindingContext
 * @param {string} sPath Binding path
 * @param {object} [oContext] Binding context
 * @param {map} [mParameters] Map which contains additional parameters for the binding
 * @param {string} [mParameters.expand] Value for the OData <code>$expand</code> query parameter which should be included in the request
 * @param {string} [mParameters.select] Value for the OData <code>$select</code> query parameter which should be included in the request
 * @param {map} [mParameters.custom] Optional map of custom query parameters, names of custom parameters must not start with <code>$</code>.
 * @param {function} [fnCallBack] Function to be called when context has been created
 * @param {boolean} [bReload] Whether to reload data
 * @return {sap.ui.model.Context} The created binding context
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.createBindingContext = function(sPath,oContext,mParameters,fnCallBack,bReload) { return new sap.ui.model.Context(); };

/**
 * Creates a new entry object which is described by the metadata of the entity type of the
 * specified <code>sPath</code> Name. A context object is returned which can be used to bind
 * against the newly created object.
 * 
 * For each created entry a request is created and stored in a request queue.
 * The request queue can be submitted by calling {@link #submitChanges}. To delete a created
 * entry from the request queue call {@link #deleteCreatedEntry}.
 * 
 * The optional parameter <code>mParameters.properties</code> can be used as follows:
 * <ul>
 *   <li><code>properties</code> could be an array containing the property names which should be included
 *     in the new entry. Other properties defined in the entity type won't be included. </li>
 *   <li><code>properties</code> could be an object which includes the desired properties and the
 *     corresponding values which should be used for the created entry. </li>
 * </ul>
 * If <code>properties</code> is not specified, all properties in the entity type will be included in the
 * created entry.
 * 
 * If there are no values specified, the properties will have <code>undefined</code> values.
 * 
 * Please note that deep creates (including data defined by navigation properties) are not supported.
 * 
 * @param {string} sPath Name of the path to the EntitySet
 * @param {map} mParameters A map of the following parameters:
 * @param {array|object} [mParameters.properties] An array that specifies a set of properties or the entry
 * @param {string} [mParameters.batchGroupId] Deprecated - use <code>groupId</code> instead
 * @param {string} [mParameters.groupId] ID of a request group; requests belonging to the same group will be bundled in one batch request
 * @param {string} [mParameters.changeSetId] ID of the <code>ChangeSet</code> that this request should belong to
 * @param {sap.ui.model.Context} [mParameters.context] The binding context
 * @param {function} [mParameters.success] The success callback function
 * @param {function} [mParameters.error] The error callback function
 * @param {map} [mParameters.headers] A map of headers
 * @param {map} [mParameters.urlParameters] A map of URL parameters
 * @param {string} [mParameters.refreshAfterChange] Defines whether to update all bindings after submitting this change operation. See {@link #setRefreshAfterChange}
 * 	           If given, this overrules the model-wide <code>refreshAfterChange</code> flag for this operation only.
 * 
 * @return {sap.ui.model.Context} A Context object that points to the new created entry.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.createEntry = function(sPath,mParameters) { return new sap.ui.model.Context(); };

/**
 * Creates the key from the given collection name and property map.
 * 
 * Please make sure that the metadata document is loaded before using this function.
 * 
 * @param {string} sCollection Name of the collection
 * @param {object} oKeyProperties Object containing at least all the key properties of the entity type
 * @returns {string} Key of the entry
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.createKey = function(sCollection,oKeyProperties) { return ""; };

/**
 * Deletes a created entry from the request queue and from the model.
 * @param {sap.ui.model.Context} oContext The context object pointing to the created entry
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.deleteCreatedEntry = function(oContext) {  };

/**
 * @see sap.ui.model.Model.prototype.destroy
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.destroy = function() {  };

/**
 * Detach event-handler <code>fnFunction</code> from the <code>annotationsFailed</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.detachAnnotationsFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the <code>annotationsLoaded</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.detachAnnotationsLoaded = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the <code>batchRequestCompleted</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.detachBatchRequestCompleted = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the <code>batchRequestFailed</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.detachBatchRequestFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the <code>batchRequestSent</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.detachBatchRequestSent = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the <code>metadataFailed</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.detachMetadataFailed = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the <code>metadataLoaded</code> event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.detachMetadataLoaded = function(fnFunction,oListener) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Creates a new subclass of class sap.ui.model.odata.v2.ODataModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v2.ODataModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event <code>annotationsFailed</code> to attached listeners.
 * 
 * @param {object} [mArguments] The arguments to pass along with the event
 * @param {string} [mArguments.message] A text that describes the failure
 * @param {string} [mArguments.statusCode] HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request, as a text string
 * 
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.fireAnnotationsFailed = function(mArguments) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Fire event <code>annotationsLoaded</code> to attached listeners.
 * 
 * @param {object} [mArguments] The arguments to pass along with the event
 * @param {sap.ui.model.odata.v2.ODataAnnotations} [mArguments.annotations]  The annotations object
 * 
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.fireAnnotationsLoaded = function(mArguments) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Fire event <code>batchRequestCompleted</code> to attached listeners.
 * 
 * @param {object} mArguments parameters to add to the fired event
 * @param {string} mArguments.ID The request ID
 * @param {string} mArguments.url The URL which is sent to the backend
 * @param {string} mArguments.method The HTTP method
 * @param {map} mArguments.headers The request headers
 * @param {boolean} mArguments.success Request was successful or not
 * @param {boolean} mArguments.async If the request is synchronous or asynchronous (if available)
 * @param {array} mArguments.requests Array of embedded requests ($batch) - empty array for non batch requests.
 * Each request object within the array contains the following properties: url, method, headers, response object
 * @param {object} mArguments.response The response object - empty object if no response:
 * The response object contains the following properties: message, success, headers, statusCode, statusText, responseText
 * 
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.fireBatchRequestCompleted = function(mArguments) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Fire event <code>batchRequestFailed</code> to attached listeners.
 * 
 * @param {object} mArguments the arguments to pass along with the event.
 * @param {string} mArguments.ID The request ID
 * @param {string} mArguments.url The URL which is sent to the backend
 * @param {string} mArguments.method The HTTP method
 * @param {map} mArguments.headers The request headers
 * @param {boolean} mArguments.async If the request is synchronous or asynchronous (if available)
 * @param {boolean} mArguments.success Request was successful or not
 * @param {object} mArguments.response The response object - empty object if no response
 * The response object contains the following properties: message, success, headers, statusCode, statusText, responseText
 * @param {array} mArguments.requests Array of embedded requests ($batch)
 * Each request object within the array contains the following properties: url, method, headers, response object
 * 
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.fireBatchRequestFailed = function(mArguments) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Fire event <code>batchRequestSent</code> to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.url] The URL which is sent to the backend.
 * @param {string} [mArguments.type] The type of the request (if available)
 * @param {boolean} [mArguments.async] If the request is synchronous or asynchronous (if available)
 * @param {array} mArguments.requests Array of embedded requests ($batch)
 * Each request object within the array contains the following properties: url, method, headers
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.fireBatchRequestSent = function(mArguments) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Fire event <code>metadataFailed</code> to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * 
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.fireMetadataFailed = function(mArguments) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Fire event <code>metadataLoaded</code> to attached listeners.
 * 
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {sap.ui.model.odata.ODataMetadata} [mArguments.metadata]  the metadata object.
 * 
 * @return {sap.ui.model.odata.v2.ODataModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.fireMetadataLoaded = function(mArguments) { return new sap.ui.model.odata.v2.ODataModel(); };

/**
 * Force the update on the server of an entity by setting its ETag to '*'.
 * 
 * ETag handling must be active so the force update will work.
 * @param {string} sKey The key to an Entity e.g.: Customer(4711)
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.forceEntityUpdate = function(sKey) {  };

/**
 * Returns the definition of batch groups per entity type for two-way binding changes
 * @returns {map} Definition of batch groups for two-way binding changes
 * @deprecated Since 1.36 use {@link #getChangeGroups} instead
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getChangeBatchGroups = function() { return null; };

/**
 * Returns the definition of groups per entity type for two-way binding changes
 * @returns {map} mChangeGroups Definition of groups for two-way binding changes
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getChangeGroups = function() { return null; };

/**
 * Return requested data as object if the data has already been loaded and stored in the model.
 * 
 * @param {string} sPath A string containing the path to the data object that should be returned.
 * @param {object} [oContext] The optional context which is used with the <code>sPath</code> to retrieve the requested data.
 * @param {boolean} [bIncludeExpandEntries=null] This parameter should be set when a URI or custom parameter
 * with a <code>$expand</code> system query option was used to retrieve associated entries embedded.
 * If set to <code>true</code> then the <code>getProperty</code> function returns a desired property value or entry and includes the associated expand entries (if any).
 * If set to <code>false</code> the associated/expanded entry properties are removed and not included in the
 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy, not a reference of the entry will be returned.
 * 
 * @return {object} Object containing the requested data if the path is valid.
 * @public
 * @deprecated please use {@link #getProperty} instead
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getData = function(sPath,oContext,bIncludeExpandEntries) { return new Object(); };

/**
 * Returns the default count mode for retrieving the count of collections
 * 
 * @returns {sap.ui.model.odata.CountMode} Returns the default count mode for this model
 * @since 1.20
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getDefaultCountMode = function() { return new sap.ui.model.odata.CountMode(); };

/**
 * Returns the array of batch group IDs that are set as deferred
 * 
 * @returns {array} aGroupIds The array of deferred batch group IDs
 * @deprecated Since 1.32 use {@link #getDeferredGroups} instead
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getDeferredBatchGroups = function() { return null; };

/**
 * Returns the array of group IDs that are set as deferred.
 * 
 * @returns {array} aGroupIds The array of deferred group IDs
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getDeferredGroups = function() { return null; };

/**
 * Returns the ETag for a given binding path/context or data object.
 * 
 * @param {string} [sPath] The binding path
 * @param {sap.ui.model.Context} [oContext] The binding context
 * @param {object} [oEntity] The entity data
 * 
 * @returns {string} The found ETag (or <code>null</code> if none could be found)
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getETag = function(sPath,oContext,oEntity) { return ""; };

/**
 * Returns all headers and custom headers which are stored in this OData model.
 * 
 * @return {object} The header map
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getHeaders = function() { return new Object(); };

/**
 * Returns the key part for the given the canonical entry URI, model context or data object or
 * <code>undefined</code> when the <code>vValue</code> can't be interpreted.
 * 
 * @param {string|object|sap.ui.model.Context} vValue The canonical entry URI, the context or entry object
 * @returns {string} Key of the entry or <code>undefined</code>
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getKey = function(vValue) { return ""; };

/**
 * Returns a metadata object for class sap.ui.model.odata.v2.ODataModel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v2.ODataModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns an instance of an OData meta model which offers a unified access to both OData V2
 * metadata and V4 annotations. It uses the existing {@link sap.ui.model.odata.ODataMetadata}
 * as a foundation and merges V4 annotations from the existing
 * {@link sap.ui.model.odata.v2.ODataAnnotations} directly into the corresponding model element.
 * 
 * <b>BEWARE:</b> Access to this OData meta model will fail before the promise returned by
 * {@link sap.ui.model.odata.ODataMetaModel#loaded loaded} has been resolved!
 * 
 * @public
 * @returns {sap.ui.model.odata.ODataMetaModel} The meta model for this <code>ODataModel</code>
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getMetaModel = function() { return new sap.ui.model.odata.ODataMetaModel(); };

/**
 * Returns the JSON object for an entity with the given <code>sPath</code> and optional <code>oContext</code>.
 * 
 * With the <code>mParameters.select</code> parameter it is possible to specify comma-separated property or navigation property
 * names which should be included in the result object. This works like the OData <code>$select</code> parameter.
 * With the <code>mParameters.expand</code> parameter it is possible to specify comma-separated navigation property names
 * which should be included inline in the result object. This works like the OData <code>$expand</code> parameter.
 * 
 * This method will return a copy and not a reference of the entity. It does not load any data and may not return all requested
 * data if it is not available/loaded. If select entries are contained in the parameters and not all selected properties are
 * available, this method will return <code>undefined</code> instead of incomplete data. If no select entries are defined,
 * all properties available on the client will be returned.
 * 
 * Example:<br>
 * <code>{select: "Products/ProductName, Products", expand:"Products"}</code> will return no properties of the entity itself, but
 * only the ProductName property of the Products navigation property. If Products/ProductName has not been loaded before, so is not
 * available on the client, it will return <code>undefined</code>.
 * 
 * @param {string} sPath Path referencing the object
 * @param {object} [oContext] Context the path should be resolved with, in case it is relative
 * @param {map} [mParameters] Map of parameters
 * @param {string} [mParameters.select] Comma-separated list of properties/paths to select
 * @param {string} [mParameters.expand] Comma-separated list of navigation properties/paths to expand
 * @returns {any} The value for the given path/context or <code>undefined</code> if data or entity type could not be found or was incomplete
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getObject = function(sPath,oContext,mParameters) { return null; };

/**
 * Returns the original value for the property with the given path and context.
 * The original value is the value that was last responded by the server.
 * 
 * @param {string} sPath The path/name of the property
 * @param {object} [oContext] The context if available to access the property value
 * @returns {any} the value of the property
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getOriginalProperty = function(sPath,oContext) { return null; };

/**
 * Returns the changed properties of all changed entities in a map which are still pending.
 * The key is the string name of the entity and the value is an object which contains the changed properties.
 * @return {map} the pending changes in a map
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getPendingChanges = function() { return null; };

/**
 * Returns the value for the property with the given <code>sPath</code>.
 * 
 * If the path points to a navigation property which has been loaded via <code>$expand</code> then the <code>bIncludeExpandEntries</code>
 * parameter determines if the navigation property should be included in the returned value or not.
 * Please note that this currently works for 1..1 navigation properties only.
 * 
 * @param {string} sPath Path/name of the property
 * @param {object} [oContext] Context if available to access the property value
 * @param {boolean} [bIncludeExpandEntries=false] @deprecated Please use {@link #getObject} function with select/expand parameters instead.
 * This parameter should be set when a URI or custom parameter with a <code>$expand</code> system query option was used to retrieve associated entries embedded/inline.
 * If true then the <code>getProperty</code> function returns a desired property value/entry and includes the associated expand entries (if any).
 * Note: A copy and not a reference of the entry will be returned.
 * @returns {any} Value of the property
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getProperty = function(sPath,oContext,bIncludeExpandEntries) { return null; };

/**
 * @returns {boolean} bRefreshAfterChange Whether to automatically refresh after changes
 * @public
 * @since 1.46.0
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getRefreshAfterChange = function() { return false; };

/**
 * Returns the current security token.
 * 
 * If the token has not been requested from the server it will be requested first (synchronously).
 * 
 * @returns {string} The CSRF security token
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getSecurityToken = function() { return ""; };

/**
 * Return the annotation object. Please note that the metadata is loaded asynchronously and this function might return undefined because the
 * metadata has not been loaded yet.
 * In this case attach to the <code>annotationsLoaded</code> event to get notified when the annotations are available and then call this function.
 * 
 * @return {object} Metadata object
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getServiceAnnotations = function() { return new Object(); };

/**
 * Return the parsed XML metadata as a Javascript object.
 * 
 * Please note that the metadata is loaded asynchronously and this function might return undefined because the
 * metadata has not been loaded yet.
 * In this case attach to the <code>metadataLoaded</code> event to get notified when the metadata is available and then call this function.
 * 
 * @return {Object} Metadata object
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.getServiceMetadata = function() { return null; };

/**
 * Checks if there exist pending changes in the model created by the {@link #setProperty} method.
 * @return {boolean} Whether there are pending changes
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.hasPendingChanges = function() { return false; };

/**
 * Checks if there are pending requests, either ongoing or sequential.
 * @return {boolean} Whether there are pending requests
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.hasPendingRequests = function() { return false; };

/**
 * Checks whether metadata loading has failed in the past.
 * 
 * @public
 * @returns {boolean} Whether metadata request has failed
 * 
 * @since 1.38
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.isMetadataLoadingFailed = function() { return false; };

/**
 * Returns a promise for the loaded state of the metadata.
 * 
 * The promise won't get rejected in case the metadata loading failed but is only resolved if the metadata is loaded successfully.
 * If <code>refreshMetadata</code> function is called after this promise is already resolved you should rely on the promise returned by
 * <code>refreshMetadata</code> to get information about the refreshed metadata loaded state.
 * 
 * @public
 * @returns {Promise} A promise on metadata loaded state
 * 
 * @since 1.30
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.metadataLoaded = function() { return null; };

/**
 * Trigger a <code>GET</code> request to the OData service that was specified in the model constructor.
 * 
 * The data will be stored in the model. The requested data is returned with the response.
 * 
 * @param {string} sPath A string containing the path to the data which should
 * 		be retrieved. The path is concatenated to the service URL
 * 		which was specified in the model constructor.
 * @param {map} [mParameters] Optional parameter map containing any of the following properties:
 * @param {object} [mParameters.context] If specified, <code>sPath</code> has to be relative to the path
 * 		given with the context.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @param {sap.ui.model.Filter[]} [mParameters.filters] An array of filters to be included in the request URL
 * @param {sap.ui.model.Sorter[]} [mParameters.sorters] An array of sorters to be included in the request URL
 * @param {function} [mParameters.success] A callback function which is called when the data has
 * 		been successfully retrieved. The handler can have the
 * 		following parameters: <code>oData</code> and <code>response</code>. The <code>oData</code> parameter contains the data of the retrieved data.
 * 		The <code>response</code> parameter contains further information about the response of the request.
 * @param {function} [mParameters.error] A callback function which is called when the request
 * 		failed. The handler can have the parameter: <code>oError</code> which contains additional error information.
 * @param {string} [mParameters.batchGroupId] Deprecated - use <code>groupId</code> instead
 * @param {string} [mParameters.groupId] ID of a request group; requests belonging to the same group will be bundled in one batch request
 * 
 * @return {object} An object which has an <code>abort</code> function to abort the current request.
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.read = function(sPath,mParameters) { return new Object(); };

/**
 * Refresh the model.
 * 
 * This will check all bindings for updated data and update the controls if data has been changed.
 * 
 * @param {boolean} [bForceUpdate=false] Force update of controls
 * @param {boolean} [bRemoveData=false] If set to <code>true</code> then the model data will be removed/cleared.
 * 					Please note that the data might not be there when calling e.g. <code>getProperty</code> too early before the refresh call returned.
 * @param {string} [sGroupId] ID of a request group; requests belonging to the same group will be bundled in one batch request
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.refresh = function(bForceUpdate,bRemoveData,sGroupId) {  };

/**
 * Refreshes the metadata for this model, for example when the request for metadata has failed.
 * 
 * <b>Note</b>: Do not use <code>refreshMetadata</code> if the metadata is outdated or should be updated.
 * 	     This will lead to inconsistent data in the application.
 * 
 * Returns a new promise which can be resolved or rejected depending on the metadata loading state.
 * 
 * @returns {Promise} A promise on metadata loaded state or <code>null</code> if metadata is not initialized or currently refreshed.
 * 
 * @deprecated
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.refreshMetadata = function() { return null; };

/**
 * Refresh XSRF token by performing a GET request against the service root URL.
 * 
 * @param {function} [fnSuccess] Callback function which is called when the data has
 *            					 been successfully retrieved.
 * @param {function} [fnError] Callback function which is called when the request failed. The handler can have the parameter: oError which contains
 *  additional error information.
 * @param {boolean} [bAsync=false] Whether the request should be send asynchronously
 * @returns {object} An object which has an <code>abort</code> function to abort the current request.
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.refreshSecurityToken = function(fnSuccess,fnError,bAsync) { return new Object(); };

/**
 * Trigger a <code>DELETE</code> request to the OData service that was specified in the model constructor.
 * 
 * @param {string} sPath A string containing the path to the data that should be removed.
 * 		The path is concatenated to the service URL which was specified in the model constructor.
 * @param {object} [mParameters] Optional, can contain the following attributes:
 * @param {object} [mParameters.context] If specified, <code>sPath</code> has to be relative to the path given with the context.
 * @param {function} [mParameters.success] A callback function which is called when the data has been successfully retrieved.
 * 		The handler can have the following parameters: <code>oData<code> and <code>response</code>.
 * @param {function} [mParameters.error] A callback function which is called when the request failed.
 * 		The handler can have the parameter: <code>oError</code> which contains additional error information.
 * @param {string} [mParameters.eTag] If specified, the <code>If-Match</code> header will be set to this ETag.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @param {map} [mParameters.headers] A map of headers for this request
 * @param {string} [mParameters.batchGroupId] Deprecated - use <code>groupId</code> instead
 * @param {string} [mParameters.groupId] ID of a request group; requests belonging to the same group will be bundled in one batch request
 * @param {string} [mParameters.changeSetId] ID of the <code>ChangeSet</code> that this request should belong to
 * @param {string} [mParameters.refreshAfterChange] Defines whether to update all bindings after submitting this change operation. See {@link #setRefreshAfterChange}
 * 	           If given, this overrules the model-wide <code>refreshAfterChange</code> flag for this operation only.
 * 
 * @return {object} An object which has an <code>abort</code> function to abort the current request.
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.remove = function(sPath,mParameters) { return new Object(); };

/**
 * Resets the changes that have been collected by the {@link #setProperty} method.
 * 
 * @param {array} [aPath] 	Array of paths that should be reset.
 * 							If no array is passed, all changes will be reset.
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.resetChanges = function(aPath) {  };

/**
 * Returns a promise, which will resolve with the security token as soon as it is available.
 * 
 * @returns {Promise} A promise on the CSRF security token
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.securityTokenAvailable = function() { return null; };

/**
 * Definition of batch groups per entity type for two-way binding changes.
 * 
 * @param {map} mGroups A map containing the definition of batch groups for two-way binding changes. The map has the
 * following format:
 * <pre>
 * {
 *   "EntityTypeName": {
 *     batchGroupId: "ID",
 *     [changeSetId: "ID",]
 *     [single: true/false,]
 *   }
 * }
 * </pre>
 * <ul>
 * <li><code>batchGroupId</code>: Defines the batch group for changes of the defined <i>EntityTypeName</i></li>
 * <li><code>changeSetId</code>: ID of a <code>ChangeSet</code> which bundles the changes for the entity type.</li>
 * <li><code>single</code>: Defines if every change will get an own change set (defaults to <code>true</code>)</li>
 * </ul>
 * @deprecated Since 1.32 use {@link #setChangesGroups} instead
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setChangeBatchGroups = function(mGroups) {  };

/**
 * Definition of groups per entity type for two-way binding changes.
 * 
 * @param {map} mGroups A map containing the definition of batch groups for two-way binding changes. The map has the
 * following format:
 * <pre>
 * {
 *   "EntityTypeName": {
 *     groupId: "ID",
 *     [changeSetId: "ID",]
 *     [single: true/false,]
 *   }
 * }
 * </pre>
 * <ul>
 * <li><code>groupId</code>: Defines the group for changes of the defined <i>EntityTypeName</i></li>
 * <li><code>changeSetId</code>: ID of a <code>ChangeSet</code> which bundles the changes for the entity type.</li>
 * <li><code>single</code>: Defines if every change will get an own change set (defaults to <code>true</code>)</li>
 * </ul>
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setChangeGroups = function(mGroups) {  };

/**
 * Sets the default mode how to retrieve the item count for a collection in this model.
 * 
 * The count can be determined in the following ways
 * <ul>
 * <li>by sending a separate <code>$count</code> request</li>
 * <li>by adding parameter <code>$inlinecount=allpages</code> to one or all data requests</li>
 * <li>a combination of the previous two</li>
 * <li>not at all (questions about the size of the collection can't be answered then)</li>
 * </ul>
 * See {@link sap.ui.model.odata.CountMode} for all enumeration values and more details.
 * 
 * Note that a call to this method does not modify the count mode for existing list bindings,
 * only bindings that are created afterwards will use the new mode when no mode is defined at their creation.
 * 
 * If no default count mode is set for an <code>ODataModel</code> (v2), the mode <code>Request</code> will be used.
 * 
 * @param {sap.ui.model.odata.CountMode} sCountMode The new default count mode for this model
 * @since 1.20
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setDefaultCountMode = function(sCountMode) {  };

/**
 * Setting batch groups as deferred.
 * 
 * Requests that belong to a deferred batch group have to be sent by explicitly calling {@link #submitChanges}.
 * 
 * @param {array} aGroupIds Array of batch group IDs that should be set as deferred
 * @deprecated Since 1.32 use {@link #setDeferredGroups} instead
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setDeferredBatchGroups = function(aGroupIds) {  };

/**
 * Setting request groups as deferred.
 * 
 * Requests that belong to a deferred group will be sent by explicitly calling {@link #submitChanges}.
 * 
 * @param {array} aGroupIds Array of group IDs that should be set as deferred
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setDeferredGroups = function(aGroupIds) {  };

/**
 * Set custom headers which are provided in a key/value map.
 * 
 * These headers are used for requests against the OData backend.
 * Private headers which are set in the ODataModel cannot be modified.
 * These private headers are: <code>accept, accept-language, x-csrf-token, MaxDataServiceVersion, DataServiceVersion</code>.
 * 
 * To remove these custom headers simply set the <code>mCustomHeaders</code> parameter to null.
 * Please also note that when calling this method again all previous custom headers
 * are removed unless they are specified again in the <code>mCustomHeaders</code> parameter.
 * 
 * @param {object} mHeaders The header name/value map.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setHeaders = function(mHeaders) {  };

/**
 * Sets a new value for the given property <code>sPath</code> in the model.
 * 
 * If the <code>changeBatchGroup</code> for the changed entity type is set to deferred changes could be submitted
 * with {@link #submitChanges}. Otherwise the change will be submitted directly.
 * 
 * @param {string}  sPath Path of the property to set
 * @param {any}     oValue Value to set the property to
 * @param {sap.ui.model.Context} [oContext=null] The context which will be used to set the property
 * @param {boolean} [bAsyncUpdate] Whether to update other bindings dependent on this property asynchronously
 * @return {boolean} <code>true</code> if the value was set correctly and <code>false</code if errors occurred
 *                   like the entry was not found or another entry was already updated.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setProperty = function(sPath,oValue,oContext,bAsyncUpdate) { return false; };

/**
 * Defines whether all bindings are updated after a change operation.
 * 
 * This flag can be overruled on request level by providing the <code>refreshAfterChange</code>
 * parameter to the corresponding function (for example {@link #update}).
 * 
 * @param {boolean} bRefreshAfterChange Whether to automatically refresh after changes
 * @public
 * @since 1.16.3
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setRefreshAfterChange = function(bRefreshAfterChange) {  };

/**
 * Enable/Disable XCSRF-Token handling.
 * @param {boolean} [bTokenHandling=true] Whether to use token handling or not
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setTokenHandlingEnabled = function(bTokenHandling) {  };

/**
 * Enable or disable batch mode for future requests.
 * 
 * @param {boolean} [bUseBatch=false] Whether the requests should be encapsulated in a batch request
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.setUseBatch = function(bUseBatch) {  };

/**
 * Submits the collected changes which were collected by the {@link #setProperty} method.
 * 
 * The update method is defined by the global <code>defaultUpdateMethod</code> parameter which is
 * <code>sap.ui.model.odata.UpdateMethod.Merge</code> by default. In case of a <code>sap.ui.model.odata.UpdateMethod.Merge</code>
 * request only the changed properties will be updated.
 * If a URI with a <code>$expand</code> query option was used then the expand entries will be removed from the collected changes.
 * Changes to this entries should be done on the entry itself. So no deep updates are supported.
 * 
 * <b>Important</b>: The success/error handler will only be called if batch support is enabled. If multiple batch groups are submitted the handlers will be called for every batch group.
 * 
 * @param {object} [mParameters] A map which contains the following parameter properties:
 * @param {string} [mParameters.batchGroupId] Deprecated - use <code>groupId</code> instead
 * @param {string} [mParameters.groupId] Defines the group that should be submitted. If not specified all deferred groups will be submitted. Requests belonging to the same group will be bundled in one batch request.
 * @param {function} [mParameters.success] A callback function which is called when the data has been successfully updated. The handler can have the following parameters: <code>oData</code>. <code>oData</code> contains the
 * parsed response data as a Javascript object. The batch response is in the <code>__batchResponses</code> property which may contain further <code>__changeResponses</code> in an array depending on the amount of changes
 * and change sets of the actual batch request which was sent to the backend.
 * The changeResponses contain the actual response of that change set in the <code>response</code> property.
 * For each change set there is also a <code>__changeResponse</code> property.
 * @param {function} [mParameters.error] A callback function which is called when the request failed. The handler can have the parameter: <code>oError</code> which contains additional error information
 * @param {string} [mParameters.eTag] An ETag which can be used for concurrency control. If it is specified, it will be used in an <code>If-Match</code> header in the request to the server for this entry
 * @return {object} An object which has an <code>abort</code> function to abort the current request or requests
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.submitChanges = function(mParameters) { return new Object(); };

/**
 * Trigger a <code>PUT/MERGE</code> request to the OData service that was specified in the model constructor.
 * 
 * The update method used is defined by the global <code>defaultUpdateMethod</code> parameter which is
 * <code>sap.ui.model.odata.UpdateMethod.Merge</code> by default. Please note that deep updates are not
 * supported and may not work. These should be done separately and directly on the corresponding entry.
 * 
 * @param {string} sPath A string containing the path to the data that should be updated.
 * 		The path is concatenated to the sServiceUrl which was specified
 * 		in the model constructor.
 * @param {object} oData Data of the entry that should be updated.
 * @param {map} [mParameters] Optional, can contain the following attributes:
 * @param {object} [mParameters.context] If specified the sPath has to be is relative to the path given with the context.
 * @param {function} [mParameters.success] A callback function which is called when the data has been successfully updated.
 * @param {function} [mParameters.error] A callback function which is called when the request failed.
 * 		The handler can have the parameter <code>oError</code> which contains additional error information.
 * @param {string} [mParameters.eTag] If specified, the <code>If-Match</code> header will be set to this ETag.
 * 		Caution: This feature in not officially supported as using asynchronous requests can lead
 * 		to data inconsistencies. If you decide to use this feature nevertheless, you have to make
 * 		sure that the request is completed before the data is processed any further.
 * @param {map} [mParameters.urlParameters] A map containing the parameters that will be passed as query strings
 * @param {map} [mParameters.headers] A map of headers for this request
 * @param {string} [mParameters.batchGroupId] Deprecated - use <code>groupId</code> instead
 * @param {string} [mParameters.groupId] ID of a request group; requests belonging to the same group will be bundled in one batch request
 * @param {string} [mParameters.changeSetId] ID of the <code>ChangeSet</code> that this request should belong to
 * @param {string} [mParameters.refreshAfterChange] Defines whether to update all bindings after submitting this change operation. See {@link #setRefreshAfterChange}
 * 	           If given, this overrules the model-wide <code>refreshAfterChange</code> flag for this operation only.
 * 
 * @return {object} An object which has an <code>abort</code> function to abort the current request.
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.update = function(sPath,oData,mParameters) { return new Object(); };

/**
 * Update all bindings.
 * 
 * @param {boolean} [bForceUpdate=false] If set to <code>false</code>, an update will only be done when the value of a binding changed.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataModel.prototype.updateBindings = function(bForceUpdate) {  };


// ---- sap.ui.model.odata.v2.ODataTreeBinding --------------------------------------------------------------------------

/**
 * 
 * 
 * @class
 * Tree binding implementation for OData models.
 * 
 * <h3>Hierarchy Annotations</h3>
 * To use the v2.ODataTreeBinding with an OData service, which exposes hierarchy annotations, please
 * see the <b>"SAP Annotations for OData Version 2.0"</b> Specification.
 * The required property annotations, as well as accepted/default values are documented in the specification.
 * 
 * Services which include the <code>hierarchy-node-descendant-count-for</code> annotation and expose the data points in a depth-first pre-order sorted manner,
 * can use an optimized auto-expand feature by specifying the <code>numberOfExpandedLevels</code> in the binding parameters.
 * This will pre-expand the hierarchy to the given number of levels, with one single initial OData request.
 * 
 * For services without the <code>hierarchy-node-descendant-count-for</code> annotation, the <code>numberOfExpandedLevels</code> property is deprecated.
 * 
 * <h3>Navigation Properties</h3>
 * <i>Important: The use of navigation properties to build up the hierarchy structure is deprecated and it is recommended to use the hierarchy annotations mentioned above instead.</i>
 * In addition to these hierarchy annotations, the ODataTreeBinding also supports (cyclic) references between entities based on navigation properties.
 * To do this you have to specify the binding parameter "navigation".
 * The pattern for this is as follows: { entitySetName: "navigationPropertyName" }.
 * Example: {
 * 	 "Employees": "toColleagues"
 * }
 * 
 * <h3>OperationModes</h3>
 * For a full definition and explanation of all OData binding OperationModes please see {@link sap.ui.model.odata.OperationMode}.
 * 
 * <h4>In OperationMode.Server</h4>
 * Filtering on the ODataTreeBinding is only supported with application filters.
 * However please be aware that this applies only to filters which do not prevent the creation of a hierarchy.
 * So filtering on a property (e.g. a "Customer") is fine, as long as the application can ensure that the responses from the backend are sufficient
 * to create a valid hierarchy on the client. Subsequent paging requests for sibiling and child nodes must also return responses since the filters will be sent with
 * every request.
 * Using Control-Filters ({@link sap.ui.model.FilterType}) via the filter() function is not supported for the OperationMode.Server.
 * 
 * </h4>OperationMode.Client and OperationMode.Auto</h4>
 * The ODataTreeBinding supports Control-Filters only in OperationModes <code>Client</code> and <code>Auto</code>.
 * 
 * In these OperationModes, the filters and sorters will be applied on the client, same as for the v2.ODataListBinding.
 * 
 * The OperationModes <code>Client</code> and <code>Auto</code> are only supported for services. which expose the hierarchy annotations mentioned above, but do <b>not</b>
 * expose the <code>hierarchy-node-descendant-count-for</code> annotation.
 * Services with hierarchy annotations including the <code>hierarchy-node-descendant-count-for</code> annotation, do NOT support the OperationModes Client and Auto.
 * 
 * @param {sap.ui.model.Model} oModel
 * @param {string} sPath
 * @param {sap.ui.model.Context} oContext
 * @param {sap.ui.model.Filter[]} [aApplicationFilters] predefined filter/s (can be either a filter or an array of filters). All initial filters,
 * 										   will be sent with every request. Filtering on the ODataTreeBinding is only supported with initial filters.
 * @param {object} [mParameters] Parameter Object
 * 
 * @param {object} [mParameters.treeAnnotationProperties] This parameter defines the mapping between data properties and
 * 														the hierarchy used to visualize the tree, if not provided by the services metadata.
 * 														For correct metadata annotation, please check the "SAP Annotations for OData Version 2.0" Specification.
 * @param {int} [mParameters.treeAnnotationProperties.hierarchyLevelFor] Mapping to the property holding the level information,
 * @param {string} [mParameters.treeAnnotationProperties.hierarchyNodeFor] Mapping to the property holding the hierarchy node id,
 * @param {string} [mParameters.treeAnnotationProperties.hierarchyParentNodeFor] Mapping to the property holding the parent node id,
 * @param {string} [mParameters.treeAnnotationProperties.hierarchyDrillStateFor] Mapping to the property holding the drill state for the node,
 * @param {string} [mParameters.treeAnnotationProperties.hierarchyNodeDescendantCountFor] Mapping to the property holding the descendant count for the node.
 * @param {object} [mParameters.navigation] A map describing the navigation properties between entity sets, which should be used for constructing and paging the tree.
 * @param {int} [mParameters.numberOfExpandedLevels=0] This property defines the number of levels, which will be expanded initially.
 * 													Please be aware, that this property leads to multiple backend requests. Default value is 0.
 * 													The auto-expand feature is deprecated for services without the "hierarchy-node-descendant-count-for" annotation.
 * @param {int} [mParameters.rootLevel=0] The root level is the level of the topmost tree nodes, which will be used as an entry point for OData services.
 * 										Conforming to the "SAP Annotations for OData Version 2.0" Specification, the root level must start at 0.
 * 										Default value is thus 0.
 * @param {string} [mParameters.batchGroupId] Deprecated - use groupId instead: sets the batch group id to be used for requests originating from this binding
 * @param {string} [mParameters.groupId] sets the group id to be used for requests originating from this binding
 * @param {sap.ui.model.Sorter[]} [aSorters] predefined sorter/s (can be either a sorter or an array of sorters)
 * @param {sap.ui.model.odata.OperationMode} [mParameters.operationMode] Operation mode for this binding; defaults to the model's default operation mode when not specified
 * @param {int} [mParameters.threshold] a threshold, which will be used if the OperationMode is set to "Auto".
 * 										In case of OperationMode.Auto, the binding tries to fetch (at least) as many entries as the threshold.
 * 										Also see API documentation for {@link sap.ui.model.odata.OperationMode.Auto}.
 * 										OperationMode.Auto is only supported for services which exposes the hierarchy-annotations, yet do NO expose the "hierarchy-node-descendant-count-for" annotation.
 * @param {boolean} [mParameters.useServersideApplicationFilters] set this flag if $filter statements should be used for the $count/$inlinecount and data-retrieval in the OperationMode.Auto.
 * 													 Only use this if your backend supports prefiltering the tree and is capable of responding a complete tree hierarchy,
 * 													 including all inner nodes. To construct the hierarchy on the client, it is mandatory that all filter-matches include their complete
 * 													 parent chain up to the root level.
 * 													 OperationMode.Client will still request the complete collection without filters, since they will be applied clientside.
 * @param {boolean} [mParameters.treeState] A tree state handle can be given to the ODataTreeBinding when two conditions are met:
 * 											 The binding is running in OperationMode.Client AND the sap.ui.table.TreeTable is used.
 * 											 The feature is only available when using the ODataTreeBindingAdapter, which is automatically applied when using the sap.ui.table.TreeTable.
 * 											 The tree state handle will contain all necessary information to expand the tree to the given state.
 * 											 This feature is not supported in OperationMode.Server and OperationMode.Auto.
 * 											 Please see also the getCurrentTreeState function in the class ODataTreeBindingAdapter.
 * @public
 * @extends sap.ui.model.TreeBinding
 * 
 */
sap.ui.model.odata.v2.ODataTreeBinding = function(oModel,sPath,oContext,aApplicationFilters,mParameters,aSorters) {};
/**
 * Creates a new subclass of class sap.ui.model.odata.v2.ODataTreeBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v2.ODataTreeBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Applies the given filters to the ODataTreeBinding.
 * Please note that "Control" filters are not suported for OperationMode.Server, here only "Application" filters are allowed.
 * Filters given via the constructor are always Application filters and will be send with every backend-request.
 * Please see the constructor documentation for more information.
 * 
 * Since 1.34.0 complete clientside filtering is supported for OperationMode.Client and in OperationMode.Auto, in case the backend-count is lower than the threshold.
 * In this case all control and application filters will be applied on the client.
 * See also: {@link sap.ui.model.odata.OperationMode.Auto}, {@link sap.ui.model.FilterType}.
 * 
 * For the OperationMode.Client and OperationMode.Auto, you may also specify the "useServersideApplicationFilters" constructor binding parameter.
 * If this is set, the Application filters will always be applied on the backend, and thus trigger an OData request.
 * Please see the constructor documentation for more information.
 * 
 * @param {sap.ui.model.Filter[]|sap.ui.model.Filter} aFilters
 * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour FilterType.Client applies
 * @see sap.ui.model.TreeBinding.prototype.filter
 * @return {sap.ui.model.odata.v2.ODataTreeBinding} returns <code>this</code> to facilitate method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataTreeBinding.prototype.filter = function(aFilters,sFilterType) { return new sap.ui.model.odata.v2.ODataTreeBinding(); };

/**
 * Returns the number of child nodes. This function is not available when the annotation "hierarchy-node-descendant-count-for"
 * is exposed on the service.
 * 
 * @param {Object} oContext the context element of the node
 * @return {int} the number of children
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataTreeBinding.prototype.getChildCount = function(oContext) { return 0; };

/**
 * Get a download URL with the specified format considering the
 * sort/filter/custom parameters.
 * 
 * @param {string} sFormat Value for the $format Parameter
 * @return {string} URL which can be used for downloading
 * @since 1.28
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataTreeBinding.prototype.getDownloadUrl = function(sFormat) { return ""; };

/**
 * Returns a metadata object for class sap.ui.model.odata.v2.ODataTreeBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v2.ODataTreeBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the contexts of the child nodes for the given context. This function is not available when the annotation "hierarchy-node-descendant-count-for"
 * is exposed on the service.
 * 
 * @param {sap.ui.model.Context} oContext the context for which the child nodes should be retrieved
 * @param {int} iStartIndex the start index of the requested contexts
 * @param {int} iLength the requested amount of contexts
 * @param {int} iThreshold
 * @return {sap.ui.model.Context[]} the contexts array
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataTreeBinding.prototype.getNodeContexts = function(oContext,iStartIndex,iLength,iThreshold) { return new Array(); };

/**
 * Returns root contexts for the tree. You can specify the start index and the length for paging requests.
 * This function is not available when the annotation "hierarchy-node-descendant-count-for" is exposed on the service.
 * 
 * @param {int} [iStartIndex=0] the start index of the requested contexts
 * @param {int} [iLength=v2.ODataModel.sizeLimit] the requested amount of contexts. If none given, the default value is the size limit of the underlying
 * 												 sap.ui.model.odata.v2.ODataModel instance.
 * @param {int} [iThreshold=0] the number of entities which should be retrieved in addition to the given length.
 * 				  A higher threshold reduces the number of backend requests, yet these request blow up in size, since more data is loaded.
 * @return {sap.ui.model.Context[]} an array containing the contexts for the entities returned by the backend, might be fewer than requested
 * 								  if the backend does not have enough data.
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataTreeBinding.prototype.getRootContexts = function(iStartIndex,iLength,iThreshold) { return new Array(); };

/**
 * Returns the rootLevel
 * @returns {int}
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataTreeBinding.prototype.getRootLevel = function() { return 0; };

/**
 * Returns if the node has child nodes.
 * If the ODataTreeBinding is running with hierarchy annotations, a context with the property values "expanded" or "collapsed"
 * for the drilldown state property, returns true. Entities with drilldown state "leaf" return false.
 * 
 * This function is not available when the annotation "hierarchy-node-descendant-count-for" is exposed on the service.
 * 
 * @param {sap.ui.model.Context} oContext the context element of the node
 * @return {boolean} true if node has children
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataTreeBinding.prototype.hasChildren = function(oContext) { return false; };

/**
 * Initialize binding. Fires a change if data is already available ($expand) or a refresh.
 * If metadata is not yet available, do nothing, method will be called again when
 * metadata is loaded.
 * 
 * @returns {sap.ui.model.odata.v2.ODataTreeBinding} The binding instance
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataTreeBinding.prototype.initialize = function() { return new sap.ui.model.odata.v2.ODataTreeBinding(); };

/**
 * Refreshes the binding, check whether the model data has been changed and fire change event
 * if this is the case. For server side models this should refetch the data from the server.
 * To update a control, even if no data has been changed, e.g. to reset a control after failed
 * validation, please use the parameter bForceUpdate.
 * 
 * @param {boolean} [bForceUpdate] Update the bound control even if no data has been changed
 * @param {string} [sGroupId] The  group Id for the refresh
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataTreeBinding.prototype.refresh = function(bForceUpdate,sGroupId) {  };

/**
 * Sets the rootLevel
 * The root level is the level of the topmost tree nodes, which will be used as an entry point for OData services.
 * This is only possible (and necessary) for OData services implementing the hierarchy annotation specification,
 * or when providing the annotation information locally as a binding parameter. See the constructor for API documentation on this.
 * @param {int} iRootLevel
 * 
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataTreeBinding.prototype.setRootLevel = function(iRootLevel) {  };

/**
 * Sorts the Tree according to the given Sorter(s).
 * In OperationMode.Client or OperationMode.Auto (if the given threshold is satisfied), the sorters are applied locally on the client.
 * 
 * @param {sap.ui.model.Sorter[]|sap.ui.model.Sorter} aSorters the Sorter or an Array of sap.ui.model.Sorter instances
 * @return {sap.ui.model.odata.v2.ODataTreeBinding} returns <code>this</code> to facilitate method chaining
 * @public
 * 
 */
sap.ui.model.odata.v2.ODataTreeBinding.prototype.sort = function(aSorters) { return new sap.ui.model.odata.v2.ODataTreeBinding(); };


// ---- sap.ui.model.odata.v4 --------------------------------------------------------------------------


// ---- sap.ui.model.odata.v4.AnnotationHelper --------------------------------------------------------------------------

/**
 * Returns a data binding according to the result of {@link #getNavigationPath}.
 * 
 * @param {string} sPath
 *   The path value from the meta model, for example
 *   "ToSupplier/@com.sap.vocabularies.Communication.v1.Address" or
 *   "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"
 * @returns {string}
 *   A data binding according to the result of {@link #getNavigationPath}, for example
 *   "{ToSupplier}" or ""
 * @throws {Error}
 *   If the result of {@link #getNavigationPath} contains segments which are not valid
 *   OData identifiers and violate the data binding syntax
 * 
 * @public
 * @since 1.43.0
 * 
 * @memberof sap.ui.model.odata.v4.AnnotationHelper
 */
sap.ui.model.odata.v4.AnnotationHelper.getNavigationBinding = function(sPath) { return ""; };

/**
 * A function that helps to interpret OData V4 annotations. It knows about the syntax
 * of the path value used by the following dynamic expressions:
 * <ul>
 * <li>"14.5.2 Expression edm:AnnotationPath"</li>
 * <li>"14.5.11 Expression edm:NavigationPropertyPath"</li>
 * <li>"14.5.12 Expression edm:Path"</li>
 * <li>"14.5.13 Expression edm:PropertyPath"</li>
 * </ul>
 * It returns the path of structural and navigation properties from the given path
 * value, but removes "$count", types casts, term casts, and annotations of navigation
 * properties.
 * 
 * @param {string} sPath
 *   The path value from the meta model, for example
 *   "ToSupplier/@com.sap.vocabularies.Communication.v1.Address" or
 *   "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"
 * @returns {string}
 *   The path of structural and navigation properties, for example "ToSupplier" or ""
 * 
 * @public
 * @since 1.43.0
 * 
 * @memberof sap.ui.model.odata.v4.AnnotationHelper
 */
sap.ui.model.odata.v4.AnnotationHelper.getNavigationPath = function(sPath) { return ""; };

/**
 * Determines which type of value list exists for the given property.
 * 
 * @param {any} vRawValue
 *   The raw value from the meta model; must be either a property or a path pointing to
 *   a property (relative to <code>oDetails.schemaChildName</code>)
 * @param {object} oDetails
 *   The details object
 * @param {sap.ui.model.Context} oDetails.context
 *   Points to the given path, that is
 *   <code>oDetails.context.getProperty("") === vRawValue</code>
 * @param {string} oDetails.schemaChildName
 *   The qualified name of the schema child where the computed annotation has been
 *   found, for example "name.space.EntityType"
 * @returns {sap.ui.model.odata.v4.ValueListType}
 *   The type of the value list
 * @throws {Error}
 *   If the property cannot be found in the metadata
 * 
 * @public
 * @since 1.47.0
 * 
 * @memberof sap.ui.model.odata.v4.AnnotationHelper
 */
sap.ui.model.odata.v4.AnnotationHelper.getValueListType = function(vRawValue,oDetails) { return new sap.ui.model.odata.v4.ValueListType(); };

/**
 * A function that helps to interpret OData V4 annotations. It knows about the syntax
 * of the path value used by the following dynamic expressions:
 * <ul>
 * <li>"14.5.2 Expression edm:AnnotationPath"</li>
 * <li>"14.5.11 Expression edm:NavigationPropertyPath"</li>
 * <li>"14.5.12 Expression edm:Path"</li>
 * <li>"14.5.13 Expression edm:PropertyPath"</li>
 * </ul>
 * It returns the information whether the given path ends with "$count" or with a
 * multi-valued structural or navigation property. Term casts and annotations of
 * navigation properties are ignored.
 * 
 * Examples:
 * <pre>
 * &lt;template:if test="{facet>Target/$AnnotationPath@@sap.ui.model.odata.v4.AnnotationHelper.isMultiple}">
 * </pre>
 * 
 * @param {string} sPath
 *   The path value from the meta model, for example
 *   "ToSupplier/@com.sap.vocabularies.Communication.v1.Address" or
 *   "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"
 * @param {object} oDetails
 *   The details object
 * @param {sap.ui.model.Context} oDetails.context
 *   Points to the given path, that is
 *   <code>oDetails.context.getProperty("") === sPath</code>
 * @param {string} oDetails.schemaChildName
 *   The qualified name of the schema child where the computed annotation has been
 *   found, for example "name.space.EntityType"
 * @returns {boolean}
 *   <code>true</code> if the given path ends with "$count" or with a multi-valued
 *   structural or navigation property, <code>false</code> otherwise
 * 
 * @public
 * @since 1.43.0
 * 
 * @memberof sap.ui.model.odata.v4.AnnotationHelper
 */
sap.ui.model.odata.v4.AnnotationHelper.isMultiple = function(sPath,oDetails) { return false; };

/**
 * A function that helps to interpret OData V4 annotations. It knows about
 * <ul>
 *   <li> the "14.4 Constant Expressions" for "edm:Bool", "edm:Date",
 *   "edm:DateTimeOffset", "edm:Decimal", "edm:Float", "edm:Guid", "edm:Int",
 *   "edm:TimeOfDay".
 *   <li> the constant "14.4.11 Expression edm:String": This is turned into a fixed
 *   text (e.g. <code>"Width"</code>). String constants that contain a simple binding
 *   <code>"{@i18n>...}"</code> to the hard-coded model name "@i18n" with arbitrary path
 *   are not turned into a fixed text, but kept as a data binding expression; this
 *   allows local annotation files to refer to a resource bundle for
 *   internationalization.
 *   <li> the dynamic "14.5.1 Comparison and Logical Operators": These are turned into
 *   expression bindings to perform the operations at run-time.
 *   <li> the dynamic "14.5.3 Expression edm:Apply":
 *   <ul>
 *     <li> "14.5.3.1.1 Function odata.concat": This is turned into a data binding
 *     expression.
 *     <li> "14.5.3.1.2 Function odata.fillUriTemplate": This is turned into an
 *     expression binding to fill the template at run-time.
 *     <li> "14.5.3.1.3 Function odata.uriEncode": This is turned into an expression
 *     binding to encode the parameter at run-time.
 *     <li> Apply functions may be nested arbitrarily.
 *   </ul>
 *   <li> the dynamic "14.5.6 Expression edm:If": This is turned into an expression
 *   binding to be evaluated at run-time. The expression is a conditional expression
 *   like <code>"{=condition ? expression1 : expression2}"</code>.
 *   <li> the dynamic "14.5.10 Expression edm:Null": This is turned into a
 *   <code>null</code> value. In <code>odata.concat</code> it is ignored.
 *   <li> the dynamic "14.5.12 Expression edm:Path" and "14.5.13 Expression
 *   edm:PropertyPath": This is turned into a simple data binding, e.g.
 *   <code>"{Name}"</code>.
 * </ul>
 * Unsupported or incorrect values are turned into a string nevertheless, but indicated
 * as such. An error describing the problem is logged to the console in such a case.
 * 
 * Example:
 * <pre>
 * &lt;Text text="{meta>Value/@@sap.ui.model.odata.v4.AnnotationHelper.value}" />
 * </pre>
 * 
 * @param {any} vRawValue
 *   The raw value from the meta model
 * @param {object} oDetails
 *   The details object
 * @param {sap.ui.model.Context} oDetails.context
 *   Points to the given raw value, that is
 *   <code>oDetails.context.getProperty("") === vRawValue</code>
 * @returns {string}
 *   A data binding or a fixed text or a sequence thereof
 * 
 * @public
 * @since 1.43.0
 * 
 * @memberof sap.ui.model.odata.v4.AnnotationHelper
 */
sap.ui.model.odata.v4.AnnotationHelper.value = function(vRawValue,oDetails) { return ""; };


// ---- sap.ui.model.odata.v4.Context --------------------------------------------------------------------------

/**
 * Do <strong>NOT</strong> call this private constructor. In the OData V4 model you cannot
 * create contexts at will: retrieve them from a binding or a view element instead.
 * 
 * 
 * @param {sap.ui.model.odata.v4.ODataModel} oModel
 *   The model
 * @param {sap.ui.model.odata.v4.ODataContextBinding|sap.ui.model.odata.v4.ODataListBinding} oBinding
 *   A binding that belongs to the model
 * @param {string} sPath
 *   An absolute path without trailing slash
 * @param {number} [iIndex]
 *   Index of item (within the collection addressed by <code>sPath</code>) represented
 *   by this context; used by list bindings, not context bindings
 * @param {Promise} [oCreatePromise]
 *   Promise returned by {@link #created}
 * @class Implementation of an OData V4 model's context.
 * 
 *   The context is a pointer to model data as returned by a query from a
 *   {@link sap.ui.model.odata.v4.ODataContextBinding} or a
 *   {@link sap.ui.model.odata.v4.ODataListBinding}. Contexts are always and only
 *   created by such bindings. A context for a context binding points to the complete query
 *   result. A context for a list binding points to one specific entry in the binding's
 *   collection. A property binding does not have a context, you can access its value via
 *   {@link sap.ui.model.odata.v4.ODataPropertyBinding#getValue}.
 * 
 *   Applications can access model data only via a context, either synchronously with the risk
 *   that the values are not available yet ({@link #getProperty} and {@link #getObject}) or
 *   asynchronously ({@link #requestProperty} and {@link #requestObject}).
 * 
 *   Context instances are immutable.
 * @extends sap.ui.model.Context
 * @public
 * @since 1.39.0
 * @version 1.48.4
 * 
 */
sap.ui.model.odata.v4.Context = function(oModel,oBinding,sPath,iIndex,oCreatePromise) {};
/**
 * Returns a promise that is resolved without data when the entity represented by this context
 * has been created in the backend. As long as it is not yet resolved or rejected the entity
 * represented by this context is transient.
 * 
 * @returns {Promise}
 *   A promise that is resolved without data when the entity represented by this context has
 *   been created in the backend. Returns <code>undefined</code> if the context has not been
 *   created using {@link sap.ui.model.odata.v4.ODataListBinding#create}.
 * 
 * @public
 * @since 1.43.0
 * 
 */
sap.ui.model.odata.v4.Context.prototype.created = function() { return null; };

/**
 * Destroys this context, that is, it removes this context from all dependent bindings and drops
 * references to binding and model, so that the context cannot be used anymore; it keeps path
 * and index for debugging purposes.
 * 
 * @public
 * @see sap.ui.model.Context#destroy
 * @since 1.41.0
 * 
 */
sap.ui.model.odata.v4.Context.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.model.odata.v4.Context with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Context.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v4.Context.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the binding this context belongs to.
 * 
 * @returns {sap.ui.model.odata.v4.ODataContextBinding|sap.ui.model.odata.v4.ODataListBinding}
 *   The context's binding
 * 
 * @public
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.Context.prototype.getBinding = function() { return new sap.ui.model.odata.v4.ODataContextBinding(); };

/**
 * Returns the "canonical path" of the entity for this context.
 * According to "4.3.1 Canonical URL" of the specification "OData Version 4.0 Part 2: URL
 * Conventions", this is the "name of the entity set associated with the entity followed by the
 * key predicate identifying the entity within the collection".
 * Use the canonical path in {@link sap.ui.core.Element#bindElement} to create an element
 * binding.
 * Note: For a transient context (see {@link #isTransient}) a wrong path is returned unless all
 * key properties are available within the initial data.
 * 
 * @returns {string}
 *   The canonical path (e.g. "/SalesOrderList('0500000000')")
 * @throws {Error}
 *   If the canonical path cannot be determined yet or in case of failure, e.g. if the given
 *   context does not point to an entity
 * @public
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.Context.prototype.getCanonicalPath = function() { return ""; };

/**
 * Returns the context's index within the binding's collection. The return value changes if a
 * new entity is added via {@link sap.ui.model.odata.v4.ODataListBinding#create} or deleted
 * again.
 * 
 * @returns {number}
 *   The context's index within the binding's collection or <code>undefined</code> if the
 *   context does not belong to a list binding.
 * 
 * @public
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.Context.prototype.getIndex = function() { return 0.0; };

/**
 * Returns a metadata object for class sap.ui.model.odata.v4.Context.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v4.Context.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the value for the given path relative to this context. The function allows access to
 * the complete data the context points to (if <code>sPath</code> is "") or any part thereof.
 * The data is a JSON structure as described in
 * <a href="http://docs.oasis-open.org/odata/odata-json-format/v4.0/odata-json-format-v4.0.html">
 * "OData JSON Format Version 4.0"</a>.
 * Note that the function clones the result. Modify values via
 * {@link sap.ui.model.odata.v4.ODataPropertyBinding#setValue}.
 * 
 * Returns <code>undefined</code> if the data is not (yet) available. Use
 * {@link #requestObject} for asynchronous access.
 * 
 * @param {string} [sPath=""]
 *   A relative path within the JSON structure
 * @returns {any}
 *   The requested value
 * 
 * @public
 * @see sap.ui.model.Context#getObject
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.Context.prototype.getObject = function(sPath) { return null; };

/**
 * Returns the property value for the given path relative to this context. The path is expected
 * to point to a structural property with primitive type. Returns <code>undefined</code>
 * if the data is not (yet) available. Use {@link #requestProperty} for asynchronous access.
 * 
 * @param {string} sPath
 *   A relative path within the JSON structure
 * @param {boolean} [bExternalFormat=false]
 *   If <code>true</code>, the value is returned in external format using a UI5 type for the
 *   given property path that formats corresponding to the property's EDM type and constraints.
 *   If the type is not yet available, <code>undefined</code> is returned.
 * @returns {any}
 *   The requested property value
 * @throws {Error}
 *   If the value is not primitive
 * 
 * @public
 * @see sap.ui.model.Context#getProperty
 * @see sap.ui.model.odata.v4.ODataMetaModel#requestUI5Type
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.Context.prototype.getProperty = function(sPath,bExternalFormat) { return null; };

/**
 * Returns <code>true</code> if this context is transient, which means that the promise returned
 * by {@link #created} is not yet resolved or rejected.
 * 
 * @returns {boolean}
 *   Whether this context is transient
 * 
 * @public
 * @since 1.43.0
 * 
 */
sap.ui.model.odata.v4.Context.prototype.isTransient = function() { return false; };

/**
 * Returns a promise for the "canonical path" of the entity for this context.
 * According to "4.3.1 Canonical URL" of the specification "OData Version 4.0 Part 2: URL
 * Conventions", this is the "name of the entity set associated with the entity followed by the
 * key predicate identifying the entity within the collection".
 * Use the canonical path in {@link sap.ui.core.Element#bindElement} to create an element
 * binding.
 * Note: For a transient context (see {@link #isTransient}) a wrong path is returned unless all
 * key properties are available within the initial data.
 * 
 * @returns {Promise}
 *   A promise which is resolved with the canonical path (e.g. "/SalesOrderList('0500000000')")
 *   in case of success, or rejected with an instance of <code>Error</code> in case of failure,
 *   e.g. if the given context does not point to an entity
 * @public
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.Context.prototype.requestCanonicalPath = function() { return null; };

/**
 * Returns a promise on the value for the given path relative to this context. The function
 * allows access to the complete data the context points to (if <code>sPath</code> is "") or
 * any part thereof. The data is a JSON structure as described in
 * <a href="http://docs.oasis-open.org/odata/odata-json-format/v4.0/odata-json-format-v4.0.html">
 * "OData JSON Format Version 4.0"</a>.
 * Note that the function clones the result. Modify values via
 * {@link sap.ui.model.odata.v4.ODataPropertyBinding#setValue}.
 * 
 * If you want {@link #requestObject} to read fresh data, call
 * <code>oContext.getBinding().refresh()</code> first.
 * 
 * @param {string} [sPath=""]
 *   A relative path within the JSON structure
 * @returns {Promise}
 *   A promise on the requested value
 * 
 * @public
 * @see #getBinding
 * @see sap.ui.model.odata.v4.ODataContextBinding#refresh
 * @see sap.ui.model.odata.v4.ODataListBinding#refresh
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.Context.prototype.requestObject = function(sPath) { return null; };

/**
 * Returns a promise on the property value for the given path relative to this context. The path
 * is expected to point to a structural property with primitive type.
 * 
 * @param {string} [sPath]
 *   A relative path within the JSON structure
 * @param {boolean} [bExternalFormat=false]
 *   If <code>true</code>, the value is returned in external format using a UI5 type for the
 *   given property path that formats corresponding to the property's EDM type and constraints.
 * @returns {Promise}
 *   A promise on the requested value; it is rejected if the value is not primitive
 * 
 * @public
 * @see sap.ui.model.odata.v4.ODataMetaModel#requestUI5Type
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.Context.prototype.requestProperty = function(sPath,bExternalFormat) { return null; };

/**
 * Returns a string representation of this object including the binding path.
 * 
 * @return {string} A string description of this binding
 * @public
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.Context.prototype.toString = function() { return ""; };


// ---- sap.ui.model.odata.v4.ODataContextBinding --------------------------------------------------------------------------

/**
 * Do <strong>NOT</strong> call this private constructor, but rather use
 * {@link sap.ui.model.odata.v4.ODataModel#bindContext} instead!
 * 
 * 
 * @param {sap.ui.model.odata.v4.ODataModel} oModel
 *   The OData V4 model
 * @param {string} sPath
 *   The binding path in the model; must not end with a slash
 * @param {sap.ui.model.Context} [oContext]
 *   The context which is required as base for a relative path
 * @param {object} [mParameters]
 *   Map of binding parameters
 * @throws {Error}
 *   If disallowed binding parameters are provided
 * @class Context binding for an OData V4 model.
 *   An event handler can only be attached to this binding for the following events: 'change',
 *   'dataReceived', and 'dataRequested'.
 *   For other events, an error is thrown.
 * 
 *   A context binding can also be used as an <i>operation binding</i> to support bound actions,
 *   action imports and function imports. If you want to control the execution time of an
 *   operation, for example a function import named "GetNumberOfAvailableItems", create a
 *   context binding for the path "/GetNumberOfAvailableItems(...)" (as specified here,
 *   including the three dots). Such an operation binding is <i>deferred</i>, meaning that it
 *   does not request automatically, but only when you call {@link #execute}. {@link #refresh}
 *   is always ignored for actions and action imports. For function imports, it is ignored if
 *   {@link #execute} has not yet been called. Afterwards it results in another call of the
 *   function with the parameter values of the last execute.
 * 
 *   The binding parameter for bound actions may be given in the binding path, for example
 *   "/SalesOrderList('42')/name.space.SalesOrder_Confirm". This can be
 *   used if the exact entity for the binding parameter is known in advance. If you use a
 *   relative binding instead, the operation path is a concatenation of the parent context's
 *   canonical path and the deferred binding's path.
 * 
 *   <b>Example</b>: You have a table with a list binding to "/SalesOrderList". In
 *   each row you have a button to confirm the sales order, with the relative binding
 *   "name.space.SalesOrder_Confirm(...)". Then the parent context for such a button
 *   refers to an entity in "SalesOrderList", so its canonical path is
 *   "/SalesOrderList('<i>SalesOrderID</i>')" and the resulting path for the action
 *   is "/SalesOrderList('<i>SalesOrderID</i>')/name.space.SalesOrder_Confirm".
 * 
 *   This also works if the relative path of the deferred operation binding starts with a
 *   navigation property. Then this navigation property will be part of the operation's
 *   resource path, which is still valid.
 * 
 *   A deferred operation binding is not allowed to have another deferred operation binding as
 *   parent.
 * 
 * @extends sap.ui.model.ContextBinding
 * @mixes sap.ui.model.odata.v4.ODataParentBinding
 * @public
 * @since 1.37.0
 * @version 1.48.4
 * 
 * @borrows sap.ui.model.odata.v4.ODataBinding#hasPendingChanges as #hasPendingChanges
 * @borrows sap.ui.model.odata.v4.ODataBinding#isInitial as #isInitial
 * @borrows sap.ui.model.odata.v4.ODataBinding#refresh as #refresh
 * @borrows sap.ui.model.odata.v4.ODataBinding#resetChanges as #resetChanges
 * @borrows sap.ui.model.odata.v4.ODataBinding#resume as #resume
 * @borrows sap.ui.model.odata.v4.ODataBinding#suspend as #suspend
 * @borrows sap.ui.model.odata.v4.ODataParentBinding#changeParameters as #changeParameters
 * @borrows sap.ui.model.odata.v4.ODataParentBinding#initialize as #initialize
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding = function(oModel,sPath,oContext,mParameters) {};
/**
 * The 'change' event is fired when the binding is initialized or its parent context is changed.
 * It is to be used by controls to get notified about changes to the bound context of this
 * context binding.
 * Registered event handlers are called with the change reason as parameter.
 * 
 * @param {sap.ui.base.Event} oEvent
 * @param {object} oEvent.getParameters
 * @param {sap.ui.model.ChangeReason} oEvent.getParameters.reason
 *   The reason for the 'change' event: {@link sap.ui.model.ChangeReason.Change} when the
 *   binding is initialized, {@link sap.ui.model.ChangeReason.Refresh} when the binding is
 *   refreshed, and {@link sap.ui.model.ChangeReason.Context} when the parent context is changed
 * 
 * @event
 * @public
 * @see sap.ui.base.Event
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.change = function(oEvent) {  };

/**
 * The 'dataReceived' event is fired after the back-end data has been processed. It is to be
 * used by applications for example to switch off a busy indicator or to process an error.
 * 
 * If back-end requests are successful, the event has no parameters. Use the binding's bound
 * context via {@link #getBoundContext oEvent.getSource().getBoundContext()} to access the
 * response data. Note that controls bound to this data may not yet have been updated, meaning
 * it is not safe for registered event handlers to access data via control APIs.
 * 
 * If a back-end request fails, the 'dataReceived' event provides an <code>Error</code> in the
 * 'error' event parameter.
 * 
 * @param {sap.ui.base.Event} oEvent
 * @param {object} oEvent.getParameters
 * @param {Error} [oEvent.getParameters.error] The error object if a back-end request failed.
 *   If there are multiple failed back-end requests, the error of the first one is provided.
 * 
 * @event
 * @public
 * @see sap.ui.base.Event
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.dataReceived = function(oEvent) {  };

/**
 * The 'dataRequested' event is fired directly after data has been requested from a back end.
 * It is to be used by applications for example to switch on a busy indicator. Registered event
 * handlers are called without parameters.
 * 
 * @param {sap.ui.base.Event} oEvent
 * 
 * @event
 * @public
 * @see sap.ui.base.Event
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.dataRequested = function(oEvent) {  };

/**
 * Changes this binding's parameters and refreshes the binding.
 * 
 * If there are pending changes an error is thrown. Use {@link #hasPendingChanges} to check if
 * there are pending changes. If there are changes, call
 * {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or
 * {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling
 * {@link #changeParameters}.
 * 
 * The parameters are changed according to the given map of parameters: Parameters with an
 * <code>undefined</code> value are removed, the other parameters are set, and missing
 * parameters remain unchanged.
 * 
 * @param {object} mParameters
 *   Map of binding parameters, see {@link sap.ui.model.odata.v4.ODataModel#bindList} and
 *   {@link sap.ui.model.odata.v4.ODataModel#bindContext}
 * @throws {Error}
 *   If there are pending changes or if <code>mParameters</code> is missing,
 *   contains binding-specific or unsupported parameters, contains unsupported values, or
 *   contains the property "$expand" or "$select" when the model is in auto-$expand/$select
 *   mode.
 * 
 * @public
 * @since 1.45.0
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.changeParameters = function(mParameters) {  };

/**
 * Destroys the object. The object must not be used anymore after this function was called.
 * 
 * @public
 * @since 1.40.1
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.destroy = function() {  };

/**
 * Calls the OData operation that corresponds to this operation binding.
 * 
 * Parameters for the operation must be set via {@link #setParameter} beforehand.
 * 
 * The value of this binding is the result of the operation. To access a result of primitive
 * type, bind a control to the path "value", for example
 * <code>&lt;Text text="{value}"/&gt;</code>. If the result has a complex or entity type, you
 * can bind properties as usual, for example <code>&lt;Text text="{street}"/&gt;</code>.
 * 
 * @param {string} [sGroupId]
 *   The group ID to be used for the request; if not specified, the group ID for this binding is
 *   used, see {@link sap.ui.model.odata.v4.ODataContextBinding#constructor}.
 *   Valid values are <code>undefined</code>, '$auto', '$direct' or application group IDs as
 *   specified in {@link sap.ui.model.odata.v4.ODataModel#submitBatch}.
 * @returns {Promise}
 *   A promise that is resolved without data when the operation call succeeded, or rejected
 *   with an instance of <code>Error</code> in case of failure.
 * @throws {Error} If the binding is not a deferred operation binding (see
 *   {@link sap.ui.model.odata.v4.ODataContextBinding}), if the binding is not resolved, or if
 *   the given group ID is invalid.
 * 
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.execute = function(sGroupId) { return null; };

/**
 * Creates a new subclass of class sap.ui.model.odata.v4.ODataContextBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the bound context.
 * 
 * @returns {sap.ui.model.odata.v4.Context}
 *   The bound context
 * @public
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.getBoundContext = function() { return new sap.ui.model.odata.v4.Context(); };

/**
 * Returns a metadata object for class sap.ui.model.odata.v4.ODataContextBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns <code>true</code> if this binding or its dependent bindings have pending changes,
 * meaning updates that have not yet been successfully sent to the server.
 * 
 * @returns {boolean}
 *   <code>true</code> if the binding has pending changes
 * 
 * @public
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.hasPendingChanges = function() { return false; };

/**
 * Initializes the OData list binding. Fires a 'change' event in case the binding has a
 * resolved path.
 * 
 * @protected
 * @see sap.ui.model.Binding#initialize
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.initialize = function() {  };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Binding#isInitial
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.isInitial = function() {  };

/**
 * Refreshes the binding. Prompts the model to retrieve data from the server using the given
 * group ID and notifies the control that new data is available.
 * 
 * Refresh is supported for bindings which are not relative to a
 * {@link sap.ui.model.odata.v4.Context}.
 * 
 * Note: When calling {@link #refresh} multiple times, the result of the request triggered by
 * the last call determines the binding's data; it is <b>independent</b> of the order of calls
 * to {@link sap.ui.model.odata.v4.ODataModel#submitBatch} with the given group ID.
 * 
 * If there are pending changes, an error is thrown. Use {@link #hasPendingChanges} to check if
 * there are pending changes. If there are changes, call
 * {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or
 * {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling
 * {@link #refresh}.
 * 
 * @param {string} [sGroupId]
 *   The group ID to be used for refresh; if not specified, the group ID for this binding is
 *   used.
 * 
 *   Valid values are <code>undefined</code>, '$auto', '$direct' or application group IDs as
 *   specified in {@link sap.ui.model.odata.v4.ODataModel#submitBatch}.
 * @throws {Error}
 *   If the given group ID is invalid, the binding has pending changes or refresh on this
 *   binding is not supported.
 * 
 * @public
 * @see sap.ui.model.Binding#refresh
 * @see #hasPendingChanges
 * @see #resetChanges
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.refresh = function(sGroupId) {  };

/**
 * Resets all pending changes of this binding, see {@link #hasPendingChanges}. Resets also
 * invalid user input.
 * 
 * @throws {Error}
 *   If there is a change of this binding which has been sent to the server and for which there
 *   is no response yet.
 * 
 * @public
 * @since 1.40.1
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.resetChanges = function() {  };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Binding#resume
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.resume = function() {  };

/**
 * Sets a parameter for an operation call.
 * 
 * @param {string} sParameterName
 *   The parameter name
 * @param {any} vValue
 *   The parameter value
 * @returns {sap.ui.model.odata.v4.ODataContextBinding}
 *   <code>this</code> to enable method chaining
 * @throws {Error} If the binding is not a deferred operation binding (see
 *   {@link sap.ui.model.odata.v4.ODataContextBinding}) or if the value is missing
 * 
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.setParameter = function(sParameterName,vValue) { return new sap.ui.model.odata.v4.ODataContextBinding(); };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Binding#suspend
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.suspend = function() {  };

/**
 * Returns a string representation of this object including the binding path. If the binding is
 * relative, the parent path is also given, separated by a '|'.
 * 
 * @return {string} A string description of this binding
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataContextBinding.prototype.toString = function() { return ""; };


// ---- sap.ui.model.odata.v4.ODataListBinding --------------------------------------------------------------------------

/**
 * Do <strong>NOT</strong> call this private constructor, but rather use
 * {@link sap.ui.model.odata.v4.ODataModel#bindList} instead!
 * 
 * 
 * @param {sap.ui.model.odata.v4.ODataModel} oModel
 *   The OData V4 model
 * @param {string} sPath
 *   The binding path in the model; must not end with a slash
 * @param {sap.ui.model.Context} [oContext]
 *   The parent context which is required as base for a relative path
 * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} [vSorters]
 *   The dynamic sorters to be used initially; supported since 1.39.0
 * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} [vFilters]
 *   The dynamic application filters to be used initially; supported since 1.39.0
 * @param {object} [mParameters]
 *   Map of binding parameters
 * @throws {Error}
 *   If disallowed binding parameters are provided or an unsupported operation mode is used
 * @class List binding for an OData V4 model.
 *   An event handler can only be attached to this binding for the following events: 'change',
 *   'dataReceived', 'dataRequested', and 'refresh'.
 *   For other events, an error is thrown.
 * @extends sap.ui.model.ListBinding
 * @mixes sap.ui.model.odata.v4.ODataParentBinding
 * @public
 * @since 1.37.0
 * @version 1.48.4
 * @borrows sap.ui.model.odata.v4.ODataBinding#hasPendingChanges as #hasPendingChanges
 * @borrows sap.ui.model.odata.v4.ODataBinding#isInitial as #isInitial
 * @borrows sap.ui.model.odata.v4.ODataBinding#refresh as #refresh
 * @borrows sap.ui.model.odata.v4.ODataBinding#resetChanges as #resetChanges
 * @borrows sap.ui.model.odata.v4.ODataBinding#resume as #resume
 * @borrows sap.ui.model.odata.v4.ODataBinding#suspend as #suspend
 * @borrows sap.ui.model.odata.v4.ODataParentBinding#changeParameters as #changeParameters
 * @borrows sap.ui.model.odata.v4.ODataParentBinding#initialize as #initialize
 * 
 */
sap.ui.model.odata.v4.ODataListBinding = function(oModel,sPath,oContext,vSorters,vFilters,mParameters) {};
/**
 * The 'change' event is fired when the binding is initialized or new contexts are created or
 * its parent context is changed. It is to be used by controls to get notified about changes to
 * the binding contexts of this list binding. Registered event handlers are called with the
 * change reason as parameter.
 * 
 * @param {sap.ui.base.Event} oEvent
 * @param {object} oEvent.getParameters
 * @param {sap.ui.model.ChangeReason} oEvent.getParameters.reason
 *   The reason for the 'change' event: {@link sap.ui.model.ChangeReason.Change} when the
 *   binding is initialized and or a new context is created, or
 *   {@link sap.ui.model.ChangeReason.Context} when the parent context is changed
 * 
 * @event
 * @public
 * @see sap.ui.base.Event
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.change = function(oEvent) {  };

/**
 * The 'dataReceived' event is fired after the back-end data has been processed and the
 * registered 'change' event listeners have been notified.
 * It is to be used by applications for example to switch off a busy indicator or to process an
 * error.
 * If back-end requests are successful, the event has no parameters. Use the binding's contexts
 * via {@link #getCurrentContexts oEvent.getSource().getCurrentContexts()} to access the
 * response data. Note that controls bound to this data may not yet have been updated, meaning
 * it is not safe for registered event handlers to access data via control APIs.
 * 
 * If a back-end request fails, the 'dataReceived' event provides an <code>Error</code> in the
 * 'error' event parameter.
 * 
 * @param {sap.ui.base.Event} oEvent
 * @param {object} oEvent.getParameters
 * @param {Error} [oEvent.getParameters.error] The error object if a back-end request failed.
 *   If there are multiple failed back-end requests, the error of the first one is provided.
 * 
 * @event
 * @public
 * @see sap.ui.base.Event
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.dataReceived = function(oEvent) {  };

/**
 * The 'dataRequested' event is fired directly after data has been requested from a back end.
 * It is to be used by applications for example to switch on a busy indicator.
 * Registered event handlers are called without parameters.
 * 
 * @param {sap.ui.base.Event} oEvent
 * 
 * @event
 * @public
 * @see sap.ui.base.Event
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.dataRequested = function(oEvent) {  };

/**
 * Changes this binding's parameters and refreshes the binding.
 * 
 * If there are pending changes an error is thrown. Use {@link #hasPendingChanges} to check if
 * there are pending changes. If there are changes, call
 * {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or
 * {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling
 * {@link #changeParameters}.
 * 
 * The parameters are changed according to the given map of parameters: Parameters with an
 * <code>undefined</code> value are removed, the other parameters are set, and missing
 * parameters remain unchanged.
 * 
 * @param {object} mParameters
 *   Map of binding parameters, see {@link sap.ui.model.odata.v4.ODataModel#bindList} and
 *   {@link sap.ui.model.odata.v4.ODataModel#bindContext}
 * @throws {Error}
 *   If there are pending changes or if <code>mParameters</code> is missing,
 *   contains binding-specific or unsupported parameters, contains unsupported values, or
 *   contains the property "$expand" or "$select" when the model is in auto-$expand/$select
 *   mode.
 * 
 * @public
 * @since 1.45.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.changeParameters = function(mParameters) {  };

/**
 * Creates a new entity and inserts it at the beginning of the list. As long as the binding
 * contains an entity created via this function, you cannot create another entity. This is only
 * possible after the creation of the entity has been successfully sent to the server and you
 * have called {@link #refresh} at the (parent) binding, which is absolute or not relative to a
 * {@link sap.ui.model.odata.v4.Context}, or the new entity is deleted in between.
 * 
 * For creating the new entity, the binding's update group ID is used, see binding parameter
 * $$updateGroupId of {@link sap.ui.model.odata.v4.ODataModel#bindList}.
 * 
 * You can call {@link sap.ui.model.odata.v4.Context#delete} to delete the created context
 * again. As long as the context is transient (see
 * {@link sap.ui.model.odata.v4.Context#isTransient}), {@link #resetChanges} and a call to
 * {@link sap.ui.model.odata.v4.ODataModel#resetChanges} with the update group ID as parameter
 * also delete the created context together with other changes.
 * 
 * If the creation of the entity on the server failed, the creation is repeated for application
 * group IDs with the next call of {@link sap.ui.model.odata.v4.ODataModel#submitBatch}. For
 * '$auto' or '$direct', the creation is repeated automatically with the next update for the
 * entity.
 * 
 * @param {object} [oInitialData={}]
 *   The initial data for the created entity
 * @returns {sap.ui.model.odata.v4.Context}
 *   The context object for the created entity
 * @throws {Error}
 *   If a relative binding is not yet resolved or if the binding already contains an entity
 *   created via this function
 * 
 * @public
 * @since 1.43.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.create = function(oInitialData) { return new sap.ui.model.odata.v4.Context(); };

/**
 * Destroys the object. The object must not be used anymore after this function was called.
 * 
 * @public
 * @since 1.40.1
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.model.odata.v4.ODataListBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Filters the list with the given filters.
 * 
 * If there are pending changes an error is thrown. Use {@link #hasPendingChanges} to check if
 * there are pending changes. If there are changes, call
 * {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or
 * {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling
 * {@link #filter}.
 * 
 * @param {sap.ui.model.Filter|sap.ui.model.Filter[]} [vFilters]
 *   The dynamic filters to be used; replaces the dynamic filters given in
 *   {@link sap.ui.model.odata.v4.ODataModel#bindList}.
 *   The filter executed on the list is created from the following parts, which are combined
 *   with a logical 'and':
 *   <ul>
 *   <li> Dynamic filters of type {@link sap.ui.model.FilterType.Application}
 *   <li> Dynamic filters of type {@link sap.ui.model.FilterType.Control}
 *   <li> The static filters, as defined in the '$filter' binding parameter
 *   </ul>
 * 
 * @param {sap.ui.model.FilterType} [sFilterType=sap.ui.model.FilterType.Application]
 *   The filter type to be used
 * @returns {sap.ui.model.odata.v4.ODataListBinding}
 *   <code>this</code> to facilitate method chaining
 * @throws {Error}
 *   If there are pending changes or if an unsupported operation mode is used (see
 *   {@link sap.ui.model.odata.v4.ODataModel#bindList})
 * 
 * @public
 * @see sap.ui.model.ListBinding#filter
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.filter = function(vFilters,sFilterType) { return new sap.ui.model.odata.v4.ODataListBinding(); };

/**
 * Returns already created binding contexts for all entities in this list binding for the range
 * determined by the given start index <code>iStart</code> and <code>iLength</code>.
 * If at least one of the entities in the given range has not yet been loaded, fires a
 * {@link #event:change} event on this list binding once these entities have been loaded
 * <b>asynchronously</b>. A further call to this method in the 'change' event handler with the
 * same index range then yields the updated array of contexts.
 * 
 * @param {number} [iStart=0]
 *   The index where to start the retrieval of contexts
 * @param {number} [iLength]
 *   The number of contexts to retrieve beginning from the start index; defaults to the model's
 *   size limit, see {@link sap.ui.model.Model#setSizeLimit}
 * @param {number} [iMaximumPrefetchSize=0]
 *   The maximum number of contexts to read before and after the given range; with this,
 *   controls can prefetch data that is likely to be needed soon, e.g. when scrolling down in a
 *   table. Negative values will be treated as 0.
 *   Supported since 1.39.0
 * @returns {sap.ui.model.odata.v4.Context[]}
 *   The array of already created contexts with the first entry containing the context for
 *   <code>iStart</code>
 * @throws {Error}
 *   If extended change detection is enabled and <code>iMaximumPrefetchSize</code> is set or
 *   <code>iStart</code> is not 0
 * 
 * @protected
 * @see sap.ui.model.ListBinding#getContexts
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.getContexts = function(iStart,iLength,iMaximumPrefetchSize) { return new Array(); };

/**
 * Returns the contexts that were requested by a control last time. Does not trigger a data
 * request. In the time between the {@link #event:dataRequested} event and the
 * {@link #event:dataReceived} event, the resulting array contains <code>undefined</code> at
 * those indexes where the data is not yet available.
 * 
 * @returns {sap.ui.model.odata.v4.Context[]}
 *   The contexts
 * 
 * @public
 * @see sap.ui.model.ListBinding#getCurrentContexts
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.getCurrentContexts = function() { return new Array(); };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.ListBinding#getDistinctValues
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.getDistinctValues = function() {  };

/**
 * Returns the header context which allows binding to <code>$count</code>. If known, the value
 * of such a binding is the element count of the collection on the server. Otherwise it is
 * <code>undefined</code>. The value is a number and its type is <code>Edm.Int64</code>.
 * 
 * The count is known to the binding in the following situations:
 * <ul>
 *   <li>It has been requested from the server via the system query option <code>$count</code>.
 *   <li>A "short read" in a paged collection (the server delivered less elements than
 *     requested) indicated that the server has no more unread elements.
 *   <li>It has been read completely in one request, for example an embedded collection via
 *     <code>$expand</code>.
 * </ul>
 * 
 * The <code>$count</code> is unknown, if the binding is relative, but has no context.
 * 
 * @returns {sap.ui.model.odata.v4.Context}
 *   The header context or <code>null</code> if the binding is relative and has no context
 * 
 * @public
 * @since 1.45.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.getHeaderContext = function() { return new sap.ui.model.odata.v4.Context(); };

/**
 * Returns the number of entries in the list. As long as the client does not know the size on
 * the server an estimated length is returned.
 * 
 * @returns {number}
 *   The number of entries in the list
 * 
 * @public
 * @see sap.ui.model.ListBinding#getLength
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.getLength = function() { return 0.0; };

/**
 * Returns a metadata object for class sap.ui.model.odata.v4.ODataListBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns <code>true</code> if this binding or its dependent bindings have pending changes,
 * meaning updates that have not yet been successfully sent to the server.
 * 
 * @returns {boolean}
 *   <code>true</code> if the binding has pending changes
 * 
 * @public
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.hasPendingChanges = function() { return false; };

/**
 * Initializes the OData list binding. Fires a 'change' event in case the binding has a
 * resolved path.
 * 
 * @protected
 * @see sap.ui.model.Binding#initialize
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.initialize = function() {  };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Binding#isInitial
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.isInitial = function() {  };

/**
 * Returns <code>true</code> if the length has been determined by the data returned from
 * server. If the length is a client side estimation <code>false</code> is returned.
 * 
 * @returns {boolean}
 *   If <code>true</true> the length is determined by server side data
 * 
 * @public
 * @see sap.ui.model.ListBinding#isLengthFinal
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.isLengthFinal = function() { return false; };

/**
 * Refreshes the binding. Prompts the model to retrieve data from the server using the given
 * group ID and notifies the control that new data is available.
 * 
 * Refresh is supported for bindings which are not relative to a
 * {@link sap.ui.model.odata.v4.Context}.
 * 
 * Note: When calling {@link #refresh} multiple times, the result of the request triggered by
 * the last call determines the binding's data; it is <b>independent</b> of the order of calls
 * to {@link sap.ui.model.odata.v4.ODataModel#submitBatch} with the given group ID.
 * 
 * If there are pending changes, an error is thrown. Use {@link #hasPendingChanges} to check if
 * there are pending changes. If there are changes, call
 * {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or
 * {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling
 * {@link #refresh}.
 * 
 * @param {string} [sGroupId]
 *   The group ID to be used for refresh; if not specified, the group ID for this binding is
 *   used.
 * 
 *   Valid values are <code>undefined</code>, '$auto', '$direct' or application group IDs as
 *   specified in {@link sap.ui.model.odata.v4.ODataModel#submitBatch}.
 * @throws {Error}
 *   If the given group ID is invalid, the binding has pending changes or refresh on this
 *   binding is not supported.
 * 
 * @public
 * @see sap.ui.model.Binding#refresh
 * @see #hasPendingChanges
 * @see #resetChanges
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.refresh = function(sGroupId) {  };

/**
 * Resets all pending changes of this binding, see {@link #hasPendingChanges}. Resets also
 * invalid user input.
 * 
 * @throws {Error}
 *   If there is a change of this binding which has been sent to the server and for which there
 *   is no response yet.
 * 
 * @public
 * @since 1.40.1
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.resetChanges = function() {  };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Binding#resume
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.resume = function() {  };

/**
 * Sort the entries represented by this list binding according to the given sorters.
 * The sorters are stored at this list binding and they are used for each following data
 * request.
 * 
 * If there are pending changes an error is thrown. Use {@link #hasPendingChanges} to check if
 * there are pending changes. If there are changes, call
 * {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or
 * {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling
 * {@link #sort}.
 * 
 * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} [vSorters]
 *   The dynamic sorters to be used; they replace the dynamic sorters given in
 *   {@link sap.ui.model.odata.v4.ODataModel#bindList}.
 *   Static sorters, as defined in the '$orderby' binding parameter, are always executed after
 *   the dynamic sorters.
 * @returns {sap.ui.model.odata.v4.ODataListBinding}
 *   <code>this</code> to facilitate method chaining
 * @throws {Error}
 *   If there are pending changes or if an unsupported operation mode is used (see
 *   {@link sap.ui.model.odata.v4.ODataModel#bindList}).
 * 
 * @public
 * @see sap.ui.model.ListBinding#sort
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.sort = function(vSorters) { return new sap.ui.model.odata.v4.ODataListBinding(); };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Binding#suspend
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.suspend = function() {  };

/**
 * Returns a string representation of this object including the binding path. If the binding is
 * relative, the parent path is also given, separated by a '|'.
 * 
 * @return {string} A string description of this binding
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataListBinding.prototype.toString = function() { return ""; };


// ---- sap.ui.model.odata.v4.ODataMetaModel --------------------------------------------------------------------------

/**
 * Do <strong>NOT</strong> call this private constructor, but rather use
 * {@link sap.ui.model.odata.v4.ODataModel#getMetaModel} instead.
 * 
 * 
 * @param {object} oRequestor
 *   The metadata requestor
 * @param {string} sUrl
 *   The URL to the $metadata document of the service
 * @param {string|string[]} [vAnnotationUri]
 *   The URL (or an array of URLs) from which the annotation metadata are loaded
 *   Supported since 1.41.0
 * @param {sap.ui.model.odata.v4.ODataModel} oModel
 *   The model this meta model is related to
 * @param {boolean} [bSupportReferences=true]
 *   Whether <code>&lt;edmx:Reference></code> and <code>&lt;edmx:Include></code> directives are
 *   supported in order to load schemas on demand from other $metadata documents and include
 *   them into the current service ("cross-service references").
 * @class Implementation of an OData metadata model which offers access to OData V4 metadata.
 *   The meta model does not support any public events; attaching an event handler leads to an
 *   error.
 * 
 *   This model is read-only.
 * 
 * @extends sap.ui.model.MetaModel
 * @public
 * @since 1.37.0
 * @version 1.48.4
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel = function(oRequestor,sUrl,vAnnotationUri,oModel,bSupportReferences) {};
/**
 * Creates a list binding for this metadata model which iterates content from the given path
 * (relative to the given context), sorted and filtered as indicated.
 * 
 * By default, OData names are iterated and a trailing slash is implicitly added to the path
 * (see {@link #requestObject} for the effects this has); technical properties and inline
 * annotations are filtered out.
 * 
 * A path which ends with an "@" segment can be used to iterate all inline or external
 * targeting annotations; no trailing slash is added implicitly; technical properties and OData
 * names are filtered out.
 * 
 * @param {string} sPath
 *   A relative or absolute path within the metadata model, for example "/EMPLOYEES"
 * @param {sap.ui.model.Context} [oContext]
 *   The context to be used as a starting point in case of a relative path
 * @param {sap.ui.model.Sorter|sap.ui.model.Sorter[]} [aSorters]
 *   Initial sort order, see {@link sap.ui.model.ListBinding#sort}
 * @param {sap.ui.model.Filter|sap.ui.model.Filter[]} [aFilters]
 *   Initial application filter(s), see {@link sap.ui.model.ListBinding#filter}
 * @returns {sap.ui.model.ListBinding}
 *   A list binding for this metadata model
 * 
 * @public
 * @see #requestObject
 * @see sap.ui.model.Model#bindList
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.bindList = function(sPath,oContext,aSorters,aFilters) { return new sap.ui.model.ListBinding(); };

/**
 * Creates a property binding for this meta data model which refers to the content from the
 * given path (relative to the given context).
 * 
 * @param {string} sPath
 *   A relative or absolute path within the meta data model, for example "/EMPLOYEES/ENTRYDATE"
 * @param {sap.ui.model.Context} [oContext]
 *   The context to be used as a starting point in case of a relative path
 * @param {object} [mParameters]
 *   Optional binding parameters that are passed to {@link #getObject} to compute the binding's
 *   value; if they are given, <code>oContext</code> cannot be omitted
 * @param {object} [mParameters.scope]
 *   Optional scope for lookup of aliases for computed annotations (since 1.43.0)
 * @returns {sap.ui.model.PropertyBinding}
 *   A property binding for this meta data model
 * 
 * @public
 * @see sap.ui.model.Model#bindProperty
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.bindProperty = function(sPath,oContext,mParameters) { return new sap.ui.model.PropertyBinding(); };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Model#bindTree
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.bindTree = function() {  };

/**
 * Creates a new subclass of class sap.ui.model.odata.v4.ODataMetaModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.MetaModel.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the maximum value of all "Last-Modified" response headers seen so far.
 * 
 * @returns {Date}
 *   The maximum value of all "Last-Modified" (or, as a fallback, "Date") response headers seen
 *   so far when loading $metadata or annotation files. It is <code>new Date(0)</code> initially
 *   as long as no such files have been loaded. It becomes <code>new Date()</code> as soon as a
 *   file without such a header is loaded. Note that this value may change due to load-on-demand
 *   of "cross-service references" (see parameter "bSupportReferences" of
 *   {@link sap.ui.model.odata.v4.ODataMetaModel}).
 * 
 * @public
 * @since 1.47.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.getLastModified = function() { return null; };

/**
 * Returns the OData metadata model context corresponding to the given OData data model path.
 * 
 * @param {string} sPath
 *   An absolute data path within the OData data model, for example
 *   "/EMPLOYEES/0/ENTRYDATE"
 * @returns {sap.ui.model.Context}
 *   The corresponding metadata context within the OData metadata model, for example with
 *   metadata path "/EMPLOYEES/ENTRYDATE"
 * 
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.getMetaContext = function(sPath) { return new sap.ui.model.Context(); };

/**
 * Returns a metadata object for class sap.ui.model.odata.v4.ODataMetaModel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the metadata object for the given path relative to the given context. Returns
 * <code>undefined</code> in case the metadata is not (yet) available. Use
 * {@link #requestObject} for asynchronous access.
 * 
 * @param {string} sPath
 *   A relative or absolute path within the metadata model
 * @param {sap.ui.model.Context} [oContext]
 *   The context to be used as a starting point in case of a relative path
 * @param {object} [mParameters]
 *   Optional (binding) parameters; if they are given, <code>oContext</code> cannot be omitted
 * @param {object} [mParameters.scope]
 *   Optional scope for lookup of aliases for computed annotations (since 1.43.0)
 * @returns {any}
 *   The requested metadata object if it is already available, or <code>undefined</code>
 * @public
 * @see #requestObject
 * @see sap.ui.model.Model#getObject
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.getObject = function(sPath,oContext,mParameters) { return null; };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Model#getOriginalProperty
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.getOriginalProperty = function() {  };

/**
 * @deprecated Use {@link #getObject}.
 * @public
 * @see sap.ui.model.Model#getProperty
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.getProperty = function() {  };

/**
 * Returns the UI5 type for the given property path that formats and parses corresponding to
 * the property's EDM type and constraints. The property's type must be a primitive type. Use
 * {@link #requestUI5Type} for asynchronous access.
 * 
 * @param {string} sPath
 *   An absolute path to an OData property within the OData data model
 * @returns {sap.ui.model.odata.type.ODataType}
 *   The corresponding UI5 type from {@link sap.ui.model.odata.type}, if all required
 *   metadata to calculate this type is already available; if no specific type can be
 *   determined, a warning is logged and {@link sap.ui.model.odata.type.Raw} is used
 * @throws {Error}
 *   If the UI5 type cannot be determined synchronously (due to a pending metadata request) or
 *   cannot be determined at all (due to a wrong data path)
 * @public
 * @see #requestUI5Type
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.getUI5Type = function(sPath) { return new sap.ui.model.odata.type.ODataType(); };

/**
 * Determines which type of value list exists for the given property.
 * 
 * @param {string} sPropertyPath
 *   An absolute path to an OData property within the OData data model
 * @returns {sap.ui.model.odata.v4.ValueListType}
 *   The type of the value list
 * @throws {Error}
 *   If the metadata is not yet loaded or the property cannot be found in the metadata
 * @public
 * @see #requestValueListType
 * @since 1.45.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.getValueListType = function(sPropertyPath) { return new sap.ui.model.odata.v4.ValueListType(); };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Model#refresh
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.refresh = function() {  };

/**
 * Requests the metadata value for the given path relative to the given context. Returns a
 * <code>Promise</code> which is resolved with the requested metadata value or rejected with
 * an error (only in case metadata cannot be loaded). An invalid path leads to an
 * <code>undefined</code> result and a warning is logged. Use {@link #getObject} for
 * synchronous access.
 * 
 * A relative path is appended to the context's path separated by a forward slash("/").
 * A relative path starting with "@" (that is, an annotation) is appended without a separator.
 * Use "./" as a prefix for such a relative path to enforce a separator.
 * 
 * Example:
 * <pre>
 * &lt;template:with path="/EMPLOYEES/ENTRYDATE" var="property">
 *   &lt;!-- /EMPLOYEES/ENTRYDATE/$Type -->
 *   "{property>$Type}"
 * 
 *   &lt;!-- /EMPLOYEES/ENTRYDATE@com.sap.vocabularies.Common.v1.Text -->
 *   "{property>@com.sap.vocabularies.Common.v1.Text}"
 * 
 *   &lt;!-- /EMPLOYEES/ENTRYDATE/@com.sap.vocabularies.Common.v1.Text -->
 *   "{property>./@com.sap.vocabularies.Common.v1.Text}"
 * &lt;/template:with>
 * </pre>
 * 
 * The basic idea is that every path described in "14.2.1 Attribute Target" in specification
 * "OData Version 4.0 Part 3: Common Schema Definition Language" is a valid absolute path
 * within the metadata model if a leading slash is added; for example
 * "/" + "MySchema.MyEntityContainer/MyEntitySet/MyComplexProperty/MyNavigationProperty". Also,
 * every path described in "14.5.2 Expression edm:AnnotationPath",
 * "14.5.11 Expression edm:NavigationPropertyPath", "14.5.12 Expression edm:Path", and
 * "14.5.13 Expression edm:PropertyPath" is a valid relative path within the metadata model
 * if a suitable prefix is added which addresses an entity container, entity set, singleton,
 * complex type, entity type, or property; for example
 * "/MySchema.MyEntityType/MyProperty" + "@vCard.Address#work/FullName".
 * 
 * The absolute path is split into segments and followed step-by-step, starting at the global
 * scope of all known qualified OData names. There are two technical properties there:
 * "$Version" (typically "4.0") and "$EntityContainer" with the name of the single entity
 * container for this metadata model's service.
 * 
 * An empty segment in between is invalid. An empty segment at the end caused by a trailing
 * slash differentiates between a name and the object it refers to. This way,
 * "/$EntityContainer" refers to the name of the single entity container and
 * "/$EntityContainer/" refers to the single entity container as an object.
 * 
 * The segment "@sapui.name" refers back to the last OData name (simple identifier or qualified
 * name) or annotation name encountered during path traversal immediately before "@sapui.name":
 * <ul>
 * <li> "/EMPLOYEES@sapui.name" results in "EMPLOYEES" and "/EMPLOYEES/@sapui.name"
 * results in the same as "/EMPLOYEES/$Type", that is, the qualified name of the entity set's
 * type (see below how "$Type" is inserted implicitly). Note how the separating slash again
 * makes a difference here.
 * <li> "/EMPLOYEES/@com.sap.vocabularies.Common.v1.Label@sapui.name" results in
 * "@com.sap.vocabularies.Common.v1.Label" and a slash does not make any difference as long as
 * the annotation does not have a "$Type" property.
 * <li> A technical property (that is, a numerical segment or one starting with a "$")
 * immediately before "@sapui.name" is invalid, for example "/$EntityContainer@sapui.name".
 * </ul>
 * The path must not continue after "@sapui.name".
 * 
 * If the current object is a string value, that string value is treated as a relative path and
 * followed step-by-step before the next segment is processed. Except for this, a path must
 * not continue if it comes across a non-object value. Such a string value can be a qualified
 * name (example path "/$EntityContainer/..."), a simple identifier (example path
 * "/TEAMS/$NavigationPropertyBinding/TEAM_2_EMPLOYEES/...") or even a path according to
 * "14.5.12 Expression edm:Path" etc. (example path
 * "/TEAMS/$Type/@com.sap.vocabularies.UI.v1.LineItem/0/Value/$Path/...").
 * 
 * Segments starting with an "@" character, for example "@com.sap.vocabularies.Common.v1.Label",
 * address annotations at the current object. As the first segment, they refer to the single
 * entity container. For objects which can only be annotated inline (see "14.3 Element
 * edm:Annotation" minus "14.2.1 Attribute Target"), the object already contains the
 * annotations as a property. For objects which can (only or also) be annotated via external
 * targeting, the object does not contain any annotation as a property. Such annotations MUST
 * be accessed via a path. BEWARE of a special case: Actions, functions and their parameters
 * can be annotated inline for a single overload or via external targeting for all overloads at
 * the same time. In this case, the object contains all annotations for the single overload as
 * a property, but annotations MUST nevertheless be accessed via a path in order to include
 * also annotations for all overloads at the same time.
 * 
 * Segments starting with an OData name followed by an "@" character, for example
 * "/TEAMS@Org.OData.Capabilities.V1.TopSupported", address annotations at an entity set,
 * singleton, or property, not at the corresponding type. In contrast,
 * "/TEAMS/@com.sap.vocabularies.Common.v1.Deletable" (note the separating slash) addresses an
 * annotation at the entity set's type. This is in line with the special rule of
 * "14.5.12 Expression edm:Path" regarding annotations at a navigation property itself.
 * 
 * "@" can be used as a segment to address a map of all annotations of the current object. This
 * is useful for iteration, for example via
 * <code>&lt;template:repeat list="{entityType>@}" ...></code>.
 * 
 * Annotations of an annotation are addressed not by two separate segments, but by a single
 * segment like
 * "@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.Common.v1.TextArrangement". Each
 * annotation can have a qualifier, for example "@first#foo@second#bar". Note: If the first
 * annotation's value is a record, a separate segment addresses an annotation of that record,
 * not an annotation of the first annotation itself.
 * In a similar way, annotations of "7.2 Element edm:ReferentialConstraint",
 * "7.3 Element edm:OnDelete", "10.2 Element edm:Member" and
 * "14.5.14.2 Element edm:PropertyValue" are addressed by segments like
 * "&lt;7.2.1 Attribute Property>@...", "$OnDelete@...", "&lt;10.2.1 Attribute Name>@..." and
 * "&lt;14.5.14.2.1 Attribute Property>@..." (where angle brackets denote a variable part and
 * sections refer to specification "OData Version 4.0 Part 3: Common Schema Definition
 * Language").
 * 
 * Annotations starting with "@@", for example
 * "@@sap.ui.model.odata.v4.AnnotationHelper.isMultiple" or "@@.AH.isMultiple" or
 * "@@.isMultiple", represent computed annotations. Their name without the "@@" prefix must
 * refer to a function either in the global namespace (in case of an absolute name) or in
 * <code>mParameters.scope</code> (in case of a relative name starting with a dot, which is
 * stripped before lookup; see the <code>&lt;template:alias></code> instruction for XML
 * Templating). This function is called with the current object (or primitive value) and
 * additional details and returns the result of this {@link #requestObject} call. The additional
 * details are given as an object with the following properties:
 * <ul>
 * <li><code>{@link sap.ui.model.Context} context</code> Points to the current object
 * <li><code>{string} schemaChildName</code> The qualified name of the schema child where the
 *   computed annotation has been found
 * </ul>
 * Computed annotations cannot be iterated by "@". The path must not continue after a computed
 * annotation.
 * 
 * A segment which represents an OData qualified name is looked up in the global scope ("scope
 * lookup") and thus determines a schema child which is used later on. Unknown qualified names
 * are invalid. This way, "/acme.DefaultContainer/EMPLOYEES" addresses the "EMPLOYEES" child of
 * the schema child named "acme.DefaultContainer". This also works indirectly
 * ("/$EntityContainer/EMPLOYEES") and implicitly ("/EMPLOYEES", see below).
 * 
 * A segment which represents an OData simple identifier needs special preparations. The same
 * applies to the empty segment after a trailing slash.
 * <ol>
 * <li> If the current object has a "$Action", "$Function" or "$Type" property, it is used for
 *    scope lookup first. This way, "/EMPLOYEES/ENTRYDATE" addresses the same object as
 *    "/EMPLOYEES/$Type/ENTRYDATE", namely the "ENTRYDATE" child of the entity type
 *    corresponding to the "EMPLOYEES" child of the entity container. The other cases jump from
 *    an action or function import to the corresponding action or function overloads.
 * <li> Else if the segment is the first one within its path, the last schema child addressed
 *    via scope lookup is used instead of the current object. This can only happen indirectly as
 *    in "/TEAMS/$NavigationPropertyBinding/TEAM_2_EMPLOYEES/..." where the schema child is the
 *    entity container and the navigation property binding can contain the simple identifier of
 *    another entity set within the same container.
 * 
 *    If the segment is the first one overall, "$EntityContainer" is inserted into the path
 *    implicitly. In other words, the entity container is used as the initial schema child.
 *    This way, "/EMPLOYEES" addresses the same object as "/$EntityContainer/EMPLOYEES", namely
 *    the "EMPLOYEES" child of the entity container.
 * <li> Afterwards, if the current object is an array, it represents overloads for an action or
 *    function. Multiple overloads are invalid. The overload's "$ReturnType/$Type" is used for
 *    scope lookup. This way, "/GetOldestWorker/AGE" addresses the same object as
 *    "/GetOldestWorker/0/$ReturnType/$Type/AGE". For primitive return types, the special
 *    segment "value" can be used to refer to the return type itself (see
 *    {@link sap.ui.model.odata.v4.ODataContextBinding#execute}). This way,
 *    "/GetOldestAge/value" addresses the same object as "/GetOldestAge/0/$ReturnType" (which
 *    is needed for automatic type determination, see {@link #requestUI5Type}).
 * </ol>
 * 
 * A trailing slash can be used to continue a path and thus force scope lookup or OData simple
 * identifier preparations, but then stay at the current object. This way, "/EMPLOYEES/$Type/"
 * addresses the entity type itself corresponding to the "EMPLOYEES" child of the entity
 * container. Although the empty segment is not an OData simple identifier, it can be used as a
 * placeholder for one. In this way, "/EMPLOYEES/" addresses the same entity type as
 * "/EMPLOYEES/$Type/". That entity type in turn is a map of all its OData children (that is,
 * structural and navigation properties) and determines the set of possible child names that
 * might be used after the trailing slash.
 * 
 * Any other segment, including an OData simple identifier, is looked up as a property of the
 * current object.
 * 
 * @param {string} sPath
 *   A relative or absolute path within the metadata model
 * @param {sap.ui.model.Context} [oContext]
 *   The context to be used as a starting point in case of a relative path
 * @param {object} [mParameters]
 *   Optional (binding) parameters; if they are given, <code>oContext</code> cannot be omitted
 * @param {object} [mParameters.scope]
 *   Optional scope for lookup of aliases for computed annotations (since 1.43.0)
 * @returns {Promise}
 *   A promise which is resolved with the requested metadata value as soon as it is
 *   available
 * @public
 * @see #getObject
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.requestObject = function(sPath,oContext,mParameters) { return null; };

/**
 * Requests the UI5 type for the given property path that formats and parses corresponding to
 * the property's EDM type and constraints. The property's type must be a primitive type. Use
 * {@link #getUI5Type} for synchronous access.
 * 
 * @param {string} sPath
 *   An absolute path to an OData property within the OData data model
 * @returns {Promise}
 *   A promise that gets resolved with the corresponding UI5 type from
 *   {@link sap.ui.model.odata.type} or rejected with an error; if no specific type can be
 *   determined, a warning is logged and {@link sap.ui.model.odata.type.Raw} is used
 * @public
 * @see #getUI5Type
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.requestUI5Type = function(sPath) { return null; };

/**
 * Requests information to retrieve a value list for the property given by
 * <code>sPropertyPath</code>.
 * 
 * @param {string} sPropertyPath
 *   An absolute path to an OData property within the OData data model
 * @returns {Promise}
 *   A promise which is resolved with a map of qualifier to value list mapping objects
 *   structured as defined by <code>com.sap.vocabularies.Common.v1.ValueListMappingType</code>;
 *   the map entry with key "" represents the mapping without qualifier. Each entry has an
 *   additional property "$model" which is the {@link sap.ui.model.odata.v4.ODataModel} instance
 *   to read value list data via this mapping.
 * 
 *   For fixed values, only one mapping is expected and the qualifier is ignored. The mapping
 *   is available with key "".
 * 
 *   The promise is rejected with an error if there is no value list information available
 *   for the given property path. Use {@link #getValueListType} to determine if value list
 *   information exists. It is also rejected with an error if the value list metadata is
 *   inconsistent.
 * 
 *   An inconsistency can result from one of the following reasons:
 *   <ul>
 *    <li> There is a reference, but the referenced service does not contain mappings for the
 *     property.
 *    <li> The referenced service contains annotation targets in the namespace of the data
 *     service that are not mappings for the property.
 *    <li> Two different referenced services contain a mapping using the same qualifier.
 *    <li> A service is referenced twice.
 *    <li> No mappings have been found.
 *    <li> There are multiple mappings for a fixed value list.
 *   </ul>
 * 
 * @public
 * @since 1.45.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.requestValueListInfo = function(sPropertyPath) { return null; };

/**
 * Determines which type of value list exists for the given property.
 * 
 * @param {string} sPropertyPath
 *   An absolute path to an OData property within the OData data model
 * @returns {Promise}
 *   A promise that is resolved with the type of the value list, a constant of the enumeration
 *   {@link sap.ui.model.odata.v4.ValueListType}. The promise is rejected if the property cannot
 *   be found in the metadata.
 * @public
 * @see #getValueListType
 * @since 1.47.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.requestValueListType = function(sPropertyPath) { return null; };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Model#setLegacySyntax
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.setLegacySyntax = function() {  };

/**
 * Returns a string representation of this object including the URL to the $metadata document of
 * the service.
 * 
 * @return {string} A string description of this model
 * 
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataMetaModel.prototype.toString = function() { return ""; };


// ---- sap.ui.model.odata.v4.ODataModel --------------------------------------------------------------------------

/**
 * Constructor for a new ODataModel.
 * 
 * 
 * @param {object} mParameters
 *   The parameters
 * @param {string|string[]} [mParameters.annotationURI]
 *   The URL (or an array of URLs) from which the annotation metadata are loaded.
 *   The annotation files are merged into the service metadata in the given order (last one
 *   wins). The same annotations are overwritten; if an annotation file contains other elements
 *   (like a type definition) that are already merged, an error is thrown.
 *   Supported since 1.41.0
 * @param {boolean} [mParameters.autoExpandSelect=false]
 *   Whether the OData model's bindings automatically generate $select and $expand system query
 *   options from the binding hierarchy.
 *   Note: Dynamic changes to the binding hierarchy are not supported.
 *   Supported since 1.47.0
 * @param {string} [mParameters.groupId="$auto"]
 *   Controls the model's use of batch requests: '$auto' bundles requests from the model in a
 *   batch request which is sent automatically before rendering; '$direct' sends requests
 *   directly without batch; other values result in an error
 * @param {sap.ui.model.odata.OperationMode} [mParameters.operationMode]
 *   The operation mode for sorting and filtering with the model's operation mode as default.
 *   Since 1.39.0, the operation mode {@link sap.ui.model.odata.OperationMode.Server} is
 *   supported. All other operation modes including <code>undefined</code> lead to an error if
 *   'vFilters' or 'vSorters' are given or if {@link #filter} or {@link #sort} is called.
 * @param {string} mParameters.serviceUrl
 *   Root URL of the service to request data from. The path part of the URL must end with a
 *   forward slash according to OData V4 specification ABNF, rule "serviceRoot". You may append
 *   OData custom query options to the service root URL separated with a "?", for example
 *   "/MyService/?custom=foo".
 *   See specification "OData Version 4.0 Part 2: URL Conventions", "5.2 Custom Query Options".
 *   OData system query options and OData parameter aliases lead to an error.
 * @param {boolean} [mParameters.supportReferences=true]
 *   Whether <code>&lt;edmx:Reference></code> and <code>&lt;edmx:Include></code> directives are
 *   supported in order to load schemas on demand from other $metadata documents and include
 *   them into the current service ("cross-service references").
 * @param {string} mParameters.synchronizationMode
 *   Controls synchronization between different bindings which refer to the same data for the
 *   case data changes in one binding. Must be set to 'None' which means bindings are not
 *   synchronized at all; all other values are not supported and lead to an error.
 * @param {string} [mParameters.updateGroupId]
 *   The group ID that is used for update requests. If no update group ID is specified,
 *   <code>mParameters.groupId</code> is used. Valid update group IDs are <code>undefined<code>,
 *   '$auto', '$direct' or an application group ID, which is a non-empty string consisting of
 *   alphanumeric characters from the basic Latin alphabet, including the underscore.
 * @throws {Error} If an unsupported synchronization mode is given, if the given service root
 *   URL does not end with a forward slash, if an unsupported parameter is given, if OData
 *   system query options or parameter aliases are specified as parameters, if an invalid group
 *   ID or update group ID is given, if the given operation mode is not supported, if an
 *   annotation file cannot be merged into the service metadata.
 * @class Model implementation for OData V4.
 * 
 *   Every resource path (relative to the service root URL, no query options) according to
 *   "4 Resource Path" in specification "OData Version 4.0 Part 2: URL Conventions" is
 *   a valid data binding path within this model if a leading slash is added; for example
 *   "/" + "SalesOrderList('A%2FB%26C')" to access an entity instance with key "A/B&C". Note
 *   that appropriate URI encoding is necessary. "4.5.1 Addressing Actions" needs an operation
 *   binding, see {@link sap.ui.model.odata.v4.ODataContextBinding}.
 * 
 *   Note that the OData V4 model has its own {@link sap.ui.model.odata.v4.Context} class.
 *   Bindings which are relative to such a V4 context depend on their corresponding parent
 *   binding and do not access data with their own service requests unless parameters are
 *   provided.
 * 
 *   The model does not support any public events; attaching an event handler leads to an error.
 * @extends sap.ui.model.Model
 * @public
 * @since 1.37.0
 * @version 1.48.4
 * 
 */
sap.ui.model.odata.v4.ODataModel = function(mParameters) {};
/**
 * Creates a new context binding for the given path, context and parameters.
 * 
 * This binding is inactive and will not know the bound context initially. You have to call
 * {@link sap.ui.model.Binding#initialize} to get it updated asynchronously and register a
 * change listener at the binding to be informed when the bound context is available.
 * 
 * @param {string} sPath
 *   The binding path in the model; must not end with a slash
 * @param {sap.ui.model.odata.v4.Context} [oContext]
 *   The context which is required as base for a relative path
 * @param {object} [mParameters]
 *   Map of binding parameters which can be OData query options as specified in
 *   "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameters "$$groupId"
 *   and "$$updateGroupId".
 *   Note: The binding creates its own data service request if it is absolute or if it has any
 *   parameters or if it is relative and has a context created via
 *   {@link ODataModel#createBindingContext}.
 *   The following OData query options are allowed:
 *   <ul>
 *   <li> All "5.2 Custom Query Options" except for those with a name starting with "sap-"
 *   <li> The $count, $expand, $filter, $levels, $orderby, $search and $select
 *   "5.1 System Query Options"; OData V4 only allows $count, $filter, $levels, $orderby and
 *   $search inside resource paths that identify a collection. In our case here, this means you
 *   can only use them inside $expand.
 *   </ul>
 *   All other query options lead to an error.
 *   Query options specified for the binding overwrite model query options.
 * @param {string} [mParameters.$$groupId]
 *   The group ID to be used for <b>read</b> requests triggered by this binding; if not
 *   specified, either the parent binding's group ID (if the binding is relative) or the
 *   model's group ID is used, see {@link sap.ui.model.odata.v4.ODataModel#constructor}.
 *   Valid values are <code>undefined</code>, '$auto', '$direct' or application group IDs as
 *   specified in {@link #submitBatch}.
 * @param {string} [mParameters.$$updateGroupId]
 *   The group ID to be used for <b>update</b> requests triggered by this binding;
 *   if not specified, either the parent binding's update group ID (if the binding is relative)
 *   or the model's update group ID is used, see
 *   {@link sap.ui.model.odata.v4.ODataModel#constructor}.
 *   For valid values, see parameter "$$groupId".
 * @returns {sap.ui.model.odata.v4.ODataContextBinding}
 *   The context binding
 * @throws {Error}
 *   If disallowed binding parameters are provided
 * 
 * @public
 * @see sap.ui.model.Model#bindContext
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.bindContext = function(sPath,oContext,mParameters) { return new sap.ui.model.odata.v4.ODataContextBinding(); };

/**
 * Creates a new list binding for the given path and optional context which must
 * resolve to an absolute OData path for an entity set.
 * 
 * @param {string} sPath
 *   The binding path in the model; must not be empty or end with a slash
 * @param {sap.ui.model.Context} [oContext]
 *   The context which is required as base for a relative path
 * @param {sap.ui.model.Sorter | sap.ui.model.Sorter[]} [vSorters]
 *   The dynamic sorters to be used initially. Call
 *   {@link sap.ui.model.odata.v4.ODataListBinding#sort} to replace them. Static sorters, as
 *   defined in the '$orderby' binding parameter, are always executed after the dynamic sorters.
 *   Supported since 1.39.0.
 * @param {sap.ui.model.Filter | sap.ui.model.Filter[]} [vFilters]
 *   The dynamic application filters to be used initially. Call
 *   {@link sap.ui.model.odata.v4.ODataListBinding#filter} to replace them. Static filters, as
 *   defined in the '$filter' binding parameter, are always combined with the dynamic filters
 *   using a logical <code>AND</code>.
 *   Supported since 1.39.0.
 * @param {object} [mParameters]
 *   Map of binding parameters which can be OData query options as specified in
 *   "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameters "$$groupId"
 *   and "$$updateGroupId".
 *   Note: The binding creates its own data service request if it is absolute or if it has any
 *   parameters or if it is relative and has a context created via
 *   {@link ODataModel#createBindingContext} or if it has sorters or filters.
 *   The following OData query options are allowed:
 *   <ul>
 *   <li> All "5.2 Custom Query Options" except for those with a name starting with "sap-"
 *   <li> The $apply, $count, $expand, $filter, $levels, $orderby, $search, and $select
 *   "5.1 System Query Options"
 *   </ul>
 *   All other query options lead to an error.
 *   Query options specified for the binding overwrite model query options.
 * @param {sap.ui.model.odata.OperationMode} [mParameters.operationMode]
 *   The operation mode for sorting. Since 1.39.0, the operation mode
 *   {@link sap.ui.model.odata.OperationMode.Server} is supported. All other operation modes
 *   including <code>undefined</code> lead to an error if 'vSorters' are given or if
 *   {@link sap.ui.model.odata.v4.ODataListBinding#sort} is called.
 * @param {string} [mParameters.$$groupId]
 *   The group ID to be used for <b>read</b> requests triggered by this binding; if not
 *   specified, either the parent binding's group ID (if the binding is relative) or the
 *   model's group ID is used, see {@link sap.ui.model.odata.v4.ODataModel#constructor}.
 *   Valid values are <code>undefined</code>, '$auto', '$direct' or application group IDs as
 *   specified in {@link #submitBatch}.
 * @param {string} [mParameters.$$updateGroupId]
 *   The group ID to be used for <b>update</b> requests triggered by this binding;
 *   if not specified, either the parent binding's update group ID (if the binding is relative)
 *   or the model's update group ID is used,
 *   see {@link sap.ui.model.odata.v4.ODataModel#constructor}.
 *   For valid values, see parameter "$$groupId".
 * @returns {sap.ui.model.odata.v4.ODataListBinding}
 *   The list binding
 * @throws {Error}
 *   If disallowed binding parameters are provided or an unsupported operation mode is used
 * 
 * @public
 * @see sap.ui.model.Model#bindList
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.bindList = function(sPath,oContext,vSorters,vFilters,mParameters) { return new sap.ui.model.odata.v4.ODataListBinding(); };

/**
 * Creates a new property binding for the given path. This binding is inactive and will not
 * know the property value initially. You have to call {@link sap.ui.model.Binding#initialize}
 * to get it updated asynchronously and register a change listener at the binding to be informed
 * when the value is available.
 * 
 * @param {string} sPath
 *   The binding path in the model; must not be empty or end with a slash
 * @param {sap.ui.model.Context} [oContext]
 *   The context which is required as base for a relative path
 * @param {object} [mParameters]
 *   Map of binding parameters which can be OData query options as specified in
 *   "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameter "$$groupId".
 *   Note: The binding creates its own data service request if it is absolute or if it has any
 *   parameters or if it is relative and has a context created via
 *   {@link ODataModel#createBindingContext}.
 *   All "5.2 Custom Query Options" are allowed except for those with a name starting with
 *   "sap-". All other query options lead to an error.
 *   Query options specified for the binding overwrite model query options.
 * @param {string} [mParameters.$$groupId]
 *   The group ID to be used for <b>read</b> requests triggered by this binding; if not
 *   specified, either the parent binding's group ID (if the binding is relative) or the
 *   model's group ID is used, see {@link sap.ui.model.odata.v4.ODataModel#constructor}.
 *   Valid values are <code>undefined</code>, '$auto', '$direct' or application group IDs as
 *   specified in {@link #submitBatch}.
 * @returns {sap.ui.model.odata.v4.ODataPropertyBinding}
 *   The property binding
 * @throws {Error}
 *   If disallowed binding parameters are provided
 * 
 * @public
 * @see sap.ui.model.Model#bindProperty
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.bindProperty = function(sPath,oContext,mParameters) { return new sap.ui.model.odata.v4.ODataPropertyBinding(); };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Model#bindTree
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.bindTree = function() {  };

/**
 * Creates a binding context for the given path. A relative path can only be resolved if a
 * context is provided.
 * Note: The parameters <code>mParameters</code>, <code>fnCallBack</code>, and
 * <code>bReload</code> from {@link sap.ui.model.Model#createBindingContext} are not supported.
 * 
 * It is possible to create binding contexts pointing to metadata.  A '#' in the resolved path
 * splits it into two parts: The part before '#' is transformed into a metadata context (see
 * {@link sap.ui.model.odata.v4.ODataMetaModel#getMetaContext}). The part following '#' is then
 * interpreted relative to this metadata context, even if it starts with a '/'; a trailing '/'
 * is allowed here, see {@link sap.ui.model.odata.v4.ODataMetaModel#requestObject} for the
 * effect it has.
 * 
 * Examples:
 * <ul>
 * <li><code>/Products('42')/Name#@com.sap.vocabularies.Common.v1.Label</code>
 *   points to the "Label" annotation of the "Name" property of the entity set "Products".
 * <li><code>/#Products/Name@com.sap.vocabularies.Common.v1.Label</code> has no data path part
 *   and thus starts at the metadata root. It also points to the "Label" annotation of the
 *   "Name" property of the entity set "Products".
 * <li><code>/Products#/</code>
 *   points to the entity type (note the trailing '/') of the entity set "Products".
 * </ul>
 * 
 * @param {string} sPath
 *   The binding path, may be relative to the provided context
 * @param {sap.ui.model.Context} [oContext]
 *   The context which is required as base for a relative path
 * @returns {sap.ui.model.Context}
 *   The binding context with the resolved path and the model instance
 * @throws {Error}
 *   If a relative path is provided without a context or in case of unsupported parameters or
 *   if the given context is a {@link sap.ui.model.odata.v4.Context}
 * 
 * @public
 * @see sap.ui.model.Model#createBindingContext
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.createBindingContext = function(sPath,oContext) { return new sap.ui.model.Context(); };

/**
 * Destroys this model and its meta model.
 * 
 * @public
 * @see sap.ui.model.Model#destroy
 * @since 1.38.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.destroy = function() {  };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Model#destroyBindingContext
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.destroyBindingContext = function() {  };

/**
 * Creates a new subclass of class sap.ui.model.odata.v4.ODataModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v4.ODataModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns the model's group ID.
 * 
 * @returns {string}
 *   The group ID
 * 
 * @public
 * @see sap.ui.model.odata.v4.ODataModel#constructor
 * @since 1.41.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.getGroupId = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.model.odata.v4.ODataModel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v4.ODataModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the meta model for this ODataModel.
 * 
 * @returns {sap.ui.model.odata.v4.ODataMetaModel}
 *   The meta model for this ODataModel
 * 
 * @public
 * @see sap.ui.model.Model#getMetaModel
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.getMetaModel = function() { return new sap.ui.model.odata.v4.ODataMetaModel(); };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Model#getObject
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.getObject = function() {  };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Model#getOriginalProperty
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.getOriginalProperty = function() {  };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Model#getProperty
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.getProperty = function() {  };

/**
 * Returns the model's update group ID.
 * 
 * @returns {string}
 *   The update group ID
 * 
 * @public
 * @see sap.ui.model.odata.v4.ODataModel#constructor
 * @since 1.41.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.getUpdateGroupId = function() { return ""; };

/**
 * Returns <code>true</code> if there are pending changes, meaning updates or created entities
 * (see {@link sap.ui.model.odata.v4.ODataListBinding#create}) that have not yet been
 * successfully sent to the server.
 * 
 * @returns {boolean}
 *   <code>true</code> if there are pending changes
 * 
 * @public
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.hasPendingChanges = function() { return false; };

/**
 * Refreshes the model by calling refresh on all bindings which have a change event handler
 * attached.
 * 
 * Note: When calling {@link #refresh} multiple times, the result of the request triggered by
 * the last call determines the model's data; it is <b>independent</b> of the order of calls to
 * {@link #submitBatch} with the given group ID.
 * 
 * If there are pending changes, an error is thrown. Use {@link #hasPendingChanges} to check if
 * there are pending changes. If there are changes, call {@link #submitBatch} to submit the
 * changes or {@link #resetChanges} to reset the changes before calling {@link #refresh}.
 * 
 * @param {string} [sGroupId]
 *   The group ID to be used for refresh; valid values are <code>undefined</code>,
 *   '$auto', '$direct' or application group IDs as specified in {@link #submitBatch}
 * @throws {Error}
 *   If the given group ID is invalid or if there are pending changes, see
 *   {@link #hasPendingChanges}
 * 
 * @public
 * @see sap.ui.model.Model#refresh
 * @see sap.ui.model.odata.v4.ODataContextBinding#refresh
 * @see sap.ui.model.odata.v4.ODataListBinding#refresh
 * @see sap.ui.model.odata.v4.ODataPropertyBinding#refresh
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.refresh = function(sGroupId) {  };

/**
 * Returns a promise for the "canonical path" of the entity for the given context.
 * According to "4.3.1 Canonical URL" of the specification "OData Version 4.0 Part 2: URL
 * Conventions", this is the "name of the entity set associated with the entity followed by the
 * key predicate identifying the entity within the collection".
 * Use the canonical path in {@link sap.ui.core.Element#bindElement} to create an element
 * binding.
 * 
 * @param {sap.ui.model.odata.v4.Context} oEntityContext
 *   A context in this model which must point to a non-contained OData entity
 * @returns {Promise}
 *   A promise which is resolved with the canonical path (e.g. "/SalesOrderList('0500000000')")
 *   in case of success, or rejected with an instance of <code>Error</code> in case of failure,
 *   e.g. when the given context does not point to an entity
 * 
 * @deprecated since 1.39.0
 *   Use {@link sap.ui.model.odata.v4.Context#requestCanonicalPath} instead.
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.requestCanonicalPath = function(oEntityContext) { return null; };

/**
 * Resets all property changes and created entities associated with the given group ID which
 * have not been successfully submitted via {@link #submitBatch}. Resets also invalid user
 * input for the same group ID. This function does not reset the deletion of entities
 * (see {@link sap.ui.model.odata.v4.Context#delete}) and the execution of OData operations
 * (see {@link sap.ui.model.odata.v4.ODataContextBinding#execute}).
 * 
 * @param {string} [sGroupId]
 *   The application group ID, which is a non-empty string consisting of alphanumeric
 *   characters from the basic Latin alphabet, including the underscore. If it is
 *   <code>undefined</code>, the model's <code>updateGroupId</code> is used. Note that the
 *   default <code>updateGroupId</code> is '$auto', which is invalid here.
 * @throws {Error}
 *   If the given group ID is not an application group ID or if change requests for the given
 *   group ID are running.
 * 
 * @public
 * @see sap.ui.model.odata.v4.ODataModel#constructor.
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.resetChanges = function(sGroupId) {  };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Model#setLegacySyntax
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.setLegacySyntax = function() {  };

/**
 * Submits the requests associated with the given application group ID in one batch request.
 * 
 * @param {string} sGroupId
 *   The application group ID, which is a non-empty string consisting of alphanumeric
 *   characters from the basic Latin alphabet, including the underscore.
 * @returns {Promise}
 *   A promise on the outcome of the HTTP request resolving with <code>undefined</code>; it is
 *   rejected with an error if the batch request itself fails
 * @throws {Error}
 *   If the given group ID is not an application group ID
 * 
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.submitBatch = function(sGroupId) { return null; };

/**
 * Returns a string representation of this object including the service URL.
 * 
 * @return {string} A string description of this model
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataModel.prototype.toString = function() { return ""; };


// ---- sap.ui.model.odata.v4.ODataPropertyBinding --------------------------------------------------------------------------

/**
 * Do <strong>NOT</strong> call this private constructor, but rather use
 * {@link sap.ui.model.odata.v4.ODataModel#bindProperty} instead!
 * 
 * 
 * @param {sap.ui.model.odata.v4.ODataModel} oModel
 *   The OData V4 model
 * @param {string} sPath
 *   The binding path in the model; must not end with a slash
 * @param {sap.ui.model.Context} [oContext]
 *   The context which is required as base for a relative path
 * @param {object} [mParameters]
 *   Map of binding parameters
 * @throws {Error}
 *   If disallowed binding parameters are provided
 * @class Property binding for an OData V4 model.
 *   An event handler can only be attached to this binding for the following events: 'change',
 *   'dataReceived', and 'dataRequested'.
 *   For unsupported events, an error is thrown.
 * @extends sap.ui.model.PropertyBinding
 * @mixes sap.ui.model.odata.v4.ODataBinding
 * @public
 * @since 1.37.0
 * @version 1.48.4
 * @borrows sap.ui.model.odata.v4.ODataBinding#hasPendingChanges as #hasPendingChanges
 * @borrows sap.ui.model.odata.v4.ODataBinding#isInitial as #isInitial
 * @borrows sap.ui.model.odata.v4.ODataBinding#refresh as #refresh
 * @borrows sap.ui.model.odata.v4.ODataBinding#resetChanges as #resetChanges
 * @borrows sap.ui.model.odata.v4.ODataBinding#resume as #resume
 * @borrows sap.ui.model.odata.v4.ODataBinding#suspend as #suspend
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding = function(oModel,sPath,oContext,mParameters) {};
/**
 * The 'change' event is fired when the binding is initialized or refreshed or its type is
 * changed or its parent context is changed. It is to be used by controls to get notified about
 * changes to the value of this property binding. Registered event handlers are called with the
 * change reason as parameter.
 * 
 * @param {sap.ui.base.Event} oEvent
 * @param {object} oEvent.getParameters
 * @param {sap.ui.model.ChangeReason} oEvent.getParameters.reason
 *   The reason for the 'change' event: {@link sap.ui.model.ChangeReason.Change} when the
 *   binding is initialized, {@link sap.ui.model.ChangeReason.Refresh} when the binding is
 *   refreshed, and {@link sap.ui.model.ChangeReason.Context} when the parent context is changed
 * 
 * @event
 * @public
 * @see sap.ui.base.Event
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.change = function(oEvent) {  };

/**
 * The 'dataReceived' event is fired after the back-end data has been processed and the
 * registered 'change' event listeners have been notified. It is to be used by applications for
 * example to switch off a busy indicator or to process an error.
 * 
 * If back-end requests are successful, the event has no parameters. Use
 * {@link #getValue() oEvent.getSource().getValue()} to access the response data. Note that
 * controls bound to this data may not yet have been updated, meaning it is not safe for
 * registered event handlers to access data via control APIs.
 * 
 * If a back-end request fails, the 'dataReceived' event provides an <code>Error</code> in the
 * 'error' event parameter.
 * 
 * @param {sap.ui.base.Event} oEvent
 * @param {object} oEvent.getParameters
 * @param {Error} [oEvent.getParameters.error] The error object if a back-end request failed.
 *   If there are multiple failed back-end requests, the error of the first one is provided.
 * 
 * @event
 * @public
 * @see sap.ui.base.Event
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.dataReceived = function(oEvent) {  };

/**
 * The 'dataRequested' event is fired directly after data has been requested from a back end.
 * It is to be used by applications for example to switch on a busy indicator. Registered event
 * handlers are called without parameters.
 * 
 * @param {sap.ui.base.Event} oEvent
 * 
 * @event
 * @public
 * @see sap.ui.base.Event
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.dataRequested = function(oEvent) {  };

/**
 * Destroys the object. The object must not be used anymore after this function was called.
 * 
 * @public
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.destroy = function() {  };

/**
 * Creates a new subclass of class sap.ui.model.odata.v4.ODataPropertyBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.odata.v4.ODataPropertyBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the current value.
 * 
 * @returns {any}
 *   The current value
 * 
 * @public
 * @see sap.ui.model.PropertyBinding#getValue
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.getValue = function() { return null; };

/**
 * Determines which type of value list exists for this property.
 * 
 * @returns {sap.ui.model.odata.v4.ValueListType}
 *   The value list type
 * @throws {Error}
 *   If the binding is relative and has no context, if the metadata is not loaded yet or if the
 *   property cannot be found in the metadata
 * 
 * @public
 * @since 1.45.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.getValueListType = function() { return new sap.ui.model.odata.v4.ValueListType(); };

/**
 * Returns <code>true</code> if this binding or its dependent bindings have pending changes,
 * meaning updates that have not yet been successfully sent to the server.
 * 
 * @returns {boolean}
 *   <code>true</code> if the binding has pending changes
 * 
 * @public
 * @since 1.39.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.hasPendingChanges = function() { return false; };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Binding#isInitial
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.isInitial = function() {  };

/**
 * Refreshes the binding. Prompts the model to retrieve data from the server using the given
 * group ID and notifies the control that new data is available.
 * 
 * Refresh is supported for bindings which are not relative to a
 * {@link sap.ui.model.odata.v4.Context}.
 * 
 * Note: When calling {@link #refresh} multiple times, the result of the request triggered by
 * the last call determines the binding's data; it is <b>independent</b> of the order of calls
 * to {@link sap.ui.model.odata.v4.ODataModel#submitBatch} with the given group ID.
 * 
 * If there are pending changes, an error is thrown. Use {@link #hasPendingChanges} to check if
 * there are pending changes. If there are changes, call
 * {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or
 * {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling
 * {@link #refresh}.
 * 
 * @param {string} [sGroupId]
 *   The group ID to be used for refresh; if not specified, the group ID for this binding is
 *   used.
 * 
 *   Valid values are <code>undefined</code>, '$auto', '$direct' or application group IDs as
 *   specified in {@link sap.ui.model.odata.v4.ODataModel#submitBatch}.
 * @throws {Error}
 *   If the given group ID is invalid, the binding has pending changes or refresh on this
 *   binding is not supported.
 * 
 * @public
 * @see sap.ui.model.Binding#refresh
 * @see #hasPendingChanges
 * @see #resetChanges
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.refresh = function(sGroupId) {  };

/**
 * Requests information to retrieve a value list for this property.
 * 
 * @returns {Promise}
 *   A promise which is resolved with a map of qualifier to value list mapping objects
 *   structured as defined by <code>com.sap.vocabularies.Common.v1.ValueListMappingType</code>;
 *   the map entry with key "" represents the mapping without qualifier. Each entry has an
 *   additional property "$model" which is the {@link sap.ui.model.odata.v4.ODataModel} instance
 *   to read value list data via this mapping.
 * 
 *   For fixed values, only one mapping is expected and the qualifier is ignored. The mapping
 *   is available with key "".
 * 
 *   The promise is rejected with an error if there is no value list information available
 *   for this property. Use {@link #getValueListType} to determine if value list information
 *   exists. It is also rejected with an error if the value list metadata is inconsistent.
 * 
 *   An inconsistency can result from one of the following reasons:
 *   <ul>
 *    <li> There is a reference, but the referenced service does not contain mappings for the
 *     property.
 *    <li> The referenced service contains annotation targets in the namespace of the data
 *     service that are not mappings for the property.
 *    <li> Two different referenced services contain a mapping using the same qualifier.
 *    <li> A service is referenced twice.
 *    <li> No mappings have been found.
 *   </ul>
 * @throws {Error}
 *   If the binding is relative and has no context
 * 
 * @public
 * @since 1.45.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.requestValueListInfo = function() { return null; };

/**
 * Determines which type of value list exists for this property.
 * 
 * @returns {Promise}
 *   A promise that is resolved with the type of the value list. It is rejected if the property
 *   cannot be found in the metadata.
 * @throws {Error}
 *   If the binding is relative and has no context
 * 
 * @public
 * @since 1.47.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.requestValueListType = function() { return null; };

/**
 * Resets all pending changes of this binding, see {@link #hasPendingChanges}. Resets also
 * invalid user input.
 * 
 * @throws {Error}
 *   If there is a change of this binding which has been sent to the server and for which there
 *   is no response yet.
 * 
 * @public
 * @since 1.40.1
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.resetChanges = function() {  };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Binding#resume
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.resume = function() {  };

/**
 * Sets the optional type and internal type for this binding; used for formatting and parsing.
 * Fires a change event if the type has changed.
 * 
 * @param {sap.ui.model.Type} oType
 *   The type for this binding
 * @param {string} sInternalType
 *   The internal type of the element property which owns this binding, for example "any",
 *   "boolean", "float", "int", "string"; see {@link sap.ui.model.odata.type} for more
 *   information
 * 
 * @public
 * @since 1.43.0
 * @see sap.ui.model.PropertyBinding#setType
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.setType = function(oType,sInternalType) {  };

/**
 * Sets the new current value and updates the cache.
 * 
 * @param {any} vValue
 *   The new value which must be primitive
 * @param {string} [sGroupId]
 *   The group ID to be used for this update call; if not specified, the update group ID for
 *   this binding (or its relevant parent binding) is used, see
 *   {@link sap.ui.model.odata.v4.ODataPropertyBinding#constructor}.
 *   Valid values are <code>undefined</code>, '$auto', '$direct' or application group IDs as
 *   specified in {@link sap.ui.model.odata.v4.ODataModel#submitBatch}.
 * @throws {Error}
 *   If the new value is not primitive or the binding is not relative
 * 
 * @public
 * @see sap.ui.model.PropertyBinding#setValue
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.setValue = function(vValue,sGroupId) {  };

/**
 * Method not supported
 * 
 * @throws {Error}
 * 
 * @public
 * @see sap.ui.model.Binding#suspend
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.suspend = function() {  };

/**
 * Returns a string representation of this object including the binding path. If the binding is
 * relative, the parent path is also given, separated by a '|'.
 * 
 * @return {string} A string description of this binding
 * @public
 * @since 1.37.0
 * 
 */
sap.ui.model.odata.v4.ODataPropertyBinding.prototype.toString = function() { return ""; };


// ---- sap.ui.model.odata.v4.ODataUtils --------------------------------------------------------------------------

/**
 * Compares the given OData values.
 * 
 * @param {any} vValue1
 *   The first value to compare
 * @param {any} vValue2
 *   The second value to compare
 * @param {boolean|string} [vEdmType]
 *   If <code>true</code> or "Decimal", the string values <code>vValue1</code> and
 *   <code>vValue2</code> are assumed to be valid "Edm.Decimal" or "Edm.Int64" values
 *   and are compared as a decimal number (only sign, integer and fraction digits; no
 *   exponential format).
 *   If "DateTime", the string values <code>vValue1</code> and <code>vValue2</code>
 *   are assumed to be valid "Edm.DateTimeOffset" values and are compared based on the
 *   corresponding number of milliseconds since 1 January, 1970 UTC.
 *   Otherwise the values are compared with the JavaScript operators <code>===</code>
 *   and <code>&gt;</code>.
 * @return {number}
 *   The result of the comparison: <code>0</code> if the values are equal,
 *   <code>1</code> if the first value is larger, <code>-1</code> if the second value
 *   is larger, <code>NaN</code> if they cannot be compared
 * 
 * @public
 * @since 1.43.0
 * 
 * @memberof sap.ui.model.odata.v4.ODataUtils
 */
sap.ui.model.odata.v4.ODataUtils.compare = function(vValue1,vValue2,vEdmType) { return 0.0; };

/**
 * Parses an "Edm.Date" value and returns the corresponding JavaScript <code>Date</code>
 * value (UTC with a time value of "00:00:00").
 * 
 * @param {string} sDate
 *   The "Edm.Date" value to parse
 * @returns {Date}
 *   The JavaScript <code>Date</code> value
 * @throws {Error}
 *   If the input cannot be parsed
 * 
 * @public
 * @since 1.43.0
 * 
 * @memberof sap.ui.model.odata.v4.ODataUtils
 */
sap.ui.model.odata.v4.ODataUtils.parseDate = function(sDate) { return null; };

/**
 * Parses an "Edm.DateTimeOffset" value and returns the corresponding JavaScript
 * <code>Date</code> value.
 * 
 * @param {string} sDateTimeOffset
 *   The "Edm.DateTimeOffset" value to parse
 * @returns {Date}
 *   The JavaScript <code>Date</code> value
 * @throws {Error}
 *   If the input cannot be parsed
 * 
 * @public
 * @since 1.43.0
 * 
 * @memberof sap.ui.model.odata.v4.ODataUtils
 */
sap.ui.model.odata.v4.ODataUtils.parseDateTimeOffset = function(sDateTimeOffset) { return null; };

/**
 * Parses an "Edm.TimeOfDay" value and returns the corresponding JavaScript
 * <code>Date</code> value (UTC with a date value of "1970-01-01").
 * 
 * @param {string} sTimeOfDay
 *   The "Edm.TimeOfDay" value to parse
 * @returns {Date}
 *   The JavaScript <code>Date</code> value
 * @throws {Error}
 *   If the input cannot be parsed
 * 
 * @public
 * @since 1.43.0
 * 
 * @memberof sap.ui.model.odata.v4.ODataUtils
 */
sap.ui.model.odata.v4.ODataUtils.parseTimeOfDay = function(sTimeOfDay) { return null; };


// ---- sap.ui.model.odata.v4.ValueListType --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.odata.v4.ValueListType.toString = function() { return ""; };

// ---- sap.ui.model.PropertyBinding --------------------------------------------------------------------------

/**
 * Constructor for PropertyBinding
 * 
 * 
 * @class
 * The PropertyBinding is used to access single data values in the data model.
 * 
 * @param {sap.ui.model.Model} oModel
 * @param {string} sPath
 * @param {sap.ui.model.Context} oContext
 * @param {object} [mParameters]
 * 
 * @public
 * @extends sap.ui.model.Binding
 * 
 */
sap.ui.model.PropertyBinding = function(oModel,sPath,oContext,mParameters) {};
/**
 * Creates a new subclass of class sap.ui.model.PropertyBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.PropertyBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 *  Returns the binding mode
 *  @returns {sap.ui.model.BindingMode} the binding mode
 *  @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.getBindingMode = function() { return new sap.ui.model.BindingMode(); };

/**
 * Returns the current external value of the bound target which is formatted via a type or formatter function.
 * 
 * @throws sap.ui.model.FormatException
 * 
 * @return {object} the current value of the bound target
 * 
 * @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.getExternalValue = function() { return new Object(); };

/**
 *  Returns the formatter function
 *  @returns {Function} the formatter function
 *  @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.getFormatter = function() { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.PropertyBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.PropertyBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 *  Returns the type if any for the binding.
 *  @returns {sap.ui.model.Type} the binding type
 *  @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.getType = function() { return new sap.ui.model.Type(); };

/**
 * Returns the current value of the bound target
 * @return {object} the current value of the bound target
 * 
 * @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.getValue = function() { return new Object(); };

/**
 * Resumes the binding update. Change events will be fired again.
 * 
 * When the binding is resumed and the control value was changed in the meantime, the control value will be set to the
 * current value from the model and a change event will be fired.
 * @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.resume = function() {  };

/**
 * Sets the binding mode
 * @param {sap.ui.model.BindingMode} sBindingMode the binding mode
 * @protected
 * 
 */
sap.ui.model.PropertyBinding.prototype.setBindingMode = function(sBindingMode) {  };

/**
 * Sets the value for this binding. The value is parsed and validated against its type and then set to the binding.
 * A model implementation should check if the current default binding mode permits
 * setting the binding value and if so set the new value also in the model.
 * 
 * @param {object} oValue the value to set for this binding
 * 
 * @throws sap.ui.model.ParseException
 * @throws sap.ui.model.ValidateException
 * 
 * @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.setExternalValue = function(oValue) {  };

/**
 * Sets the optional formatter function for the binding.
 * @param {function} fnFormatter the formatter function for the binding
 * 
 * @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.setFormatter = function(fnFormatter) {  };

/**
 * Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly.
 * The internal type is the property type of the element which the value is formatted to.
 * 
 * @param {sap.ui.model.Type} oType the type for the binding
 * @param {String} sInternalType the internal type of the element property which this binding is bound against.
 * 
 * @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.setType = function(oType,sInternalType) {  };

/**
 * Sets the value for this binding. A model implementation should check if the current default binding mode permits
 * setting the binding value and if so set the new value also in the model.
 * @param {object} oValue the value to set for this binding
 * 
 * @public
 * 
 */
sap.ui.model.PropertyBinding.prototype.setValue = function(oValue) {  };


// ---- sap.ui.model.resource --------------------------------------------------------------------------


// ---- sap.ui.model.resource.ResourceModel --------------------------------------------------------------------------

/**
 * Constructor for a new ResourceModel.
 * 
 * 
 * @class Model implementation for resource bundles
 * 
 * @extends sap.ui.model.Model
 * @version 1.48.4
 * 
 * @param {object} oData parameters used to initialize the ResourceModel; at least either bundleUrl or bundleName must be set on this object; if both are set, bundleName wins
 * @param {string} [oData.bundleUrl] the URL to the base .properties file of a bundle (.properties file without any locale information, e.g. "mybundle.properties")
 * @param {string} [oData.bundleName] the UI5 module name of the .properties file; this name will be resolved to a path like the paths of normal UI5 modules and ".properties" will then be appended (e.g. a name like "myBundle" can be given)
 * @param {string} [oData.bundleLocale] an optional locale; when not given, the default is the active locale from the UI5 configuration
 * @param {boolean} [oData.async=false] whether the language bundle should be loaded asynchronously
 * @constructor
 * @public
 * 
 */
sap.ui.model.resource.ResourceModel = function(oData) {};
/**
 * Enhances the resource model with a custom resource bundle. The resource model
 * can be enhanced with multiple resource bundles. The last enhanced resource
 * bundle wins against the previous ones and the original ones. This function
 * can be called several times.
 * 
 * @param {object|jQuery.sap.util.ResourceBundle} oData parameters used to initialize the ResourceModel; at least either bundleUrl or bundleName must be set on this object; if both are set, bundleName wins - or an instance of an existing {@link jQuery.sap.util.ResourceBundle}
 * @param {string} [oData.bundleUrl] the URL to the base .properties file of a bundle (.properties file without any locale information, e.g. "mybundle.properties")
 * @param {string} [oData.bundleName] the UI5 module name of the .properties file; this name will be resolved to a path like the paths of normal UI5 modules and ".properties" will then be appended (e.g. a name like "myBundle" can be given)
 * @param {string} [oData.bundleLocale] an optional locale; when not given, the default is the active locale from the UI5 configuration
 * @returns {Promise} Promise in async case (async ResourceModel) which is resolved when the the enhancement is finished
 * @since 1.16.1
 * @public
 * 
 */
sap.ui.model.resource.ResourceModel.prototype.enhance = function(oData) { return null; };

/**
 * Creates a new subclass of class sap.ui.model.resource.ResourceModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.resource.ResourceModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.resource.ResourceModel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.resource.ResourceModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the value for the property with the given <code>sPropertyName</code>
 * 
 * @param {string} sPath the path to the property
 * @returns {string} the value of the property
 * @public
 * 
 */
sap.ui.model.resource.ResourceModel.prototype.getProperty = function(sPath) { return ""; };

/**
 * Returns the resource bundle of this model
 * 
 * @returns {jQuery.sap.util.ResourceBundle|Promise} loaded resource bundle or ECMA Script 6 Promise in asynchronous case
 * @public
 * 
 */
sap.ui.model.resource.ResourceModel.prototype.getResourceBundle = function() { return new jQuery.sap.util.ResourceBundle(); };


// ---- sap.ui.model.SelectionModel --------------------------------------------------------------------------

/**
 * Constructs an instance of an sap.ui.model.SelectionModel.
 * 
 * 
 * @class
 * @extends sap.ui.base.EventProvider
 * @version 1.48.4
 * 
 * @param {int} iSelectionMode <code>sap.ui.model.SelectionModel.SINGLE_SELECTION</code> or <code>sap.ui.model.SelectionModel.MULTI_SELECTION</code>
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.model.SelectionModel = function(iSelectionMode) {};
/**
 * SelectionMode: Multi Selection
 * @public
 * 
 */
sap.ui.model.SelectionModel.MULTI_SELECTION = undefined

/**
 * SelectionMode: Single Selection
 * @public
 * 
 */
sap.ui.model.SelectionModel.SINGLE_SELECTION = undefined

/**
 * Changes the selection to be the union of the current selection
 * and the range between <code>iFromIndex</code> and <code>iToIndex</code> inclusive.
 * If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
 * 
 * In <code>SINGLE_SELECTION</code> selection mode, this is equivalent
 * to calling <code>setSelectionInterval</code>, and only the second index
 * is used.
 * 
 * If this call results in a change to the current selection or lead selection, then a
 * <code>SelectionChanged</code> event is fired.
 * 
 * @param {int} iFromIndex one end of the interval.
 * @param {int} iToIndex other end of the interval
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.addSelectionInterval = function(iFromIndex,iToIndex) { return new sap.ui.model.SelectionModel(); };

/**
 * Attach event-handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.attachSelectionChanged = function(oData,fnFunction,oListener) { return new sap.ui.model.SelectionModel(); };

/**
 * Change the selection to the empty set and clears the lead selection.
 * 
 * If this call results in a change to the current selection or lead selection, then a
 * <code>SelectionChanged</code> event is fired.
 * 
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.clearSelection = function() { return new sap.ui.model.SelectionModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.detachSelectionChanged = function(fnFunction,oListener) { return new sap.ui.model.SelectionModel(); };

/**
 * Creates a new subclass of class sap.ui.model.SelectionModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.SelectionModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Fire event 'selectionChanged' to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'leadIndex' of type <code>int</code> Lead selection index.</li>
 * <li>'rowIndices' of type <code>int[]</code> Other selected indices (if available)</li>
 * </ul>
 * 
 * @param {object} mArguments the arguments to pass along with the event.
 * @param {int} mArguments.leadIndex Lead selection index
 * @param {int[]} [mArguments.rowIndices] Other selected indices (if available)
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.SelectionModel.prototype.fireSelectionChanged = function(mArguments) { return new sap.ui.model.SelectionModel(); };

/**
 * Return the second index argument from the most recent call to
 * setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().
 * @return {int} lead selected index
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.getLeadSelectedIndex = function() { return 0; };

/**
 * Returns a metadata object for class sap.ui.model.SelectionModel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.SelectionModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the selected indices as array.
 * 
 * @return {int[]} array of selected indices
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.getSelectedIndices = function() { return new Array(); };

/**
 * Returns the current selection mode.
 * @return {int} the current selection mode
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.getSelectionMode = function() { return 0; };

/**
 * Returns true if the specified index is selected.
 * @param {int} iIndex
 * @return {boolean} true if the specified index is selected.
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.isSelectedIndex = function(iIndex) { return false; };

/**
 * Moves all selected indices starting at the position <code>iStartIndex</code> <code>iMove</code>
 * items.
 * 
 * This can be used if new items are inserted to the item set and you want to keep the selection.
 * To handle a deletion of items use <code>sliceSelectionInterval</code>.
 * 
 * If this call results in a change to the current selection or lead selection, then a
 * <code>SelectionChanged</code> event is fired.
 * 
 * @param {int} iStartIndex start at this position
 * @param {int} iMove
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.moveSelectionInterval = function(iStartIndex,iMove) { return new sap.ui.model.SelectionModel(); };

/**
 * Changes the selection to be the set difference of the current selection
 * and the indices between <code>iFromIndex</code> and <code>iToIndex</code> inclusive.
 * If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
 * 
 * If the range of removed selection indices includes the current lead selection,
 * then the lead selection will be unset (set to -1).
 * 
 * If this call results in a change to the current selection or lead selection, then a
 * <code>SelectionChanged</code> event is fired.
 * 
 * @param {int} iFromIndex one end of the interval.
 * @param {int} iToIndex other end of the interval
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.removeSelectionInterval = function(iFromIndex,iToIndex) { return new sap.ui.model.SelectionModel(); };

/**
 * Selects all rows up to the <code>iToIndex</iToIndex>.
 * 
 * If this call results in a change to the current selection, then a
 * <code>SelectionChanged</code> event is fired.
 * 
 * @param {int} iToIndex end of the interval
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.selectAll = function(iToIndex) { return new sap.ui.model.SelectionModel(); };

/**
 * Changes the selection to be equal to the range <code>iFromIndex</code> and <code>iToIndex</code>
 * inclusive. If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
 * 
 * In <code>SINGLE_SELECTION</code> selection mode, only <code>iToIndex</iToIndex> is used.
 * 
 * If this call results in a change to the current selection, then a
 * <code>SelectionChanged</code> event is fired.
 * 
 * @param {int} iFromIndex one end of the interval.
 * @param {int} iToIndex other end of the interval
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.setSelectionInterval = function(iFromIndex,iToIndex) { return new sap.ui.model.SelectionModel(); };

/**
 * Sets the selection mode. The following list describes the accepted
 * selection modes:
 * <ul>
 * <li><code>sap.ui.model.SelectionModel.SINGLE_SELECTION</code> -
 *   Only one list index can be selected at a time. In this mode,
 *   <code>setSelectionInterval</code> and <code>addSelectionInterval</code> are
 *   equivalent, both replacing the current selection with the index
 *   represented by the second argument (the "lead").
 * <li><code>sap.ui.model.SelectionModel.MULTI_SELECTION</code> -
 *   In this mode, there's no restriction on what can be selected.
 * </ul>
 * 
 * @param {int} iSelectionMode selection mode
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.setSelectionMode = function(iSelectionMode) {  };

/**
 * Slices a the indices between the two indices from the selection.
 * If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
 * 
 * If the range of removed selection indices includes the current lead selection,
 * then the lead selection will be unset (set to -1).
 * 
 * If this call results in a change to the current selection or lead selection, then a
 * <code>SelectionChanged</code> event is fired.
 * 
 * @param {int} iFromIndex one end of the interval.
 * @param {int} iToIndex other end of the interval
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.SelectionModel.prototype.sliceSelectionInterval = function(iFromIndex,iToIndex) { return new sap.ui.model.SelectionModel(); };


// ---- sap.ui.model.SimpleType --------------------------------------------------------------------------

/**
 * Constructor for a new SimpleType.
 * 
 * 
 * @class
 * This is an abstract base class for simple types.
 * @abstract
 * 
 * @extends sap.ui.model.Type
 * @version 1.48.4
 * 
 * @constructor
 * @param {object} [oFormatOptions] options as provided by concrete subclasses
 * @param {object} [oConstraints] constraints as supported by concrete subclasses
 * @public
 * 
 */
sap.ui.model.SimpleType = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.SimpleType with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Type.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.SimpleType.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Format the given value in model representation to an output value in the given
 * internal type. This happens according to the format options, if target type is 'string'.
 * If oValue is not defined or null, null will be returned.
 * @param {any} oValue the value to be formatted
 * @param {string} sInternalType the target type
 * @return {any} the formatted output value
 * 
 * @public
 * 
 */
sap.ui.model.SimpleType.prototype.formatValue = function(oValue,sInternalType) { return null; };

/**
 * Returns a metadata object for class sap.ui.model.SimpleType.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.SimpleType.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Parse a value of an internal type to the expected value of the model type.
 * @param {any} oValue the value to be parsed
 * @param {string} sInternalType the source type
 * @return {any} the parse result
 * 
 * @public
 * 
 */
sap.ui.model.SimpleType.prototype.parseValue = function(oValue,sInternalType) { return null; };

/**
 * Validate whether a given value in model representation is valid and meets the
 * defined constraints (if any).
 * @param {any} oValue the value to be validated
 * 
 * @public
 * 
 */
sap.ui.model.SimpleType.prototype.validateValue = function(oValue) {  };


// ---- sap.ui.model.Sorter --------------------------------------------------------------------------

/**
 * 
 * Constructor for Sorter
 * 
 * 
 * @class
 * Sorter for the list binding
 * This object defines the sort order for the list binding.
 * 
 * 
 * @param {String} sPath the binding path used for sorting
 * @param {boolean} [bDescending=false] whether the sort order should be descending
 * @param {boolean|function} [vGroup] configure grouping of the content, can either be true to enable grouping
 *        based on the raw model property value, or a function which calculates the group value out of the
 *        context (e.g. oContext.getProperty("date").getYear() for year grouping). The control needs to
 *        implement the grouping behaviour for the aggregation which you want to group. In case a function
 *        is provided it must either return a primitive type value as the group key or an object containing
 *        a "key" property and additional properties needed for group visualization.
 * @param {function} [fnComparator] a custom comparator function, which is used for clientside sorting instead
 *        of the default comparator method.
 * @public
 * @extends sap.ui.base.Object
 * 
 */
sap.ui.model.Sorter = function(sPath,bDescending,vGroup,fnComparator) {};
/**
 * Compares two values
 * 
 * This is the default comparator function used for clientside sorting, if no custom comparator is given in the
 * constructor. It does compare just by using equal/less than/greater than with automatic type casting, except
 * for null values, which are always last, and string values where localeCompare is used.
 * 
 * The comparator method returns -1, 0 or 1, depending on the order of the two items and is
 * suitable to be used as a comparator method for Array.sort.
 * 
 * @param {any} a the first value to compare
 * @param {any} b the second value to compare
 * @returns {int} -1, 0 or 1 depending on the compare result
 * @public
 * 
 */
sap.ui.model.Sorter.defaultComparator = function(a,b) { return 0; };

/**
 * Creates a new subclass of class sap.ui.model.Sorter with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.Sorter.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a group object, at least containing a key property for group detection.
 * May contain additional properties as provided by a custom group function.
 * 
 * @param {sap.ui.model.Context} oContext the binding context
 * @return {object} An object containing a key property and optional custom properties
 * @public
 * 
 */
sap.ui.model.Sorter.prototype.getGroup = function(oContext) { return new Object(); };

/**
 * Returns the group function of this Sorter. If grouping is not enabled on this Sorter, it will return
 * undefined, if no explicit group function has been defined the default group function is returned.
 * The returned function is bound to its Sorter, so it will group according to its own property path,
 * even if it is used in the context of another Sorter.
 * 
 * @return {function} The group function
 * @public
 * 
 */
sap.ui.model.Sorter.prototype.getGroupFunction = function() { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.Sorter.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.Sorter.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.TreeAutoExpandMode --------------------------------------------------------------------------

// dummy function to make Eclipse aware of namespace
sap.ui.model.TreeAutoExpandMode.toString = function() { return ""; };

// ---- sap.ui.model.TreeBinding --------------------------------------------------------------------------

/**
 * Constructor for TreeBinding
 * 
 * 
 * @class
 * The TreeBinding is a specific binding for trees in the model, which can be used
 * to populate Trees.
 * 
 * @param {sap.ui.model.Model} oModel
 * @param {string}
 *         sPath the path pointing to the tree / array that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {array}
 *         [aFilters=null] predefined filter/s contained in an array (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional)
 * @param {array}
 *         [aSorters=null] predefined sap.ui.model.sorter/s contained in an array (optional)
 * @public
 * @extends sap.ui.model.Binding
 * 
 */
sap.ui.model.TreeBinding = function(oModel,sPath,oContext,aFilters,mParameters,aSorters) {};
/**
 * Attach event-handler <code>fnFunction</code> to the '_filter' event of this <code>sap.ui.model.TreeBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event. It now contains a parameter (reason : "filter") when a filter event is fired.
 * 
 */
sap.ui.model.TreeBinding.prototype.attachFilter = function(fnFunction,oListener) {  };

/**
 * Detach event-handler <code>fnFunction</code> from the '_filter' event of this <code>sap.ui.model.TreeBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event.
 * 
 */
sap.ui.model.TreeBinding.prototype.detachFilter = function(fnFunction,oListener) {  };

/**
 * Creates a new subclass of class sap.ui.model.TreeBinding with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.TreeBinding.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Filters the tree according to the filter definitions.
 * @param {sap.ui.model.Filter[]} aFilters Array of sap.ui.model.Filter objects
 * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
 * 
 * @public
 * 
 */
sap.ui.model.TreeBinding.prototype.filter = function(aFilters,sFilterType) {  };

/**
 * Returns the number of child nodes of a specific context
 * 
 * @param {Object} oContext the context element of the node
 * @return {int} the number of children
 * 
 * @public
 * 
 */
sap.ui.model.TreeBinding.prototype.getChildCount = function(oContext) { return 0; };

/**
 * Returns a metadata object for class sap.ui.model.TreeBinding.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.TreeBinding.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the current value of the bound target
 * @param {Object} oContext the context element of the node
 * @param {int} iStartIndex the startIndex where to start the retrieval of contexts
 * @param {int} iLength determines how many contexts to retrieve beginning from the start index.
 * @return {Array} the array of child contexts for the given node
 * 
 * @public
 * 
 */
sap.ui.model.TreeBinding.prototype.getNodeContexts = function(oContext,iStartIndex,iLength) { return null; };

/**
 * Returns the current value of the bound target
 * @param {int} iStartIndex the startIndex where to start the retrieval of contexts
 * @param {int} iLength determines how many contexts to retrieve beginning from the start index.
 * @return {Array} the array of child contexts for the root node
 * 
 * @public
 * 
 */
sap.ui.model.TreeBinding.prototype.getRootContexts = function(iStartIndex,iLength) { return null; };

/**
 * Returns if the node has child nodes
 * @param {Object} oContext the context element of the node
 * @return {boolean} true if node has children
 * 
 * @public
 * 
 */
sap.ui.model.TreeBinding.prototype.hasChildren = function(oContext) { return false; };

/**
 * Sorts the tree according to the sorter definitions.
 * @param {sap.ui.model.Sorter[]} aSorters Array of sap.ui.model.Sorter objects
 * 
 * @public
 * 
 */
sap.ui.model.TreeBinding.prototype.sort = function(aSorters) {  };


// ---- sap.ui.model.TreeBindingAdapter --------------------------------------------------------------------------

/**
 * Adapter for TreeBindings to add the ListBinding functionality and use the
 * tree structure in list based controls.
 * @class
 * @experimental This module is only for experimental and internal use!
 * @protected
 * 
 */
sap.ui.model.TreeBindingAdapter = function() {};
/**
 * Calculate the request length based on the given information
 * 
 * @param {int} iMaxGroupSize the maximum group size
 * @param {object} oSection the information of the current section
 * @protected
 * 
 */
sap.ui.model.TreeBindingAdapter.prototype._calculateRequestLength = function(iMaxGroupSize,oSection) {  };

/**
 * Attach event-handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
 * Event is fired if the selection of tree nodes is changed in any way.
 * 
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 * 
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.TreeBindingAdapter.prototype.attachSelectionChanged = function(oData,fnFunction,oListener) { return new sap.ui.model.SelectionModel(); };

/**
 * Detach event-handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
 * 
 * The passed function and listener object must match the ones previously used for event registration.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 * 
 */
sap.ui.model.TreeBindingAdapter.prototype.detachSelectionChanged = function(fnFunction,oListener) { return new sap.ui.model.SelectionModel(); };

/**
 * Fire event 'selectionChanged' to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'leadIndex' of type <code>int</code> Lead selection index.</li>
 * <li>'rowIndices' of type <code>int[]</code> Other selected indices (if available)</li>
 * </ul>
 * 
 * @param {object} mArguments the arguments to pass along with the event.
 * @param {int} mArguments.leadIndex Lead selection index
 * @param {int[]} [mArguments.rowIndices] Other selected indices (if available)
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @protected
 * 
 */
sap.ui.model.TreeBindingAdapter.prototype.fireSelectionChanged = function(mArguments) { return new sap.ui.model.SelectionModel(); };

/**
 * Retrieves the requested part from the tree and returns node objects.
 * @param iStartIndex
 * @param iLength
 * @param iThreshold
 * @return {Object} Tree Node
 * @protected
 * 
 */
sap.ui.model.TreeBindingAdapter.prototype.getNodes = function(iStartIndex,iLength,iThreshold) { return null; };


// ---- sap.ui.model.TreeBindingCompatibilityAdapter --------------------------------------------------------------------------

/**
 * Adapter for TreeBindings to add the ListBinding functionality and use the
 * tree structure in list based controls.
 * 
 * This module is only for experimental and internal use!
 * @class
 * @protected
 * 
 */
sap.ui.model.TreeBindingCompatibilityAdapter = function() {};

// ---- sap.ui.model.TreeBindingUtils --------------------------------------------------------------------------

/**
 * Merges together oNewSection into a set of other sections (aSections)
 * The array/objects are not modified, the function returns a new section array.
 * @param {object[]} aSections the sections into which oNewSection will be merged
 * @param {object} oNewSection the section which should be merged into aNewSections
 * @return {object[]} a new array containing all sections from aSections merged with oNewSection
 * @public
 * 
 * @memberof sap.ui.model.TreeBindingUtils
 */
sap.ui.model.TreeBindingUtils.mergeSections = function(aSections,oNewSection) { return new Array(); };


// ---- sap.ui.model.Type --------------------------------------------------------------------------

/**
 * Constructor for a new Type.
 * 
 * 
 * @class
 * This is an abstract base class for type objects.
 * @abstract
 * 
 * @extends sap.ui.base.Object
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * 
 */
sap.ui.model.Type = function() {};
/**
 * Creates a new subclass of class sap.ui.model.Type with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.Type.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.Type.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.Type.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the name of this type.
 * 
 * @return {String} the name of this type
 * @public
 * 
 */
sap.ui.model.Type.prototype.getName = function() { return null; };


// ---- sap.ui.model.type.Boolean --------------------------------------------------------------------------

/**
 * Constructor for a Boolean type.
 * 
 * 
 * @class
 * This class represents boolean simple types.
 * 
 * @extends sap.ui.model.SimpleType
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @param {object} [oFormatOptions] formatting options. Boolean doesn't support any specific format options
 * @param {object} [oConstraints] value constraints. Boolean doesn't support additional constraints
 * 
 */
sap.ui.model.type.Boolean = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.Boolean with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.Boolean.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.Boolean.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.type.Boolean.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.type.Currency --------------------------------------------------------------------------

/**
 * Constructor for a Currency type.
 * 
 * 
 * @class
 * This class represents the currency composite type.
 * 
 * @extends sap.ui.model.CompositeType
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @param {object} [oFormatOptions] Formatting options. For a list of all available options, see {@link sap.ui.core.format.NumberFormat#constructor NumberFormat}.
 * @param {object} [oFormatOptions.source] Additional set of format options to be used if the property in the model is not of type <code>string</code> and needs formatting as well.
 * 										   If an empty object is given, the grouping is disabled and a dot is used as decimal separator.
 * @param {object} [oConstraints] Value constraints
 * @param {float} [oConstraints.minimum] Smallest value allowed for this type
 * @param {float} [oConstraints.maximum] Largest value allowed for this type
 * 
 */
sap.ui.model.type.Currency = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.Currency with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.CompositeType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.Currency.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Format the given array containing amount and currency code to an output value of type string.
 * Other internal types than 'string' are not supported by the Currency type.
 * If a source format has been defined for this type, the formatValue does also accept
 * a string value as input, which will be parsed into an array using the source format.
 * If aValues is not defined or null, null will be returned.
 * @param {array|string} vValue the array of values or string value to be formatted
 * @param {string} sInternalType the target type
 * @return {any} the formatted output value
 * 
 * @public
 * 
 */
sap.ui.model.type.Currency.prototype.formatValue = function(vValue,sInternalType) { return null; };

/**
 * Returns a metadata object for class sap.ui.model.type.Currency.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.type.Currency.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Parse a string value to an array containing amount and currency. Parsing of other
 * internal types than 'string' is not supported by the Currency type.
 * In case a source format has been defined, after parsing the currency is formatted
 * using the source format and a string value is returned instead.
 * @param {any} vValue the value to be parsed
 * @param {string} sInternalType the source type
 * @param {array} aCurrentValues the current values of all binding parts
 * @return {array|string} the parse result array
 * 
 * @public
 * 
 */
sap.ui.model.type.Currency.prototype.parseValue = function(vValue,sInternalType,aCurrentValues) { return null; };


// ---- sap.ui.model.type.Date --------------------------------------------------------------------------

/**
 * Constructor for a Date type.
 * 
 * 
 * @class
 * This class represents date simple types.
 * 
 * @extends sap.ui.model.SimpleType
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @param {object} [oFormatOptions] Formatting options. For a list of all available options, see {@link sap.ui.core.format.DateFormat#getDateInstance DateFormat}.
 * @param {object} [oFormatOptions.source] Additional set of options used to create a second <code>DateFormat</code> object for conversions between
 *           string values in the data source (e.g. model) and <code>Date</code>. This second format object is used to convert from a model <code>string</code> to <code>Date</code> before
 *           converting the <code>Date</code> to <code>string</code> with the primary format object. Vice versa, this 'source' format is also used to format an already parsed
 *           external value (e.g. user input) into the string format that is expected by the data source.
 *           For a list of all available options, see {@link sap.ui.core.format.DateFormat#getDateInstance DateFormat}.
 *           In case an empty object is given, the default is the ISO date notation (yyyy-MM-dd).
 * @param {object} [oConstraints] Value constraints
 * @param {Date|string} [oConstraints.minimum] Smallest value allowed for this type. Values for constraints must use the same type as configured via <code>oFormatOptions.source</code>.
 * @param {Date|string} [oConstraints.maximum] Largest value allowed for this type. Values for constraints must use the same type as configured via <code>oFormatOptions.source</code>.
 * 
 */
sap.ui.model.type.Date = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.Date with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.Date.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.Date.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.type.Date.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * @protected
 * 
 */
sap.ui.model.type.Date.prototype.getOutputPattern = function() {  };


// ---- sap.ui.model.type.DateTime --------------------------------------------------------------------------

/**
 * Constructor for a DateTime type.
 * 
 * 
 * @class
 * This class represents datetime simple types.
 * 
 * @extends sap.ui.model.type.Date
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @param {object} [oFormatOptions] Formatting options. For a list of all available options, see {@link sap.ui.core.format.DateFormat#getDateTimeInstance DateFormat}.
 * @param {object} [oFormatOptions.source] Additional set of options used to create a second <code>DateFormat</code> object for conversions between
 *           string values in the data source (e.g. model) and <code>Date</code>. This second format object is used to convert from a model <code>string</code> to <code>Date</code> before
 *           converting the <code>Date</code> to <code>string</code> with the primary format object. Vice versa, this 'source' format is also used to format an already parsed
 *           external value (e.g. user input) into the string format that is expected by the data source.
 *           For a list of all available options, see {@link sap.ui.core.format.DateFormat#getDateTimeInstance DateFormat}.
 * @param {object} [oConstraints] Value constraints. Supports the same kind of constraints as its base type Date, but note the different format options (Date vs. DateTime).
 * 
 */
sap.ui.model.type.DateTime = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.DateTime with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.type.Date.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.DateTime.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.DateTime.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.type.DateTime.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.type.FileSize --------------------------------------------------------------------------

/**
 * Constructor for a FileSize type.
 * 
 * 
 * @class
 * This class represents file size simple types.
 * 
 * @extends sap.ui.model.SimpleType
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @param {object} [oFormatOptions] formatting options. Supports the same options as {@link sap.ui.core.format.FileSizeFormat.getInstance FileSizeFormat.getInstance}
 * @param {object} [oFormatOptions.source] additional set of options used to create a second FileSizeFormat object for conversions between
 *           string values in the data source (e.g. model) and a numeric byte representation. This second format object is used to convert from a model string to numeric bytes before
 *           converting to string with the primary format object. Vice versa, this 'source' format is also used to format an already parsed
 *           external value (e.g. user input) into the string format expected by the data source.
 *           Supports the same set of options as {@link sap.ui.core.format.FileSizeFormat.getInstance FileSizeFormat.getInstance}.
 * @param {object} [oConstraints] value constraints.
 * @param {float} [oConstraints.minimum] smallest value allowed for this type
 * @param {float} [oConstraints.maximum] largest value allowed for this type
 * 
 */
sap.ui.model.type.FileSize = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.FileSize with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.FileSize.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.FileSize.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.type.FileSize.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.type.Float --------------------------------------------------------------------------

/**
 * Constructor for a Float type.
 * 
 * 
 * @class
 * This class represents float simple types.
 * 
 * @extends sap.ui.model.SimpleType
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @param {object} [oFormatOptions] Formatting options. For a list of all available options, see {@link sap.ui.core.format.NumberFormat#constructor NumberFormat}.
 * @param {object} [oFormatOptions.source] Additional set of format options to be used if the property in the model is not of type string and needs formatting as well.
 * 										   If an empty object is given, the grouping is disabled and a dot is used as decimal separator.
 * @param {object} [oConstraints] Value constraints
 * @param {float} [oConstraints.minimum] Smallest value allowed for this type
 * @param {float} [oConstraints.maximum] Largest value allowed for this type
 * 
 */
sap.ui.model.type.Float = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.Float with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.Float.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.Float.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.type.Float.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.type.Integer --------------------------------------------------------------------------

/**
 * Constructor for an Integer type.
 * 
 * 
 * @class
 * This class represents integer simple types.
 * 
 * @extends sap.ui.model.SimpleType
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @param {object} [oFormatOptions] Formatting options. For a list of all available options, see {@link sap.ui.core.format.NumberFormat#constructor NumberFormat}.
 * @param {object} [oFormatOptions.source] Additional set of format options to be used if the property in the model is not of type string and needs formatting as well.
 * 										   If an empty object is given, the grouping is disabled and a dot is used as decimal separator.
 * @param {object} [oConstraints] Value constraints
 * @param {int} [oConstraints.minimum] Smallest value allowed for this type
 * @param {int} [oConstraints.maximum] Largest value allowed for this type
 * 
 */
sap.ui.model.type.Integer = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.Integer with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.Integer.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.Integer.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.type.Integer.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.type.String --------------------------------------------------------------------------

/**
 * Constructor for a String type.
 * 
 * 
 * @class
 * This class represents string simple types.
 * 
 * @extends sap.ui.model.SimpleType
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @param {object} [oFormatOptions] formatting options. String doesn't support any formatting options
 * @param {object} [oConstraints] value constraints. All given constraints must be fulfilled by a value to be valid
 * @param {int} [oConstraints.maxLength] maximum length (in characters) that a string of this value may have
 * @param {int} [oConstraints.minLength] minimum length (in characters) that a string of this value may have
 * @param {string} [oConstraints.startsWith] a prefix that any valid value must start with
 * @param {string} [oConstraints.startsWithIgnoreCase] a prefix that any valid value must start with, ignoring case
 * @param {string} [oConstraints.endsWith] a suffix that any valid value must end with
 * @param {string} [oConstraints.endsWithIgnoreCase] a suffix that any valid value must end with, ignoring case
 * @param {string} [oConstraints.contains] an infix that must be contained in any valid value
 * @param {string} [oConstraints.equals] only value that is allowed
 * @param {RegExp} [oConstraints.search] a regular expression that the value must match
 * 
 */
sap.ui.model.type.String = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.String with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.String.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.String.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.type.String.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.type.Time --------------------------------------------------------------------------

/**
 * Constructor for a Time type.
 * 
 * 
 * @class
 * This class represents time simple types.
 * 
 * @extends sap.ui.model.type.Date
 * @version 1.48.4
 * 
 * @constructor
 * @public
 * @param {object} [oFormatOptions] Formatting options. For a list of all available options, see {@link sap.ui.core.format.DateFormat#getTimeInstance DateFormat}.
 * @param {object} [oFormatOptions.source] Additional set of options used to create a second <code>DateFormat</code> object for conversions between
 *           string values in the data source (e.g. model) and <code>Date</code>. This second format object is used to convert from a model <code>string</code> to <code>Date</code> before
 *           converting the <code>Date</code> to <code>string</code> with the primary format object. Vice versa, this 'source' format is also used to format an already parsed
 *           external value (e.g. user input) into the string format that is expected by the data source.
 *           For a list of all available options, see {@link sap.ui.core.format.DateFormat#getTimeInstance DateFormat}.
 *           In case an empty object is given, the default is the ISO date notation (yyyy-MM-dd).
 * @param {object} [oConstraints] Value constraints. Supports the same kind of constraints as its base type Date, but note the different format options (Date vs. Time).
 * 
 */
sap.ui.model.type.Time = function(oFormatOptions,oConstraints) {};
/**
 * Creates a new subclass of class sap.ui.model.type.Time with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.type.Date.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.type.Time.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.type.Time.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.type.Time.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.model.xml --------------------------------------------------------------------------


// ---- sap.ui.model.xml.XMLModel --------------------------------------------------------------------------

/**
 * Constructor for a new XMLModel.
 * 
 * 
 * @class
 * Model implementation for XML format
 * 
 * @extends sap.ui.model.ClientModel
 * @version 1.48.4
 * 
 * @param {object} oData either the URL where to load the XML from or an XML
 * @constructor
 * @public
 * 
 */
sap.ui.model.xml.XMLModel = function(oData) {};
/**
 * Creates a new subclass of class sap.ui.model.xml.XMLModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.model.xml.XMLModel.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.model.xml.XMLModel.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.model.xml.XMLModel.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the object for the given <code>path</code>
 * 
 * @param {string} sPath the path to the object
 * @param {object} [oContext=null] the context which will be used to retrieve the object
 * @type any
 * @return the object
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.getObject = function(sPath,oContext) { return null; };

/**
 * Returns the value for the property with the given <code>sPropertyName</code>
 * 
 * @param {string} sPath the path to the property
 * @param {object} [oContext=null] the context which will be used to retrieve the property
 * @type any
 * @return the value of the property
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.getProperty = function(sPath,oContext) { return null; };

/**
 * Serializes the current XML data of the model into a string.
 * 
 * @return the XML document serialized as string
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.getXML = function() {  };

/**
 * Load XML-encoded data from the server using a GET HTTP request and store the resulting XML data in the model.
 * Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin policy,
 * the request can not successfully retrieve data from a different domain, subdomain, or protocol.
 * 
 * @param {string} sURL A string containing the URL to which the request is sent.
 * @param {object | string}[oParameters] A map or string that is sent to the server with the request.
 * @param {boolean} [bAsync=true] if the request should be asynchron or not. Default is true.
 * @param {string} [sType=GET] of request. Default is 'GET'
 * @param {string} [bCache=false] force no caching if false. Default is false
 * @param {object} mHeaders An object of additional header key/value pairs to send along with the request
 * 
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.loadData = function(sURL,oParameters,bAsync,sType,bCache,mHeaders) {  };

/**
 * Sets the provided XML encoded data object to the model
 * 
 * @param {object} oData the data to set to the model
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.setData = function(oData) {  };

/**
 * Sets an XML namespace to use in the binding path
 * 
 * @param {string} sNameSpace the namespace URI
 * @param {string} [sPrefix=null] the prefix for the namespace (optional)
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.setNameSpace = function(sNameSpace,sPrefix) {  };

/**
 * Sets a new value for the given property <code>sPropertyName</code> in the model.
 * If the model value changed all interested parties are informed.
 * 
 * @param {string}  sPath path of the property to set
 * @param {any}     oValue value to set the property to
 * @param {object} [oContext=null] the context which will be used to set the property
 * @param {boolean} [bAsyncUpdate] whether to update other bindings dependent on this property asynchronously
 * @return {boolean} true if the value was set correctly and false if errors occurred like the entry was not found.
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.setProperty = function(sPath,oValue,oContext,bAsyncUpdate) { return false; };

/**
 * Sets the specified XML formatted string text to the model
 * 
 * @param {string} sXMLText the XML data as string
 * @public
 * 
 */
sap.ui.model.xml.XMLModel.prototype.setXML = function(sXMLText) {  };


// ---- sap.ui.model.xml.XMLTreeBinding --------------------------------------------------------------------------

/**
 * 
 * @class
 * Tree binding implementation for XML format
 * 
 * @param {sap.ui.model.xml.XMLModel} [oModel]
 * @param {string} Path pointing to the tree or array that should be bound
 * @param {object} [oContext=null] Context object for this binding
 * @param {array} [aFilters=null] Predefined filters contained in an array
 * @param {object} [mParameters=null] Additional model-specific parameters
 * @protected
 * @extends sap.ui.model.ClientTreeBinding
 * 
 */
sap.ui.model.xml.XMLTreeBinding = function(oModel,Path,oContext,aFilters,mParameters) {};
/**
 * Return node contexts for the tree
 * @param {object} oContext to use for retrieving the node contexts
 * @param {int} iStartIndex the startIndex where to start the retrieval of contexts
 * @param {int} iLength determines how many contexts to retrieve beginning from the start index.
 * @return {Array} the contexts array
 * @protected
 * 
 */
sap.ui.model.xml.XMLTreeBinding.prototype.getNodeContexts = function(oContext,iStartIndex,iLength) { return null; };


// ---- sap.ui.test.actions.Action --------------------------------------------------------------------------

/**
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIdSuffix idSuffix} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}
 * can be used as well.
 * @ui5-updated-doclet
 * 
 * @class Actions for Opa5 - needs to implement an executeOn function that should simulate a user interaction on a control
 * @abstract
 * @extends sap.ui.base.ManagedObject
 * @public
 * @since 1.34
 * 
 */
sap.ui.test.actions.Action = function() {};
/**
 * Checks if the matcher is matching - will get an instance of sap.ui.core.Control as parameter
 * Should be overwritten by subclasses
 * 
 * @param {sap.ui.core.Control} element the {@link sap.ui.core.Element} or a control (extends element) the action will be executed on
 * @protected
 * 
 */
sap.ui.test.actions.Action.prototype.executeOn = function(element) {  };

/**
 * Creates a new subclass of class sap.ui.test.actions.Action with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.actions.Action.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getIdSuffix idSuffix}.
 * 
 * @returns {string} Value of property <code>idSuffix</code>
 * @since 1.38
 * Use this only if the target property or the default of the action does not work for your control.
 * The id suffix of the DOM Element the press action will be executed on.
 * For most of the controls you do not have to specify this, since the Control Adapters will find the correct DOM Element.
 * But some controls have multiple DOM elements that could be target of your Action.
 * Then you should set this property.
 * For a detailed documentation of the suffix see {@link sap.ui.core.Element#$}
 * 
 * @public
 * 
 */
sap.ui.test.actions.Action.prototype.getIdSuffix = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.test.actions.Action.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.actions.Action.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Sets a new value for property {@link #getIdSuffix idSuffix}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sIdSuffix New value for property <code>idSuffix</code>
 * @returns {sap.ui.test.actions.Action} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38
 * Use this only if the target property or the default of the action does not work for your control.
 * The id suffix of the DOM Element the press action will be executed on.
 * For most of the controls you do not have to specify this, since the Control Adapters will find the correct DOM Element.
 * But some controls have multiple DOM elements that could be target of your Action.
 * Then you should set this property.
 * For a detailed documentation of the suffix see {@link sap.ui.core.Element#$}
 * 
 * @public
 * 
 */
sap.ui.test.actions.Action.prototype.setIdSuffix = function(sIdSuffix) { return new sap.ui.test.actions.Action(); };


// ---- sap.ui.test.actions.EnterText --------------------------------------------------------------------------

/**
 * The EnterText action is used to simulate a user entering texts to inputs.
 * EnterText will be executed on a control's focus dom ref.
 * Supported controls are (for other controls this action still might work):
 * <ul>
 *     <li>sap.m.Input</li>
 *     <li>sap.m.SearchField</li>
 *     <li>sap.m.TextArea</li>
 * </ul>
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getClearTextFirst clearTextFirst} : boolean (default: true)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.test.actions.Action#constructor sap.ui.test.actions.Action}
 * can be used as well.
 * @ui5-updated-doclet
 * 
 * @class
 * @extends sap.ui.test.actions.Action
 * @public
 * @since 1.34
 * 
 */
sap.ui.test.actions.EnterText = function() {};
/**
 * Sets focus on given control and triggers Multiple keyboard events on it, one event for every character in the text.
 * Logs an error if control has no focusable dom ref or is not visible.
 * 
 * @param {sap.ui.core.Control} oControl the control on which the text event should be entered in.
 * @public
 * 
 */
sap.ui.test.actions.EnterText.prototype.executeOn = function(oControl) {  };

/**
 * Creates a new subclass of class sap.ui.test.actions.EnterText with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.actions.EnterText.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getClearTextFirst clearTextFirst}.
 * 
 * Default value is <code>true</code>.
 * @returns {boolean} Value of property <code>clearTextFirst</code>
 * @since 1.38.0 If it is set to false, the current text of the Control will be preserved. By default the current text of the control will be cleared.
 * When the text is going to be cleared, a delete character event will be fired and then the value of the input is emptied.
 * This will trigger a liveChange event on the input with an empty value.
 * 
 * @public
 * 
 */
sap.ui.test.actions.EnterText.prototype.getClearTextFirst = function() { return false; };

/**
 * Returns a metadata object for class sap.ui.test.actions.EnterText.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.actions.EnterText.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * The Text that is going to be typed to the control. If you are entering an empty string, the value will be cleared.
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.ui.test.actions.EnterText.prototype.getText = function() { return ""; };

/**
 * Sets a new value for property {@link #getClearTextFirst clearTextFirst}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>true</code>.
 * @param {boolean} bClearTextFirst New value for property <code>clearTextFirst</code>
 * @returns {sap.ui.test.actions.EnterText} Reference to <code>this</code> in order to allow method chaining
 * @since 1.38.0 If it is set to false, the current text of the Control will be preserved. By default the current text of the control will be cleared.
 * When the text is going to be cleared, a delete character event will be fired and then the value of the input is emptied.
 * This will trigger a liveChange event on the input with an empty value.
 * 
 * @public
 * 
 */
sap.ui.test.actions.EnterText.prototype.setClearTextFirst = function(bClearTextFirst) { return new sap.ui.test.actions.EnterText(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * The Text that is going to be typed to the control. If you are entering an empty string, the value will be cleared.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.ui.test.actions.EnterText} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.actions.EnterText.prototype.setText = function(sText) { return new sap.ui.test.actions.EnterText(); };


// ---- sap.ui.test.actions.Press --------------------------------------------------------------------------

/**
 * The Press action is used to simulate a press interaction on a Control's dom ref.
 * This will work out of the box for most of the controls (even custom controls).
 * 
 * Here is a List of supported controls (some controls will trigger the press on a specific region):
 * 
 * <ul>
 *     <li>sap.m.Button</li>
 *     <li>sap.m.Link</li>
 *     <li>sap.m.StandardListItem</li>
 *     <li>sap.m.IconTabFilter</li>
 *     <li>sap.m.Input - Value help</li>
 *     <li>sap.m.SearchField - Search Button</li>
 *     <li>sap.m.Page - Back Button</li>
 *     <li>sap.m.semantic.FullscreenPage - Back Button</li>
 *     <li>sap.m.semantic.DetailPage - Back Button</li>
 *     <li>sap.m.List - More Button</li>
 *     <li>sap.m.Table - More Button</li>
 *     <li>sap.m.StandardTile</li>
 *     <li>sap.m.ComboBox</li>
 *     <li>sap.m.ObjectIdentifier</li>
 *     <li>sap.ui.comp.smartfilterbar.SmartFilterBar - Go Button</li>
 * </ul>
 * 
 * 
 * @class
 * @extends sap.ui.test.actions.Action
 * @public
 * @since 1.34
 * 
 */
sap.ui.test.actions.Press = function() {};
/**
 * Sets focus on given control and triggers a 'tap' event on it (which is
 * internally translated into a 'press' event).
 * Logs an error if control is not visible (i.e. has no dom representation)
 * 
 * @param {sap.ui.core.Control} oControl the control on which the 'press' event is triggered
 * @public
 * 
 */
sap.ui.test.actions.Press.prototype.executeOn = function(oControl) {  };

/**
 * Creates a new subclass of class sap.ui.test.actions.Press with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.actions.Press.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.test.actions.Press.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.actions.Press.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.test.gherkin.dataTableUtils --------------------------------------------------------------------------

/**
 * Takes the inputed 2D array "aData" and returns an equivalent object. Each row of data is expected to
 * be a property-value pair. To create nested objects, add extra columns to the data. E.g.
 * <pre>
 *  [
 *    ["Name", "Alice"],
 *    ["Mass", "135 lbs"],
 *    ["Telephone Number", "Home", "123-456-7890"],
 *    ["Telephone Number", "Work", "123-456-0987"]
 *  ]
 * </pre>
 * For each data row, the right-most element becomes a property value, and everything else is a property
 * name. The property names get normalized according to the strategy defined by the parameter "vNorm".
 * E.g. using camelCase strategy
 * <pre>
 *   {
 *     name: "Alice",
 *     mass: "135 lbs",
 *     telephoneNumber: {
 *       home: "123-456-7890",
 *       work: "123-456-0987"
 *     }
 *   }
 * </pre>
 * @param {string[]} aData - the 2D array of strings to be converted
 * @param {(string|function)} [vNorm="none"] - the normalization function to use to normalize property
 *                                             names. Can also be a string with values "titleCase", "pascalCase",
 *                                             "camelCase", "hyphenated" or "none".
 * @returns {object} - an object equivalent to the input data, with property names normalized
 * @throws {Error} if the inputed array aData contains duplicate keys such that a row would be overwritten
 * @public
 * @static
 * 
 * @memberof sap.ui.test.gherkin.dataTableUtils
 */
sap.ui.test.gherkin.dataTableUtils.toObject = function(aData,vNorm) { return new Object(); };

/**
 * Takes the inputed 2D array "aData" and returns an equivalent array of objects. The data is expected to
 * have a header row, with each subsequent row being an entity, and each column being a property of that
 * entity. E.g.
 * <pre>
 *   [
 *     ["Their Name",  "Their Age"],
 *     ["Alice",       "16"],
 *     ["Bob",         "22"]
 *   ]
 * </pre>
 * 
 * The data's column headers become the returned objects' property names. The property names get normalized
 * according to the strategy defined by the parameter "vNorm". E.g. using hyphenation strategy this is returned:
 * <pre>
 *   [
 *     {their-name: "Alice", their-age: "16"},
 *     {their-name: "Bob", their-age: "22"}
 *   ]
 * </pre>
 * 
 * @param {string[]} aData - the 2D array of strings to be converted, with a header row
 * @param {(string|function)} [vNorm="none"] - the normalization function to use to normalize property
 *                                             names. Can also be a String with values "titleCase", "pascalCase",
 *                                             "camelCase", "hyphenated" or "none".
 * @returns {object[]} - an array of objects equivalent to the input data, with property names normalized
 * @throws {Error} if the inputed array aData contains duplicate values in the header row
 * @public
 * @static
 * 
 * @memberof sap.ui.test.gherkin.dataTableUtils
 */
sap.ui.test.gherkin.dataTableUtils.toTable = function(aData,vNorm) { return new Array(); };


// ---- sap.ui.test.gherkin.dataTableUtils.normalization --------------------------------------------------------------------------

/**
 * For example: "First Name" -> "firstName"
 * 
 * @param {string} sString - the string to normalize
 * @returns {string} the normalized input string with all words after the first capitalized and all spaces
 *                   removed
 * @public
 * @static
 * 
 * @memberof sap.ui.test.gherkin.dataTableUtils.normalization
 */
sap.ui.test.gherkin.dataTableUtils.normalization.camelCase = function(sString) { return ""; };

/**
 * For example: "First Name" -> "first-name"
 * 
 * @param {string} sString - the string to normalize
 * @returns {string} the normalized input string changed to lower case and with space between words
 *                   replaced by a hyphen ("-")
 * @public
 * @static
 * 
 * @memberof sap.ui.test.gherkin.dataTableUtils.normalization
 */
sap.ui.test.gherkin.dataTableUtils.normalization.hyphenated = function(sString) { return ""; };

/**
 * For example: "First Name" -> "First Name"
 * 
 * @param {string} sString - the string to normalize
 * @returns {string} the original unchanged input string
 * @public
 * @static
 * 
 * @memberof sap.ui.test.gherkin.dataTableUtils.normalization
 */
sap.ui.test.gherkin.dataTableUtils.normalization.none = function(sString) { return ""; };

/**
 * For example: "first name" -> "FirstName"
 * 
 * @param {string} sString - the string to normalize
 * @returns {string} the normalized input string with all words capitalized and all spaces removed
 * @public
 * @static
 * 
 * @memberof sap.ui.test.gherkin.dataTableUtils.normalization
 */
sap.ui.test.gherkin.dataTableUtils.normalization.pascalCase = function(sString) { return ""; };

/**
 * For example: "first name" -> "First Name"
 * 
 * @param {string} sString - the string to normalize
 * @returns {string} the normalized input string with all words capitalized
 * @public
 * @static
 * 
 * @memberof sap.ui.test.gherkin.dataTableUtils.normalization
 */
sap.ui.test.gherkin.dataTableUtils.normalization.titleCase = function(sString) { return ""; };


// ---- sap.ui.test.gherkin.opa5TestHarness --------------------------------------------------------------------------

/**
 * Dynamically generates Opa5 tests
 * 
 * If a test step is missing and args.generateMissingSteps is true then the  Gherkin step will be converted into Opa
 * Page Object code and executed. The text will be converted to camelCase and have any non-alphanumeric character
 * removed. Here are two pertinent examples:
 * 
 * (1) The simple step "Given I start my app" will be converted into the call "Given.iStartMyApp();"
 * 
 * (2) The step "Then on page 1: I should see the page 1 text" will become the call
 *     "Then.onPage1.iShouldSeeThePage1Text();"
 * 
 * Chaining function calls, such as "Then.iStartMyApp().and.iCloseMyApp()" is not possible at this time.
 * 
 * @param {object} args - the arguments to the function
 * @param {string} args.featurePath - the path to the Gherkin feature file to parse, as an SAPUI5 module path. The
 *                                    ".feature" extension is assumed and should not be included. See
 *                                    {@link jQuery.sap.registerModulePath}
 * @param {function} [args.steps] - the constructor function of type {@link sap.ui.test.gherkin.StepDefinitions}.
 *                                  If this parameter is ommitted then args.generateMissingSteps must be explicitly
 *                                  set to true.
 * @param {boolean} [args.generateMissingSteps=false] - When true: if a Gherkin step cannot be matched to a step
 *                                                      definition then it will be assumed that the user wants to
 *                                                      convert the step into an Opa Page Object call.
 * @public
 * @throws {Error} if any parameters are invalid
 * @static
 * 
 * @memberof sap.ui.test.gherkin.opa5TestHarness
 */
sap.ui.test.gherkin.opa5TestHarness.test = function(args) {  };


// ---- sap.ui.test.gherkin.qUnitTestHarness --------------------------------------------------------------------------

/**
 * Dynamically generates and executes QUnit tests
 * 
 * @param {object} args - the arguments to the function
 * @param {string} args.featurePath - the path to the Gherkin feature file to parse, as an SAPUI5 module path. The
 *                                    ".feature" extension is assumed and should not be included. See
 *                                    {@link jQuery.sap.registerModulePath}
 * @param {function} args.steps - the constructor function of type {@link sap.ui.test.gherkin.StepDefinitions}
 * @public
 * @throws {Error} if any parameters are invalid
 * @static
 * 
 * @memberof sap.ui.test.gherkin.qUnitTestHarness
 */
sap.ui.test.gherkin.qUnitTestHarness.test = function(args) {  };


// ---- sap.ui.test.gherkin.StepDefinitions --------------------------------------------------------------------------

/**
 * A Gherkin feature file is human-readable, and the computer does not know how to execute its steps. This
 * StepDefinitions class provides the interface between human and machine. It defines what each step in the Gherkin
 * feature file will actually do when it is executed.
 * 
 * Meant to be implemented/overridden by a child object. Specifically, the functions "init" and "closeApplication"
 * need to be overridden.
 * 
 * 
 * @abstract
 * @class
 * @extends sap.ui.base.Object
 * @since 1.40
 * @public
 * 
 */
sap.ui.test.gherkin.StepDefinitions = function() {};
/**
 * Closes the application and cleans up any mess made by the tests. To avoid erroneous exceptions during test
 * execution, make sure that it is safe to run this method even if the application was never started.
 * 
 * @abstract
 * @public
 * @static
 * 
 */
sap.ui.test.gherkin.StepDefinitions.prototype.closeApplication = function() {  };

/**
 * Creates a new subclass of class sap.ui.test.gherkin.StepDefinitions with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.gherkin.StepDefinitions.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.test.gherkin.StepDefinitions.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.gherkin.StepDefinitions.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Registers the step definitions by calling the method "register".
 * 
 * @see #register
 * @abstract
 * @public
 * @static
 * 
 */
sap.ui.test.gherkin.StepDefinitions.prototype.init = function() {  };

/**
 * Registers a step definition.
 * 
 * @param {RegExp} rRegex - the regular expression that matches the feature file step (with leading "Given", "When",
 *                          "Then", "But" or "*" removed). E.g. if the feature file has the step
 *                          "Then I should be served a coffee" it will be truncated to "I should be served a coffee"
 *                          and tested against "rRegex" to check for a match. The simple regular expression
 *                          /^I should be served a coffee$/i would match this text. The regular
 *                          expression can specify capturing groups, which will be passed as parameters to "fnFunc".
 * @param {function} fnFunc - the function to execute in the event that the regular expression matches. Receives
 *                            regular expression capturing groups as parameters in the same order that they are
 *                            specified in the regular expression. If a data table is specified for the step, it
 *                            will be passed as an additional final parameter. At execution time, all functions
 *                            within a particular scenario will execute within the same "this" context.
 * @throws {Error} if any parameters are invalid, or if method is called twice with the same value for 'rRegex'
 * @public
 * @static
 * 
 */
sap.ui.test.gherkin.StepDefinitions.prototype.register = function(rRegex,fnFunc) {  };


// ---- sap.ui.test.matchers.AggregationContainsPropertyEqual --------------------------------------------------------------------------

/**
 * AggregationContainsPropertyEqual - checks if an aggregation contains at least one item that has a Property set to a certain value.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAggregationName aggregationName} : string</li>
 * <li>{@link #getPropertyName propertyName} : string</li>
 * <li>{@link #getPropertyValue propertyValue} : any</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}
 * can be used as well.
 * @ui5-updated-doclet
 * 
 * @class AggregationContainsPropertyEqual - checks if an aggregation contains at least one item that has a Property set to a certain value
 * @extends sap.ui.test.matchers.Matcher
 * @param {object} [mSettings] optional map/JSON-object with initial settings for the new AggregationContainsPropertyEqualMatcher
 * @public
 * @since 1.23
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual = function(mSettings) {};
/**
 * Creates a new subclass of class sap.ui.test.matchers.AggregationContainsPropertyEqual with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getAggregationName aggregationName}.
 * 
 * The Name of the aggregation that is used for matching.
 * 
 * @returns {string} Value of property <code>aggregationName</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.prototype.getAggregationName = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.test.matchers.AggregationContainsPropertyEqual.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getPropertyName propertyName}.
 * 
 * The Name of the property that is used for matching.
 * 
 * @returns {string} Value of property <code>propertyName</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.prototype.getPropertyName = function() { return ""; };

/**
 * Gets current value of property {@link #getPropertyValue propertyValue}.
 * 
 * The value of the Property that is used for matching.
 * 
 * @returns {any} Value of property <code>propertyValue</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.prototype.getPropertyValue = function() { return null; };

/**
 * Checks if the control has a filled aggregation with at least one control that have a property equaling propertyName/Value.
 * 
 * @param {sap.ui.core.Control} oControl the control that is checked by the matcher
 * @return {boolean} true if the Aggregation set in the property aggregationName is filled, false if it is not.
 * @public
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.prototype.isMatching = function(oControl) { return false; };

/**
 * Sets a new value for property {@link #getAggregationName aggregationName}.
 * 
 * The Name of the aggregation that is used for matching.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sAggregationName New value for property <code>aggregationName</code>
 * @returns {sap.ui.test.matchers.AggregationContainsPropertyEqual} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.prototype.setAggregationName = function(sAggregationName) { return new sap.ui.test.matchers.AggregationContainsPropertyEqual(); };

/**
 * Sets a new value for property {@link #getPropertyName propertyName}.
 * 
 * The Name of the property that is used for matching.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sPropertyName New value for property <code>propertyName</code>
 * @returns {sap.ui.test.matchers.AggregationContainsPropertyEqual} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.prototype.setPropertyName = function(sPropertyName) { return new sap.ui.test.matchers.AggregationContainsPropertyEqual(); };

/**
 * Sets a new value for property {@link #getPropertyValue propertyValue}.
 * 
 * The value of the Property that is used for matching.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oPropertyValue New value for property <code>propertyValue</code>
 * @returns {sap.ui.test.matchers.AggregationContainsPropertyEqual} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.AggregationContainsPropertyEqual.prototype.setPropertyValue = function(oPropertyValue) { return new sap.ui.test.matchers.AggregationContainsPropertyEqual(); };


// ---- sap.ui.test.matchers.AggregationEmpty --------------------------------------------------------------------------

/**
 * AggregationEmpty - checks if an aggregation is empty.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}
 * can be used as well.
 * @ui5-updated-doclet
 * 
 * @class AggregationEmpty - checks if an aggregation is empty
 * @param {object} [mSettings] optional map/JSON-object with initial settings for the new AggregationEmptyMatcher
 * @extends sap.ui.test.matchers.Matcher
 * @public
 * 
 */
sap.ui.test.matchers.AggregationEmpty = function(mSettings) {};
/**
 * Creates a new subclass of class sap.ui.test.matchers.AggregationEmpty with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.AggregationEmpty.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.test.matchers.AggregationEmpty.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.AggregationEmpty.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * The name of the aggregation that is used for matching.
 * 
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.AggregationEmpty.prototype.getName = function() { return ""; };

/**
 * Checks if the control has an empty aggregation.
 * 
 * @param {sap.ui.core.Control} oControl the control that is checked by the matcher
 * @return {boolean} true if the Aggregation set in the property aggregationName is empty, false if it is not.
 * @public
 * 
 */
sap.ui.test.matchers.AggregationEmpty.prototype.isMatching = function(oControl) { return false; };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * The name of the aggregation that is used for matching.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.ui.test.matchers.AggregationEmpty} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.AggregationEmpty.prototype.setName = function(sName) { return new sap.ui.test.matchers.AggregationEmpty(); };


// ---- sap.ui.test.matchers.AggregationFilled --------------------------------------------------------------------------

/**
 * AggregationFilled - checks if an aggregation contains at least one entry.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}
 * can be used as well.
 * @ui5-updated-doclet
 * 
 * @class AggregationFilled - checks if an aggregation contains at least one entry
 * @param {object} [mSettings] optional map/JSON-object with initial settings for the new AggregationFilledMatcher
 * @extends sap.ui.test.matchers.Matcher
 * @public
 * @since 1.23
 * 
 */
sap.ui.test.matchers.AggregationFilled = function(mSettings) {};
/**
 * Creates a new subclass of class sap.ui.test.matchers.AggregationFilled with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.AggregationFilled.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.test.matchers.AggregationFilled.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.AggregationFilled.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * The name of the aggregation that is used for matching.
 * 
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.AggregationFilled.prototype.getName = function() { return ""; };

/**
 * Checks if the control has a filled aggregation.
 * 
 * @param {sap.ui.core.Control} oControl the control that is checked by the matcher
 * @return {boolean} true if the Aggregation set in the property aggregationName is filled, false if it is not.
 * @public
 * 
 */
sap.ui.test.matchers.AggregationFilled.prototype.isMatching = function(oControl) { return false; };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * The name of the aggregation that is used for matching.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.ui.test.matchers.AggregationFilled} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.AggregationFilled.prototype.setName = function(sName) { return new sap.ui.test.matchers.AggregationFilled(); };


// ---- sap.ui.test.matchers.AggregationLengthEquals --------------------------------------------------------------------------

/**
 * AggregationLengthEquals - checks if an aggregation contains at least one entry.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getLength length} : int</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}
 * can be used as well.
 * @ui5-updated-doclet
 * 
 * @class AggregationLengthEquals - checks if an aggregation contains at least one entry
 * @param {object} [mSettings] optional map/JSON-object with initial settings for the new AggregationLengthEqualsMatcher
 * @extends sap.ui.test.matchers.Matcher
 * @public
 * @since 1.23
 * 
 */
sap.ui.test.matchers.AggregationLengthEquals = function(mSettings) {};
/**
 * Creates a new subclass of class sap.ui.test.matchers.AggregationLengthEquals with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.AggregationLengthEquals.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getLength length}.
 * 
 * The length that aggregation <code>name</code> should have.
 * 
 * @returns {int} Value of property <code>length</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.AggregationLengthEquals.prototype.getLength = function() { return 0; };

/**
 * Returns a metadata object for class sap.ui.test.matchers.AggregationLengthEquals.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.AggregationLengthEquals.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * The name of the aggregation that is used for matching.
 * 
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.AggregationLengthEquals.prototype.getName = function() { return ""; };

/**
 * Checks if the control's aggregation <code>name</code> has length <code>length</code>.
 * 
 * @param {sap.ui.core.Control} oControl the control that is checked by the matcher
 * @return {boolean} true if the length of aggregation <code>name</code> is the same as <code>length</code>, false if it is not.
 * @public
 * 
 */
sap.ui.test.matchers.AggregationLengthEquals.prototype.isMatching = function(oControl) { return false; };

/**
 * Sets a new value for property {@link #getLength length}.
 * 
 * The length that aggregation <code>name</code> should have.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {int} iLength New value for property <code>length</code>
 * @returns {sap.ui.test.matchers.AggregationLengthEquals} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.AggregationLengthEquals.prototype.setLength = function(iLength) { return new sap.ui.test.matchers.AggregationLengthEquals(); };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * The name of the aggregation that is used for matching.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.ui.test.matchers.AggregationLengthEquals} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.AggregationLengthEquals.prototype.setName = function(sName) { return new sap.ui.test.matchers.AggregationLengthEquals(); };


// ---- sap.ui.test.matchers.Ancestor --------------------------------------------------------------------------

/**
 * @class Ancestor - checks if a control has a defined ancestor
 * @param {object} oAncestorControl the ancestor control to check, if undefined, validates every control to true
 * @param {boolean} [bDirect] specifies if the ancestor should be a direct ancestor (parent)
 * @public
 * @since 1.27
 * 
 */
sap.ui.test.matchers.Ancestor = function(oAncestorControl,bDirect) {};

// ---- sap.ui.test.matchers.BindingPath --------------------------------------------------------------------------

/**
 * BindingPath - checks if a control has a binding context with the exact same binding path.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPath path} : string</li>
 * <li>{@link #getModelName modelName} : string</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}
 * can be used as well.
 * @ui5-updated-doclet
 * 
 * @class BindingPath - checks if a control has a binding context with the exact same binding path
 * @extends sap.ui.test.matchers.Matcher
 * @param {object} [mSettings] Map/JSON-object with initial settings for the new BindingPath.
 * @public
 * @since 1.32
 * 
 */
sap.ui.test.matchers.BindingPath = function(mSettings) {};
/**
 * Creates a new subclass of class sap.ui.test.matchers.BindingPath with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.BindingPath.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.test.matchers.BindingPath.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.BindingPath.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getModelName modelName}.
 * 
 * The name of the binding model that is used for matching.
 * 
 * @returns {string} Value of property <code>modelName</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.BindingPath.prototype.getModelName = function() { return ""; };

/**
 * Gets current value of property {@link #getPath path}.
 * 
 * The value of the binding path that is used for matching.
 * 
 * @returns {string} Value of property <code>path</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.BindingPath.prototype.getPath = function() { return ""; };

/**
 * Checks if the control has a binding context that matches the path
 * 
 * @param {sap.ui.core.Control} oControl the control that is checked by the matcher
 * @return {boolean} true if the binding path has a strictly matching value.
 * @public
 * 
 */
sap.ui.test.matchers.BindingPath.prototype.isMatching = function(oControl) { return false; };

/**
 * Sets a new value for property {@link #getModelName modelName}.
 * 
 * The name of the binding model that is used for matching.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sModelName New value for property <code>modelName</code>
 * @returns {sap.ui.test.matchers.BindingPath} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.BindingPath.prototype.setModelName = function(sModelName) { return new sap.ui.test.matchers.BindingPath(); };

/**
 * Sets a new value for property {@link #getPath path}.
 * 
 * The value of the binding path that is used for matching.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sPath New value for property <code>path</code>
 * @returns {sap.ui.test.matchers.BindingPath} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.BindingPath.prototype.setPath = function(sPath) { return new sap.ui.test.matchers.BindingPath(); };


// ---- sap.ui.test.matchers.I18NText --------------------------------------------------------------------------

/**
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPropertyName propertyName} : string</li>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getParameters parameters} : any</li>
 * <li>{@link #getModelName modelName} : string (default: i18n)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}
 * can be used as well.
 * @ui5-updated-doclet
 * 
 * @class
 * The I18NText matcher checks if a control property has the same value as a text from an I18N file.
 * The matcher does automatically
 * <ul>
 *     <li>
 *         retrieve the text from the assigned 'i18n' model (name can be changed)
 *     </li>
 *     <li>
 *         check that the I18N key does actually exist in the file
 *     </li>
 *     <li>
 *         check if asynchronously loaded I18N have actually been loaded
 *     </li>
 * </ul>
 * 
 * @extends sap.ui.test.matchers.Matcher
 * @param {object} [mSettings] optional map/JSON-object with initial settings for the new I18NText
 * @public
 * @since 1.42
 * 
 */
sap.ui.test.matchers.I18NText = function(mSettings) {};
/**
 * Creates a new subclass of class sap.ui.test.matchers.I18NText with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.I18NText.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * The key of the I18N text in the containing {@link jQuery.sap.util.ResourceBundle}.
 * 
 * @returns {string} Value of property <code>key</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.I18NText.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.test.matchers.I18NText.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.I18NText.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getModelName modelName}.
 * 
 * The name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.
 * 
 * Default value is <code>i18n</code>.
 * @returns {string} Value of property <code>modelName</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.I18NText.prototype.getModelName = function() { return ""; };

/**
 * Gets current value of property {@link #getParameters parameters}.
 * 
 * The parameters for replacing the placeholders of the I18N text. See {@link jQuery.sap.util.ResourceBundle#getText}.
 * 
 * @returns {any} Value of property <code>parameters</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.I18NText.prototype.getParameters = function() { return null; };

/**
 * Gets current value of property {@link #getPropertyName propertyName}.
 * 
 * The name of the control property to match the I18N text with.
 * 
 * @returns {string} Value of property <code>propertyName</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.I18NText.prototype.getPropertyName = function() { return ""; };

/**
 * Checks if the control has a property that matches the I18N text
 * 
 * @param {sap.ui.core.Control} oControl the control that is checked by the matcher
 * @return {boolean} true if the property has a strictly matching value.
 * @public
 * 
 */
sap.ui.test.matchers.I18NText.prototype.isMatching = function(oControl) { return false; };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * The key of the I18N text in the containing {@link jQuery.sap.util.ResourceBundle}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.ui.test.matchers.I18NText} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.I18NText.prototype.setKey = function(sKey) { return new sap.ui.test.matchers.I18NText(); };

/**
 * Sets a new value for property {@link #getModelName modelName}.
 * 
 * The name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>i18n</code>.
 * @param {string} sModelName New value for property <code>modelName</code>
 * @returns {sap.ui.test.matchers.I18NText} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.I18NText.prototype.setModelName = function(sModelName) { return new sap.ui.test.matchers.I18NText(); };

/**
 * Sets a new value for property {@link #getParameters parameters}.
 * 
 * The parameters for replacing the placeholders of the I18N text. See {@link jQuery.sap.util.ResourceBundle#getText}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oParameters New value for property <code>parameters</code>
 * @returns {sap.ui.test.matchers.I18NText} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.I18NText.prototype.setParameters = function(oParameters) { return new sap.ui.test.matchers.I18NText(); };

/**
 * Sets a new value for property {@link #getPropertyName propertyName}.
 * 
 * The name of the control property to match the I18N text with.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sPropertyName New value for property <code>propertyName</code>
 * @returns {sap.ui.test.matchers.I18NText} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.I18NText.prototype.setPropertyName = function(sPropertyName) { return new sap.ui.test.matchers.I18NText(); };


// ---- sap.ui.test.matchers.Interactable --------------------------------------------------------------------------

/**
 * @ui5-updated-doclet
 * 
 * @class
 * Interactable - check if a control is currently able to take user interactions.
 * OPA5 will automatically apply this matcher if you specify actions in {@link sap.ui.test.Opa5#waitFor}.
 * A control will be filtered out by this matcher when:
 * <ul>
 *     <li>
 *         There are unfinished XMLHttpRequests (globally).
 *         That means, the Opa can wait for pending requests to finish that would probably update the UI.
 *         Also detects sinon.FakeXMLHttpRequests that are not responded yet.
 *     </li>
 *     <li>
 *         The control is invisible (using the visible matcher)
 *     </li>
 *     <li>
 *         The control is hidden behind a dialog
 *     </li>
 *     <li>
 *         The control is in a navigating nav container
 *     </li>
 *     <li>
 *         The control or its parents are busy
 *     </li>
 *     <li>
 *         The control or its parents are not enabled
 *     </li>
 *     <li>
 *         The UIArea of the control needs new rendering
 *     </li>
 * </ul>
 * @public
 * @extends sap.ui.test.matchers.Matcher
 * @since 1.34
 * 
 */
sap.ui.test.matchers.Interactable = function() {};
/**
 * Creates a new subclass of class sap.ui.test.matchers.Interactable with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.Interactable.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.test.matchers.Interactable.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.Interactable.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.test.matchers.LabelFor --------------------------------------------------------------------------

/**
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getModelName modelName} : string (default: i18n)</li>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getParameters parameters} : any</li>
 * <li>{@link #getPropertyName propertyName} : string (default: text)</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}
 * can be used as well.
 * 
 * @class
 * The LabelFor matcher searches for given control associated with labelFor property.
 * The matcher does automatically
 * <ul>
 *     <li>
 *         retrieve control associated by label by given text
 *     </li>
 *     <li>
 *         retrieve control associated by label by given i18n key, modelName, parameters or propertyName. See {@link sap.ui.test.matchers.I18NText}
 *     </li>
 *     <li>
 *         combination of text and key is not possible
 *     </li>
 * </ul>
 * 
 * @extends sap.ui.test.matchers.Matcher
 * @param {object} [mSettings] optional map/JSON-object with initial settings for the new LabelFor
 * @public
 * @since 1.46
 * 
 */
sap.ui.test.matchers.LabelFor = function(mSettings) {};
/**
 * Creates a new subclass of class sap.ui.test.matchers.LabelFor with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.LabelFor.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets current value of property {@link #getKey key}.
 * 
 * The key of the I18N text in the containing {@link jQuery.sap.util.ResourceBundle}.
 * 
 * @returns {string} Value of property <code>key</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.LabelFor.prototype.getKey = function() { return ""; };

/**
 * Returns a metadata object for class sap.ui.test.matchers.LabelFor.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.LabelFor.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getModelName modelName}.
 * 
 * The name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.
 * 
 * Default value is <code>i18n</code>.
 * @returns {string} Value of property <code>modelName</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.LabelFor.prototype.getModelName = function() { return ""; };

/**
 * Gets current value of property {@link #getParameters parameters}.
 * 
 * The parameters for replacing the placeholders of the I18N text. See {@link jQuery.sap.util.ResourceBundle#getText}.
 * 
 * @returns {any} Value of property <code>parameters</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.LabelFor.prototype.getParameters = function() { return null; };

/**
 * Gets current value of property {@link #getPropertyName propertyName}.
 * 
 * The name of the control property to match the I18N text with.
 * 
 * Default value is <code>text</code>.
 * @returns {string} Value of property <code>propertyName</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.LabelFor.prototype.getPropertyName = function() { return ""; };

/**
 * Gets current value of property {@link #getText text}.
 * 
 * The text of the {@link sap.m.Label} which have the labelFor property.
 * 
 * @returns {string} Value of property <code>text</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.LabelFor.prototype.getText = function() { return ""; };

/**
 * Checks for control with labelFor property annotating other control
 * 
 * @param {sap.ui.core.Control} oControl the control that is checked by the matcher
 * @return {boolean} true if the Control has a label that matches the criteria
 * @public
 * 
 */
sap.ui.test.matchers.LabelFor.prototype.isMatching = function(oControl) { return false; };

/**
 * Sets a new value for property {@link #getKey key}.
 * 
 * The key of the I18N text in the containing {@link jQuery.sap.util.ResourceBundle}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sKey New value for property <code>key</code>
 * @returns {sap.ui.test.matchers.LabelFor} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.LabelFor.prototype.setKey = function(sKey) { return new sap.ui.test.matchers.LabelFor(); };

/**
 * Sets a new value for property {@link #getModelName modelName}.
 * 
 * The name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>i18n</code>.
 * @param {string} sModelName New value for property <code>modelName</code>
 * @returns {sap.ui.test.matchers.LabelFor} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.LabelFor.prototype.setModelName = function(sModelName) { return new sap.ui.test.matchers.LabelFor(); };

/**
 * Sets a new value for property {@link #getParameters parameters}.
 * 
 * The parameters for replacing the placeholders of the I18N text. See {@link jQuery.sap.util.ResourceBundle#getText}.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oParameters New value for property <code>parameters</code>
 * @returns {sap.ui.test.matchers.LabelFor} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.LabelFor.prototype.setParameters = function(oParameters) { return new sap.ui.test.matchers.LabelFor(); };

/**
 * Sets a new value for property {@link #getPropertyName propertyName}.
 * 
 * The name of the control property to match the I18N text with.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * Default value is <code>text</code>.
 * @param {string} sPropertyName New value for property <code>propertyName</code>
 * @returns {sap.ui.test.matchers.LabelFor} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.LabelFor.prototype.setPropertyName = function(sPropertyName) { return new sap.ui.test.matchers.LabelFor(); };

/**
 * Sets a new value for property {@link #getText text}.
 * 
 * The text of the {@link sap.m.Label} which have the labelFor property.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sText New value for property <code>text</code>
 * @returns {sap.ui.test.matchers.LabelFor} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.LabelFor.prototype.setText = function(sText) { return new sap.ui.test.matchers.LabelFor(); };


// ---- sap.ui.test.matchers.Matcher --------------------------------------------------------------------------

/**
 * 
 * @class Matchers for Opa5 - needs to implement an isMatching function that returns a boolean and will get a control instance as parameter
 * @abstract
 * @extends sap.ui.base.ManagedObject
 * @public
 * @since 1.23
 * 
 */
sap.ui.test.matchers.Matcher = function() {};
/**
 * Creates a new subclass of class sap.ui.test.matchers.Matcher with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.Matcher.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.test.matchers.Matcher.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.Matcher.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Checks if the matcher is matching - will get an instance of sap.ui.core.Control as parameter.
 * 
 * Should be overwritten by subclasses
 * 
 * @param {sap.ui.core.Control} oControl the control that is checked by the matcher
 * @return {boolean} true if the Control is matching the condition of the matcher
 * @protected
 * 
 */
sap.ui.test.matchers.Matcher.prototype.isMatching = function(oControl) { return false; };


// ---- sap.ui.test.matchers.Properties --------------------------------------------------------------------------

/**
 * @class Properties - checks if a control's properties have the provided values - all properties have to match their values.
 * @param {object} oProperties the object with the properties to be checked. Example:
 * <pre>
 * // Would filter for an enabled control with the text "Accept".
 * new Properties({
 *     // The property text has the exact value "Accept"
 *     text: "Accept",
 *     // The property enabled also has to be true
 *     enabled: true
 * })
 * </pre>
 * If the value is a RegExp, it tests the RegExp with the value. RegExp only works with string properties.
 * @public
 * @since 1.27
 * 
 */
sap.ui.test.matchers.Properties = function(oProperties) {};

// ---- sap.ui.test.matchers.PropertyStrictEquals --------------------------------------------------------------------------

/**
 * PropertyStrictEquals - checks if a property has the exact same value.
 * 
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial
 * property values, aggregated and associated objects as well as event handlers.
 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
 * 
 * @ui5-settings
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getValue value} : any</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}
 * can be used as well.
 * @ui5-updated-doclet
 * 
 * @class PropertyStrictEquals - checks if a property has the exact same value
 * @extends sap.ui.test.matchers.Matcher
 * @param {object} [mSettings] optional map/JSON-object with initial settings for the new PropertyStrictEquals
 * @public
 * @since 1.23
 * 
 */
sap.ui.test.matchers.PropertyStrictEquals = function(mSettings) {};
/**
 * Creates a new subclass of class sap.ui.test.matchers.PropertyStrictEquals with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.PropertyStrictEquals.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.test.matchers.PropertyStrictEquals.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.matchers.PropertyStrictEquals.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Gets current value of property {@link #getName name}.
 * 
 * The Name of the property that is used for matching.
 * 
 * @returns {string} Value of property <code>name</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.PropertyStrictEquals.prototype.getName = function() { return ""; };

/**
 * Gets current value of property {@link #getValue value}.
 * 
 * The value of the property that is used for matching.
 * 
 * @returns {any} Value of property <code>value</code>
 * 
 * @public
 * 
 */
sap.ui.test.matchers.PropertyStrictEquals.prototype.getValue = function() { return null; };

/**
 * Checks if the control has a property that matches the value
 * 
 * @param {sap.ui.core.Control} oControl the control that is checked by the matcher
 * @return {boolean} true if the property has a strictly matching value.
 * @public
 * 
 */
sap.ui.test.matchers.PropertyStrictEquals.prototype.isMatching = function(oControl) { return false; };

/**
 * Sets a new value for property {@link #getName name}.
 * 
 * The Name of the property that is used for matching.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {string} sName New value for property <code>name</code>
 * @returns {sap.ui.test.matchers.PropertyStrictEquals} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.PropertyStrictEquals.prototype.setName = function(sName) { return new sap.ui.test.matchers.PropertyStrictEquals(); };

/**
 * Sets a new value for property {@link #getValue value}.
 * 
 * The value of the property that is used for matching.
 * 
 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
 * 
 * @param {any} oValue New value for property <code>value</code>
 * @returns {sap.ui.test.matchers.PropertyStrictEquals} Reference to <code>this</code> in order to allow method chaining
 * 
 * @public
 * 
 */
sap.ui.test.matchers.PropertyStrictEquals.prototype.setValue = function(oValue) { return new sap.ui.test.matchers.PropertyStrictEquals(); };


// ---- sap.ui.test.Opa --------------------------------------------------------------------------

/**
 * This class will help you write acceptance tests in one page or single page applications.
 * You can wait for certain conditions to be met.
 * 
 * @class One Page Acceptance testing.
 * @public
 * @since 1.22
 * 
 * @param {object} [extensionObject] An object containing properties and functions. The newly created Opa will be extended by these properties and functions using jQuery.extend.
 * 
 */
sap.ui.test.Opa = function(extensionObject) {};
/**
 * the global configuration of Opa.
 * All of the global values can be overwritten in an individual waitFor call.
 * The default values are:
 * <ul>
 * 		<li>arrangements: A new Opa instance</li>
 * 		<li>actions: A new Opa instance</li>
 * 		<li>assertions: A new Opa instance</li>
 * 		<li>timeout : 15 seconds, 0 for infinite timeout</li>
 * 		<li>pollingInterval: 400 milliseconds</li>
 * 		<li>debugTimeout: 0 seconds, infinite timeout by default. This will be used instead of timeout if running in debug mode.</li>
 * </ul>
 * You can either directly manipulate the config, or extend it using {@link sap.ui.test.Opa.extendConfig}
 * @public
 * 
 */
sap.ui.test.Opa.config = undefined

/**
 * Calls the static emptyQueue function in the Opa namespace {@link sap.ui.test.Opa.emptyQueue}
 * @public
 * 
 */
sap.ui.test.Opa.prototype.emptyQueue = function() {  };

/**
 * Waits until all waitFor calls are done.
 * 
 * @returns {jQuery.promise} If the waiting was successful, the promise will be resolved. If not it will be rejected
 * @public
 * 
 */
sap.ui.test.Opa.emptyQueue = function() { return new jQuery.promise(); };

/**
 * Calls the static extendConfig function in the Opa namespace {@link sap.ui.test.Opa.extendConfig}
 * @public
 * 
 */
sap.ui.test.Opa.prototype.extendConfig = function() {  };

/**
 * Extends and overwrites default values of the {@link sap.ui.test.Opa.config}.
 * Sample usage:
 * <pre>
 *     <code>
 *         var oOpa = new Opa();
 * 
 *         // this statement will  will time out after 15 seconds and poll every 400ms.
 *         // those two values come from the defaults of {@link sap.ui.test.Opa.config}.
 *         oOpa.waitFor({
 *         });
 * 
 *         // All wait for statements added after this will take other defaults
 *         Opa.extendConfig({
 *             timeout: 10,
 *             pollingInterval: 100
 *         });
 * 
 *         // this statement will time out after 10 seconds and poll every 100 ms
 *         oOpa.waitFor({
 *         });
 * 
 *         // this statement will time out after 20 seconds and poll every 100 ms
 *         oOpa.waitFor({
 *             timeout: 20;
 *         });
 *     </code>
 * </pre>
 * 
 * @since 1.40 The own properties of 'arrangements, actions and assertions' will be kept.
 * Here is an example:
 * <pre>
 *     <code>
 *         // An opa action with an own property 'clickMyButton'
 *         var myOpaAction = new Opa();
 *         myOpaAction.clickMyButton = // function that clicks MyButton
 *         Opa.config.actions = myOpaAction;
 * 
 *         var myExtension = new Opa();
 *         Opa.extendConfig({
 *             actions: myExtension
 *         });
 * 
 *         // The clickMyButton function is still available - the function is logged out
 *         console.log(Opa.config.actions.clickMyButton);
 * 
 *         // If
 *         var mySecondExtension = new Opa();
 *         mySecondExtension.clickMyButton = // a different function than the initial one
 *         Opa.extendConfig({
 *             actions: mySecondExtension
 *         });
 * 
 *         // Now clickMyButton function is the function of the second extension not the first one.
 *         console.log(Opa.config.actions.clickMyButton);
 *     </code>
 * </pre>
 * 
 * @since 1.48 All config parameters could be overwritten from URL. Should be prefixed with 'opa'
 * and have uppercase first character. Like 'opaExecutionDelay=1000' will overwrite 'executionDelay'
 * 
 * @param {object} options The values to be added to the existing config
 * @public
 * 
 */
sap.ui.test.Opa.extendConfig = function(options) {  };

/**
 * Gives access to a singleton object you can save values in.
 * This object will only be created once and it will never be destroyed.
 * That means you can use it to save values you need in multiple separated tests.
 * 
 * @returns {object} the context object
 * @public
 * 
 */
sap.ui.test.Opa.prototype.getContext = function() { return new Object(); };

/**
 * Gives access to a singleton object you can save values in.
 * Same as {@link sap.ui.test.Opa#getContext}
 * @since 1.29.0
 * @returns {object} the context object
 * @public
 * 
 */
sap.ui.test.Opa.getContext = function() { return new Object(); };

/**
 * Reset Opa.config to its default values.
 * All of the global values can be overwritten in an individual waitFor call.
 * 
 * The default values are:
 * <ul>
 * 		<li>arrangements: A new Opa instance</li>
 * 		<li>actions: A new Opa instance</li>
 * 		<li>assertions: A new Opa instance</li>
 * 		<li>timeout : 15 seconds, 0 for infinite timeout</li>
 * 		<li>pollingInterval: 400 milliseconds</li>
 * 		<li>debugTimeout: 0 seconds, infinite timeout by default. This will be used instead of timeout if running in debug mode.</li>
 * 		<li>
 * 			executionDelay: 0 or 50 (depending on the browser). The value is a number representing milliseconds.
 * 			The executionDelay will slow down the execution of every single waitFor statement to be delayed by the number of milliseconds.
 * 			This does not effect the polling interval it just adds an initial pause.
 * 			Use this parameter to slow down OPA when you want to watch your test during development or checking the UI of your app.
 * 			It is not recommended to use this parameter in any automated test executions.
 * 		</li>
 * </ul>
 * 
 * @public
 * @since 1.25
 * 
 */
sap.ui.test.Opa.resetConfig = function() {  };

/**
 * Clears the queue and stops running tests so that new tests can be run.
 * This means all waitFor statements registered by {@link sap.ui.test.Opa#waitFor} will not be invoked anymore and
 * the promise returned by {@link sap.ui.test.Opa.emptyQueue}
 * will be rejected or resolved depending on the failTest parameter.
 * When its called inside of a check in {@link sap.ui.test.Opa#waitFor}
 * the success function of this waitFor will not be called.
 * @since 1.40.1
 * @public
 * 
 */
sap.ui.test.Opa.stopQueue = function() {  };

/**
 * Queues up a waitFor command for Opa.
 * The Queue will not be emptied until {@link sap.ui.test.Opa.emptyQueue} is called.
 * If you are using {@link sap.ui.test.opaQunit}, emptyQueue will be called by the wrapped tests.
 * 
 * If you are using Opa5, waitFor takes additional parameters.
 * They can be found here: {@link sap.ui.test.Opa5#waitFor}.
 * Waits for a check condition to return true, in which case a success function will be called.
 * If the timeout is reached before the check returns true, an error function will be called.
 * 
 * 
 * @public
 * @param {object} options These contain check, success and error functions
 * @param {int} [options.timeout] default: 15 - (seconds) Specifies how long the waitFor function polls before it fails.O means it will wait forever.
 * @param {int} [options.debugTimeout] @since 1.47 default: 0 - (seconds) Specifies how long the waitFor function polls before it fails in debug mode.O means it will wait forever.
 * @param {int} [options.pollingInterval] default: 400 - (milliseconds) Specifies how often the waitFor function polls.
 * @param {function} [options.check] Will get invoked in every polling interval.
 * If it returns true, the check is successful and the polling will stop.
 * The first parameter passed into the function is the same value that gets passed to the success function.
 * Returning something other than boolean in the check will not change the first parameter of success.
 * @param {function} [options.success] Will get invoked after the check function returns true.
 * If there is no check function defined, it will be directly invoked.
 * waitFor statements added in the success handler will be executed before previously added waitFor statements.
 * @param {string} [options.errorMessage] Will be displayed as an errorMessage depending on your unit test framework.
 * Currently the only adapter for Opa is QUnit.
 * This message is displayed there if Opa has reached its timeout but QUnit has not yet reached it.
 * @returns {jQuery.promise} A promise that gets resolved on success
 * 
 */
sap.ui.test.Opa.prototype.waitFor = function(options) { return new jQuery.promise(); };


// ---- sap.ui.test.Opa5 --------------------------------------------------------------------------

/**
 * Helps you when writing tests for UI5 applications.
 * Provides convenience to wait and retrieve for UI5 controls without relying on global IDs.
 * Makes it easy to wait until your UI is in the state you need for testing, e.g.: waiting for backend data.
 * 
 * @class UI5 extension of the OPA framework
 * @extends sap.ui.base.Object
 * @public
 * @since 1.22
 * 
 */
sap.ui.test.Opa5 = function() {};
/**
 * Create a page object configured as arrangement, action and assertion to the Opa.config.
 * Use it to structure your arrangement, action and assertion based on parts of the screen to avoid name clashes and help to structure your tests.
 * @param {map} mPageObjects
 * @param {map} mPageObjects.&lt;your-page-object-name&gt; Multiple page objects are possible, provide at least actions or assertions
 * @param {function} [mPageObjects.&lt;your-page-object-name&gt;.viewName] When a viewName is given, all waitFors inside of the page object will get a viewName parameter.
 * Here is an example:
 * <pre>
 * 		<code>
 * 			Opa5.createPageObjects({
 * 				viewName: "myView",
 * 				onMyPageWithViewName: {
 * 					assertions: {
 * 						iWaitForAButtonInMyView: function () {
 * 							this.waitFor({
 * 								id: "myButton",
 * 								success: function (oButton) {
 * 									// the button is defined in the view myView
 * 								}
 * 							});
 * 						}
 * 					}
 * 				}
 *     </code>
 * </pre>
 * This saves you repeating the viewName in every waitFor statement of the page object.
 * It is possible to overwrite the viewName of the page object in a specific waitFor.
 * So if you have specified a <code>viewName: "myView"</code> in your page object
 * and you want to look for a control with a global id you may use <code>viewName: ""</code> in a waitFor
 * to overwrite the viewName of the page Object. Example:
 * <pre>
 * 		<code>
 * 			this.waitFor({
 * 				id: "myButton",
 * 				viewName: "",
 * 				success: function (oButton) {
 * 					// now a button with the global id "myButton" will be searched
 * 				}
 * 			});
 * 		</code>
 * </pre>
 * @param {function} [mPageObjects.&lt;your-page-object-name&gt;.baseClass] Base class for the page object's actions and assertions, default: Opa5
 * @param {function} [mPageObjects.&lt;your-page-object-name&gt;.namespace] Namespace prefix for the page object's actions and assertions, default: sap.ui.test.opa.pageObject. Use it if you use page objects from multiple projects in the same test build.
 * @param {map} [mPageObjects.&lt;your-page-object-name&gt;.actions] Can be used as an arrangement and action in Opa tests. Only the test knows if an action is used as arrangement or action
 * @param {function} mPageObjects.&lt;your-page-object-name&gt;.actions.&lt;your-action-1&gt; This is your custom implementation containing one or multiple waitFor statements
 * @param {function} mPageObjects.&lt;your-page-object-name&gt;.actions.&lt;your-action-2&gt; This is your custom implementation containing one or multiple waitFor statements
 * @param {map} [mPageObjects.&lt;your-page-object-name&gt;.assertions] Can be used as an assertions in Opa tests.
 * @param {function} mPageObjects.&lt;your-page-object-name&gt;.assertions.&lt;your-assertions-1&gt; This is your custom implementation containing one or multiple waitFor statements
 * @param {function} mPageObjects.&lt;your-page-object-name&gt;.assertions.&lt;your-assertions-2&gt; This is your custom implementation containing one or multiple waitFor statements
 * @returns {map} mPageObject The created page object. It will look like this:
 * <pre><code>
 *  {
 *   &lt;your-page-object-name&gt; : {
 *       actions: // an instance of baseClass or Opa5 with all the actions defined above
 *       assertions: // an instance of baseClass or Opa5 with all the assertions defined above
 *   }
 *  }
 * </code></pre>
 * @public
 * @since 1.25
 * 
 */
sap.ui.test.Opa5.createPageObjects = function(mPageObjects) { return null; };

/**
 * Waits until all waitFor calls are done
 * See {@link sap.ui.test.Opa.emptyQueue} for the description
 * @returns {jQuery.promise} If the waiting was successful, the promise will be resolved. If not it will be rejected
 * @public
 * 
 */
sap.ui.test.Opa5.emptyQueue = function() { return new jQuery.promise(); };

/**
 * 
 * Extends and overwrites default values of the {@link sap.ui.test.Opa.config}.
 * Most frequent usecase:
 * <pre>
 *     <code>
 *         // Every waitFor will append this namespace in front of your viewName
 *         Opa5.extendConfig({
 *            viewNamespace: "namespace.of.my.views."
 *         });
 * 
 *         var oOpa = new Opa5();
 * 
 *         // Looks for a control with the id "myButton" in a View with the name "namespace.of.my.views.Detail"
 *         oOpa.waitFor({
 *              id: "myButton",
 *              viewName: "Detail"
 *         });
 * 
 *         // Looks for a control with the id "myList" in a View with the name "namespace.of.my.views.Master"
 *         oOpa.waitFor({
 *              id: "myList",
 *              viewName: "Master"
 *         });
 *     </code>
 * </pre>
 * 
 * Sample usage:
 * <pre>
 *     <code>
 *         var oOpa = new Opa5();
 * 
 *         // this statement will  will time out after 15 seconds and poll every 400ms.
 *         // those two values come from the defaults of {@link sap.ui.test.Opa.config}.
 *         oOpa.waitFor({
 *         });
 * 
 *         // All wait for statements added after this will take other defaults
 *         Opa5.extendConfig({
 *             timeout: 10,
 *             pollingInterval: 100
 *         });
 * 
 *         // this statement will time out after 10 seconds and poll every 100 ms
 *         oOpa.waitFor({
 *         });
 * 
 *         // this statement will time out after 20 seconds and poll every 100 ms
 *         oOpa.waitFor({
 *             timeout: 20;
 *         });
 *     </code>
 * </pre>
 * 
 * @since 1.40 The own properties of 'arrangements, actions and assertions' will be kept.
 * Here is an example:
 * <pre>
 *     <code>
 *         // An opa action with an own property 'clickMyButton'
 *         var myOpaAction = new Opa5();
 *         myOpaAction.clickMyButton = // function that clicks MyButton
 *         Opa.config.actions = myOpaAction;
 * 
 *         var myExtension = new Opa5();
 *         Opa5.extendConfig({
 *             actions: myExtension
 *         });
 * 
 *         // The clickMyButton function is still available - the function is logged out
 *         console.log(Opa.config.actions.clickMyButton);
 * 
 *         // If
 *         var mySecondExtension = new Opa5();
 *         mySecondExtension.clickMyButton = // a different function than the initial one
 *         Opa.extendConfig({
 *             actions: mySecondExtension
 *         });
 * 
 *         // Now clickMyButton function is the function of the second extension not the first one.
 *         console.log(Opa.config.actions.clickMyButton);
 *     </code>
 * </pre>
 * 
 * @since 1.48 Application config parameters could be overwritten from URL.
 * Every parameter that is not prefixed with 'opa' and is not blacklisted as QUnit
 * parameter is parsed and overwrites respective 'appParams' value.
 * 
 * @param {object} options The values to be added to the existing config
 * @public
 * 
 */
sap.ui.test.Opa5.extendConfig = function(options) {  };

/**
 * Gives access to a singleton object you can save values in.
 * See {@link sap.ui.test.Opa.getContext} for the description
 * @since 1.29.0
 * @returns {object} the context object
 * @public
 * 
 */
sap.ui.test.Opa5.getContext = function() { return new Object(); };

/**
 * Returns HashChanger object of the IFrame. If the IFrame is not loaded it will return null.
 * @public
 * @returns {sap.ui.core.routing.HashChanger} The HashChanger instance
 * 
 */
sap.ui.test.Opa5.getHashChanger = function() { return new sap.ui.core.routing.HashChanger(); };

/**
 * Returns the jQuery object of the IFrame. If the IFrame is not loaded it will return null.
 * @returns {jQuery} The jQuery object
 * @public
 * 
 */
sap.ui.test.Opa5.getJQuery = function() { return null; };

/**
 * Returns the Opa plugin used for retrieving controls. If an IFrame is used it will return the iFrame's plugin.
 * @returns {sap.ui.test.OpaPlugin} The plugin instance
 * @public
 * 
 */
sap.ui.test.Opa5.getPlugin = function() { return new sap.ui.test.OpaPlugin(); };

/**
 * Returns QUnit utils object of the IFrame. If the IFrame is not loaded it will return null.
 * @public
 * @returns {sap.ui.test.qunit} The QUnit utils
 * 
 */
sap.ui.test.Opa5.getUtils = function() { return new sap.ui.test.qunit(); };

/**
 * Returns the window object of the IFrame or the current window. If the IFrame is not loaded it will return null.
 * @returns {Window} The window of the IFrame
 * @public
 * 
 */
sap.ui.test.Opa5.getWindow = function() { return null; };

/**
 * Starts an app in an IFrame. Only works reliably if running on the same server.
 * 
 * @since 1.48 If appParams are provided in {@link sap.ui.test.Opa.config}, they are
 * merged in the query params of app URL
 * 
 * @param {string} sSource The source of the IFrame
 * @param {int} [iTimeout=80] The timeout for loading the IFrame in seconds - default is 80
 * @returns {jQuery.promise} A promise that gets resolved on success
 * @public
 * 
 */
sap.ui.test.Opa5.prototype.iStartMyAppInAFrame = function(sSource,iTimeout) { return new jQuery.promise(); };

/**
 * Starts an app in an IFrame. Only works reliably if running on the same server.
 * 
 * @since 1.48 If appParams are provided in {@link sap.ui.test.Opa.config}, they are
 * merged in the query params of app URL
 * 
 * @param {string} sSource The source of the IFrame
 * @param {number} [iTimeout=80] The timeout for loading the IFrame in seconds - default is 80
 * @returns {jQuery.promise} A promise that gets resolved on success
 * @public
 * 
 */
sap.ui.test.Opa5.iStartMyAppInAFrame = function(sSource,iTimeout) { return new jQuery.promise(); };

/**
 * Starts a UIComponent.
 * @param {object} oOptions An Object that contains the configuration for starting up a UIComponent.
 * @param {object} oOptions.componentConfig Will be passed to {@link sap.ui.component component}, please read the respective documentation.
 * @param {string} [oOptions.hash] Sets the hash {@link sap.ui.core.routing.HashChanger#setHash} to the given value.
 * If this parameter is omitted, the hash will always be reset to the empty hash - "".
 * @param {number} [oOptions.timeout=15] The timeout for loading the UIComponent in seconds - {@link sap.ui.test.Opa5#waitFor}.
 * @returns {jQuery.promise} A promise that gets resolved on success.
 * 
 * @since 1.48 If appParams are provided in {@link sap.ui.test.Opa.config}, they are
 * applied to the current URL.
 * 
 * @public
 * 
 */
sap.ui.test.Opa5.prototype.iStartMyUIComponent = function(oOptions) { return new jQuery.promise(); };

/**
 * Removes the IFrame from the DOM and removes all the references to its objects
 * @returns {jQuery.promise} A promise that gets resolved on success
 * @public
 * 
 */
sap.ui.test.Opa5.prototype.iTeardownMyAppFrame = function() { return new jQuery.promise(); };

/**
 * Removes the IFrame from the DOM and removes all the references to its objects
 * @returns {jQuery.promise} A promise that gets resolved on success
 * @public
 * 
 */
sap.ui.test.Opa5.iTeardownMyAppFrame = function() { return new jQuery.promise(); };

/**
 * Destroys the UIComponent and removes the div from the dom like all the references on its objects
 * 
 * @since 1.48 If appParams were applied to the current URL, they will be removed
 * after UIComponent is destroyed
 * 
 * @returns {jQuery.promise} a promise that gets resolved on success.
 * @public
 * 
 */
sap.ui.test.Opa5.prototype.iTeardownMyUIComponent = function() { return new jQuery.promise(); };

/**
 * Resets Opa.config to its default values.
 * See {@link sap.ui.test.Opa5#waitFor} for the description
 * Default values for OPA5 are:
 * <ul>
 * 	<li>viewNamespace: empty string</li>
 * 	<li>arrangements: instance of OPA5</li>
 * 	<li>actions: instance of OPA5</li>
 * 	<li>assertions: instance of OPA5</li>
 * 	<li>visible: true</li>
 * 	<li>timeout : 15 seconds, 0 for infinite timeout</li>
 * 	<li>pollingInterval: 400 milliseconds</li>
 * 	<li>debugTimeout: 0 seconds, infinite timeout by default. This will be used instead of timeout if running in debug mode.</li>
 * 	<li>autoWait: false - since 1.42</li>
 * 	<li>appParams: object with URI parameters for the tested app - since 1.48</li>
 * </ul>
 * @public
 * @since 1.25
 * 
 */
sap.ui.test.Opa5.resetConfig = function() {  };

/**
 * Clears the queue and stops running tests so that new tests can be run.
 * This means all waitFor statements registered by {@link sap.ui.test.Opa5#waitFor} will not be invoked anymore and
 * the promise returned by {@link sap.ui.test.Opa5.emptyQueue} will be rejected.
 * When its called inside of a check in {@link sap.ui.test.Opa5#waitFor}
 * the success function of this waitFor will not be called.
 * @public
 * 
 */
sap.ui.test.Opa5.stopQueue = function() {  };

/**
 * Takes the same parameters as {@link sap.ui.test.Opa#waitFor}. Also allows you to specify additional parameters:
 * 
 * @param {object} options An Object containing conditions for waiting and callbacks
 * @param {string|RegExp} [options.id] The global ID of a control, or the ID of a control inside a view.
 * If a regex and a viewName is provided, Opa5 will only look for controls in the view with a matching ID.<br/>
 * Example of a waitFor:
 * <pre>
 *     <code>
 *         this.waitFor({
 *             id: /my/,
 *             viewName: "myView"
 *         });
 *     </code>
 * </pre>
 * The view that is searched in:
 * <pre>
 *     <code>
 *         &lt;core:View xmlns:core="sap.ui.core" xmlns="sap.m"&gt;
 *             &lt;Button id="myButton"&gt;
 *             &lt;/Button&gt;
 *             &lt;Button id="bar"&gt;
 *             &lt;/Button&gt;
 *             &lt;Button id="baz"&gt;
 *             &lt;/Button&gt;
 *             &lt;Image id="myImage"&gt;&lt;/Image&gt;
 *         &lt;/core:View&gt;
 *     </code>
 * </pre>
 * Will result in matching two controls, the image with the effective ID myView--myImage and the button myView--myButton.
 * Although the IDs of the controls myView--bar and myView--baz contain a my,
 * they will not be matched since only the part you really write in your views will be matched.
 * @param {string} [options.viewName] The name of a view.
 * If this is set the id of the control is searched inside of the view. If an id is not be set, all controls of the view will be found.
 * @param {string} [options.viewNamespace] This string gets appended before the viewName - should probably be set to the {@link sap.ui.test.Opa5.extendConfig}.
 * @param {function|array|sap.ui.test.matchers.Matcher} [options.matchers] A single matcher or an array of matchers {@link sap.ui.test.matchers}.
 * Matchers will be applied to an every control found by the waitFor function.
 * The matchers are a pipeline: the first matcher gets a control as an input parameter, each subsequent matcher gets the same input as the previous one, if the previous output is 'true'.
 * If the previous output is a truthy value, the next matcher will receive this value as an input parameter.
 * If any matcher does not match an input (i.e. returns a falsy value), then the input is filtered out. Check will not be called if the matchers filtered out all controls/values.
 * Check/success will be called with all matching values as an input parameter. Matchers also can be define as an inline-functions.
 * @param {string} [options.controlType] Selects all control by their type.
 * It is usually combined with a viewName or searchOpenDialogs. If no control is matching the type, an empty
 * array will be returned. Here are some samples:
 * <code>
 *     <pre>
 *         this.waitFor({
 *             controlType: "sap.m.Button",
 *             success: function (aButtons) {
 *                 // aButtons is an array of all visible buttons
 *             }
 *         });
 * 
 *         // control type will also return controls that extend the control type
 *         // this will return an array of visible sap.m.List and sap.m.Table since both extend List base
 *         this.waitFor({
 *             controlType: "sap.m.ListBase",
 *             success: function (aLists) {
 *                 // aLists is an array of all visible Tables and Lists
 *             }
 *         });
 * 
 *         // control type is often combined with viewName - only controls that are inside of the view
 *         // and have the correct type will be returned
 *         this.waitFor({
 *             viewName: "my.View"
 *             controlType: "sap.m.Input",
 *             success: function (aInputs) {
 *                 // aInputs are all sap.m.Inputs inside of a view called 'my.View'
 *             }
 *         });
 *     </pre>
 * </code>
 * @param {boolean} [options.searchOpenDialogs=false] If set to true, Opa5 will only look in open dialogs. All the other values except control type will be ignored
 * @param {boolean} [options.visible=true] If set to false, Opa5 will also look for unrendered and invisible controls.
 * @param {int} [options.timeout=15] (seconds) Specifies how long the waitFor function polls before it fails.O means it will wait forever.
 * @param {int} [options.debugTimeout=0] @since 1.47 (seconds) Specifies how long the waitFor function polls before it fails in debug mode.O means it will wait forever.
 * @param {int} [options.pollingInterval=400] (milliseconds) Specifies how often the waitFor function polls.
 * @param {function} [options.check] Will get invoked in every polling interval. If it returns true, the check is successful and the polling will stop.
 * The first parameter passed into the function is the same value that gets passed to the success function.
 * Returning something other than boolean in check will not change the first parameter of success.
 * @param {function} [options.success] Will get invoked after the following conditions are met:
 * <ol>
 *     <li>
 *         One or multiple controls were found using controlType, Id, viewName. If visible is true (it is by default), the controls also need to be rendered.
 *     </li>
 *     <li>
 *         The whole matcher pipeline returned true for at least one control, or there are no matchers
 *     </li>
 *     <li>
 *         The check function returned true, or there is no check function
 *     </li>
 * </ol>
 * The first parameter passed into the function is either a single control (when a single string ID was used),
 * or an array of controls (viewName, controlType, multiple ID's, regex ID's) that matched all matchers.
 * Matchers can alter the array or single control to something different. Please read the documentation of waitFor's matcher parameter.
 * @param {function} [options.error] Invoked when the timeout is reached and the check never returned true.
 * @param {string} [options.errorMessage] Will be displayed as an errorMessage depending on your unit test framework.
 * Currently the only adapter for Opa5 is QUnit.
 * This message is displayed if Opa5 has reached its timeout before QUnit has reached it.
 * @param {function|function[]|sap.ui.test.actions.Action|sap.ui.test.actions.Action[]} options.actions
 * Available since 1.34.0. An array of functions or Actions or a mixture of both.
 * An action has an 'executeOn' function that will receive a single control as a parameter.
 * If there are multiple actions defined all of them
 * will be executed (first in first out) on each control of, similar to the matchers.
 * Here is one of the most common usages:
 * <code>
 *     function (sButtonId) {
 *          // executes a Press on a button with a specific id
 *          new Opa5().waitFor({
 *              id: sButtonId,
 *              actions: new Press()
 *          });
 *     };
 * </code>
 * But actions will only be executed once and only after the check function returned true.
 * Before actions are executed the {@link sap.ui.test.matchers.Interactable}
 * matcher will check if the Control is currently able to perform actions if it is not,
 * Opa5 will try again after the 'pollingInterval'.
 * That means actions will only be executed if the control is not:
 * <ul>
 *     <li>
 *         Behind an open dialog
 *     </li>
 *     <li>
 *         Inside of a navigating NavContainer
 *     </li>
 *     <li>
 *         Busy
 *     </li>
 *     <li>
 *         Inside a Parent control that is Busy
 *     </li>
 * </ul>
 * If there are multiple controls in Opa5's result set the action will be executed on all of them.
 * The actions will be invoked directly before success is called.
 * In the documentation of the success parameter there is a list of conditions that have to be fulfilled.
 * They also apply for the actions.
 * There are some predefined actions in the {@link sap.ui.test.actions} namespace.
 * since 1.42 an Action may add other waitFors.
 * The next action or the success handler will not be executed until the waitFor of the action has finished.
 * An example:
 * <code>
 *     <pre>
 *     this.waitFor({
 *         id: "myButton",
 *         actions: function (oButton) {
 *            // this action is executed first
 *            this.waitFor({
 *              id: "anotherButton",
 *              actions: function () {
 *                // This is the second function that will be executed
 *                // Opa will also wait until anotherButton is Interactable before executing this function
 *              },
 *              success: function () {
 *                // This is the third function that will be executed
 *              }
 *            })
 *         },
 *         success: function () {
 *             // This is the fourth function that will be executed
 *         }
 *     });
 *     </pre>
 * </code>
 * Executing multiple actions will not wait between actions for a control to become "Interactable" again.
 * If you need waiting between actions you need to split the actions into multiple 'waitFor' statements.
 * @param {boolean} [options.autoWait=false] @since 1.42 Only has an effect if set to true.
 * The waitFor statement will not execute success callbacks as long as there are open XMLHTTPRequests (requests to a server).
 * It will only execute success if the control is {@link sap.ui.test.matchers.Interactable}
 * So success behaves like an action in terms of waiting.
 * It is recommended to set this value to true for all your waitFor statements using:
 * <code>
 *     <pre>
 *     Opa5.extendConfig({
 *         autoWait: true
 *     });
 *     </pre>
 * </code>
 * Why is it recommended:
 * When writing a huge set of tests and executing them frequently you might face tests that are sometimes successful but sometimes they are not.
 * Setting the autoWait to true should stabilize most of those tests.
 * The default "false" could not be changed since it causes existing tests to fail.
 * There are cases where you do not want to wait for controls to be "Interactable":
 * For example when you are testing the Busy indication of your UI during the sending of a request.
 * But these cases are the exception so it is better to explicitly adding autoWait: false to this waitFor.
 * <code>
 *     <pre>
 *     this.waitFor({
 *         id: "myButton",
 *         autoWait: false,
 *         success: function (oButton) {
 *              Opa5.assert.ok(oButton.getBusy(), "My Button was busy");
 *         }
 *     });
 *     </pre>
 * </code>
 * This is also the easiest way of migrating existing tests. First extend the config, then see which waitFors
 * will time out and finally disable autoWait in these Tests.
 * 
 * @since 1.48 All config parameters could be overwritten from URL. Should be prefixed with 'opa'
 * and have uppercase first character. Like 'opaExecutionDelay=1000' will overwrite 'executionDelay'
 * 
 * @returns {jQuery.promise} A promise that gets resolved on success
 * @public
 * 
 */
sap.ui.test.Opa5.prototype.waitFor = function(options) { return new jQuery.promise(); };


// ---- sap.ui.test.OpaExtension --------------------------------------------------------------------------

/**
 * OPA extension interface.
 * 
 * 
 * @class OPA extension interface.
 * @public
 * @since 1.48
 * 
 */
sap.ui.test.OpaExtension = function() {};
/**
 * Creates a new subclass of class sap.ui.test.OpaExtension with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.OpaExtension.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Returns a metadata object for class sap.ui.test.OpaExtension.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.OpaExtension.getMetadata = function() { return new sap.ui.base.Metadata(); };


// ---- sap.ui.test.OpaPlugin --------------------------------------------------------------------------

/**
 * 
 * @class A Plugin to search UI5 controls.
 * 
 * @public
 * @since 1.22
 * 
 */
sap.ui.test.OpaPlugin = function() {};
/**
 * Creates a new subclass of class sap.ui.test.OpaPlugin with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
 * 
 * @param {string} sClassName Name of the class being created
 * @param {object} [oClassInfo] Object literal with information about the class
 * @param {function} [FNMetaImpl] Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>
 * @returns {function} Created class / constructor function
 * @public
 * @static
 * 
 */
sap.ui.test.OpaPlugin.extend = function(sClassName,oClassInfo,FNMetaImpl) { return function() {}; };

/**
 * Gets all the controls of a certain type that are currently instantiated.
 * If the control type is omitted, nothing is returned.
 * 
 * @param {Function} [fnConstructorType] the control type, e.g: sap.m.CheckBox
 * @returns {Array} an array of the found controls (can be empty)
 * @public
 * 
 */
sap.ui.test.OpaPlugin.prototype.getAllControls = function(fnConstructorType) { return null; };

/**
 * Returns a control by its id
 * accepts an object with an ID property the ID can be
 * will check a control type also, if defined
 * <ul>
 * 	<li>a single string - function will return the control instance or undefined</li>
 * 	<li>an array of strings - function will return an array of found controls or an empty array</li>
 * 	<li>a regexp - function will return an array of found controls or an empty array</li>
 * </ul>
 * 
 * @param oOptions should contain an ID property. It can be of the type string or regex. If contains controlType property, will check it as well
 * @returns {sap.ui.core.Element[]} all controls matched by the regex or the control matched by the string or null
 * @public
 * 
 */
sap.ui.test.OpaPlugin.prototype.getControlByGlobalId = function(oOptions) { return new Array(); };

/**
 * Gets the constructor function of a certain controlType
 * 
 * @param {string} sControlType the name of the type eg: "sap.m.Button"
 * @returns {null|function} When the type is loaded, the contstructor is returned, if it is a lazy stub or not yet loaded, null will be returned and there will be a log entry.
 * @public
 * 
 */
sap.ui.test.OpaPlugin.prototype.getControlConstructor = function(sControlType) { return null; };

/**
 * Gets a control inside of the view (same as calling oView.byId)
 * If no ID is provided, it will return all the controls inside of a view (also nested views and their children).<br/>
 * eg : { id : "foo" } will search globally for a control with the ID foo<br/>
 * eg : { id : "foo" , viewName : "bar" } will search for a control with the ID foo inside the view with the name bar<br/>
 * eg : { viewName : "bar" } will return all the controls inside the view with the name bar<br/>
 * eg : { viewName : "bar", controlType : sap.m.Button } will return all the Buttons inside a view with the name bar<br/>
 * eg : { viewName : "bar", viewNamespace : "baz." } will return all the Controls in the view with the name baz.bar<br/>
 * 
 * @param {object} oOptions that may contain a viewName, id, viewNamespace and controlType properties.
 * @returns {sap.ui.core.Element|sap.ui.core.Element[]|null}
 * If the passed id is a string it returns the found control or null.
 * Else an array of matching controls, if the view is not found or no control is found for multiple ids an empty array is returned.
 * @public
 * 
 */
sap.ui.test.OpaPlugin.prototype.getControlInView = function(oOptions) { return new sap.ui.core.Element(); };

/**
 * Tries to find a control depending on the options provided.
 * 
 * @param {object} [oOptions] a map of options used to describe the control you are looking for.
 * @param {string} [oOptions.viewName] Controls will only be searched inside of the view.
 * Inside means, if you are giving an ID - the control will be found by using the byId function of the view.
 * If you are specifying other options than the id, the view has to be an ancestor of the control - when you call myControl.getParent,
 * you have to reach the view at some point.
 * @param {string|string[]} [oOptions.id] The ID if one or multiple controls. This can be a global ID or an ID used together with viewName. See the documentation of this parameter.
 * @param {boolean} [oOptions.visible=true] States if a control need to have a visible domref (jQUery's :visible will be used to determine this).
 * @param {boolean} [oOptions.interactable=false] @since 1.34 States if a control has to match the interactable matcher {@link sap.ui.test.matchers.Interactable}.
 * @param {boolean} [oOptions.searchOpenDialogs] Only controls in the static UI area of UI5 are searched.
 * @param {string|function} [oOptions.controlType] @since 1.40 Selects all control by their type.
 * It is usually combined with viewName or searchOpenDialogs. If no control is matching the type, an empty
 * array will be returned. Here are some samples:
 * <code>
 *     <pre>
 *         // will return an array of all visible buttons
 *         new OpaPlugin().getMatchingControls({
 *             controlType: "sap.m.Button"
 *         });
 * 
 *         // control type will also return controls that extend the control type
 *         // this will return an array of visible sap.m.List and sap.m.Table since both extend List base
 *         new OpaPlugin().getMatchingControls({
 *             controlType: "sap.m.ListBase"
 *         });
 * 
 *         // control type is often combined with viewName - only controls that are inside of the view
 *         // and have the correct type will be returned
 *         // here all sap.m.Inputs inside of a view called 'my.View' will be returned
 *         new OpaPlugin().getMatchingControls({
 *             viewName: "my.View"
 *             controlType: "sap.m.Input"
 *         });
 *     </pre>
 * </code>
 * @returns {sap.ui.core.Element|sap.ui.core.Element[]|null}
 * <ul>
 *     <li>an array of found Controls depending on the options</li>
 *     <li>an empty array if no id was given</li>
 *     <li>the found control/element when an id as a string is specified</li>
 *     <li>null if an id as string was specified</li>
 * </ul>
 * 
 * @public
 * 
 */
sap.ui.test.OpaPlugin.prototype.getMatchingControls = function(oOptions) { return new sap.ui.core.Element(); };

/**
 * Returns a metadata object for class sap.ui.test.OpaPlugin.
 * 
 * @returns {sap.ui.base.Metadata} Metadata object describing this class
 * @public
 * @static
 * 
 */
sap.ui.test.OpaPlugin.getMetadata = function() { return new sap.ui.base.Metadata(); };

/**
 * Returns the view with a specific name - if there are multiple views with that name only the first one is returned.
 * 
 * @param {string} sViewName - the name of the view
 * @returns {sap.ui.core.mvc.View} or undefined
 * @public
 * 
 */
sap.ui.test.OpaPlugin.prototype.getView = function(sViewName) { return new sap.ui.core.mvc.View(); };


// ---- sap.ui.test.PageObjectFactory --------------------------------------------------------------------------

/**
 * @class Page Object Factory
 * @extends sap.ui.base.Object
 * @protected
 * @since 1.26
 * 
 */
sap.ui.test.PageObjectFactory = function() {};
/**
 * Create a page object configured as arrangement, action and assertion to the Opa.config.
 * Use it to structure your arrangement, action and assertion based on parts of the screen to avoid name clashes and help structuring your tests.
 * @see sap.ui.test.Opa5.createPageObjects
 * @protected
 * @static
 * 
 */
sap.ui.test.PageObjectFactory.create = function() {  };

// ---- static fields of namespaces ---------------------------------------------------------------------

// ---- jQuery.device.is --------------------------------------------------------------------------

/**
 * Whether the application runs on an Android phone - based not on screen size but user-agent (so this is not guaranteed to be equal to jQuery.device.is.phone on Android)
 * https://developers.google.com/chrome/mobile/docs/user-agent
 * Some device vendors however do not follow this rule
 * @deprecated since 1.17.0: use sap.ui.Device.system.phone &amp;&amp; sap.ui.Device.os.android  instead
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.android_phone = false;

/**
 * Whether the application runs on an Android tablet - based not on screen size but user-agent (so this is not guaranteed to be equal to jQuery.device.is.tablet on Android)
 * https://developers.google.com/chrome/mobile/docs/user-agent
 * Some device vendors however do not follow this rule
 * @type {boolean}
 * @deprecated since 1.17.0: use sap.ui.Device.system.tablet &amp;&amp; sap.ui.Device.os.android  instead
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.android_tablet = false;

/**
 * Whether the running device is a desktop browser.
 * If a desktop browser runs in mobile device simulation mode (with URL parameter sap-ui-xx-fakeOS or sap-ui-xx-test-mobile),
 * this property will be false.
 * @type {boolean}
 * @deprecated since 1.17.0: use sap.ui.Device.system.desktop instead
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.desktop = false;

/**
 * Whether the application runs on an iPad
 * @type {boolean}
 * @deprecated since 1.20: shouldn't do device specific coding; if still needed, use sap.ui.Device.os.ios &amp;&amp; sap.ui.Device.system.tablet
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.ipad = false;

/**
 * Whether the application runs on an iPhone
 * @type {boolean}
 * @deprecated since 1.20: shouldn't do device specific coding; if still needed, use sap.ui.Device.os.ios &amp;&amp; sap.ui.Device.system.phone
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.iphone = false;

/**
 * Whether the device is in "landscape" orientation (also "true" when the device does not know about the orientation)
 * @type {boolean}
 * @deprecated since 1.20: use sap.ui.Device.orientation.landscape
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.landscape = false;

/**
 * Whether the running device is a phone.
 * If a desktop browser runs in mobile device simulation mode (with URL parameter sap-ui-xx-fakeOS or sap-ui-xx-test-mobile),
 * this property will also be set according to the simulated platform.
 * This property will be false when runs in desktop browser.
 * @type {boolean}
 * @deprecated since 1.17.0: use sap.ui.Device.system.phone instead
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.phone = false;

/**
 * Whether the device is in portrait orientation
 * @type {boolean}
 * @deprecated since 1.20: use sap.ui.Device.orientation.portrait
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.portrait = false;

/**
 * Whether the application runs in standalone mode without browser UI (launched from the iOS home screen)
 * @type {boolean}
 * @deprecated since 1.20: use window.navigator.standalone
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.standalone = false;

/**
 * Whether the running device is a tablet.
 * If a desktop browser runs in mobile device simulation mode (with URL parameter sap-ui-xx-fakeOS or sap-ui-xx-test-mobile),
 * this property will also be set according to the simulated platform.
 * This property will be false when runs in desktop browser.
 * @type {boolean}
 * @deprecated since 1.17.0: use sap.ui.Device.system.tablet instead
 * @public
 * 
 * @memberof jQuery.device.is
 */
jQuery.device.is.tablet = false;


// ---- jQuery.os --------------------------------------------------------------------------

/**
 * Whether the current operating system is Android
 * @type {boolean}
 * @public
 * @deprecated since 1.20: use sap.ui.Device.os.android
 * 
 * @memberof jQuery.os
 */
jQuery.os.android = false;

/**
 * Whether the current operating system is BlackBerry
 * @type {boolean}
 * @public
 * @deprecated since 1.20: use sap.ui.Device.os.blackberry
 * 
 * @memberof jQuery.os
 */
jQuery.os.blackberry = false;

/**
 * The version of the operating system parsed as a float (major and first minor version)
 * @type {float}
 * @deprecated since 1.20: use sap.ui.Device.os.version
 * @public
 * 
 * @memberof jQuery.os
 */
jQuery.os.fVersion = 0.0;

/**
 * Whether the current operating system is Apple iOS
 * @type {boolean}
 * @public
 * @deprecated since 1.20: use sap.ui.Device.os.ios
 * 
 * @memberof jQuery.os
 */
jQuery.os.ios = false;

/**
 * The name of the operating system; currently supported are: "ios", "android", "blackberry"
 * @type {string}
 * @deprecated since 1.20: use sap.ui.Device.os.name
 * @public
 * 
 * @memberof jQuery.os
 */
jQuery.os.os = "";

/**
 * The version of the operating system as a string (including minor versions)
 * @type {string}
 * @deprecated since 1.20: use sap.ui.Device.os.versionStr
 * @public
 * 
 * @memberof jQuery.os
 */
jQuery.os.version = "";

/**
 * Whether the current operating system is Windows Phone
 * @type {boolean}
 * @public
 * @deprecated since 1.20: use sap.ui.Device.os.winphone
 * 
 * @memberof jQuery.os
 */
jQuery.os.winphone = false;


// ---- jQuery.sap --------------------------------------------------------------------------

/**
 * List of DOM events that a UIArea automatically takes care of.
 * 
 * A control/element doesn't have to bind listeners for these events.
 * It instead can implement an <code>on<i>event</i>(oEvent)</code> method
 * for any of the following events that it wants to be notified about:
 * 
 * click, dblclick, contextmenu, focusin, focusout, keydown, keypress, keyup, mousedown, mouseout, mouseover,
 * mouseup, select, selectstart, dragstart, dragenter, dragover, dragleave, dragend, drop, paste, cut, input,
 * touchstart, touchend, touchmove, touchcancel, tap, swipe, swipeleft, swiperight, scrollstart, scrollstop
 * 
 * The mouse events and touch events are supported simultaneously on both desktop and mobile browsers. Do NOT
 * create both onmouse* and ontouch* functions to avoid one event being handled twice on the same control.
 * 
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.ControlEvents = undefined;

/**
 * Returns a high resolution timestamp for measurements.
 * The timestamp is based on 01/01/1970 00:00:00 as float with microsecond precision or
 * with millisecond precision, if high resolution timestamps are not available.
 * The fractional part of the timestamp represents fractions of a millisecond.
 * Converting to a <code>Date</code> is possible using <code>new Date(jQuery.sap.now())</code>
 * 
 * @returns {float} high resolution timestamp for measurements
 * @public
 * 
 * @memberof jQuery.sap
 */
jQuery.sap.now = undefined;


// ---- jQuery.sap.history.NavType --------------------------------------------------------------------------

/**
 * This indicates that the new hash is achieved by pressing the back button.
 * @public
 * @constant
 * 
 */
jQuery.sap.history.NavType.Back = "";

/**
 * This indicates that the new hash is restored from the bookmark.
 * @public
 * @constant
 * 
 */
jQuery.sap.history.NavType.Bookmark = "";

/**
 * This indicates that the new hash is achieved by pressing the forward button.
 * @public
 * @constant
 * 
 */
jQuery.sap.history.NavType.Forward = "";

/**
 * This indicates that the new hash is achieved by some unknown direction.
 * This happens when the user navigates out of the application and then click on the forward button
 * in the browser to navigate back to the application.
 * @public
 * @constant
 * 
 */
jQuery.sap.history.NavType.Unknown = "";


// ---- jQuery.sap.KeyCodes --------------------------------------------------------------------------

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.A = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.ALT = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.ARROW_DOWN = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.ARROW_LEFT = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.ARROW_RIGHT = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.ARROW_UP = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.B = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.BACKSLASH = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.BACKSPACE = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.BREAK = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.C = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.CAPS_LOCK = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.COMMA = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.CONTEXT_MENU = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.CONTROL = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.D = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.DELETE = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.DIGIT_0 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.DIGIT_1 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.DIGIT_2 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.DIGIT_3 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.DIGIT_4 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.DIGIT_5 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.DIGIT_6 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.DIGIT_7 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.DIGIT_8 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.DIGIT_9 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.DOT = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.E = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.END = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.ENTER = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.EQUALS = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.ESCAPE = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.F = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.F1 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.F10 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.F11 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.F12 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.F2 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.F3 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.F4 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.F5 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.F6 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.F7 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.F8 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.F9 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.G = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.GREAT_ACCENT = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.H = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.HOME = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.I = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.INSERT = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.J = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.K = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.L = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.M = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.MINUS = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.N = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUM_LOCK = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_0 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_1 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_2 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_3 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_4 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_5 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_6 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_7 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_8 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_9 = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_ASTERISK = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_COMMA = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_MINUS = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_PLUS = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.NUMPAD_SLASH = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.O = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.OPEN_BRACKET = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.P = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.PAGE_DOWN = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.PAGE_UP = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.PIPE = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.PLUS = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.PRINT = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.Q = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.R = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.S = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.SCROLL_LOCK = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.SEMICOLON = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.SHIFT = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.SINGLE_QUOTE = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.SLASH = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.SLEEP = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.SPACE = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.T = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.TAB = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.TURN_OFF = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.U = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.V = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.W = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.WINDOWS = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.X = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.Y = 0.0;

/**
 * @type number
 * @public
 * 
 */
jQuery.sap.KeyCodes.Z = 0.0;


// ---- jQuery.sap.log.Level --------------------------------------------------------------------------

/**
 * Debug level. Use this for logging information necessary for debugging
 * @public
 * 
 */
jQuery.sap.log.Level.DEBUG = 0;

/**
 * Error level. Use this for logging of erroneous but still recoverable situations
 * @public
 * 
 */
jQuery.sap.log.Level.ERROR = 0;

/**
 * Fatal level. Use this for logging unrecoverable situations
 * @public
 * 
 */
jQuery.sap.log.Level.FATAL = 0;

/**
 * Info level. Use this for logging information of purely informative nature
 * @public
 * 
 */
jQuery.sap.log.Level.INFO = 0;

/**
 * Do not log anything
 * @public
 * 
 */
jQuery.sap.log.Level.NONE = 0;

/**
 * Trace level. Use this for tracing the program flow.
 * @public
 * 
 */
jQuery.sap.log.Level.TRACE = 0;

/**
 * Warning level. Use this for logging unwanted but foreseen situations
 * @public
 * 
 */
jQuery.sap.log.Level.WARNING = 0;


// ---- jQuery.sap.PseudoEvents --------------------------------------------------------------------------

/**
 * Pseudo event for keyboard backspace without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapbackspace = undefined;

/**
 * Pseudo event for keyboard backspace with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapbackspacemodifiers = undefined;

/**
 * Pseudo event for pseudo bottom event
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapbottom = undefined;

/**
 * Pseudo event for pseudo collapse event (keyboard numpad -) without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapcollapse = undefined;

/**
 * Pseudo event for pseudo collapse event (keyboard numpad *)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapcollapseall = undefined;

/**
 * Pseudo event for pseudo collapse event (keyboard numpad -) with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapcollapsemodifiers = undefined;

/**
 * Pseudo event for pseudo 'decrease' event without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapdecrease = undefined;

/**
 * Pseudo event for pseudo 'decrease' event with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapdecreasemodifiers = undefined;

/**
 * Pseudo event indicating delayed double click (e.g. for inline edit)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapdelayeddoubleclick = undefined;

/**
 * Pseudo event for keyboard delete without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapdelete = undefined;

/**
 * Pseudo event for keyboard delete with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapdeletemodifiers = undefined;

/**
 * Pseudo event for keyboard arrow down without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapdown = undefined;

/**
 * Pseudo event for keyboard arrow down with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapdownmodifiers = undefined;

/**
 * Pseudo event for keyboard End without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapend = undefined;

/**
 * Pseudo event for keyboard End with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapendmodifiers = undefined;

/**
 * Pseudo event for keyboard enter without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapenter = undefined;

/**
 * Pseudo event for keyboard enter with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapentermodifiers = undefined;

/**
 * Pseudo event for keyboard escape
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapescape = undefined;

/**
 * Pseudo event for pseudo expand event (keyboard numpad +) without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapexpand = undefined;

/**
 * Pseudo event for pseudo expand event (keyboard numpad +) with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapexpandmodifiers = undefined;

/**
 * Pseudo event for pseudo 'hide' event (Alt + up-Arrow)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.saphide = undefined;

/**
 * Pseudo event for keyboard Home/Pos1 with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.saphome = undefined;

/**
 * Pseudo event for keyboard Home/Pos1 without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.saphomemodifiers = undefined;

/**
 * Pseudo event for pseudo 'increase' event without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapincrease = undefined;

/**
 * Pseudo event for pseudo 'increase' event with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapincreasemodifiers = undefined;

/**
 * Pseudo event for keyboard arrow left without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapleft = undefined;

/**
 * Pseudo event for keyboard arrow left with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapleftmodifiers = undefined;

/**
 * Pseudo event for pressing the '-' (minus) sign.
 * @since 1.25.0
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapminus = undefined;

/**
 * Pseudo event for pseudo 'next' event without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapnext = undefined;

/**
 * Pseudo event for pseudo 'next' event with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapnextmodifiers = undefined;

/**
 * Pseudo event for keyboard page down without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sappagedown = undefined;

/**
 * Pseudo event for keyboard page down with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sappagedownmodifiers = undefined;

/**
 * Pseudo event for keyboard page up without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sappageup = undefined;

/**
 * Pseudo event for keyboard page up with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sappageupmodifiers = undefined;

/**
 * Pseudo event for pressing the '+' (plus) sign.
 * @since 1.25.0
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapplus = undefined;

/**
 * Pseudo event for pseudo 'previous' event without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapprevious = undefined;

/**
 * Pseudo event for pseudo 'previous' event with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sappreviousmodifiers = undefined;

/**
 * Pseudo event for keyboard arrow right without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapright = undefined;

/**
 * Pseudo event for keyboard arrow right with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.saprightmodifiers = undefined;

/**
 * Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapselect = undefined;

/**
 * Pseudo event for pseudo 'select' event... space, enter, ... with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapselectmodifiers = undefined;

/**
 * Pseudo event for pseudo 'show' event (F4, Alt + down-Arrow)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapshow = undefined;

/**
 * Pseudo event for pseudo skip back (F6 + shift modifier)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapskipback = undefined;

/**
 * Pseudo event for pseudo skip forward (F6 + no modifier)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapskipforward = undefined;

/**
 * Pseudo event for keyboard space without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapspace = undefined;

/**
 * Pseudo event for keyboard space with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapspacemodifiers = undefined;

/**
 * Pseudo event for keyboard tab (TAB + no modifier)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.saptabnext = undefined;

/**
 * Pseudo event for keyboard tab (TAB + shift modifier)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.saptabprevious = undefined;

/**
 * Pseudo event for  pseudo top event
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.saptop = undefined;

/**
 * Pseudo event for keyboard arrow up without modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapup = undefined;

/**
 * Pseudo event for keyboard arrow up with modifiers (Ctrl, Alt or Shift)
 * @public
 * 
 * @memberof jQuery.sap.PseudoEvents
 */
jQuery.sap.PseudoEvents.sapupmodifiers = undefined;


// ---- jQuery.sap.storage.Type --------------------------------------------------------------------------

/**
 * Indicates usage of the browser's globalStorage feature
 * @public
 * 
 */
jQuery.sap.storage.Type.global = "";

/**
 * Indicates usage of the browser's localStorage feature
 * @public
 * 
 */
jQuery.sap.storage.Type.local = "";

/**
 * Indicates usage of the browser's sessionStorage feature
 * @public
 * 
 */
jQuery.sap.storage.Type.session = "";


// ---- jQuery.support --------------------------------------------------------------------------

/**
 * Whether the current browser supports (named) CSS animations
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.cssAnimations = false;

/**
 * Whether the current browser supports CSS gradients. Note that ANY support for CSS gradients leads to "true" here, no matter what the syntax is.
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.cssGradients = false;

/**
 * Whether the current browser supports (2D) CSS transforms
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.cssTransforms = false;

/**
 * Whether the current browser supports 3D CSS transforms
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.cssTransforms3d = false;

/**
 * Whether the current browser supports CSS transitions
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.cssTransitions = false;

/**
 * Whether the current browser supports the OLD CSS3 Flexible Box Layout directly or via vendor prefixes
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.flexBoxLayout = false;

/**
 * Whether the current browser supports only prefixed flexible layout properties
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.flexBoxPrefixed = false;

/**
 * Whether the current browser supports any kind of Flexible Box Layout directly or via vendor prefixes
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.hasFlexBoxSupport = false;

/**
 * Whether the current browser supports the IE10 CSS3 Flexible Box Layout directly or via vendor prefixes
 * @type {boolean}
 * @public
 * @since 1.12.0
 * 
 * @memberof jQuery.support
 */
jQuery.support.ie10FlexBoxLayout = false;

/**
 * Whether the current browser supports the NEW CSS3 Flexible Box Layout directly or via vendor prefixes
 * @type {boolean}
 * @public
 * 
 * @memberof jQuery.support
 */
jQuery.support.newFlexBoxLayout = false;


// ---- sap.ui.core.AccessibleLandmarkRole --------------------------------------------------------------------------

/**
 * Represents the ARIA role <code>banner</code>.
 * 
 * A banner usually appears at the top of the page and typically spans the full width.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleLandmarkRole.Banner = "";

/**
 * Represents the ARIA role <code>complementary</code>.
 * 
 * A section of the page, designed to be complementary to the main content at a similar level in the DOM hierarchy.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleLandmarkRole.Complementary = "";

/**
 * Represents the ARIA role <code>main</code>.
 * 
 * The main content of a page.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleLandmarkRole.Main = "";

/**
 * Represents the ARIA role <code>navigation</code>.
 * 
 * A region that contains a collection of items and objects that, as a whole, combine to create a navigation facility.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleLandmarkRole.Navigation = "";

/**
 * No explicit role is applicable.
 * 
 * The interpretation of this value depends on the control / element which defines a property with this type.
 * Normally this value means that no accessible landmark should be written.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleLandmarkRole.None = "";

/**
 * Represents the ARIA role <code>region</code>.
 * 
 * A section of a page, that is important enough to be included in a page summary or table of contents.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleLandmarkRole.Region = "";

/**
 * Represents the ARIA role <code>search</code>.
 * 
 * A region that contains a collection of items and objects that, as a whole, combine to create a search facility.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleLandmarkRole.Search = "";


// ---- sap.ui.core.AccessibleRole --------------------------------------------------------------------------

/**
 * A message with an alert or error information.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Alert = "";

/**
 * A separate window with an alert or error information.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.AlertDialog = "";

/**
 * A software unit executing a set of tasks for the user.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Application = "";

/**
 * Usually defined as the advertisement at the top of a web page.
 * The banner content typically contains the site or company logo, or other key advertisements.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Banner = "";

/**
 * Allows user-triggered actions.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Button = "";

/**
 * A control that has three possible values: true, false, mixed.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Checkbox = "";

/**
 * A table cell containing header information for a column.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.ColumnHeader = "";

/**
 * Allows selecting an item from a list, or to enter data directly in the input field.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Combobox = "";

/**
 * Information about the content on the page. Examples are footnotes, copyrights, or links to privacy statements.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.ContentInfo = "";

/**
 * The content of the associated element represents a definition.
 * If there is a definition element within the content, this one represents the term being defined.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Definition = "";

/**
 * Descriptive content for a page element.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Description = "";

/**
 * A small window that is designed to interrupt the current application processing
 * in order to inform the user and to get some response.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Dialog = "";

/**
 * A list of references to members of a single group.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Directory = "";

/**
 * Content that contains related information, such as a book.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Document = "";

/**
 * Contains cells of tabular data arranged in rows and columns, for example in a table.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Grid = "";

/**
 * A table cell in a grid where the cells can be active, editable, and selectable.
 * Cells may have functional relationships to controls, for example.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.GridCell = "";

/**
 * A section of user interface objects.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Group = "";

/**
 * A heading for a section of the page.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Heading = "";

/**
 * A container for a collection of elements that form an image.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Img = "";

/**
 * An interactive reference to a resource.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Link = "";

/**
 * A container for non-interactive list items which are the children of the list.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.List = "";

/**
 * A widget that allows the user to select one or more items from a list.
 * The items within the list are static and can contain images.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Listbox = "";

/**
 * A single item in a list.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.ListItem = "";

/**
 * An area where new information is added, or old information disappears.
 * Information types are chat logs, messaging, or error logs, for example.
 * The log contains a sequence: New information is always added to the end of the log.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Log = "";

/**
 * Defines the main content of a document.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Main = "";

/**
 * Is used to scroll text across the page.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Marquee = "";

/**
 * Offers a list of choices to the user.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Menu = "";

/**
 * A container for menu items where each item may activate a submenu.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Menubar = "";

/**
 * A child in a menu.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.MenuItem = "";

/**
 * A checkable menu item (tri-state).
 * @public
 * 
 */
sap.ui.core.AccessibleRole.MenuItemCheckbox = "";

/**
 * A menu item which is part of a group of menuitemradio roles.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.MenuItemRadio = "";

/**
 * A collection of links suitable for use when navigating the document or related documents.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Navigation = "";

/**
 * The content is parenthetic or ancillary to the main content of the resource.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Note = "";

/**
 * A selectable item in a list represented by a select.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Option = "";

/**
 * An element whose role is presentational does not need to be mapped to the accessibility API.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Presentation = "";

/**
 * Shows the execution progress in applications providing functions that take a long time.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.ProgressBar = "";

/**
 * An option in single-select list. Only one radio control in a radiogroup can be selected at the same time.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Radio = "";

/**
 * A group of radio controls.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.RadioGroup = "";

/**
 * A large section on the web page.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Region = "";

/**
 * A row of table cells.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Row = "";

/**
 * A table cell containing header information for a row.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.RowHeader = "";

/**
 * A search section of a web document. In many cases, this is a form used to submit search requests about the site,
 * or a more general Internet wide search service.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Search = "";

/**
 * A unique section of the document. In the case of a portal, this may include time display, weather forecast,
 * or stock price.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Secondary = "";

/**
 * Indicates that the element contains content that is related to the main content of the page.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.SeeAlso = "";

/**
 * A line or bar that separates sections of content.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Separator = "";

/**
 * A user input where the user selects an input in a given range. This form of range expects an analogous keyboard
 * interface.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Slider = "";

/**
 * Allows users to select a value from a list of given entries where exactly one value is displayed at runtime, and
 * the other ones can be displayed by scrolling using the arrow up and arrow down key.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.SpinButton = "";

/**
 * A container for processing advisory information.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Status = "";

/**
 * A header for a tab panel.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Tab = "";

/**
 * A list of tabs which are references to tab panels.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Tablist = "";

/**
 * A container for the resources associated with a tab.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Tabpanel = "";

/**
 * Inputs that allow free-form text as their value.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Textbox = "";

/**
 * A numerical counter which indicates an amount of elapsed time from a start point,
 * or of the time remaining until a certain end point.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Timer = "";

/**
 * A collection of commonly used functions represented in compact visual form.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Toolbar = "";

/**
 * A popup that displays a description for an element when the user passes over or rests on that element.
 * Supplement to the normal tooltip processing of the user agent.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Tooltip = "";

/**
 * A form of a list (tree) having groups (subtrees) inside groups (subtrees), where the sub trees can be collapsed and expanded.
 * 
 * @public
 * 
 */
sap.ui.core.AccessibleRole.Tree = "";

/**
 * A grid whose rows are expandable and collapsable in the same manner as the ones of trees.
 * @public
 * 
 */
sap.ui.core.AccessibleRole.TreeGrid = "";

/**
 * A tree node
 * @public
 * 
 */
sap.ui.core.AccessibleRole.TreeItem = "";


// ---- sap.ui.core.BarColor --------------------------------------------------------------------------

/**
 * Color: yellow (#faf2b0)
 * @public
 * 
 */
sap.ui.core.BarColor.CRITICAL = "";

/**
 * Color: red (#ff9a90)
 * @public
 * 
 */
sap.ui.core.BarColor.NEGATIVE = "";

/**
 * Color: blue (#b8d0e8)
 * @public
 * 
 */
sap.ui.core.BarColor.NEUTRAL = "";

/**
 * Color: green (#b5e7a8)
 * @public
 * 
 */
sap.ui.core.BarColor.POSITIVE = "";


// ---- sap.ui.core.CalendarType --------------------------------------------------------------------------

/**
 * The Gregorian calendar
 * @public
 * 
 */
sap.ui.core.CalendarType.Gregorian = "";

/**
 * The Islamic calendar
 * @public
 * 
 */
sap.ui.core.CalendarType.Islamic = "";

/**
 * The Japanese emperor calendar
 * @public
 * 
 */
sap.ui.core.CalendarType.Japanese = "";

/**
 * The Persian Jalali calendar
 * @public
 * 
 */
sap.ui.core.CalendarType.Persian = "";


// ---- sap.ui.core.ComponentLifecycle --------------------------------------------------------------------------

/**
 * Application managed lifecycle means that the Application takes care
 * to destroy the Components associated with the ComponentContainer.
 * @public
 * 
 */
sap.ui.core.ComponentLifecycle.Application = "";

/**
 * Container managed lifecycle means that the ComponentContainer takes
 * care to destroy the Components associated with the ComponentContainer
 * once the ComponentContainer is destroyed or a new Component is associated.
 * @public
 * 
 */
sap.ui.core.ComponentLifecycle.Container = "";

/**
 * Legacy lifecycle means that the ComponentContainer takes care
 * to destroy the Component which is associated with the
 * ComponentContainer once the ComponentContainer is destroyed but
 * not when a new Component is associated.
 * @public
 * 
 */
sap.ui.core.ComponentLifecycle.Legacy = "";


// ---- sap.ui.core.Design --------------------------------------------------------------------------

/**
 * Mono space font
 * @public
 * 
 */
sap.ui.core.Design.Monospace = "";

/**
 * Standard font
 * @public
 * 
 */
sap.ui.core.Design.Standard = "";


// ---- sap.ui.core.format.NumberFormat.RoundingMode --------------------------------------------------------------------------

/**
 * Rounding mode to round away from zero
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.AWAY_FROM_ZERO = "";

/**
 * Rounding mode to round towards positive infinity
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.CEILING = "";

/**
 * Rounding mode to round towards negative infinity
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.FLOOR = "";

/**
 * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round away from zero.
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.HALF_AWAY_FROM_ZERO = "";

/**
 * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards positive infinity.
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.HALF_CEILING = "";

/**
 * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards negative infinity.
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.HALF_FLOOR = "";

/**
 * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards zero.
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.HALF_TOWARDS_ZERO = "";

/**
 * Rounding mode to round towards zero
 * @public
 * 
 */
sap.ui.core.format.NumberFormat.RoundingMode.TOWARDS_ZERO = "";


// ---- sap.ui.core.HorizontalAlign --------------------------------------------------------------------------

/**
 * Locale-specific positioning at the beginning of the line
 * @public
 * 
 */
sap.ui.core.HorizontalAlign.Begin = "";

/**
 * Centered alignment of text
 * @public
 * 
 */
sap.ui.core.HorizontalAlign.Center = "";

/**
 * Locale-specific positioning at the end of the line
 * @public
 * 
 */
sap.ui.core.HorizontalAlign.End = "";

/**
 * Hard option for left alignment
 * @public
 * 
 */
sap.ui.core.HorizontalAlign.Left = "";

/**
 * Hard option for right alignment
 * @public
 * 
 */
sap.ui.core.HorizontalAlign.Right = "";


// ---- sap.ui.core.IconColor --------------------------------------------------------------------------

/**
 * Critical color
 * @public
 * 
 */
sap.ui.core.IconColor.Critical = "";

/**
 * Default color (brand color)
 * @public
 * 
 */
sap.ui.core.IconColor.Default = "";

/**
 * Negative color
 * @public
 * 
 */
sap.ui.core.IconColor.Negative = "";

/**
 * Neutral color.
 * @public
 * 
 */
sap.ui.core.IconColor.Neutral = "";

/**
 * Positive color
 * @public
 * 
 */
sap.ui.core.IconColor.Positive = "";


// ---- sap.ui.core.ImeMode --------------------------------------------------------------------------

/**
 * IME is used for entering characters.
 * @public
 * 
 */
sap.ui.core.ImeMode.Active = "";

/**
 * The value is automatically computed by the user agent.
 * @public
 * 
 */
sap.ui.core.ImeMode.Auto = "";

/**
 * IME is disabled.
 * @public
 * 
 */
sap.ui.core.ImeMode.Disabled = "";

/**
 * IME is not used for entering characters.
 * @public
 * 
 */
sap.ui.core.ImeMode.Inactive = "";


// ---- sap.ui.core.MessageType --------------------------------------------------------------------------

/**
 * Message is an error
 * @public
 * 
 */
sap.ui.core.MessageType.Error = "";

/**
 * Message should be just an information
 * @public
 * 
 */
sap.ui.core.MessageType.Information = "";

/**
 * Message has no specific level
 * @public
 * 
 */
sap.ui.core.MessageType.None = "";

/**
 * Message is a success message
 * @public
 * 
 */
sap.ui.core.MessageType.Success = "";

/**
 * Message is a warning
 * @public
 * 
 */
sap.ui.core.MessageType.Warning = "";


// ---- sap.ui.core.mvc.ViewType --------------------------------------------------------------------------

/**
 * HTML view
 * @public
 * 
 */
sap.ui.core.mvc.ViewType.HTML = "";

/**
 * JS View
 * @public
 * 
 */
sap.ui.core.mvc.ViewType.JS = "";

/**
 * JSON View
 * @public
 * 
 */
sap.ui.core.mvc.ViewType.JSON = "";

/**
 * Template View
 * @public
 * 
 */
sap.ui.core.mvc.ViewType.Template = "";

/**
 * XML view
 * @public
 * 
 */
sap.ui.core.mvc.ViewType.XML = "";


// ---- sap.ui.core.mvc.XMLView.PreprocessorType --------------------------------------------------------------------------

/**
 * This preprocessor receives the control tree produced through the view source
 * @public
 * 
 */
sap.ui.core.mvc.XMLView.PreprocessorType.CONTROLS = "";

/**
 * This preprocessor receives a valid xml source for View creation without any template tags but with control
 * declarations. These include their full IDs by which they can also be queried during runtime.
 * @public
 * 
 */
sap.ui.core.mvc.XMLView.PreprocessorType.VIEWXML = "";

/**
 * This preprocessor receives the plain xml source of the view and should also return a valid
 * xml ready for view creation
 * @public
 * 
 */
sap.ui.core.mvc.XMLView.PreprocessorType.XML = "";


// ---- sap.ui.core.OpenState --------------------------------------------------------------------------

/**
 * Closed and currently not changing states.
 * @public
 * 
 */
sap.ui.core.OpenState.CLOSED = "";

/**
 * Still open, but in the process of going to the CLOSED state.
 * @public
 * 
 */
sap.ui.core.OpenState.CLOSING = "";

/**
 * Open and currently not changing states.
 * @public
 * 
 */
sap.ui.core.OpenState.OPEN = "";

/**
 * Already left the CLOSED state, is not OPEN yet, but in the process of getting OPEN.
 * @public
 * 
 */
sap.ui.core.OpenState.OPENING = "";


// ---- sap.ui.core.Orientation --------------------------------------------------------------------------

/**
 * Arrange Horizontally
 * @public
 * 
 */
sap.ui.core.Orientation.Horizontal = "";

/**
 * Arrange Vertically
 * @public
 * 
 */
sap.ui.core.Orientation.Vertical = "";


// ---- sap.ui.core.Popup.Dock --------------------------------------------------------------------------

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.BeginBottom = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.BeginCenter = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.BeginTop = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.CenterBottom = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.CenterCenter = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.CenterTop = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.EndBottom = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.EndCenter = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.EndTop = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.LeftBottom = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.LeftCenter = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.LeftTop = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.RightBottom = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.RightCenter = undefined;

/**
 * @public
 * 
 * @memberof sap.ui.core.Popup.Dock
 */
sap.ui.core.Popup.Dock.RightTop = undefined;


// ---- sap.ui.core.Priority --------------------------------------------------------------------------

/**
 * High priority
 * @public
 * 
 */
sap.ui.core.Priority.High = "";

/**
 * Low priority
 * @public
 * 
 */
sap.ui.core.Priority.Low = "";

/**
 * Medium priority
 * @public
 * 
 */
sap.ui.core.Priority.Medium = "";

/**
 * Default, none priority
 * @public
 * 
 */
sap.ui.core.Priority.None = "";


// ---- sap.ui.core.routing.HistoryDirection --------------------------------------------------------------------------

/**
 * The page has already been navigated to and it was the precessor of the previous page
 * @public
 * 
 */
sap.ui.core.routing.HistoryDirection.Backwards = "";

/**
 * The page has already been navigated to and it was the successor of the previous page
 * @public
 * 
 */
sap.ui.core.routing.HistoryDirection.Forwards = "";

/**
 * A new Entry is added to the history
 * @public
 * 
 */
sap.ui.core.routing.HistoryDirection.NewEntry = "";

/**
 * A Navigation took place, but it could be any of the other three states
 * @public
 * 
 */
sap.ui.core.routing.HistoryDirection.Unknown = "";


// ---- sap.ui.core.ScrollBarAction --------------------------------------------------------------------------

/**
 * Scrolling done by dragging the scroll bar's paint thumb
 * @public
 * 
 */
sap.ui.core.ScrollBarAction.Drag = "";

/**
 * Scrolling done by mouse wheel
 * @public
 * 
 */
sap.ui.core.ScrollBarAction.MouseWheel = "";

/**
 * Range scrolling caused by clicking track area or using page up or page down key.
 * @public
 * 
 */
sap.ui.core.ScrollBarAction.Page = "";

/**
 * Single step scrolling caused by clicking an arrow button or arrow key.
 * @public
 * 
 */
sap.ui.core.ScrollBarAction.Step = "";


// ---- sap.ui.core.Scrolling --------------------------------------------------------------------------

/**
 * A scroll bar is shown if the content requires more space than the given space (rectangle) provides.
 * @public
 * 
 */
sap.ui.core.Scrolling.Auto = "";

/**
 * No scroll bar is shown, and the content stays in the given rectangle.
 * @public
 * 
 */
sap.ui.core.Scrolling.Hidden = "";

/**
 * No scroll bar provided even if the content is larger than the available space.
 * @public
 * 
 */
sap.ui.core.Scrolling.None = "";

/**
 * A scroll bar is always shown even if the space is large enough for the current content.
 * @public
 * 
 */
sap.ui.core.Scrolling.Scroll = "";


// ---- sap.ui.core.TextAlign --------------------------------------------------------------------------

/**
 * Locale-specific positioning at the beginning of the line.
 * @public
 * 
 */
sap.ui.core.TextAlign.Begin = "";

/**
 * Centered text alignment.
 * @public
 * 
 */
sap.ui.core.TextAlign.Center = "";

/**
 * Locale-specific positioning at the end of the line.
 * @public
 * 
 */
sap.ui.core.TextAlign.End = "";

/**
 * Sets no text align, so the browser default is used.
 * @public
 * @since 1.26.0
 * 
 */
sap.ui.core.TextAlign.Initial = "";

/**
 * Hard option for left alignment.
 * @public
 * 
 */
sap.ui.core.TextAlign.Left = "";

/**
 * Hard option for right alignment.
 * @public
 * 
 */
sap.ui.core.TextAlign.Right = "";


// ---- sap.ui.core.TextDirection --------------------------------------------------------------------------

/**
 * Inherits the direction from its parent control/container.
 * @public
 * 
 */
sap.ui.core.TextDirection.Inherit = "";

/**
 * Specifies left-to-right text direction.
 * @public
 * 
 */
sap.ui.core.TextDirection.LTR = "";

/**
 * Specifies right-to-left text direction.
 * @public
 * 
 */
sap.ui.core.TextDirection.RTL = "";


// ---- sap.ui.core.TitleLevel --------------------------------------------------------------------------

/**
 * The level of the title is choosen by the control rendering the title.
 * @public
 * 
 */
sap.ui.core.TitleLevel.Auto = "";

/**
 * The Title is of level 1.
 * @public
 * 
 */
sap.ui.core.TitleLevel.H1 = "";

/**
 * The Title is of level 2
 * @public
 * 
 */
sap.ui.core.TitleLevel.H2 = "";

/**
 * The Title is of level 3
 * @public
 * 
 */
sap.ui.core.TitleLevel.H3 = "";

/**
 * The Title is of level 4
 * @public
 * 
 */
sap.ui.core.TitleLevel.H4 = "";

/**
 * The Title is of level 5
 * @public
 * 
 */
sap.ui.core.TitleLevel.H5 = "";

/**
 * The Title is of level 6
 * @public
 * 
 */
sap.ui.core.TitleLevel.H6 = "";


// ---- sap.ui.core.ValueState --------------------------------------------------------------------------

/**
 * State is not valid.
 * @public
 * 
 */
sap.ui.core.ValueState.Error = "";

/**
 * State is not specified.
 * @public
 * 
 */
sap.ui.core.ValueState.None = "";

/**
 * State is valid.
 * @public
 * 
 */
sap.ui.core.ValueState.Success = "";

/**
 * State is valid but with a warning.
 * @public
 * 
 */
sap.ui.core.ValueState.Warning = "";


// ---- sap.ui.core.VerticalAlign --------------------------------------------------------------------------

/**
 * 
 * Content is aligned at the bottom.
 * 
 * @public
 * 
 */
sap.ui.core.VerticalAlign.Bottom = "";

/**
 * 
 * Content respect the parent's vertical alignment.
 * 
 * @public
 * 
 */
sap.ui.core.VerticalAlign.Inherit = "";

/**
 * 
 * Content is centered vertically .
 * 
 * @public
 * 
 */
sap.ui.core.VerticalAlign.Middle = "";

/**
 * 
 * Content is aligned at the top.
 * 
 * @public
 * 
 */
sap.ui.core.VerticalAlign.Top = "";


// ---- sap.ui.core.Wrapping --------------------------------------------------------------------------

/**
 * Inserts actual line breaks in the text at the wrap point.
 * @public
 * 
 */
sap.ui.core.Wrapping.Hard = "";

/**
 * The standard browser behavior is considered for wrapping.
 * @public
 * 
 */
sap.ui.core.Wrapping.None = "";

/**
 * Wrapping shall not be allowed.
 * @public
 * 
 */
sap.ui.core.Wrapping.Off = "";

/**
 * The text is actually on the same line but displayed within several lines.
 * @public
 * 
 */
sap.ui.core.Wrapping.Soft = "";


// ---- sap.ui.core.ws.ReadyState --------------------------------------------------------------------------

/**
 * The connection has been closed or could not be opened.
 * @public
 * 
 */
sap.ui.core.ws.ReadyState.CLOSED = 0;

/**
 * The connection is going through the closing handshake.
 * @public
 * 
 */
sap.ui.core.ws.ReadyState.CLOSING = 0;

/**
 * The connection has not yet been established.
 * @public
 * 
 */
sap.ui.core.ws.ReadyState.CONNECTING = 0;

/**
 * The WebSocket connection is established and communication is possible.
 * @public
 * 
 */
sap.ui.core.ws.ReadyState.OPEN = 0;


// ---- sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS --------------------------------------------------------------------------

/**
 * Protocol v10.pcp.sap.com
 * @public
 * 
 * @memberof sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS
 */
sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS.v10 = undefined;


// ---- sap.ui.Device.browser --------------------------------------------------------------------------

/**
 * If this flag is set to <code>true</code>, the Google Chrome browser is used.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.chrome = false;

/**
 * If this flag is set to <code>true</code>, the Microsoft Edge browser is used.
 * @type boolean
 * @since 1.30.0
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.edge = false;

/**
 * If this flag is set to <code>true</code>, the Mozilla Firefox browser is used.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.firefox = false;

/**
 * If this flag is set to <code>true</code>, the Safari browser runs in standalone fullscreen mode on iOS.
 * 
 * <b>Note:</b> This flag is only available if the Safari browser was detected. Furthermore, if this mode is detected,
 * technically not a standard Safari is used. There might be slight differences in behavior and detection, e.g.
 * the availability of {@link sap.ui.Device.browser.version}.
 * @type boolean
 * @since 1.31.0
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.fullscreen = false;

/**
 * If this flag is set to <code>true</code>, the Microsoft Internet Explorer browser is used.
 * @type boolean
 * @deprecated since 1.20, use {@link sap.ui.Device.browser.msie} instead.
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.internet_explorer = false;

/**
 * If this flag is set to <code>true</code>, the mobile variant of the browser is used or
 * a tablet or phone device is detected.
 * 
 * <b>Note:</b> This information might not be available for all browsers.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.mobile = false;

/**
 * If this flag is set to <code>true</code>, a browser featuring a Mozilla engine is used.
 * @type boolean
 * @since 1.20.0
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.mozilla = false;

/**
 * If this flag is set to <code>true</code>, the Microsoft Internet Explorer browser is used.
 * @type boolean
 * @since 1.20.0
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.msie = false;

/**
 * The name of the browser.
 * 
 * @see sap.ui.Device.browser.BROWSER
 * @type String
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.name = null;

/**
 * If this flag is set to <code>true</code>, the Apple Safari browser is used.
 * 
 * <b>Note:</b>
 * This flag is also <code>true</code> when the standalone (fullscreen) mode or webview is used on iOS devices.
 * Please also note the flags {@link sap.ui.Device.browser.fullscreen} and {@link sap.ui.Device.browser.webview}.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.safari = false;

/**
 * The version of the browser as <code>float</code>.
 * 
 * Might be <code>-1</code> if no version can be determined.
 * @type float
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.version = 0.0;

/**
 * The version of the browser as <code>string</code>.
 * 
 * Might be empty if no version can be determined.
 * @type String
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.versionStr = null;

/**
 * If this flag is set to <code>true</code>, a browser featuring a Webkit engine is used.
 * @type boolean
 * @since 1.20.0
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.webkit = false;

/**
 * If this flag is set to <code>true</code>, the Safari browser runs in webview mode on iOS.
 * 
 * <b>Note:</b> This flag is only available if the Safari browser was detected. Furthermore, if this mode is detected,
 * technically not a standard Safari is used. There might be slight differences in behavior and detection, e.g.
 * the availability of {@link sap.ui.Device.browser.version}.
 * @type boolean
 * @since 1.31.0
 * @public
 * 
 * @memberof sap.ui.Device.browser
 */
sap.ui.Device.browser.webview = false;


// ---- sap.ui.Device.browser.BROWSER --------------------------------------------------------------------------

/**
 * Android stock browser name.
 * 
 * @see sap.ui.Device.browser.name
 * @public
 * 
 * @memberof sap.ui.Device.browser.BROWSER
 */
sap.ui.Device.browser.BROWSER.ANDROID = undefined;

/**
 * Chrome browser name.
 * 
 * @see sap.ui.Device.browser.name
 * @public
 * 
 * @memberof sap.ui.Device.browser.BROWSER
 */
sap.ui.Device.browser.BROWSER.CHROME = undefined;

/**
 * Edge browser name.
 * 
 * @see sap.ui.Device.browser.name
 * @since 1.28.0
 * @public
 * 
 * @memberof sap.ui.Device.browser.BROWSER
 */
sap.ui.Device.browser.BROWSER.EDGE = undefined;

/**
 * Firefox browser name.
 * 
 * @see sap.ui.Device.browser.name
 * @public
 * 
 * @memberof sap.ui.Device.browser.BROWSER
 */
sap.ui.Device.browser.BROWSER.FIREFOX = undefined;

/**
 * Internet Explorer browser name.
 * 
 * @see sap.ui.Device.browser.name
 * @public
 * 
 * @memberof sap.ui.Device.browser.BROWSER
 */
sap.ui.Device.browser.BROWSER.INTERNET_EXPLORER = undefined;

/**
 * Safari browser name.
 * 
 * @see sap.ui.Device.browser.name
 * @public
 * 
 * @memberof sap.ui.Device.browser.BROWSER
 */
sap.ui.Device.browser.BROWSER.SAFARI = undefined;


// ---- sap.ui.Device.media.RANGESETS --------------------------------------------------------------------------

/**
 * A 3-step range set (S-L).
 * 
 * The ranges of this set are:
 * <ul>
 * <li><code>"S"</code>: For screens smaller than 520 pixels.</li>
 * <li><code>"M"</code>: For screens greater than or equal to 520 pixels and smaller than 960 pixels.</li>
 * <li><code>"L"</code>: For screens greater than or equal to 960 pixels.</li>
 * </ul>
 * 
 * To use this range set, you must initialize it explicitly ({@link sap.ui.Device.media.initRangeSet}).
 * 
 * If this range set is initialized, a CSS class is added to the page root (<code>html</code> tag) which indicates the current
 * screen width range: <code>sapUiMedia-3Step-<i>NAME_OF_THE_INTERVAL</i></code>.
 * @public
 * 
 * @memberof sap.ui.Device.media.RANGESETS
 */
sap.ui.Device.media.RANGESETS.SAP_3STEPS = undefined;

/**
 * A 4-step range set (S-XL).
 * 
 * The ranges of this set are:
 * <ul>
 * <li><code>"S"</code>: For screens smaller than 520 pixels.</li>
 * <li><code>"M"</code>: For screens greater than or equal to 520 pixels and smaller than 760 pixels.</li>
 * <li><code>"L"</code>: For screens greater than or equal to 760 pixels and smaller than 960 pixels.</li>
 * <li><code>"XL"</code>: For screens greater than or equal to 960 pixels.</li>
 * </ul>
 * 
 * To use this range set, you must initialize it explicitly ({@link sap.ui.Device.media.initRangeSet}).
 * 
 * If this range set is initialized, a CSS class is added to the page root (<code>html</code> tag) which indicates the current
 * screen width range: <code>sapUiMedia-4Step-<i>NAME_OF_THE_INTERVAL</i></code>.
 * @public
 * 
 * @memberof sap.ui.Device.media.RANGESETS
 */
sap.ui.Device.media.RANGESETS.SAP_4STEPS = undefined;

/**
 * A 6-step range set (XS-XXL).
 * 
 * The ranges of this set are:
 * <ul>
 * <li><code>"XS"</code>: For screens smaller than 241 pixels.</li>
 * <li><code>"S"</code>: For screens greater than or equal to 241 pixels and smaller than 400 pixels.</li>
 * <li><code>"M"</code>: For screens greater than or equal to 400 pixels and smaller than 541 pixels.</li>
 * <li><code>"L"</code>: For screens greater than or equal to 541 pixels and smaller than 768 pixels.</li>
 * <li><code>"XL"</code>: For screens greater than or equal to 768 pixels and smaller than 960 pixels.</li>
 * <li><code>"XXL"</code>: For screens greater than or equal to 960 pixels.</li>
 * </ul>
 * 
 * To use this range set, you must initialize it explicitly ({@link sap.ui.Device.media.initRangeSet}).
 * 
 * If this range set is initialized, a CSS class is added to the page root (<code>html</code> tag) which indicates the current
 * screen width range: <code>sapUiMedia-6Step-<i>NAME_OF_THE_INTERVAL</i></code>.
 * @public
 * 
 * @memberof sap.ui.Device.media.RANGESETS
 */
sap.ui.Device.media.RANGESETS.SAP_6STEPS = undefined;

/**
 * A 3-step range set (Phone, Tablet, Desktop).
 * 
 * The ranges of this set are:
 * <ul>
 * <li><code>"Phone"</code>: For screens smaller than 600 pixels.</li>
 * <li><code>"Tablet"</code>: For screens greater than or equal to 600 pixels and smaller than 1024 pixels.</li>
 * <li><code>"Desktop"</code>: For screens greater than or equal to 1024 pixels.</li>
 * </ul>
 * 
 * This range set is initialized by default. An initialization via {@link sap.ui.Device.media.initRangeSet} is not needed.
 * 
 * A CSS class is added to the page root (<code>html</code> tag) which indicates the current
 * screen width range: <code>sapUiMedia-Std-<i>NAME_OF_THE_INTERVAL</i></code>.
 * Furthermore there are 5 additional CSS classes to hide elements based on the width of the screen:
 * <ul>
 * <li><code>sapUiHideOnPhone</code>: Will be hidden if the screen has 600px or more</li>
 * <li><code>sapUiHideOnTablet</code>: Will be hidden if the screen has less than 600px or more than 1023px</li>
 * <li><code>sapUiHideOnDesktop</code>: Will be hidden if the screen is smaller than 1024px</li>
 * <li><code>sapUiVisibleOnlyOnPhone</code>: Will be visible if the screen has less than 600px</li>
 * <li><code>sapUiVisibleOnlyOnTablet</code>: Will be visible if the screen has 600px or more but less than 1024px</li>
 * <li><code>sapUiVisibleOnlyOnDesktop</code>: Will be visible if the screen has 1024px or more</li>
 * </ul>
 * @public
 * 
 * @memberof sap.ui.Device.media.RANGESETS
 */
sap.ui.Device.media.RANGESETS.SAP_STANDARD = undefined;

/**
 * A 4-step range set (Phone, Tablet, Desktop, LargeDesktop).
 * 
 * The ranges of this set are:
 * <ul>
 * <li><code>"Phone"</code>: For screens smaller than 600 pixels.</li>
 * <li><code>"Tablet"</code>: For screens greater than or equal to 600 pixels and smaller than 1024 pixels.</li>
 * <li><code>"Desktop"</code>: For screens greater than or equal to 1024 pixels and smaller than 1440 pixels.</li>
 * <li><code>"LargeDesktop"</code>: For screens greater than or equal to 1440 pixels.</li>
 * </ul>
 * 
 * This range set is initialized by default. An initialization via {@link sap.ui.Device.media.initRangeSet} is not needed.
 * 
 * A CSS class is added to the page root (<code>html</code> tag) which indicates the current
 * screen width range: <code>sapUiMedia-StdExt-<i>NAME_OF_THE_INTERVAL</i></code>.
 * @public
 * 
 * @memberof sap.ui.Device.media.RANGESETS
 */
sap.ui.Device.media.RANGESETS.SAP_STANDARD_EXTENDED = undefined;


// ---- sap.ui.Device.orientation --------------------------------------------------------------------------

/**
 * If this flag is set to <code>true</code>, the screen is currently in landscape mode (the width is greater than the height).
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.orientation
 */
sap.ui.Device.orientation.landscape = false;

/**
 * If this flag is set to <code>true</code>, the screen is currently in portrait mode (the height is greater than the width).
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.orientation
 */
sap.ui.Device.orientation.portrait = false;


// ---- sap.ui.Device.os --------------------------------------------------------------------------

/**
 * If this flag is set to <code>true</code>, an Android operating system is used.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.android = false;

/**
 * If this flag is set to <code>true</code>, a Blackberry operating system is used.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.blackberry = false;

/**
 * If this flag is set to <code>true</code>, an iOS operating system is used.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.ios = false;

/**
 * If this flag is set to <code>true</code>, a Linux operating system is used.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.linux = false;

/**
 * If this flag is set to <code>true</code>, a Mac operating system is used.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.macintosh = false;

/**
 * The name of the operating system.
 * 
 * @see sap.ui.Device.os.OS
 * @type String
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.name = null;

/**
 * The version of the operating system as <code>float</code>.
 * 
 * Might be <code>-1</code> if no version can be determined.
 * @type float
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.version = 0.0;

/**
 * The version of the operating system as <code>string</code>.
 * 
 * Might be empty if no version can be determined.
 * @type String
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.versionStr = null;

/**
 * If this flag is set to <code>true</code>, a Windows operating system is used.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.windows = false;

/**
 * If this flag is set to <code>true</code>, a Windows Phone operating system is used.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.os
 */
sap.ui.Device.os.windows_phone = false;


// ---- sap.ui.Device.os.OS --------------------------------------------------------------------------

/**
 * Android operating system name.
 * 
 * @see sap.ui.Device.os.name
 * @public
 * 
 * @memberof sap.ui.Device.os.OS
 */
sap.ui.Device.os.OS.ANDROID = undefined;

/**
 * Blackberry operating system name.
 * 
 * @see sap.ui.Device.os.name
 * @public
 * 
 * @memberof sap.ui.Device.os.OS
 */
sap.ui.Device.os.OS.BLACKBERRY = undefined;

/**
 * iOS operating system name.
 * 
 * @see sap.ui.Device.os.name
 * @public
 * 
 * @memberof sap.ui.Device.os.OS
 */
sap.ui.Device.os.OS.IOS = undefined;

/**
 * Linux operating system name.
 * 
 * @see sap.ui.Device.os.name
 * @public
 * 
 * @memberof sap.ui.Device.os.OS
 */
sap.ui.Device.os.OS.LINUX = undefined;

/**
 * MAC operating system name.
 * 
 * @see sap.ui.Device.os.name
 * @public
 * 
 * @memberof sap.ui.Device.os.OS
 */
sap.ui.Device.os.OS.MACINTOSH = undefined;

/**
 * Windows operating system name.
 * 
 * @see sap.ui.Device.os.name
 * @public
 * 
 * @memberof sap.ui.Device.os.OS
 */
sap.ui.Device.os.OS.WINDOWS = undefined;

/**
 * Windows Phone operating system name.
 * 
 * @see sap.ui.Device.os.name
 * @public
 * 
 * @memberof sap.ui.Device.os.OS
 */
sap.ui.Device.os.OS.WINDOWS_PHONE = undefined;


// ---- sap.ui.Device.resize --------------------------------------------------------------------------

/**
 * The current height of the document's window in pixels.
 * @type integer
 * @public
 * 
 * @memberof sap.ui.Device.resize
 */
sap.ui.Device.resize.height = null;

/**
 * The current width of the document's window in pixels.
 * @type integer
 * @public
 * 
 * @memberof sap.ui.Device.resize
 */
sap.ui.Device.resize.width = null;


// ---- sap.ui.Device.support --------------------------------------------------------------------------

/**
 * If this flag is set to <code>true</code>, the used browser natively supports media queries via JavaScript.
 * 
 * <b>Note:</b> The {@link sap.ui.Device.media media queries API} of the device API can also be used when there is no native support.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.support
 */
sap.ui.Device.support.matchmedia = false;

/**
 * If this flag is set to <code>true</code>, the used browser natively supports events of media queries via JavaScript.
 * 
 * <b>Note:</b> The {@link sap.ui.Device.media media queries API} of the device API can also be used when there is no native support.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.support
 */
sap.ui.Device.support.matchmedialistener = false;

/**
 * If this flag is set to <code>true</code>, the used browser natively supports the <code>orientationchange</code> event.
 * 
 * <b>Note:</b> The {@link sap.ui.Device.orientation orientation event} of the device API can also be used when there is no native support.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.support
 */
sap.ui.Device.support.orientation = false;

/**
 * If this flag is set to <code>true</code>, the used browser supports pointer events.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.support
 */
sap.ui.Device.support.pointer = false;

/**
 * If this flag is set to <code>true</code>, the device has a display with a high resolution.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.support
 */
sap.ui.Device.support.retina = false;

/**
 * If this flag is set to <code>true</code>, the used browser supports touch events.
 * 
 * <b>Note:</b> This flag indicates whether the used browser supports touch events or not.
 * This does not necessarily mean that the used device has a touchable screen.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.support
 */
sap.ui.Device.support.touch = false;

/**
 * If this flag is set to <code>true</code>, the used browser supports web sockets.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.support
 */
sap.ui.Device.support.websocket = false;


// ---- sap.ui.Device.system --------------------------------------------------------------------------

/**
 * If this flag is set to <code>true</code>, the device is recognized as a combination of a desktop system and tablet.
 * 
 * Furthermore, a CSS class <code>sap-combi</code> is added to the document root element.
 * 
 * <b>Note:</b> This property is mainly for Microsoft Windows 8 (and following) devices where the mouse and touch event may be supported
 * natively by the browser being used. This property is set to <code>true</code> only when both mouse and touch event are natively supported.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.system
 */
sap.ui.Device.system.combi = false;

/**
 * If this flag is set to <code>true</code>, the device is recognized as a desktop system.
 * 
 * Furthermore, a CSS class <code>sap-desktop</code> is added to the document root element.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.system
 */
sap.ui.Device.system.desktop = false;

/**
 * If this flag is set to <code>true</code>, the device is recognized as a phone.
 * 
 * Furthermore, a CSS class <code>sap-phone</code> is added to the document root element.
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.system
 */
sap.ui.Device.system.phone = false;

/**
 * If this flag is set to <code>true</code>, the device is recognized as a tablet.
 * 
 * Furthermore, a CSS class <code>sap-tablet</code> is added to the document root element.
 * 
 * <b>Note:</b> This flag is also true for some browsers on desktop devices running on Windows 8 or higher. Also see the
 * documentation for {@link sap.ui.Device.system.combi} devices.
 * You can use the following logic to ensure that the current device is a tablet device:
 * 
 * <pre>
 * if(sap.ui.Device.system.tablet && !sap.ui.Device.system.desktop){
 * 	...tablet related commands...
 * }
 * </pre>
 * @type boolean
 * @public
 * 
 * @memberof sap.ui.Device.system
 */
sap.ui.Device.system.tablet = false;


// ---- sap.ui.model.analytics.odata4analytics.SortOrder --------------------------------------------------------------------------

/**
 * Sort Order: ascending.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortOrder.Ascending = "";

/**
 * Sort Order: descending.
 * 
 * @public
 * 
 */
sap.ui.model.analytics.odata4analytics.SortOrder.Descending = "";


// ---- sap.ui.model.BindingMode --------------------------------------------------------------------------

/**
 * BindingMode default means that the binding mode of the model is used
 * @public
 * 
 */
sap.ui.model.BindingMode.Default = "";

/**
 * BindingMode one time means value is only read from the model once
 * @public
 * 
 */
sap.ui.model.BindingMode.OneTime = "";

/**
 * BindingMode one way means from model to view
 * @public
 * 
 */
sap.ui.model.BindingMode.OneWay = "";

/**
 * BindingMode two way means from model to view and vice versa
 * @public
 * 
 */
sap.ui.model.BindingMode.TwoWay = "";


// ---- sap.ui.model.ChangeReason --------------------------------------------------------------------------

/**
 * A context was added to a binding.
 * @public
 * 
 * @memberof sap.ui.model.ChangeReason
 */
sap.ui.model.ChangeReason.Add = undefined;

/**
 * Binding changes a model property value
 * @public
 * 
 * @memberof sap.ui.model.ChangeReason
 */
sap.ui.model.ChangeReason.Binding = undefined;

/**
 * The list has changed
 * @public
 * 
 * @memberof sap.ui.model.ChangeReason
 */
sap.ui.model.ChangeReason.Change = undefined;

/**
 * The tree node was collapsed
 * @public
 * 
 * @memberof sap.ui.model.ChangeReason
 */
sap.ui.model.ChangeReason.Collapse = undefined;

/**
 * The list context has changed
 * @public
 * 
 * @memberof sap.ui.model.ChangeReason
 */
sap.ui.model.ChangeReason.Context = undefined;

/**
 * The tree node was expanded
 * @public
 * 
 * @memberof sap.ui.model.ChangeReason
 */
sap.ui.model.ChangeReason.Expand = undefined;

/**
 * The List was filtered
 * @public
 * 
 * @memberof sap.ui.model.ChangeReason
 */
sap.ui.model.ChangeReason.Filter = undefined;

/**
 * The list was refreshed
 * @public
 * 
 * @memberof sap.ui.model.ChangeReason
 */
sap.ui.model.ChangeReason.Refresh = undefined;

/**
 * The list was sorted
 * @public
 * 
 * @memberof sap.ui.model.ChangeReason
 */
sap.ui.model.ChangeReason.Sort = undefined;


// ---- sap.ui.model.FilterOperator --------------------------------------------------------------------------

/**
 * Used to filter a list based on filter criteria that are defined in a nested filter for dependent subitems.
 * <code>All</code> returns a list of those items for which <b>all</b> dependent subitems match the filter criteria of the nested filter.
 * For example, a list of customers can be filtered by filter criteria that are applied to the list of orders the customer placed in the past.
 * The filter returns a list of those customers that <b>always</b> ordered a specific product.
 * 
 * This filter operator is only supported in OData V4 models.
 * 
 * @since 1.48.0
 * @public
 * 
 */
sap.ui.model.FilterOperator.All = "";

/**
 * Used to filter a list based on filter criteria that are defined in a nested filter for dependent subitems.
 * <code>Any</code> returns a list of those items for which <b>at least one</b> dependent subitem matches the filter criteria of the nested filter.
 * For example, a list of customers can be filtered by filter criteria that are applied to the list of orders the customer placed in the past.
 * The filter returns a list of those customers that <b>at least once</b> ordered a specific product.
 * 
 * This filter operator is only supported in OData V4 models.
 * 
 * @since 1.48.0
 * @public
 * 
 */
sap.ui.model.FilterOperator.Any = "";

/**
 * FilterOperator between
 * When used on strings, the BT operator might not behave intuitively. For example,
 * when filtering a list of Names with BT "A", "B", all Names starting with "A" will be
 * included as well as the name "B" itself, but no other name starting with "B".
 * @public
 * 
 */
sap.ui.model.FilterOperator.BT = "";

/**
 * FilterOperator contains
 * @public
 * 
 */
sap.ui.model.FilterOperator.Contains = "";

/**
 * FilterOperator ends with
 * @public
 * 
 */
sap.ui.model.FilterOperator.EndsWith = "";

/**
 * FilterOperator equals
 * @public
 * 
 */
sap.ui.model.FilterOperator.EQ = "";

/**
 * FilterOperator greater or equals
 * @public
 * 
 */
sap.ui.model.FilterOperator.GE = "";

/**
 * FilterOperator greater than
 * @public
 * 
 */
sap.ui.model.FilterOperator.GT = "";

/**
 * FilterOperator less or equals
 * @public
 * 
 */
sap.ui.model.FilterOperator.LE = "";

/**
 * FilterOperator less than
 * @public
 * 
 */
sap.ui.model.FilterOperator.LT = "";

/**
 * FilterOperator not equals
 * @public
 * 
 */
sap.ui.model.FilterOperator.NE = "";

/**
 * FilterOperator starts with
 * @public
 * 
 */
sap.ui.model.FilterOperator.StartsWith = "";


// ---- sap.ui.model.FilterType --------------------------------------------------------------------------

/**
 * Filters which are changed by the application
 * @public
 * 
 */
sap.ui.model.FilterType.Application = "";

/**
 * Filters which are set by the different controls
 * @public
 * 
 */
sap.ui.model.FilterType.Control = "";


// ---- sap.ui.model.odata.BatchMode --------------------------------------------------------------------------

/**
 * Batch grouping enabled
 * @public
 * 
 * @memberof sap.ui.model.odata.BatchMode
 */
sap.ui.model.odata.BatchMode.Group = undefined;

/**
 * No batch requests
 * @public
 * 
 * @memberof sap.ui.model.odata.BatchMode
 */
sap.ui.model.odata.BatchMode.None = undefined;


// ---- sap.ui.model.odata.CountMode --------------------------------------------------------------------------

/**
 * Count is retrieved by a separate request upfront and inline with each data request.
 * 
 * The only purpose of this mode is to reflect the behavior of the {@link sap.ui.model.odata.ODataModel ODataModel (v1)}
 * before the introduction of the <code>CountMode</code>. For compatibility reasons, it is the
 * default for the <code>ODataModel</code> (v1) and shouldn't be used otherwise.
 * 
 * @deprecated As of 1.43, this shouldn't be used any longer, decide for one of the other modes.
 * @public
 * 
 */
sap.ui.model.odata.CountMode.Both = "";

/**
 * Count is retrieved by adding <code>$inlinecount=allpages</code> to data requests
 * as long as no count has been determined yet.
 * @public
 * 
 */
sap.ui.model.odata.CountMode.Inline = "";

/**
 * Count is retrieved by adding <code>$inlinecount=allpages</code> to every data request.
 * @public
 * 
 */
sap.ui.model.odata.CountMode.InlineRepeat = "";

/**
 * Count is not requested from the server.
 * @public
 * 
 */
sap.ui.model.odata.CountMode.None = "";

/**
 * Count is retrieved by sending a separate <code>$count</code> request before requesting data.
 * 
 * It depends on the concrete model implementation whether and how the <code>$count</code> request
 * and the data request are synchronized.
 * @public
 * 
 */
sap.ui.model.odata.CountMode.Request = "";


// ---- sap.ui.model.odata.OperationMode --------------------------------------------------------------------------

/**
 * With operation mode <code>Auto</code>, operations are either processed on the client or
 * on the server. The exact behavior depends on the configured {@link sap.ui.model.odata.CountMode CountMode},
 * on the <code>threshold</code> and on the size of the data:
 * <ol>
 * <li>Count Modes <code>Request</code> and <code>Both</code><br>
 * Initially the binding will issue a <code>$count</code> request without any filters/sorters.
 *   <ol type="a">
 *   <li>If the count is lower or equal to the threshold, the binding will behave like in operation mode
 *       <code>Client</code>, and a data request for all entries is issued.</li>
 *   <li>If the count exceeds the threshold, the binding will behave like in operation mode <code>Server</code>.</li>
 *   </ol>
 * </li>
 * 
 * <li>Count Modes <code>Inline</code> or </code>InlineRepeat<code><br>
 * The initial request tries to fetch as many entries as configured with the <code>threshold</code> parameter,
 * without specifying any filters/sorters. In addition, the query parameter <code>$inlinecount</code> is added.
 * The binding assumes, that the threshold given by the application can be met, but it adapts its behavior
 * depending on the response:
 *   <ol type="a">
 *   <li>If the response returns fewer (or just as many) entries as the threshold, the binding will behave exactly
 *       like when using the operation mode <code>Client</code>. Initially configured filters/sorters will be
 *       applied afterwards on the client.</li>
 *   <li>If the <code>$inlinecount</code> is higher than the threshold, the binding will behave like in operation
 *       mode <code>Server</code>. In this case a new data request containing the initially set filters/sorters
 *       will be issued.</li>
 *   </ol>
 * It is up to the application to chose an appropriate threshold value. Ideally, it should be high enough
 * to fetch all data in the most common scenarios (to avoid a fallback to operation mode <code>Server</code>,
 * requiring an additional request), but it also should be low enough to ensure a fast response in case there
 * is much more data than expected.
 * </li>
 * <li>Count mode <code>None</code> is not supported together with operation mode <code>Auto</code></li>
 * </ol>
 * 
 * @public
 * 
 */
sap.ui.model.odata.OperationMode.Auto = "";

/**
 * Operations are executed on the client, all entries must be available to be able to do so.
 * The initial request fetches the complete collection, filtering and sorting does not trigger further requests.
 * @public
 * 
 */
sap.ui.model.odata.OperationMode.Client = "";

/**
 * Operations are executed on the OData service, by appending corresponding URL parameters
 * (<code>$filter</code>, <code>$orderby</code>).
 * Each change in filtering or sorting triggers a new request to the server.
 * @public
 * 
 */
sap.ui.model.odata.OperationMode.Server = "";


// ---- sap.ui.model.odata.UpdateMethod --------------------------------------------------------------------------

/**
 * Update requests will be send with HTTP method <code>MERGE</code>.
 * 
 * @public
 * 
 */
sap.ui.model.odata.UpdateMethod.Merge = "";

/**
 * Update requests will be send with HTTP method <code>PUT</code>.
 * @public
 * 
 */
sap.ui.model.odata.UpdateMethod.Put = "";


// ---- sap.ui.model.odata.v4.ValueListType --------------------------------------------------------------------------

/**
 * There is one enumeration of fixed values.
 * 
 * @constant
 * @public
 * @since 1.45.0
 * 
 */
sap.ui.model.odata.v4.ValueListType.Fixed = "";

/**
 * There is no value list.
 * 
 * @constant
 * @public
 * @since 1.45.0
 * 
 */
sap.ui.model.odata.v4.ValueListType.None = "";

/**
 * There is a dynamic value list with multiple queries including selection criteria.
 * 
 * @constant
 * @public
 * @since 1.45.0
 * 
 */
sap.ui.model.odata.v4.ValueListType.Standard = "";


// ---- sap.ui.model.TreeAutoExpandMode --------------------------------------------------------------------------

/**
 * If supported by a backend provider with analytical capabilities, the requests needed for an automatic
 * node expansion are bundled.
 * @protected
 * 
 */
sap.ui.model.TreeAutoExpandMode.Bundled = "";

/**
 * Tree nodes will be expanded in sequence, level by level (Single requests are sent).
 * @protected
 * 
 */
sap.ui.model.TreeAutoExpandMode.Sequential = "";

